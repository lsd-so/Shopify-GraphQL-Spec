{"categories": [{"name": "Access", "queries": [], "mutations": [{"name": "appRevokeAccessScopes", "description": "Revokes access scopes previously granted for an app installation.", "arguments": [{"name": "scopes", "type": "[String!]!", "required": true, "description": "The list of scope handles to revoke."}], "returns": [], "examples": []}, {"name": "delegateAccessTokenCreate", "description": "Creates a delegate access token.\nTo learn more about creating delegate access tokens, refer to\nDelegate OAuth access tokens to subsystems.", "arguments": [{"name": "input", "type": "DelegateAccessTokenInput!", "required": true, "description": "The input fields for creating a delegate access token."}], "returns": [], "examples": []}, {"name": "storefrontAccessTokenCreate", "description": "Creates a storefront access token for use with the Storefront API.\nAn app can have a maximum of 100 active storefront access tokens for each shop.\nGet started with the Storefront API.", "arguments": [{"name": "input", "type": "StorefrontAccessTokenInput!", "required": true, "description": "Provides the input fields for creating a storefront access token."}], "returns": [], "examples": [{"description": "Create a Storefront Access Token", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation StorefrontAccessTokenCreate($input: StorefrontAccessTokenInput!) {\n    storefrontAccessTokenCreate(input: $input) {\n      userErrors {\n        field\n        message\n      }\n      shop {\n        id\n      }\n      storefrontAccessToken {\n        accessScopes {\n          handle\n        }\n        accessToken\n        title\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": {\n    \"title\": \"New Storefront Access Token\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Creates a new StorefrontAccessToken", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation storeFrontAccessTokenCreate($input: StorefrontAccessTokenInput!) {\n    storefrontAccessTokenCreate(input: $input) {\n      storefrontAccessToken {\n        id\n        accessToken\n        accessScopes {\n          handle\n        }\n        createdAt\n        title\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": {\n    \"title\": \"New Storefront Access Token\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "storefrontAccessTokenCreate reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation StorefrontAccessTokenCreate($input: StorefrontAccessTokenInput!) {\n    storefrontAccessTokenCreate(input: $input) {\n      userErrors {\n        field\n        message\n      }\n      shop {\n        id\n      }\n      storefrontAccessToken {\n        accessScopes {\n          handle\n        }\n        accessToken\n        title\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": {\n    \"title\": \"New Storefront Access Token\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "storefrontAccessTokenDelete", "description": "Deletes a storefront access token.", "arguments": [{"name": "input", "type": "StorefrontAccessTokenDeleteInput!", "required": true, "description": "Provides the input fields required to delete a storefront access token."}], "returns": [], "examples": [{"description": "Delete a Storefront Access Token.", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation storefrontAccessTokenDelete($input: StorefrontAccessTokenDeleteInput!) {\n    storefrontAccessTokenDelete(input: $input) {\n      deletedStorefrontAccessTokenId\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": {\n    \"id\": \"gid://shopify/StorefrontAccessToken/55270800\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Deletes an existing storefront access token", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation storefrontAccessTokenDelete($id: ID!) {\n    storefrontAccessTokenDelete(input: {id: $id}) {\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/StorefrontAccessToken/55270800\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "storefrontAccessTokenDelete reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation storefrontAccessTokenDelete($input: StorefrontAccessTokenDeleteInput!) {\n    storefrontAccessTokenDelete(input: $input) {\n      deletedStorefrontAccessTokenId\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": {\n    \"id\": \"gid://shopify/StorefrontAccessToken/55270800\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}], "objects": [{"name": "AccessScope", "description": "The permission required to access a Shopify Admin API or Storefront API resource for a shop. Merchants grant access scopes that are requested by applications.", "fields_and_connections": [{"name": "description", "type": "String!", "description": "A description of the actions that the access scope allows an app to perform.", "not_nullable": true}], "examples": []}, {"name": "DelegateAccessToken", "description": "A token that delegates a set of scopes from the original permission.\nTo learn more about creating delegate access tokens, refer to\nDelegate OAuth access tokens to subsystems.", "fields_and_connections": [{"name": "accessScopes", "type": "[String!]!", "description": "The list of permissions associated with the token.", "not_nullable": true}], "examples": []}, {"name": "StorefrontAccessToken", "description": "A token that's used to delegate unauthenticated access scopes to clients that need to access\nthe unauthenticated Storefront API.\nAn app can have a maximum of 100 active storefront access\ntokens for each shop.\nGet started with the Storefront API.", "fields_and_connections": [{"name": "accessScopes", "type": "[AccessScope!]!", "description": "List of permissions associated with the token.", "not_nullable": true}], "examples": []}]}, {"name": "Apps", "queries": [{"name": "app", "description": "Lookup an App by ID or return the currently authenticated App.", "arguments": [{"name": "id", "type": "ID", "required": true, "description": "The ID to lookup the App by."}], "returns": [], "examples": [{"description": "Get an app by its ID", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    app(id: \"gid://shopify/App/193172482\") {\n      title\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "Get the currently authenticated app", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    app {\n      title\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "Get the feedback field", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query ShopFeedbackList {\n    app(id: \"gid://shopify/App/88312\") {\n      feedback {\n        messages {\n          message\n        }\n        feedbackGeneratedAt\n        state\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}]}, {"name": "appByHandle", "description": "Fetches app by handle.\nReturns null if the app doesn't exist.", "arguments": [{"name": "handle", "type": "String!", "required": true, "description": "Handle of the App."}], "returns": [], "examples": []}, {"name": "appByKey", "description": "Fetches an app by its client ID.\nReturns null if the app doesn't exist.", "arguments": [{"name": "apiKey", "type": "String!", "required": true, "description": "Client ID of the app."}], "returns": [], "examples": []}, {"name": "appInstallation", "description": "Lookup an AppInstallation by ID or return the AppInstallation for the currently authenticated App.", "arguments": [{"name": "id", "type": "ID", "required": true, "description": "ID used to lookup AppInstallation."}], "returns": [], "examples": [{"description": "Get a metafield attached to an app installation", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query AppInstallationMetafield($namespace: String!, $key: String!, $ownerId: ID!) {\n    appInstallation(id: $ownerId) {\n      apiKey: metafield(namespace: $namespace, key: $key) {\n        value\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"namespace\": \"secret_keys\",\n  \"key\": \"api_key\",\n  \"ownerId\": \"gid://shopify/AppInstallation/1002334195\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Get metafields attached to an app installation", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query AppInstallationMetafields($ownerId: ID!) {\n    appInstallation(id: $ownerId) {\n      metafields(first: 3) {\n        edges {\n          node {\n            namespace\n            key\n            value\n          }\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"ownerId\": \"gid://shopify/AppInstallation/1002334195\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Get the URL used to launch the application", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    appInstallation(id: \"gid://shopify/AppInstallation/1002334195\") {\n      launchUrl\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "Get the URL used to uninstall the application", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    appInstallation(id: \"gid://shopify/AppInstallation/688276949\") {\n      uninstallUrl\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "Get the access scopes associated with the app installation", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    appInstallation(id: \"gid://shopify/AppInstallation/1002334195\") {\n      accessScopes {\n        handle\n        description\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "Get the active subscriptions for the app installation", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    appInstallation(id: \"gid://shopify/AppInstallation/881878037\") {\n      activeSubscriptions {\n        id\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "Get the app associated with the installation", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    appInstallation(id: \"gid://shopify/AppInstallation/1002334195\") {\n      app {\n        id\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "Retrieves all application credits", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query GetAppInstallationCredits($appInstallationId: ID!) {\n    appInstallation(id: $appInstallationId) {\n      credits(first: 10) {\n        edges {\n          node {\n            amount {\n              amount\n              currencyCode\n            }\n            createdAt\n            description\n            id\n          }\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"appInstallationId\": \"gid://shopify/AppInstallation/236444539\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "appInstallations", "description": "A list of app installations. To use this query, you need to contact Shopify Support to grant your custom app the read_apps access scope. Public apps can't be granted this access scope.", "arguments": [{"name": "after", "type": "String", "required": true, "description": "The elements that come after the specified cursor."}], "returns": [], "examples": []}, {"name": "currentAppInstallation", "description": "Return the AppInstallation for the currently authenticated App.", "arguments": [{"name": "AppInstallation", "type": "AppInstallation!", "required": true, "description": "Represents an installed application on a shop."}], "returns": [], "examples": [{"description": "Get a list of access scopes", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query AccessScopeList {\n    currentAppInstallation {\n      accessScopes {\n        handle\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "Retrieves a list of application charges", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    currentAppInstallation {\n      oneTimePurchases(first: 10) {\n        edges {\n          node {\n            createdAt\n            id\n            name\n            price {\n              amount\n              currencyCode\n            }\n            status\n            test\n          }\n        }\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "Retrieves a list of recurring application charges", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query GetRecurringApplicationCharges {\n    currentAppInstallation {\n      activeSubscriptions {\n        id\n        name\n        status\n        lineItems {\n          id\n          plan {\n            pricingDetails {\n              __typename\n            }\n          }\n        }\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}]}, {"name": "mobilePlatformApplication", "description": "Return a mobile platform application by its ID.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "ID of the mobile platform app."}], "returns": [], "examples": [{"description": "Overview", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query MobilePlatformApplicationQuery {\n    mobilePlatformApplication(id: \"gid://shopify/MobilePlatformApplication/1066176000\") {\n      ... on AndroidApplication {\n        id\n        applicationId\n        sha256CertFingerprints\n        appLinksEnabled\n        __typename\n      }\n      ... on AppleApplication {\n        id\n        appId\n        universalLinksEnabled\n        appClipApplicationId\n        appClipsEnabled\n        __typename\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}]}, {"name": "mobilePlatformApplications", "description": "List the mobile platform applications.", "arguments": [{"name": "after", "type": "String", "required": true, "description": "The elements that come after the specified cursor."}], "returns": [], "examples": [{"description": "Overview", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query MobilePlatformApplicationQuery {\n    mobilePlatformApplications(first: 10) {\n      edges {\n        node {\n          ... on AndroidApplication {\n            id\n            applicationId\n            sha256CertFingerprints\n            appLinksEnabled\n            __typename\n          }\n          ... on AppleApplication {\n            id\n            appId\n            universalLinksEnabled\n            appClipApplicationId\n            appClipsEnabled\n            sharedWebCredentialsEnabled\n            __typename\n          }\n        }\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}]}, {"name": "publication", "description": "Lookup a publication by ID.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID of the Publication to return."}], "returns": [], "examples": [{"description": "Retrieve a publication that doesn't exist", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query publication($id: ID!) {\n    publication(id: $id) {\n      name\n      collections(first: 5) {\n        edges {\n          node {\n            id\n            title\n            updatedAt\n          }\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/Publication/-1\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Retrieve an existing publication", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query publication($id: ID!) {\n    publication(id: $id) {\n      name\n      collections(first: 5) {\n        edges {\n          node {\n            id\n            title\n            updatedAt\n          }\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/Publication/244171671\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "publications", "description": "List of publications.", "arguments": [{"name": "after", "type": "String", "required": true, "description": "The elements that come after the specified cursor."}], "returns": [], "examples": []}, {"name": "publicationsCount", "description": "Count of publications.", "arguments": [{"name": "catalogType", "type": "CatalogType", "required": true, "description": "Filter publications by catalog type."}], "returns": [], "examples": []}], "mutations": [{"name": "mobilePlatformApplicationCreate", "description": "Create a mobile platform application.", "arguments": [{"name": "input", "type": "MobilePlatformApplicationCreateInput!", "required": true, "description": "The input to create a mobile platform application."}], "returns": [], "examples": [{"description": "Create a mobile platform application", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation mobilePlatformApplicationCreate($input: MobilePlatformApplicationCreateInput!) {\n    mobilePlatformApplicationCreate(input: $input) {\n      mobilePlatformApplication {\n        ... on AppleApplication {\n          id\n          appId\n          universalLinksEnabled\n          sharedWebCredentialsEnabled\n          appClipsEnabled\n          appClipApplicationId\n        }\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": {\n    \"apple\": {\n      \"appId\": \"com.apple.package\",\n      \"appClipsEnabled\": true,\n      \"appClipApplicationId\": \"clip.app\",\n      \"universalLinksEnabled\": false,\n      \"sharedWebCredentialsEnabled\": false\n    }\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Create an Android Mobile Platform Application", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation CreateMobilePlatformApplication($input: MobilePlatformApplicationCreateInput!) {\n    mobilePlatformApplicationCreate(input: $input) {\n      mobilePlatformApplication {\n        ... on AndroidApplication {\n          id\n          applicationId\n          sha256CertFingerprints\n          appLinksEnabled\n          __typename\n        }\n      }\n      userErrors {\n        field\n        message\n        code\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": {\n    \"android\": {\n      \"applicationId\": \"com.android.package\",\n      \"appLinksEnabled\": true,\n      \"sha256CertFingerprints\": [\"A1:B2:C3:D4\"]\n    }\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Create an Apple Mobile Platform Application", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation CreateMobilePlatformApplication($input: MobilePlatformApplicationCreateInput!) {\n    mobilePlatformApplicationCreate(input: $input) {\n      mobilePlatformApplication {\n        ... on AppleApplication {\n          id\n          appId\n          universalLinksEnabled\n          sharedWebCredentialsEnabled\n          appClipsEnabled\n          appClipApplicationId\n          __typename\n        }\n      }\n      userErrors {\n        field\n        message\n        code\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": {\n    \"apple\": {\n      \"appId\": \"com.apple.package\",\n      \"appClipsEnabled\": true,\n      \"appClipApplicationId\": \"clip.app\",\n      \"universalLinksEnabled\": false,\n      \"sharedWebCredentialsEnabled\": false\n    }\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "mobilePlatformApplicationCreate reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation mobilePlatformApplicationCreate($input: MobilePlatformApplicationCreateInput!) {\n    mobilePlatformApplicationCreate(input: $input) {\n      mobilePlatformApplication {\n        ... on AppleApplication {\n          id\n          appId\n          universalLinksEnabled\n          sharedWebCredentialsEnabled\n          appClipsEnabled\n          appClipApplicationId\n        }\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": {\n    \"apple\": {\n      \"appId\": \"com.apple.package\",\n      \"appClipsEnabled\": true,\n      \"appClipApplicationId\": \"clip.app\",\n      \"universalLinksEnabled\": false,\n      \"sharedWebCredentialsEnabled\": false\n    }\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "mobilePlatformApplicationDelete", "description": "Delete a mobile platform application.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID of the Mobile Platform Application to be deleted."}], "returns": [], "examples": [{"description": "Delete a mobile platform application", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation DeleteMobilePlatformApplication($id: ID!) {\n    mobilePlatformApplicationDelete(id: $id) {\n      deletedMobilePlatformApplicationId\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/MobilePlatformApplication/1066176028\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "mobilePlatformApplicationDelete reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation DeleteMobilePlatformApplication($id: ID!) {\n    mobilePlatformApplicationDelete(id: $id) {\n      deletedMobilePlatformApplicationId\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/MobilePlatformApplication/1066176028\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "mobilePlatformApplicationUpdate", "description": "Update a mobile platform application.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID of the Mobile Platform Application to be updated."}], "returns": [], "examples": [{"description": "Update a mobile platform application", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation MobilePlatformApplicationUpdate($id: ID!, $input: MobilePlatformApplicationUpdateInput!) {\n    mobilePlatformApplicationUpdate(id: $id, input: $input) {\n      mobilePlatformApplication {\n        ... on AppleApplication {\n          id\n          appId\n          universalLinksEnabled\n          sharedWebCredentialsEnabled\n          appClipsEnabled\n          appClipApplicationId\n        }\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/MobilePlatformApplication/1066176040\",\n  \"input\": {\n    \"apple\": {\n      \"appId\": \"com.apple.package\",\n      \"universalLinksEnabled\": false,\n      \"sharedWebCredentialsEnabled\": false,\n      \"appClipsEnabled\": true,\n      \"appClipApplicationId\": \"clip.app\"\n    }\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Update an Android Mobile Platform Application", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation UpdateMobilePlatformApplication($id: ID!, $input: MobilePlatformApplicationUpdateInput!) {\n    mobilePlatformApplicationUpdate(id: $id, input: $input) {\n      mobilePlatformApplication {\n        ... on AndroidApplication {\n          id\n          applicationId\n          sha256CertFingerprints\n          appLinksEnabled\n          __typename\n        }\n      }\n      userErrors {\n        field\n        message\n        code\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/MobilePlatformApplication/1066176035\",\n  \"input\": {\n    \"android\": {\n      \"applicationId\": \"com.android.package\",\n      \"appLinksEnabled\": true,\n      \"sha256CertFingerprints\": [\"A1:B2:C3:D4\"]\n    }\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Update an Apple Mobile Platform Application", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation UpdateMobilePlatformApplication($id: ID!, $input: MobilePlatformApplicationUpdateInput!) {\n    mobilePlatformApplicationUpdate(id: $id, input: $input) {\n      mobilePlatformApplication {\n        ... on AppleApplication {\n          id\n          appId\n          universalLinksEnabled\n          sharedWebCredentialsEnabled\n          appClipsEnabled\n          appClipApplicationId\n          __typename\n        }\n      }\n      userErrors {\n        field\n        message\n        code\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/MobilePlatformApplication/1066176032\",\n  \"input\": {\n    \"apple\": {\n      \"appId\": \"com.apple.package\",\n      \"appClipsEnabled\": true,\n      \"appClipApplicationId\": \"clip.app\",\n      \"universalLinksEnabled\": false,\n      \"sharedWebCredentialsEnabled\": false\n    }\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "mobilePlatformApplicationUpdate reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation MobilePlatformApplicationUpdate($id: ID!, $input: MobilePlatformApplicationUpdateInput!) {\n    mobilePlatformApplicationUpdate(id: $id, input: $input) {\n      mobilePlatformApplication {\n        ... on AppleApplication {\n          id\n          appId\n          universalLinksEnabled\n          sharedWebCredentialsEnabled\n          appClipsEnabled\n          appClipApplicationId\n        }\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/MobilePlatformApplication/1066176040\",\n  \"input\": {\n    \"apple\": {\n      \"appId\": \"com.apple.package\",\n      \"universalLinksEnabled\": false,\n      \"sharedWebCredentialsEnabled\": false,\n      \"appClipsEnabled\": true,\n      \"appClipApplicationId\": \"clip.app\"\n    }\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "publicationCreate", "description": "Creates a publication.", "arguments": [{"name": "input", "type": "PublicationCreateInput!", "required": true, "description": "The input fields to use when creating the publication."}], "returns": [], "examples": []}, {"name": "publicationDelete", "description": "Deletes a publication.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID of the publication to delete."}], "returns": [], "examples": []}, {"name": "publicationUpdate", "description": "Updates a publication.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID of the publication to update."}], "returns": [], "examples": []}, {"name": "shopResourceFeedbackCreate", "description": "The ResourceFeedback object lets your app report the status of shops and their resources. For example, if\nyour app is a marketplace channel, then you can use resource feedback to alert merchants that they need to connect their marketplace account by signing in.\nResource feedback notifications are displayed to the merchant on the home screen of their Shopify admin, and in the product details view for any products that are published to your app.\nThis resource should be used only in cases where you're describing steps that a merchant is required to complete. If your app offers optional or promotional set-up steps, or if it makes recommendations, then don't use resource feedback to let merchants know about them.\nSending feedback on a shop\nYou can send resource feedback on a shop to let the merchant know what steps they need to take to make sure that your app is set up correctly. Feedback can have one of two states: requires_action or success. You need to send a requires_action feedback request for each step that the merchant is required to complete.\nIf there are multiple set-up steps that require merchant action, then send feedback with a state of requires_action as merchants complete prior steps. And to remove the feedback message from the Shopify admin, send a success feedback request.\nImportant\nSending feedback replaces previously sent feedback for the shop. Send a new shopResourceFeedbackCreate mutation to push the latest state of a shop or its resources to Shopify.", "arguments": [{"name": "input", "type": "ResourceFeedbackCreateInput!", "required": true, "description": "The fields required to create shop feedback."}], "returns": [], "examples": [{"description": "Create a new ResourceFeedback", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation ShopResourceFeedbackCreate($input: ResourceFeedbackCreateInput!) {\n    shopResourceFeedbackCreate(input: $input) {\n      feedback {\n        messages {\n          message\n        }\n        feedbackGeneratedAt\n        state\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": {\n    \"messages\": [\"is not connected. Connect your account to use this sales channel.\"],\n    \"state\": \"REQUIRES_ACTION\",\n    \"feedbackGeneratedAt\": \"2024-12-05T14:05:02.351662Z\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Create a shop feedback record indicating a problem specific to your app", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation shopResourceFeedbackCreate($input: ResourceFeedbackCreateInput!) {\n    shopResourceFeedbackCreate(input: $input) {\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": {\n    \"messages\": [\"is not connected. Connect your account to use this sales channel.\"],\n    \"state\": \"REQUIRES_ACTION\",\n    \"feedbackGeneratedAt\": \"2024-12-05T14:05:00.688444Z\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Create a shop feedback record indicating the shop is usable by your app", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation shopResourceFeedbackCreate($input: ResourceFeedbackCreateInput!) {\n    shopResourceFeedbackCreate(input: $input) {\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": {\n    \"state\": \"ACCEPTED\",\n    \"feedbackGeneratedAt\": \"2024-12-05T14:05:01.601550Z\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Sending an invalid feedback payload returns an error", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation shopResourceFeedbackCreate($input: ResourceFeedbackCreateInput!) {\n    shopResourceFeedbackCreate(input: $input) {\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": {\n    \"state\": \"FOOBAR\",\n    \"feedbackGeneratedAt\": \"2024-12-05T14:05:01.831106Z\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Sending outdated feedback (previous feedback payload has a greater resource_updated_at value)\n            returns an error", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation ShopResourceFeedbackCreate($input: ResourceFeedbackCreateInput!) {\n    shopResourceFeedbackCreate(input: $input) {\n      feedback {\n        messages {\n          message\n        }\n        feedbackGeneratedAt\n        state\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": {\n    \"messages\": [\"is not connected. Connect your account to use this sales channel.\"],\n    \"state\": \"REQUIRES_ACTION\",\n    \"feedbackGeneratedAt\": \"2024-12-05T14:05:02.351662Z\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "shopResourceFeedbackCreate reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation ShopResourceFeedbackCreate($input: ResourceFeedbackCreateInput!) {\n    shopResourceFeedbackCreate(input: $input) {\n      feedback {\n        messages {\n          message\n        }\n        feedbackGeneratedAt\n        state\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": {\n    \"messages\": [\"is not connected. Connect your account to use this sales channel.\"],\n    \"state\": \"REQUIRES_ACTION\",\n    \"feedbackGeneratedAt\": \"2024-12-05T14:05:02.351662Z\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}], "objects": [{"name": "AndroidApplication", "description": "The Android mobile platform application.", "fields_and_connections": [{"name": "applicationId", "type": "String", "description": "The Android application ID.", "not_nullable": true}], "examples": []}, {"name": "App", "description": "A Shopify application.", "fields_and_connections": [{"name": "apiKey", "type": "String!", "description": "A unique application API identifier.", "not_nullable": true}], "examples": []}, {"name": "AppFeedback", "description": "Reports the status of shops and their resources and displays this information\nwithin Shopify admin. AppFeedback is used to notify merchants about steps they need to take\nto set up an app on their store.", "fields_and_connections": [{"name": "app", "type": "App!", "description": "The application associated to the feedback.", "not_nullable": true}], "examples": []}, {"name": "AppInstallation", "description": "Represents an installed application on a shop.", "fields_and_connections": [{"name": "accessScopes", "type": "[AccessScope!]!", "description": "The access scopes granted to the application by a merchant during installation.", "not_nullable": true}], "examples": []}, {"name": "AppleApplication", "description": "The Apple mobile platform application.", "fields_and_connections": [{"name": "appClipApplicationId", "type": "String", "description": "The iOS App Clip application ID.", "not_nullable": true}], "examples": []}, {"name": "FailedRequirement", "description": "Requirements that must be met before an app can be installed.", "fields_and_connections": [{"name": "action", "type": "NavigationItem", "description": "Action to be taken to resolve a failed requirement, including URL link.", "not_nullable": true}], "examples": []}, {"name": "Link", "description": "A link to direct users to.", "fields_and_connections": [{"name": "label", "type": "String!", "description": "A context-sensitive label for the link.", "not_nullable": true}], "examples": []}, {"name": "Publication", "description": "A publication is a group of products and collections that is published to an app.", "fields_and_connections": [{"name": "autoPublish", "type": "Boolean!", "description": "Whether new products are automatically published to this publication.", "not_nullable": true}], "examples": []}, {"name": "ResourceFeedback", "description": "Represents feedback from apps about a resource, and the steps required to set up the apps on the shop.", "fields_and_connections": [{"name": "details", "type": "[AppFeedback!]!", "description": "List of AppFeedback detailing issues regarding a resource.", "not_nullable": true}], "examples": []}]}, {"name": "B2B", "queries": [{"name": "companies", "description": "Returns the list of companies in the shop.", "arguments": [{"name": "after", "type": "String", "required": true, "description": "The elements that come after the specified cursor."}], "returns": [], "examples": []}, {"name": "companiesCount", "description": "The number of companies for a shop.", "arguments": [{"name": "Count", "type": "Count", "required": true, "description": "Details for count of elements."}], "returns": [], "examples": []}, {"name": "company", "description": "Returns a Company object by ID.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID of the Company to return."}], "returns": [], "examples": [{"description": "Get a company by its ID", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    company(id: \"gid://shopify/Company/426793626\") {\n      id\n      name\n      note\n      externalId\n      totalSpent {\n        amount\n        currencyCode\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "Get a metafield attached to a company", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query CompanyMetafield($namespace: String!, $key: String!, $ownerId: ID!) {\n    company(id: $ownerId) {\n      industry: metafield(namespace: $namespace, key: $key) {\n        value\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"namespace\": \"my_fields\",\n  \"key\": \"industry\",\n  \"ownerId\": \"gid://shopify/Company/426793626\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Get metafields attached to a company", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query CompanyMetafields($ownerId: ID!) {\n    company(id: $ownerId) {\n      metafields(first: 3) {\n        edges {\n          node {\n            namespace\n            key\n            value\n          }\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"ownerId\": \"gid://shopify/Company/426793626\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Get pinned metafield definitions associated with a company", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query CompanyMetafieldDefinitions($ownerId: ID!, $first: Int, $pinnedStatus: MetafieldDefinitionPinnedStatus, $sortKey: MetafieldDefinitionSortKeys) {\n    company(id: $ownerId) {\n      metafieldDefinitions(first: $first, pinnedStatus: $pinnedStatus, sortKey: $sortKey) {\n        edges {\n          node {\n            name\n            namespace\n            key\n            type {\n              name\n            }\n          }\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"pinnedStatus\": \"PINNED\",\n  \"ownerId\": \"gid://shopify/Company/426793626\",\n  \"first\": 10,\n  \"sortKey\": \"PINNED_POSITION\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "companyContact", "description": "Returns a CompanyContact object by ID.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID of the CompanyContact to return."}], "returns": [], "examples": []}, {"name": "companyContactRole", "description": "Returns a CompanyContactRole object by ID.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID of the CompanyContactRole to return."}], "returns": [], "examples": []}, {"name": "companyLocation", "description": "Returns a CompanyLocation object by ID.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID of the CompanyLocation to return."}], "returns": [], "examples": []}, {"name": "companyLocations", "description": "Returns the list of company locations in the shop.", "arguments": [{"name": "after", "type": "String", "required": true, "description": "The elements that come after the specified cursor."}], "returns": [], "examples": []}], "mutations": [{"name": "companiesDelete", "description": "Deletes a list of companies.", "arguments": [{"name": "companyIds", "type": "[ID!]!", "required": true, "description": "A list of IDs of companies to delete."}], "returns": [], "examples": []}, {"name": "companyAddressDelete", "description": "Deletes a company address.", "arguments": [{"name": "addressId", "type": "ID!", "required": true, "description": "The ID of the address to delete."}], "returns": [], "examples": []}, {"name": "companyAssignCustomerAsContact", "description": "Assigns the customer as a company contact.", "arguments": [{"name": "companyId", "type": "ID!", "required": true, "description": "The ID of the company to assign the contact to."}], "returns": [], "examples": []}, {"name": "companyAssignMainContact", "description": "Assigns the main contact for the company.", "arguments": [{"name": "companyContactId", "type": "ID!", "required": true, "description": "The ID of the company contact to be assigned as the main contact."}], "returns": [], "examples": []}, {"name": "companyContactAssignRole", "description": "Assigns a role to a contact for a location.", "arguments": [{"name": "companyContactId", "type": "ID!", "required": true, "description": "The ID of the contact to assign a role to."}], "returns": [], "examples": []}, {"name": "companyContactAssignRoles", "description": "Assigns roles on a company contact.", "arguments": [{"name": "companyContactId", "type": "ID!", "required": true, "description": "The contact whose roles are being assigned."}], "returns": [], "examples": []}, {"name": "companyContactCreate", "description": "Creates a company contact and the associated customer.", "arguments": [{"name": "companyId", "type": "ID!", "required": true, "description": "The ID of the company that the company contact belongs to."}], "returns": [], "examples": [{"description": "Create a company contact", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation CompanyContactCreate($companyId: ID!, $input: CompanyContactInput!) {\n    companyContactCreate(companyId: $companyId, input: $input) {\n      companyContact {\n        id\n        company {\n          id\n          name\n        }\n        customer {\n          id\n          firstName\n          lastName\n          email\n        }\n      }\n      userErrors {\n        field\n        message\n        code\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"companyId\": \"gid://shopify/Company/426793626\",\n  \"input\": {\n    \"email\": \"avery.brown@example.com\",\n    \"firstName\": \"Avery\",\n    \"lastName\": \"Brown\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "companyContactCreate reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation CompanyContactCreate($companyId: ID!, $input: CompanyContactInput!) {\n    companyContactCreate(companyId: $companyId, input: $input) {\n      companyContact {\n        id\n        company {\n          id\n          name\n        }\n        customer {\n          id\n          firstName\n          lastName\n          email\n        }\n      }\n      userErrors {\n        field\n        message\n        code\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"companyId\": \"gid://shopify/Company/426793626\",\n  \"input\": {\n    \"email\": \"avery.brown@example.com\",\n    \"firstName\": \"Avery\",\n    \"lastName\": \"Brown\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "companyContactDelete", "description": "Deletes a company contact.", "arguments": [{"name": "companyContactId", "type": "ID!", "required": true, "description": "The ID of the company contact to delete."}], "returns": [], "examples": []}, {"name": "companyContactRemoveFromCompany", "description": "Removes a company contact from a Company.", "arguments": [{"name": "companyContactId", "type": "ID!", "required": true, "description": "The ID of the company contact to remove from the Company."}], "returns": [], "examples": []}, {"name": "companyContactRevokeRole", "description": "Revokes a role on a company contact.", "arguments": [{"name": "companyContactId", "type": "ID!", "required": true, "description": "The ID of the contact to revoke a role from."}], "returns": [], "examples": []}, {"name": "companyContactRevokeRoles", "description": "Revokes roles on a company contact.", "arguments": [{"name": "companyContactId", "type": "ID!", "required": true, "description": "The contact whose roles are being revoked."}], "returns": [], "examples": []}, {"name": "companyContactsDelete", "description": "Deletes one or more company contacts.", "arguments": [{"name": "companyContactIds", "type": "[ID!]!", "required": true, "description": "The list of IDs of the company contacts to delete."}], "returns": [], "examples": []}, {"name": "companyContactUpdate", "description": "Updates a company contact.", "arguments": [{"name": "companyContactId", "type": "ID!", "required": true, "description": "The ID of the company contact to be updated."}], "returns": [], "examples": []}, {"name": "companyCreate", "description": "Creates a company.", "arguments": [{"name": "input", "type": "CompanyCreateInput!", "required": true, "description": "The fields to use when creating the company."}], "returns": [], "examples": [{"description": "Create a company", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation CompanyCreate($input: CompanyCreateInput!) {\n    companyCreate(input: $input) {\n      company {\n        id\n        name\n        externalId\n        mainContact {\n          id\n          customer {\n            id\n            email\n            firstName\n            lastName\n          }\n        }\n        contacts(first: 5) {\n          edges {\n            node {\n              id\n              customer {\n                email\n                firstName\n                lastName\n              }\n            }\n          }\n        }\n        contactRoles(first: 5) {\n          edges {\n            node {\n              id\n              name\n            }\n          }\n        }\n        locations(first: 5) {\n          edges {\n            node {\n              id\n              name\n              shippingAddress {\n                firstName\n                lastName\n                address1\n                city\n                province\n                zip\n                country\n              }\n            }\n          }\n        }\n      }\n      userErrors {\n        field\n        message\n        code\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": {\n    \"company\": {\n      \"name\": \"Postal Cards Inc\",\n      \"externalId\": \"01456606-0001\"\n    },\n    \"companyLocation\": {\n      \"name\": \"Ottawa Postal Cards\",\n      \"shippingAddress\": {\n        \"firstName\": \"Avery\",\n        \"lastName\": \"Brown\",\n        \"address1\": \"150 Elgin Street\",\n        \"address2\": \"8th Floor\",\n        \"city\": \"Ottawa\",\n        \"zoneCode\": \"ON\",\n        \"zip\": \"K2P 1L4\",\n        \"countryCode\": \"CA\"\n      },\n      \"billingSameAsShipping\": true\n    },\n    \"companyContact\": {\n      \"email\": \"avery.brown@example.com\",\n      \"firstName\": \"Avery\",\n      \"lastName\": \"Brown\"\n    }\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Create a company with required fields only", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation CompanyCreate($input: CompanyCreateInput!) {\n    companyCreate(input: $input) {\n      company {\n        id\n        name\n        mainContact {\n          id\n        }\n        contactRoles(first: 5) {\n          edges {\n            node {\n              id\n              name\n            }\n          }\n        }\n        locations(first: 5) {\n          edges {\n            node {\n              id\n              name\n              shippingAddress {\n                firstName\n                lastName\n                address1\n                city\n                province\n                zip\n                country\n              }\n            }\n          }\n        }\n      }\n      userErrors {\n        field\n        message\n        code\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": {\n    \"company\": {\n      \"name\": \"Postal Cards Inc\"\n    }\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Creating a company without a name returns an error", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation CompanyCreate($input: CompanyCreateInput!) {\n    companyCreate(input: $input) {\n      company {\n        id\n        name\n        mainContact {\n          id\n        }\n        contactRoles(first: 5) {\n          edges {\n            node {\n              id\n              name\n            }\n          }\n        }\n        locations(first: 5) {\n          edges {\n            node {\n              id\n              name\n              shippingAddress {\n                firstName\n                lastName\n                address1\n                city\n                province\n                zip\n                country\n              }\n            }\n          }\n        }\n      }\n      userErrors {\n        field\n        message\n        code\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": {\n    \"company\": {\n      \"externalId\": \"123\"\n    }\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "companyCreate reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation CompanyCreate($input: CompanyCreateInput!) {\n    companyCreate(input: $input) {\n      company {\n        id\n        name\n        externalId\n        mainContact {\n          id\n          customer {\n            id\n            email\n            firstName\n            lastName\n          }\n        }\n        contacts(first: 5) {\n          edges {\n            node {\n              id\n              customer {\n                email\n                firstName\n                lastName\n              }\n            }\n          }\n        }\n        contactRoles(first: 5) {\n          edges {\n            node {\n              id\n              name\n            }\n          }\n        }\n        locations(first: 5) {\n          edges {\n            node {\n              id\n              name\n              shippingAddress {\n                firstName\n                lastName\n                address1\n                city\n                province\n                zip\n                country\n              }\n            }\n          }\n        }\n      }\n      userErrors {\n        field\n        message\n        code\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": {\n    \"company\": {\n      \"name\": \"Postal Cards Inc\",\n      \"externalId\": \"01456606-0001\"\n    },\n    \"companyLocation\": {\n      \"name\": \"Ottawa Postal Cards\",\n      \"shippingAddress\": {\n        \"firstName\": \"Avery\",\n        \"lastName\": \"Brown\",\n        \"address1\": \"150 Elgin Street\",\n        \"address2\": \"8th Floor\",\n        \"city\": \"Ottawa\",\n        \"zoneCode\": \"ON\",\n        \"zip\": \"K2P 1L4\",\n        \"countryCode\": \"CA\"\n      },\n      \"billingSameAsShipping\": true\n    },\n    \"companyContact\": {\n      \"email\": \"avery.brown@example.com\",\n      \"firstName\": \"Avery\",\n      \"lastName\": \"Brown\"\n    }\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "companyDelete", "description": "Deletes a company.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID of the company to delete."}], "returns": [], "examples": []}, {"name": "companyLocationAssignAddress", "description": "Updates an address on a company location.", "arguments": [{"name": "address", "type": "CompanyAddressInput!", "required": true, "description": "The input fields to use to update the address."}], "returns": [], "examples": []}, {"name": "companyLocationAssignRoles", "description": "Assigns roles on a company location.", "arguments": [{"name": "companyLocationId", "type": "ID!", "required": true, "description": "The location whose roles are being assigned."}], "returns": [], "examples": []}, {"name": "companyLocationAssignStaffMembers", "description": "Creates one or more mappings between a staff member at a shop and a company location.", "arguments": [{"name": "companyLocationId", "type": "ID!", "required": true, "description": "The ID of the company location to assign the staff member to."}], "returns": [], "examples": []}, {"name": "companyLocationAssignTaxExemptions", "description": "Assigns tax exemptions to the company location.", "arguments": [{"name": "companyLocationId", "type": "ID!", "required": true, "description": "The location to which the tax exemptions will be assigned."}], "returns": [], "examples": []}, {"name": "companyLocationCreate", "description": "Creates a company location.", "arguments": [{"name": "companyId", "type": "ID!", "required": true, "description": "The ID of the company that the company location belongs to."}], "returns": [], "examples": []}, {"name": "companyLocationCreateTaxRegistration", "description": "Creates a tax registration for a company location.", "arguments": [{"name": "locationId", "type": "ID!", "required": true, "description": "The ID of the company location that the tax registration gets assigned to."}], "returns": [], "examples": []}, {"name": "companyLocationDelete", "description": "Deletes a company location.", "arguments": [{"name": "companyLocationId", "type": "ID!", "required": true, "description": "The ID of the company location to delete."}], "returns": [], "examples": []}, {"name": "companyLocationRemoveStaffMembers", "description": "Deletes one or more existing mappings between a staff member at a shop and a company location.", "arguments": [{"name": "companyLocationStaffMemberAssignmentIds", "type": "[ID!]!", "required": true, "description": "The list of IDs of the company location staff member assignment to delete."}], "returns": [], "examples": []}, {"name": "companyLocationRevokeRoles", "description": "Revokes roles on a company location.", "arguments": [{"name": "companyLocationId", "type": "ID!", "required": true, "description": "The location whose roles are being revoked."}], "returns": [], "examples": []}, {"name": "companyLocationRevokeTaxExemptions", "description": "Revokes tax exemptions from the company location.", "arguments": [{"name": "companyLocationId", "type": "ID!", "required": true, "description": "The location from which the tax exemptions will be revoked."}], "returns": [], "examples": []}, {"name": "companyLocationRevokeTaxRegistration", "description": "Revokes tax registration on a company location.", "arguments": [{"name": "companyLocationId", "type": "ID!", "required": true, "description": "The location whose tax registration is being revoked."}], "returns": [], "examples": []}, {"name": "companyLocationsDelete", "description": "Deletes a list of company locations.", "arguments": [{"name": "companyLocationIds", "type": "[ID!]!", "required": true, "description": "A list of IDs of company locations to delete."}], "returns": [], "examples": []}, {"name": "companyLocationTaxSettingsUpdate", "description": "Sets the tax settings for a company location.", "arguments": [{"name": "companyLocationId", "type": "ID!", "required": true, "description": "The ID of the company location that the tax settings get assigned to."}], "returns": [], "examples": []}, {"name": "companyLocationUpdate", "description": "Updates a company location.", "arguments": [{"name": "companyLocationId", "type": "ID!", "required": true, "description": "The ID of the company location to update."}], "returns": [], "examples": []}, {"name": "companyRevokeMainContact", "description": "Revokes the main contact from the company.", "arguments": [{"name": "companyId", "type": "ID!", "required": true, "description": "The ID of the company to revoke the main contact from."}], "returns": [], "examples": []}, {"name": "companyUpdate", "description": "Updates a company.", "arguments": [{"name": "companyId", "type": "ID!", "required": true, "description": "The ID of the company to be updated."}], "returns": [], "examples": []}], "objects": [{"name": "Company", "description": "Represents information about a company which is also a customer of the shop.", "fields_and_connections": [{"name": "contactRoles", "type": "CompanyContactRoleConnection!", "description": "The list of roles for the company contacts.", "not_nullable": true}], "examples": []}, {"name": "CompanyAddress", "description": "Represents a billing or shipping address for a company location.", "fields_and_connections": [{"name": "address1", "type": "String!", "description": "The first line of the address. Typically the street address or PO Box number.", "not_nullable": true}], "examples": []}, {"name": "CompanyContact", "description": "A person that acts on behalf of company associated to a customer.", "fields_and_connections": [{"name": "company", "type": "Company!", "description": "The company to which the contact belongs.", "not_nullable": true}], "examples": []}, {"name": "CompanyContactRole", "description": "The role for a company contact.", "fields_and_connections": [{"name": "id", "type": "ID!", "description": "A globally-unique ID.", "not_nullable": true}], "examples": []}, {"name": "CompanyContactRoleAssignment", "description": "The CompanyContactRoleAssignment describes the company and location associated to a company contact's role.", "fields_and_connections": [{"name": "company", "type": "Company!", "description": "The company this role assignment belongs to.", "not_nullable": true}], "examples": []}, {"name": "CompanyLocation", "description": "A location or branch of a company that's a customer of the shop. Configuration of B2B relationship, for example prices lists and checkout settings, may be done for a location.", "fields_and_connections": [{"name": "billingAddress", "type": "CompanyAddress", "description": "The address used as billing address for the location.", "not_nullable": true}], "examples": []}, {"name": "CompanyLocationsCondition", "description": "A condition checking the company location a visitor is purchasing for.", "fields_and_connections": [{"name": "applicationLevel", "type": "MarketConditionApplicationType", "description": "The application level for the condition.", "not_nullable": true}], "examples": []}, {"name": "CompanyLocationStaffMemberAssignment", "description": "A representation of store's staff member who is assigned to a company location of the shop. The staff member's actions will be limited to objects associated with the assigned company location.", "fields_and_connections": [{"name": "companyLocation", "type": "CompanyLocation!", "description": "The company location the staff member is assigned to.", "not_nullable": true}], "examples": []}, {"name": "CompanyLocationTaxSettings", "description": "Represents the tax settings for a company location.", "fields_and_connections": [{"name": "taxExempt", "type": "Boolean!", "description": "Whether the location is exempt from taxes.", "not_nullable": true}], "examples": []}, {"name": "PurchasingCompany", "description": "Represents information about the purchasing company for the order or draft order.", "fields_and_connections": [{"name": "company", "type": "Company!", "description": "The company associated to the order or draft order.", "not_nullable": true}], "examples": []}]}, {"name": "Billing", "queries": [{"name": "shopBillingPreferences", "description": "The shop's billing preferences.", "arguments": [{"name": "ShopBillingPreferences", "type": "ShopBillingPreferences!", "required": true, "description": "Billing preferences for the shop."}], "returns": [], "examples": []}], "mutations": [{"name": "appPurchaseOneTimeCreate", "description": "Charges a shop for features or services one time.\nThis type of charge is recommended for apps that aren't billed on a recurring basis.\nTest and demo shops aren't charged.", "arguments": [{"name": "name", "type": "String!", "required": true, "description": "The name of the one-time purchase from the app."}], "returns": [], "examples": [{"description": "Creates an application charge", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation AppPurchaseOneTimeCreate($name: String!, $price: MoneyInput!, $returnUrl: URL!) {\n    appPurchaseOneTimeCreate(name: $name, returnUrl: $returnUrl, price: $price) {\n      userErrors {\n        field\n        message\n      }\n      appPurchaseOneTime {\n        createdAt\n        id\n      }\n      confirmationUrl\n    }\n  }\nQUERY\n\nvariables = {\n  \"name\": \"1000 imported orders.\",\n  \"returnUrl\": \"http://super-duper.shopifyapps.com/\",\n  \"price\": {\n    \"amount\": 10.0,\n    \"currencyCode\": \"USD\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "appPurchaseOneTimeCreate reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation AppPurchaseOneTimeCreate($name: String!, $price: MoneyInput!, $returnUrl: URL!) {\n    appPurchaseOneTimeCreate(name: $name, returnUrl: $returnUrl, price: $price) {\n      userErrors {\n        field\n        message\n      }\n      appPurchaseOneTime {\n        createdAt\n        id\n      }\n      confirmationUrl\n    }\n  }\nQUERY\n\nvariables = {\n  \"name\": \"1000 imported orders.\",\n  \"returnUrl\": \"http://super-duper.shopifyapps.com/\",\n  \"price\": {\n    \"amount\": 10.0,\n    \"currencyCode\": \"USD\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "appSubscriptionCancel", "description": "Cancels an app subscription on a store.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID of the app subscription to be cancelled."}], "returns": [], "examples": [{"description": "Cancel an app subscription on a shop and issue prorated credits", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation AppSubscriptionCancel($id: ID!, $prorate: Boolean) {\n    appSubscriptionCancel(id: $id, prorate: $prorate) {\n      userErrors {\n        field\n        message\n      }\n      appSubscription {\n        id\n        status\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/AppSubscription/1029266957\",\n  \"prorate\": true\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Cancels a recurring application charge", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation AppSubscriptionCancel($id: ID!) {\n    appSubscriptionCancel(id: $id) {\n      userErrors {\n        field\n        message\n      }\n      appSubscription {\n        id\n        status\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/AppSubscription/1029266958\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "appSubscriptionCancel reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation AppSubscriptionCancel($id: ID!, $prorate: Boolean) {\n    appSubscriptionCancel(id: $id, prorate: $prorate) {\n      userErrors {\n        field\n        message\n      }\n      appSubscription {\n        id\n        status\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/AppSubscription/1029266957\",\n  \"prorate\": true\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "appSubscriptionCreate", "description": "Allows an app to charge a store for features or services on a recurring basis.", "arguments": [{"name": "lineItems", "type": "[AppSubscriptionLineItemInput!]!", "required": true, "description": "Attaches one or more pricing plans to an app subscription. Only one pricing plan can be defined for each available type."}], "returns": [], "examples": [{"description": "Create a subscription for an app on a recurring pricing plan only.", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation AppSubscriptionCreate($name: String!, $lineItems: [AppSubscriptionLineItemInput!]!, $returnUrl: URL!) {\n    appSubscriptionCreate(name: $name, returnUrl: $returnUrl, lineItems: $lineItems) {\n      userErrors {\n        field\n        message\n      }\n      appSubscription {\n        id\n      }\n      confirmationUrl\n    }\n  }\nQUERY\n\nvariables = {\n  \"name\": \"Super Duper Recurring Plan\",\n  \"returnUrl\": \"http://super-duper.shopifyapps.com/\",\n  \"lineItems\": [{\"plan\"=>{\"appRecurringPricingDetails\"=>{\"price\"=>{\"amount\"=>10.0, \"currencyCode\"=>\"USD\"}, \"interval\"=>\"EVERY_30_DAYS\"}}}]\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Create a subscription for an app on a usage pricing plan only.", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation AppSubscriptionCreate($name: String!, $lineItems: [AppSubscriptionLineItemInput!]!, $returnUrl: URL!) {\n    appSubscriptionCreate(name: $name, returnUrl: $returnUrl, lineItems: $lineItems) {\n      userErrors {\n        field\n        message\n      }\n      appSubscription {\n        id\n        lineItems {\n          id\n          plan {\n            pricingDetails\n            __typename\n          }\n        }\n      }\n      confirmationUrl\n    }\n  }\nQUERY\n\nvariables = {\n  \"name\": \"Super Duper Usage Plan\",\n  \"returnUrl\": \"http://super-duper.shopifyapps.com/\",\n  \"lineItems\": [{\"plan\"=>{\"appUsagePricingDetails\"=>{\"terms\"=>\"$1 for 100 emails\", \"cappedAmount\"=>{\"amount\"=>20.0, \"currencyCode\"=>\"USD\"}}}}]\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Create a subscription for an app on an annual recurring pricing plan.", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation AppSubscriptionCreate($name: String!, $lineItems: [AppSubscriptionLineItemInput!]!, $returnUrl: URL!) {\n    appSubscriptionCreate(name: $name, returnUrl: $returnUrl, lineItems: $lineItems) {\n      userErrors {\n        field\n        message\n      }\n      appSubscription {\n        id\n      }\n      confirmationUrl\n    }\n  }\nQUERY\n\nvariables = {\n  \"name\": \"Super Duper Recurring Plan\",\n  \"returnUrl\": \"http://super-duper.shopifyapps.com/\",\n  \"lineItems\": [{\"plan\"=>{\"appRecurringPricingDetails\"=>{\"price\"=>{\"amount\"=>10.0, \"currencyCode\"=>\"USD\"}, \"interval\"=>\"ANNUAL\"}}}]\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Create a subscription for an app on both a recurring pricing plan and usage pricing plan.", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation AppSubscriptionCreate($name: String!, $lineItems: [AppSubscriptionLineItemInput!]!, $returnUrl: URL!) {\n    appSubscriptionCreate(name: $name, returnUrl: $returnUrl, lineItems: $lineItems) {\n      userErrors {\n        field\n        message\n      }\n      appSubscription {\n        id\n        lineItems {\n          id\n          plan {\n            pricingDetails {\n              __typename\n            }\n          }\n        }\n      }\n      confirmationUrl\n    }\n  }\nQUERY\n\nvariables = {\n  \"name\": \"Super Duper Recurring and Usage Plan\",\n  \"returnUrl\": \"http://super-duper.shopifyapps.com/\",\n  \"lineItems\": [{\"plan\"=>{\"appUsagePricingDetails\"=>{\"terms\"=>\"$1 for 100 emails\", \"cappedAmount\"=>{\"amount\"=>20.0, \"currencyCode\"=>\"USD\"}}}}, {\"plan\"=>{\"appRecurringPricingDetails\"=>{\"price\"=>{\"amount\"=>10.0, \"currencyCode\"=>\"USD\"}}}}]\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Create a subscription with a fixed amount discount", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation AppSubscriptionCreate($name: String!, $lineItems: [AppSubscriptionLineItemInput!]!, $returnUrl: URL!) {\n    appSubscriptionCreate(name: $name, returnUrl: $returnUrl, lineItems: $lineItems) {\n      userErrors {\n        field\n        message\n      }\n      confirmationUrl\n      appSubscription {\n        id\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"name\": \"30 Day Recurring Plan\",\n  \"returnUrl\": \"https://review-app.shopifyapps.com\",\n  \"lineItems\": [{\"plan\"=>{\"appRecurringPricingDetails\"=>{\"price\"=>{\"amount\"=>40.0, \"currencyCode\"=>\"USD\"}, \"discount\"=>{\"value\"=>{\"amount\"=>5.0}, \"durationLimitInIntervals\"=>2}, \"interval\"=>\"EVERY_30_DAYS\"}}}]\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Create a subscription with a free trial.", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation AppSubscriptionCreate($name: String!, $lineItems: [AppSubscriptionLineItemInput!]!, $returnUrl: URL!, $trialDays: Int) {\n    appSubscriptionCreate(name: $name, returnUrl: $returnUrl, lineItems: $lineItems, trialDays: $trialDays) {\n      userErrors {\n        field\n        message\n      }\n      appSubscription {\n        id\n      }\n      confirmationUrl\n    }\n  }\nQUERY\n\nvariables = {\n  \"name\": \"Super Duper Recurring Plan with a Trial\",\n  \"returnUrl\": \"http://super-duper.shopifyapps.com/\",\n  \"trialDays\": 7,\n  \"lineItems\": [{\"plan\"=>{\"appRecurringPricingDetails\"=>{\"price\"=>{\"amount\"=>10.0, \"currencyCode\"=>\"USD\"}}}}]\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Create a subscription with a percentage value discount", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation AppSubscriptionCreate($name: String!, $lineItems: [AppSubscriptionLineItemInput!]!, $returnUrl: URL!) {\n    appSubscriptionCreate(name: $name, returnUrl: $returnUrl, lineItems: $lineItems) {\n      userErrors {\n        field\n        message\n      }\n      confirmationUrl\n      appSubscription {\n        id\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"name\": \"30 Day Recurring Plan\",\n  \"returnUrl\": \"https://review-app.shopifyapps.com\",\n  \"lineItems\": [{\"plan\"=>{\"appRecurringPricingDetails\"=>{\"price\"=>{\"amount\"=>40.0, \"currencyCode\"=>\"USD\"}, \"discount\"=>{\"value\"=>{\"percentage\"=>0.2}, \"durationLimitInIntervals\"=>10}, \"interval\"=>\"EVERY_30_DAYS\"}}}]\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Create a subscription with add-on modules", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation AppSubscriptionCreate($name: String!, $lineItems: [AppSubscriptionLineItemInput!]!, $returnUrl: URL!) {\n    appSubscriptionCreate(name: $name, returnUrl: $returnUrl, lineItems: $lineItems) {\n      userErrors {\n        field\n        message\n      }\n      confirmationUrl\n      appSubscription {\n        id\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"name\": \"Subscription for Module A and Module B\",\n  \"returnUrl\": \"http://super-duper.shopifyapps.com\",\n  \"lineItems\": [{\"plan\"=>{\"appUsagePricingDetails\"=>{\"terms\"=>\"$1 for 100 emails for Module B\", \"cappedAmount\"=>{\"amount\"=>20.0, \"currencyCode\"=>\"USD\"}}}}, {\"plan\"=>{\"appRecurringPricingDetails\"=>{\"price\"=>{\"amount\"=>35.0, \"currencyCode\"=>\"USD\"}}}}]\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "appSubscriptionCreate reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation AppSubscriptionCreate($name: String!, $lineItems: [AppSubscriptionLineItemInput!]!, $returnUrl: URL!) {\n    appSubscriptionCreate(name: $name, returnUrl: $returnUrl, lineItems: $lineItems) {\n      userErrors {\n        field\n        message\n      }\n      appSubscription {\n        id\n      }\n      confirmationUrl\n    }\n  }\nQUERY\n\nvariables = {\n  \"name\": \"Super Duper Recurring Plan\",\n  \"returnUrl\": \"http://super-duper.shopifyapps.com/\",\n  \"lineItems\": [{\"plan\"=>{\"appRecurringPricingDetails\"=>{\"price\"=>{\"amount\"=>10.0, \"currencyCode\"=>\"USD\"}, \"interval\"=>\"EVERY_30_DAYS\"}}}]\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "appSubscriptionLineItemUpdate", "description": "Updates the capped amount on the usage pricing plan of an app subscription line item.", "arguments": [{"name": "cappedAmount", "type": "MoneyInput!", "required": true, "description": "The new maximum amount of usage charges that can be incurred within a subscription billing interval."}], "returns": [], "examples": [{"description": "Updates the capped amount of a recurring application charge", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation appSubscriptionLineItemUpdate($cappedAmount: MoneyInput!, $id: ID!) {\n    appSubscriptionLineItemUpdate(cappedAmount: $cappedAmount, id: $id) {\n      userErrors {\n        field\n        message\n      }\n      confirmationUrl\n      appSubscription {\n        id\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/AppSubscriptionLineItem/1029266946?v=1&index=1\",\n  \"cappedAmount\": {\n    \"amount\": 100.0,\n    \"currencyCode\": \"USD\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "appSubscriptionLineItemUpdate reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation appSubscriptionLineItemUpdate($cappedAmount: MoneyInput!, $id: ID!) {\n    appSubscriptionLineItemUpdate(cappedAmount: $cappedAmount, id: $id) {\n      userErrors {\n        field\n        message\n      }\n      confirmationUrl\n      appSubscription {\n        id\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/AppSubscriptionLineItem/1029266946?v=1&index=1\",\n  \"cappedAmount\": {\n    \"amount\": 100.0,\n    \"currencyCode\": \"USD\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "appSubscriptionTrialExtend", "description": "Extends the trial of an app subscription.", "arguments": [{"name": "days", "type": "Int!", "required": true, "description": "The number of days to extend the trial. The value must be greater than 0 and less than or equal to 1000."}], "returns": [], "examples": [{"description": "Extend an app subscription for a shop", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation AppSubscriptionTrialExtend($id: ID!, $days: Int!) {\n    appSubscriptionTrialExtend(id: $id, days: $days) {\n      userErrors {\n        field\n        message\n        code\n      }\n      appSubscription {\n        id\n        status\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/AppSubscription/443388186\",\n  \"days\": 10\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "appSubscriptionTrialExtend reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation AppSubscriptionTrialExtend($id: ID!, $days: Int!) {\n    appSubscriptionTrialExtend(id: $id, days: $days) {\n      userErrors {\n        field\n        message\n        code\n      }\n      appSubscription {\n        id\n        status\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/AppSubscription/443388186\",\n  \"days\": 10\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "appUsageRecordCreate", "description": "Enables an app to charge a store for features or services on a per-use basis.\nThe usage charge value is counted towards the cappedAmount limit that was specified in the appUsagePricingDetails field when the app subscription was created.\nIf you create an app usage charge that causes the total usage charges in a billing interval to exceed the capped amount, then a Total price exceeds balance remaining error is returned.", "arguments": [{"name": "description", "type": "String!", "required": true, "description": "The description of the app usage record."}], "returns": [], "examples": [{"description": "Creates a usage charge", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation appUsageRecordCreate($description: String!, $price: MoneyInput!, $subscriptionLineItemId: ID!) {\n    appUsageRecordCreate(description: $description, price: $price, subscriptionLineItemId: $subscriptionLineItemId) {\n      userErrors {\n        field\n        message\n      }\n      appUsageRecord {\n        id\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"subscriptionLineItemId\": \"gid://shopify/AppSubscriptionLineItem/1029266946?v=1&index=1\",\n  \"price\": {\n    \"amount\": 1.0,\n    \"currencyCode\": \"USD\"\n  },\n  \"description\": \"Super Mega Plan 1000 emails\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Creating a usage record above the capped amount returns an error", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation appUsageRecordCreate($description: String!, $price: MoneyInput!, $subscriptionLineItemId: ID!) {\n    appUsageRecordCreate(description: $description, price: $price, subscriptionLineItemId: $subscriptionLineItemId) {\n      userErrors {\n        field\n        message\n      }\n      appUsageRecord {\n        id\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"subscriptionLineItemId\": \"gid://shopify/AppSubscriptionLineItem/1029266946?v=1&index=1\",\n  \"price\": {\n    \"amount\": 100.0,\n    \"currencyCode\": \"USD\"\n  },\n  \"description\": \"Super Mega Plan 1000 emails\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Creating usage record with idempotency key exceeding 255 characters results in an error.", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation appUsageRecordCreate($description: String!, $price: MoneyInput!, $subscriptionLineItemId: ID!, $idempotencyKey: String) {\n    appUsageRecordCreate(description: $description, price: $price, subscriptionLineItemId: $subscriptionLineItemId, idempotencyKey: $idempotencyKey) {\n      userErrors {\n        field\n        message\n      }\n      appUsageRecord {\n        id\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"subscriptionLineItemId\": \"gid://shopify/AppSubscriptionLineItem/1029266946?v=1&index=1\",\n  \"price\": {\n    \"amount\": 1.0,\n    \"currencyCode\": \"USD\"\n  },\n  \"description\": \"Super Mega Plan 1000 emails\",\n  \"idempotencyKey\": \"****************************************************************************************************************************************************************************************************************************************************************\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Creating usage record with idempotency key returns an error when another request for the same shop, app, idempotency key is in progress.", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation appUsageRecordCreate($description: String!, $price: MoneyInput!, $subscriptionLineItemId: ID!, $idempotencyKey: String) {\n    appUsageRecordCreate(description: $description, price: $price, subscriptionLineItemId: $subscriptionLineItemId, idempotencyKey: $idempotencyKey) {\n      userErrors {\n        field\n        message\n      }\n      appUsageRecord {\n        id\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"subscriptionLineItemId\": \"gid://shopify/AppSubscriptionLineItem/1029266946?v=1&index=1\",\n  \"price\": {\n    \"amount\": 1.0,\n    \"currencyCode\": \"USD\"\n  },\n  \"description\": \"Super Mega Plan 1000 emails\",\n  \"idempotencyKey\": \"Some idempotency key\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "appUsageRecordCreate reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation appUsageRecordCreate($description: String!, $price: MoneyInput!, $subscriptionLineItemId: ID!) {\n    appUsageRecordCreate(description: $description, price: $price, subscriptionLineItemId: $subscriptionLineItemId) {\n      userErrors {\n        field\n        message\n      }\n      appUsageRecord {\n        id\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"subscriptionLineItemId\": \"gid://shopify/AppSubscriptionLineItem/1029266946?v=1&index=1\",\n  \"price\": {\n    \"amount\": 1.0,\n    \"currencyCode\": \"USD\"\n  },\n  \"description\": \"Super Mega Plan 1000 emails\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}], "objects": [{"name": "AppCredit", "description": "App credits can be applied by the merchant towards future app purchases, subscriptions, or usage records in Shopify.", "fields_and_connections": [{"name": "amount", "type": "MoneyV2!", "description": "The amount that can be used towards future app purchases in Shopify.", "not_nullable": true}], "examples": []}, {"name": "AppPlanV2", "description": "The app plan that the merchant is subscribed to.", "fields_and_connections": [{"name": "pricingDetails", "type": "AppPricingDetails!", "description": "The plan billed to a shop on a recurring basis.", "not_nullable": true}], "examples": []}, {"name": "AppPurchaseOneTime", "description": "Services and features purchased once by a store.", "fields_and_connections": [{"name": "createdAt", "type": "DateTime!", "description": "The date and time when the app purchase occurred.", "not_nullable": true}], "examples": []}, {"name": "AppRecurringPricing", "description": "The pricing information about a subscription app.\nThe object contains an interval (the frequency at which the shop is billed for an app subscription) and\na price (the amount to be charged to the subscribing shop at each interval).", "fields_and_connections": [{"name": "discount", "type": "AppSubscriptionDiscount", "description": "The discount applied to the subscription for a given number of billing intervals.", "not_nullable": true}], "examples": []}, {"name": "AppRevenueAttributionRecord", "description": "Represents app revenue that was captured externally by the partner.", "fields_and_connections": [{"name": "amount", "type": "MoneyV2!", "description": "The financial amount captured in this attribution.", "not_nullable": true}], "examples": []}, {"name": "AppSubscription", "description": "Provides users access to services and/or features for a duration of time.", "fields_and_connections": [{"name": "createdAt", "type": "DateTime!", "description": "The date and time when the app subscription was created.", "not_nullable": true}], "examples": []}, {"name": "AppSubscriptionDiscount", "description": "Discount applied to the recurring pricing portion of a subscription.", "fields_and_connections": [{"name": "durationLimitInIntervals", "type": "Int", "description": "The total number of billing intervals to which the discount will be applied.\nThe discount will be applied to an indefinite number of billing intervals if this value is blank.", "not_nullable": true}], "examples": []}, {"name": "AppSubscriptionDiscountAmount", "description": "The fixed amount value of a discount.", "fields_and_connections": [{"name": "amount", "type": "MoneyV2!", "description": "The fixed amount value of a discount.", "not_nullable": true}], "examples": []}, {"name": "AppSubscriptionDiscountPercentage", "description": "The percentage value of a discount.", "fields_and_connections": [{"name": "percentage", "type": "Float!", "description": "The percentage value of a discount.", "not_nullable": true}], "examples": []}, {"name": "AppSubscriptionLineItem", "description": "The plan attached to an app subscription.", "fields_and_connections": [{"name": "id", "type": "ID!", "description": "A globally-unique ID.", "not_nullable": true}], "examples": []}, {"name": "AppUsagePricing", "description": "Defines a usage pricing model for the app subscription.\nThese charges are variable based on how much the merchant uses the app.", "fields_and_connections": [{"name": "balanceUsed", "type": "MoneyV2!", "description": "The total usage records for interval.", "not_nullable": true}], "examples": []}, {"name": "AppUsageRecord", "description": "Store usage for app subscriptions with usage pricing.", "fields_and_connections": [{"name": "createdAt", "type": "DateTime!", "description": "The date and time when the usage record was created.", "not_nullable": true}], "examples": []}, {"name": "EntitlementsType", "description": "The shop's entitlements.", "fields_and_connections": [{"name": "markets", "type": "MarketsType!", "description": "Represents the markets for the shop.", "not_nullable": true}], "examples": []}, {"name": "MarketsType", "description": "Markets entitlement information.", "fields_and_connections": [{"name": "b2b", "type": "MarketsB2BEntitlement!", "description": "The entitlements for B2B markets.", "not_nullable": true}], "examples": []}, {"name": "ShopBillingPreferences", "description": "Billing preferences for the shop.", "fields_and_connections": [{"name": "currency", "type": "CurrencyCode!", "description": "The currency the shop uses to pay for apps and services.", "not_nullable": true}], "examples": []}]}, {"name": "Bulk operations", "queries": [{"name": "currentBulkOperation", "description": "Returns the current app's most recent BulkOperation. Apps can run one bulk query and one bulk mutation operation at a time, by shop.", "arguments": [{"name": "type", "type": "BulkOperationType", "required": true, "description": "The current bulk operation's type."}], "returns": [], "examples": [{"description": "Overview", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    currentBulkOperation(type: QUERY) {\n      id\n      type\n      status\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}]}], "mutations": [{"name": "bulkOperationCancel", "description": "Starts the cancelation process of a running bulk operation.\nThere may be a short delay from when a cancelation starts until the operation is actually canceled.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID of the bulk operation to cancel."}], "returns": [], "examples": []}, {"name": "bulkOperationRunMutation", "description": "Creates and runs a bulk operation mutation.\nTo learn how to bulk import large volumes of data asynchronously, refer to the\nbulk import data guide.", "arguments": [{"name": "clientIdentifier", "type": "String", "required": true, "description": "An optional identifier which may be used for querying."}], "returns": [], "examples": []}, {"name": "bulkOperationRunQuery", "description": "Creates and runs a bulk operation query.\nSee the bulk operations guide for more details.", "arguments": [{"name": "query", "type": "String!", "required": true, "description": "The query to be executed in bulk."}], "returns": [], "examples": []}], "objects": [{"name": "BulkOperation", "description": "An asynchronous long-running operation to fetch data in bulk or to bulk import data.\nBulk operations are created using the bulkOperationRunQuery or bulkOperationRunMutation mutation. After\nthey are created, clients should poll the status field for updates. When COMPLETED, the url field contains\na link to the data in JSONL format.\nRefer to the bulk operations guide for more details.", "fields_and_connections": [{"name": "completedAt", "type": "DateTime", "description": "When the bulk operation was successfully completed.", "not_nullable": true}], "examples": []}]}, {"name": "Cart", "queries": [{"name": "cartTransforms", "description": "List of Cart transform objects owned by the current API client.", "arguments": [{"name": "after", "type": "String", "required": true, "description": "The elements that come after the specified cursor."}], "returns": [], "examples": []}], "mutations": [{"name": "cartTransformCreate", "description": "Create a CartTransform function to the Shop.", "arguments": [{"name": "blockOnFailure", "type": "Boolean", "required": true, "description": "Whether a run failure should block cart and checkout operations."}], "returns": [], "examples": []}, {"name": "cartTransformDelete", "description": "Destroy a cart transform function from the Shop.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "A globally-unique identifier for the cart transform."}], "returns": [], "examples": []}], "objects": [{"name": "CartTransform", "description": "A Cart Transform Function to create Customized Bundles..", "fields_and_connections": [{"name": "blockOnFailure", "type": "Boolean!", "description": "Whether a run failure will block cart and checkout operations.", "not_nullable": true}], "examples": []}]}, {"name": "Checkout branding", "queries": [{"name": "checkoutBranding", "description": "Returns the visual customizations for checkout for a given checkout profile.\nTo learn more about updating checkout branding settings, refer to the\ncheckoutBrandingUpsert\nmutation and the checkout branding tutorial.", "arguments": [{"name": "checkoutProfileId", "type": "ID!", "required": false, "description": "A globally-unique identifier."}], "returns": [], "examples": [{"description": "Overview", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query GetGlobalColors {\n    checkoutBranding(checkoutProfileId: \"gid://shopify/CheckoutProfile/235093654\") {\n      designSystem {\n        colors {\n          global {\n            success\n            warning\n            critical\n            info\n            brand\n            accent\n            decorative\n          }\n        }\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}]}], "mutations": [{"name": "checkoutBrandingUpsert", "description": "Updates the checkout branding settings for a\ncheckout profile.\nIf the settings don't exist, then new settings are created. The checkout branding settings applied to a\npublished checkout profile will be immediately visible within the store's checkout. The checkout branding\nsettings applied to a draft checkout profile could be previewed within the admin checkout editor.\nTo learn more about updating checkout branding settings, refer to the checkout branding\ntutorial.", "arguments": [{"name": "checkoutBrandingInput", "type": "CheckoutBrandingInput", "required": true, "description": "The input fields to use to upsert the checkout branding settings (pass null to reset them to default)."}], "returns": [], "examples": [{"description": "Apply section styles to main and order summary", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation ApplySectionStyles($checkoutProfileId: ID!, $input: CheckoutBrandingInput!) {\n    checkoutBrandingUpsert(checkoutProfileId: $checkoutProfileId, checkoutBrandingInput: $input) {\n      checkoutBranding {\n        customizations {\n          main {\n            section {\n              cornerRadius\n              colorScheme\n              shadow\n              padding\n            }\n          }\n          orderSummary {\n            section {\n              colorScheme\n              shadow\n              padding\n              border\n            }\n          }\n        }\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"checkoutProfileId\": \"gid://shopify/CheckoutProfile/235093654\",\n  \"input\": {\n    \"customizations\": {\n      \"main\": {\n        \"section\": {\n          \"cornerRadius\": \"LARGE\",\n          \"colorScheme\": \"COLOR_SCHEME2\",\n          \"shadow\": \"LARGE_200\",\n          \"padding\": \"LARGE_400\"\n        }\n      },\n      \"orderSummary\": {\n        \"section\": {\n          \"colorScheme\": \"COLOR_SCHEME1\",\n          \"shadow\": \"LARGE_200\",\n          \"padding\": \"LARGE_400\",\n          \"border\": \"FULL\"\n        }\n      }\n    }\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Modify a color scheme", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation ChangeScheme2Colors($checkoutProfileId: ID!, $input: CheckoutBrandingInput!) {\n    checkoutBrandingUpsert(checkoutProfileId: $checkoutProfileId, checkoutBrandingInput: $input) {\n      checkoutBranding {\n        designSystem {\n          colors {\n            schemes {\n              scheme2 {\n                base {\n                  background\n                  text\n                }\n              }\n            }\n          }\n        }\n      }\n      userErrors {\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"checkoutProfileId\": \"gid://shopify/CheckoutProfile/235093654\",\n  \"input\": {\n    \"designSystem\": {\n      \"colors\": {\n        \"schemes\": {\n          \"scheme2\": {\n            \"base\": {\n              \"background\": \"#cdf7f3\",\n              \"text\": \"#1f2928\"\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Modify checkout font settings", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation SetShopifyFonts($checkoutProfileId: ID!, $input: CheckoutBrandingInput!) {\n    checkoutBrandingUpsert(checkoutProfileId: $checkoutProfileId, checkoutBrandingInput: $input) {\n      checkoutBranding {\n        designSystem {\n          typography {\n            size {\n              base\n              ratio\n            }\n            primary {\n              name\n              base {\n                weight\n              }\n              bold {\n                weight\n              }\n            }\n            secondary {\n              name\n              base {\n                weight\n              }\n              bold {\n                weight\n              }\n            }\n          }\n        }\n      }\n      userErrors {\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"checkoutProfileId\": \"gid://shopify/CheckoutProfile/235093654\",\n  \"input\": {\n    \"designSystem\": {\n      \"typography\": {\n        \"primary\": {\n          \"shopifyFontGroup\": {\n            \"name\": \"Univers Next\"\n          }\n        },\n        \"secondary\": {\n          \"shopifyFontGroup\": {\n            \"name\": \"Univers Next\"\n          }\n        }\n      }\n    }\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Modify global colors", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation ChangeGlobalColors($checkoutProfileId: ID!, $input: CheckoutBrandingInput!) {\n    checkoutBrandingUpsert(checkoutProfileId: $checkoutProfileId, checkoutBrandingInput: $input) {\n      checkoutBranding {\n        designSystem {\n          colors {\n            global {\n              success\n              warning\n              critical\n              info\n              brand\n              accent\n              decorative\n            }\n          }\n        }\n      }\n      userErrors {\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"checkoutProfileId\": \"gid://shopify/CheckoutProfile/235093654\",\n  \"input\": {\n    \"designSystem\": {\n      \"colors\": {\n        \"global\": {\n          \"success\": \"#38e004\",\n          \"warning\": \"#e0e004\",\n          \"critical\": \"#e00404\",\n          \"info\": \"#04e0e0\",\n          \"brand\": \"#e004e0\",\n          \"accent\": \"#04e004\",\n          \"decorative\": \"#e0e0e0\"\n        }\n      }\n    }\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Reset all styling to defaults", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation ChangeColorSchemeAndOrderSummary($checkoutBrandingInput: CheckoutBrandingInput, $checkoutProfileId: ID!) {\n    checkoutBrandingUpsert(checkoutBrandingInput: $checkoutBrandingInput, checkoutProfileId: $checkoutProfileId) {\n      checkoutBranding {\n        designSystem {\n          colors {\n            schemes {\n              scheme1 {\n                base {\n                  background\n                  text\n                }\n              }\n            }\n          }\n        }\n        customizations {\n          orderSummary {\n            colorScheme\n          }\n        }\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"checkoutProfileId\": \"gid://shopify/CheckoutProfile/235093654\",\n  \"checkoutBrandingInput\": nil\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Reset color schemes to the defaults", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation ChangeColorScheme1($checkoutBrandingInput: CheckoutBrandingInput!, $checkoutProfileId: ID!) {\n    checkoutBrandingUpsert(checkoutBrandingInput: $checkoutBrandingInput, checkoutProfileId: $checkoutProfileId) {\n      checkoutBranding {\n        designSystem {\n          colors {\n            schemes {\n              scheme1 {\n                base {\n                  background\n                  text\n                }\n                control {\n                  background\n                  border\n                  selected {\n                    background\n                    border\n                  }\n                }\n                primaryButton {\n                  hover {\n                    background\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"checkoutProfileId\": \"gid://shopify/CheckoutProfile/235093654\",\n  \"checkoutBrandingInput\": {\n    \"designSystem\": {\n      \"colors\": {\n        \"schemes\": null\n      }\n    }\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Set a checkout logo", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation SetLogo($checkoutProfileId: ID!, $input: CheckoutBrandingInput!) {\n    checkoutBrandingUpsert(checkoutProfileId: $checkoutProfileId, checkoutBrandingInput: $input) {\n      checkoutBranding {\n        customizations {\n          header {\n            logo {\n              image {\n                url\n              }\n            }\n          }\n        }\n      }\n      userErrors {\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"checkoutProfileId\": \"gid://shopify/CheckoutProfile/235093654\",\n  \"input\": {\n    \"customizations\": {\n      \"header\": {\n        \"logo\": {\n          \"image\": {\n            \"mediaImageId\": null\n          }\n        }\n      }\n    }\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "checkoutBrandingUpsert reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation ApplySectionStyles($checkoutProfileId: ID!, $input: CheckoutBrandingInput!) {\n    checkoutBrandingUpsert(checkoutProfileId: $checkoutProfileId, checkoutBrandingInput: $input) {\n      checkoutBranding {\n        customizations {\n          main {\n            section {\n              cornerRadius\n              colorScheme\n              shadow\n              padding\n            }\n          }\n          orderSummary {\n            section {\n              colorScheme\n              shadow\n              padding\n              border\n            }\n          }\n        }\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"checkoutProfileId\": \"gid://shopify/CheckoutProfile/235093654\",\n  \"input\": {\n    \"customizations\": {\n      \"main\": {\n        \"section\": {\n          \"cornerRadius\": \"LARGE\",\n          \"colorScheme\": \"COLOR_SCHEME2\",\n          \"shadow\": \"LARGE_200\",\n          \"padding\": \"LARGE_400\"\n        }\n      },\n      \"orderSummary\": {\n        \"section\": {\n          \"colorScheme\": \"COLOR_SCHEME1\",\n          \"shadow\": \"LARGE_200\",\n          \"padding\": \"LARGE_400\",\n          \"border\": \"FULL\"\n        }\n      }\n    }\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}], "objects": [{"name": "CheckoutBranding", "description": "The settings of checkout visual customizations.\nTo learn more about updating checkout branding settings, refer to the\ncheckoutBrandingUpsert mutation.", "fields_and_connections": [{"name": "customizations", "type": "CheckoutBrandingCustomizations", "description": "The customizations that apply to specific components or areas of the user interface.", "not_nullable": false}], "examples": []}, {"name": "CheckoutBrandingControl", "description": "The form controls customizations.", "fields_and_connections": [{"name": "border", "type": "CheckoutBrandingSimpleBorder", "description": "The border used for form controls.", "not_nullable": false}], "examples": []}, {"name": "CheckoutBrandingCustomizations", "description": "The customizations that apply to specific components or areas of the user interface.", "fields_and_connections": [{"name": "buyerJourney", "type": "CheckoutBrandingBuyerJourney", "description": "The customizations for the breadcrumbs that represent a buyer's journey to the checkout.", "not_nullable": false}], "examples": []}, {"name": "CheckoutBrandingDesignSystem", "description": "The design system allows you to set values that represent specific attributes\nof your brand like color and font. These attributes are used throughout the user\ninterface. This brings consistency and allows you to easily make broad design changes.", "fields_and_connections": [{"name": "colors", "type": "CheckoutBrandingColors", "description": "The color settings for global colors and color schemes.", "not_nullable": false}], "examples": []}, {"name": "CheckoutBrandingFontGroup", "description": "A font group. To learn more about updating fonts, refer to the\ncheckoutBrandingUpsert\nmutation and the checkout branding tutorial.", "fields_and_connections": [{"name": "base", "type": "CheckoutBrandingFont", "description": "The base font.", "not_nullable": false}], "examples": []}, {"name": "CheckoutBrandingFontSize", "description": "The font size.", "fields_and_connections": [{"name": "base", "type": "Float", "description": "The base font size.", "not_nullable": false}], "examples": []}, {"name": "CheckoutBrandingHeader", "description": "The header customizations.", "fields_and_connections": [{"name": "alignment", "type": "CheckoutBrandingHeaderAlignment", "description": "The header alignment.", "not_nullable": false}], "examples": []}, {"name": "CheckoutBrandingImage", "description": "A checkout branding image.", "fields_and_connections": [{"name": "image", "type": "Image", "description": "The image details.", "not_nullable": false}], "examples": []}, {"name": "CheckoutBrandingLogo", "description": "The store logo customizations.", "fields_and_connections": [{"name": "image", "type": "Image", "description": "The logo image.", "not_nullable": false}], "examples": []}, {"name": "CheckoutBrandingMain", "description": "The main container customizations.", "fields_and_connections": [{"name": "backgroundImage", "type": "CheckoutBrandingImage", "description": "The background image of the main container.", "not_nullable": false}], "examples": []}, {"name": "CheckoutBrandingOrderSummary", "description": "The order summary customizations.", "fields_and_connections": [{"name": "backgroundImage", "type": "CheckoutBrandingImage", "description": "The background image of the order summary container.", "not_nullable": false}], "examples": []}, {"name": "CheckoutBrandingTypography", "description": "The typography settings used for checkout-related text. Use these settings to customize the\nfont family and size for primary and secondary text elements.\nRefer to the typography tutorial\nfor further information on typography customization.", "fields_and_connections": [{"name": "primary", "type": "CheckoutBrandingFontGroup", "description": "A font group used for most components such as text, buttons and form controls.", "not_nullable": false}], "examples": []}]}, {"name": "Common objects", "queries": [{"name": "abandonedCheckouts", "description": "List of abandoned checkouts. Includes checkouts that were recovered after being abandoned.", "arguments": [{"name": "after", "type": "String", "required": true, "description": "The elements that come after the specified cursor."}], "returns": [], "examples": [{"description": "Overview", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query AbandonedCheckouts {\n    abandonedCheckouts(first: 1) {\n      nodes {\n        abandonedCheckoutUrl\n        billingAddress {\n          country\n        }\n        completedAt\n        createdAt\n        customer {\n          firstName\n          lastName\n          email\n        }\n        id\n        shippingAddress {\n          country\n        }\n        updatedAt\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}]}, {"name": "abandonedCheckoutsCount", "description": "Returns the count of abandoned checkouts for the given shop. Limited to a maximum of 10000.", "arguments": [{"name": "limit", "type": "Int", "required": true, "description": "The upper bound on count value before returning a result."}], "returns": [], "examples": [{"description": "Overview", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query AbandonedCheckoutsCount {\n    abandonedCheckoutsCount(limit: 1000) {\n      count\n      precision\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}]}, {"name": "abandonmentByAbandonedCheckoutId", "description": "Returns an Abandonment by the Abandoned Checkout ID.", "arguments": [{"name": "abandonedCheckoutId", "type": "ID!", "required": true, "description": "The ID of the Abandoned Checkout ID to query by."}], "returns": [], "examples": []}, {"name": "articleTags", "description": "List of all article tags.", "arguments": [{"name": "limit", "type": "Int!", "required": false, "description": "The maximum number of tags to return."}], "returns": [], "examples": [{"description": "Overview", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query ArticleTagsList {\n    articleTags(limit: 10, sort: ALPHABETICAL)\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}]}, {"name": "checkoutProfile", "description": "A checkout profile on a shop.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID of the checkout profile."}], "returns": [], "examples": []}, {"name": "checkoutProfiles", "description": "List of checkout profiles on a shop.", "arguments": [{"name": "after", "type": "String", "required": true, "description": "The elements that come after the specified cursor."}], "returns": [], "examples": [{"description": "Overview", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query checkoutProfiles {\n    checkoutProfiles(first: 10) {\n      nodes {\n        id\n        isPublished\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}]}, {"name": "currentStaffMember", "description": "The staff member making the API request.", "arguments": [{"name": "StaffMember", "type": "StaffMember", "required": true, "description": "Represents the data about a staff member's Shopify account. Merchants can use staff member data to get more information about the staff members in their store."}], "returns": [], "examples": []}, {"name": "customerMergeJobStatus", "description": "Returns the status of a customer merge request job.", "arguments": [{"name": "jobId", "type": "ID!", "required": true, "description": "The ID of the job performing the customer merge request."}], "returns": [], "examples": [{"description": "Overview", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    customerMergeJobStatus(jobId: \"gid://shopify/Job/ab22429a-ea18-4dad-ac2c-5823288b1e59\") {\n      jobId\n      status\n      resultingCustomerId\n      customerMergeErrors {\n        errorFields\n        message\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}]}, {"name": "customerPaymentMethod", "description": "Returns a CustomerPaymentMethod resource by its ID.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID of the CustomerPaymentMethod to return."}], "returns": [], "examples": []}, {"name": "domain", "description": "Lookup a Domain by ID.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID of the Domain to return."}], "returns": [], "examples": [{"description": "Retrieve a domain by ID", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    domain(id: \"gid://shopify/Domain/948873163\") {\n      host\n      url\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "Retrieve information about a shop's domains", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    shop {\n      domains {\n        id\n        host\n        url\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}]}, {"name": "financeAppAccessPolicy", "description": "Returns the access policy for a finance app .", "arguments": [{"name": "FinanceAppAccessPolicy", "type": "FinanceAppAccessPolicy!", "required": true, "description": "Current user's access policy for a finance app."}], "returns": [], "examples": []}, {"name": "fulfillmentConstraintRules", "description": "The fulfillment constraint rules that belong to a shop.", "arguments": [{"name": "FulfillmentConstraintRule", "type": "[FulfillmentConstraintRule!]!", "required": true, "description": "A fulfillment constraint rule."}], "returns": [], "examples": []}, {"name": "giftCard", "description": "Returns a gift card resource by ID.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID of the GiftCard to return."}], "returns": [], "examples": [{"description": "Receive a list of all Gift Card Adjustments", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query GiftCardTransactionList($id: ID!, $firstTransactions: Int) {\n    giftCard(id: $id) {\n      id\n      balance {\n        amount\n        currencyCode\n      }\n      transactions(first: $firstTransactions) {\n        nodes {\n          amount {\n            amount\n            currencyCode\n          }\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/GiftCard/411106674\",\n  \"firstTransactions\": 5\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Retrieves a single gift card", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    giftCard(id: \"gid://shopify/GiftCard/411106674\") {\n      balance {\n        amount\n        currencyCode\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}]}, {"name": "giftCardConfiguration", "description": "The configuration for the shop's gift cards.", "arguments": [{"name": "GiftCardConfiguration", "type": "GiftCardConfiguration!", "required": true, "description": "Represents information about the configuration of gift cards on the shop."}], "returns": [], "examples": []}, {"name": "giftCards", "description": "Returns a list of gift cards.", "arguments": [{"name": "after", "type": "String", "required": true, "description": "The elements that come after the specified cursor."}], "returns": [], "examples": [{"description": "Get the first 5 enabled gift cards", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    giftCards(first: 5, query: \"status:enabled\") {\n      edges {\n        node {\n          id\n          enabled\n        }\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "Get up to 5 gift cards with the last characters \"1234\"", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    giftCards(first: 5, query: \"1234\") {\n      edges {\n        node {\n          id\n          lastCharacters\n        }\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "Retrieves a list of gift cards", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    giftCards(first: 10) {\n      edges {\n        node {\n          id\n        }\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "Searches for gift cards", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query GiftCardList($first: Int, $query: String) {\n    giftCards(first: $first, query: $query) {\n      edges {\n        node {\n          id\n          balance {\n            amount\n            currencyCode\n          }\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"first\": 5,\n  \"query\": \"status:enabled\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "giftCardsCount", "description": "The total number of gift cards issued for the shop. Limited to a maximum of 10000.", "arguments": [{"name": "query", "type": "String", "required": true, "description": "A filter made up of terms, connectives, modifiers, and comparators.\nYou can apply one or more filters to a query. Learn more about Shopify API search syntax."}], "returns": [], "examples": [{"description": "Get the total number of enabled gift cards that are issued for the shop", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    giftCardsCount(query: \"status:enabled\") {\n      count\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "Retrieves a count of gift cards", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    giftCardsCount {\n      count\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}]}, {"name": "job", "description": "Returns a Job resource by ID. Used to check the status of internal jobs and any applicable changes.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "ID of the job to query."}], "returns": [], "examples": [{"description": "Overview", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    job(id: \"gid://shopify/Job/dc9b2604-c73b-45c6-8942-e235bac987e8\") {\n      id\n      done\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}]}, {"name": "node", "description": "Returns a specific node (any object that implements the\nNode\ninterface) by ID, in accordance with the\nRelay specification.\nThis field is commonly used for refetching an object.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID of the Node to return."}], "returns": [], "examples": [{"description": "Overview", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    node(id: \"gid://shopify/Product/108828309\") {\n      id\n      ... on Product {\n        title\n        handle\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}]}, {"name": "nodes", "description": "Returns the list of nodes (any objects that implement the\nNode\ninterface) with the given IDs, in accordance with the\nRelay specification.", "arguments": [{"name": "ids", "type": "[ID!]!", "required": true, "description": "The IDs of the Nodes to return."}], "returns": [], "examples": [{"description": "Overview", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    nodes(ids: [\"gid://shopify/Product/108828309\", \"gid://shopify/GiftCard/924862292\", \"gid://shopify/Collection/142458073\"]) {\n      id\n      ... on Product {\n        title\n      }\n      ... on GiftCard {\n        balance {\n          amount\n          currencyCode\n        }\n      }\n      ... on Collection {\n        sortOrder\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}]}, {"name": "orderPaymentStatus", "description": "Returns a payment status by payment reference ID. Used to check the status of a deferred payment.", "arguments": [{"name": "orderId", "type": "ID!", "required": true, "description": "ID of the order for which the payment was initiated."}], "returns": [], "examples": []}, {"name": "paymentCustomization", "description": "The payment customization.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID of the payment customization."}], "returns": [], "examples": []}, {"name": "paymentCustomizations", "description": "The payment customizations.", "arguments": [{"name": "after", "type": "String", "required": true, "description": "The elements that come after the specified cursor."}], "returns": [], "examples": []}, {"name": "paymentTermsTemplates", "description": "The list of payment terms templates eligible for all shops and users.", "arguments": [{"name": "paymentTermsType", "type": "PaymentTermsType", "required": true, "description": "The payment terms type to filter the payment terms templates list."}], "returns": [], "examples": [{"description": "Overview", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    paymentTermsTemplates {\n      id\n      name\n      paymentTermsType\n      dueInDays\n      description\n      translatedName\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}]}, {"name": "publicApiVersions", "description": "The list of publicly-accessible Admin API versions, including supported versions, the release candidate, and unstable versions.", "arguments": [{"name": "ApiVersion", "type": "[ApiVersion!]!", "required": true, "description": "A version of the API, as defined by Shopify API versioning.\nVersions are commonly referred to by their handle (for example, 2021-10)."}], "returns": [], "examples": []}, {"name": "shopifyFunction", "description": "Returns a Shopify Function by its ID.\nFunctions\nenable you to customize Shopify's backend logic at defined parts of the commerce loop.", "arguments": [{"name": "id", "type": "String!", "required": true, "description": "The ID of the Shopify Function."}], "returns": [], "examples": []}, {"name": "shopifyFunctions", "description": "Returns the Shopify Functions owned by the querying API client installed on the shop.", "arguments": [{"name": "after", "type": "String", "required": true, "description": "The elements that come after the specified cursor."}], "returns": [], "examples": []}, {"name": "staffMember", "description": "The StaffMember resource, by ID.", "arguments": [{"name": "id", "type": "ID", "required": true, "description": "The ID of the staff member to return. If no ID is provided, then the staff member making the query (if any) is returned."}], "returns": [], "examples": [{"description": "Retrieves a single user", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query StaffMember($id: ID!) {\n    staffMember(id: $id) {\n      active\n      avatar {\n        url\n      }\n      email\n      exists\n      firstName\n      id\n      initials\n      isShopOwner\n      lastName\n      locale\n      name\n      phone\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/StaffMember/902541635\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Retrieves the currently logged-in user", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    staffMember {\n      active\n      avatar {\n        url\n      }\n      email\n      exists\n      firstName\n      id\n      initials\n      isShopOwner\n      lastName\n      locale\n      name\n      phone\n      privateData {\n        accountSettingsUrl\n        createdAt\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}]}, {"name": "staffMembers", "description": "The shop staff members.", "arguments": [{"name": "after", "type": "String", "required": true, "description": "The elements that come after the specified cursor."}], "returns": [], "examples": []}, {"name": "storeCreditAccount", "description": "Returns a store credit account resource by ID.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID of the store credit account to return."}], "returns": [], "examples": [{"description": "Get a store credit account by account ID", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query storeCreditAccount($accountId: ID!) {\n    storeCreditAccount(id: $accountId) {\n      id\n      balance {\n        amount\n        currencyCode\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"accountId\": \"gid://shopify/StoreCreditAccount/316863792\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Get the first two expirable credit transactions of a store credit account", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query storeCreditAccount($accountId: ID!, $first: Int!) {\n    storeCreditAccount(id: $accountId) {\n      id\n      transactions(first: $first, query: \"type:credit AND expires_at:*\") {\n        edges {\n          node {\n            amount {\n              amount\n              currencyCode\n            }\n            balanceAfterTransaction {\n              amount\n              currencyCode\n            }\n            createdAt\n            ... on StoreCreditAccountCreditTransaction {\n              id\n              expiresAt\n              remainingAmount {\n                amount\n                currencyCode\n              }\n            }\n          }\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"accountId\": \"gid://shopify/StoreCreditAccount/669614221\",\n  \"first\": 2\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Get the four most recent transactions of a store credit account", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query storeCreditAccount($accountId: ID!, $first: Int!) {\n    storeCreditAccount(id: $accountId) {\n      id\n      transactions(first: $first, sortKey: CREATED_AT, reverse: true) {\n        edges {\n          node {\n            amount {\n              amount\n              currencyCode\n            }\n            balanceAfterTransaction {\n              amount\n              currencyCode\n            }\n            createdAt\n            ... on StoreCreditAccountCreditTransaction {\n              id\n              expiresAt\n              remainingAmount {\n                amount\n                currencyCode\n              }\n            }\n            ... on StoreCreditAccountDebitTransaction {\n              id\n            }\n            ... on StoreCreditAccountDebitRevertTransaction {\n              id\n              debitTransaction {\n                id\n              }\n            }\n            ... on StoreCreditAccountExpirationTransaction {\n              creditTransaction {\n                id\n              }\n            }\n          }\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"accountId\": \"gid://shopify/StoreCreditAccount/669614221\",\n  \"first\": 4\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "validation", "description": "Validation available on the shop.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID of the validation."}], "returns": [], "examples": []}, {"name": "validations", "description": "Validations available on the shop.", "arguments": [{"name": "after", "type": "String", "required": true, "description": "The elements that come after the specified cursor."}], "returns": [], "examples": []}], "mutations": [{"name": "bulkProductResourceFeedbackCreate", "description": "Creates product feedback for multiple products.", "arguments": [{"name": "feedbackInput", "type": "[ProductResourceFeedbackInput!]!", "required": true, "description": "An array of inputs to create the feedback. Limited to 50."}], "returns": [], "examples": [{"description": "Create a feedback record indicating the product is usable by your app", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation($feedbackInput: [ProductResourceFeedbackInput!]!) {\n    bulkProductResourceFeedbackCreate(feedbackInput: $feedbackInput) {\n      userErrors {\n        field\n        message\n      }\n      feedback {\n        productId\n        state\n        feedbackGeneratedAt\n        productUpdatedAt\n        messages\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"feedbackInput\": {\n    \"productId\": \"gid://shopify/Product/172561227\",\n    \"state\": \"ACCEPTED\",\n    \"feedbackGeneratedAt\": \"2021-05-01T23:00:00Z\",\n    \"productUpdatedAt\": \"2021-04-28T16:00:00Z\",\n    \"messages\": []\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Create a new Product ResourceFeedback", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation($feedbackInput: [ProductResourceFeedbackInput!]!) {\n    bulkProductResourceFeedbackCreate(feedbackInput: $feedbackInput) {\n      userErrors {\n        field\n        message\n      }\n      feedback {\n        productId\n        state\n        feedbackGeneratedAt\n        productUpdatedAt\n        messages\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"feedbackInput\": [{\"productId\"=>\"gid://shopify/Product/172561227\", \"state\"=>\"REQUIRES_ACTION\", \"feedbackGeneratedAt\"=>\"2021-05-01T23:00:00Z\", \"productUpdatedAt\"=>\"2021-04-28T16:00:00Z\", \"messages\"=>[\"Needs a description.\"]}, {\"productId\"=>\"gid://shopify/Product/788638954\", \"state\"=>\"REQUIRES_ACTION\", \"feedbackGeneratedAt\"=>\"2021-05-01T23:00:00Z\", \"productUpdatedAt\"=>\"2021-04-28T16:00:00Z\", \"messages\"=>[\"Needs an image.\"]}]\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Error response", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation($feedbackInput: [ProductResourceFeedbackInput!]!) {\n    bulkProductResourceFeedbackCreate(feedbackInput: $feedbackInput) {\n      userErrors {\n        field\n        message\n      }\n      feedback {\n        productId\n        state\n        messages\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"feedbackInput\": {\n    \"productId\": \"gid://shopify/Product/172561227\",\n    \"state\": \"REQUIRES_ACTION\",\n    \"feedbackGeneratedAt\": \"2021-05-01T23:00:00Z\",\n    \"productUpdatedAt\": \"2021-04-28T16:00:00Z\",\n    \"messages\": [\"Needs a description.\"]\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "bulkProductResourceFeedbackCreate reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation($feedbackInput: [ProductResourceFeedbackInput!]!) {\n    bulkProductResourceFeedbackCreate(feedbackInput: $feedbackInput) {\n      userErrors {\n        field\n        message\n      }\n      feedback {\n        productId\n        state\n        feedbackGeneratedAt\n        productUpdatedAt\n        messages\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"feedbackInput\": {\n    \"productId\": \"gid://shopify/Product/172561227\",\n    \"state\": \"ACCEPTED\",\n    \"feedbackGeneratedAt\": \"2021-05-01T23:00:00Z\",\n    \"productUpdatedAt\": \"2021-04-28T16:00:00Z\",\n    \"messages\": []\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "carrierServiceDelete", "description": "Removes an existing carrier service.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The global ID of the carrier service to delete."}], "returns": [], "examples": [{"description": "Remove an existing CarrierService", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation CarrierServiceDelete($id: ID!) {\n    carrierServiceDelete(id: $id) {\n      deletedId\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/DeliveryCarrierService/1036895097\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "carrierServiceDelete reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation CarrierServiceDelete($id: ID!) {\n    carrierServiceDelete(id: $id) {\n      deletedId\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/DeliveryCarrierService/1036895097\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "customerPaymentMethodCreditCardCreate", "description": "Creates a credit card payment method for a customer using a session id.\nThese values are only obtained through card imports happening from a PCI compliant environment.\nPlease use customerPaymentMethodRemoteCreate if you are not managing credit cards directly.", "arguments": [{"name": "billingAddress", "type": "MailingAddressInput!", "required": true, "description": "The billing address."}], "returns": [], "examples": []}, {"name": "customerPaymentMethodCreditCardUpdate", "description": "Updates the credit card payment method for a customer.", "arguments": [{"name": "billingAddress", "type": "MailingAddressInput!", "required": true, "description": "The billing address."}], "returns": [], "examples": []}, {"name": "customerPaymentMethodGetUpdateUrl", "description": "Returns a URL that allows the customer to update a specific payment method.\nCurrently, customerPaymentMethodGetUpdateUrl only supports Shop Pay.", "arguments": [{"name": "customerPaymentMethodId", "type": "ID!", "required": true, "description": "The payment method to be updated."}], "returns": [], "examples": []}, {"name": "customerPaymentMethodPaypalBillingAgreementCreate", "description": "Creates a PayPal billing agreement for a customer.", "arguments": [{"name": "billingAddress", "type": "MailingAddressInput", "required": true, "description": "The billing address."}], "returns": [], "examples": []}, {"name": "customerPaymentMethodPaypalBillingAgreementUpdate", "description": "Updates a PayPal billing agreement for a customer.", "arguments": [{"name": "billingAddress", "type": "MailingAddressInput!", "required": true, "description": "The billing address."}], "returns": [], "examples": []}, {"name": "customerPaymentMethodRemoteCreate", "description": "Create a payment method from remote gateway identifiers. NOTE: This operation processes payment methods asynchronously. The returned payment method will initially have incomplete details. Developers must poll this payment method using customerPaymentMethod query until all payment method details are available, or the payment method is revoked (usually within seconds).", "arguments": [{"name": "customerId", "type": "ID!", "required": true, "description": "The ID of the customer."}], "returns": [], "examples": []}, {"name": "customerPaymentMethodRevoke", "description": "Revokes a customer's payment method.", "arguments": [{"name": "customerPaymentMethodId", "type": "ID!", "required": true, "description": "The ID of the customer payment method to be revoked."}], "returns": [], "examples": []}, {"name": "customerPaymentMethodSendUpdateEmail", "description": "Sends a link to the customer so they can update a specific payment method.", "arguments": [{"name": "customerPaymentMethodId", "type": "ID!", "required": true, "description": "The payment method to be updated."}], "returns": [], "examples": [{"description": "Send an email with only the customer payment method id", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation sendCustomerPaymentUpdateEmail($customerPaymentMethodId: ID!) {\n    customerPaymentMethodSendUpdateEmail(customerPaymentMethodId: $customerPaymentMethodId) {\n      customer {\n        id\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"customerPaymentMethodId\": \"gid://shopify/CustomerPaymentMethod/b7cc6e3267aace169e516ed48be72dff\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "customerPaymentMethodSendUpdateEmail reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation sendCustomerPaymentUpdateEmail($customerPaymentMethodId: ID!) {\n    customerPaymentMethodSendUpdateEmail(customerPaymentMethodId: $customerPaymentMethodId) {\n      customer {\n        id\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"customerPaymentMethodId\": \"gid://shopify/CustomerPaymentMethod/b7cc6e3267aace169e516ed48be72dff\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "fulfillmentConstraintRuleCreate", "description": "Creates a fulfillment constraint rule and its metafield.", "arguments": [{"name": "deliveryMethodTypes", "type": "[DeliveryMethodType!]!", "required": true, "description": "Associate the function with one or multiple delivery method types."}], "returns": [], "examples": []}, {"name": "fulfillmentConstraintRuleDelete", "description": "Deletes a fulfillment constraint rule and its metafields.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "A globally-unique identifier for the fulfillment constraint rule."}], "returns": [], "examples": []}, {"name": "fulfillmentConstraintRuleUpdate", "description": "Update a fulfillment constraint rule.", "arguments": [{"name": "deliveryMethodTypes", "type": "[DeliveryMethodType!]!", "required": true, "description": "Specifies the delivery method types to be updated.\nIf not provided or providing an empty list will associate the function with all delivery methods."}], "returns": [], "examples": []}, {"name": "giftCardCreate", "description": "Create a gift card.", "arguments": [{"name": "input", "type": "GiftCardCreateInput!", "required": true, "description": "The input fields to create a gift card."}], "returns": [], "examples": [{"description": "Create a gift card with a customer and a recipient", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation giftCardCreate($input: GiftCardCreateInput!) {\n    giftCardCreate(input: $input) {\n      giftCard {\n        id\n        initialValue {\n          amount\n        }\n        customer {\n          id\n        }\n        recipientAttributes {\n          recipient {\n            id\n          }\n          message\n          preferredName\n          sendNotificationAt\n        }\n      }\n      userErrors {\n        message\n        field\n        code\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": {\n    \"initialValue\": \"100.0\",\n    \"customerId\": \"gid://shopify/Customer/331283560\",\n    \"recipientAttributes\": {\n      \"id\": \"gid://shopify/Customer/743592264\",\n      \"message\": \"Happy Birthday!\",\n      \"preferredName\": \"Dad\",\n      \"sendNotificationAt\": \"2024-10-01T12:00:00Z\"\n    }\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Create a non-expiring gift card with a generated code for a customer", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation giftCardCreate($input: GiftCardCreateInput!) {\n    giftCardCreate(input: $input) {\n      userErrors {\n        message\n        field\n      }\n      giftCard {\n        id\n        expiresOn\n        note\n        initialValue {\n          amount\n        }\n        customer {\n          id\n        }\n      }\n      giftCardCode\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": {\n    \"initialValue\": \"27.84\",\n    \"customerId\": \"gid://shopify/Customer/743592264\",\n    \"note\": \"Refund for Order #1\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Creates a gift card", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation GiftCardCreate($input: GiftCardCreateInput!) {\n    giftCardCreate(input: $input) {\n      giftCard {\n        id\n        balance {\n          amount\n          currencyCode\n        }\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": {\n    \"initialValue\": \"100.0\",\n    \"customerId\": \"gid://shopify/Customer/331283560\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "giftCardCreate reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation giftCardCreate($input: GiftCardCreateInput!) {\n    giftCardCreate(input: $input) {\n      giftCard {\n        id\n        initialValue {\n          amount\n        }\n        customer {\n          id\n        }\n        recipientAttributes {\n          recipient {\n            id\n          }\n          message\n          preferredName\n          sendNotificationAt\n        }\n      }\n      userErrors {\n        message\n        field\n        code\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": {\n    \"initialValue\": \"100.0\",\n    \"customerId\": \"gid://shopify/Customer/331283560\",\n    \"recipientAttributes\": {\n      \"id\": \"gid://shopify/Customer/743592264\",\n      \"message\": \"Happy Birthday!\",\n      \"preferredName\": \"Dad\",\n      \"sendNotificationAt\": \"2024-10-01T12:00:00Z\"\n    }\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "giftCardCredit", "description": "Credit a gift card.", "arguments": [{"name": "creditInput", "type": "GiftCardCreditInput!", "required": true, "description": "The input fields to credit a gift card."}], "returns": [], "examples": [{"description": "Create a new Gift Card Adjustment", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation giftCardCredit($id: ID!, $creditInput: GiftCardCreditInput!) {\n    giftCardCredit(id: $id, creditInput: $creditInput) {\n      giftCardCreditTransaction {\n        id\n        amount {\n          amount\n          currencyCode\n        }\n        processedAt\n        note\n        giftCard {\n          id\n          balance {\n            amount\n            currencyCode\n          }\n        }\n      }\n      userErrors {\n        message\n        field\n        code\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/GiftCard/411106674\",\n  \"creditInput\": {\n    \"creditAmount\": {\n      \"amount\": \"10\",\n      \"currencyCode\": \"USD\"\n    },\n    \"processedAt\": \"2024-09-09T12:48:33-04:00\",\n    \"note\": \"A note.\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "giftCardCredit reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation giftCardCredit($id: ID!, $creditInput: GiftCardCreditInput!) {\n    giftCardCredit(id: $id, creditInput: $creditInput) {\n      giftCardCreditTransaction {\n        id\n        amount {\n          amount\n          currencyCode\n        }\n        processedAt\n        note\n        giftCard {\n          id\n          balance {\n            amount\n            currencyCode\n          }\n        }\n      }\n      userErrors {\n        message\n        field\n        code\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/GiftCard/411106674\",\n  \"creditInput\": {\n    \"creditAmount\": {\n      \"amount\": \"10\",\n      \"currencyCode\": \"USD\"\n    },\n    \"processedAt\": \"2024-09-09T12:48:33-04:00\",\n    \"note\": \"A note.\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "giftCardDeactivate", "description": "Deactivate a gift card. A deactivated gift card cannot be used by a customer.\nA deactivated gift card cannot be re-enabled.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID of the gift card to deactivate."}], "returns": [], "examples": [{"description": "Disables a gift card", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation giftCardDeactivate($id: ID!) {\n    giftCardDeactivate(id: $id) {\n      giftCard {\n        id\n        deactivatedAt\n      }\n      userErrors {\n        message\n        field\n        code\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/GiftCard/411106674\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "giftCardDeactivate reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation giftCardDeactivate($id: ID!) {\n    giftCardDeactivate(id: $id) {\n      giftCard {\n        id\n        deactivatedAt\n      }\n      userErrors {\n        message\n        field\n        code\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/GiftCard/411106674\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "giftCardDebit", "description": "Debit a gift card.", "arguments": [{"name": "debitInput", "type": "GiftCardDebitInput!", "required": true, "description": "The input fields to debit a gift card."}], "returns": [], "examples": [{"description": "Debit a gift card by ID", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation giftCardDebit($id: ID!, $debitInput: GiftCardDebitInput!) {\n    giftCardDebit(id: $id, debitInput: $debitInput) {\n      giftCardDebitTransaction {\n        id\n        amount {\n          amount\n          currencyCode\n        }\n        processedAt\n        note\n        giftCard {\n          id\n          balance {\n            amount\n            currencyCode\n          }\n        }\n      }\n      userErrors {\n        message\n        field\n        code\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/GiftCard/411106674\",\n  \"debitInput\": {\n    \"debitAmount\": {\n      \"amount\": \"10\",\n      \"currencyCode\": \"USD\"\n    },\n    \"processedAt\": \"2024-09-09T12:48:33-04:00\",\n    \"note\": \"A note.\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "giftCardDebit reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation giftCardDebit($id: ID!, $debitInput: GiftCardDebitInput!) {\n    giftCardDebit(id: $id, debitInput: $debitInput) {\n      giftCardDebitTransaction {\n        id\n        amount {\n          amount\n          currencyCode\n        }\n        processedAt\n        note\n        giftCard {\n          id\n          balance {\n            amount\n            currencyCode\n          }\n        }\n      }\n      userErrors {\n        message\n        field\n        code\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/GiftCard/411106674\",\n  \"debitInput\": {\n    \"debitAmount\": {\n      \"amount\": \"10\",\n      \"currencyCode\": \"USD\"\n    },\n    \"processedAt\": \"2024-09-09T12:48:33-04:00\",\n    \"note\": \"A note.\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "giftCardSendNotificationToCustomer", "description": "Send notification to the customer of a gift card.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID of the gift card to send."}], "returns": [], "examples": [{"description": "Send a notification to a gift card's customer", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation giftCardSendNotificationToCustomer($id: ID!) {\n    giftCardSendNotificationToCustomer(id: $id) {\n      giftCard {\n        id\n        customer {\n          id\n        }\n      }\n      userErrors {\n        message\n        field\n        code\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/GiftCard/698360200\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "giftCardSendNotificationToCustomer reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation giftCardSendNotificationToCustomer($id: ID!) {\n    giftCardSendNotificationToCustomer(id: $id) {\n      giftCard {\n        id\n        customer {\n          id\n        }\n      }\n      userErrors {\n        message\n        field\n        code\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/GiftCard/698360200\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "giftCardSendNotificationToRecipient", "description": "Send notification to the recipient of a gift card.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID of the gift card to send."}], "returns": [], "examples": [{"description": "Send a notification to a gift card's recipient", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation giftCardSendNotificationToRecipient($id: ID!) {\n    giftCardSendNotificationToRecipient(id: $id) {\n      giftCard {\n        id\n        recipientAttributes {\n          recipient {\n            id\n          }\n        }\n      }\n      userErrors {\n        message\n        field\n        code\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/GiftCard/698360200\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "giftCardSendNotificationToRecipient reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation giftCardSendNotificationToRecipient($id: ID!) {\n    giftCardSendNotificationToRecipient(id: $id) {\n      giftCard {\n        id\n        recipientAttributes {\n          recipient {\n            id\n          }\n        }\n      }\n      userErrors {\n        message\n        field\n        code\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/GiftCard/698360200\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "giftCardUpdate", "description": "Update a gift card.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID of the gift card to be updated."}], "returns": [], "examples": [{"description": "Update a gift card's customer", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation giftCardUpdate($id: ID!, $input: GiftCardUpdateInput!) {\n    giftCardUpdate(id: $id, input: $input) {\n      userErrors {\n        message\n        field\n      }\n      giftCard {\n        id\n        customer {\n          id\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/GiftCard/63396415\",\n  \"input\": {\n    \"customerId\": \"gid://shopify/Customer/331283560\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Update a gift card's recipient", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation giftCardUpdate($id: ID!, $input: GiftCardUpdateInput!) {\n    giftCardUpdate(id: $id, input: $input) {\n      giftCard {\n        id\n        recipientAttributes {\n          recipient {\n            id\n          }\n          message\n          preferredName\n          sendNotificationAt\n        }\n      }\n      userErrors {\n        message\n        field\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/GiftCard/63396415\",\n  \"input\": {\n    \"recipientAttributes\": {\n      \"id\": \"gid://shopify/Customer/331283560\",\n      \"message\": \"Happy Birthday!\",\n      \"preferredName\": \"Dad\",\n      \"sendNotificationAt\": \"2024-10-01T12:00:00Z\"\n    }\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Updates an existing gift card", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation GiftCardUpdate($id: ID!, $input: GiftCardUpdateInput!) {\n    giftCardUpdate(id: $id, input: $input) {\n      giftCard {\n        id\n        note\n      }\n      userErrors {\n        message\n        field\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/GiftCard/63396415\",\n  \"input\": {\n    \"note\": \"A note.\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Updating a gift card's expiration date so that it will never expire", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation giftCardUpdate($id: ID!, $input: GiftCardUpdateInput!) {\n    giftCardUpdate(id: $id, input: $input) {\n      userErrors {\n        message\n        field\n      }\n      giftCard {\n        id\n        expiresOn\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/GiftCard/746346263\",\n  \"input\": {\n    \"expiresOn\": null\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "giftCardUpdate reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation giftCardUpdate($id: ID!, $input: GiftCardUpdateInput!) {\n    giftCardUpdate(id: $id, input: $input) {\n      userErrors {\n        message\n        field\n      }\n      giftCard {\n        id\n        customer {\n          id\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/GiftCard/63396415\",\n  \"input\": {\n    \"customerId\": \"gid://shopify/Customer/331283560\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "marketRegionsDelete", "description": "Deletes a list of market regions.", "arguments": [{"name": "ids", "type": "[ID!]!", "required": true, "description": "A list of IDs of the market regions to delete."}], "returns": [], "examples": []}, {"name": "paymentCustomizationActivation", "description": "Activates and deactivates payment customizations.", "arguments": [{"name": "enabled", "type": "Boolean!", "required": true, "description": "The enabled status of the payment customizations."}], "returns": [], "examples": []}, {"name": "paymentCustomizationCreate", "description": "Creates a payment customization.", "arguments": [{"name": "paymentCustomization", "type": "PaymentCustomizationInput!", "required": true, "description": "The input data used to create the payment customization."}], "returns": [], "examples": []}, {"name": "paymentCustomizationDelete", "description": "Deletes a payment customization.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The global ID of the payment customization."}], "returns": [], "examples": []}, {"name": "paymentCustomizationUpdate", "description": "Updates a payment customization.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The global ID of the payment customization."}], "returns": [], "examples": []}, {"name": "paymentReminderSend", "description": "Sends an email payment reminder for a payment schedule.", "arguments": [{"name": "paymentScheduleId", "type": "ID!", "required": true, "description": "The payment schedule id associated with the reminder."}], "returns": [], "examples": [{"description": "Send a payment reminder", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation paymentReminderSend($paymentScheduleId: ID!) {\n    paymentReminderSend(paymentScheduleId: $paymentScheduleId) {\n      success\n      userErrors {\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"paymentScheduleId\": \"gid://shopify/PaymentSchedule/864539144\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "paymentReminderSend reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation paymentReminderSend($paymentScheduleId: ID!) {\n    paymentReminderSend(paymentScheduleId: $paymentScheduleId) {\n      success\n      userErrors {\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"paymentScheduleId\": \"gid://shopify/PaymentSchedule/864539144\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "paymentTermsCreate", "description": "Create payment terms on an order. To create payment terms on a draft order, use a draft order mutation and include the request with the DraftOrderInput.", "arguments": [{"name": "paymentTermsAttributes", "type": "PaymentTermsCreateInput!", "required": true, "description": "The attributes used to create the payment terms."}], "returns": [], "examples": [{"description": "Create due on receipt payment terms", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation PaymentTermsCreate($referenceId: ID!, $paymentTermsAttributes: PaymentTermsCreateInput!) {\n    paymentTermsCreate(referenceId: $referenceId, paymentTermsAttributes: $paymentTermsAttributes) {\n      paymentTerms {\n        id\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"referenceId\": \"gid://shopify/Order/922426937\",\n  \"paymentTermsAttributes\": {\n    \"paymentTermsTemplateId\": \"gid://shopify/PaymentTermsTemplate/1\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Create fixed payment terms", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation PaymentTermsCreate($referenceId: ID!, $paymentTermsAttributes: PaymentTermsCreateInput!) {\n    paymentTermsCreate(referenceId: $referenceId, paymentTermsAttributes: $paymentTermsAttributes) {\n      paymentTerms {\n        id\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"referenceId\": \"gid://shopify/Order/922426937\",\n  \"paymentTermsAttributes\": {\n    \"paymentTermsTemplateId\": \"gid://shopify/PaymentTermsTemplate/7\",\n    \"paymentSchedules\": [{\"dueAt\"=>\"2022-06-13T22:35:23.311Z\"}]\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Create net payment terms", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation PaymentTermsCreate($referenceId: ID!, $paymentTermsAttributes: PaymentTermsCreateInput!) {\n    paymentTermsCreate(referenceId: $referenceId, paymentTermsAttributes: $paymentTermsAttributes) {\n      paymentTerms {\n        id\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"referenceId\": \"gid://shopify/Order/922426937\",\n  \"paymentTermsAttributes\": {\n    \"paymentTermsTemplateId\": \"gid://shopify/PaymentTermsTemplate/2\",\n    \"paymentSchedules\": [{\"issuedAt\"=>\"2022-06-13T22:30:18.019Z\"}]\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "paymentTermsCreate reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation PaymentTermsCreate($referenceId: ID!, $paymentTermsAttributes: PaymentTermsCreateInput!) {\n    paymentTermsCreate(referenceId: $referenceId, paymentTermsAttributes: $paymentTermsAttributes) {\n      paymentTerms {\n        id\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"referenceId\": \"gid://shopify/Order/922426937\",\n  \"paymentTermsAttributes\": {\n    \"paymentTermsTemplateId\": \"gid://shopify/PaymentTermsTemplate/1\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "paymentTermsDelete", "description": "Delete payment terms for an order. To delete payment terms on a draft order, use a draft order mutation and include the request with the DraftOrderInput.", "arguments": [{"name": "input", "type": "PaymentTermsDeleteInput!", "required": true, "description": "The input fields used to delete the payment terms."}], "returns": [], "examples": [{"description": "Delete payment terms", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation PaymentTermsDelete($input: PaymentTermsDeleteInput!) {\n    paymentTermsDelete(input: $input) {\n      deletedId\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": {\n    \"paymentTermsId\": \"gid://shopify/PaymentTerms/977822362\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "paymentTermsDelete reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation PaymentTermsDelete($input: PaymentTermsDeleteInput!) {\n    paymentTermsDelete(input: $input) {\n      deletedId\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": {\n    \"paymentTermsId\": \"gid://shopify/PaymentTerms/977822362\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "paymentTermsUpdate", "description": "Update payment terms on an order. To update payment terms on a draft order, use a draft order mutation and include the request with the DraftOrderInput.", "arguments": [{"name": "input", "type": "PaymentTermsUpdateInput!", "required": true, "description": "The input fields used to update the payment terms."}], "returns": [], "examples": [{"description": "Update payment terms date", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation PaymentTermsUpdate($input: PaymentTermsUpdateInput!) {\n    paymentTermsUpdate(input: $input) {\n      paymentTerms {\n        id\n      }\n      userErrors {\n        code\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": {\n    \"paymentTermsId\": \"gid://shopify/PaymentTerms/977822362\",\n    \"paymentTermsAttributes\": {\n      \"paymentTermsTemplateId\": \"gid://shopify/PaymentTermsTemplate/7\",\n      \"paymentSchedules\": [{\"dueAt\"=>\"2022-06-13T22:35:23.311Z\"}]\n    }\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Update payment terms type", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation PaymentTermsUpdate($input: PaymentTermsUpdateInput!) {\n    paymentTermsUpdate(input: $input) {\n      paymentTerms {\n        id\n      }\n      userErrors {\n        code\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": {\n    \"paymentTermsId\": \"gid://shopify/PaymentTerms/977822362\",\n    \"paymentTermsAttributes\": {\n      \"paymentTermsTemplateId\": \"gid://shopify/PaymentTermsTemplate/2\",\n      \"paymentSchedules\": [{\"issuedAt\"=>\"2022-06-13T22:35:23.311Z\"}]\n    }\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "paymentTermsUpdate reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation PaymentTermsUpdate($input: PaymentTermsUpdateInput!) {\n    paymentTermsUpdate(input: $input) {\n      paymentTerms {\n        id\n      }\n      userErrors {\n        code\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": {\n    \"paymentTermsId\": \"gid://shopify/PaymentTerms/977822362\",\n    \"paymentTermsAttributes\": {\n      \"paymentTermsTemplateId\": \"gid://shopify/PaymentTermsTemplate/7\",\n      \"paymentSchedules\": [{\"dueAt\"=>\"2022-06-13T22:35:23.311Z\"}]\n    }\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "savedSearchCreate", "description": "Creates a saved search.", "arguments": [{"name": "input", "type": "SavedSearchCreateInput!", "required": true, "description": "Specifies the input fields for a saved search."}], "returns": [], "examples": []}, {"name": "savedSearchDelete", "description": "Delete a saved search.", "arguments": [{"name": "input", "type": "SavedSearchDeleteInput!", "required": true, "description": "The input fields to delete a saved search."}], "returns": [], "examples": []}, {"name": "savedSearchUpdate", "description": "Updates a saved search.", "arguments": [{"name": "input", "type": "SavedSearchUpdateInput!", "required": true, "description": "The input fields to update a saved search."}], "returns": [], "examples": []}, {"name": "stagedUploadTargetGenerate", "description": "Generates the URL and signed paramaters needed to upload an asset to Shopify.", "arguments": [{"name": "input", "type": "StagedUploadTargetGenerateInput!", "required": true, "description": "The input fields for generating a staged upload."}], "returns": [], "examples": []}, {"name": "stagedUploadTargetsGenerate", "description": "Uploads multiple images.", "arguments": [{"name": "input", "type": "[StageImageInput!]!", "required": true, "description": "The input fields for generating staged uploads."}], "returns": [], "examples": []}, {"name": "storeCreditAccountCredit", "description": "Creates a credit transaction that increases the store credit account balance by the given amount.\nThis operation will create an account if one does not already exist.\nA store credit account owner can hold multiple accounts each with a different currency.\nUse the most appropriate currency for the given store credit account owner.", "arguments": [{"name": "creditInput", "type": "StoreCreditAccountCreditInput!", "required": true, "description": "The input fields for a store credit account credit transaction."}], "returns": [], "examples": [{"description": "Credit an amount to a store credit account by customer ID", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation storeCreditAccountCredit($id: ID!, $creditInput: StoreCreditAccountCreditInput!) {\n    storeCreditAccountCredit(id: $id, creditInput: $creditInput) {\n      storeCreditAccountTransaction {\n        amount {\n          amount\n          currencyCode\n        }\n        account {\n          id\n          balance {\n            amount\n            currencyCode\n          }\n        }\n      }\n      userErrors {\n        message\n        field\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/Customer/544365967\",\n  \"creditInput\": {\n    \"creditAmount\": {\n      \"amount\": \"49.99\",\n      \"currencyCode\": \"USD\"\n    }\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Credit an expiring amount to a store credit account by account ID", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation storeCreditAccountCredit($id: ID!, $creditInput: StoreCreditAccountCreditInput!) {\n    storeCreditAccountCredit(id: $id, creditInput: $creditInput) {\n      storeCreditAccountTransaction {\n        amount {\n          amount\n          currencyCode\n        }\n        account {\n          id\n          balance {\n            amount\n            currencyCode\n          }\n        }\n      }\n      userErrors {\n        message\n        field\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/StoreCreditAccount/316863792\",\n  \"creditInput\": {\n    \"expiresAt\": \"2028-10-26\",\n    \"creditAmount\": {\n      \"amount\": \"49.99\",\n      \"currencyCode\": \"USD\"\n    }\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Crediting a negative amount returns an error", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation storeCreditAccountCredit($id: ID!, $creditInput: StoreCreditAccountCreditInput!) {\n    storeCreditAccountCredit(id: $id, creditInput: $creditInput) {\n      storeCreditAccountTransaction {\n        amount {\n          amount\n          currencyCode\n        }\n        account {\n          id\n          balance {\n            amount\n            currencyCode\n          }\n        }\n      }\n      userErrors {\n        message\n        field\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/Customer/1018520244\",\n  \"creditInput\": {\n    \"creditAmount\": {\n      \"amount\": \"-100.00\",\n      \"currencyCode\": \"USD\"\n    }\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Crediting an amount that exceeds the account limit returns an error", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation storeCreditAccountCredit($id: ID!, $creditInput: StoreCreditAccountCreditInput!) {\n    storeCreditAccountCredit(id: $id, creditInput: $creditInput) {\n      storeCreditAccountTransaction {\n        amount {\n          amount\n          currencyCode\n        }\n        account {\n          id\n          balance {\n            amount\n            currencyCode\n          }\n        }\n      }\n      userErrors {\n        message\n        field\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/Customer/1018520244\",\n  \"creditInput\": {\n    \"creditAmount\": {\n      \"amount\": \"100000.00\",\n      \"currencyCode\": \"USD\"\n    }\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "storeCreditAccountCredit reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation storeCreditAccountCredit($id: ID!, $creditInput: StoreCreditAccountCreditInput!) {\n    storeCreditAccountCredit(id: $id, creditInput: $creditInput) {\n      storeCreditAccountTransaction {\n        amount {\n          amount\n          currencyCode\n        }\n        account {\n          id\n          balance {\n            amount\n            currencyCode\n          }\n        }\n      }\n      userErrors {\n        message\n        field\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/Customer/544365967\",\n  \"creditInput\": {\n    \"creditAmount\": {\n      \"amount\": \"49.99\",\n      \"currencyCode\": \"USD\"\n    }\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "storeCreditAccountDebit", "description": "Creates a debit transaction that decreases the store credit account balance by the given amount.", "arguments": [{"name": "debitInput", "type": "StoreCreditAccountDebitInput!", "required": true, "description": "The input fields for a store credit account debit transaction."}], "returns": [], "examples": [{"description": "Debit a store credit account by account ID", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation storeCreditAccountDebit($id: ID!, $debitInput: StoreCreditAccountDebitInput!) {\n    storeCreditAccountDebit(id: $id, debitInput: $debitInput) {\n      storeCreditAccountTransaction {\n        amount {\n          amount\n          currencyCode\n        }\n        account {\n          id\n          balance {\n            amount\n            currencyCode\n          }\n        }\n      }\n      userErrors {\n        message\n        field\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/StoreCreditAccount/316863792\",\n  \"debitInput\": {\n    \"debitAmount\": {\n      \"amount\": \"9.99\",\n      \"currencyCode\": \"USD\"\n    }\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Debit a store credit account by customer ID", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation storeCreditAccountDebit($id: ID!, $debitInput: StoreCreditAccountDebitInput!) {\n    storeCreditAccountDebit(id: $id, debitInput: $debitInput) {\n      storeCreditAccountTransaction {\n        amount {\n          amount\n          currencyCode\n        }\n        account {\n          id\n          balance {\n            amount\n            currencyCode\n          }\n        }\n      }\n      userErrors {\n        message\n        field\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/Customer/544365967\",\n  \"debitInput\": {\n    \"debitAmount\": {\n      \"amount\": \"9.99\",\n      \"currencyCode\": \"USD\"\n    }\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Debiting an amount that exceeds the account balance returns an error", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation storeCreditAccountDebit($id: ID!, $debitInput: StoreCreditAccountDebitInput!) {\n    storeCreditAccountDebit(id: $id, debitInput: $debitInput) {\n      storeCreditAccountTransaction {\n        amount {\n          amount\n          currencyCode\n        }\n        account {\n          id\n          balance {\n            amount\n            currencyCode\n          }\n        }\n      }\n      userErrors {\n        message\n        field\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/StoreCreditAccount/316863792\",\n  \"debitInput\": {\n    \"debitAmount\": {\n      \"amount\": \"100.00\",\n      \"currencyCode\": \"USD\"\n    }\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "storeCreditAccountDebit reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation storeCreditAccountDebit($id: ID!, $debitInput: StoreCreditAccountDebitInput!) {\n    storeCreditAccountDebit(id: $id, debitInput: $debitInput) {\n      storeCreditAccountTransaction {\n        amount {\n          amount\n          currencyCode\n        }\n        account {\n          id\n          balance {\n            amount\n            currencyCode\n          }\n        }\n      }\n      userErrors {\n        message\n        field\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/StoreCreditAccount/316863792\",\n  \"debitInput\": {\n    \"debitAmount\": {\n      \"amount\": \"9.99\",\n      \"currencyCode\": \"USD\"\n    }\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "tagsAdd", "description": "Add tags to an order, a draft order, a customer, a product, or an online store article.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID of a resource to add tags to."}], "returns": [], "examples": [{"description": "Add tags to a customer", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation addTags($id: ID!, $tags: [String!]!) {\n    tagsAdd(id: $id, tags: $tags) {\n      node {\n        id\n      }\n      userErrors {\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/Customer/544365967\",\n  \"tags\": \"one, two, three\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Add tags to a product", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation addTags($id: ID!, $tags: [String!]!) {\n    tagsAdd(id: $id, tags: $tags) {\n      node {\n        id\n      }\n      userErrors {\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/Product/20995642\",\n  \"tags\": \"one, two, three\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Attempt to add tags to an product that does not exist", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation addTags($id: ID!, $tags: [String!]!) {\n    tagsAdd(id: $id, tags: $tags) {\n      node {\n        id\n      }\n      userErrors {\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/Product/12345\",\n  \"tags\": \"one, two, three\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "tagsAdd reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation addTags($id: ID!, $tags: [String!]!) {\n    tagsAdd(id: $id, tags: $tags) {\n      node {\n        id\n      }\n      userErrors {\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/Customer/544365967\",\n  \"tags\": \"one, two, three\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "tagsRemove", "description": "Remove tags from an order, a draft order, a customer, a product, or an online store article.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID of the resource to remove tags from."}], "returns": [], "examples": [{"description": "Remove tags from a customer", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation removeTags($id: ID!, $tags: [String!]!) {\n    tagsRemove(id: $id, tags: $tags) {\n      node {\n        id\n      }\n      userErrors {\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/Customer/544365967\",\n  \"tags\": [\"Bob\"]\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "tagsRemove reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation removeTags($id: ID!, $tags: [String!]!) {\n    tagsRemove(id: $id, tags: $tags) {\n      node {\n        id\n      }\n      userErrors {\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/Customer/544365967\",\n  \"tags\": [\"Bob\"]\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "validationCreate", "description": "Creates a validation.", "arguments": [{"name": "validation", "type": "ValidationCreateInput!", "required": true, "description": "The input fields for a new validation."}], "returns": [], "examples": []}, {"name": "validationDelete", "description": "Deletes a validation.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID representing the installed validation."}], "returns": [], "examples": []}, {"name": "validationUpdate", "description": "Update a validation.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID representing the validation to update."}], "returns": [], "examples": []}], "objects": [{"name": "AbandonedCheckout", "description": "A checkout that was abandoned by the customer.", "fields_and_connections": [{"name": "abandonedCheckoutUrl", "type": "URL!", "description": "The URL for the buyer to recover their checkout.", "not_nullable": true}], "examples": []}, {"name": "AbandonedCheckoutLineItem", "description": "A single line item in an abandoned checkout.", "fields_and_connections": [{"name": "components", "type": "[AbandonedCheckoutLineItemComponent!]", "description": "A list of line item components for this line item.", "not_nullable": true}], "examples": []}, {"name": "AbandonedCheckoutLineItemComponent", "description": "The list of line item components that belong to a line item.", "fields_and_connections": [{"name": "id", "type": "ID!", "description": "A globally-unique ID.", "not_nullable": true}], "examples": []}, {"name": "ApiVersion", "description": "A version of the API, as defined by Shopify API versioning.\nVersions are commonly referred to by their handle (for example, 2021-10).", "fields_and_connections": [{"name": "displayName", "type": "String!", "description": "The human-readable name of the version.", "not_nullable": true}], "examples": []}, {"name": "AppRevokeAccessScopesAppRevokeScopeError", "description": "Represents an error that happens while revoking a granted scope.", "fields_and_connections": [{"name": "code", "type": "AppRevokeAccessScopesAppRevokeScopeErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "BuyerExperienceConfiguration", "description": "Settings describing the behavior of checkout for a B2B buyer.", "fields_and_connections": [{"name": "checkoutToDraft", "type": "Boolean!", "description": "Whether to checkout to draft order for merchant review.", "not_nullable": true}], "examples": []}, {"name": "CheckoutBrandingButton", "description": "The buttons customizations.", "fields_and_connections": [{"name": "background", "type": "CheckoutBrandingBackgroundStyle", "description": "The background style used for buttons.", "not_nullable": false}], "examples": []}, {"name": "CheckoutBrandingButtonColorRoles", "description": "Colors for buttons.", "fields_and_connections": [{"name": "accent", "type": "String", "description": "The color of accented objects (links and focused state).", "not_nullable": false}], "examples": []}, {"name": "CheckoutBrandingBuyerJourney", "description": "The customizations for the breadcrumbs that represent a buyer's journey to the checkout.", "fields_and_connections": [{"name": "visibility", "type": "CheckoutBrandingVisibility", "description": "An option to display or hide the breadcrumbs that represent the buyer's journey on 3-page checkout.", "not_nullable": false}], "examples": []}, {"name": "CheckoutBrandingCartLink", "description": "The customizations that you can make to cart links at checkout.", "fields_and_connections": [{"name": "visibility", "type": "CheckoutBrandingVisibility", "description": "Whether the cart link is visible at checkout.", "not_nullable": false}], "examples": []}, {"name": "CheckoutBrandingCheckbox", "description": "The checkboxes customizations.", "fields_and_connections": [{"name": "cornerRadius", "type": "CheckoutBrandingCornerRadius", "description": "The corner radius used for checkboxes.", "not_nullable": false}], "examples": []}, {"name": "CheckoutBrandingChoiceList", "description": "The choice list customizations.", "fields_and_connections": [{"name": "group", "type": "CheckoutBrandingChoiceListGroup", "description": "The settings that apply to the 'group' variant of ChoiceList.", "not_nullable": false}], "examples": []}, {"name": "CheckoutBrandingChoiceListGroup", "description": "The settings that apply to the 'group' variant of ChoiceList.", "fields_and_connections": [{"name": "spacing", "type": "CheckoutBrandingSpacingKeyword", "description": "The spacing between UI elements in the list.", "not_nullable": false}], "examples": []}, {"name": "CheckoutBrandingColorGlobal", "description": "A set of colors for customizing the overall look and feel of the checkout.", "fields_and_connections": [{"name": "accent", "type": "String", "description": "A color used for interaction, like links and focus states.", "not_nullable": false}], "examples": []}, {"name": "CheckoutBrandingColorRoles", "description": "A group of colors used together on a surface.", "fields_and_connections": [{"name": "accent", "type": "String", "description": "The color of accented objects (links and focused state).", "not_nullable": false}], "examples": []}, {"name": "CheckoutBrandingColors", "description": "The color settings for global colors and color schemes.", "fields_and_connections": [{"name": "global", "type": "CheckoutBrandingColorGlobal", "description": "A group of global colors for customizing the overall look and feel of the user interface.", "not_nullable": false}], "examples": []}, {"name": "CheckoutBrandingColorScheme", "description": "A base set of color customizations that's applied to an area of Checkout, from which every component\npulls its colors.", "fields_and_connections": [{"name": "base", "type": "CheckoutBrandingColorRoles", "description": "The main colors of a scheme. Used for the surface background, text, links, and more.", "not_nullable": false}], "examples": []}, {"name": "CheckoutBrandingColorSchemes", "description": "The color schemes.", "fields_and_connections": [{"name": "scheme1", "type": "CheckoutBrandingColorScheme", "description": "The primary scheme. By default, it\u2019s used for the main area of the interface.", "not_nullable": false}], "examples": []}, {"name": "CheckoutBrandingContainerDivider", "description": "The container's divider customizations.", "fields_and_connections": [{"name": "borderStyle", "type": "CheckoutBrandingBorderStyle", "description": "The divider style.", "not_nullable": false}], "examples": []}, {"name": "CheckoutBrandingContent", "description": "The content container customizations.", "fields_and_connections": [{"name": "divider", "type": "CheckoutBrandingContainerDivider", "description": "The content container's divider style and visibility.", "not_nullable": false}], "examples": []}, {"name": "CheckoutBrandingControlColorRoles", "description": "Colors for form controls.", "fields_and_connections": [{"name": "accent", "type": "String", "description": "The color of accented objects (links and focused state).", "not_nullable": false}], "examples": []}, {"name": "CheckoutBrandingCornerRadiusVariables", "description": "Define the pixel size of corner radius options.", "fields_and_connections": [{"name": "base", "type": "Int", "description": "The value in pixels for base corner radii. Example: 5.", "not_nullable": false}], "examples": []}, {"name": "CheckoutBrandingCustomFont", "description": "A custom font.", "fields_and_connections": [{"name": "genericFileId", "type": "ID", "description": "Globally unique ID reference to the custom font file.", "not_nullable": false}], "examples": []}, {"name": "CheckoutBrandingDividerStyle", "description": "The customizations for the page, content, main, and order summary dividers.", "fields_and_connections": [{"name": "borderStyle", "type": "CheckoutBrandingBorderStyle", "description": "The border style for the divider.", "not_nullable": false}], "examples": []}, {"name": "CheckoutBrandingExpressCheckout", "description": "The Express Checkout customizations.", "fields_and_connections": [{"name": "button", "type": "CheckoutBrandingExpressCheckoutButton", "description": "The Express Checkout buttons customizations.", "not_nullable": false}], "examples": []}, {"name": "CheckoutBrandingExpressCheckoutButton", "description": "The Express Checkout button customizations.", "fields_and_connections": [{"name": "cornerRadius", "type": "CheckoutBrandingCornerRadius", "description": "The corner radius used for the Express Checkout buttons.", "not_nullable": false}], "examples": []}, {"name": "CheckoutBrandingFooter", "description": "A container for the footer section customizations.", "fields_and_connections": [{"name": "alignment", "type": "CheckoutBrandingFooterAlignment", "description": "The footer alignment.", "not_nullable": false}], "examples": []}, {"name": "CheckoutBrandingFooterContent", "description": "The footer content customizations.", "fields_and_connections": [{"name": "visibility", "type": "CheckoutBrandingVisibility", "description": "The visibility settings for footer content.", "not_nullable": false}], "examples": []}, {"name": "CheckoutBrandingGlobal", "description": "The global customizations.", "fields_and_connections": [{"name": "cornerRadius", "type": "CheckoutBrandingGlobalCornerRadius", "description": "The global corner radius setting that overrides all other corner radius\ncustomizations.", "not_nullable": false}], "examples": []}, {"name": "CheckoutBrandingHeaderCartLink", "description": "The header cart link customizations.", "fields_and_connections": [{"name": "contentType", "type": "CheckoutBrandingCartLinkContentType", "description": "The content type for the header back to cart link in 1-page checkout. Setting this to image will render the custom image provided using the image field on the header cart_link object. If no image is provided, the default cart icon will be used.", "not_nullable": false}], "examples": []}, {"name": "CheckoutBrandingHeadingLevel", "description": "The heading level customizations.", "fields_and_connections": [{"name": "typography", "type": "CheckoutBrandingTypographyStyle", "description": "The typography customizations used for headings.", "not_nullable": false}], "examples": []}, {"name": "CheckoutBrandingMainSection", "description": "The main sections customizations.", "fields_and_connections": [{"name": "background", "type": "CheckoutBrandingBackground", "description": "The background style of the main sections.", "not_nullable": false}], "examples": []}, {"name": "CheckoutBrandingMerchandiseThumbnail", "description": "The merchandise thumbnails customizations.", "fields_and_connections": [{"name": "badge", "type": "CheckoutBrandingMerchandiseThumbnailBadge", "description": "The settings for the merchandise thumbnail badge.", "not_nullable": false}], "examples": []}, {"name": "CheckoutBrandingMerchandiseThumbnailBadge", "description": "The merchandise thumbnail badges customizations.", "fields_and_connections": [{"name": "background", "type": "CheckoutBrandingMerchandiseThumbnailBadgeBackground", "description": "The background used for merchandise thumbnail badges.", "not_nullable": false}], "examples": []}, {"name": "CheckoutBrandingOrderSummarySection", "description": "The order summary sections customizations.", "fields_and_connections": [{"name": "background", "type": "CheckoutBrandingBackground", "description": "The background style of the order summary sections.", "not_nullable": false}], "examples": []}, {"name": "CheckoutBrandingSelect", "description": "The selects customizations.", "fields_and_connections": [{"name": "border", "type": "CheckoutBrandingBorder", "description": "The border used for selects.", "not_nullable": false}], "examples": []}, {"name": "CheckoutBrandingShopifyFont", "description": "A Shopify font.", "fields_and_connections": [{"name": "sources", "type": "String", "description": "The font sources.", "not_nullable": false}], "examples": []}, {"name": "CheckoutBrandingTextField", "description": "The text fields customizations.", "fields_and_connections": [{"name": "border", "type": "CheckoutBrandingBorder", "description": "The border used for text fields.", "not_nullable": false}], "examples": []}, {"name": "CheckoutBrandingTypographyStyle", "description": "The typography customizations.", "fields_and_connections": [{"name": "font", "type": "CheckoutBrandingTypographyFont", "description": "The font.", "not_nullable": false}], "examples": []}, {"name": "CheckoutBrandingTypographyStyleGlobal", "description": "The global typography customizations.", "fields_and_connections": [{"name": "kerning", "type": "CheckoutBrandingTypographyKerning", "description": "The kerning.", "not_nullable": false}], "examples": []}, {"name": "CheckoutProfile", "description": "A checkout profile defines the branding settings and the UI extensions for a store's checkout. A checkout profile could be published or draft. A store might have at most one published checkout profile, which is used to render their live checkout. The store could also have multiple draft profiles that were created, previewed, and published using the admin checkout editor.", "fields_and_connections": [{"name": "createdAt", "type": "DateTime!", "description": "The date and time when the checkout profile was created.", "not_nullable": true}], "examples": []}, {"name": "Count", "description": "Details for count of elements.", "fields_and_connections": [{"name": "count", "type": "Int!", "description": "The count of elements.", "not_nullable": true}], "examples": []}, {"name": "CustomerCreditCard", "description": "Represents a card instrument for customer payment method.", "fields_and_connections": [{"name": "billingAddress", "type": "CustomerCreditCardBillingAddress", "description": "The billing address of the card.", "not_nullable": true}], "examples": []}, {"name": "CustomerPaymentInstrumentBillingAddress", "description": "The billing address of a payment instrument.", "fields_and_connections": [{"name": "address1", "type": "String", "description": "The first line of the address. Typically the street address or PO Box number.", "not_nullable": false}], "examples": []}, {"name": "CustomerPaymentMethod", "description": "A customer's payment method.", "fields_and_connections": [{"name": "customer", "type": "Customer", "description": "The customer to whom the payment method belongs.", "not_nullable": true}], "examples": []}, {"name": "CustomerPaypalBillingAgreement", "description": "Represents a PayPal instrument for customer payment method.", "fields_and_connections": [{"name": "billingAddress", "type": "CustomerPaymentInstrumentBillingAddress", "description": "The billing address of this payment method.", "not_nullable": true}], "examples": []}, {"name": "CustomerShopPayAgreement", "description": "Represents a Shop Pay card instrument for customer payment method.", "fields_and_connections": [{"name": "billingAddress", "type": "CustomerCreditCardBillingAddress", "description": "The billing address of the card.", "not_nullable": true}], "examples": []}, {"name": "DepositPercentage", "description": "A percentage deposit.", "fields_and_connections": [{"name": "percentage", "type": "Float!", "description": "The percentage value of the deposit.", "not_nullable": true}], "examples": []}, {"name": "Domain", "description": "A unique string that represents the address of a Shopify store on the Internet.", "fields_and_connections": [{"name": "host", "type": "String!", "description": "The host name of the domain. For example, example.com.", "not_nullable": true}], "examples": []}, {"name": "DomainLocalization", "description": "The country and language settings assigned to a domain.", "fields_and_connections": [{"name": "alternateLocales", "type": "[String!]!", "description": "The ISO codes for the domain\u2019s alternate locales. For example, [\"en\"].", "not_nullable": true}], "examples": []}, {"name": "FinanceAppAccessPolicy", "description": "Current user's access policy for a finance app.", "fields_and_connections": [{"name": "access", "type": "[BankingFinanceAppAccess!]!", "description": "Current shop staff's access within the app.", "not_nullable": true}], "examples": []}, {"name": "FulfillmentConstraintRule", "description": "A fulfillment constraint rule.", "fields_and_connections": [{"name": "deliveryMethodTypes", "type": "[DeliveryMethodType!]!", "description": "Delivery method types that the function is associated with.", "not_nullable": true}], "examples": []}, {"name": "FunctionsAppBridge", "description": "The App Bridge information for a Shopify Function.", "fields_and_connections": [{"name": "createPath", "type": "String!", "description": "The relative path for creating a customization.", "not_nullable": true}], "examples": []}, {"name": "FunctionsErrorHistory", "description": "The error history from running a Shopify Function.", "fields_and_connections": [{"name": "errorsFirstOccurredAt", "type": "DateTime!", "description": "The date and time that the first error occurred.", "not_nullable": true}], "examples": []}, {"name": "GiftCard", "description": "Represents an issued gift card.", "fields_and_connections": [{"name": "balance", "type": "MoneyV2!", "description": "The gift card's remaining balance.", "not_nullable": true}], "examples": []}, {"name": "GiftCardConfiguration", "description": "Represents information about the configuration of gift cards on the shop.", "fields_and_connections": [{"name": "issueLimit", "type": "MoneyV2!", "description": "The issue limit for gift cards in the default shop currency.", "not_nullable": true}], "examples": []}, {"name": "GiftCardCreditTransaction", "description": "A credit transaction which increases the gift card balance.", "fields_and_connections": [{"name": "amount", "type": "MoneyV2!", "description": "The amount of the transaction.", "not_nullable": true}], "examples": []}, {"name": "GiftCardDebitTransaction", "description": "A debit transaction which decreases the gift card balance.", "fields_and_connections": [{"name": "amount", "type": "MoneyV2!", "description": "The amount of the transaction.", "not_nullable": true}], "examples": []}, {"name": "GiftCardRecipient", "description": "Represents a recipient who will receive the issued gift card.", "fields_and_connections": [{"name": "message", "type": "String", "description": "The message sent with the gift card.", "not_nullable": true}], "examples": []}, {"name": "Image", "description": "Represents an image resource.", "fields_and_connections": [{"name": "altText", "type": "String", "description": "A word or phrase to share the nature or contents of an image.", "not_nullable": true}], "examples": []}, {"name": "ImageUploadParameter", "description": "A parameter to upload an image.\nDeprecated in favor of\nStagedUploadParameter,\nwhich is used in\nStagedMediaUploadTarget\nand returned by the\nstagedUploadsCreate mutation.", "fields_and_connections": [{"name": "name", "type": "String!", "description": "The parameter name.", "not_nullable": true}], "examples": []}, {"name": "Job", "description": "A job corresponds to some long running task that the client should poll for status.", "fields_and_connections": [{"name": "done", "type": "Boolean!", "description": "This indicates if the job is still queued or has been run.", "not_nullable": true}], "examples": []}, {"name": "LocalizedField", "description": "Represents the value captured by a localized field. Localized fields are additional fields required by certain countries on international orders. For example, some countries require additional fields for customs information or tax identification numbers.", "fields_and_connections": [{"name": "countryCode", "type": "CountryCode!", "description": "Country ISO 3166-1 alpha-2 code.", "not_nullable": true}], "examples": []}, {"name": "MailingAddress", "description": "Represents a customer mailing address.\nFor example, a customer's default address and an order's billing address are both mailling addresses.", "fields_and_connections": [{"name": "address1", "type": "String", "description": "The first line of the address. Typically the street address or PO Box number.", "not_nullable": true}], "examples": []}, {"name": "MerchantApprovalSignals", "description": "Merchant approval for accelerated onboarding to channel integration apps.", "fields_and_connections": [{"name": "identityVerified", "type": "Boolean!", "description": "Whether the shop's Shopify Payments account identity is verified. Returns false if the identity is unverified or if the shop doesn't have a Shopify Payments account.", "not_nullable": true}], "examples": []}, {"name": "MetafieldAccess", "description": "Access permissions for the definition's metafields.", "fields_and_connections": [{"name": "admin", "type": "MetafieldAdminAccess", "description": "The access permitted on the Admin API.", "not_nullable": true}], "examples": []}, {"name": "MetafieldAccessGrant", "description": "An explicit access grant for the metafields under this definition.\nExplicit grants are deprecated.", "fields_and_connections": [{"name": "access", "type": "MetafieldGrantAccessLevel!", "description": "The level of access the grantee has.", "not_nullable": true}], "examples": []}, {"name": "MetafieldCapabilities", "description": "Provides the capabilities of a metafield definition.", "fields_and_connections": [{"name": "adminFilterable", "type": "MetafieldCapabilityAdminFilterable!", "description": "Indicate whether a metafield definition is configured for filtering.", "not_nullable": true}], "examples": []}, {"name": "MetafieldCapabilityAdminFilterable", "description": "Information about the admin filterable capability on a metafield definition.", "fields_and_connections": [{"name": "eligible", "type": "Boolean!", "description": "Indicates if the definition is eligible to have the capability.", "not_nullable": true}], "examples": []}, {"name": "MetafieldCapabilityUniqueValues", "description": "Information about the unique values capability on a metafield definition.", "fields_and_connections": [{"name": "eligible", "type": "Boolean!", "description": "Indicates if the definition is eligible to have the capability.", "not_nullable": true}], "examples": []}, {"name": "MetafieldDefinitionConstraints", "description": "The constraints\nthat determine what subtypes of resources a metafield definition applies to.", "fields_and_connections": [{"name": "key", "type": "String", "description": "The category of resource subtypes that the definition applies to.", "not_nullable": true}], "examples": []}, {"name": "MetafieldDefinitionConstraintValue", "description": "A constraint subtype value that the metafield definition applies to.", "fields_and_connections": [{"name": "value", "type": "String!", "description": "The subtype value of the constraint.", "not_nullable": true}], "examples": []}, {"name": "MetafieldDefinitionIdentifier", "description": "Identifies a metafield definition by its owner type, namespace, and key.", "fields_and_connections": [{"name": "key", "type": "String!", "description": "The unique identifier for the metafield definition within its namespace.", "not_nullable": true}], "examples": []}, {"name": "MetafieldIdentifier", "description": "Identifies a metafield by its owner resource, namespace, and key.", "fields_and_connections": [{"name": "key", "type": "String!", "description": "The key of the metafield.", "not_nullable": true}], "examples": []}, {"name": "MetafieldRelation", "description": "Defines a relation between two resources via a reference metafield.\nThe referencer owns the joining field with a given namespace and key,\nwhile the target is referenced by the field.", "fields_and_connections": [{"name": "key", "type": "String!", "description": "The key of the field making the reference.", "not_nullable": true}], "examples": []}, {"name": "MetaobjectThumbnail", "description": "Provides attributes for visual representation.", "fields_and_connections": [{"name": "file", "type": "File", "description": "The file to be used for visual representation of this metaobject.", "not_nullable": false}], "examples": []}, {"name": "MoneyBag", "description": "A collection of monetary values in their respective currencies. Typically used in the context of multi-currency pricing and transactions,\nwhen an amount in the shop's currency is converted to the customer's currency of choice (the presentment currency).", "fields_and_connections": [{"name": "presentmentMoney", "type": "MoneyV2!", "description": "Amount in presentment currency.", "not_nullable": true}], "examples": []}, {"name": "MoneyV2", "description": "A monetary value with currency.", "fields_and_connections": [{"name": "amount", "type": "Decimal!", "description": "Decimal money amount.", "not_nullable": true}], "examples": []}, {"name": "MutationsStagedUploadTargetGenerateUploadParameter", "description": "A signed upload parameter for uploading an asset to Shopify.\nDeprecated in favor of\nStagedUploadParameter,\nwhich is used in\nStagedMediaUploadTarget\nand returned by the\nstagedUploadsCreate mutation.", "fields_and_connections": [{"name": "name", "type": "String!", "description": "The upload parameter name.", "not_nullable": true}], "examples": []}, {"name": "OrderPaymentStatus", "description": "The status of a customer's payment for an order.", "fields_and_connections": [{"name": "errorMessage", "type": "String", "description": "A message describing an error during the asynchronous processing of a payment.", "not_nullable": true}], "examples": []}, {"name": "PageInfo", "description": "Returns information about pagination in a connection, in accordance with the\nRelay specification.\nFor more information, please read our GraphQL Pagination Usage Guide.", "fields_and_connections": [{"name": "endCursor", "type": "String", "description": "The cursor corresponding to the last node in edges.", "not_nullable": true}], "examples": []}, {"name": "PaymentCustomization", "description": "A payment customization.", "fields_and_connections": [{"name": "enabled", "type": "Boolean!", "description": "The enabled status of the payment customization.", "not_nullable": true}], "examples": []}, {"name": "PaymentCustomizationError", "description": "An error that occurs during the execution of a payment customization mutation.", "fields_and_connections": [{"name": "code", "type": "PaymentCustomizationErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "PaymentMandate", "description": "A payment instrument and the permission\nthe owner of the instrument gives to the merchant to debit it.", "fields_and_connections": [{"name": "id", "type": "ID!", "description": "The unique ID of a payment mandate.", "not_nullable": true}], "examples": []}, {"name": "PaymentSchedule", "description": "Represents the payment schedule for a single payment defined in the payment terms.", "fields_and_connections": [{"name": "completedAt", "type": "DateTime", "description": "Date and time when the payment schedule is paid or fulfilled.", "not_nullable": true}], "examples": []}, {"name": "PaymentTerms", "description": "Represents the payment terms for an order or draft order.", "fields_and_connections": [{"name": "draftOrder", "type": "DraftOrder", "description": "The draft order associated with the payment terms.", "not_nullable": true}], "examples": []}, {"name": "PaymentTermsTemplate", "description": "Represents the payment terms template object.", "fields_and_connections": [{"name": "description", "type": "String!", "description": "The description of the payment terms template.", "not_nullable": true}], "examples": []}, {"name": "ProductResourceFeedback", "description": "Reports the status of product for a Sales Channel or Storefront API.\nThis might include why a product is not available in a Sales Channel\nand how a merchant might fix this.", "fields_and_connections": [{"name": "feedbackGeneratedAt", "type": "DateTime!", "description": "The time when the feedback was generated. Used to help determine whether\nincoming feedback is outdated compared to existing feedback.", "not_nullable": true}], "examples": []}, {"name": "QueryRoot", "description": "The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start.", "fields_and_connections": [{"name": "abandonedCheckouts", "type": "AbandonedCheckoutConnection!", "description": "List of abandoned checkouts. Includes checkouts that were recovered after being abandoned.", "not_nullable": true}], "examples": []}, {"name": "SavedSearch", "description": "A saved search is a representation of a search query saved in the admin.", "fields_and_connections": [{"name": "filters", "type": "[SearchFilter!]!", "description": "The filters of a saved search.", "not_nullable": true}], "examples": []}, {"name": "SearchFilter", "description": "A filter in a search query represented by a key value pair.", "fields_and_connections": [{"name": "key", "type": "String!", "description": "The key of the search filter.", "not_nullable": true}], "examples": []}, {"name": "SearchFilterOptions", "description": "A list of search filters along with their specific options in value and label pair for filtering.", "fields_and_connections": [{"name": "productAvailability", "type": "[FilterOption!]!", "description": "A list of options that can be use to filter product availability.", "not_nullable": true}], "examples": []}, {"name": "SearchResult", "description": "Represents an individual result returned from a search.", "fields_and_connections": [{"name": "description", "type": "String", "description": "Returns the search result description text.", "not_nullable": true}], "examples": []}, {"name": "ShopifyFunction", "description": "A Shopify Function.", "fields_and_connections": [{"name": "apiType", "type": "String!", "description": "The API type of the Shopify Function.", "not_nullable": true}], "examples": []}, {"name": "StaffMember", "description": "Represents the data about a staff member's Shopify account. Merchants can use staff member data to get more information about the staff members in their store.", "fields_and_connections": [{"name": "accountType", "type": "AccountType", "description": "The type of account the staff member has.", "not_nullable": true}], "examples": []}, {"name": "StaffMemberPrivateData", "description": "Represents the data used to customize the Shopify admin experience for a logged-in staff member.", "fields_and_connections": [{"name": "accountSettingsUrl", "type": "URL!", "description": "The URL to the staff member's account settings page.", "not_nullable": true}], "examples": []}, {"name": "StagedUploadParameter", "description": "The parameters required to authenticate a file upload request using a\nStagedMediaUploadTarget's url field.\nFor more information on the upload process, refer to\nUpload media to Shopify.", "fields_and_connections": [{"name": "name", "type": "String!", "description": "The parameter's name.", "not_nullable": true}], "examples": []}, {"name": "StagedUploadTarget", "description": "Information about the staged target.\nDeprecated in favor of\nStagedMediaUploadTarget,\nwhich is returned by the\nstagedUploadsCreate mutation.", "fields_and_connections": [{"name": "parameters", "type": "[ImageUploadParameter!]!", "description": "The parameters of an image to be uploaded.", "not_nullable": true}], "examples": []}, {"name": "StandardMetaobjectCapabilityTemplate", "description": "Describes a capability that is enabled on a Metaobject Definition.", "fields_and_connections": [{"name": "capabilityType", "type": "MetaobjectCapabilityType!", "description": "The type of capability that's enabled for the metaobject definition.", "not_nullable": true}], "examples": []}, {"name": "StandardMetaobjectDefinitionFieldTemplate", "description": "A preset field definition on a standard metaobject definition template.", "fields_and_connections": [{"name": "description", "type": "String", "description": "The administrative description.", "not_nullable": true}], "examples": []}, {"name": "StandardMetaobjectDefinitionTemplate", "description": "Standard metaobject definition templates provide preset configurations to create metaobject definitions.", "fields_and_connections": [{"name": "description", "type": "String", "description": "The administrative description.", "not_nullable": true}], "examples": []}, {"name": "StoreCreditAccount", "description": "A store credit account contains a monetary balance that can be redeemed at checkout for purchases in the shop.\nThe account is held in the specified currency and has an owner that cannot be transferred.\nThe account balance is redeemable at checkout only when the owner is authenticated via new customer accounts authentication.", "fields_and_connections": [{"name": "balance", "type": "MoneyV2!", "description": "The current balance of the store credit account.", "not_nullable": true}], "examples": []}, {"name": "StoreCreditAccountCreditTransaction", "description": "A credit transaction which increases the store credit account balance.", "fields_and_connections": [{"name": "account", "type": "StoreCreditAccount!", "description": "The store credit account that the transaction belongs to.", "not_nullable": true}], "examples": []}, {"name": "StoreCreditAccountDebitRevertTransaction", "description": "A debit revert transaction which increases the store credit account balance.\nDebit revert transactions are created automatically when a store credit account debit transaction is reverted.\nStore credit account debit transactions are reverted when an order is cancelled, refunded or in the event of a payment failure at checkout.\nThe amount added to the balance is equal to the amount reverted on the original credit.", "fields_and_connections": [{"name": "account", "type": "StoreCreditAccount!", "description": "The store credit account that the transaction belongs to.", "not_nullable": true}], "examples": []}, {"name": "StoreCreditAccountDebitTransaction", "description": "A debit transaction which decreases the store credit account balance.", "fields_and_connections": [{"name": "account", "type": "StoreCreditAccount!", "description": "The store credit account that the transaction belongs to.", "not_nullable": true}], "examples": []}, {"name": "StoreCreditAccountExpirationTransaction", "description": "An expiration transaction which decreases the store credit account balance.\nExpiration transactions are created automatically when a store credit account credit transaction expires.\nThe amount subtracted from the balance is equal to the remaining amount of the credit transaction.", "fields_and_connections": [{"name": "account", "type": "StoreCreditAccount!", "description": "The store credit account that the transaction belongs to.", "not_nullable": true}], "examples": []}, {"name": "TypedAttribute", "description": "Represents a typed custom attribute.", "fields_and_connections": [{"name": "key", "type": "String!", "description": "Key or name of the attribute.", "not_nullable": true}], "examples": []}, {"name": "Validation", "description": "A checkout server side validation installed on the shop.", "fields_and_connections": [{"name": "blockOnFailure", "type": "Boolean!", "description": "Whether the validation should block on failures other than expected violations.", "not_nullable": true}], "examples": []}, {"name": "VaultCreditCard", "description": "Represents a credit card payment instrument.", "fields_and_connections": [{"name": "billingAddress", "type": "CustomerCreditCardBillingAddress", "description": "The billing address of the card.", "not_nullable": true}], "examples": []}, {"name": "VaultPaypalBillingAgreement", "description": "Represents a paypal billing agreement payment instrument.", "fields_and_connections": [{"name": "inactive", "type": "Boolean!", "description": "Whether the paypal billing agreement is inactive.", "not_nullable": true}], "examples": []}, {"name": "WebhookSubscriptionMetafieldIdentifier", "description": "Identifies metafields by their namespace, and key.", "fields_and_connections": [{"name": "key", "type": "String!", "description": "The unique identifier for the metafield definition within its namespace.", "not_nullable": true}], "examples": []}]}, {"name": "Customers", "queries": [{"name": "customer", "description": "Returns a Customer resource by ID.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID of the Customer to return."}], "returns": [], "examples": [{"description": "Get a customer by ID", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    customer(id: \"gid://shopify/Customer/544365967\") {\n      id\n      firstName\n      lastName\n      email\n      phone\n      numberOfOrders\n      amountSpent {\n        amount\n        currencyCode\n      }\n      createdAt\n      updatedAt\n      note\n      verifiedEmail\n      validEmailAddress\n      tags\n      lifetimeDuration\n      defaultAddress {\n        formattedArea\n        address1\n      }\n      addresses {\n        address1\n      }\n      image {\n        src\n      }\n      canDelete\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "Get a customer by ID", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    customer(id: \"gid://shopify/Customer/544365967\") {\n      id\n      firstName\n      lastName\n      email\n      phone\n      numberOfOrders\n      amountSpent {\n        amount\n        currencyCode\n      }\n      createdAt\n      updatedAt\n      note\n      verifiedEmail\n      validEmailAddress\n      tags\n      lifetimeDuration\n      defaultAddress {\n        formattedArea\n        address1\n      }\n      addresses {\n        address1\n      }\n      image {\n        src\n      }\n      canDelete\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "Get a customer's name, email, and default address", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    customer(id: \"gid://shopify/Customer/544365967\") {\n      email\n      firstName\n      lastName\n      defaultAddress {\n        address1\n        city\n        province\n        zip\n        country\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "Get a customer's name, email, and default address", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    customer(id: \"gid://shopify/Customer/544365967\") {\n      email\n      firstName\n      lastName\n      defaultAddress {\n        address1\n        city\n        province\n        zip\n        country\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "Get a metafield attached to a customer", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query CustomerMetafield($namespace: String!, $key: String!, $ownerId: ID!) {\n    customer(id: $ownerId) {\n      nickname: metafield(namespace: $namespace, key: $key) {\n        value\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"namespace\": \"my_fields\",\n  \"key\": \"nickname\",\n  \"ownerId\": \"gid://shopify/Customer/544365967\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Get a metafield attached to a customer", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query CustomerMetafield($namespace: String!, $key: String!, $ownerId: ID!) {\n    customer(id: $ownerId) {\n      nickname: metafield(namespace: $namespace, key: $key) {\n        value\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"namespace\": \"my_fields\",\n  \"key\": \"nickname\",\n  \"ownerId\": \"gid://shopify/Customer/544365967\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Get all a customer's fields and connections", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    customer(id: \"gid://shopify/Customer/544365967\") {\n      addresses(first: 5) {\n        address1\n      }\n      canDelete\n      createdAt\n      defaultAddress {\n        address1\n      }\n      displayName\n      email\n      events(first: 5) {\n        edges {\n          node {\n            message\n          }\n        }\n      }\n      firstName\n      id\n      image {\n        id\n      }\n      lastName\n      legacyResourceId\n      lifetimeDuration\n      mergeable {\n        isMergeable\n        reason\n      }\n      metafield(key: \"app_key\", namespace: \"affiliates\") {\n        description\n      }\n      metafields(first: 5) {\n        edges {\n          node {\n            id\n          }\n        }\n      }\n      note\n      orders(first: 5) {\n        edges {\n          node {\n            id\n          }\n        }\n      }\n      numberOfOrders\n      phone\n      state\n      tags\n      taxExempt\n      amountSpent {\n        amount\n      }\n      updatedAt\n      validEmailAddress\n      verifiedEmail\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "Get all a customer's fields and connections", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    customer(id: \"gid://shopify/Customer/544365967\") {\n      addresses(first: 5) {\n        address1\n      }\n      canDelete\n      createdAt\n      defaultAddress {\n        address1\n      }\n      displayName\n      email\n      events(first: 5) {\n        edges {\n          node {\n            message\n          }\n        }\n      }\n      firstName\n      id\n      image {\n        id\n      }\n      lastName\n      legacyResourceId\n      lifetimeDuration\n      mergeable {\n        isMergeable\n        reason\n      }\n      metafield(key: \"app_key\", namespace: \"affiliates\") {\n        description\n      }\n      metafields(first: 5) {\n        edges {\n          node {\n            id\n          }\n        }\n      }\n      note\n      orders(first: 5) {\n        edges {\n          node {\n            id\n          }\n        }\n      }\n      numberOfOrders\n      phone\n      state\n      tags\n      taxExempt\n      amountSpent {\n        amount\n      }\n      updatedAt\n      validEmailAddress\n      verifiedEmail\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "Get metafields attached to a customer", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query CustomerMetafields($ownerId: ID!) {\n    customer(id: $ownerId) {\n      metafields(first: 3) {\n        edges {\n          node {\n            namespace\n            key\n            value\n          }\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"ownerId\": \"gid://shopify/Customer/544365967\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Get metafields attached to a customer", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query CustomerMetafields($ownerId: ID!) {\n    customer(id: $ownerId) {\n      metafields(first: 3) {\n        edges {\n          node {\n            namespace\n            key\n            value\n          }\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"ownerId\": \"gid://shopify/Customer/544365967\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Get pinned metafield definitions associated with a customer", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query CustomerMetafieldDefinitions($ownerId: ID!, $first: Int, $pinnedStatus: MetafieldDefinitionPinnedStatus, $sortKey: MetafieldDefinitionSortKeys) {\n    customer(id: $ownerId) {\n      metafieldDefinitions(first: $first, pinnedStatus: $pinnedStatus, sortKey: $sortKey) {\n        edges {\n          node {\n            name\n            namespace\n            key\n            type {\n              name\n            }\n          }\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"pinnedStatus\": \"PINNED\",\n  \"ownerId\": \"gid://shopify/Customer/544365967\",\n  \"first\": 10,\n  \"sortKey\": \"PINNED_POSITION\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Get pinned metafield definitions associated with a customer", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query CustomerMetafieldDefinitions($ownerId: ID!, $first: Int, $pinnedStatus: MetafieldDefinitionPinnedStatus, $sortKey: MetafieldDefinitionSortKeys) {\n    customer(id: $ownerId) {\n      metafieldDefinitions(first: $first, pinnedStatus: $pinnedStatus, sortKey: $sortKey) {\n        edges {\n          node {\n            name\n            namespace\n            key\n            type {\n              name\n            }\n          }\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"pinnedStatus\": \"PINNED\",\n  \"ownerId\": \"gid://shopify/Customer/544365967\",\n  \"first\": 10,\n  \"sortKey\": \"PINNED_POSITION\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Get the email, name, and account creation date of three customers using a fragment", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    Bob: customer(id: \"gid://shopify/Customer/544365967\") {\n      ...customerProfile\n    }\n    Jane: customer(id: \"gid://shopify/Customer/567375318\") {\n      ...customerProfile\n    }\n    Jenny: customer(id: \"gid://shopify/Customer/56501169\") {\n      ...customerProfile\n    }\n  }\n  \n  fragment customerProfile on Customer {\n    firstName\n    lastName\n    email\n    createdAt\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "Get the email, name, and account creation date of three customers using a fragment", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    Bob: customer(id: \"gid://shopify/Customer/544365967\") {\n      ...customerProfile\n    }\n    Jane: customer(id: \"gid://shopify/Customer/567375318\") {\n      ...customerProfile\n    }\n    Jenny: customer(id: \"gid://shopify/Customer/56501169\") {\n      ...customerProfile\n    }\n  }\n  \n  fragment customerProfile on Customer {\n    firstName\n    lastName\n    email\n    createdAt\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "Get the first five line items of the customer's last order", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    customer(id: \"gid://shopify/Customer/624407574\") {\n      lastOrder {\n        lineItems(first: 5) {\n          edges {\n            node {\n              name\n              quantity\n            }\n          }\n        }\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "Get the first five line items of the customer's last order", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    customer(id: \"gid://shopify/Customer/624407574\") {\n      lastOrder {\n        lineItems(first: 5) {\n          edges {\n            node {\n              name\n              quantity\n            }\n          }\n        }\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "Get the merge status of a customer", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    customer(id: \"gid://shopify/Customer/105906728\") {\n      mergeable {\n        isMergeable\n        reason\n        errorFields\n        mergeInProgress {\n          jobId\n          status\n          resultingCustomerId\n          customerMergeErrors {\n            errorFields\n            message\n          }\n        }\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "Get the merge status of a customer", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    customer(id: \"gid://shopify/Customer/105906728\") {\n      mergeable {\n        isMergeable\n        reason\n        errorFields\n        mergeInProgress {\n          jobId\n          status\n          resultingCustomerId\n          customerMergeErrors {\n            errorFields\n            message\n          }\n        }\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "Get two specific customers by their ID using aliases", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    bob: customer(id: \"gid://shopify/Customer/544365967\") {\n      firstName\n      lastName\n      email\n    }\n    john: customer(id: \"gid://shopify/Customer/105906728\") {\n      firstName\n      lastName\n      email\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "Get two specific customers by their ID using aliases", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    bob: customer(id: \"gid://shopify/Customer/544365967\") {\n      firstName\n      lastName\n      email\n    }\n    john: customer(id: \"gid://shopify/Customer/105906728\") {\n      firstName\n      lastName\n      email\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "Retrieve details for all addresses associated with a customer", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query CustomerAddressShow($id: ID!) {\n    customer(id: $id) {\n      addressesV2(first: 250) {\n        edges {\n          node {\n            id\n            address1\n            city\n          }\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/Customer/544365967\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Retrieves a list of addresses for a customer", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query CustomerAddressList($id: ID!) {\n    customer(id: $id) {\n      defaultAddress {\n        address1\n        city\n      }\n      addressesV2(first: 10) {\n        edges {\n          node {\n            address1\n            city\n          }\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/Customer/544365967\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Retrieves a list of addresses for a customer", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query CustomerAddressList($id: ID!) {\n    customer(id: $id) {\n      defaultAddress {\n        address1\n        city\n      }\n      addressesV2(first: 10) {\n        edges {\n          node {\n            address1\n            city\n          }\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/Customer/544365967\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Retrieves details for a single customer address", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query CustomerAddressShow($id: ID!) {\n    customer(id: $id) {\n      addressesV2(first: 250) {\n        edges {\n          node {\n            id\n            address1\n            city\n          }\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/Customer/544365967\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "customerByIdentifier", "description": "Return a customer by an identifier.", "arguments": [{"name": "identifier", "type": "CustomerIdentifierInput!", "required": true, "description": "The identifier of the customer."}], "returns": [], "examples": [{"description": "Find a customer by custom id", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query($identifier: CustomerIdentifierInput!) {\n    customer: customerByIdentifier(identifier: $identifier) {\n      id\n      amountSpent {\n        amount\n        currencyCode\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"identifier\": {\n    \"customId\": {\n      \"namespace\": \"custom\",\n      \"key\": \"id\",\n      \"value\": \"16a3a6dd\"\n    }\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Find a customer by email address", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query($identifier: CustomerIdentifierInput!) {\n    customer: customerByIdentifier(identifier: $identifier) {\n      id\n      amountSpent {\n        amount\n        currencyCode\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"identifier\": {\n    \"emailAddress\": \"bob@example.com\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Find a customer by phone number", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query($identifier: CustomerIdentifierInput!) {\n    customer: customerByIdentifier(identifier: $identifier) {\n      id\n      amountSpent {\n        amount\n        currencyCode\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"identifier\": {\n    \"phoneNumber\": \"+13125551212\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "customerMergePreview", "description": "Returns a preview of a customer merge request.", "arguments": [{"name": "customerOneId", "type": "ID!", "required": false, "description": "The ID of the first customer that will be merged."}], "returns": [], "examples": []}, {"name": "customers", "description": "Returns a list of customers in your Shopify store, including key information such as name, email, location, and purchase history.\nUse this query to segment your audience, personalize marketing campaigns, or analyze customer behavior by applying filters based on location, order history, marketing preferences and tags.\nThe customers query supports pagination and sorting.", "arguments": [{"name": "after", "type": "String", "required": true, "description": "The elements that come after the specified cursor."}], "returns": [], "examples": [{"description": "Retrieve detailed information for a list of customers", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query CustomerList {\n    customers(first: 50) {\n      nodes {\n        id\n        firstName\n        lastName\n        defaultEmailAddress {\n          emailAddress\n          marketingState\n        }\n        defaultPhoneNumber {\n          phoneNumber\n          marketingState\n          marketingCollectedFrom\n        }\n        createdAt\n        updatedAt\n        numberOfOrders\n        state\n        amountSpent {\n          amount\n          currencyCode\n        }\n        verifiedEmail\n        taxExempt\n        tags\n        addresses {\n          id\n          firstName\n          lastName\n          address1\n          city\n          province\n          country\n          zip\n          phone\n          name\n          provinceCode\n          countryCodeV2\n        }\n        defaultAddress {\n          id\n          address1\n          city\n          province\n          country\n          zip\n          phone\n          provinceCode\n          countryCodeV2\n        }\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "Retrieve the first 10 customers updated after December 1, 2019", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    customers(first: 10, query: \"updated_at:>2019-12-01\") {\n      edges {\n        node {\n          id\n          firstName\n          lastName\n          updatedAt\n        }\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "Retrieve the first 10 customers using pagination", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    customers(first: 10) {\n      edges {\n        cursor\n        node {\n          id\n          firstName\n          lastName\n          defaultEmailAddress {\n            emailAddress\n          }\n          defaultPhoneNumber {\n            phoneNumber\n          }\n          createdAt\n          updatedAt\n          numberOfOrders\n          state\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "Retrieve the first 10 customers with an enabled customer account", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    customers(first: 10, query: \"state:'ENABLED'\") {\n      edges {\n        node {\n          id\n          firstName\n          lastName\n          defaultEmailAddress {\n            emailAddress\n          }\n          state\n        }\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "Retrieve the first five customers in Canada", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    customers(first: 5, query: \"country:canada\") {\n      edges {\n        node {\n          id\n          firstName\n          lastName\n        }\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}]}, {"name": "customerSavedSearches", "description": "List of the shop's customer saved searches.", "arguments": [{"name": "after", "type": "String", "required": true, "description": "The elements that come after the specified cursor."}], "returns": [], "examples": []}, {"name": "customersCount", "description": "The number of customers.", "arguments": [{"name": "query", "type": "String", "required": true, "description": "A filter made up of terms, connectives, modifiers, and comparators.\nYou can apply one or more filters to a query. Learn more about Shopify API search syntax."}], "returns": [], "examples": [{"description": "Overview", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query CustomerCount {\n    customersCount {\n      count\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}]}, {"name": "customerSegmentMembers", "description": "The list of members, such as customers, that's associated with an individual segment.\nThe maximum page size is 1000.", "arguments": [{"name": "after", "type": "String", "required": true, "description": "The elements that come after the specified cursor."}], "returns": [], "examples": []}, {"name": "customerSegmentMembership", "description": "Whether a member, which is a customer, belongs to a segment.", "arguments": [{"name": "customerId", "type": "ID!", "required": true, "description": "The ID of the customer that has the membership."}], "returns": [], "examples": []}, {"name": "customerSegmentMembersQuery", "description": "Returns a segment members query resource by ID.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID of the CustomerSegmentMembersQuery to return."}], "returns": [], "examples": []}, {"name": "segment", "description": "The Customer Segment.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "Find a segment by ID."}], "returns": [], "examples": []}, {"name": "segmentFilters", "description": "A list of filters.", "arguments": [{"name": "after", "type": "String", "required": true, "description": "The elements that come after the specified cursor."}], "returns": [], "examples": []}, {"name": "segmentFilterSuggestions", "description": "A list of filter suggestions associated with a segment. A segment is a group of members (commonly customers) that meet specific criteria.", "arguments": [{"name": "after", "type": "String", "required": true, "description": "The elements that come after the specified cursor."}], "returns": [], "examples": []}, {"name": "segmentMigrations", "description": "A list of a shop's segment migrations.", "arguments": [{"name": "after", "type": "String", "required": true, "description": "The elements that come after the specified cursor."}], "returns": [], "examples": []}, {"name": "segments", "description": "A list of a shop's segments.", "arguments": [{"name": "after", "type": "String", "required": true, "description": "The elements that come after the specified cursor."}], "returns": [], "examples": [{"description": "Overview", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    segments(first: 3) {\n      edges {\n        node {\n          id\n        }\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}]}, {"name": "segmentsCount", "description": "The number of segments for a shop.", "arguments": [{"name": "Count", "type": "Count", "required": true, "description": "Details for count of elements."}], "returns": [], "examples": []}, {"name": "segmentValueSuggestions", "description": "The list of suggested values corresponding to a particular filter for a segment. A segment is a group of members, such as customers, that meet specific criteria.", "arguments": [{"name": "after", "type": "String", "required": true, "description": "The elements that come after the specified cursor."}], "returns": [], "examples": []}], "mutations": [{"name": "customerAddressCreate", "description": "Create a new customer address.", "arguments": [{"name": "address", "type": "MailingAddressInput!", "required": true, "description": "Specifies the fields to use when creating the address."}], "returns": [], "examples": []}, {"name": "customerAddressDelete", "description": "Deletes a customer's address.", "arguments": [{"name": "addressId", "type": "ID!", "required": true, "description": "The ID of the address to be deleted from the customer."}], "returns": [], "examples": []}, {"name": "customerAddressUpdate", "description": "Update a customer's address information.", "arguments": [{"name": "address", "type": "MailingAddressInput!", "required": true, "description": "Specifies the fields to use when updating the address."}], "returns": [], "examples": []}, {"name": "customerAddTaxExemptions", "description": "Add tax exemptions for the customer.", "arguments": [{"name": "customerId", "type": "ID!", "required": true, "description": "The ID of the customer to update."}], "returns": [], "examples": [{"description": "Add tax exemptions for a customer", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation customerAddTaxExemptions($customerId: ID!, $taxExemptions: [TaxExemption!]!) {\n    customerAddTaxExemptions(customerId: $customerId, taxExemptions: $taxExemptions) {\n      userErrors {\n        field\n        message\n      }\n      customer {\n        id\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"customerId\": \"gid://shopify/Customer/839649557\",\n  \"taxExemptions\": [\"CA_BC_RESELLER_EXEMPTION\", \"CA_STATUS_CARD_EXEMPTION\"]\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "customerAddTaxExemptions reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation customerAddTaxExemptions($customerId: ID!, $taxExemptions: [TaxExemption!]!) {\n    customerAddTaxExemptions(customerId: $customerId, taxExemptions: $taxExemptions) {\n      userErrors {\n        field\n        message\n      }\n      customer {\n        id\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"customerId\": \"gid://shopify/Customer/839649557\",\n  \"taxExemptions\": [\"CA_BC_RESELLER_EXEMPTION\", \"CA_STATUS_CARD_EXEMPTION\"]\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "customerCancelDataErasure", "description": "Cancels a pending erasure of a customer's data.\nTo request an erasure of a customer's data use the customerRequestDataErasure mutation.", "arguments": [{"name": "customerId", "type": "ID!", "required": true, "description": "The ID of the customer for whom to cancel a pending data erasure."}], "returns": [], "examples": []}, {"name": "customerCreate", "description": "Create a new customer. As of API version 2022-10, apps using protected customer data must meet the protected customer data requirements.", "arguments": [{"name": "input", "type": "CustomerInput!", "required": true, "description": "The input fields to create a customer."}], "returns": [], "examples": [{"description": "Create a customer subscribed to SMS marketing", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation customerCreate($input: CustomerInput!) {\n    customerCreate(input: $input) {\n      userErrors {\n        field\n        message\n      }\n      customer {\n        id\n        email\n        phone\n        taxExempt\n        firstName\n        lastName\n        amountSpent {\n          amount\n          currencyCode\n        }\n        smsMarketingConsent {\n          marketingState\n          marketingOptInLevel\n          consentUpdatedAt\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": {\n    \"email\": \"steve.lastnameson@example.com\",\n    \"phone\": \"+16465555555\",\n    \"firstName\": \"Steve\",\n    \"smsMarketingConsent\": {\n      \"marketingState\": \"SUBSCRIBED\",\n      \"marketingOptInLevel\": \"SINGLE_OPT_IN\"\n    }\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Create a customer without required attributes", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation customerCreate($input: CustomerInput!) {\n    customerCreate(input: $input) {\n      userErrors {\n        field\n        message\n      }\n      customer {\n        id\n        email\n        phone\n        taxExempt\n        emailMarketingConsent {\n          marketingState\n          marketingOptInLevel\n          consentUpdatedAt\n        }\n        firstName\n        lastName\n        amountSpent {\n          amount\n          currencyCode\n        }\n        smsMarketingConsent {\n          marketingState\n          marketingOptInLevel\n        }\n        addresses {\n          address1\n          city\n          countryCode\n          phone\n          zip\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": {\n    \"email\": null,\n    \"phone\": null,\n    \"firstName\": null,\n    \"lastName\": null\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Create a new metafield on a new customer", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation createCustomerMetafields($input: CustomerInput!) {\n    customerCreate(input: $input) {\n      customer {\n        id\n        metafields(first: 3) {\n          edges {\n            node {\n              id\n              namespace\n              key\n              value\n            }\n          }\n        }\n      }\n      userErrors {\n        message\n        field\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": {\n    \"metafields\": [{\"namespace\"=>\"my_field\", \"key\"=>\"nickname\", \"type\"=>\"single_line_text_field\", \"value\"=>\"rob\"}],\n    \"email\": \"bob.norman@example.com\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Creates a customer", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation customerCreate($input: CustomerInput!) {\n    customerCreate(input: $input) {\n      userErrors {\n        field\n        message\n      }\n      customer {\n        id\n        email\n        phone\n        taxExempt\n        emailMarketingConsent {\n          marketingState\n          marketingOptInLevel\n          consentUpdatedAt\n        }\n        firstName\n        lastName\n        amountSpent {\n          amount\n          currencyCode\n        }\n        smsMarketingConsent {\n          marketingState\n          marketingOptInLevel\n        }\n        addresses {\n          address1\n          city\n          country\n          phone\n          zip\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": {\n    \"email\": \"steve.lastnameson@example.com\",\n    \"phone\": \"+16465555555\",\n    \"firstName\": \"Steve\",\n    \"lastName\": \"Lastname\",\n    \"emailMarketingConsent\": {\n      \"marketingOptInLevel\": \"CONFIRMED_OPT_IN\",\n      \"marketingState\": \"SUBSCRIBED\"\n    },\n    \"addresses\": [{\"address1\"=>\"412 fake st\", \"city\"=>\"Ottawa\", \"province\"=>\"ON\", \"phone\"=>\"+16469999999\", \"zip\"=>\"A1A 4A1\", \"lastName\"=>\"Lastname\", \"firstName\"=>\"Steve\", \"countryCode\"=>\"CA\"}]\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "customerCreate reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation customerCreate($input: CustomerInput!) {\n    customerCreate(input: $input) {\n      userErrors {\n        field\n        message\n      }\n      customer {\n        id\n        email\n        phone\n        taxExempt\n        firstName\n        lastName\n        amountSpent {\n          amount\n          currencyCode\n        }\n        smsMarketingConsent {\n          marketingState\n          marketingOptInLevel\n          consentUpdatedAt\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": {\n    \"email\": \"steve.lastnameson@example.com\",\n    \"phone\": \"+16465555555\",\n    \"firstName\": \"Steve\",\n    \"smsMarketingConsent\": {\n      \"marketingState\": \"SUBSCRIBED\",\n      \"marketingOptInLevel\": \"SINGLE_OPT_IN\"\n    }\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "customerDelete", "description": "Delete a customer. As of API version 2022-10, apps using protected customer data must meet the protected customer data requirements.", "arguments": [{"name": "input", "type": "CustomerDeleteInput!", "required": true, "description": "Specifies the customer to delete."}], "returns": [], "examples": [{"description": "Deletes a customer", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation customerDelete($id: ID!) {\n    customerDelete(input: {id: $id}) {\n      shop {\n        id\n      }\n      userErrors {\n        field\n        message\n      }\n      deletedCustomerId\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/Customer/105906728\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "customerDelete reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation customerDelete($id: ID!) {\n    customerDelete(input: {id: $id}) {\n      shop {\n        id\n      }\n      userErrors {\n        field\n        message\n      }\n      deletedCustomerId\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/Customer/105906728\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "customerEmailMarketingConsentUpdate", "description": "Update a customer's email marketing information information.", "arguments": [{"name": "input", "type": "CustomerEmailMarketingConsentUpdateInput!", "required": true, "description": "Specifies the input fields to update a customer's email marketing consent information."}], "returns": [], "examples": []}, {"name": "customerGenerateAccountActivationUrl", "description": "Generate an account activation URL for a customer.", "arguments": [{"name": "customerId", "type": "ID!", "required": true, "description": "The ID of the customer that the URL is generated for."}], "returns": [], "examples": [{"description": "Creates an account activation URL for a customer", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation customerGenerateAccountActivationUrl($customerId: ID!) {\n    customerGenerateAccountActivationUrl(customerId: $customerId) {\n      accountActivationUrl\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"customerId\": \"gid://shopify/Customer/105906728\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "customerGenerateAccountActivationUrl reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation customerGenerateAccountActivationUrl($customerId: ID!) {\n    customerGenerateAccountActivationUrl(customerId: $customerId) {\n      accountActivationUrl\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"customerId\": \"gid://shopify/Customer/105906728\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "customerMerge", "description": "Merges two customers.", "arguments": [{"name": "customerOneId", "type": "ID!", "required": true, "description": "The ID of the first customer that will be merged."}], "returns": [], "examples": [{"description": "Merge customers with override fields", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation CustomerMerge {\n    customerMerge(customerOneId: \"gid://shopify/Customer/544365967\", customerTwoId: \"gid://shopify/Customer/624407574\", overrideFields: {customerIdOfFirstNameToKeep: \"gid://shopify/Customer/544365967\", customerIdOfLastNameToKeep: \"gid://shopify/Customer/624407574\"}) {\n      resultingCustomerId\n      job {\n        id\n        done\n      }\n      userErrors {\n        code\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"customerOneId\": \"gid://shopify/Customer/544365967\",\n  \"customerTwoId\": \"gid://shopify/Customer/624407574\",\n  \"overrideFields\": {\n    \"customerIdOfFirstNameToKeep\": \"gid://shopify/Customer/544365967\",\n    \"customerIdOfLastNameToKeep\": \"gid://shopify/Customer/544365967\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Merge two customers", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation CustomerMerge {\n    customerMerge(customerOneId: \"gid://shopify/Customer/544365967\", customerTwoId: \"gid://shopify/Customer/624407574\") {\n      resultingCustomerId\n      job {\n        id\n        done\n      }\n      userErrors {\n        code\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"customerOneId\": \"gid://shopify/Customer/544365967\",\n  \"customerTwoId\": \"gid://shopify/Customer/624407574\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "customerMerge reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation CustomerMerge {\n    customerMerge(customerOneId: \"gid://shopify/Customer/544365967\", customerTwoId: \"gid://shopify/Customer/624407574\", overrideFields: {customerIdOfFirstNameToKeep: \"gid://shopify/Customer/544365967\", customerIdOfLastNameToKeep: \"gid://shopify/Customer/624407574\"}) {\n      resultingCustomerId\n      job {\n        id\n        done\n      }\n      userErrors {\n        code\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"customerOneId\": \"gid://shopify/Customer/544365967\",\n  \"customerTwoId\": \"gid://shopify/Customer/624407574\",\n  \"overrideFields\": {\n    \"customerIdOfFirstNameToKeep\": \"gid://shopify/Customer/544365967\",\n    \"customerIdOfLastNameToKeep\": \"gid://shopify/Customer/544365967\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "customerRemoveTaxExemptions", "description": "Remove tax exemptions from a customer.", "arguments": [{"name": "customerId", "type": "ID!", "required": true, "description": "The ID of the customer to update."}], "returns": [], "examples": [{"description": "Remove tax exemptions from a customer", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation customerRemoveTaxExemptions($customerId: ID!, $taxExemptions: [TaxExemption!]!) {\n    customerRemoveTaxExemptions(customerId: $customerId, taxExemptions: $taxExemptions) {\n      userErrors {\n        field\n        message\n      }\n      customer {\n        id\n        taxExemptions\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"customerId\": \"gid://shopify/Customer/554122808\",\n  \"taxExemptions\": [\"CA_BC_RESELLER_EXEMPTION\", \"CA_STATUS_CARD_EXEMPTION\"]\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "customerRemoveTaxExemptions reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation customerRemoveTaxExemptions($customerId: ID!, $taxExemptions: [TaxExemption!]!) {\n    customerRemoveTaxExemptions(customerId: $customerId, taxExemptions: $taxExemptions) {\n      userErrors {\n        field\n        message\n      }\n      customer {\n        id\n        taxExemptions\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"customerId\": \"gid://shopify/Customer/554122808\",\n  \"taxExemptions\": [\"CA_BC_RESELLER_EXEMPTION\", \"CA_STATUS_CARD_EXEMPTION\"]\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "customerReplaceTaxExemptions", "description": "Replace tax exemptions for a customer.", "arguments": [{"name": "customerId", "type": "ID!", "required": true, "description": "The ID of the customer to update."}], "returns": [], "examples": [{"description": "Replace tax exemptions for a customer", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation customerReplaceTaxExemptions($customerId: ID!, $taxExemptions: [TaxExemption!]!) {\n    customerReplaceTaxExemptions(customerId: $customerId, taxExemptions: $taxExemptions) {\n      userErrors {\n        field\n        message\n      }\n      customer {\n        id\n        taxExemptions\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"customerId\": \"gid://shopify/Customer/554122808\",\n  \"taxExemptions\": [\"CA_MB_COMMERCIAL_FISHERY_EXEMPTION\", \"CA_ON_PURCHASE_EXEMPTION\"]\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "customerReplaceTaxExemptions reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation customerReplaceTaxExemptions($customerId: ID!, $taxExemptions: [TaxExemption!]!) {\n    customerReplaceTaxExemptions(customerId: $customerId, taxExemptions: $taxExemptions) {\n      userErrors {\n        field\n        message\n      }\n      customer {\n        id\n        taxExemptions\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"customerId\": \"gid://shopify/Customer/554122808\",\n  \"taxExemptions\": [\"CA_MB_COMMERCIAL_FISHERY_EXEMPTION\", \"CA_ON_PURCHASE_EXEMPTION\"]\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "customerRequestDataErasure", "description": "Enqueues a request to erase customer's data. Read more here.\nTo cancel the data erasure request use the customerCancelDataErasure mutation.", "arguments": [{"name": "customerId", "type": "ID!", "required": true, "description": "The ID of the customer to erase."}], "returns": [], "examples": []}, {"name": "customerSegmentMembersQueryCreate", "description": "Creates a customer segment members query.", "arguments": [{"name": "input", "type": "CustomerSegmentMembersQueryInput!", "required": true, "description": "The input fields to create a customer segment members query."}], "returns": [], "examples": []}, {"name": "customerSendAccountInviteEmail", "description": "Sends the customer an account invite email.", "arguments": [{"name": "customerId", "type": "ID!", "required": true, "description": "The ID of the customer to whom an account invite email is to be sent."}], "returns": [], "examples": [{"description": "Sends an account invite to a customer", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation CustomerSendAccountInviteEmail($customerId: ID!) {\n    customerSendAccountInviteEmail(customerId: $customerId) {\n      customer {\n        id\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"customerId\": \"gid://shopify/Customer/105906728\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "customerSendAccountInviteEmail reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation CustomerSendAccountInviteEmail($customerId: ID!) {\n    customerSendAccountInviteEmail(customerId: $customerId) {\n      customer {\n        id\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"customerId\": \"gid://shopify/Customer/105906728\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "customerSet", "description": "Creates or updates a customer in a single mutation.\nUse this mutation when syncing information from an external data source into Shopify.\nThis mutation can be used to create a new customer, update an existing customer by id, or\nupsert a customer by a unique key (email or phone).\nTo create a new customer omit the identifier argument.\nTo update an existing customer, include the identifier with the id of the customer to update.\nTo perform an 'upsert' by unique key (email or phone)\nuse the identifier argument to upsert a customer by a unique key (email or phone). If a customer\nwith the specified unique key exists, it will be updated. If not, a new customer will be created with\nthat unique key.\nAs of API version 2022-10, apps using protected customer data must meet the\nprotected customer data requirements\nAny list field (e.g.\naddresses,\nwill be updated so that all included entries are either created or updated, and all existing entries not\nincluded will be deleted.\nAll other fields will be updated to the value passed. Omitted fields will not be updated.", "arguments": [{"name": "identifier", "type": "CustomerSetIdentifiers", "required": true, "description": "Specifies the identifier that will be used to lookup the resource."}], "returns": [], "examples": []}, {"name": "customerSmsMarketingConsentUpdate", "description": "Update a customer's SMS marketing consent information.", "arguments": [{"name": "input", "type": "CustomerSmsMarketingConsentUpdateInput!", "required": true, "description": "Specifies the input fields to update a customer's SMS marketing consent information."}], "returns": [], "examples": [{"description": "Subscribe a customer to SMS marketing materials", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation customerSmsMarketingConsentUpdate($input: CustomerSmsMarketingConsentUpdateInput!) {\n    customerSmsMarketingConsentUpdate(input: $input) {\n      userErrors {\n        field\n        message\n      }\n      customer {\n        id\n        phone\n        smsMarketingConsent {\n          marketingState\n          marketingOptInLevel\n          consentUpdatedAt\n          consentCollectedFrom\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": {\n    \"customerId\": \"gid://shopify/Customer/207119551\",\n    \"smsMarketingConsent\": {\n      \"marketingState\": \"SUBSCRIBED\",\n      \"marketingOptInLevel\": \"SINGLE_OPT_IN\"\n    }\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Subscribe a customer to SMS marketing materials with the date at which the consent was collected", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation customerSmsMarketingConsentUpdate($input: CustomerSmsMarketingConsentUpdateInput!) {\n    customerSmsMarketingConsentUpdate(input: $input) {\n      userErrors {\n        field\n        message\n      }\n      customer {\n        id\n        phone\n        smsMarketingConsent {\n          marketingState\n          marketingOptInLevel\n          consentUpdatedAt\n          consentCollectedFrom\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": {\n    \"customerId\": \"gid://shopify/Customer/207119551\",\n    \"smsMarketingConsent\": {\n      \"marketingState\": \"UNSUBSCRIBED\",\n      \"marketingOptInLevel\": \"SINGLE_OPT_IN\",\n      \"consentUpdatedAt\": \"2021-01-07T15:50:00Z\"\n    }\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Unsubscribe a customer from SMS marketing materials", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation customerSmsMarketingConsentUpdate($input: CustomerSmsMarketingConsentUpdateInput!) {\n    customerSmsMarketingConsentUpdate(input: $input) {\n      userErrors {\n        field\n        message\n      }\n      customer {\n        id\n        phone\n        smsMarketingConsent {\n          marketingState\n          marketingOptInLevel\n          consentUpdatedAt\n          consentCollectedFrom\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": {\n    \"customerId\": \"gid://shopify/Customer/207119551\",\n    \"smsMarketingConsent\": {\n      \"marketingState\": \"UNSUBSCRIBED\",\n      \"marketingOptInLevel\": \"SINGLE_OPT_IN\"\n    }\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "customerSmsMarketingConsentUpdate reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation customerSmsMarketingConsentUpdate($input: CustomerSmsMarketingConsentUpdateInput!) {\n    customerSmsMarketingConsentUpdate(input: $input) {\n      userErrors {\n        field\n        message\n      }\n      customer {\n        id\n        phone\n        smsMarketingConsent {\n          marketingState\n          marketingOptInLevel\n          consentUpdatedAt\n          consentCollectedFrom\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": {\n    \"customerId\": \"gid://shopify/Customer/207119551\",\n    \"smsMarketingConsent\": {\n      \"marketingState\": \"SUBSCRIBED\",\n      \"marketingOptInLevel\": \"SINGLE_OPT_IN\"\n    }\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "customerUpdate", "description": "Update a customer's attributes. As of API version 2022-10, apps using protected customer data must meet the protected customer data requirements.", "arguments": [{"name": "input", "type": "CustomerInput!", "required": true, "description": "Provides updated fields for the customer. To set marketing consent, use the customerEmailMarketingConsentUpdate or customerSmsMarketingConsentUpdate mutations instead."}], "returns": [], "examples": [{"description": "Create a new metafield and update another on an existing customer", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation updateCustomerMetafields($input: CustomerInput!) {\n    customerUpdate(input: $input) {\n      customer {\n        id\n        metafields(first: 3) {\n          edges {\n            node {\n              id\n              namespace\n              key\n              value\n            }\n          }\n        }\n      }\n      userErrors {\n        message\n        field\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": {\n    \"metafields\": [{\"namespace\"=>\"my_field\", \"key\"=>\"nickname\", \"type\"=>\"single_line_text_field\", \"value\"=>\"rob\"}, {\"id\"=>\"gid://shopify/Metafield/1069230189\", \"value\"=>\"they/them\"}],\n    \"id\": \"gid://shopify/Customer/1018520244\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Creates a new address for a customer", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation CustomerAddressCreate($customerId: ID!, $addresses: [MailingAddressInput!]) {\n    customerUpdate(input: {id: $customerId, addresses: $addresses}) {\n      customer {\n        id\n        addressesV2(first: 10) {\n          edges {\n            node {\n              id\n              address1\n              city\n            }\n          }\n        }\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"customerId\": \"gid://shopify/Customer/1018520244\",\n  \"addresses\": [{\"address1\"=>\"123 New Address\", \"city\"=>\"New City\"}]\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Performs bulk operations for multiple customer addresses", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation CustomerAddressSet($customerId: ID!, $addresses: [MailingAddressInput!]) {\n    customerUpdate(input: {id: $customerId, addresses: $addresses}) {\n      customer {\n        id\n        addressesV2(first: 10) {\n          edges {\n            node {\n              id\n              address1\n              city\n            }\n          }\n        }\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"customerId\": \"gid://shopify/Customer/1018520244\",\n  \"addresses\": [{\"address1\"=>\"123 Main St\", \"city\"=>\"Metropolis\"}, {\"address1\"=>\"456 Elm St\", \"city\"=>\"Gotham\"}]\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Update a customer with an ID that doesn't exist", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation customerUpdate($input: CustomerInput!) {\n    customerUpdate(input: $input) {\n      userErrors {\n        field\n        message\n      }\n      customer {\n        id\n        firstName\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": {\n    \"id\": \"gid://shopify/Customer/1\",\n    \"firstName\": \"Tobi\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Updates a customer's first and last name", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation customerUpdate($input: CustomerInput!) {\n    customerUpdate(input: $input) {\n      userErrors {\n        field\n        message\n      }\n      customer {\n        id\n        firstName\n        lastName\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": {\n    \"id\": \"gid://shopify/Customer/1018520244\",\n    \"firstName\": \"Tobi\",\n    \"lastName\": \"Lutke\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Updates an existing customer address", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation CustomerAddressUpdate($customerId: ID!, $addresses: [MailingAddressInput!]) {\n    customerUpdate(input: {id: $customerId, addresses: $addresses}) {\n      customer {\n        id\n        addressesV2(first: 10) {\n          edges {\n            node {\n              id\n              address1\n              city\n            }\n          }\n        }\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"customerId\": \"gid://shopify/Customer/1018520244\",\n  \"addresses\": [{\"address1\"=>\"123 New Street\", \"city\"=>\"New City\"}]\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "customerUpdate reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation updateCustomerMetafields($input: CustomerInput!) {\n    customerUpdate(input: $input) {\n      customer {\n        id\n        metafields(first: 3) {\n          edges {\n            node {\n              id\n              namespace\n              key\n              value\n            }\n          }\n        }\n      }\n      userErrors {\n        message\n        field\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": {\n    \"metafields\": [{\"namespace\"=>\"my_field\", \"key\"=>\"nickname\", \"type\"=>\"single_line_text_field\", \"value\"=>\"rob\"}, {\"id\"=>\"gid://shopify/Metafield/1069230189\", \"value\"=>\"they/them\"}],\n    \"id\": \"gid://shopify/Customer/1018520244\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "customerUpdateDefaultAddress", "description": "Updates a customer's default address.", "arguments": [{"name": "addressId", "type": "ID!", "required": true, "description": "The ID of the customer's new default address."}], "returns": [], "examples": [{"description": "Sets the default address for a customer", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation CustomerAddressDefault($addressId: ID!, $customerId: ID!) {\n    customerUpdateDefaultAddress(addressId: $addressId, customerId: $customerId) {\n      customer {\n        id\n        defaultAddress {\n          id\n          address1\n          city\n        }\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"customerId\": \"gid://shopify/Customer/624407574\",\n  \"addressId\": \"gid://shopify/MailingAddress/624407574?model_name=CustomerAddress\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Updates an existing customer address", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation customerUpdateDefaultAddress($addressId: ID!, $customerId: ID!) {\n    customerUpdateDefaultAddress(addressId: $addressId, customerId: $customerId) {\n      customer {\n        defaultAddress {\n          id\n        }\n      }\n      userErrors {\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"customerId\": \"gid://shopify/Customer/624407574\",\n  \"addressId\": \"gid://shopify/MailingAddress/1053318600?model_name=CustomerAddress\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "customerUpdateDefaultAddress reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation CustomerAddressDefault($addressId: ID!, $customerId: ID!) {\n    customerUpdateDefaultAddress(addressId: $addressId, customerId: $customerId) {\n      customer {\n        id\n        defaultAddress {\n          id\n          address1\n          city\n        }\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"customerId\": \"gid://shopify/Customer/624407574\",\n  \"addressId\": \"gid://shopify/MailingAddress/624407574?model_name=CustomerAddress\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "segmentCreate", "description": "Creates a segment.", "arguments": [{"name": "name", "type": "String!", "required": true, "description": "The name of the segment to be created. Segment names must be unique."}], "returns": [], "examples": []}, {"name": "segmentDelete", "description": "Deletes a segment.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "Specifies the segment to delete."}], "returns": [], "examples": []}, {"name": "segmentUpdate", "description": "Updates a segment.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "Specifies the segment to be updated."}], "returns": [], "examples": []}, {"name": "taxAppConfigure", "description": "Allows tax app configurations for tax partners.", "arguments": [{"name": "ready", "type": "Boolean!", "required": true, "description": "Configures whether the tax app is correctly configured and ready to be used."}], "returns": [], "examples": []}], "objects": [{"name": "Customer", "description": "Represents information about a customer of the shop, such as the customer's contact details, their order\nhistory, and whether they've agreed to receive marketing material by email.\nCaution: Only use this data if it's required for your app's functionality. Shopify will restrict access to scopes for apps that don't have a legitimate use for the associated data.", "fields_and_connections": [{"name": "addresses", "type": "[MailingAddress!]!", "description": "A list of addresses associated with the customer.", "not_nullable": true}], "examples": []}, {"name": "CustomerAccountsV2", "description": "Information about the shop's customer accounts.", "fields_and_connections": [{"name": "customerAccountsVersion", "type": "CustomerAccountsVersion!", "description": "Indicates which version of customer accounts the merchant is using in online store and checkout.", "not_nullable": true}], "examples": []}, {"name": "CustomerCreditCardBillingAddress", "description": "The billing address of a credit card payment instrument.", "fields_and_connections": [{"name": "address1", "type": "String", "description": "The first line of the address. Typically the street address or PO Box number.", "not_nullable": false}], "examples": []}, {"name": "CustomerEmailAddress", "description": "Represents an email address.", "fields_and_connections": [{"name": "emailAddress", "type": "String!", "description": "The customer's default email address.", "not_nullable": true}], "examples": []}, {"name": "CustomerEmailMarketingConsentState", "description": "The record of when a customer consented to receive marketing material by email.", "fields_and_connections": [{"name": "consentUpdatedAt", "type": "DateTime", "description": "The date and time at which the customer consented to receive marketing material by email.\nThe customer's consent state reflects the consent record with the most recent consent_updated_at date.\nIf no date is provided, then the date and time at which the consent information was sent is used.", "not_nullable": true}], "examples": []}, {"name": "CustomerMergeable", "description": "An object that represents whether a customer can be merged with another customer.", "fields_and_connections": [{"name": "errorFields", "type": "[CustomerMergeErrorFieldType!]!", "description": "The list of fields preventing the customer from being merged.", "not_nullable": true}], "examples": []}, {"name": "CustomerMergeError", "description": "The error blocking a customer merge.", "fields_and_connections": [{"name": "errorFields", "type": "[CustomerMergeErrorFieldType!]!", "description": "The list of fields preventing the customer from being merged.", "not_nullable": true}], "examples": []}, {"name": "CustomerMergePreview", "description": "A preview of the results of a customer merge request.", "fields_and_connections": [{"name": "alternateFields", "type": "CustomerMergePreviewAlternateFields", "description": "The fields that can be used to override the default fields.", "not_nullable": false}], "examples": []}, {"name": "CustomerMergePreviewAlternateFields", "description": "The fields that can be used to override the default fields.", "fields_and_connections": [{"name": "defaultAddress", "type": "MailingAddress", "description": "The default address of a customer.", "not_nullable": false}], "examples": []}, {"name": "CustomerMergePreviewBlockingFields", "description": "The blocking fields of a customer merge preview. These fields will block customer merge unless edited.", "fields_and_connections": [{"name": "note", "type": "String", "description": "The merged note resulting from a customer merge. The merged note is over the 5000 character limit and will block customer merge.", "not_nullable": true}], "examples": []}, {"name": "CustomerMergePreviewDefaultFields", "description": "The fields that will be kept as part of a customer merge preview.", "fields_and_connections": [{"name": "addresses", "type": "MailingAddressConnection!", "description": "The merged addresses resulting from a customer merge.", "not_nullable": true}], "examples": []}, {"name": "CustomerMergeRequest", "description": "A merge request for merging two customers.", "fields_and_connections": [{"name": "customerMergeErrors", "type": "[CustomerMergeError!]!", "description": "The merge errors that occurred during the customer merge request.", "not_nullable": true}], "examples": []}, {"name": "CustomerPhoneNumber", "description": "A phone number.", "fields_and_connections": [{"name": "marketingCollectedFrom", "type": "CustomerConsentCollectedFrom", "description": "The source from which the SMS marketing information for the customer was collected.", "not_nullable": true}], "examples": []}, {"name": "CustomerSegmentMember", "description": "The member of a segment.", "fields_and_connections": [{"name": "amountSpent", "type": "MoneyV2", "description": "The total amount of money that the member has spent on orders.", "not_nullable": true}], "examples": []}, {"name": "CustomerSegmentMembersQuery", "description": "A job to determine a list of members, such as customers, that are associated with an individual segment.", "fields_and_connections": [{"name": "currentCount", "type": "Int!", "description": "The current total number of members in a given segment.", "not_nullable": true}], "examples": []}, {"name": "CustomerSmsMarketingConsentError", "description": "An error that occurs during execution of an SMS marketing consent mutation.", "fields_and_connections": [{"name": "code", "type": "CustomerSmsMarketingConsentErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "CustomerSmsMarketingConsentState", "description": "The record of when a customer consented to receive marketing material by SMS.\nThe customer's consent state reflects the record with the most recent date when consent was updated.", "fields_and_connections": [{"name": "consentCollectedFrom", "type": "CustomerConsentCollectedFrom", "description": "The source from which the SMS marketing information for the customer was collected.", "not_nullable": true}], "examples": []}, {"name": "CustomerStatistics", "description": "A customer's computed statistics.", "fields_and_connections": [{"name": "predictedSpendTier", "type": "CustomerPredictedSpendTier", "description": "The predicted spend tier of a customer with a shop.", "not_nullable": false}], "examples": []}, {"name": "MarketPriceInclusions", "description": "The inclusive pricing strategy for a market.", "fields_and_connections": [{"name": "inclusiveDutiesPricingStrategy", "type": "InclusiveDutiesPricingStrategy!", "description": "The inclusive duties pricing strategy of the market. This determines if prices include duties.", "not_nullable": true}], "examples": []}, {"name": "Segment", "description": "A dynamic collection of customers based on specific criteria.", "fields_and_connections": [{"name": "creationDate", "type": "DateTime!", "description": "The date and time when the segment was added to the store.", "not_nullable": true}], "examples": []}, {"name": "SegmentAssociationFilter", "description": "A filter that takes a value that's associated with an object. For example, the tags field is associated with the Customer object.", "fields_and_connections": [{"name": "localizedName", "type": "String!", "description": "The localized name of the filter.", "not_nullable": true}], "examples": []}, {"name": "SegmentAttributeStatistics", "description": "The statistics of a given attribute.", "fields_and_connections": [{"name": "average", "type": "Float!", "description": "The average of a given attribute.", "not_nullable": true}], "examples": []}, {"name": "SegmentBooleanFilter", "description": "A filter with a Boolean value that's been added to a segment query.", "fields_and_connections": [{"name": "localizedName", "type": "String!", "description": "The localized name of the filter.", "not_nullable": true}], "examples": []}, {"name": "SegmentDateFilter", "description": "A filter with a date value that's been added to a segment query.", "fields_and_connections": [{"name": "localizedName", "type": "String!", "description": "The localized name of the filter.", "not_nullable": true}], "examples": []}, {"name": "SegmentEnumFilter", "description": "A filter with a set of possible values that's been added to a segment query.", "fields_and_connections": [{"name": "localizedName", "type": "String!", "description": "The localized name of the filter.", "not_nullable": true}], "examples": []}, {"name": "SegmentEventFilter", "description": "A filter that's used to segment customers based on the date that an event occured. For example, the product_bought event filter allows you to segment customers based on what products they've bought.", "fields_and_connections": [{"name": "localizedName", "type": "String!", "description": "The localized name of the filter.", "not_nullable": true}], "examples": []}, {"name": "SegmentEventFilterParameter", "description": "The parameters for an event segment filter.", "fields_and_connections": [{"name": "acceptsMultipleValues", "type": "Boolean!", "description": "Whether the parameter accepts a list of values.", "not_nullable": true}], "examples": []}, {"name": "SegmentFloatFilter", "description": "A filter with a double-precision, floating-point value that's been added to a segment query.", "fields_and_connections": [{"name": "localizedName", "type": "String!", "description": "The localized name of the filter.", "not_nullable": true}], "examples": []}, {"name": "SegmentIntegerFilter", "description": "A filter with an integer that's been added to a segment query.", "fields_and_connections": [{"name": "localizedName", "type": "String!", "description": "The localized name of the filter.", "not_nullable": true}], "examples": []}, {"name": "SegmentMembership", "description": "The response type for the segmentMembership object.", "fields_and_connections": [{"name": "isMember", "type": "Boolean!", "description": "A Boolean that indicates whether or not the customer in the query is a member of the segment, which is identified using the segmentId.", "not_nullable": true}], "examples": []}, {"name": "SegmentMembershipResponse", "description": "A list of maps that contain segmentId IDs and isMember Booleans. The maps represent segment memberships.", "fields_and_connections": [{"name": "memberships", "type": "[SegmentMembership!]!", "description": "The membership status for the given list of segments.", "not_nullable": true}], "examples": []}, {"name": "SegmentMigration", "description": "A segment and its corresponding saved search. \nFor example, you can use SegmentMigration to retrieve the segment ID that corresponds to a saved search ID.", "fields_and_connections": [{"name": "id", "type": "ID!", "description": "A globally-unique ID.", "not_nullable": true}], "examples": []}, {"name": "SegmentStatistics", "description": "The statistics of a given segment.", "fields_and_connections": [{"name": "attributeStatistics", "type": "SegmentAttributeStatistics!", "description": "The statistics of a given attribute.", "not_nullable": true}], "examples": []}, {"name": "SegmentStringFilter", "description": "A filter with a string that's been added to a segment query.", "fields_and_connections": [{"name": "localizedName", "type": "String!", "description": "The localized name of the filter.", "not_nullable": true}], "examples": []}, {"name": "SegmentValue", "description": "A list of suggested values associated with an individual segment. A\nsegment is a group of members, such as customers, that meet specific\ncriteria.", "fields_and_connections": [{"name": "localizedValue", "type": "String!", "description": "The localized version of the value's name. This name is displayed to the merchant.", "not_nullable": true}], "examples": []}, {"name": "TaxAppConfiguration", "description": "Tax app configuration of a merchant.", "fields_and_connections": [{"name": "state", "type": "TaxPartnerState!", "description": "State of the tax app configuration.", "not_nullable": true}], "examples": []}]}, {"name": "Discounts and marketing", "queries": [{"name": "abandonment", "description": "Returns an abandonment by ID.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID of the Abandonment to return."}], "returns": [], "examples": []}, {"name": "appDiscountType", "description": "An app discount type.", "arguments": [{"name": "functionId", "type": "String!", "required": true, "description": "The ID for the function providing the app discount type."}], "returns": [], "examples": []}, {"name": "appDiscountTypes", "description": "A list of app discount types installed by apps.", "arguments": [{"name": "AppDiscountType", "type": "[AppDiscountType!]!", "required": true, "description": "The details about the app extension that's providing the\ndiscount type.\nThis information includes the app extension's name and\nclient ID,\nApp Bridge configuration,\ndiscount class,\nfunction ID,\nand other metadata about the discount type, including the discount type's name and description."}], "returns": [], "examples": []}, {"name": "appDiscountTypesNodes", "description": "A list of app discount types installed by apps.", "arguments": [{"name": "after", "type": "String", "required": true, "description": "The elements that come after the specified cursor."}], "returns": [], "examples": []}, {"name": "automaticDiscount", "description": "Returns an automatic discount resource by ID.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of the DiscountAutomatic to return."}], "returns": [], "examples": []}, {"name": "automaticDiscountNode", "description": "Returns an automatic discount resource by ID.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID of the DiscountAutomaticNode to return."}], "returns": [], "examples": [{"description": "Retrieve a buy X get Y automatic discount by its ID", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    automaticDiscountNode(id: \"gid://shopify/DiscountAutomaticNode/1057371284\") {\n      id\n      automaticDiscount {\n        ... on DiscountAutomaticBxgy {\n          title\n          status\n        }\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "Retrieve an automatic discount by its ID", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    automaticDiscountNode(id: \"gid://shopify/DiscountAutomaticNode/1057371285\") {\n      id\n      automaticDiscount {\n        ... on DiscountAutomaticApp {\n          title\n          status\n        }\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}]}, {"name": "automaticDiscountNodes", "description": "Returns a list of automatic discounts.", "arguments": [{"name": "after", "type": "String", "required": true, "description": "The elements that come after the specified cursor."}], "returns": [], "examples": [{"description": "Query a list of automatic discounts", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    automaticDiscountNodes(first: 2) {\n      edges {\n        node {\n          id\n          automaticDiscount {\n            ... on DiscountAutomaticBasic {\n              title\n              status\n            }\n            ... on DiscountAutomaticBxgy {\n              title\n              status\n            }\n          }\n        }\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "Query automatic discounts with pagination and filtering", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    automaticDiscountNodes(first: 1, query: \"status:active\") {\n      nodes {\n        id\n        automaticDiscount {\n          ... on DiscountAutomaticBxgy {\n            title\n            status\n          }\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}]}, {"name": "automaticDiscounts", "description": "List of automatic discounts.", "arguments": [{"name": "after", "type": "String", "required": true, "description": "The elements that come after the specified cursor."}], "returns": [], "examples": []}, {"name": "automaticDiscountSavedSearches", "description": "List of the shop's automatic discount saved searches.", "arguments": [{"name": "after", "type": "String", "required": true, "description": "The elements that come after the specified cursor."}], "returns": [], "examples": []}, {"name": "codeDiscountNode", "description": "Returns a code discount resource by ID.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID of the DiscountCodeNode to return."}], "returns": [], "examples": [{"description": "Query a code discount by its ID", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    codeDiscountNode(id: \"gid://shopify/DiscountCodeNode/206265824\") {\n      id\n      codeDiscount {\n        ... on DiscountCodeBasic {\n          title\n          summary\n          codes(first: 1) {\n            nodes {\n              code\n              id\n            }\n          }\n        }\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "Querying a non-existent code discount returns null", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    codeDiscountNode(id: \"gid://shopify/DiscountCodeNode/999999\") {\n      id\n      codeDiscount {\n        ... on DiscountCodeBasic {\n          title\n        }\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}]}, {"name": "codeDiscountNodeByCode", "description": "Returns a code discount identified by its discount code.", "arguments": [{"name": "code", "type": "String!", "required": true, "description": "The case-insensitive code of the DiscountCodeNode to return."}], "returns": [], "examples": [{"description": "Overview", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query codeDiscountNodeByCode($code: String!) {\n    codeDiscountNodeByCode(code: $code) {\n      codeDiscount {\n        __typename\n        ... on DiscountCodeBasic {\n          codesCount {\n            count\n          }\n          shortSummary\n        }\n      }\n      id\n    }\n  }\nQUERY\n\nvariables = {\n  \"code\": \"DISCOUNTAPPLICATIONSROCKS\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "codeDiscountNodes", "description": "Returns a list of code-based discounts.", "arguments": [{"name": "after", "type": "String", "required": true, "description": "The elements that come after the specified cursor."}], "returns": [], "examples": [{"description": "Retrieve a list of code discounts", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    codeDiscountNodes(first: 3) {\n      nodes {\n        id\n        codeDiscount {\n          ... on DiscountCodeBasic {\n            title\n            summary\n          }\n          ... on DiscountCodeBxgy {\n            title\n            codesCount {\n              count\n            }\n          }\n        }\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "Retrieve code discounts by discount type", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    codeDiscountNodes(first: 1, query: \"value_type:fixed_amount\") {\n      nodes {\n        id\n        codeDiscount {\n          ... on DiscountCodeBasic {\n            title\n            codes(first: 1) {\n              nodes {\n                code\n              }\n            }\n          }\n        }\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}]}, {"name": "codeDiscountSavedSearches", "description": "List of the shop's code discount saved searches.", "arguments": [{"name": "after", "type": "String", "required": true, "description": "The elements that come after the specified cursor."}], "returns": [], "examples": []}, {"name": "discountCodesCount", "description": "The total number of discount codes for the shop.", "arguments": [{"name": "query", "type": "String", "required": true, "description": "A filter made up of terms, connectives, modifiers, and comparators.\nYou can apply one or more filters to a query. Learn more about Shopify API search syntax."}], "returns": [], "examples": [{"description": "Retrieve the number of discount codes used more than once", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query discountCodesCount($query: String!) {\n    discountCodesCount(query: $query) {\n      count\n    }\n  }\nQUERY\n\nvariables = {\n  \"query\": \"times_used:>1\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Retrieve the number of discount codes used within a range", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query discountCodesCount($query: String!) {\n    discountCodesCount(query: $query) {\n      count\n    }\n  }\nQUERY\n\nvariables = {\n  \"query\": \"times_used:>1 AND times_used:<4\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Retrieve the number of unused discount codes", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query discountCodesCount($query: String!) {\n    discountCodesCount(query: $query) {\n      count\n    }\n  }\nQUERY\n\nvariables = {\n  \"query\": \"times_used:0\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Retrieve the total number of discount codes", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query discountCodesCount {\n    discountCodesCount {\n      count\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "Retrieves a count of discount codes for a shop", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query DiscountRedeemCodeCount {\n    discountCodesCount {\n      count\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}]}, {"name": "discountNode", "description": "Returns a discount resource by ID.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID of the DiscountNode to return."}], "returns": [], "examples": [{"description": "Querying a non-existent discount returns null", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    discountNode(id: \"gid://shopify/DiscountNode/999999999\") {\n      id\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "Retrieve a discount by its ID", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    discountNode(id: \"gid://shopify/DiscountAutomaticNode/299501151\") {\n      id\n      discount {\n        ... on DiscountCodeBasic {\n          title\n          summary\n          status\n          codes(first: 1) {\n            nodes {\n              code\n            }\n          }\n        }\n        ... on DiscountAutomaticBasic {\n          title\n          summary\n          status\n        }\n        ... on DiscountCodeBxgy {\n          title\n          summary\n          status\n          codes(first: 1) {\n            nodes {\n              code\n            }\n          }\n        }\n        ... on DiscountAutomaticBxgy {\n          title\n          summary\n          status\n        }\n        ... on DiscountCodeFreeShipping {\n          title\n          summary\n          status\n          codes(first: 1) {\n            nodes {\n              code\n            }\n          }\n        }\n        ... on DiscountCodeApp {\n          title\n          status\n          appDiscountType {\n            title\n          }\n          codes(first: 1) {\n            nodes {\n              code\n            }\n          }\n        }\n        ... on DiscountAutomaticApp {\n          title\n          status\n          appDiscountType {\n            title\n          }\n        }\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}]}, {"name": "discountNodes", "description": "Returns a list of discounts.", "arguments": [{"name": "after", "type": "String", "required": true, "description": "The elements that come after the specified cursor."}], "returns": [], "examples": [{"description": "Retrieve a list of combinable discounts", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    discountNodes(query: \"combines_with:product_discounts\", first: 10) {\n      edges {\n        node {\n          id\n          discount {\n            ... on DiscountCodeBasic {\n              title\n              status\n              combinesWith {\n                productDiscounts\n              }\n            }\n            ... on DiscountCodeFreeShipping {\n              title\n              status\n              combinesWith {\n                productDiscounts\n              }\n            }\n          }\n        }\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "Retrieve a list of discounts", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    discountNodes(first: 5) {\n      edges {\n        node {\n          id\n          __typename\n          discount {\n            ... on DiscountCodeBasic {\n              title\n              summary\n              status\n            }\n            ... on DiscountAutomaticBasic {\n              title\n              summary\n              status\n            }\n            ... on DiscountCodeBxgy {\n              title\n              summary\n              status\n            }\n            ... on DiscountAutomaticBxgy {\n              title\n              summary\n              status\n            }\n            ... on DiscountCodeFreeShipping {\n              title\n              summary\n              status\n            }\n            ... on DiscountAutomaticApp {\n              title\n              status\n              appDiscountType {\n                functionId\n              }\n            }\n          }\n        }\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}]}, {"name": "discountNodesCount", "description": "The total number of discounts for the shop. Limited to a maximum of 10000.", "arguments": [{"name": "query", "type": "String", "required": true, "description": "A filter made up of terms, connectives, modifiers, and comparators.\nYou can apply one or more filters to a query. Learn more about Shopify API search syntax."}], "returns": [], "examples": [{"description": "Retrieve the number of discounts used more than once", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query discountNodesCount($query: String!) {\n    discountNodesCount(query: $query) {\n      count\n      precision\n    }\n  }\nQUERY\n\nvariables = {\n  \"query\": \"times_used:>1\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Retrieve the number of discounts used within a range", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query discountNodesCount($query: String!) {\n    discountNodesCount(query: $query) {\n      count\n      precision\n    }\n  }\nQUERY\n\nvariables = {\n  \"query\": \"times_used:>1 AND times_used:<4\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Retrieve the number of unused discounts", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query discountNodesCount($query: String!) {\n    discountNodesCount(query: $query) {\n      count\n      precision\n    }\n  }\nQUERY\n\nvariables = {\n  \"query\": \"times_used:0\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Retrieve the total number of discounts", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query discountNodesCount {\n    discountNodesCount {\n      count\n      precision\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "Retrieves a count of all price rules", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query DiscountCount {\n    discountNodesCount {\n      count\n      precision\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}]}, {"name": "discountRedeemCodeBulkCreation", "description": "Returns a bulk code creation resource by ID.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID of the DiscountRedeemCodeBulkCreation to return."}], "returns": [], "examples": [{"description": "Retrieves a discount code creation job", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query DiscountRedeemCodeBulkShow($id: ID!) {\n    discountRedeemCodeBulkCreation(id: $id) {\n      id\n      createdAt\n      discountCode {\n        id\n      }\n      done\n      codesCount\n      importedCount\n      failedCount\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/DiscountRedeemCodeBulkCreation/989355202\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Retrieves a list of discount codes for a discount code creation job", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query DiscountRedeemCodeBulkShow($id: ID!) {\n    discountRedeemCodeBulkCreation(id: $id) {\n      id\n      createdAt\n      discountCode {\n        id\n      }\n      codes(first: 10) {\n        nodes {\n          discountRedeemCode {\n            code\n          }\n          errors {\n            message\n            field\n            extraInfo\n            code\n          }\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/DiscountRedeemCodeBulkCreation/989355205\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "discountRedeemCodeSavedSearches", "description": "List of the shop's redeemed discount code saved searches.", "arguments": [{"name": "after", "type": "String", "required": true, "description": "The elements that come after the specified cursor."}], "returns": [], "examples": []}, {"name": "marketingActivities", "description": "A list of marketing activities associated with the marketing app.", "arguments": [{"name": "after", "type": "String", "required": true, "description": "The elements that come after the specified cursor."}], "returns": [], "examples": []}, {"name": "marketingActivity", "description": "Returns a MarketingActivity resource by ID.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID of the MarketingActivity to return."}], "returns": [], "examples": []}, {"name": "marketingEvent", "description": "Returns a MarketingEvent resource by ID.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID of the MarketingEvent to return."}], "returns": [], "examples": [{"description": "Overview", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query MarketingEventShow {\n    marketingEvent(id: \"gid://shopify/MarketingEvent/425025702\") {\n      id\n      type\n      remoteId\n      startedAt\n      endedAt\n      scheduledToEndAt\n      manageUrl\n      previewUrl\n      utmCampaign\n      utmMedium\n      utmSource\n      description\n      marketingChannelType\n      sourceAndMedium\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}]}, {"name": "marketingEvents", "description": "A list of marketing events associated with the marketing app.", "arguments": [{"name": "after", "type": "String", "required": true, "description": "The elements that come after the specified cursor."}], "returns": [], "examples": [{"description": "Overview", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query MarketingEventList {\n    marketingEvents(first: 10) {\n      edges {\n        node {\n          id\n          type\n          remoteId\n          startedAt\n          endedAt\n          scheduledToEndAt\n          manageUrl\n          previewUrl\n          utmCampaign\n          utmMedium\n          utmSource\n          description\n          marketingChannelType\n          sourceAndMedium\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}]}, {"name": "serverPixel", "description": "The server pixel configured by the app.", "arguments": [{"name": "ServerPixel", "type": "ServerPixel", "required": true, "description": "A server pixel stores configuration for streaming customer interactions to an EventBridge or PubSub endpoint."}], "returns": [], "examples": []}, {"name": "webPixel", "description": "Returns a\nweb pixel\nby ID.", "arguments": [{"name": "id", "type": "ID", "required": true, "description": "The ID of the WebPixel object to return."}], "returns": [], "examples": [{"description": "Query a web pixel", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    webPixel {\n      id\n      settings\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "Query a web pixel by its ID", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    webPixel(id: \"gid://shopify/WebPixel/845285844\") {\n      id\n      settings\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}]}], "mutations": [{"name": "abandonmentEmailStateUpdate", "description": "Updates the email state value for an abandonment.", "arguments": [{"name": "emailSentAt", "type": "DateTime", "required": true, "description": "The date and time for when the email was sent, if that is the case."}], "returns": [], "examples": []}, {"name": "abandonmentUpdateActivitiesDeliveryStatuses", "description": "Updates the marketing activities delivery statuses for an abandonment.", "arguments": [{"name": "abandonmentId", "type": "ID!", "required": true, "description": "The ID of the abandonment that needs to be updated."}], "returns": [], "examples": []}, {"name": "discountAutomaticActivate", "description": "Activates an automatic discount.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID of the automatic discount to activate."}], "returns": [], "examples": [{"description": "Activate an automatic discount set to start in the future", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation discountAutomaticActivate($id: ID!) {\n    discountAutomaticActivate(id: $id) {\n      automaticDiscountNode {\n        automaticDiscount {\n          ... on DiscountAutomaticBxgy {\n            status\n            startsAt\n            endsAt\n          }\n        }\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/DiscountAutomaticNode/198286294\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Activate an expired automatic discount", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation discountAutomaticActivate($id: ID!) {\n    discountAutomaticActivate(id: $id) {\n      automaticDiscountNode {\n        automaticDiscount {\n          ... on DiscountAutomaticBxgy {\n            status\n            startsAt\n            endsAt\n          }\n        }\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/DiscountAutomaticNode/198286294\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "discountAutomaticActivate reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation discountAutomaticActivate($id: ID!) {\n    discountAutomaticActivate(id: $id) {\n      automaticDiscountNode {\n        automaticDiscount {\n          ... on DiscountAutomaticBxgy {\n            status\n            startsAt\n            endsAt\n          }\n        }\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/DiscountAutomaticNode/198286294\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "discountAutomaticAppCreate", "description": "Creates an automatic discount that's managed by an app.\nUse this mutation with Shopify Functions\nwhen you need advanced, custom, or dynamic discount capabilities that aren't supported by\nShopify's native discount types.\nFor example, use this mutation to create an automatic discount using an app's\n\"Volume\" discount type that applies a percentage\noff when customers purchase more than the minimum quantity of a product. For an example implementation,\nrefer to our tutorial.\nNoteTo create code discounts with custom logic, use the\ndiscountCodeAppCreate\nmutation.", "arguments": [{"name": "automaticAppDiscount", "type": "DiscountAutomaticAppInput!", "required": true, "description": "The input data used to create the automatic discount."}], "returns": [], "examples": [{"description": "Create a non-combinable automatic discount that's managed by an app", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation discountAutomaticAppCreate($automaticAppDiscount: DiscountAutomaticAppInput!) {\n    discountAutomaticAppCreate(automaticAppDiscount: $automaticAppDiscount) {\n      userErrors {\n        field\n        message\n      }\n      automaticAppDiscount {\n        discountId\n        title\n        startsAt\n        endsAt\n        status\n        appDiscountType {\n          appKey\n          functionId\n        }\n        combinesWith {\n          orderDiscounts\n          productDiscounts\n          shippingDiscounts\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"automaticAppDiscount\": {\n    \"title\": \"$5 discount\",\n    \"functionId\": \"de7a6b74-5ac7-432f-8d5b-98dd14fb8af5\",\n    \"startsAt\": \"2025-02-02T17:09:21Z\",\n    \"endsAt\": \"2025-02-02T17:09:21Z\",\n    \"combinesWith\": {\n      \"orderDiscounts\": false,\n      \"productDiscounts\": false,\n      \"shippingDiscounts\": false\n    },\n    \"metafields\": [{\"namespace\"=>\"default\", \"key\"=>\"function-configuration\", \"type\"=>\"json\", \"value\"=>\"{\\n  \\\"discounts\\\": [{\\n    \\\"value\\\": {\\\"fixedAmount\\\": {\\\"amount\\\": 5}},\\n    \\\"targets\\\": [{\\\"orderSubtotal\\\": {\\\"excludedVariantIds\\\": []}}]\\n  }],\\n  \\\"discountApplicationStrategy\\\": \\\"FIRST\\\"\\n}\"}]\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Create an automatic product discount that's managed by an app", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation discountAutomaticAppCreate($automaticAppDiscount: DiscountAutomaticAppInput!) {\n    discountAutomaticAppCreate(automaticAppDiscount: $automaticAppDiscount) {\n      userErrors {\n        field\n        message\n      }\n      automaticAppDiscount {\n        discountId\n        title\n        startsAt\n        endsAt\n        status\n        appDiscountType {\n          appKey\n          functionId\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"automaticAppDiscount\": {\n    \"title\": \"Product discount $10 off\",\n    \"functionId\": \"0490cd8a-7bba-48f4-8987-0240b0a2ddbe\",\n    \"startsAt\": \"2025-01-01T00:00:00Z\",\n    \"endsAt\": \"2025-12-31T23:59:59Z\",\n    \"metafields\": [{\"namespace\"=>\"default\", \"key\"=>\"function-configuration\", \"type\"=>\"json\", \"value\"=>\"{\\n  \\\"discounts\\\": [{\\n    \\\"value\\\": {\\\"fixedAmount\\\": {\\\"amount\\\": 10}},\\n    \\\"targets\\\": [{\\\"productVariant\\\": {\\\"id\\\": \\\"gid://shopify/ProductVariant/12345\\\"}}]\\n  }],\\n  \\\"discountApplicationStrategy\\\": \\\"FIRST\\\"\\n}\"}]\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "discountAutomaticAppCreate reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation discountAutomaticAppCreate($automaticAppDiscount: DiscountAutomaticAppInput!) {\n    discountAutomaticAppCreate(automaticAppDiscount: $automaticAppDiscount) {\n      userErrors {\n        field\n        message\n      }\n      automaticAppDiscount {\n        discountId\n        title\n        startsAt\n        endsAt\n        status\n        appDiscountType {\n          appKey\n          functionId\n        }\n        combinesWith {\n          orderDiscounts\n          productDiscounts\n          shippingDiscounts\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"automaticAppDiscount\": {\n    \"title\": \"$5 discount\",\n    \"functionId\": \"de7a6b74-5ac7-432f-8d5b-98dd14fb8af5\",\n    \"startsAt\": \"2025-02-02T17:09:21Z\",\n    \"endsAt\": \"2025-02-02T17:09:21Z\",\n    \"combinesWith\": {\n      \"orderDiscounts\": false,\n      \"productDiscounts\": false,\n      \"shippingDiscounts\": false\n    },\n    \"metafields\": [{\"namespace\"=>\"default\", \"key\"=>\"function-configuration\", \"type\"=>\"json\", \"value\"=>\"{\\n  \\\"discounts\\\": [{\\n    \\\"value\\\": {\\\"fixedAmount\\\": {\\\"amount\\\": 5}},\\n    \\\"targets\\\": [{\\\"orderSubtotal\\\": {\\\"excludedVariantIds\\\": []}}]\\n  }],\\n  \\\"discountApplicationStrategy\\\": \\\"FIRST\\\"\\n}\"}]\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "discountAutomaticAppUpdate", "description": "Updates an existing automatic discount that's managed by an app using\nShopify Functions.\nUse this mutation when you need advanced, custom, or\ndynamic discount capabilities that aren't supported by\nShopify's native discount types.\nFor example, use this mutation to update a new \"Volume\" discount type that applies a percentage\noff when customers purchase more than the minimum quantity of a product. For an example implementation,\nrefer to our tutorial.\nNoteTo update code discounts with custom logic, use the\ndiscountCodeAppUpdate\nmutation instead.", "arguments": [{"name": "automaticAppDiscount", "type": "DiscountAutomaticAppInput!", "required": true, "description": "The input fields required to update the automatic discount."}], "returns": [], "examples": [{"description": "Update an app-managed automatic discount title", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation discountAutomaticAppUpdate($automaticAppDiscount: DiscountAutomaticAppInput!, $id: ID!) {\n    discountAutomaticAppUpdate(automaticAppDiscount: $automaticAppDiscount, id: $id) {\n      automaticAppDiscount {\n        title\n        status\n        appDiscountType {\n          appKey\n          functionId\n        }\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/DiscountAutomaticNode/159339796\",\n  \"automaticAppDiscount\": {\n    \"title\": \"$5 discount\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Update the date range of an app-managed automatic discount", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation discountAutomaticAppUpdate($automaticAppDiscount: DiscountAutomaticAppInput!, $id: ID!) {\n    discountAutomaticAppUpdate(automaticAppDiscount: $automaticAppDiscount, id: $id) {\n      automaticAppDiscount {\n        title\n        startsAt\n        endsAt\n        status\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/DiscountAutomaticNode/159339796\",\n  \"automaticAppDiscount\": {\n    \"startsAt\": \"2025-01-01T00:00:00Z\",\n    \"endsAt\": \"2025-09-30T23:59:59Z\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "discountAutomaticAppUpdate reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation discountAutomaticAppUpdate($automaticAppDiscount: DiscountAutomaticAppInput!, $id: ID!) {\n    discountAutomaticAppUpdate(automaticAppDiscount: $automaticAppDiscount, id: $id) {\n      automaticAppDiscount {\n        title\n        status\n        appDiscountType {\n          appKey\n          functionId\n        }\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/DiscountAutomaticNode/159339796\",\n  \"automaticAppDiscount\": {\n    \"title\": \"$5 discount\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "discountAutomaticBasicCreate", "description": "Creates an\namount off discount\nthat's automatically applied on a cart and at checkout.\nNoteTo create code discounts, use the\ndiscountCodeBasicCreate\nmutation.", "arguments": [{"name": "automaticBasicDiscount", "type": "DiscountAutomaticBasicInput!", "required": true, "description": "The input data used to create the automatic amount off discount."}], "returns": [], "examples": [{"description": "Create a combinable automatic discount", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation discountAutomaticBasicCreate($automaticBasicDiscount: DiscountAutomaticBasicInput!) {\n    discountAutomaticBasicCreate(automaticBasicDiscount: $automaticBasicDiscount) {\n      automaticDiscountNode {\n        id\n        automaticDiscount {\n          ... on DiscountAutomaticBasic {\n            title\n            startsAt\n            combinesWith {\n              productDiscounts\n              shippingDiscounts\n              orderDiscounts\n            }\n            minimumRequirement {\n              ... on DiscountMinimumSubtotal {\n                greaterThanOrEqualToSubtotal {\n                  amount\n                  currencyCode\n                }\n              }\n            }\n            customerGets {\n              value {\n                ... on DiscountAmount {\n                  amount {\n                    amount\n                    currencyCode\n                  }\n                }\n              }\n              items {\n                ... on AllDiscountItems {\n                  allItems\n                }\n              }\n            }\n          }\n        }\n      }\n      userErrors {\n        field\n        code\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"automaticBasicDiscount\": {\n    \"title\": \"$10 off orders over $100 (combinable with shipping discounts)\",\n    \"startsAt\": \"2025-01-07T01:28:55-05:00\",\n    \"minimumRequirement\": {\n      \"subtotal\": {\n        \"greaterThanOrEqualToSubtotal\": \"100.00\"\n      }\n    },\n    \"customerGets\": {\n      \"value\": {\n        \"discountAmount\": {\n          \"amount\": \"10.00\",\n          \"appliesOnEachItem\": false\n        }\n      },\n      \"items\": {\n        \"all\": true\n      }\n    },\n    \"combinesWith\": {\n      \"productDiscounts\": false,\n      \"shippingDiscounts\": true,\n      \"orderDiscounts\": false\n    }\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Create a fixed amount off discount", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation discountAutomaticBasicCreate($automaticBasicDiscount: DiscountAutomaticBasicInput!) {\n    discountAutomaticBasicCreate(automaticBasicDiscount: $automaticBasicDiscount) {\n      automaticDiscountNode {\n        id\n        automaticDiscount {\n          ... on DiscountAutomaticBasic {\n            startsAt\n            endsAt\n            minimumRequirement {\n              ... on DiscountMinimumSubtotal {\n                greaterThanOrEqualToSubtotal {\n                  amount\n                  currencyCode\n                }\n              }\n            }\n            customerGets {\n              value {\n                ... on DiscountAmount {\n                  amount {\n                    amount\n                    currencyCode\n                  }\n                  appliesOnEachItem\n                }\n              }\n              items {\n                ... on AllDiscountItems {\n                  allItems\n                }\n              }\n            }\n          }\n        }\n      }\n      userErrors {\n        field\n        code\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"automaticBasicDiscount\": {\n    \"title\": \"$50 off all orders over $200 (June - September 2025)\",\n    \"startsAt\": \"2025-06-01T00:00:00Z\",\n    \"endsAt\": \"2025-09-30T00:00:00Z\",\n    \"minimumRequirement\": {\n      \"subtotal\": {\n        \"greaterThanOrEqualToSubtotal\": \"200.00\"\n      }\n    },\n    \"customerGets\": {\n      \"value\": {\n        \"discountAmount\": {\n          \"amount\": \"50.00\",\n          \"appliesOnEachItem\": false\n        }\n      },\n      \"items\": {\n        \"all\": true\n      }\n    }\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Create a percentage off discount with a minimum purchase", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation discountAutomaticBasicCreate($automaticBasicDiscount: DiscountAutomaticBasicInput!) {\n    discountAutomaticBasicCreate(automaticBasicDiscount: $automaticBasicDiscount) {\n      automaticDiscountNode {\n        id\n        automaticDiscount {\n          ... on DiscountAutomaticBasic {\n            title\n            startsAt\n            minimumRequirement {\n              ... on DiscountMinimumSubtotal {\n                greaterThanOrEqualToSubtotal {\n                  amount\n                  currencyCode\n                }\n              }\n            }\n            customerGets {\n              value {\n                ... on DiscountPercentage {\n                  percentage\n                }\n              }\n              items {\n                ... on AllDiscountItems {\n                  allItems\n                }\n              }\n            }\n          }\n        }\n      }\n      userErrors {\n        field\n        code\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"automaticBasicDiscount\": {\n    \"title\": \"15% off orders over $50\",\n    \"startsAt\": \"2024-01-01T00:00:00Z\",\n    \"minimumRequirement\": {\n      \"subtotal\": {\n        \"greaterThanOrEqualToSubtotal\": \"50.00\"\n      }\n    },\n    \"customerGets\": {\n      \"value\": {\n        \"percentage\": 0.15\n      },\n      \"items\": {\n        \"all\": true\n      }\n    }\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "discountAutomaticBasicCreate reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation discountAutomaticBasicCreate($automaticBasicDiscount: DiscountAutomaticBasicInput!) {\n    discountAutomaticBasicCreate(automaticBasicDiscount: $automaticBasicDiscount) {\n      automaticDiscountNode {\n        id\n        automaticDiscount {\n          ... on DiscountAutomaticBasic {\n            title\n            startsAt\n            combinesWith {\n              productDiscounts\n              shippingDiscounts\n              orderDiscounts\n            }\n            minimumRequirement {\n              ... on DiscountMinimumSubtotal {\n                greaterThanOrEqualToSubtotal {\n                  amount\n                  currencyCode\n                }\n              }\n            }\n            customerGets {\n              value {\n                ... on DiscountAmount {\n                  amount {\n                    amount\n                    currencyCode\n                  }\n                }\n              }\n              items {\n                ... on AllDiscountItems {\n                  allItems\n                }\n              }\n            }\n          }\n        }\n      }\n      userErrors {\n        field\n        code\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"automaticBasicDiscount\": {\n    \"title\": \"$10 off orders over $100 (combinable with shipping discounts)\",\n    \"startsAt\": \"2025-01-07T01:28:55-05:00\",\n    \"minimumRequirement\": {\n      \"subtotal\": {\n        \"greaterThanOrEqualToSubtotal\": \"100.00\"\n      }\n    },\n    \"customerGets\": {\n      \"value\": {\n        \"discountAmount\": {\n          \"amount\": \"10.00\",\n          \"appliesOnEachItem\": false\n        }\n      },\n      \"items\": {\n        \"all\": true\n      }\n    },\n    \"combinesWith\": {\n      \"productDiscounts\": false,\n      \"shippingDiscounts\": true,\n      \"orderDiscounts\": false\n    }\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "discountAutomaticBasicUpdate", "description": "Updates an existing\namount off discount\nthat's automatically applied on a cart and at checkout.\nNoteTo update code discounts, use the\ndiscountCodeBasicUpdate\nmutation instead.", "arguments": [{"name": "automaticBasicDiscount", "type": "DiscountAutomaticBasicInput!", "required": true, "description": "The input data used to update the automatic amount off discount."}], "returns": [], "examples": []}, {"name": "discountAutomaticBulkDelete", "description": "Asynchronously delete automatic discounts in bulk if a search or saved_search_id argument is provided or if a\nmaximum discount threshold is reached (1,000). Otherwise, deletions will occur inline.\nWarning: All automatic discounts will be deleted if a blank search argument is provided.", "arguments": [{"name": "ids", "type": "[ID!]", "required": true, "description": "The IDs of the automatic discounts to delete."}], "returns": [], "examples": [{"description": "Asynchronously delete automatic discounts in bulk using a search filter", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation discountAutomaticBulkDelete($search: String) {\n    discountAutomaticBulkDelete(search: $search) {\n      job {\n        id\n      }\n      userErrors {\n        code\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"search\": \"type:percentage status:expired\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Using more than one targeting argument returns an error", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation discountAutomaticBulkDelete($search: String, $ids: [ID!]) {\n    discountAutomaticBulkDelete(search: $search, ids: $ids) {\n      job {\n        id\n      }\n      userErrors {\n        code\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"ids\": [\"gid://shopify/DiscountAutomaticNode/1\"],\n  \"search\": \"type:bxgy\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "discountAutomaticBulkDelete reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation discountAutomaticBulkDelete($search: String) {\n    discountAutomaticBulkDelete(search: $search) {\n      job {\n        id\n      }\n      userErrors {\n        code\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"search\": \"type:percentage status:expired\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "discountAutomaticBxgyCreate", "description": "Creates a\nbuy X get Y discount (BXGY)\nthat's automatically applied on a cart and at checkout.\nNoteTo create code discounts, use the\ndiscountCodeBxgyCreate\nmutation.", "arguments": [{"name": "automaticBxgyDiscount", "type": "DiscountAutomaticBxgyInput!", "required": true, "description": "The input data used to create the automatic BXGY discount."}], "returns": [], "examples": [{"description": "Create an automatic buy X get Y (BXGY) discount for different products", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation CreateBxgyDiscount($automaticBxgyDiscount: DiscountAutomaticBxgyInput!) {\n    discountAutomaticBxgyCreate(automaticBxgyDiscount: $automaticBxgyDiscount) {\n      automaticDiscountNode {\n        id\n        automaticDiscount {\n          ... on DiscountAutomaticBxgy {\n            title\n            startsAt\n            endsAt\n          }\n        }\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"automaticBxgyDiscount\": {\n    \"title\": \"Buy first product, get second product free\",\n    \"startsAt\": \"2025-01-01T00:00:00Z\",\n    \"endsAt\": \"2025-12-31T23:59:59Z\",\n    \"customerBuys\": {\n      \"items\": {\n        \"products\": {\n          \"productsToAdd\": [\"gid://shopify/Product/108828309\"]\n        }\n      },\n      \"value\": {\n        \"quantity\": \"1\"\n      }\n    },\n    \"customerGets\": {\n      \"items\": {\n        \"products\": {\n          \"productsToAdd\": [\"gid://shopify/Product/20995642\"]\n        }\n      },\n      \"value\": {\n        \"discountOnQuantity\": {\n          \"quantity\": \"1\",\n          \"effect\": {\n            \"percentage\": 1.0\n          }\n        }\n      }\n    },\n    \"usesPerOrderLimit\": \"1\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Create an automatic buy X get Y (BXGY) discount for the same product", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation CreateAutomaticBxgyDiscount($automaticBxgyDiscount: DiscountAutomaticBxgyInput!) {\n    discountAutomaticBxgyCreate(automaticBxgyDiscount: $automaticBxgyDiscount) {\n      automaticDiscountNode {\n        id\n        automaticDiscount {\n          ... on DiscountAutomaticBxgy {\n            title\n            startsAt\n            endsAt\n          }\n        }\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"automaticBxgyDiscount\": {\n    \"title\": \"Buy one, get one free\",\n    \"startsAt\": \"2025-01-01T00:00:00Z\",\n    \"endsAt\": \"2025-12-31T23:59:59Z\",\n    \"customerBuys\": {\n      \"items\": {\n        \"products\": {\n          \"productsToAdd\": [\"gid://shopify/Product/108828309\"]\n        }\n      },\n      \"value\": {\n        \"quantity\": \"1\"\n      }\n    },\n    \"customerGets\": {\n      \"items\": {\n        \"products\": {\n          \"productsToAdd\": [\"gid://shopify/Product/108828309\"]\n        }\n      },\n      \"value\": {\n        \"discountOnQuantity\": {\n          \"effect\": {\n            \"percentage\": 1.0\n          },\n          \"quantity\": \"1\"\n        }\n      }\n    },\n    \"usesPerOrderLimit\": \"1\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "discountAutomaticBxgyCreate reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation CreateBxgyDiscount($automaticBxgyDiscount: DiscountAutomaticBxgyInput!) {\n    discountAutomaticBxgyCreate(automaticBxgyDiscount: $automaticBxgyDiscount) {\n      automaticDiscountNode {\n        id\n        automaticDiscount {\n          ... on DiscountAutomaticBxgy {\n            title\n            startsAt\n            endsAt\n          }\n        }\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"automaticBxgyDiscount\": {\n    \"title\": \"Buy first product, get second product free\",\n    \"startsAt\": \"2025-01-01T00:00:00Z\",\n    \"endsAt\": \"2025-12-31T23:59:59Z\",\n    \"customerBuys\": {\n      \"items\": {\n        \"products\": {\n          \"productsToAdd\": [\"gid://shopify/Product/108828309\"]\n        }\n      },\n      \"value\": {\n        \"quantity\": \"1\"\n      }\n    },\n    \"customerGets\": {\n      \"items\": {\n        \"products\": {\n          \"productsToAdd\": [\"gid://shopify/Product/20995642\"]\n        }\n      },\n      \"value\": {\n        \"discountOnQuantity\": {\n          \"quantity\": \"1\",\n          \"effect\": {\n            \"percentage\": 1.0\n          }\n        }\n      }\n    },\n    \"usesPerOrderLimit\": \"1\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "discountAutomaticBxgyUpdate", "description": "Updates an existing\nbuy X get Y discount (BXGY)\nthat's automatically applied on a cart and at checkout.\nNoteTo update code discounts, use the\ndiscountCodeBxgyUpdate\nmutation instead.", "arguments": [{"name": "automaticBxgyDiscount", "type": "DiscountAutomaticBxgyInput!", "required": true, "description": "The input data used to update the automatic BXGY discount."}], "returns": [], "examples": [{"description": "Update an automatic buy X get Y (BXGY) discount", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation UpdateBxgyDiscount($id: ID!, $automaticBxgyDiscount: DiscountAutomaticBxgyInput!) {\n    discountAutomaticBxgyUpdate(id: $id, automaticBxgyDiscount: $automaticBxgyDiscount) {\n      automaticDiscountNode {\n        id\n        automaticDiscount {\n          ... on DiscountAutomaticBxgy {\n            title\n            startsAt\n            endsAt\n          }\n        }\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/DiscountAutomaticBxgy/198286294\",\n  \"automaticBxgyDiscount\": {\n    \"title\": \"Buy first product, get second product free\",\n    \"startsAt\": \"2025-01-01T00:00:00Z\",\n    \"endsAt\": \"2025-12-31T23:59:59Z\",\n    \"customerBuys\": {\n      \"items\": {\n        \"products\": {\n          \"productsToAdd\": [\"gid://shopify/Product/108828309\"]\n        }\n      },\n      \"value\": {\n        \"quantity\": \"1\"\n      }\n    },\n    \"customerGets\": {\n      \"items\": {\n        \"products\": {\n          \"productsToAdd\": [\"gid://shopify/Product/20995642\"]\n        }\n      },\n      \"value\": {\n        \"discountOnQuantity\": {\n          \"quantity\": \"1\",\n          \"effect\": {\n            \"percentage\": 1.0\n          }\n        }\n      }\n    },\n    \"usesPerOrderLimit\": \"1\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Updating a BXGY discount with invalid input returns an error", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation discountAutomaticBxgyUpdate($id: ID!, $automaticBxgyDiscount: DiscountAutomaticBxgyInput!) {\n    discountAutomaticBxgyUpdate(id: $id, automaticBxgyDiscount: $automaticBxgyDiscount) {\n      automaticDiscountNode {\n        id\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/DiscountAutomaticBxgy/198286294\",\n  \"automaticBxgyDiscount\": {\n    \"title\": \"Invalid discount percentage\",\n    \"customerGets\": {\n      \"value\": {\n        \"discountOnQuantity\": {\n          \"quantity\": \"1\",\n          \"effect\": {\n            \"percentage\": 1.5\n          }\n        }\n      }\n    }\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "discountAutomaticBxgyUpdate reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation UpdateBxgyDiscount($id: ID!, $automaticBxgyDiscount: DiscountAutomaticBxgyInput!) {\n    discountAutomaticBxgyUpdate(id: $id, automaticBxgyDiscount: $automaticBxgyDiscount) {\n      automaticDiscountNode {\n        id\n        automaticDiscount {\n          ... on DiscountAutomaticBxgy {\n            title\n            startsAt\n            endsAt\n          }\n        }\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/DiscountAutomaticBxgy/198286294\",\n  \"automaticBxgyDiscount\": {\n    \"title\": \"Buy first product, get second product free\",\n    \"startsAt\": \"2025-01-01T00:00:00Z\",\n    \"endsAt\": \"2025-12-31T23:59:59Z\",\n    \"customerBuys\": {\n      \"items\": {\n        \"products\": {\n          \"productsToAdd\": [\"gid://shopify/Product/108828309\"]\n        }\n      },\n      \"value\": {\n        \"quantity\": \"1\"\n      }\n    },\n    \"customerGets\": {\n      \"items\": {\n        \"products\": {\n          \"productsToAdd\": [\"gid://shopify/Product/20995642\"]\n        }\n      },\n      \"value\": {\n        \"discountOnQuantity\": {\n          \"quantity\": \"1\",\n          \"effect\": {\n            \"percentage\": 1.0\n          }\n        }\n      }\n    },\n    \"usesPerOrderLimit\": \"1\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "discountAutomaticDeactivate", "description": "Deactivates an automatic discount.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID of the automatic discount to deactivate."}], "returns": [], "examples": [{"description": "Deactivate an active automatic discount", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation discountAutomaticDeactivate($id: ID!) {\n    discountAutomaticDeactivate(id: $id) {\n      automaticDiscountNode {\n        automaticDiscount {\n          ... on DiscountAutomaticBxgy {\n            status\n            startsAt\n            endsAt\n          }\n        }\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/DiscountAutomaticNode/198286294\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Deactivate an automatic discount set to start in the future", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation discountAutomaticDeactivate($id: ID!) {\n    discountAutomaticDeactivate(id: $id) {\n      automaticDiscountNode {\n        automaticDiscount {\n          ... on DiscountAutomaticBxgy {\n            status\n            startsAt\n            endsAt\n          }\n        }\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/DiscountAutomaticNode/198286294\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "discountAutomaticDeactivate reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation discountAutomaticDeactivate($id: ID!) {\n    discountAutomaticDeactivate(id: $id) {\n      automaticDiscountNode {\n        automaticDiscount {\n          ... on DiscountAutomaticBxgy {\n            status\n            startsAt\n            endsAt\n          }\n        }\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/DiscountAutomaticNode/198286294\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "discountAutomaticDelete", "description": "Deletes an\nautomatic discount.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID of the automatic discount to delete."}], "returns": [], "examples": [{"description": "Delete an automatic discount", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation discountAutomaticDelete($id: ID!) {\n    discountAutomaticDelete(id: $id) {\n      deletedAutomaticDiscountId\n      userErrors {\n        field\n        code\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/DiscountAutomaticNode/198286294\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Remove an existing PriceRule", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation discountAutomaticDelete($id: ID!) {\n    discountAutomaticDelete(id: $id) {\n      deletedAutomaticDiscountId\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/DiscountAutomaticNode/198286294\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "discountAutomaticDelete reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation discountAutomaticDelete($id: ID!) {\n    discountAutomaticDelete(id: $id) {\n      deletedAutomaticDiscountId\n      userErrors {\n        field\n        code\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/DiscountAutomaticNode/198286294\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "discountAutomaticFreeShippingCreate", "description": "Creates a\nfree shipping discount\nthat's automatically applied on a cart and at checkout.\nNoteTo create code discounts, use the\ndiscountCodeFreeShippingCreate\nmutation.", "arguments": [{"name": "freeShippingAutomaticDiscount", "type": "DiscountAutomaticFreeShippingInput!", "required": true, "description": "The input data used to create the automatic free shipping discount."}], "returns": [], "examples": [{"description": "Create a free shipping discount for 5+ items", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation CreateFreeShippingDiscount($input: DiscountAutomaticFreeShippingInput!) {\n    discountAutomaticFreeShippingCreate(freeShippingAutomaticDiscount: $input) {\n      automaticDiscountNode {\n        id\n        automaticDiscount {\n          ... on DiscountAutomaticFreeShipping {\n            title\n            startsAt\n            endsAt\n            minimumRequirement {\n              ... on DiscountMinimumQuantity {\n                greaterThanOrEqualToQuantity\n              }\n            }\n            destinationSelection {\n              ... on DiscountCountryAll {\n                allCountries\n              }\n            }\n          }\n        }\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": {\n    \"title\": \"FREESHIP5PLUS\",\n    \"startsAt\": \"2025-01-01T00:00:00Z\",\n    \"endsAt\": \"2025-12-31T23:59:59Z\",\n    \"minimumRequirement\": {\n      \"quantity\": {\n        \"greaterThanOrEqualToQuantity\": \"5\"\n      }\n    },\n    \"destination\": {\n      \"all\": true\n    }\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Create a subtotal-based shipping discount", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation M($freeShippingAutomaticDiscount: DiscountAutomaticFreeShippingInput!) {\n    discountAutomaticFreeShippingCreate(freeShippingAutomaticDiscount: $freeShippingAutomaticDiscount) {\n      automaticDiscountNode {\n        id\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"freeShippingAutomaticDiscount\": {\n    \"title\": \"FREESHIPPING50\",\n    \"startsAt\": \"2025-01-11T22:30:47Z\",\n    \"endsAt\": \"2025-12-31T23:59:59Z\",\n    \"destination\": {\n      \"countries\": {\n        \"add\": [\"CA\", \"US\"]\n      }\n    },\n    \"appliesOnOneTimePurchase\": true,\n    \"maximumShippingPrice\": \"200\",\n    \"minimumRequirement\": {\n      \"subtotal\": {\n        \"greaterThanOrEqualToSubtotal\": \"50\"\n      }\n    },\n    \"combinesWith\": {\n      \"orderDiscounts\": true,\n      \"productDiscounts\": true\n    }\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "discountAutomaticFreeShippingCreate reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation CreateFreeShippingDiscount($input: DiscountAutomaticFreeShippingInput!) {\n    discountAutomaticFreeShippingCreate(freeShippingAutomaticDiscount: $input) {\n      automaticDiscountNode {\n        id\n        automaticDiscount {\n          ... on DiscountAutomaticFreeShipping {\n            title\n            startsAt\n            endsAt\n            minimumRequirement {\n              ... on DiscountMinimumQuantity {\n                greaterThanOrEqualToQuantity\n              }\n            }\n            destinationSelection {\n              ... on DiscountCountryAll {\n                allCountries\n              }\n            }\n          }\n        }\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": {\n    \"title\": \"FREESHIP5PLUS\",\n    \"startsAt\": \"2025-01-01T00:00:00Z\",\n    \"endsAt\": \"2025-12-31T23:59:59Z\",\n    \"minimumRequirement\": {\n      \"quantity\": {\n        \"greaterThanOrEqualToQuantity\": \"5\"\n      }\n    },\n    \"destination\": {\n      \"all\": true\n    }\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "discountAutomaticFreeShippingUpdate", "description": "Updates an existing\nfree shipping discount\nthat's automatically applied on a cart and at checkout.\nNoteTo update code discounts, use the\ndiscountCodeFreeShippingUpdate\nmutation instead.", "arguments": [{"name": "freeShippingAutomaticDiscount", "type": "DiscountAutomaticFreeShippingInput!", "required": true, "description": "The input data used to update the automatic free shipping discount."}], "returns": [], "examples": [{"description": "Update an automatic free shipping discount", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation M($id: ID!, $freeShippingAutomaticDiscount: DiscountAutomaticFreeShippingInput!) {\n    discountAutomaticFreeShippingUpdate(id: $id, freeShippingAutomaticDiscount: $freeShippingAutomaticDiscount) {\n      automaticDiscountNode {\n        automaticDiscount {\n          ... on DiscountAutomaticFreeShipping {\n            title\n          }\n        }\n      }\n      userErrors {\n        message\n        field\n        code\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/DiscountAutomaticNode/1057371302\",\n  \"freeShippingAutomaticDiscount\": {\n    \"title\": \"A new title\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Updates an existing a price rule", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation discountAutomaticFreeShippingUpdate($id: ID!, $automaticFreeShippingDiscount: DiscountAutomaticFreeShippingInput!) {\n    discountAutomaticFreeShippingUpdate(id: $id, freeShippingAutomaticDiscount: $automaticFreeShippingDiscount) {\n      automaticDiscountNode {\n        id\n        automaticDiscount {\n          ... on DiscountAutomaticFreeShipping {\n            title\n            startsAt\n            endsAt\n            minimumRequirement {\n              ... on DiscountMinimumQuantity {\n                greaterThanOrEqualToQuantity\n              }\n            }\n            destinationSelection {\n              ... on DiscountCountryAll {\n                allCountries\n              }\n            }\n          }\n        }\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/DiscountAutomaticNode/1057371315\",\n  \"automaticFreeShippingDiscount\": {\n    \"title\": \"Updated Title\",\n    \"startsAt\": \"2024-10-01T00:00:00Z\",\n    \"endsAt\": \"2024-12-31T23:59:59Z\",\n    \"minimumRequirement\": {\n      \"quantity\": {\n        \"greaterThanOrEqualToQuantity\": \"50\"\n      }\n    },\n    \"destination\": {\n      \"all\": true\n    }\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "discountAutomaticFreeShippingUpdate reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation M($id: ID!, $freeShippingAutomaticDiscount: DiscountAutomaticFreeShippingInput!) {\n    discountAutomaticFreeShippingUpdate(id: $id, freeShippingAutomaticDiscount: $freeShippingAutomaticDiscount) {\n      automaticDiscountNode {\n        automaticDiscount {\n          ... on DiscountAutomaticFreeShipping {\n            title\n          }\n        }\n      }\n      userErrors {\n        message\n        field\n        code\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/DiscountAutomaticNode/1057371302\",\n  \"freeShippingAutomaticDiscount\": {\n    \"title\": \"A new title\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "discountCodeActivate", "description": "Activates a code discount.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID of the code discount to activate."}], "returns": [], "examples": [{"description": "Activate a code discount set to start in the future", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation discountCodeActivate($id: ID!) {\n    discountCodeActivate(id: $id) {\n      codeDiscountNode {\n        codeDiscount {\n          ... on DiscountCodeBasic {\n            title\n            status\n            startsAt\n            endsAt\n          }\n        }\n      }\n      userErrors {\n        field\n        code\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/DiscountCodeNode/206265824\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Activate an expired code discount", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation discountCodeActivate($id: ID!) {\n    discountCodeActivate(id: $id) {\n      codeDiscountNode {\n        codeDiscount {\n          ... on DiscountCodeBasic {\n            title\n            status\n            startsAt\n            endsAt\n          }\n        }\n      }\n      userErrors {\n        field\n        code\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/DiscountCodeNode/424668491\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "discountCodeActivate reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation discountCodeActivate($id: ID!) {\n    discountCodeActivate(id: $id) {\n      codeDiscountNode {\n        codeDiscount {\n          ... on DiscountCodeBasic {\n            title\n            status\n            startsAt\n            endsAt\n          }\n        }\n      }\n      userErrors {\n        field\n        code\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/DiscountCodeNode/206265824\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "discountCodeAppCreate", "description": "Creates a code discount. The discount type must be provided by an app extension that uses Shopify Functions. Functions can implement order, product, or shipping discount functions. Use this mutation with Shopify Functions when you need custom logic beyond Shopify's native discount types.\nFor example, use this mutation to create a code discount using an app's \"Volume\" discount type that applies a percentage off when customers purchase more than the minimum quantity\nof a product. For an example implementation, refer to our tutorial.\nNoteTo create automatic discounts with custom logic, use discountAutomaticAppCreate.", "arguments": [{"name": "codeAppDiscount", "type": "DiscountCodeAppInput!", "required": true, "description": "The input data used to create the discount."}], "returns": [], "examples": [{"description": "Create a combinable code discount that's managed by an app", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation discountCodeAppCreate($codeAppDiscount: DiscountCodeAppInput!) {\n    discountCodeAppCreate(codeAppDiscount: $codeAppDiscount) {\n      codeAppDiscount {\n        discountId\n        title\n        appDiscountType {\n          description\n          functionId\n        }\n        combinesWith {\n          orderDiscounts\n          productDiscounts\n          shippingDiscounts\n        }\n        codes(first: 100) {\n          nodes {\n            code\n          }\n        }\n        status\n        usageLimit\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"codeAppDiscount\": {\n    \"code\": \"APP_DISCOUNT\",\n    \"title\": \"Take 5$ from order discount\",\n    \"functionId\": \"241d1090-ce51-4c0e-8b87-a6fa14fe580a\",\n    \"appliesOncePerCustomer\": true,\n    \"combinesWith\": {\n      \"orderDiscounts\": true,\n      \"productDiscounts\": true,\n      \"shippingDiscounts\": true\n    },\n    \"startsAt\": \"2021-02-02T17:09:21Z\",\n    \"endsAt\": \"2022-02-02T17:09:21Z\",\n    \"usageLimit\": 1,\n    \"metafields\": [{\"namespace\"=>\"default\", \"key\"=>\"function-configuration\", \"type\"=>\"json\", \"value\"=>\"{\\\"discounts\\\":[{\\\"value\\\":{\\\"fixedAmount\\\":{\\\"amount\\\":5}},\\\"targets\\\":\\n                      [{\\\"orderSubtotal\\\":{\\\"excludedVariantIds\\\":[]}}]}],\\\"discountApplicationStrategy\\\":\\\"FIRST\\\"}\"}]\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Create a product-based code discount that's managed by an app", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation discountCodeAppCreate($codeAppDiscount: DiscountCodeAppInput!) {\n    discountCodeAppCreate(codeAppDiscount: $codeAppDiscount) {\n      codeAppDiscount {\n        discountId\n        title\n        appDiscountType {\n          description\n          functionId\n        }\n        combinesWith {\n          orderDiscounts\n          productDiscounts\n          shippingDiscounts\n        }\n        codes(first: 5) {\n          nodes {\n            code\n          }\n        }\n        status\n        usageLimit\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"codeAppDiscount\": {\n    \"code\": \"PRODUCT10\",\n    \"title\": \"10% off selected products\",\n    \"functionId\": \"6ca45d1e-e776-4e86-8404-ad521b258b60\",\n    \"appliesOncePerCustomer\": false,\n    \"combinesWith\": {\n      \"orderDiscounts\": false,\n      \"productDiscounts\": false,\n      \"shippingDiscounts\": true\n    },\n    \"startsAt\": \"2025-01-01T00:00:00Z\",\n    \"endsAt\": \"2025-12-31T23:59:59Z\",\n    \"metafields\": [{\"namespace\"=>\"default\", \"key\"=>\"function-configuration\", \"type\"=>\"json\", \"value\"=>\"{\\\"discounts\\\":[{\\\"value\\\":{\\\"percentage\\\":0.10},\\\"targets\\\":[{\\\"productVariants\\\":\\n                      {\\\"productsToDiscount\\\":[\\\"gid://shopify/Product/123\\\"],\\\"excludedVariantIds\\\":[]}}]}],\\n                      \\\"discountApplicationStrategy\\\":\\\"FIRST\\\"}\"}]\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "discountCodeAppCreate reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation discountCodeAppCreate($codeAppDiscount: DiscountCodeAppInput!) {\n    discountCodeAppCreate(codeAppDiscount: $codeAppDiscount) {\n      codeAppDiscount {\n        discountId\n        title\n        appDiscountType {\n          description\n          functionId\n        }\n        combinesWith {\n          orderDiscounts\n          productDiscounts\n          shippingDiscounts\n        }\n        codes(first: 100) {\n          nodes {\n            code\n          }\n        }\n        status\n        usageLimit\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"codeAppDiscount\": {\n    \"code\": \"APP_DISCOUNT\",\n    \"title\": \"Take 5$ from order discount\",\n    \"functionId\": \"241d1090-ce51-4c0e-8b87-a6fa14fe580a\",\n    \"appliesOncePerCustomer\": true,\n    \"combinesWith\": {\n      \"orderDiscounts\": true,\n      \"productDiscounts\": true,\n      \"shippingDiscounts\": true\n    },\n    \"startsAt\": \"2021-02-02T17:09:21Z\",\n    \"endsAt\": \"2022-02-02T17:09:21Z\",\n    \"usageLimit\": 1,\n    \"metafields\": [{\"namespace\"=>\"default\", \"key\"=>\"function-configuration\", \"type\"=>\"json\", \"value\"=>\"{\\\"discounts\\\":[{\\\"value\\\":{\\\"fixedAmount\\\":{\\\"amount\\\":5}},\\\"targets\\\":\\n                      [{\\\"orderSubtotal\\\":{\\\"excludedVariantIds\\\":[]}}]}],\\\"discountApplicationStrategy\\\":\\\"FIRST\\\"}\"}]\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "discountCodeAppUpdate", "description": "Updates a code discount, where the discount type is provided by an app extension that uses Shopify Functions. Use this mutation when you need advanced, custom, or dynamic discount capabilities that aren't supported by Shopify's native discount types.\nNoteTo update automatic discounts, use discountAutomaticAppUpdate.", "arguments": [{"name": "codeAppDiscount", "type": "DiscountCodeAppInput!", "required": true, "description": "The input fields required to update the discount."}], "returns": [], "examples": [{"description": "Update an app code discount", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation discountCodeAppUpdate($codeAppDiscount: DiscountCodeAppInput!, $id: ID!) {\n    discountCodeAppUpdate(codeAppDiscount: $codeAppDiscount, id: $id) {\n      codeAppDiscount {\n        discountId\n        title\n        endsAt\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/DiscountCodeNode/549381256\",\n  \"codeAppDiscount\": {\n    \"title\": \"Take 5$ from order discount\",\n    \"endsAt\": \"2020-08-07T00:00:00Z\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "discountCodeAppUpdate reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation discountCodeAppUpdate($codeAppDiscount: DiscountCodeAppInput!, $id: ID!) {\n    discountCodeAppUpdate(codeAppDiscount: $codeAppDiscount, id: $id) {\n      codeAppDiscount {\n        discountId\n        title\n        endsAt\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/DiscountCodeNode/549381256\",\n  \"codeAppDiscount\": {\n    \"title\": \"Take 5$ from order discount\",\n    \"endsAt\": \"2020-08-07T00:00:00Z\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "discountCodeBasicCreate", "description": "Creates an amount off discount that's applied on a cart and at checkout when a customer enters a code. Amount off discounts can be a percentage off or a fixed amount off.\nNoteTo create discounts that are automatically applied on a cart and at checkout, use the discountAutomaticBasicCreate mutation.", "arguments": [{"name": "basicCodeDiscount", "type": "DiscountCodeBasicInput!", "required": true, "description": "The input data used to create the discount code."}], "returns": [], "examples": [{"description": "Create a discount with a minimum purchase", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation CreateDiscountCode($basicCodeDiscount: DiscountCodeBasicInput!) {\n    discountCodeBasicCreate(basicCodeDiscount: $basicCodeDiscount) {\n      codeDiscountNode {\n        id\n        codeDiscount {\n          ... on DiscountCodeBasic {\n            title\n            startsAt\n            endsAt\n            customerSelection {\n              ... on DiscountCustomers {\n                customers {\n                  id\n                }\n              }\n            }\n            customerGets {\n              value {\n                ... on DiscountPercentage {\n                  percentage\n                }\n              }\n            }\n          }\n        }\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"basicCodeDiscount\": {\n    \"title\": \"10% off selected items\",\n    \"code\": \"10FORYOU\",\n    \"startsAt\": \"2025-01-01T00:00:00Z\",\n    \"endsAt\": \"2025-12-31T23:59:59Z\",\n    \"customerSelection\": {\n      \"customers\": {\n        \"add\": [\"gid://shopify/Customer/624407574\"]\n      }\n    },\n    \"customerGets\": {\n      \"value\": {\n        \"percentage\": 0.1\n      },\n      \"items\": {\n        \"all\": true\n      }\n    },\n    \"minimumRequirement\": {\n      \"subtotal\": {\n        \"greaterThanOrEqualToSubtotal\": \"50.0\"\n      }\n    },\n    \"usageLimit\": 100,\n    \"appliesOncePerCustomer\": true\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Create a limited time discount", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation CreateSummerDiscount($input: DiscountCodeBasicInput!) {\n    discountCodeBasicCreate(basicCodeDiscount: $input) {\n      codeDiscountNode {\n        id\n        codeDiscount {\n          ... on DiscountCodeBasic {\n            title\n            codes(first: 10) {\n              nodes {\n                code\n              }\n            }\n            startsAt\n            endsAt\n          }\n        }\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": {\n    \"title\": \"Limited time discount off all items\",\n    \"code\": \"BUYNOW20\",\n    \"startsAt\": \"2024-06-21T00:00:00Z\",\n    \"endsAt\": \"2024-09-21T00:00:00Z\",\n    \"customerSelection\": {\n      \"all\": true\n    },\n    \"customerGets\": {\n      \"value\": {\n        \"percentage\": 0.2\n      },\n      \"items\": {\n        \"all\": true\n      }\n    },\n    \"appliesOncePerCustomer\": true\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "discountCodeBasicCreate reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation CreateDiscountCode($basicCodeDiscount: DiscountCodeBasicInput!) {\n    discountCodeBasicCreate(basicCodeDiscount: $basicCodeDiscount) {\n      codeDiscountNode {\n        id\n        codeDiscount {\n          ... on DiscountCodeBasic {\n            title\n            startsAt\n            endsAt\n            customerSelection {\n              ... on DiscountCustomers {\n                customers {\n                  id\n                }\n              }\n            }\n            customerGets {\n              value {\n                ... on DiscountPercentage {\n                  percentage\n                }\n              }\n            }\n          }\n        }\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"basicCodeDiscount\": {\n    \"title\": \"10% off selected items\",\n    \"code\": \"10FORYOU\",\n    \"startsAt\": \"2025-01-01T00:00:00Z\",\n    \"endsAt\": \"2025-12-31T23:59:59Z\",\n    \"customerSelection\": {\n      \"customers\": {\n        \"add\": [\"gid://shopify/Customer/624407574\"]\n      }\n    },\n    \"customerGets\": {\n      \"value\": {\n        \"percentage\": 0.1\n      },\n      \"items\": {\n        \"all\": true\n      }\n    },\n    \"minimumRequirement\": {\n      \"subtotal\": {\n        \"greaterThanOrEqualToSubtotal\": \"50.0\"\n      }\n    },\n    \"usageLimit\": 100,\n    \"appliesOncePerCustomer\": true\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "discountCodeBasicUpdate", "description": "Updates an amount off discount that's applied on a cart and at checkout when a customer enters a code. Amount off discounts can be a percentage off or a fixed amount off.\nNoteTo update discounts that are automatically applied on a cart and at checkout, use the discountAutomaticBasicUpdate mutation.", "arguments": [{"name": "basicCodeDiscount", "type": "DiscountCodeBasicInput!", "required": true, "description": "The input data used to update the discount code."}], "returns": [], "examples": [{"description": "Update a basic code discount", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation discountCodeBasicUpdate($id: ID!, $basicCodeDiscount: DiscountCodeBasicInput!) {\n    discountCodeBasicUpdate(id: $id, basicCodeDiscount: $basicCodeDiscount) {\n      codeDiscountNode {\n        id\n      }\n      userErrors {\n        field\n        code\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/DiscountCodeNode/206265824\",\n  \"basicCodeDiscount\": {\n    \"endsAt\": null,\n    \"code\": \"NEW_CODE\",\n    \"appliesOncePerCustomer\": true,\n    \"customerGets\": {\n      \"value\": {\n        \"percentage\": 0.4\n      }\n    }\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Update a discount code to apply to specific products", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation discountCodeBasicUpdate($id: ID!, $basicCodeDiscount: DiscountCodeBasicInput!) {\n    discountCodeBasicUpdate(id: $id, basicCodeDiscount: $basicCodeDiscount) {\n      codeDiscountNode {\n        id\n      }\n      userErrors {\n        field\n        code\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/DiscountCodeNode/139986317\",\n  \"basicCodeDiscount\": {\n    \"endsAt\": \"2025-12-31T23:59:59Z\",\n    \"usageLimit\": 100,\n    \"appliesOncePerCustomer\": true,\n    \"customerGets\": {\n      \"items\": {\n        \"products\": {\n          \"productsToAdd\": [\"gid://shopify/Product/121709582\", \"gid://shopify/Product/108828309\"]\n        }\n      },\n      \"value\": {\n        \"percentage\": 0.1\n      }\n    }\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "discountCodeBasicUpdate reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation discountCodeBasicUpdate($id: ID!, $basicCodeDiscount: DiscountCodeBasicInput!) {\n    discountCodeBasicUpdate(id: $id, basicCodeDiscount: $basicCodeDiscount) {\n      codeDiscountNode {\n        id\n      }\n      userErrors {\n        field\n        code\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/DiscountCodeNode/206265824\",\n  \"basicCodeDiscount\": {\n    \"endsAt\": null,\n    \"code\": \"NEW_CODE\",\n    \"appliesOncePerCustomer\": true,\n    \"customerGets\": {\n      \"value\": {\n        \"percentage\": 0.4\n      }\n    }\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "discountCodeBulkActivate", "description": "Activates multiple code discounts asynchronously using one of the following:\n\nA search query\nA saved search ID\nA list of discount code IDs\n\nFor example, you can activate discounts for all codes that match a search criteria, or activate a predefined set of discount codes.", "arguments": [{"name": "ids", "type": "[ID!]", "required": true, "description": "The IDs of the discounts to activate."}], "returns": [], "examples": [{"description": "Asynchronously activate code discounts in bulk using a search filter", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation discountCodeBulkActivate($search: String) {\n    discountCodeBulkActivate(search: $search) {\n      job {\n        id\n      }\n      userErrors {\n        code\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"search\": \"discount_type:percentage starts_at:past_week\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Using more than one targeting argument returns an error", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation discountCodeBulkActivate($search: String, $ids: [ID!]) {\n    discountCodeBulkActivate(search: $search, ids: $ids) {\n      job {\n        id\n      }\n      userErrors {\n        code\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"ids\": [\"gid://shopify/DiscountCodeNode/1\"],\n  \"search\": \"discount_type:bxgy\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "discountCodeBulkActivate reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation discountCodeBulkActivate($search: String) {\n    discountCodeBulkActivate(search: $search) {\n      job {\n        id\n      }\n      userErrors {\n        code\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"search\": \"discount_type:percentage starts_at:past_week\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "discountCodeBulkDeactivate", "description": "Deactivates multiple code-based discounts asynchronously using one of the following:\n\nA search query\nA saved search ID\nA list of discount code IDs\n\nFor example, you can deactivate discounts for all codes that match a search criteria, or deactivate a predefined set of discount codes.", "arguments": [{"name": "ids", "type": "[ID!]", "required": true, "description": "The IDs of the discounts to deactivate."}], "returns": [], "examples": [{"description": "Asynchronously deactivate code discounts in bulk using a search filter", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation discountCodeBulkDeactivate($search: String) {\n    discountCodeBulkDeactivate(search: $search) {\n      job {\n        id\n      }\n      userErrors {\n        code\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"search\": \"discount_type:percentage ends_at:past_week\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Using more than one argument returns an error", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation discountCodeBulkDeactivate($search: String, $ids: [ID!]) {\n    discountCodeBulkDeactivate(search: $search, ids: $ids) {\n      job {\n        id\n      }\n      userErrors {\n        code\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"ids\": [\"gid://shopify/DiscountCodeNode/1\"],\n  \"search\": \"discount_type:bxgy\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "discountCodeBulkDeactivate reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation discountCodeBulkDeactivate($search: String) {\n    discountCodeBulkDeactivate(search: $search) {\n      job {\n        id\n      }\n      userErrors {\n        code\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"search\": \"discount_type:percentage ends_at:past_week\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "discountCodeBulkDelete", "description": "Deletes multiple code-based discounts asynchronously using one of the following:\n\nA search query\nA saved search ID\nA list of discount code IDs\n\nFor example, you can delete discounts for all codes that match a search criteria, or delete a predefined set of discount codes.", "arguments": [{"name": "ids", "type": "[ID!]", "required": true, "description": "The IDs of the discounts to delete."}], "returns": [], "examples": [{"description": "Asynchronously delete code discounts in bulk using a search filter", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation discountCodeBulkDelete($search: String) {\n    discountCodeBulkDelete(search: $search) {\n      job {\n        id\n      }\n      userErrors {\n        code\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"search\": \"discount_type:percentage ends_at:past_week status:expired\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Using more than one targeting argument returns an error", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation discountCodeBulkDelete($search: String, $ids: [ID!]) {\n    discountCodeBulkDelete(search: $search, ids: $ids) {\n      job {\n        id\n      }\n      userErrors {\n        code\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"ids\": [\"gid://shopify/DiscountCodeNode/1\"],\n  \"search\": \"discount_type:bxgy\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "discountCodeBulkDelete reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation discountCodeBulkDelete($search: String) {\n    discountCodeBulkDelete(search: $search) {\n      job {\n        id\n      }\n      userErrors {\n        code\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"search\": \"discount_type:percentage ends_at:past_week status:expired\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "discountCodeBxgyCreate", "description": "Creates a\nbuy X get Y discount (BXGY)\nthat's applied on a cart and at checkout when a customer enters a code.\nNoteTo create discounts that are automatically applied on a cart and at checkout, use the\ndiscountAutomaticBxgyCreate\nmutation.", "arguments": [{"name": "bxgyCodeDiscount", "type": "DiscountCodeBxgyInput!", "required": true, "description": "The input data used to create the BXGY code discount."}], "returns": [], "examples": [{"description": "Create a basic Buy X get Y (BXGY) discount", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation discountCodeBxgyCreate($bxgyCodeDiscount: DiscountCodeBxgyInput!) {\n    discountCodeBxgyCreate(bxgyCodeDiscount: $bxgyCodeDiscount) {\n      codeDiscountNode {\n        codeDiscount {\n          ... on DiscountCodeBxgy {\n            title\n            codes(first: 10) {\n              nodes {\n                code\n              }\n            }\n            startsAt\n            endsAt\n            customerBuys {\n              items {\n                ...collectionsFragment\n              }\n              value {\n                ... on DiscountQuantity {\n                  quantity\n                }\n              }\n            }\n            customerGets {\n              appliesOnOneTimePurchase\n              appliesOnSubscription\n              value {\n                ... on DiscountOnQuantity {\n                  effect {\n                    ... on DiscountPercentage {\n                      percentage\n                    }\n                  }\n                  quantity {\n                    quantity\n                  }\n                }\n              }\n              items {\n                ...collectionsFragment\n              }\n            }\n            customerSelection {\n              ... on DiscountCustomerAll {\n                allCustomers\n              }\n            }\n            appliesOncePerCustomer\n            usesPerOrderLimit\n          }\n        }\n      }\n      userErrors {\n        field\n        code\n        message\n      }\n    }\n  }\n  \n  fragment collectionsFragment on DiscountCollections {\n    collections(first: 10) {\n      nodes {\n        id\n        title\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"bxgyCodeDiscount\": {\n    \"code\": \"SUMMERSALE\",\n    \"customerBuys\": {\n      \"items\": {\n        \"collections\": {\n          \"add\": [\"gid://shopify/Collection/1007901140\"]\n        }\n      },\n      \"value\": {\n        \"quantity\": \"3\"\n      }\n    },\n    \"customerGets\": {\n      \"items\": {\n        \"collections\": {\n          \"add\": [\"gid://shopify/Collection/711838235\"]\n        }\n      },\n      \"value\": {\n        \"discountOnQuantity\": {\n          \"effect\": {\n            \"percentage\": 0.2\n          },\n          \"quantity\": \"2\"\n        }\n      }\n    },\n    \"customerSelection\": {\n      \"all\": true\n    },\n    \"endsAt\": \"2022-09-21T00:00:00Z\",\n    \"startsAt\": \"2022-06-21T00:00:00Z\",\n    \"title\": \"20% off up to two snowboards that are on sale for every three featured snowboards you buy.\",\n    \"usesPerOrderLimit\": 3\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "discountCodeBxgyCreate reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation discountCodeBxgyCreate($bxgyCodeDiscount: DiscountCodeBxgyInput!) {\n    discountCodeBxgyCreate(bxgyCodeDiscount: $bxgyCodeDiscount) {\n      codeDiscountNode {\n        codeDiscount {\n          ... on DiscountCodeBxgy {\n            title\n            codes(first: 10) {\n              nodes {\n                code\n              }\n            }\n            startsAt\n            endsAt\n            customerBuys {\n              items {\n                ...collectionsFragment\n              }\n              value {\n                ... on DiscountQuantity {\n                  quantity\n                }\n              }\n            }\n            customerGets {\n              appliesOnOneTimePurchase\n              appliesOnSubscription\n              value {\n                ... on DiscountOnQuantity {\n                  effect {\n                    ... on DiscountPercentage {\n                      percentage\n                    }\n                  }\n                  quantity {\n                    quantity\n                  }\n                }\n              }\n              items {\n                ...collectionsFragment\n              }\n            }\n            customerSelection {\n              ... on DiscountCustomerAll {\n                allCustomers\n              }\n            }\n            appliesOncePerCustomer\n            usesPerOrderLimit\n          }\n        }\n      }\n      userErrors {\n        field\n        code\n        message\n      }\n    }\n  }\n  \n  fragment collectionsFragment on DiscountCollections {\n    collections(first: 10) {\n      nodes {\n        id\n        title\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"bxgyCodeDiscount\": {\n    \"code\": \"SUMMERSALE\",\n    \"customerBuys\": {\n      \"items\": {\n        \"collections\": {\n          \"add\": [\"gid://shopify/Collection/1007901140\"]\n        }\n      },\n      \"value\": {\n        \"quantity\": \"3\"\n      }\n    },\n    \"customerGets\": {\n      \"items\": {\n        \"collections\": {\n          \"add\": [\"gid://shopify/Collection/711838235\"]\n        }\n      },\n      \"value\": {\n        \"discountOnQuantity\": {\n          \"effect\": {\n            \"percentage\": 0.2\n          },\n          \"quantity\": \"2\"\n        }\n      }\n    },\n    \"customerSelection\": {\n      \"all\": true\n    },\n    \"endsAt\": \"2022-09-21T00:00:00Z\",\n    \"startsAt\": \"2022-06-21T00:00:00Z\",\n    \"title\": \"20% off up to two snowboards that are on sale for every three featured snowboards you buy.\",\n    \"usesPerOrderLimit\": 3\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "discountCodeBxgyUpdate", "description": "Updates a\nbuy X get Y discount (BXGY)\nthat's applied on a cart and at checkout when a customer enters a code.\nNoteTo update discounts that are automatically applied on a cart and at checkout, use the\ndiscountAutomaticBxgyUpdate\nmutation.", "arguments": [{"name": "bxgyCodeDiscount", "type": "DiscountCodeBxgyInput!", "required": true, "description": "The input data used to update the BXGY code discount."}], "returns": [], "examples": [{"description": "Update an existing BXGY code discount's expiration date", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation discountCodeBxgyUpdate($id: ID!, $bxgyCodeDiscount: DiscountCodeBxgyInput!) {\n    discountCodeBxgyUpdate(id: $id, bxgyCodeDiscount: $bxgyCodeDiscount) {\n      codeDiscountNode {\n        codeDiscount {\n          ... on DiscountCodeBxgy {\n            title\n            codes(first: 10) {\n              nodes {\n                code\n              }\n            }\n            endsAt\n          }\n        }\n      }\n      userErrors {\n        field\n        code\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/DiscountCodeNode/732991387\",\n  \"bxgyCodeDiscount\": {\n    \"endsAt\": \"2022-12-25T00:00:00Z\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Update an existing BXGY discount code's product variants, quantities, and percentages", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation discountCodeBxgyUpdate($id: ID!, $bxgyCodeDiscount: DiscountCodeBxgyInput!) {\n    discountCodeBxgyUpdate(id: $id, bxgyCodeDiscount: $bxgyCodeDiscount) {\n      codeDiscountNode {\n        codeDiscount {\n          ... on DiscountCodeBxgy {\n            title\n            codes(first: 10) {\n              nodes {\n                code\n              }\n            }\n            customerBuys {\n              value {\n                ... on DiscountQuantity {\n                  quantity\n                }\n              }\n              items {\n                ... on DiscountProducts {\n                  productVariants(first: 5) {\n                    nodes {\n                      id\n                    }\n                  }\n                }\n              }\n            }\n            customerGets {\n              value {\n                ... on DiscountOnQuantity {\n                  effect {\n                    ... on DiscountPercentage {\n                      percentage\n                    }\n                  }\n                }\n              }\n              items {\n                ... on DiscountProducts {\n                  products(first: 5) {\n                    nodes {\n                      id\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n      userErrors {\n        field\n        code\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/DiscountCodeNode/101551934\",\n  \"bxgyCodeDiscount\": {\n    \"customerBuys\": {\n      \"items\": {\n        \"products\": {\n          \"productVariantsToAdd\": [\"gid://shopify/ProductVariant/138327650\"]\n        }\n      },\n      \"value\": {\n        \"quantity\": \"2\"\n      }\n    },\n    \"customerGets\": {\n      \"items\": {\n        \"products\": {\n          \"productsToAdd\": [\"gid://shopify/Product/121709582\"]\n        }\n      },\n      \"value\": {\n        \"discountOnQuantity\": {\n          \"effect\": {\n            \"percentage\": 0.5\n          }\n        }\n      }\n    }\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "discountCodeBxgyUpdate reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation discountCodeBxgyUpdate($id: ID!, $bxgyCodeDiscount: DiscountCodeBxgyInput!) {\n    discountCodeBxgyUpdate(id: $id, bxgyCodeDiscount: $bxgyCodeDiscount) {\n      codeDiscountNode {\n        codeDiscount {\n          ... on DiscountCodeBxgy {\n            title\n            codes(first: 10) {\n              nodes {\n                code\n              }\n            }\n            endsAt\n          }\n        }\n      }\n      userErrors {\n        field\n        code\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/DiscountCodeNode/732991387\",\n  \"bxgyCodeDiscount\": {\n    \"endsAt\": \"2022-12-25T00:00:00Z\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "discountCodeDeactivate", "description": "Deactivates a code discount.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID of the code discount to deactivate."}], "returns": [], "examples": [{"description": "Deactivate a code discount set to start in the future", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation discountCodeDeactivate($id: ID!) {\n    discountCodeDeactivate(id: $id) {\n      codeDiscountNode {\n        codeDiscount {\n          ... on DiscountCodeBasic {\n            title\n            status\n            startsAt\n            endsAt\n          }\n        }\n      }\n      userErrors {\n        field\n        code\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/DiscountCodeNode/206265824\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Deactivate an active code discount", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation discountCodeDeactivate($id: ID!) {\n    discountCodeDeactivate(id: $id) {\n      codeDiscountNode {\n        codeDiscount {\n          ... on DiscountCodeBasic {\n            title\n            status\n            startsAt\n            endsAt\n          }\n        }\n      }\n      userErrors {\n        field\n        code\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/DiscountCodeNode/206265824\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "discountCodeDeactivate reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation discountCodeDeactivate($id: ID!) {\n    discountCodeDeactivate(id: $id) {\n      codeDiscountNode {\n        codeDiscount {\n          ... on DiscountCodeBasic {\n            title\n            status\n            startsAt\n            endsAt\n          }\n        }\n      }\n      userErrors {\n        field\n        code\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/DiscountCodeNode/206265824\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "discountCodeDelete", "description": "Deletes a\ncode discount.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID of the code discount to delete."}], "returns": [], "examples": [{"description": "Delete an amount off discount", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation {\n    discountCodeDelete(id: \"gid://shopify/DiscountCodeNode/206265824\") {\n      deletedCodeDiscountId\n      userErrors {\n        field\n        code\n        message\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "discountCodeDelete reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation {\n    discountCodeDelete(id: \"gid://shopify/DiscountCodeNode/206265824\") {\n      deletedCodeDiscountId\n      userErrors {\n        field\n        code\n        message\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}]}, {"name": "discountCodeFreeShippingCreate", "description": "Creates an free shipping discount that's applied on a cart and at checkout when a customer enters a code.\nNoteTo create discounts that are automatically applied on a cart and at checkout, use the discountAutomaticFreeShippingCreate mutation.", "arguments": [{"name": "freeShippingCodeDiscount", "type": "DiscountCodeFreeShippingInput!", "required": true, "description": "The input data used to create the discount code."}], "returns": [], "examples": [{"description": "Create a discount code for free shipping", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation discountCodeFreeShippingCreate($freeShippingCodeDiscount: DiscountCodeFreeShippingInput!) {\n    discountCodeFreeShippingCreate(freeShippingCodeDiscount: $freeShippingCodeDiscount) {\n      codeDiscountNode {\n        id\n        codeDiscount {\n          ... on DiscountCodeFreeShipping {\n            title\n            startsAt\n            endsAt\n            maximumShippingPrice {\n              amount\n            }\n            customerSelection {\n              ... on DiscountCustomerAll {\n                allCustomers\n              }\n            }\n            destinationSelection {\n              ... on DiscountCountryAll {\n                allCountries\n              }\n            }\n            minimumRequirement {\n              ... on DiscountMinimumSubtotal {\n                greaterThanOrEqualToSubtotal {\n                  amount\n                }\n              }\n            }\n            codes(first: 2) {\n              nodes {\n                code\n              }\n            }\n          }\n        }\n      }\n      userErrors {\n        field\n        code\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"freeShippingCodeDiscount\": {\n    \"startsAt\": \"2022-06-22T21:12:07.000Z\",\n    \"appliesOncePerCustomer\": false,\n    \"title\": \"FreeShipping\",\n    \"code\": \"FreeShipping\",\n    \"minimumRequirement\": {\n      \"subtotal\": {\n        \"greaterThanOrEqualToSubtotal\": 20.0\n      }\n    },\n    \"customerSelection\": {\n      \"all\": true\n    },\n    \"destination\": {\n      \"all\": true\n    }\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "discountCodeFreeShippingCreate reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation discountCodeFreeShippingCreate($freeShippingCodeDiscount: DiscountCodeFreeShippingInput!) {\n    discountCodeFreeShippingCreate(freeShippingCodeDiscount: $freeShippingCodeDiscount) {\n      codeDiscountNode {\n        id\n        codeDiscount {\n          ... on DiscountCodeFreeShipping {\n            title\n            startsAt\n            endsAt\n            maximumShippingPrice {\n              amount\n            }\n            customerSelection {\n              ... on DiscountCustomerAll {\n                allCustomers\n              }\n            }\n            destinationSelection {\n              ... on DiscountCountryAll {\n                allCountries\n              }\n            }\n            minimumRequirement {\n              ... on DiscountMinimumSubtotal {\n                greaterThanOrEqualToSubtotal {\n                  amount\n                }\n              }\n            }\n            codes(first: 2) {\n              nodes {\n                code\n              }\n            }\n          }\n        }\n      }\n      userErrors {\n        field\n        code\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"freeShippingCodeDiscount\": {\n    \"startsAt\": \"2022-06-22T21:12:07.000Z\",\n    \"appliesOncePerCustomer\": false,\n    \"title\": \"FreeShipping\",\n    \"code\": \"FreeShipping\",\n    \"minimumRequirement\": {\n      \"subtotal\": {\n        \"greaterThanOrEqualToSubtotal\": 20.0\n      }\n    },\n    \"customerSelection\": {\n      \"all\": true\n    },\n    \"destination\": {\n      \"all\": true\n    }\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "discountCodeFreeShippingUpdate", "description": "Updates a free shipping discount that's applied on a cart and at checkout when a customer enters a code.\nNoteTo update a free shipping discount that's automatically applied on a cart and at checkout, use the discountAutomaticFreeShippingUpdate mutation.", "arguments": [{"name": "freeShippingCodeDiscount", "type": "DiscountCodeFreeShippingInput!", "required": true, "description": "The input data used to update the discount code."}], "returns": [], "examples": [{"description": "Update a free shipping discount code", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation discountCodeFreeShippingUpdate($freeShippingCodeDiscount: DiscountCodeFreeShippingInput!, $id: ID!) {\n    discountCodeFreeShippingUpdate(freeShippingCodeDiscount: $freeShippingCodeDiscount, id: $id) {\n      codeDiscountNode {\n        id\n        codeDiscount {\n          ... on DiscountCodeFreeShipping {\n            title\n            startsAt\n            endsAt\n            minimumRequirement {\n              ... on DiscountMinimumSubtotal {\n                greaterThanOrEqualToSubtotal {\n                  amount\n                  currencyCode\n                }\n              }\n            }\n            codes(first: 2) {\n              nodes {\n                code\n              }\n            }\n          }\n        }\n      }\n      userErrors {\n        field\n        code\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"freeShippingCodeDiscount\": {\n    \"code\": \"FRSHP25\",\n    \"minimumRequirement\": {\n      \"subtotal\": {\n        \"greaterThanOrEqualToSubtotal\": 25.0\n      }\n    },\n    \"startsAt\": \"2022-08-01\",\n    \"endsAt\": \"2022-08-08\",\n    \"title\": \"Free shipping for orders above $25\"\n  },\n  \"id\": \"gid://shopify/DiscountCodeFreeShipping/445378512\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "discountCodeFreeShippingUpdate reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation discountCodeFreeShippingUpdate($freeShippingCodeDiscount: DiscountCodeFreeShippingInput!, $id: ID!) {\n    discountCodeFreeShippingUpdate(freeShippingCodeDiscount: $freeShippingCodeDiscount, id: $id) {\n      codeDiscountNode {\n        id\n        codeDiscount {\n          ... on DiscountCodeFreeShipping {\n            title\n            startsAt\n            endsAt\n            minimumRequirement {\n              ... on DiscountMinimumSubtotal {\n                greaterThanOrEqualToSubtotal {\n                  amount\n                  currencyCode\n                }\n              }\n            }\n            codes(first: 2) {\n              nodes {\n                code\n              }\n            }\n          }\n        }\n      }\n      userErrors {\n        field\n        code\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"freeShippingCodeDiscount\": {\n    \"code\": \"FRSHP25\",\n    \"minimumRequirement\": {\n      \"subtotal\": {\n        \"greaterThanOrEqualToSubtotal\": 25.0\n      }\n    },\n    \"startsAt\": \"2022-08-01\",\n    \"endsAt\": \"2022-08-08\",\n    \"title\": \"Free shipping for orders above $25\"\n  },\n  \"id\": \"gid://shopify/DiscountCodeFreeShipping/445378512\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "discountCodeRedeemCodeBulkDelete", "description": "Asynchronously delete\ndiscount codes\nin bulk that customers can use to redeem a discount.", "arguments": [{"name": "discountId", "type": "ID!", "required": true, "description": "The ID of the\nDiscountCodeNode\nobject that the codes will be removed from. For example, gid://shopify/DiscountCodeNode/123.\nYou can use the\ncodeDiscountNodes query\nto retrieve the ID."}], "returns": [], "examples": [{"description": "Asynchronously delete discount redeem codes in bulk using a search filter", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation discountCodeRedeemCodeBulkDelete($discountId: ID!, $search: String) {\n    discountCodeRedeemCodeBulkDelete(discountId: $discountId, search: $search) {\n      job {\n        id\n      }\n      userErrors {\n        code\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"discountId\": \"gid://shopify/DiscountCodeNode/2429471\",\n  \"search\": \"times_used:0\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Deletes a discount code", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation DiscountRedeemCodeBulkDelete($discountId: ID!, $ids: [ID!]) {\n    discountCodeRedeemCodeBulkDelete(discountId: $discountId, ids: $ids) {\n      job {\n        id\n      }\n      userErrors {\n        code\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"discountId\": \"gid://shopify/DiscountCodeNode/2429471\",\n  \"ids\": [\"gid://shopify/DiscountRedeemCode/1\"]\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Using more than one targeting argument returns an error", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation discountCodeRedeemCodeBulkDelete($discountId: ID!, $search: String, $ids: [ID!]) {\n    discountCodeRedeemCodeBulkDelete(discountId: $discountId, search: $search, ids: $ids) {\n      job {\n        id\n      }\n      userErrors {\n        code\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"discountId\": \"gid://shopify/DiscountCodeNode/2429471\",\n  \"ids\": [\"gid://shopify/DiscountRedeemCode/1\"],\n  \"search\": \"discount_type:bxgy\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "discountCodeRedeemCodeBulkDelete reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation discountCodeRedeemCodeBulkDelete($discountId: ID!, $search: String) {\n    discountCodeRedeemCodeBulkDelete(discountId: $discountId, search: $search) {\n      job {\n        id\n      }\n      userErrors {\n        code\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"discountId\": \"gid://shopify/DiscountCodeNode/2429471\",\n  \"search\": \"times_used:0\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "discountRedeemCodeBulkAdd", "description": "Asynchronously add\ndiscount codes\nin bulk that customers can use to redeem a discount. You can use the discountRedeemCodeBulkAdd mutation\nto automate the distribution of discount codes through emails or other\nmarketing channels.", "arguments": [{"name": "codes", "type": "[DiscountRedeemCodeInput!]!", "required": true, "description": "The list of codes to associate with the\ncode discount.\nMaximum: 100 codes."}], "returns": [], "examples": [{"description": "Asynchronously add redeem codes to a code discount", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation discountRedeemCodeBulkAdd($discountId: ID!, $codes: [DiscountRedeemCodeInput!]!) {\n    discountRedeemCodeBulkAdd(discountId: $discountId, codes: $codes) {\n      bulkCreation {\n        id\n      }\n      userErrors {\n        code\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"discountId\": \"gid://shopify/DiscountCodeNode/2429471\",\n  \"codes\": [{\"code\"=>\"DISCOUNT_1\"}, {\"code\"=>\"DISCOUNT_2\"}, {\"code\"=>\"DISCOUNT_3\"}]\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Creates a discount code", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation DiscountRedeemCodeBulkAdd($discountId: ID!, $codes: [DiscountRedeemCodeInput!]!) {\n    discountRedeemCodeBulkAdd(discountId: $discountId, codes: $codes) {\n      bulkCreation {\n        id\n        createdAt\n        discountCode {\n          id\n        }\n        done\n        codesCount\n        importedCount\n        failedCount\n      }\n      userErrors {\n        code\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"discountId\": \"gid://shopify/DiscountCodeNode/2429471\",\n  \"codes\": [{\"code\"=>\"DISCOUNT_1\"}, {\"code\"=>\"DISCOUNT_2\"}, {\"code\"=>\"DISCOUNT_3\"}]\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Creates a discount code creation job", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation DiscountRedeemCodeBulkAdd($discountId: ID!, $codes: [DiscountRedeemCodeInput!]!) {\n    discountRedeemCodeBulkAdd(discountId: $discountId, codes: $codes) {\n      bulkCreation {\n        id\n        createdAt\n        discountCode {\n          id\n        }\n        done\n        codesCount\n        importedCount\n        failedCount\n      }\n      userErrors {\n        code\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"discountId\": \"gid://shopify/DiscountCodeNode/2429471\",\n  \"codes\": [{\"code\"=>\"DISCOUNT_1\"}, {\"code\"=>\"DISCOUNT_2\"}, {\"code\"=>\"DISCOUNT_3\"}]\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "discountRedeemCodeBulkAdd reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation discountRedeemCodeBulkAdd($discountId: ID!, $codes: [DiscountRedeemCodeInput!]!) {\n    discountRedeemCodeBulkAdd(discountId: $discountId, codes: $codes) {\n      bulkCreation {\n        id\n      }\n      userErrors {\n        code\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"discountId\": \"gid://shopify/DiscountCodeNode/2429471\",\n  \"codes\": [{\"code\"=>\"DISCOUNT_1\"}, {\"code\"=>\"DISCOUNT_2\"}, {\"code\"=>\"DISCOUNT_3\"}]\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "eventBridgeServerPixelUpdate", "description": "Updates the server pixel to connect to an EventBridge endpoint.\nRunning this mutation deletes any previous subscriptions for the server pixel.", "arguments": [{"name": "arn", "type": "ARN!", "required": true, "description": "The ARN for the EventBridge endpoint to which customer events are to be sent."}], "returns": [], "examples": []}, {"name": "marketingActivitiesDeleteAllExternal", "description": "Deletes all external marketing activities. Deletion is performed by a background job, as it may take a bit of time to complete if a large number of activities are to be deleted. Attempting to create or modify external activities before the job has completed will result in the create/update/upsert mutation returning an error.", "arguments": [{"name": "job", "type": "Job", "required": true, "description": "The asynchronous job that performs the deletion. The status of the job may be used to determine when it's safe again to create new activities."}], "returns": [], "examples": [{"description": "Enqueues a job to delete all external activities", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation marketingActivitiesDeleteAllExternal {\n    marketingActivitiesDeleteAllExternal {\n      job {\n        id\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "marketingActivitiesDeleteAllExternal reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation marketingActivitiesDeleteAllExternal {\n    marketingActivitiesDeleteAllExternal {\n      job {\n        id\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}]}, {"name": "marketingActivityCreate", "description": "Create new marketing activity.", "arguments": [{"name": "input", "type": "MarketingActivityCreateInput!", "required": true, "description": "The Input of marketing activity create."}], "returns": [], "examples": [{"description": "Create a DRAFT marketing activity for a specific marketing activity extension", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation marketingActivityCreate($marketingActivityTitle: String!, $marketingActivityExtensionId: ID!, $context: String!, $status: MarketingActivityStatus!) {\n    marketingActivityCreate(input: {marketingActivityTitle: $marketingActivityTitle, marketingActivityExtensionId: $marketingActivityExtensionId, status: $status, context: $context}) {\n      marketingActivity {\n        id\n        title\n        status\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"marketingActivityTitle\": \"Draft Marketing Activity\",\n  \"marketingActivityExtensionId\": \"gid://shopify/MarketingActivityExtension/666dcce8-6389-425f-bcf0-6c9469b6716f\",\n  \"context\": \"eyJtYXJrZXRpbmdfY2FtcGFpZ25faWQiOiI2NDYzMzc3NDMifQ==\",\n  \"status\": \"DRAFT\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "marketingActivityCreate reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation marketingActivityCreate($marketingActivityTitle: String!, $marketingActivityExtensionId: ID!, $context: String!, $status: MarketingActivityStatus!) {\n    marketingActivityCreate(input: {marketingActivityTitle: $marketingActivityTitle, marketingActivityExtensionId: $marketingActivityExtensionId, status: $status, context: $context}) {\n      marketingActivity {\n        id\n        title\n        status\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"marketingActivityTitle\": \"Draft Marketing Activity\",\n  \"marketingActivityExtensionId\": \"gid://shopify/MarketingActivityExtension/666dcce8-6389-425f-bcf0-6c9469b6716f\",\n  \"context\": \"eyJtYXJrZXRpbmdfY2FtcGFpZ25faWQiOiI2NDYzMzc3NDMifQ==\",\n  \"status\": \"DRAFT\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "marketingActivityCreateExternal", "description": "Creates a new external marketing activity.", "arguments": [{"name": "input", "type": "MarketingActivityCreateExternalInput!", "required": true, "description": "The input field for creating an external marketing activity."}], "returns": [], "examples": [{"description": "Create an external marketing activity with a status", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation marketingActivityCreateExternal($createInput: MarketingActivityCreateExternalInput!) {\n    marketingActivityCreateExternal(input: $createInput) {\n      marketingActivity {\n        id\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"createInput\": {\n    \"remoteId\": \"fake_id\",\n    \"title\": \"New Title\",\n    \"remoteUrl\": \"https://example.com\",\n    \"remotePreviewImageUrl\": \"https://example.com\",\n    \"status\": \"ACTIVE\",\n    \"utm\": {\n      \"source\": \"email\",\n      \"medium\": \"newsletter\",\n      \"campaign\": \"external-campaign\"\n    },\n    \"tactic\": \"NEWSLETTER\",\n    \"marketingChannelType\": \"EMAIL\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Creates a marketing event", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation MarketingCreateEvent($input: MarketingActivityCreateExternalInput!) {\n    marketingActivityCreateExternal(input: $input) {\n      marketingActivity {\n        id\n        marketingEvent {\n          id\n          type\n          startedAt\n          utmCampaign\n          utmMedium\n          utmSource\n          marketingChannelType\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": {\n    \"remoteId\": \"fake_id\",\n    \"title\": \"New Marketing Event\",\n    \"remoteUrl\": \"https://example.com\",\n    \"remotePreviewImageUrl\": \"https://example.com\",\n    \"utm\": {\n      \"source\": \"source\",\n      \"medium\": \"medium\",\n      \"campaign\": \"campaign\"\n    },\n    \"marketingChannelType\": \"SOCIAL\",\n    \"tactic\": \"POST\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "marketingActivityCreateExternal reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation marketingActivityCreateExternal($createInput: MarketingActivityCreateExternalInput!) {\n    marketingActivityCreateExternal(input: $createInput) {\n      marketingActivity {\n        id\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"createInput\": {\n    \"remoteId\": \"fake_id\",\n    \"title\": \"New Title\",\n    \"remoteUrl\": \"https://example.com\",\n    \"remotePreviewImageUrl\": \"https://example.com\",\n    \"status\": \"ACTIVE\",\n    \"utm\": {\n      \"source\": \"email\",\n      \"medium\": \"newsletter\",\n      \"campaign\": \"external-campaign\"\n    },\n    \"tactic\": \"NEWSLETTER\",\n    \"marketingChannelType\": \"EMAIL\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "marketingActivityDeleteExternal", "description": "Deletes an external marketing activity.", "arguments": [{"name": "marketingActivityId", "type": "ID", "required": true, "description": "The ID of the marketing activity. A marketing activity ID or remote ID must be provided."}], "returns": [], "examples": [{"description": "Delete an external marketing activity using the remote ID", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation marketingActivityUpdateExternal($remoteId: String!) {\n    marketingActivityDeleteExternal(remoteId: $remoteId) {\n      deletedMarketingActivityId\n    }\n  }\nQUERY\n\nvariables = {\n  \"remoteId\": \"abcdefg\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Deletes a marketing event", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation marketingActivityDeleteExternal($marketingActivityId: ID!) {\n    marketingActivityDeleteExternal(marketingActivityId: $marketingActivityId) {\n      deletedMarketingActivityId\n    }\n  }\nQUERY\n\nvariables = {\n  \"marketingActivityId\": \"gid://shopify/MarketingActivity/36187062\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "marketingActivityDeleteExternal reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation marketingActivityUpdateExternal($remoteId: String!) {\n    marketingActivityDeleteExternal(remoteId: $remoteId) {\n      deletedMarketingActivityId\n    }\n  }\nQUERY\n\nvariables = {\n  \"remoteId\": \"abcdefg\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "marketingActivityUpdate", "description": "Updates a marketing activity with the latest information.", "arguments": [{"name": "input", "type": "MarketingActivityUpdateInput!", "required": true, "description": "The Input of the marketing activity."}], "returns": [], "examples": [{"description": "Sets the budget for the marketing activity", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation marketingActivityUpdate($id: ID!, $budgetType: MarketingBudgetBudgetType!, $amount: Decimal!, $currencyCode: CurrencyCode!) {\n    marketingActivityUpdate(input: {id: $id, budget: {budgetType: $budgetType, total: {amount: $amount, currencyCode: $currencyCode}}}) {\n      marketingActivity {\n        budget {\n          budgetType\n          total {\n            amount\n            currencyCode\n          }\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/MarketingActivity/794355127\",\n  \"budgetType\": \"LIFETIME\",\n  \"amount\": 100,\n  \"currencyCode\": \"CAD\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Updates a marketing activity into ACTIVE state", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation marketingActivityUpdate($id: ID!, $status: MarketingActivityStatus!) {\n    marketingActivityUpdate(input: {id: $id, status: $status}) {\n      marketingActivity {\n        id\n        title\n        status\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/MarketingActivity/794355127\",\n  \"status\": \"ACTIVE\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "marketingActivityUpdate reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation marketingActivityUpdate($id: ID!, $budgetType: MarketingBudgetBudgetType!, $amount: Decimal!, $currencyCode: CurrencyCode!) {\n    marketingActivityUpdate(input: {id: $id, budget: {budgetType: $budgetType, total: {amount: $amount, currencyCode: $currencyCode}}}) {\n      marketingActivity {\n        budget {\n          budgetType\n          total {\n            amount\n            currencyCode\n          }\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/MarketingActivity/794355127\",\n  \"budgetType\": \"LIFETIME\",\n  \"amount\": 100,\n  \"currencyCode\": \"CAD\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "marketingActivityUpdateExternal", "description": "Update an external marketing activity.", "arguments": [{"name": "input", "type": "MarketingActivityUpdateExternalInput!", "required": true, "description": "The input field for updating an external marketing activity."}], "returns": [], "examples": [{"description": "Update an external marketing activity and its status", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation marketingActivityUpdateExternal($remoteId: String!, $updateInput: MarketingActivityUpdateExternalInput!) {\n    marketingActivityUpdateExternal(remoteId: $remoteId, input: $updateInput) {\n      marketingActivity {\n        id\n        title\n        marketingEvent {\n          manageUrl\n          previewUrl\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"remoteId\": \"abcdefg\",\n  \"updateInput\": {\n    \"title\": \"New Title\",\n    \"remoteUrl\": \"https://example.com\",\n    \"remotePreviewImageUrl\": \"https://example.com\",\n    \"status\": \"PAUSED\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Update an external marketing activity using the remote id", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation marketingActivityUpdateExternal($remoteId: String!, $updateInput: MarketingActivityUpdateExternalInput!) {\n    marketingActivityUpdateExternal(remoteId: $remoteId, input: $updateInput) {\n      marketingActivity {\n        id\n        title\n        marketingEvent {\n          manageUrl\n          previewUrl\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"remoteId\": \"abcdefg\",\n  \"updateInput\": {\n    \"title\": \"New Title\",\n    \"remoteUrl\": \"https://example.com\",\n    \"remotePreviewImageUrl\": \"https://example.com\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Update an external marketing activity using the utm parameters", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation marketingActivityUpdateExternal($utm: UTMInput!, $updateInput: MarketingActivityUpdateExternalInput!) {\n    marketingActivityUpdateExternal(utm: $utm, input: $updateInput) {\n      marketingActivity {\n        id\n        title\n        marketingEvent {\n          manageUrl\n          previewUrl\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"utm\": {\n    \"source\": \"email\",\n    \"medium\": \"newsletter\",\n    \"campaign\": \"external-event-campaign\"\n  },\n  \"updateInput\": {\n    \"title\": \"New Title\",\n    \"remoteUrl\": \"https://example.com\",\n    \"remotePreviewImageUrl\": \"https://example.com\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Updates a marketing event", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation marketingActivityUpdateExternal($marketingActivityId: ID!, $updateInput: MarketingActivityUpdateExternalInput!) {\n    marketingActivityUpdateExternal(marketingActivityId: $marketingActivityId, input: $updateInput) {\n      marketingActivity {\n        id\n        title\n        marketingEvent {\n          manageUrl\n          previewUrl\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"marketingActivityId\": \"gid://shopify/MarketingActivity/36187062\",\n  \"updateInput\": {\n    \"title\": \"New Title\",\n    \"remoteUrl\": \"https://example.com\",\n    \"remotePreviewImageUrl\": \"https://example.com\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "marketingActivityUpdateExternal reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation marketingActivityUpdateExternal($remoteId: String!, $updateInput: MarketingActivityUpdateExternalInput!) {\n    marketingActivityUpdateExternal(remoteId: $remoteId, input: $updateInput) {\n      marketingActivity {\n        id\n        title\n        marketingEvent {\n          manageUrl\n          previewUrl\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"remoteId\": \"abcdefg\",\n  \"updateInput\": {\n    \"title\": \"New Title\",\n    \"remoteUrl\": \"https://example.com\",\n    \"remotePreviewImageUrl\": \"https://example.com\",\n    \"status\": \"PAUSED\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "marketingActivityUpsertExternal", "description": "Creates a new external marketing activity or updates an existing one. When optional fields are absent or null, associated information will be removed from an existing marketing activity.", "arguments": [{"name": "input", "type": "MarketingActivityUpsertExternalInput!", "required": true, "description": "The input field for creating or updating an external marketing activity."}], "returns": [], "examples": [{"description": "Upsert (create or update) an external marketing activity", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation marketingActivityUpsertExternal($input: MarketingActivityUpsertExternalInput!) {\n    marketingActivityUpsertExternal(input: $input) {\n      marketingActivity {\n        id\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": {\n    \"remoteId\": \"A unique identifier\",\n    \"title\": \"New Title\",\n    \"remoteUrl\": \"https://example.com\",\n    \"status\": \"ACTIVE\",\n    \"utm\": {\n      \"source\": \"email\",\n      \"medium\": \"newsletter\",\n      \"campaign\": \"external-campaign\"\n    },\n    \"tactic\": \"NEWSLETTER\",\n    \"marketingChannelType\": \"EMAIL\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "marketingActivityUpsertExternal reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation marketingActivityUpsertExternal($input: MarketingActivityUpsertExternalInput!) {\n    marketingActivityUpsertExternal(input: $input) {\n      marketingActivity {\n        id\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": {\n    \"remoteId\": \"A unique identifier\",\n    \"title\": \"New Title\",\n    \"remoteUrl\": \"https://example.com\",\n    \"status\": \"ACTIVE\",\n    \"utm\": {\n      \"source\": \"email\",\n      \"medium\": \"newsletter\",\n      \"campaign\": \"external-campaign\"\n    },\n    \"tactic\": \"NEWSLETTER\",\n    \"marketingChannelType\": \"EMAIL\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "marketingEngagementCreate", "description": "Creates a new marketing engagement for a marketing activity or a marketing channel.", "arguments": [{"name": "channelHandle", "type": "String", "required": true, "description": "The unique string identifier of the channel to which the engagement metrics are being provided. This should be set when and only when providing channel-level engagements. This should be nil when providing activity-level engagements. For the correct handle for your channel, contact your partner manager."}], "returns": [], "examples": [{"description": "Create activity-level engagement for a marketing activity ID", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation M($marketingEngagement: MarketingEngagementInput!, $marketingActivityId: ID, $channelHandle: String, $remoteId: String) {\n    marketingEngagementCreate(marketingEngagement: $marketingEngagement, marketingActivityId: $marketingActivityId, channelHandle: $channelHandle, remoteId: $remoteId) {\n      marketingEngagement {\n        occurredOn\n        utcOffset\n        isCumulative\n        adSpend {\n          amount\n          currencyCode\n        }\n        clicksCount\n        impressionsCount\n        commentsCount\n        favoritesCount\n        unsubscribesCount\n        complaintsCount\n        failsCount\n        sendsCount\n        uniqueViewsCount\n        uniqueClicksCount\n        sharesCount\n        viewsCount\n        sessionsCount\n        sales {\n          amount\n          currencyCode\n        }\n        orders\n        firstTimeCustomers\n        returningCustomers\n        marketingActivity {\n          id\n        }\n        channelHandle\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"marketingEngagement\": {\n    \"occurredOn\": \"2018-06-29\",\n    \"utcOffset\": \"-07:00\",\n    \"isCumulative\": false,\n    \"adSpend\": {\n      \"currencyCode\": \"CAD\",\n      \"amount\": \"19.90\"\n    },\n    \"impressionsCount\": 100,\n    \"clicksCount\": 40,\n    \"commentsCount\": 1,\n    \"unsubscribesCount\": 1,\n    \"complaintsCount\": 1,\n    \"failsCount\": 1,\n    \"sendsCount\": 1,\n    \"uniqueViewsCount\": 1,\n    \"uniqueClicksCount\": 1,\n    \"sharesCount\": 5,\n    \"viewsCount\": 10,\n    \"favoritesCount\": 0,\n    \"sessionsCount\": 40,\n    \"sales\": {\n      \"amount\": \"304.50\",\n      \"currencyCode\": \"CAD\"\n    },\n    \"orders\": 8,\n    \"firstTimeCustomers\": 5.0,\n    \"returningCustomers\": 3.0\n  },\n  \"marketingActivityId\": \"gid://shopify/MarketingActivity/794355127\",\n  \"channelHandle\": nil,\n  \"remoteId\": nil\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Create activity-level engagement with a remote ID", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation M($marketingEngagement: MarketingEngagementInput!, $marketingActivityId: ID, $channelHandle: String, $remoteId: String) {\n    marketingEngagementCreate(marketingEngagement: $marketingEngagement, marketingActivityId: $marketingActivityId, channelHandle: $channelHandle, remoteId: $remoteId) {\n      marketingEngagement {\n        occurredOn\n        utcOffset\n        isCumulative\n        adSpend {\n          amount\n          currencyCode\n        }\n        clicksCount\n        impressionsCount\n        commentsCount\n        favoritesCount\n        unsubscribesCount\n        complaintsCount\n        failsCount\n        sendsCount\n        uniqueViewsCount\n        uniqueClicksCount\n        sharesCount\n        viewsCount\n        sessionsCount\n        sales {\n          amount\n          currencyCode\n        }\n        orders\n        firstTimeCustomers\n        returningCustomers\n        marketingActivity {\n          id\n        }\n        channelHandle\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"marketingEngagement\": {\n    \"occurredOn\": \"2018-06-29\",\n    \"utcOffset\": \"-07:00\",\n    \"isCumulative\": false,\n    \"adSpend\": {\n      \"currencyCode\": \"CAD\",\n      \"amount\": \"19.90\"\n    },\n    \"impressionsCount\": 100,\n    \"clicksCount\": 40,\n    \"commentsCount\": 1,\n    \"unsubscribesCount\": 1,\n    \"complaintsCount\": 1,\n    \"failsCount\": 1,\n    \"sendsCount\": 1,\n    \"uniqueViewsCount\": 1,\n    \"uniqueClicksCount\": 1,\n    \"sharesCount\": 5,\n    \"viewsCount\": 10,\n    \"favoritesCount\": 0,\n    \"sessionsCount\": 40,\n    \"sales\": {\n      \"amount\": \"304.50\",\n      \"currencyCode\": \"CAD\"\n    },\n    \"orders\": 8,\n    \"firstTimeCustomers\": 5.0,\n    \"returningCustomers\": 3.0\n  },\n  \"marketingActivityId\": nil,\n  \"channelHandle\": nil,\n  \"remoteId\": \"1234:5678\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Create channel-level engagement for a channel handle", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation M($marketingEngagement: MarketingEngagementInput!, $marketingActivityId: ID, $channelHandle: String, $remoteId: String) {\n    marketingEngagementCreate(marketingEngagement: $marketingEngagement, marketingActivityId: $marketingActivityId, channelHandle: $channelHandle, remoteId: $remoteId) {\n      marketingEngagement {\n        occurredOn\n        utcOffset\n        isCumulative\n        adSpend {\n          amount\n          currencyCode\n        }\n        clicksCount\n        impressionsCount\n        commentsCount\n        favoritesCount\n        unsubscribesCount\n        complaintsCount\n        failsCount\n        sendsCount\n        uniqueViewsCount\n        uniqueClicksCount\n        sharesCount\n        viewsCount\n        sessionsCount\n        sales {\n          amount\n          currencyCode\n        }\n        orders\n        firstTimeCustomers\n        returningCustomers\n        marketingActivity {\n          id\n        }\n        channelHandle\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"marketingEngagement\": {\n    \"occurredOn\": \"2018-06-29\",\n    \"utcOffset\": \"-07:00\",\n    \"isCumulative\": false,\n    \"adSpend\": {\n      \"currencyCode\": \"CAD\",\n      \"amount\": \"19.90\"\n    },\n    \"impressionsCount\": 100,\n    \"clicksCount\": 40,\n    \"commentsCount\": 1,\n    \"unsubscribesCount\": 1,\n    \"complaintsCount\": 1,\n    \"failsCount\": 1,\n    \"sendsCount\": 1,\n    \"uniqueViewsCount\": 1,\n    \"uniqueClicksCount\": 1,\n    \"sharesCount\": 5,\n    \"viewsCount\": 10,\n    \"favoritesCount\": 0,\n    \"sessionsCount\": 40,\n    \"sales\": {\n      \"amount\": \"304.50\",\n      \"currencyCode\": \"CAD\"\n    },\n    \"orders\": 8,\n    \"firstTimeCustomers\": 5.0,\n    \"returningCustomers\": 3.0\n  },\n  \"marketingActivityId\": nil,\n  \"channelHandle\": \"my-channel-handle\",\n  \"remoteId\": nil\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Creates marketing engagements on a marketing event", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation M($marketingEngagement: MarketingEngagementInput!, $marketingActivityId: ID!) {\n    marketingEngagementCreate(marketingEngagement: $marketingEngagement, marketingActivityId: $marketingActivityId) {\n      marketingEngagement {\n        occurredOn\n        clicksCount\n        commentsCount\n        favoritesCount\n        impressionsCount\n        unsubscribesCount\n        complaintsCount\n        failsCount\n        sendsCount\n        uniqueViewsCount\n        uniqueClicksCount\n        isCumulative\n        utcOffset\n        adSpend {\n          amount\n          currencyCode\n        }\n        marketingActivity {\n          id\n        }\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"marketingEngagement\": {\n    \"occurredOn\": \"2018-06-29\",\n    \"adSpend\": {\n      \"currencyCode\": \"CAD\",\n      \"amount\": \"19.90\"\n    },\n    \"utcOffset\": \"-07:00\",\n    \"impressionsCount\": 100,\n    \"clicksCount\": 40,\n    \"commentsCount\": 1,\n    \"unsubscribesCount\": 1,\n    \"complaintsCount\": 1,\n    \"failsCount\": 1,\n    \"sendsCount\": 1,\n    \"uniqueViewsCount\": 1,\n    \"uniqueClicksCount\": 1,\n    \"isCumulative\": true,\n    \"favoritesCount\": 0\n  },\n  \"marketingActivityId\": \"gid://shopify/MarketingActivity/794355127\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "marketingEngagementCreate reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation M($marketingEngagement: MarketingEngagementInput!, $marketingActivityId: ID, $channelHandle: String, $remoteId: String) {\n    marketingEngagementCreate(marketingEngagement: $marketingEngagement, marketingActivityId: $marketingActivityId, channelHandle: $channelHandle, remoteId: $remoteId) {\n      marketingEngagement {\n        occurredOn\n        utcOffset\n        isCumulative\n        adSpend {\n          amount\n          currencyCode\n        }\n        clicksCount\n        impressionsCount\n        commentsCount\n        favoritesCount\n        unsubscribesCount\n        complaintsCount\n        failsCount\n        sendsCount\n        uniqueViewsCount\n        uniqueClicksCount\n        sharesCount\n        viewsCount\n        sessionsCount\n        sales {\n          amount\n          currencyCode\n        }\n        orders\n        firstTimeCustomers\n        returningCustomers\n        marketingActivity {\n          id\n        }\n        channelHandle\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"marketingEngagement\": {\n    \"occurredOn\": \"2018-06-29\",\n    \"utcOffset\": \"-07:00\",\n    \"isCumulative\": false,\n    \"adSpend\": {\n      \"currencyCode\": \"CAD\",\n      \"amount\": \"19.90\"\n    },\n    \"impressionsCount\": 100,\n    \"clicksCount\": 40,\n    \"commentsCount\": 1,\n    \"unsubscribesCount\": 1,\n    \"complaintsCount\": 1,\n    \"failsCount\": 1,\n    \"sendsCount\": 1,\n    \"uniqueViewsCount\": 1,\n    \"uniqueClicksCount\": 1,\n    \"sharesCount\": 5,\n    \"viewsCount\": 10,\n    \"favoritesCount\": 0,\n    \"sessionsCount\": 40,\n    \"sales\": {\n      \"amount\": \"304.50\",\n      \"currencyCode\": \"CAD\"\n    },\n    \"orders\": 8,\n    \"firstTimeCustomers\": 5.0,\n    \"returningCustomers\": 3.0\n  },\n  \"marketingActivityId\": \"gid://shopify/MarketingActivity/794355127\",\n  \"channelHandle\": nil,\n  \"remoteId\": nil\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "marketingEngagementsDelete", "description": "Marks channel-level engagement data such that it no longer appears in reports.\n          Activity-level data cannot be deleted directly, instead the MarketingActivity itself should be deleted to\n          hide it from reports.", "arguments": [{"name": "channelHandle", "type": "String", "required": true, "description": "The handle of the channel for which engagement data should be deleted."}], "returns": [], "examples": [{"description": "Mark all channel level engagement data associated to the api client for deletion", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation M($channelHandle: String, $deleteEngagementsForAllChannels: Boolean) {\n    marketingEngagementsDelete(channelHandle: $channelHandle, deleteEngagementsForAllChannels: $deleteEngagementsForAllChannels) {\n      result\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "Mark engagement data associated to a specific channel for deletion", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation M($channelHandle: String, $deleteEngagementsForAllChannels: Boolean) {\n    marketingEngagementsDelete(channelHandle: $channelHandle, deleteEngagementsForAllChannels: $deleteEngagementsForAllChannels) {\n      result\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "marketingEngagementsDelete reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation M($channelHandle: String, $deleteEngagementsForAllChannels: Boolean) {\n    marketingEngagementsDelete(channelHandle: $channelHandle, deleteEngagementsForAllChannels: $deleteEngagementsForAllChannels) {\n      result\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}]}, {"name": "pubSubServerPixelUpdate", "description": "Updates the server pixel to connect to a Google PubSub endpoint.\nRunning this mutation deletes any previous subscriptions for the server pixel.", "arguments": [{"name": "pubSubProject", "type": "String!", "required": true, "description": "The Google PubSub project ID."}], "returns": [], "examples": []}, {"name": "serverPixelCreate", "description": "Creates a new unconfigured server pixel. A single server pixel can exist for an app and shop combination. If you call this mutation when a server pixel already exists, then an error will return.", "arguments": [{"name": "serverPixel", "type": "ServerPixel", "required": true, "description": "The new server pixel."}], "returns": [], "examples": []}, {"name": "serverPixelDelete", "description": "Deletes the Server Pixel associated with the current app & shop.", "arguments": [{"name": "deletedServerPixelId", "type": "ID", "required": true, "description": "The ID of the server pixel that was deleted, if one was deleted."}], "returns": [], "examples": []}, {"name": "webPixelCreate", "description": "Activate a web pixel extension\nby creating a web pixel record on the store where you installed your app.\nWhen you run the webPixelCreate mutation, Shopify validates it\nagainst the settings definition in shopify.extension.toml. If the settings input field doesn't match\nthe schema that you defined, then the mutation fails. Learn how to\ndefine web pixel settings.", "arguments": [{"name": "webPixel", "type": "WebPixelInput!", "required": true, "description": "The web pixel settings in JSON format."}], "returns": [], "examples": [{"description": "Create a web pixel", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation webPixelCreate($webPixel: WebPixelInput!) {\n    webPixelCreate(webPixel: $webPixel) {\n      userErrors {\n        field\n        message\n        code\n      }\n      webPixel {\n        id\n        settings\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"webPixel\": {\n    \"settings\": {\n      \"trackingId\": \"GA-TRACKING-ID-123\"\n    }\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Creating a web pixel with invalid settings returns an error", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation webPixelCreate($webPixel: WebPixelInput!) {\n    webPixelCreate(webPixel: $webPixel) {\n      userErrors {\n        field\n        message\n        code\n      }\n      webPixel {\n        id\n        settings\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"webPixel\": {\n    \"settings\": {\n\n    }\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "webPixelCreate reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation webPixelCreate($webPixel: WebPixelInput!) {\n    webPixelCreate(webPixel: $webPixel) {\n      userErrors {\n        field\n        message\n        code\n      }\n      webPixel {\n        id\n        settings\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"webPixel\": {\n    \"settings\": {\n      \"trackingId\": \"GA-TRACKING-ID-123\"\n    }\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "webPixelDelete", "description": "Deletes the web pixel shop settings.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID of the web pixel to delete."}], "returns": [], "examples": []}, {"name": "webPixelUpdate", "description": "Activate a web pixel extension\nby updating a web pixel record on the store where you installed your app.\nWhen you run the webPixelUpdate mutation, Shopify validates it\nagainst the settings definition in shopify.extension.toml. If the settings input field doesn't match\nthe schema that you defined, then the mutation fails. Learn how to\ndefine web pixel settings.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID of the web pixel to update."}], "returns": [], "examples": []}], "objects": [{"name": "Abandonment", "description": "A browse, cart, or checkout that was abandoned by a customer.", "fields_and_connections": [{"name": "abandonedCheckoutPayload", "type": "AbandonedCheckout", "description": "The abandonment payload for the abandoned checkout.", "not_nullable": true}], "examples": []}, {"name": "AllDiscountItems", "description": "Targets all items the cart for a specified discount.", "fields_and_connections": [{"name": "allItems", "type": "Boolean!", "description": "Whether all items are eligible for the discount. This value always returns true.", "not_nullable": true}], "examples": []}, {"name": "AppDiscountType", "description": "The details about the app extension that's providing the\ndiscount type.\nThis information includes the app extension's name and\nclient ID,\nApp Bridge configuration,\ndiscount class,\nfunction ID,\nand other metadata about the discount type, including the discount type's name and description.", "fields_and_connections": [{"name": "app", "type": "App!", "description": "The name of the app extension that's providing the\ndiscount type.", "not_nullable": true}], "examples": []}, {"name": "CustomerJourney", "description": "Represents a customer's visiting activities on a shop's online store.", "fields_and_connections": [{"name": "customerOrderIndex", "type": "Int!", "description": "The position of the current order within the customer's order history.", "not_nullable": true}], "examples": []}, {"name": "CustomerJourneySummary", "description": "Represents a customer's visiting activities on a shop's online store.", "fields_and_connections": [{"name": "customerOrderIndex", "type": "Int", "description": "The position of the current order within the customer's order history. Test orders aren't included.", "not_nullable": true}], "examples": []}, {"name": "CustomerVisit", "description": "Represents a customer's session visiting a shop's online store, including information about the marketing activity attributed to starting the session.", "fields_and_connections": [{"name": "id", "type": "ID!", "description": "A globally-unique ID.", "not_nullable": true}], "examples": []}, {"name": "CustomerVisitProductInfo", "description": "This type returns the information about the product and product variant from a customer visit.", "fields_and_connections": [{"name": "product", "type": "Product", "description": "The product information. If null, then the product was deleted from the store.", "not_nullable": true}], "examples": []}, {"name": "DiscountAmount", "description": "The fixed amount value of a discount, and whether the amount is applied to each entitled item or spread evenly across the entitled items.", "fields_and_connections": [{"name": "amount", "type": "MoneyV2!", "description": "The value of the discount.", "not_nullable": true}], "examples": []}, {"name": "DiscountAutomaticApp", "description": "The DiscountAutomaticApp object stores information about automatic discounts\nthat are managed by an app using\nShopify Functions.\nUse DiscountAutomaticAppwhen you need advanced, custom, or\ndynamic discount capabilities that aren't supported by\nShopify's native discount types.\nLearn more about creating\ncustom discount functionality.\nNoteThe DiscountCodeApp\nobject has similar functionality to the DiscountAutomaticApp object, with the exception that DiscountCodeApp\nstores information about discount codes that are managed by an app using Shopify Functions.", "fields_and_connections": [{"name": "appDiscountType", "type": "AppDiscountType!", "description": "The details about the app extension that's providing the\ndiscount type.\nThis information includes the app extension's name and\nclient ID,\nApp Bridge configuration,\ndiscount class,\nfunction ID,\nand other metadata about the discount type, including the discount type's name and description.", "not_nullable": true}], "examples": []}, {"name": "DiscountAutomaticBasic", "description": "The DiscountAutomaticBasic object lets you manage\namount off discounts\nthat are automatically applied on a cart and at checkout. Amount off discounts give customers a\nfixed value or a percentage off the products in an order, but don't apply to shipping costs.\nThe DiscountAutomaticBasic object stores information about automatic amount off discounts that apply to\nspecific products and variants,\ncollections,\nor all items in a cart.\nLearn more about working with Shopify's discount model,\nincluding limitations and considerations.\nNoteThe DiscountCodeBasic\nobject has similar functionality to the DiscountAutomaticBasic object, but customers need to enter a code to\nreceive a discount.", "fields_and_connections": [{"name": "asyncUsageCount", "type": "Int!", "description": "The number of times that the discount has been used.\nFor example, if a \"Buy 3, Get 1 Free\" t-shirt discount\nis automatically applied in 200 transactions, then the\ndiscount has been used 200 times.\nThis value is updated asynchronously. As a result,\nit might be lower than the actual usage count until the\nasynchronous process is completed.", "not_nullable": true}], "examples": []}, {"name": "DiscountAutomaticBxgy", "description": "The DiscountAutomaticBxgy object lets you manage\nbuy X get Y discounts (BXGY)\nthat are automatically applied on a cart and at checkout. BXGY discounts incentivize customers by offering\nthem additional items at a discounted price or for free when they purchase a specified quantity of items.\nThe DiscountAutomaticBxgy object stores information about automatic BXGY discounts that apply to\nspecific products and variants,\ncollections,\nor all items in a cart.\nLearn more about working with Shopify's discount model,\nincluding limitations and considerations.\nNoteThe DiscountCodeBxgy\nobject has similar functionality to the DiscountAutomaticBxgy object, but customers need to enter a code to\nreceive a discount.", "fields_and_connections": [{"name": "asyncUsageCount", "type": "Int!", "description": "The number of times that the discount has been used.\nFor example, if a \"Buy 3, Get 1 Free\" t-shirt discount\nis automatically applied in 200 transactions, then the\ndiscount has been used 200 times.\nThis value is updated asynchronously. As a result,\nit might be lower than the actual usage count until the\nasynchronous process is completed.", "not_nullable": true}], "examples": []}, {"name": "DiscountAutomaticFreeShipping", "description": "The DiscountAutomaticFreeShipping object lets you manage\nfree shipping discounts\nthat are automatically applied on a cart and at checkout. Free shipping discounts are promotional deals that\nmerchants offer to customers to waive shipping costs and encourage online purchases.\nThe DiscountAutomaticFreeShipping object stores information about automatic free shipping discounts that apply to\nspecific products and variants,\ncollections,\nor all items in a cart.\nLearn more about working with Shopify's discount model,\nincluding limitations and considerations.\nNoteThe DiscountCodeFreeShipping\nobject has similar functionality to the DiscountAutomaticFreeShipping object, but customers need to enter a code to\nreceive a discount.", "fields_and_connections": [{"name": "appliesOnOneTimePurchase", "type": "Boolean!", "description": "Whether the discount applies on one-time purchases.\nA one-time purchase is a transaction where you pay a\nsingle time for a product, without any ongoing\ncommitments or recurring charges.", "not_nullable": true}], "examples": []}, {"name": "DiscountAutomaticNode", "description": "The DiscountAutomaticNode object enables you to manage automatic discounts that are applied when an order meets specific criteria. You can create amount off, free shipping, or buy X get Y automatic discounts. For example, you can offer customers a free shipping discount that applies when conditions are met. Or you can offer customers a buy X get Y discount that's automatically applied when customers spend a specified amount of money, or a specified quantity of products.\nLearn more about working with Shopify's discount model,\nincluding related queries, mutations, limitations, and considerations.", "fields_and_connections": [{"name": "automaticDiscount", "type": "DiscountAutomatic!", "description": "A discount that's applied automatically when an order meets specific criteria. Learn more about automatic discounts.", "not_nullable": true}], "examples": []}, {"name": "DiscountCodeApp", "description": "The DiscountCodeApp object stores information about code discounts\nthat are managed by an app using\nShopify Functions.\nUse DiscountCodeApp when you need advanced, custom, or\ndynamic discount capabilities that aren't supported by\nShopify's native discount types.\nLearn more about creating\ncustom discount functionality.\nNoteThe DiscountAutomaticApp\nobject has similar functionality to the DiscountCodeApp object, with the exception that DiscountAutomaticApp\nstores information about automatic discounts that are managed by an app using Shopify Functions.", "fields_and_connections": [{"name": "appDiscountType", "type": "AppDiscountType!", "description": "The details about the app extension that's providing the\ndiscount type.\nThis information includes the app extension's name and\nclient ID,\nApp Bridge configuration,\ndiscount class,\nfunction ID,\nand other metadata about the discount type, including the discount type's name and description.", "not_nullable": true}], "examples": []}, {"name": "DiscountCodeBasic", "description": "The DiscountCodeBasic object lets you manage\namount off discounts\nthat are applied on a cart and at checkout when a customer enters a code. Amount off discounts give customers a\nfixed value or a percentage off the products in an order, but don't apply to shipping costs.\nThe DiscountCodeBasic object stores information about amount off code discounts that apply to\nspecific products and variants,\ncollections,\nor all items in a cart.\nLearn more about working with Shopify's discount model,\nincluding limitations and considerations.\nNoteThe DiscountAutomaticBasic\nobject has similar functionality to the DiscountCodeBasic object, but discounts are automatically applied,\nwithout the need for customers to enter a code.", "fields_and_connections": [{"name": "appliesOncePerCustomer", "type": "Boolean!", "description": "Whether a customer can only use the discount once.", "not_nullable": true}], "examples": []}, {"name": "DiscountCodeBxgy", "description": "The DiscountCodeBxgy object lets you manage\nbuy X get Y discounts (BXGY)\nthat are applied on a cart and at checkout when a customer enters a code. BXGY discounts incentivize customers\nby offering them additional items at a discounted price or for free when they purchase a specified quantity\nof items.\nThe DiscountCodeBxgy object stores information about BXGY code discounts that apply to\nspecific products and variants,\ncollections,\nor all items in a cart.\nLearn more about working with Shopify's discount model,\nincluding limitations and considerations.\nNoteThe DiscountAutomaticBxgy\nobject has similar functionality to the DiscountCodeBxgy object, but discounts are automatically applied,\nwithout the need for customers to enter a code.", "fields_and_connections": [{"name": "appliesOncePerCustomer", "type": "Boolean!", "description": "Whether a customer can only use the discount once.", "not_nullable": true}], "examples": []}, {"name": "DiscountCodeFreeShipping", "description": "The DiscountCodeFreeShipping object lets you manage\nfree shipping discounts\nthat are applied on a cart and at checkout when a customer enters a code. Free shipping discounts are\npromotional deals that merchants offer to customers to waive shipping costs and encourage online purchases.\nThe DiscountCodeFreeShipping object stores information about free shipping code discounts that apply to\nspecific products and variants,\ncollections,\nor all items in a cart.\nLearn more about working with Shopify's discount model,\nincluding limitations and considerations.\nNoteThe\nDiscountAutomaticFreeShipping\nobject has similar functionality to the DiscountCodeFreeShipping object, but discounts are automatically applied,\nwithout the need for customers to enter a code.", "fields_and_connections": [{"name": "appliesOncePerCustomer", "type": "Boolean!", "description": "Whether a customer can only use the discount once.", "not_nullable": true}], "examples": []}, {"name": "DiscountCodeNode", "description": "The DiscountCodeNode object enables you to manage code discounts that are applied when customers enter a code at checkout. For example, you can offer discounts where customers have to enter a code to redeem an amount off discount on products, variants, or collections in a store. Or, you can offer discounts where customers have to enter a code to get free shipping. Merchants can create and share discount codes individually with customers.\nLearn more about working with Shopify's discount model,\nincluding related queries, mutations, limitations, and considerations.", "fields_and_connections": [{"name": "codeDiscount", "type": "DiscountCode!", "description": "The underlying code discount object.", "not_nullable": true}], "examples": []}, {"name": "DiscountCollections", "description": "A list of collections that the discount can have as a prerequisite or a list of collections to which the discount can be applied.", "fields_and_connections": [{"name": "collections", "type": "CollectionConnection!", "description": "The list of collections that the discount can have as a prerequisite or the list of collections to which the discount can be applied.", "not_nullable": true}], "examples": []}, {"name": "DiscountCombinesWith", "description": "The discount classes\nthat you can use in combination with\nShopify discount types.", "fields_and_connections": [{"name": "orderDiscounts", "type": "Boolean!", "description": "Whether the discount combines with the\norder discount\nclass.", "not_nullable": true}], "examples": []}, {"name": "DiscountCountries", "description": "The shipping destinations where the discount can be applied.", "fields_and_connections": [{"name": "countries", "type": "[CountryCode!]!", "description": "The codes for the countries where the discount can be applied.", "not_nullable": true}], "examples": []}, {"name": "DiscountCountryAll", "description": "The DiscountCountryAll object lets you target all countries as shipping destination for discount eligibility.", "fields_and_connections": [{"name": "allCountries", "type": "Boolean!", "description": "Whether the discount can be applied to all countries as shipping destination. This value is always true.", "not_nullable": true}], "examples": []}, {"name": "DiscountCustomerAll", "description": "The DiscountCustomerAll object lets you target all customers for discount eligibility.", "fields_and_connections": [{"name": "allCustomers", "type": "Boolean!", "description": "Whether the discount can be applied by all customers. This value is always true.", "not_nullable": true}], "examples": []}, {"name": "DiscountCustomerBuys", "description": "The prerequisite items and prerequisite value that a customer must have on the order for the discount to be applicable.", "fields_and_connections": [{"name": "isOneTimePurchase", "type": "Boolean!", "description": "If the discount is applicable when a customer buys a one-time purchase.", "not_nullable": true}], "examples": []}, {"name": "DiscountCustomerGets", "description": "The items in the order that qualify for the discount, their quantities, and the total value of the discount.", "fields_and_connections": [{"name": "appliesOnOneTimePurchase", "type": "Boolean!", "description": "Whether the discount applies on regular one-time-purchase items.", "not_nullable": true}], "examples": []}, {"name": "DiscountCustomers", "description": "A list of individual customers eligible for the discount.", "fields_and_connections": [{"name": "customers", "type": "[Customer!]!", "description": "The list of individual customers eligible for the discount.", "not_nullable": true}], "examples": []}, {"name": "DiscountCustomerSegments", "description": "A list of customer segments who are eligible for the discount.", "fields_and_connections": [{"name": "segments", "type": "[Segment!]!", "description": "The list of customer segments who are eligible for the discount.", "not_nullable": true}], "examples": []}, {"name": "DiscountMinimumQuantity", "description": "The minimum quantity of items required for the discount to apply.", "fields_and_connections": [{"name": "greaterThanOrEqualToQuantity", "type": "UnsignedInt64!", "description": "The minimum quantity of items that's required for the discount to be applied.", "not_nullable": true}], "examples": []}, {"name": "DiscountMinimumSubtotal", "description": "The minimum subtotal required for the discount to apply.", "fields_and_connections": [{"name": "greaterThanOrEqualToSubtotal", "type": "MoneyV2!", "description": "The minimum subtotal that's required for the discount to be applied.", "not_nullable": true}], "examples": []}, {"name": "DiscountNode", "description": "The DiscountNode object enables you to manage discounts, which are applied at checkout or on a cart.\nDiscounts are a way for merchants to promote sales and special offers, or as customer loyalty rewards. Discounts can apply to orders, products, or shipping, and can be either automatic or code-based. For example, you can offer customers a buy X get Y discount that's automatically applied when purchases meet specific criteria. Or, you can offer discounts where customers have to enter a code to redeem an amount off discount on products, variants, or collections in a store.\nLearn more about working with Shopify's discount model,\nincluding related mutations, limitations, and considerations.", "fields_and_connections": [{"name": "discount", "type": "Discount!", "description": "A discount that's applied at checkout or on cart.\nDiscounts can be automatic or code-based.", "not_nullable": true}], "examples": []}, {"name": "DiscountOnQuantity", "description": "The quantity of items discounted, the discount value, and how the discount will be applied.", "fields_and_connections": [{"name": "effect", "type": "DiscountEffect!", "description": "The discount's effect on qualifying items.", "not_nullable": true}], "examples": []}, {"name": "DiscountPercentage", "description": "A discount effect that gives customers a percentage off of specified items on their order.", "fields_and_connections": [{"name": "percentage", "type": "Float!", "description": "The percentage value of the discount.", "not_nullable": true}], "examples": []}, {"name": "DiscountProducts", "description": "A list of products and product variants that the discount can have as a prerequisite or a list of products and product variants to which the discount can be applied.", "fields_and_connections": [{"name": "products", "type": "ProductConnection!", "description": "The list of products that the discount can have as a prerequisite or the list of products to which the discount can be applied.", "not_nullable": true}], "examples": []}, {"name": "DiscountPurchaseAmount", "description": "A purchase amount in the context of a discount. This object can be used to define the minimum purchase amount required for a discount to be applicable.", "fields_and_connections": [{"name": "amount", "type": "Decimal!", "description": "The purchase amount in decimal format.", "not_nullable": true}], "examples": []}, {"name": "DiscountQuantity", "description": "A quantity of items in the context of a discount. This object can be used to define the minimum quantity of items required to apply a discount. Alternatively, it can be used to define the quantity of items that can be discounted.", "fields_and_connections": [{"name": "quantity", "type": "UnsignedInt64!", "description": "The quantity of items.", "not_nullable": true}], "examples": []}, {"name": "DiscountRedeemCode", "description": "A code that a customer can use at checkout to receive a discount. For example, a customer can use the redeem code 'SUMMER20' at checkout to receive a 20% discount on their entire order.", "fields_and_connections": [{"name": "asyncUsageCount", "type": "Int!", "description": "The number of times that the discount redeem code has been used. This value is updated asynchronously and can be different than the actual usage count.", "not_nullable": true}], "examples": []}, {"name": "DiscountRedeemCodeBulkCreation", "description": "The properties and status of a bulk discount redeem code creation operation.", "fields_and_connections": [{"name": "codes", "type": "DiscountRedeemCodeBulkCreationCodeConnection!", "description": "The result of each code creation operation associated with the bulk creation operation including any errors that might have occurred during the operation.", "not_nullable": true}], "examples": []}, {"name": "DiscountRedeemCodeBulkCreationCode", "description": "A result of a discount redeem code creation operation created by a bulk creation.", "fields_and_connections": [{"name": "code", "type": "String!", "description": "The code to use in the discount redeem code creation operation.", "not_nullable": true}], "examples": []}, {"name": "DiscountShareableUrl", "description": "A shareable URL for a discount code.", "fields_and_connections": [{"name": "targetItemImage", "type": "Image", "description": "The image URL of the item (product or collection) to which the discount applies.", "not_nullable": true}], "examples": []}, {"name": "MarketingActivity", "description": "The marketing activity resource represents marketing that a\n        merchant created through an app.", "fields_and_connections": [{"name": "activityListUrl", "type": "URL", "description": "The URL of the marketing activity listing page in the marketing section.", "not_nullable": true}], "examples": []}, {"name": "MarketingActivityExtensionAppErrors", "description": "Represents errors returned from apps when using the marketing activity extension.", "fields_and_connections": [{"name": "code", "type": "MarketingActivityExtensionAppErrorCode!", "description": "The app error type.", "not_nullable": true}], "examples": []}, {"name": "MarketingBudget", "description": "This type combines budget amount and its marketing budget type.", "fields_and_connections": [{"name": "budgetType", "type": "MarketingBudgetBudgetType!", "description": "The budget type for a marketing activity.", "not_nullable": true}], "examples": []}, {"name": "MarketingEngagement", "description": "Marketing engagement represents customer activity taken on a marketing activity or a marketing channel.", "fields_and_connections": [{"name": "adSpend", "type": "MoneyV2", "description": "The total ad spend for the marketing content. Recurring weekly, monthly, or yearly spend needs to be divided into daily amounts.", "not_nullable": true}], "examples": []}, {"name": "MarketingEvent", "description": "Represents actions that market a merchant's store or products.", "fields_and_connections": [{"name": "app", "type": "App!", "description": "The app that the marketing event is attributed to.", "not_nullable": true}], "examples": []}, {"name": "PriceRule", "description": "Price rules are a set of conditions, including entitlements and prerequisites, that must be met in order for a discount code to apply.\nWe recommend using the types and queries detailed at Getting started with discounts instead. These will replace the GraphQL PriceRule object and REST Admin PriceRule and DiscountCode resources.", "fields_and_connections": [{"name": "allocationLimit", "type": "Int", "description": "The maximum number of times that the price rule can be allocated onto an order.", "not_nullable": true}], "examples": []}, {"name": "PriceRuleCustomerSelection", "description": "A selection of customers for whom the price rule applies.", "fields_and_connections": [{"name": "customers", "type": "CustomerConnection!", "description": "List of customers to whom the price rule applies.", "not_nullable": true}], "examples": []}, {"name": "PriceRuleDiscountCode", "description": "A discount code of a price rule.", "fields_and_connections": [{"name": "app", "type": "App", "description": "The application that created the discount code.", "not_nullable": true}], "examples": []}, {"name": "PriceRuleEntitlementToPrerequisiteQuantityRatio", "description": "Quantity of prerequisite items required for the price rule to be applicable, compared to quantity of entitled items.", "fields_and_connections": [{"name": "entitlementQuantity", "type": "Int!", "description": "The quantity of entitled items in the ratio.", "not_nullable": true}], "examples": []}, {"name": "PriceRuleFixedAmountValue", "description": "The value of a fixed amount price rule.", "fields_and_connections": [{"name": "amount", "type": "Money!", "description": "The monetary value of the price rule.", "not_nullable": true}], "examples": []}, {"name": "PriceRuleItemEntitlements", "description": "The items to which this price rule applies. This may be multiple products, product variants, collections or combinations of the aforementioned.", "fields_and_connections": [{"name": "collections", "type": "CollectionConnection!", "description": "The collections to which the price rule applies.", "not_nullable": true}], "examples": []}, {"name": "PriceRuleLineItemPrerequisites", "description": "Single or multiple line item products, product variants or collections required for the price rule to be applicable, can also be provided in combination.", "fields_and_connections": [{"name": "collections", "type": "CollectionConnection!", "description": "The collections required for the price rule to be applicable.", "not_nullable": true}], "examples": []}, {"name": "PriceRuleMoneyRange", "description": "A money range within which the price rule is applicable.", "fields_and_connections": [{"name": "greaterThan", "type": "Money", "description": "The lower bound of the money range.", "not_nullable": false}], "examples": []}, {"name": "PriceRulePercentValue", "description": "The value of a percent price rule.", "fields_and_connections": [{"name": "percentage", "type": "Float!", "description": "The percent value of the price rule.", "not_nullable": true}], "examples": []}, {"name": "PriceRulePrerequisiteToEntitlementQuantityRatio", "description": "Quantity of prerequisite items required for the price rule to be applicable, compared to quantity of entitled items.", "fields_and_connections": [{"name": "entitlementQuantity", "type": "Int!", "description": "The quantity of entitled items in the ratio.", "not_nullable": true}], "examples": []}, {"name": "PriceRuleQuantityRange", "description": "A quantity range within which the price rule is applicable.", "fields_and_connections": [{"name": "greaterThan", "type": "Int", "description": "The lower bound of the quantity range.", "not_nullable": false}], "examples": []}, {"name": "PriceRuleShareableUrl", "description": "Shareable URL for the discount code associated with the price rule.", "fields_and_connections": [{"name": "targetItemImage", "type": "Image", "description": "The image URL of the item (product or collection) to which the discount applies.", "not_nullable": true}], "examples": []}, {"name": "PriceRuleShippingLineEntitlements", "description": "The shipping lines to which the price rule applies to.", "fields_and_connections": [{"name": "countryCodes", "type": "[CountryCode!]!", "description": "The codes for the countries to which the price rule applies to.", "not_nullable": true}], "examples": []}, {"name": "PriceRuleValidityPeriod", "description": "A time period during which a price rule is applicable.", "fields_and_connections": [{"name": "end", "type": "DateTime", "description": "The time after which the price rule becomes invalid.", "not_nullable": true}], "examples": []}, {"name": "PricingPercentageValue", "description": "One type of value given to a customer when a discount is applied to an order.\nThe application of a discount with this value gives the customer the specified percentage off a specified item.", "fields_and_connections": [{"name": "percentage", "type": "Float!", "description": "The percentage value of the object. This is a number between -100 (free) and 0 (no discount).", "not_nullable": true}], "examples": []}, {"name": "ServerPixel", "description": "A server pixel stores configuration for streaming customer interactions to an EventBridge or PubSub endpoint.", "fields_and_connections": [{"name": "id", "type": "ID!", "description": "A globally-unique ID.", "not_nullable": true}], "examples": []}, {"name": "UTMParameters", "description": "Represents a set of UTM parameters.", "fields_and_connections": [{"name": "campaign", "type": "String", "description": "The name of a marketing campaign.", "not_nullable": false}], "examples": []}, {"name": "WebPixel", "description": "The WebPixel object enables you to manage JavaScript code snippets\nthat run on an online store and collect\nbehavioral data\nfor marketing campaign optimization and analytics.\nLearn how to create a\nweb pixel extension\nto subscribe your app to events that are emitted by Shopify.", "fields_and_connections": [{"name": "id", "type": "ID!", "description": "A globally-unique ID.", "not_nullable": true}], "examples": []}]}, {"name": "Events", "queries": [{"name": "deletionEvents", "description": "The paginated list of deletion events.", "arguments": [{"name": "after", "type": "String", "required": true, "description": "The elements that come after the specified cursor."}], "returns": [], "examples": []}, {"name": "event", "description": "Get a single event by its id.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID of the event."}], "returns": [], "examples": [{"description": "Retrieve the first basic-event", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    event(id: \"gid://shopify/BasicEvent/422690323\") {\n      id\n      message\n      ... on BasicEvent {\n        action\n        subjectType\n        subject {\n          __typename\n        }\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "Retrieves a single event", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query EventShow($id: ID!) {\n    event(id: $id) {\n      id\n      action\n      createdAt\n      message\n      ... on BasicEvent {\n        arguments\n        subjectId\n        subjectType\n        additionalContent\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/BasicEvent/267851118\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "events", "description": "The paginated list of events associated with the store.", "arguments": [{"name": "after", "type": "String", "required": true, "description": "The elements that come after the specified cursor."}], "returns": [], "examples": [{"description": "Retrieve the first 10 destroy events for products", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    events(query: \"action:'destroy' AND subject_type:'PRODUCT'\", first: 10) {\n      edges {\n        node {\n          id\n          message\n          ... on BasicEvent {\n            action\n            subjectType\n            subject {\n              __typename\n            }\n          }\n        }\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "Retrieve the first 10 events after a given time", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    events(query: \"created_at:>=2024-01-01\", first: 10) {\n      edges {\n        node {\n          id\n          message\n          createdAt\n        }\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "Retrieve the first 10 events for products including comment events", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    events(query: \"comments:1 AND subject_type:'PRODUCT'\", first: 10) {\n      edges {\n        node {\n          id\n          message\n          ... on CommentEvent {\n            rawMessage\n          }\n          ... on BasicEvent {\n            action\n            subjectType\n            subject {\n              __typename\n            }\n          }\n        }\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "Retrieves a list of events", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query EventList {\n    events(first: 5) {\n      nodes {\n        id\n        action\n        createdAt\n        message\n        ... on BasicEvent {\n          arguments\n          subjectId\n          subjectType\n          additionalContent\n        }\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}]}, {"name": "eventsCount", "description": "Count of events. Limited to a maximum of 10000.", "arguments": [{"name": "query", "type": "String", "required": true, "description": "A filter made up of terms, connectives, modifiers, and comparators.\nYou can apply one or more filters to a query. Learn more about Shopify API search syntax."}], "returns": [], "examples": [{"description": "Retrieve the amount of events after a given time", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    eventsCount(query: \"created_at:>=2024-01-01\") {\n      count\n      precision\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "Retrieve the amount of product events, including comment events", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    eventsCount(query: \"comments:1 AND subject_type:'PRODUCT'\") {\n      count\n      precision\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "Retrieves a count of events", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query EventCount {\n    eventsCount {\n      count\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}]}], "mutations": [{"name": "flowTriggerReceive", "description": "Triggers any workflows that begin with the trigger specified in the request body. To learn more, refer to Create Shopify Flow triggers.", "arguments": [{"name": "handle", "type": "String", "required": true, "description": "The handle of the trigger."}], "returns": [], "examples": [{"description": "Trigger workflows defined in Shopify Flow", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation flowTriggerReceive($handle: String, $payload: JSON) {\n    flowTriggerReceive(handle: $handle, payload: $payload) {\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"handle\": \"handle\",\n  \"payload\": {\n    \"key\": \"Some value\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "flowTriggerReceive reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation flowTriggerReceive($handle: String, $payload: JSON) {\n    flowTriggerReceive(handle: $handle, payload: $payload) {\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"handle\": \"handle\",\n  \"payload\": {\n    \"key\": \"Some value\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}], "objects": [{"name": "BasicEvent", "description": "Basic events chronicle resource activities such as the creation of an article, the fulfillment of an order, or\nthe addition of a product.\nGeneral events\nActionDescriptioncreateThe item was created.destroyThe item was destroyed.publishedThe item was published.unpublishedThe item was unpublished.updateThe item was updated.Order events\nOrder events can be divided into the following categories:\n\nAuthorization: Includes whether the authorization succeeded, failed, or is pending.\nCapture: Includes whether the capture succeeded, failed, or is pending.\nEmail: Includes confirmation or cancellation of the order, as well as shipping.\nFulfillment: Includes whether the fulfillment succeeded, failed, or is pending. Also includes cancellation, restocking, and fulfillment updates.\nOrder: Includess the placement, confirmation, closing, re-opening, and cancellation of the order.\nRefund: Includes whether the refund succeeded, failed, or is pending.\nSale: Includes whether the sale succeeded, failed, or is pending.\nVoid: Includes whether the void succeeded, failed, or is pending.\n\nActionMessageDescriptionauthorization_failureThe customer, unsuccessfully, tried to authorize: {money_amount}.Authorization failed. The funds cannot be captured.authorization_pendingAuthorization for {money_amount} is pending.Authorization pending.authorization_successThe customer successfully authorized us to capture: {money_amount}.Authorization was successful and the funds are available for capture.cancelledOrder was cancelled by {shop_staff_name}.The order was cancelled.capture_failureWe failed to capture: {money_amount}.The capture failed. The funds cannot be transferred to the shop.capture_pendingCapture for {money_amount} is pending.The capture is in process. The funds are not yet available to the shop.capture_successWe successfully captured: {money_amount}The capture was successful and the funds are now available to the shop.closedOrder was closed.The order was closed.confirmedReceived a new order: {order_number} by {customer_name}.The order was confirmed.fulfillment_cancelledWe cancelled {number_of_line_items} from being fulfilled by the third party fulfillment service.Fulfillment for one or more of the line_items failed.fulfillment_pendingWe submitted {number_of_line_items} to the third party service.One or more of the line_items has been assigned to a third party service for fulfillment.fulfillment_successWe successfully fulfilled line_items.Fulfillment was successful for one or more line_items.mail_sent{message_type} email was sent to the customer.An email was sent to the customer.placedOrder was placed.An order was placed by the customer.re_openedOrder was re-opened.An order was re-opened.refund_failureWe failed to refund {money_amount}.The refund failed. The funds are still with the shop.refund_pendingRefund of {money_amount} is still pending.The refund is in process. The funds are still with shop.refund_successWe successfully refunded {money_amount}.The refund was successful. The funds have been transferred to the customer.restock_line_itemsWe restocked {number_of_line_items}.One or more of the order's line items have been restocked.sale_failureThe customer failed to pay {money_amount}.The sale failed. The funds are not available to the shop.sale_pendingThe {money_amount} is pending.The sale is in process. The funds are not yet available to the shop.sale_successWe successfully captured {money_amount}.The sale was successful. The funds are now with the shop.update{order_number} was updated.The order was updated.void_failureWe failed to void the authorization.Voiding the authorization failed. The authorization is still valid.void_pendingAuthorization void is pending.Voiding the authorization is in process. The authorization is still valid.void_successWe successfully voided the authorization.Voiding the authorization was successful. The authorization is no longer valid.", "fields_and_connections": [{"name": "action", "type": "String!", "description": "The action that occured.", "not_nullable": true}], "examples": []}, {"name": "CommentEvent", "description": "Comment events are generated by staff members of a shop.\nThey are created when a staff member adds a comment to the timeline of an order, draft order, customer, or transfer.", "fields_and_connections": [{"name": "action", "type": "String!", "description": "The action that occured.", "not_nullable": true}], "examples": []}, {"name": "CommentEventAttachment", "description": "A file attachment associated to a comment event.", "fields_and_connections": [{"name": "fileExtension", "type": "String", "description": "The file extension of the comment event attachment, indicating the file format.", "not_nullable": true}], "examples": []}, {"name": "DeletionEvent", "description": "Deletion events chronicle the destruction of resources (e.g. products and collections).\nOnce deleted, the deletion event is the only trace of the original's existence,\nas the resource itself has been removed and can no longer be accessed.", "fields_and_connections": [{"name": "occurredAt", "type": "DateTime!", "description": "The date and time when the deletion event for the related resource was generated.", "not_nullable": true}], "examples": []}, {"name": "ResourceAlert", "description": "An alert message that appears in the Shopify admin about a problem with a store resource, with 1 or more actions to take. For example, you could use an alert to indicate that you're not charging taxes on some product variants.\nThey can optionally have a specific icon and be dismissed by merchants.", "fields_and_connections": [{"name": "actions", "type": "[ResourceAlertAction!]!", "description": "Buttons in the alert that link to related information.\nFor example, Edit variants.", "not_nullable": true}], "examples": []}, {"name": "ResourceAlertAction", "description": "An action associated to a resource alert, such as editing variants.", "fields_and_connections": [{"name": "primary", "type": "Boolean!", "description": "Whether the action appears as a button or as a link.", "not_nullable": true}], "examples": []}, {"name": "ShopAlert", "description": "An alert message that appears in the Shopify admin about a problem with a store setting, with an action to take. For example, you could show an alert to ask the merchant to enter their billing information to activate Shopify Plus.", "fields_and_connections": [{"name": "action", "type": "ShopAlertAction!", "description": "The text for the button in the alert that links to related information. For example, Add credit card.", "not_nullable": true}], "examples": []}, {"name": "ShopAlertAction", "description": "An action associated to a shop alert, such as adding a credit card.", "fields_and_connections": [{"name": "title", "type": "String!", "description": "The text for the button in the alert. For example, Add credit card.", "not_nullable": true}], "examples": []}]}, {"name": "Inventory", "queries": [{"name": "inventoryItem", "description": "Returns an\nInventoryItem\nobject by ID.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID of the InventoryItem to return."}], "returns": [], "examples": [{"description": "Get details about a specified inventory item", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query inventoryItem {\n    inventoryItem(id: \"gid://shopify/InventoryItem/30322695\") {\n      id\n      tracked\n      sku\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "Get inventory item levels and product/variant information", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query inventoryItemToProductVariant {\n    inventoryItem(id: \"gid://shopify/InventoryItem/30322695\") {\n      id\n      inventoryLevels(first: 1) {\n        edges {\n          node {\n            id\n            location {\n              id\n              name\n            }\n            quantities(names: [\"available\", \"committed\", \"incoming\", \"on_hand\", \"reserved\"]) {\n              name\n              quantity\n            }\n          }\n        }\n      }\n      variant {\n        id\n        title\n        product {\n          id\n          title\n        }\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}]}, {"name": "inventoryItems", "description": "Returns a list of inventory items.", "arguments": [{"name": "after", "type": "String", "required": true, "description": "The elements that come after the specified cursor."}], "returns": [], "examples": [{"description": "Get details about the first 2 inventory items", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query inventoryItems {\n    inventoryItems(first: 2) {\n      edges {\n        node {\n          id\n          tracked\n          sku\n        }\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "Get details about the first inventory item matching an SKU", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query inventoryItems {\n    inventoryItems(first: 1, query: \"sku:'element-151'\") {\n      edges {\n        node {\n          id\n          tracked\n          sku\n        }\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "Get details about the first two inventory item with created_at or matching sku", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query inventoryItems {\n    inventoryItems(first: 2) {\n      edges {\n        node {\n          id\n          tracked\n          sku\n        }\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "Retrieves a detailed list for inventory items by IDs", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query InventoryItemList {\n    inventoryItems(first: 20, query: \"id:>=30322695\") {\n      nodes {\n        id\n        createdAt\n        countryCodeOfOrigin\n        harmonizedSystemCode\n        provinceCodeOfOrigin\n        requiresShipping\n        sku\n        tracked\n        unitCost {\n          currencyCode\n          amount\n        }\n        updatedAt\n        countryHarmonizedSystemCodes(first: 250) {\n          nodes {\n            harmonizedSystemCode\n            countryCode\n          }\n        }\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}]}, {"name": "inventoryLevel", "description": "Returns an\nInventoryLevel\nobject by ID.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID of the InventoryLevel to return."}], "returns": [], "examples": [{"description": "Overview", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    inventoryLevel(id: \"gid://shopify/InventoryLevel/523463154?inventory_item_id=30322695\") {\n      id\n      quantities(names: [\"available\", \"incoming\", \"committed\", \"damaged\", \"on_hand\", \"quality_control\", \"reserved\", \"safety_stock\"]) {\n        name\n        quantity\n      }\n      item {\n        id\n        sku\n      }\n      location {\n        id\n        name\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}]}, {"name": "inventoryProperties", "description": "General inventory properties for the shop.", "arguments": [{"name": "InventoryProperties", "type": "InventoryProperties!", "required": true, "description": "General inventory properties for the shop."}], "returns": [], "examples": [{"description": "Get inventory properties for a shop", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query inventoryProperties {\n    inventoryProperties {\n      quantityNames {\n        belongsTo\n        comprises\n        displayName\n        isInUse\n        name\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "Get inventory quantity names to be used with inventory queries and mutations", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query inventoryProperties {\n    inventoryProperties {\n      quantityNames {\n        name\n        isInUse\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}]}], "mutations": [{"name": "inventoryActivate", "description": "Activate an inventory item at a location.", "arguments": [{"name": "available", "type": "Int", "required": true, "description": "The initial available quantity of the inventory item being activated at the location."}], "returns": [], "examples": [{"description": "Activate an inventory item at a location with an initial available quantity", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation ActivateInventoryItem($inventoryItemId: ID!, $locationId: ID!, $available: Int) {\n    inventoryActivate(inventoryItemId: $inventoryItemId, locationId: $locationId, available: $available) {\n      inventoryLevel {\n        id\n        quantities(names: [\"available\"]) {\n          name\n          quantity\n        }\n        item {\n          id\n        }\n        location {\n          id\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"inventoryItemId\": \"gid://shopify/InventoryItem/43729076\",\n  \"locationId\": \"gid://shopify/Location/346779380\",\n  \"available\": 42\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Activate an inventory item at a location without setting an available quantity", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation ActivateInventoryItem($inventoryItemId: ID!, $locationId: ID!) {\n    inventoryActivate(inventoryItemId: $inventoryItemId, locationId: $locationId) {\n      inventoryLevel {\n        id\n        quantities(names: [\"available\"]) {\n          name\n          quantity\n        }\n        item {\n          id\n        }\n        location {\n          id\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"inventoryItemId\": \"gid://shopify/InventoryItem/43729076\",\n  \"locationId\": \"gid://shopify/Location/346779380\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Connects an inventory item to a location", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation InventoryActivate($inventoryItemId: ID!, $locationId: ID!) {\n    inventoryActivate(inventoryItemId: $inventoryItemId, locationId: $locationId) {\n      inventoryLevel {\n        id\n        canDeactivate\n        createdAt\n        item {\n          id\n        }\n        location {\n          id\n        }\n        quantities(names: [\"available\"]) {\n          name\n          quantity\n        }\n        updatedAt\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"inventoryItemId\": \"gid://shopify/InventoryItem/43729076\",\n  \"locationId\": \"gid://shopify/Location/346779380\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "inventoryActivate reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation ActivateInventoryItem($inventoryItemId: ID!, $locationId: ID!, $available: Int) {\n    inventoryActivate(inventoryItemId: $inventoryItemId, locationId: $locationId, available: $available) {\n      inventoryLevel {\n        id\n        quantities(names: [\"available\"]) {\n          name\n          quantity\n        }\n        item {\n          id\n        }\n        location {\n          id\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"inventoryItemId\": \"gid://shopify/InventoryItem/43729076\",\n  \"locationId\": \"gid://shopify/Location/346779380\",\n  \"available\": 42\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "inventoryAdjustQuantities", "description": "Apply changes to inventory quantities.", "arguments": [{"name": "input", "type": "InventoryAdjustQuantitiesInput!", "required": true, "description": "The information required to adjust inventory quantities."}], "returns": [], "examples": [{"description": "Adjusts the inventory level of an inventory item at a location", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation inventoryAdjustQuantities($input: InventoryAdjustQuantitiesInput!) {\n    inventoryAdjustQuantities(input: $input) {\n      userErrors {\n        field\n        message\n      }\n      inventoryAdjustmentGroup {\n        createdAt\n        reason\n        referenceDocumentUri\n        changes {\n          name\n          delta\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": {\n    \"reason\": \"correction\",\n    \"name\": \"available\",\n    \"referenceDocumentUri\": \"logistics://some.warehouse/take/2023-01/13\",\n    \"changes\": [{\"delta\"=>-4, \"inventoryItemId\"=>\"gid://shopify/InventoryItem/30322695\", \"locationId\"=>\"gid://shopify/Location/124656943\"}]\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "inventoryAdjustQuantities reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation inventoryAdjustQuantities($input: InventoryAdjustQuantitiesInput!) {\n    inventoryAdjustQuantities(input: $input) {\n      userErrors {\n        field\n        message\n      }\n      inventoryAdjustmentGroup {\n        createdAt\n        reason\n        referenceDocumentUri\n        changes {\n          name\n          delta\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": {\n    \"reason\": \"correction\",\n    \"name\": \"available\",\n    \"referenceDocumentUri\": \"logistics://some.warehouse/take/2023-01/13\",\n    \"changes\": [{\"delta\"=>-4, \"inventoryItemId\"=>\"gid://shopify/InventoryItem/30322695\", \"locationId\"=>\"gid://shopify/Location/124656943\"}]\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "inventoryBulkToggleActivation", "description": "Modify the activation status of an inventory item at locations. Activating an inventory item at a particular location allows that location to stock that inventory item. Deactivating an inventory item at a location removes the inventory item's quantities and turns off the inventory item from that location.", "arguments": [{"name": "inventoryItemId", "type": "ID!", "required": true, "description": "The ID of the inventory item to modify the activation status locations for."}], "returns": [], "examples": [{"description": "Activate an inventory item at a location", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation inventoryBulkToggleActivation($inventoryItemId: ID!, $inventoryItemUpdates: [InventoryBulkToggleActivationInput!]!) {\n    inventoryBulkToggleActivation(inventoryItemId: $inventoryItemId, inventoryItemUpdates: $inventoryItemUpdates) {\n      inventoryItem {\n        id\n      }\n      inventoryLevels {\n        id\n        quantities(names: [\"available\"]) {\n          name\n          quantity\n        }\n        location {\n          id\n        }\n      }\n      userErrors {\n        field\n        message\n        code\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"inventoryItemId\": \"gid://shopify/InventoryItem/30322695\",\n  \"inventoryItemUpdates\": [{\"locationId\"=>\"gid://shopify/Location/648019273\", \"activate\"=>true}]\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Deactivate an inventory item at a location", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation inventoryBulkToggleActivation($inventoryItemId: ID!, $inventoryItemUpdates: [InventoryBulkToggleActivationInput!]!) {\n    inventoryBulkToggleActivation(inventoryItemId: $inventoryItemId, inventoryItemUpdates: $inventoryItemUpdates) {\n      inventoryItem {\n        id\n      }\n      inventoryLevels {\n        id\n      }\n      userErrors {\n        field\n        message\n        code\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"inventoryItemId\": \"gid://shopify/InventoryItem/30322695\",\n  \"inventoryItemUpdates\": [{\"locationId\"=>\"gid://shopify/Location/124656943\", \"activate\"=>false}]\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Toggle an inventory item's activation at two locations", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation inventoryBulkToggleActivation($inventoryItemId: ID!, $inventoryItemUpdates: [InventoryBulkToggleActivationInput!]!) {\n    inventoryBulkToggleActivation(inventoryItemId: $inventoryItemId, inventoryItemUpdates: $inventoryItemUpdates) {\n      inventoryItem {\n        id\n      }\n      inventoryLevels {\n        id\n        quantities(names: [\"available\"]) {\n          name\n          quantity\n        }\n        location {\n          id\n        }\n      }\n      userErrors {\n        field\n        message\n        code\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"inventoryItemId\": \"gid://shopify/InventoryItem/30322695\",\n  \"inventoryItemUpdates\": [{\"locationId\"=>\"gid://shopify/Location/124656943\", \"activate\"=>false}, {\"locationId\"=>\"gid://shopify/Location/648019273\", \"activate\"=>true}]\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "inventoryBulkToggleActivation reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation inventoryBulkToggleActivation($inventoryItemId: ID!, $inventoryItemUpdates: [InventoryBulkToggleActivationInput!]!) {\n    inventoryBulkToggleActivation(inventoryItemId: $inventoryItemId, inventoryItemUpdates: $inventoryItemUpdates) {\n      inventoryItem {\n        id\n      }\n      inventoryLevels {\n        id\n        quantities(names: [\"available\"]) {\n          name\n          quantity\n        }\n        location {\n          id\n        }\n      }\n      userErrors {\n        field\n        message\n        code\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"inventoryItemId\": \"gid://shopify/InventoryItem/30322695\",\n  \"inventoryItemUpdates\": [{\"locationId\"=>\"gid://shopify/Location/648019273\", \"activate\"=>true}]\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "inventoryDeactivate", "description": "Removes an inventory item's quantities from a location, and turns off inventory at the location.", "arguments": [{"name": "inventoryLevelId", "type": "ID!", "required": true, "description": "The ID of the inventory level to deactivate."}], "returns": [], "examples": [{"description": "Deletes an inventory level from a location", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation inventoryDeactivate($inventoryLevelId: ID!) {\n    inventoryDeactivate(inventoryLevelId: $inventoryLevelId) {\n      userErrors {\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"inventoryLevelId\": \"gid://shopify/InventoryLevel/820859520?inventory_item_id=826867926\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "inventoryDeactivate reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation inventoryDeactivate($inventoryLevelId: ID!) {\n    inventoryDeactivate(inventoryLevelId: $inventoryLevelId) {\n      userErrors {\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"inventoryLevelId\": \"gid://shopify/InventoryLevel/820859520?inventory_item_id=826867926\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "inventoryItemUpdate", "description": "Updates an inventory item.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID of the inventory item to update."}], "returns": [], "examples": [{"description": "Updates an existing inventory item", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation inventoryItemUpdate($id: ID!, $input: InventoryItemInput!) {\n    inventoryItemUpdate(id: $id, input: $input) {\n      inventoryItem {\n        id\n        unitCost {\n          amount\n        }\n        tracked\n        countryCodeOfOrigin\n        provinceCodeOfOrigin\n        harmonizedSystemCode\n        countryHarmonizedSystemCodes(first: 1) {\n          edges {\n            node {\n              harmonizedSystemCode\n              countryCode\n            }\n          }\n        }\n      }\n      userErrors {\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/InventoryItem/43729076\",\n  \"input\": {\n    \"cost\": 145.89,\n    \"tracked\": false,\n    \"countryCodeOfOrigin\": \"US\",\n    \"provinceCodeOfOrigin\": \"OR\",\n    \"harmonizedSystemCode\": \"621710\",\n    \"countryHarmonizedSystemCodes\": [{\"harmonizedSystemCode\"=>\"6217109510\", \"countryCode\"=>\"CA\"}]\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "inventoryItemUpdate reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation inventoryItemUpdate($id: ID!, $input: InventoryItemInput!) {\n    inventoryItemUpdate(id: $id, input: $input) {\n      inventoryItem {\n        id\n        unitCost {\n          amount\n        }\n        tracked\n        countryCodeOfOrigin\n        provinceCodeOfOrigin\n        harmonizedSystemCode\n        countryHarmonizedSystemCodes(first: 1) {\n          edges {\n            node {\n              harmonizedSystemCode\n              countryCode\n            }\n          }\n        }\n      }\n      userErrors {\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/InventoryItem/43729076\",\n  \"input\": {\n    \"cost\": 145.89,\n    \"tracked\": false,\n    \"countryCodeOfOrigin\": \"US\",\n    \"provinceCodeOfOrigin\": \"OR\",\n    \"harmonizedSystemCode\": \"621710\",\n    \"countryHarmonizedSystemCodes\": [{\"harmonizedSystemCode\"=>\"6217109510\", \"countryCode\"=>\"CA\"}]\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "inventoryMoveQuantities", "description": "Moves inventory between inventory quantity names at a single location.", "arguments": [{"name": "input", "type": "InventoryMoveQuantitiesInput!", "required": true, "description": "The information required to move inventory quantities."}], "returns": [], "examples": [{"description": "Move 10 items from available to reserved, with reason damaged.", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation inventoryMoveQuantities($input: InventoryMoveQuantitiesInput!, $quantityNames: [String!]) {\n    inventoryMoveQuantities(input: $input) {\n      userErrors {\n        field\n        message\n        code\n      }\n      inventoryAdjustmentGroup {\n        createdAt\n        reason\n        referenceDocumentUri\n        changes(quantityNames: $quantityNames) {\n          name\n          delta\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": {\n    \"reason\": \"damaged\",\n    \"referenceDocumentUri\": \"logistics://some.warehouse/take/2023-01-23T13:14:15Z\",\n    \"changes\": [{\"quantity\"=>10, \"inventoryItemId\"=>\"gid://shopify/InventoryItem/30322695\", \"from\"=>{\"locationId\"=>\"gid://shopify/Location/124656943\", \"name\"=>\"available\", \"ledgerDocumentUri\"=>nil}, \"to\"=>{\"locationId\"=>\"gid://shopify/Location/124656943\", \"name\"=>\"reserved\", \"ledgerDocumentUri\"=>\"logistics://toronto.warehouse/work-orders/2023-01-04/2\"}}]\n  },\n  \"quantityNames\": [\"committed\", \"reserved\", \"safety_stock\", \"quality_control\", \"damaged\", \"available\", \"on_hand\", \"incoming\"]\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "inventoryMoveQuantities reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation inventoryMoveQuantities($input: InventoryMoveQuantitiesInput!, $quantityNames: [String!]) {\n    inventoryMoveQuantities(input: $input) {\n      userErrors {\n        field\n        message\n        code\n      }\n      inventoryAdjustmentGroup {\n        createdAt\n        reason\n        referenceDocumentUri\n        changes(quantityNames: $quantityNames) {\n          name\n          delta\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": {\n    \"reason\": \"damaged\",\n    \"referenceDocumentUri\": \"logistics://some.warehouse/take/2023-01-23T13:14:15Z\",\n    \"changes\": [{\"quantity\"=>10, \"inventoryItemId\"=>\"gid://shopify/InventoryItem/30322695\", \"from\"=>{\"locationId\"=>\"gid://shopify/Location/124656943\", \"name\"=>\"available\", \"ledgerDocumentUri\"=>nil}, \"to\"=>{\"locationId\"=>\"gid://shopify/Location/124656943\", \"name\"=>\"reserved\", \"ledgerDocumentUri\"=>\"logistics://toronto.warehouse/work-orders/2023-01-04/2\"}}]\n  },\n  \"quantityNames\": [\"committed\", \"reserved\", \"safety_stock\", \"quality_control\", \"damaged\", \"available\", \"on_hand\", \"incoming\"]\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "inventorySetOnHandQuantities", "description": "Set inventory on-hand quantities using absolute values.", "arguments": [{"name": "input", "type": "InventorySetOnHandQuantitiesInput!", "required": true, "description": "The information required to set inventory on hand quantities."}], "returns": [], "examples": [{"description": "Adjust on_hand quantity for 2 items, with reason 'correction'.", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation inventorySetOnHandQuantities($input: InventorySetOnHandQuantitiesInput!) {\n    inventorySetOnHandQuantities(input: $input) {\n      userErrors {\n        field\n        message\n      }\n      inventoryAdjustmentGroup {\n        createdAt\n        reason\n        referenceDocumentUri\n        changes {\n          name\n          delta\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": {\n    \"reason\": \"correction\",\n    \"referenceDocumentUri\": \"logistics://some.warehouse/take/2023-01-23T13:14:15Z\",\n    \"setQuantities\": [{\"inventoryItemId\"=>\"gid://shopify/InventoryItem/30322695\", \"locationId\"=>\"gid://shopify/Location/124656943\", \"quantity\"=>42}, {\"inventoryItemId\"=>\"gid://shopify/InventoryItem/113711323\", \"locationId\"=>\"gid://shopify/Location/124656943\", \"quantity\"=>13}]\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "inventorySetOnHandQuantities reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation inventorySetOnHandQuantities($input: InventorySetOnHandQuantitiesInput!) {\n    inventorySetOnHandQuantities(input: $input) {\n      userErrors {\n        field\n        message\n      }\n      inventoryAdjustmentGroup {\n        createdAt\n        reason\n        referenceDocumentUri\n        changes {\n          name\n          delta\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": {\n    \"reason\": \"correction\",\n    \"referenceDocumentUri\": \"logistics://some.warehouse/take/2023-01-23T13:14:15Z\",\n    \"setQuantities\": [{\"inventoryItemId\"=>\"gid://shopify/InventoryItem/30322695\", \"locationId\"=>\"gid://shopify/Location/124656943\", \"quantity\"=>42}, {\"inventoryItemId\"=>\"gid://shopify/InventoryItem/113711323\", \"locationId\"=>\"gid://shopify/Location/124656943\", \"quantity\"=>13}]\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "inventorySetQuantities", "description": "Set quantities of specified name using absolute values. This mutation supports compare-and-set functionality to handle\nconcurrent requests properly. If ignoreCompareQuantity is not set to true,\nthe mutation will only update the quantity if the persisted quantity matches the compareQuantity value.\nIf the compareQuantity value does not match the persisted value, the mutation will return an error. In order to opt out\nof the compareQuantity check, the ignoreCompareQuantity argument can be set to true.\nNoteOnly use this mutation if calling on behalf of a system that acts as the source of truth for inventory quantities,\notherwise please consider using the inventoryAdjustQuantities mutation.\nOpting out of the compareQuantity check can lead to inaccurate inventory quantities if multiple requests are made concurrently.\nIt is recommended to always include the compareQuantity value to ensure the accuracy of the inventory quantities and to opt out\nof the check using ignoreCompareQuantity only when necessary.", "arguments": [{"name": "input", "type": "InventorySetQuantitiesInput!", "required": true, "description": "The information required to set inventory quantities."}], "returns": [], "examples": [{"description": "Sets the inventory level for an inventory item at a location", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation InventorySet($input: InventorySetQuantitiesInput!) {\n    inventorySetQuantities(input: $input) {\n      inventoryAdjustmentGroup {\n        createdAt\n        reason\n        referenceDocumentUri\n        changes {\n          name\n          delta\n        }\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": {\n    \"name\": \"available\",\n    \"reason\": \"correction\",\n    \"referenceDocumentUri\": \"logistics://some.warehouse/take/2023-01-23T13:14:15Z\",\n    \"quantities\": [{\"inventoryItemId\"=>\"gid://shopify/InventoryItem/30322695\", \"locationId\"=>\"gid://shopify/Location/124656943\", \"quantity\"=>11, \"compareQuantity\"=>1}]\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Setting available quantity at a location with compare-and-swap (CAS) enabled", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation inventorySetQuantities($input: InventorySetQuantitiesInput!) {\n    inventorySetQuantities(input: $input) {\n      inventoryAdjustmentGroup {\n        reason\n        referenceDocumentUri\n        changes {\n          name\n          delta\n          quantityAfterChange\n        }\n      }\n      userErrors {\n        code\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": {\n    \"name\": \"available\",\n    \"reason\": \"correction\",\n    \"referenceDocumentUri\": \"logistics://some.warehouse/take/2023-01-23T13:14:15Z\",\n    \"quantities\": [{\"inventoryItemId\"=>\"gid://shopify/InventoryItem/30322695\", \"locationId\"=>\"gid://shopify/Location/124656943\", \"quantity\"=>11, \"compareQuantity\"=>1}]\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Setting available quantity at a location without compare-and-swap (CAS) enabled", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation inventorySetQuantities($input: InventorySetQuantitiesInput!) {\n    inventorySetQuantities(input: $input) {\n      inventoryAdjustmentGroup {\n        reason\n        referenceDocumentUri\n        changes {\n          name\n          delta\n          quantityAfterChange\n        }\n      }\n      userErrors {\n        code\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": {\n    \"ignoreCompareQuantity\": true,\n    \"name\": \"available\",\n    \"reason\": \"correction\",\n    \"referenceDocumentUri\": \"logistics://some.warehouse/take/2023-01-23T13:14:15Z\",\n    \"quantities\": [{\"inventoryItemId\"=>\"gid://shopify/InventoryItem/30322695\", \"locationId\"=>\"gid://shopify/Location/124656943\", \"quantity\"=>42, \"compareQuantity\"=>nil}]\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "inventorySetQuantities reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation InventorySet($input: InventorySetQuantitiesInput!) {\n    inventorySetQuantities(input: $input) {\n      inventoryAdjustmentGroup {\n        createdAt\n        reason\n        referenceDocumentUri\n        changes {\n          name\n          delta\n        }\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": {\n    \"name\": \"available\",\n    \"reason\": \"correction\",\n    \"referenceDocumentUri\": \"logistics://some.warehouse/take/2023-01-23T13:14:15Z\",\n    \"quantities\": [{\"inventoryItemId\"=>\"gid://shopify/InventoryItem/30322695\", \"locationId\"=>\"gid://shopify/Location/124656943\", \"quantity\"=>11, \"compareQuantity\"=>1}]\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "inventorySetScheduledChanges", "description": "Set up scheduled changes of inventory items.", "arguments": [{"name": "input", "type": "InventorySetScheduledChangesInput!", "required": true, "description": "The input fields for setting up scheduled changes of inventory items."}], "returns": [], "examples": []}], "objects": [{"name": "CountryHarmonizedSystemCode", "description": "The country-specific harmonized system code and ISO country code for an inventory item.", "fields_and_connections": [{"name": "countryCode", "type": "CountryCode!", "description": "The ISO 3166-1 alpha-2 country code for the country that issued the specified harmonized system code.", "not_nullable": true}], "examples": []}, {"name": "InventoryAdjustmentGroup", "description": "Represents a group of adjustments made as part of the same operation.", "fields_and_connections": [{"name": "app", "type": "App", "description": "The app that triggered the inventory event, if one exists.", "not_nullable": true}], "examples": []}, {"name": "InventoryChange", "description": "Represents a change in an inventory quantity of an inventory item at a location.", "fields_and_connections": [{"name": "delta", "type": "Int!", "description": "The amount by which the inventory quantity was changed.", "not_nullable": true}], "examples": []}, {"name": "InventoryItem", "description": "Represents the goods available to be shipped to a customer.\nIt holds essential information about the goods, including SKU and whether it is tracked.\nLearn more about the relationships between inventory objects.", "fields_and_connections": [{"name": "countryCodeOfOrigin", "type": "CountryCode", "description": "The ISO 3166-1 alpha-2 country code of where the item originated from.", "not_nullable": true}], "examples": []}, {"name": "InventoryItemMeasurement", "description": "Represents the packaged dimension for an inventory item.", "fields_and_connections": [{"name": "id", "type": "ID!", "description": "A globally-unique ID.", "not_nullable": true}], "examples": []}, {"name": "InventoryLevel", "description": "The quantities of an inventory item that are related to a specific location.\nLearn more about the relationships between inventory objects.", "fields_and_connections": [{"name": "canDeactivate", "type": "Boolean!", "description": "Whether the inventory items associated with the inventory level can be deactivated.", "not_nullable": true}], "examples": []}, {"name": "InventoryProperties", "description": "General inventory properties for the shop.", "fields_and_connections": [{"name": "quantityNames", "type": "[InventoryQuantityName!]!", "description": "All the quantity names.", "not_nullable": true}], "examples": []}, {"name": "InventoryQuantity", "description": "Represents a quantity of an inventory item at a specific location, for a specific name.", "fields_and_connections": [{"name": "id", "type": "ID!", "description": "A globally-unique ID.", "not_nullable": true}], "examples": []}, {"name": "InventoryQuantityName", "description": "Details about an individual quantity name.", "fields_and_connections": [{"name": "belongsTo", "type": "[String!]!", "description": "List of quantity names that this quantity name belongs to.", "not_nullable": true}], "examples": []}, {"name": "InventoryScheduledChange", "description": "Returns the scheduled changes to inventory states related to the ledger document.", "fields_and_connections": [{"name": "expectedAt", "type": "DateTime!", "description": "The date and time that the scheduled change is expected to happen.", "not_nullable": true}], "examples": []}]}, {"name": "Localizations", "queries": [{"name": "availableLocales", "description": "A list of available locales.", "arguments": [{"name": "Locale", "type": "[Locale!]!", "required": true, "description": "A locale."}], "returns": [], "examples": [{"description": "Overview", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    availableLocales {\n      isoCode\n      name\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}]}, {"name": "marketLocalizableResource", "description": "A resource that can have localized values for different markets.", "arguments": [{"name": "resourceId", "type": "ID!", "required": true, "description": "Find a market localizable resource by ID."}], "returns": [], "examples": []}, {"name": "marketLocalizableResources", "description": "Resources that can have localized values for different markets.", "arguments": [{"name": "after", "type": "String", "required": true, "description": "The elements that come after the specified cursor."}], "returns": [], "examples": []}, {"name": "marketLocalizableResourcesByIds", "description": "Resources that can have localized values for different markets.", "arguments": [{"name": "after", "type": "String", "required": true, "description": "The elements that come after the specified cursor."}], "returns": [], "examples": []}, {"name": "shopLocales", "description": "A list of locales available on a shop.", "arguments": [{"name": "published", "type": "Boolean", "required": true, "description": "Return only published locales."}], "returns": [], "examples": [{"description": "Overview", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    shopLocales {\n      locale\n      primary\n      published\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}]}, {"name": "translatableResource", "description": "A resource that can have localized values for different languages.", "arguments": [{"name": "resourceId", "type": "ID!", "required": true, "description": "Find a translatable resource by ID."}], "returns": [], "examples": [{"description": "Retrieve existing French translations on a collection", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    translatableResource(resourceId: \"gid://shopify/Collection/1007901140\") {\n      resourceId\n      translations(locale: \"fr\") {\n        key\n        value\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "Retrieve existing French translations specific to a market on a collection", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    translatableResource(resourceId: \"gid://shopify/Collection/1007901140\") {\n      resourceId\n      translations(locale: \"fr\", marketId: \"gid://shopify/Market/128989799\") {\n        key\n        value\n        market {\n          id\n          name\n        }\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "Retrieve translatable content for a collection", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    translatableResource(resourceId: \"gid://shopify/Collection/1007901140\") {\n      resourceId\n      translatableContent {\n        key\n        value\n        digest\n        locale\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}]}, {"name": "translatableResources", "description": "Resources that can have localized values for different languages.", "arguments": [{"name": "after", "type": "String", "required": true, "description": "The elements that come after the specified cursor."}], "returns": [], "examples": [{"description": "Overview", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    translatableResources(first: 5, resourceType: PRODUCT) {\n      edges {\n        node {\n          resourceId\n          translatableContent {\n            key\n            value\n            digest\n            locale\n          }\n        }\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}]}, {"name": "translatableResourcesByIds", "description": "Resources that can have localized values for different languages.", "arguments": [{"name": "after", "type": "String", "required": true, "description": "The elements that come after the specified cursor."}], "returns": [], "examples": [{"description": "Overview", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    translatableResourcesByIds(first: 10, resourceIds: [\"gid://shopify/Product/20995642\"]) {\n      edges {\n        node {\n          resourceId\n          translatableContent {\n            key\n            value\n            digest\n            locale\n          }\n        }\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}]}], "mutations": [{"name": "marketLocalizationsRegister", "description": "Creates or updates market localizations.", "arguments": [{"name": "marketLocalizations", "type": "[MarketLocalizationRegisterInput!]!", "required": true, "description": "The input fields for a market localization."}], "returns": [], "examples": []}, {"name": "marketLocalizationsRemove", "description": "Deletes market localizations.", "arguments": [{"name": "marketIds", "type": "[ID!]!", "required": true, "description": "The list of market IDs."}], "returns": [], "examples": []}, {"name": "shopLocaleDisable", "description": "Deletes a locale for a shop. This also deletes all translations of this locale.", "arguments": [{"name": "locale", "type": "String!", "required": true, "description": "ISO code of the locale to delete."}], "returns": [], "examples": [{"description": "Delete the Korean locale from a shop", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation disableLocale($locale: String!) {\n    shopLocaleDisable(locale: $locale) {\n      userErrors {\n        message\n        field\n      }\n      locale\n    }\n  }\nQUERY\n\nvariables = {\n  \"locale\": \"ko\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "shopLocaleDisable reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation disableLocale($locale: String!) {\n    shopLocaleDisable(locale: $locale) {\n      userErrors {\n        message\n        field\n      }\n      locale\n    }\n  }\nQUERY\n\nvariables = {\n  \"locale\": \"ko\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "shopLocaleEnable", "description": "Adds a locale for a shop. The newly added locale is in the unpublished state.", "arguments": [{"name": "locale", "type": "String!", "required": true, "description": "ISO code of the locale to enable."}], "returns": [], "examples": [{"description": "Enable a locale", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation enableLocale($locale: String!) {\n    shopLocaleEnable(locale: $locale) {\n      userErrors {\n        message\n        field\n      }\n      shopLocale {\n        locale\n        name\n        primary\n        published\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"locale\": \"ko\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "shopLocaleEnable reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation enableLocale($locale: String!) {\n    shopLocaleEnable(locale: $locale) {\n      userErrors {\n        message\n        field\n      }\n      shopLocale {\n        locale\n        name\n        primary\n        published\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"locale\": \"ko\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "shopLocaleUpdate", "description": "Updates a locale for a shop.", "arguments": [{"name": "locale", "type": "String!", "required": true, "description": "ISO code of the locale to update."}], "returns": [], "examples": [{"description": "Publish a locale", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation updateLocale($locale: String!, $shopLocale: ShopLocaleInput!) {\n    shopLocaleUpdate(locale: $locale, shopLocale: $shopLocale) {\n      userErrors {\n        message\n        field\n      }\n      shopLocale {\n        name\n        locale\n        primary\n        published\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"locale\": \"ko\",\n  \"shopLocale\": {\n    \"published\": true\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Unpublish a locale", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation updateLocale($locale: String!, $shopLocale: ShopLocaleInput!) {\n    shopLocaleUpdate(locale: $locale, shopLocale: $shopLocale) {\n      userErrors {\n        message\n        field\n      }\n      shopLocale {\n        name\n        locale\n        primary\n        published\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"locale\": \"ko\",\n  \"shopLocale\": {\n    \"published\": false\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "shopLocaleUpdate reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation updateLocale($locale: String!, $shopLocale: ShopLocaleInput!) {\n    shopLocaleUpdate(locale: $locale, shopLocale: $shopLocale) {\n      userErrors {\n        message\n        field\n      }\n      shopLocale {\n        name\n        locale\n        primary\n        published\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"locale\": \"ko\",\n  \"shopLocale\": {\n    \"published\": true\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "translationsRegister", "description": "Creates or updates translations.", "arguments": [{"name": "resourceId", "type": "ID!", "required": true, "description": "ID of the resource that is being translated."}], "returns": [], "examples": [{"description": "Register a French product title", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation translationsRegister($resourceId: ID!, $translations: [TranslationInput!]!) {\n    translationsRegister(resourceId: $resourceId, translations: $translations) {\n      userErrors {\n        message\n        field\n      }\n      translations {\n        key\n        value\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"resourceId\": \"gid://shopify/Product/20995642\",\n  \"translations\": [{\"locale\"=>\"fr\", \"key\"=>\"title\", \"value\"=>\"L'\u00e9l\u00e9ment\", \"translatableContentDigest\"=>\"4e5b548d6d61f0006840aca106f7464a4b59e5a854317d5b57861b8423901bf6\"}]\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Register a French product title specific to a market", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation translationsRegister($resourceId: ID!, $translations: [TranslationInput!]!) {\n    translationsRegister(resourceId: $resourceId, translations: $translations) {\n      userErrors {\n        message\n        field\n      }\n      translations {\n        key\n        value\n        market {\n          id\n          name\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"resourceId\": \"gid://shopify/Product/20995642\",\n  \"translations\": [{\"locale\"=>\"fr\", \"key\"=>\"title\", \"value\"=>\"L'\u00e9l\u00e9ment canadien\", \"translatableContentDigest\"=>\"4e5b548d6d61f0006840aca106f7464a4b59e5a854317d5b57861b8423901bf6\", \"marketId\"=>\"gid://shopify/Market/128989799\"}]\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Register a product title in the shop default language specific to a market", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation translationsRegister($resourceId: ID!, $translations: [TranslationInput!]!) {\n    translationsRegister(resourceId: $resourceId, translations: $translations) {\n      userErrors {\n        message\n        field\n      }\n      translations {\n        key\n        value\n        market {\n          id\n          name\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"resourceId\": \"gid://shopify/Product/20995642\",\n  \"translations\": [{\"locale\"=>\"en\", \"key\"=>\"title\", \"value\"=>\"Canadian element\", \"translatableContentDigest\"=>\"4e5b548d6d61f0006840aca106f7464a4b59e5a854317d5b57861b8423901bf6\", \"marketId\"=>\"gid://shopify/Market/128989799\"}]\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "translationsRegister reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation translationsRegister($resourceId: ID!, $translations: [TranslationInput!]!) {\n    translationsRegister(resourceId: $resourceId, translations: $translations) {\n      userErrors {\n        message\n        field\n      }\n      translations {\n        key\n        value\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"resourceId\": \"gid://shopify/Product/20995642\",\n  \"translations\": [{\"locale\"=>\"fr\", \"key\"=>\"title\", \"value\"=>\"L'\u00e9l\u00e9ment\", \"translatableContentDigest\"=>\"4e5b548d6d61f0006840aca106f7464a4b59e5a854317d5b57861b8423901bf6\"}]\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "translationsRemove", "description": "Deletes translations.", "arguments": [{"name": "locales", "type": "[String!]!", "required": true, "description": "The list of translation locales. Only locales returned in shopLocales are valid."}], "returns": [], "examples": [{"description": "Remove a French product title translation", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation translationsRemove($resourceId: ID!, $translationKeys: [String!]!, $locales: [String!]!) {\n    translationsRemove(resourceId: $resourceId, translationKeys: $translationKeys, locales: $locales) {\n      userErrors {\n        message\n        field\n      }\n      translations {\n        key\n        value\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"resourceId\": \"gid://shopify/Product/20995642\",\n  \"locales\": [\"fr\"],\n  \"translationKeys\": [\"title\"]\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Remove a French product title translation specific to a market", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation translationsRemove($resourceId: ID!, $translationKeys: [String!]!, $locales: [String!]!, $marketIds: [ID!]) {\n    translationsRemove(resourceId: $resourceId, translationKeys: $translationKeys, locales: $locales, marketIds: $marketIds) {\n      userErrors {\n        message\n        field\n      }\n      translations {\n        key\n        value\n        market {\n          id\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"resourceId\": \"gid://shopify/Product/20995642\",\n  \"locales\": [\"fr\"],\n  \"translationKeys\": [\"title\"],\n  \"marketIds\": [\"gid://shopify/Market/128989799\"]\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "translationsRemove reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation translationsRemove($resourceId: ID!, $translationKeys: [String!]!, $locales: [String!]!) {\n    translationsRemove(resourceId: $resourceId, translationKeys: $translationKeys, locales: $locales) {\n      userErrors {\n        message\n        field\n      }\n      translations {\n        key\n        value\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"resourceId\": \"gid://shopify/Product/20995642\",\n  \"locales\": [\"fr\"],\n  \"translationKeys\": [\"title\"]\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}], "objects": [{"name": "Locale", "description": "A locale.", "fields_and_connections": [{"name": "isoCode", "type": "String!", "description": "Locale ISO code.", "not_nullable": true}], "examples": []}, {"name": "LocalizationExtension", "description": "Represents the value captured by a localization extension. Localization extensions are additional fields required by certain countries on international orders. For example, some countries require additional fields for customs information or tax identification numbers.", "fields_and_connections": [{"name": "countryCode", "type": "CountryCode!", "description": "Country ISO 3166-1 alpha-2 code.", "not_nullable": true}], "examples": []}, {"name": "MarketLocalizableContent", "description": "The market localizable content of a resource's field.", "fields_and_connections": [{"name": "digest", "type": "String", "description": "The hash digest representation of the content value.", "not_nullable": true}], "examples": []}, {"name": "MarketLocalizableResource", "description": "A resource that has market localizable fields.", "fields_and_connections": [{"name": "marketLocalizableContent", "type": "[MarketLocalizableContent!]!", "description": "The market localizable content.", "not_nullable": true}], "examples": []}, {"name": "MarketLocalization", "description": "The market localization of a field within a resource, which is determined by the market ID.", "fields_and_connections": [{"name": "key", "type": "String!", "description": "A reference to the value being localized on the resource that this market localization belongs to.", "not_nullable": true}], "examples": []}, {"name": "ShopLocale", "description": "A locale that's been enabled on a shop.", "fields_and_connections": [{"name": "locale", "type": "String!", "description": "The locale ISO code.", "not_nullable": true}], "examples": []}, {"name": "TranslatableContent", "description": "Translatable content of a resource's field.", "fields_and_connections": [{"name": "digest", "type": "String", "description": "Hash digest representation of the content value.", "not_nullable": true}], "examples": []}, {"name": "TranslatableResource", "description": "A resource that has translatable fields.", "fields_and_connections": [{"name": "nestedTranslatableResources", "type": "TranslatableResourceConnection!", "description": "Nested translatable resources under the current resource.", "not_nullable": true}], "examples": []}, {"name": "Translation", "description": "Translation of a field of a resource.", "fields_and_connections": [{"name": "key", "type": "String!", "description": "On the resource that this translation belongs to, the reference to the value being translated.", "not_nullable": true}], "examples": []}]}, {"name": "Marketplaces", "queries": [{"name": "productFeed", "description": "Returns a ProductFeed resource by ID.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID of the ProductFeed to return."}], "returns": [], "examples": []}, {"name": "productFeeds", "description": "The product feeds for the shop.", "arguments": [{"name": "after", "type": "String", "required": true, "description": "The elements that come after the specified cursor."}], "returns": [], "examples": []}], "mutations": [{"name": "productFeedCreate", "description": "Creates a product feed for a specific publication.", "arguments": [{"name": "input", "type": "ProductFeedInput", "required": true, "description": "The properties of the new product feed."}], "returns": [], "examples": []}, {"name": "productFeedDelete", "description": "Deletes a product feed for a specific publication.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID of the product feed to be deleted."}], "returns": [], "examples": []}, {"name": "productFullSync", "description": "Runs the full product sync for a given shop.", "arguments": [{"name": "beforeUpdatedAt", "type": "DateTime", "required": true, "description": "Syncs only products that haven't changed since the specified timestamp."}], "returns": [], "examples": []}], "objects": [{"name": "AvailableChannelDefinitionsByChannel", "description": "Represents an object containing all information for channels available to a shop.", "fields_and_connections": [{"name": "channelDefinitions", "type": "[ChannelDefinition!]!", "description": "The channel definitions for channels installed on a shop.", "not_nullable": true}], "examples": []}, {"name": "ChannelDefinition", "description": "A channel definition represents channels surfaces on the platform.\nA channel definition can be a platform or a subsegment of it such as Facebook Home, Instagram Live, Instagram Shops, or WhatsApp chat.", "fields_and_connections": [{"name": "channelName", "type": "String!", "description": "Name of the channel that this sub channel belongs to.", "not_nullable": true}], "examples": []}, {"name": "ChannelInformation", "description": "Contains the information for a given sales channel.", "fields_and_connections": [{"name": "app", "type": "App!", "description": "The app associated with the channel.", "not_nullable": true}], "examples": []}, {"name": "ProductFeed", "description": "A product feed.", "fields_and_connections": [{"name": "country", "type": "CountryCode", "description": "The country of the product feed.", "not_nullable": true}], "examples": []}]}, {"name": "Metafields", "queries": [{"name": "metafieldDefinition", "description": "Returns a metafield definition by identifier.", "arguments": [{"name": "identifier", "type": "MetafieldDefinitionIdentifierInput", "required": true, "description": "The identifier of the MetafieldDefinition to return."}], "returns": [], "examples": [{"description": "Retrieve a count of a resource's metafields.", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query MetafieldsCount($metafieldDefinitionId: ID!) {\n    metafieldDefinition(id: $metafieldDefinitionId) {\n      id\n      metafieldsCount\n    }\n  }\nQUERY\n\nvariables = {\n  \"metafieldDefinitionId\": \"gid://shopify/MetafieldDefinition/1071456166\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Retrieve metafield definition", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    metafieldDefinition(id: \"gid://shopify/MetafieldDefinition/1071456163\") {\n      name\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}]}, {"name": "metafieldDefinitions", "description": "Returns a list of metafield definitions.", "arguments": [{"name": "after", "type": "String", "required": true, "description": "The elements that come after the specified cursor."}], "returns": [], "examples": [{"description": "Overview", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    metafieldDefinitions(first: 250, ownerType: PRODUCT) {\n      edges {\n        node {\n          name\n        }\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}]}, {"name": "metafieldDefinitionTypes", "description": "Each metafield definition has a type, which defines the type of information that it can store.\nThis type is enforced across every instance of the resource that owns the metafield definition.\nRefer to the list of supported metafield types.", "arguments": [{"name": "MetafieldDefinitionType", "type": "[MetafieldDefinitionType!]!", "required": true, "description": "A metafield definition type provides basic foundation and validation for a metafield."}], "returns": [], "examples": [{"description": "Overview", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query MetafieldDefinitionTypes {\n    metafieldDefinitionTypes {\n      category\n      name\n      supportsDefinitionMigrations\n      supportedValidations {\n        name\n        type\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}]}, {"name": "standardMetafieldDefinitionTemplates", "description": "Standard metafield definitions are intended for specific, common use cases. Their namespace and keys reflect these use cases and are reserved.\nRefer to all available Standard Metafield Definition Templates.", "arguments": [{"name": "after", "type": "String", "required": true, "description": "The elements that come after the specified cursor."}], "returns": [], "examples": [{"description": "Overview", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query StandardMetafieldDefinitionTemplates {\n    standardMetafieldDefinitionTemplates(first: 5) {\n      edges {\n        node {\n          id\n          name\n          namespace\n          key\n          description\n          ownerTypes\n          type {\n            name\n          }\n        }\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}]}], "mutations": [{"name": "metafieldDefinitionCreate", "description": "Creates a metafield definition. Any metafields existing under the same owner type, namespace, and key will be\nchecked against this definition and will have their type updated accordingly. For metafields that are not\nvalid, they will remain unchanged but any attempts to update them must align with this definition.", "arguments": [{"name": "definition", "type": "MetafieldDefinitionInput!", "required": true, "description": "Specifies the input fields for a metafield definition."}], "returns": [], "examples": [{"description": "Create a metafield definition", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation CreateMetafieldDefinition($definition: MetafieldDefinitionInput!) {\n    metafieldDefinitionCreate(definition: $definition) {\n      createdDefinition {\n        id\n        name\n      }\n      userErrors {\n        field\n        message\n        code\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"definition\": {\n    \"name\": \"Ingredients\",\n    \"namespace\": \"bakery\",\n    \"key\": \"ingredients\",\n    \"description\": \"A list of ingredients used to make the product.\",\n    \"type\": \"multi_line_text_field\",\n    \"ownerType\": \"PRODUCT\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Create a metafield definition to be used with automated collections", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation CreateMetafieldDefinition($definition: MetafieldDefinitionInput!) {\n    metafieldDefinitionCreate(definition: $definition) {\n      createdDefinition {\n        id\n        name\n        useAsCollectionCondition\n      }\n      userErrors {\n        field\n        message\n        code\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"definition\": {\n    \"name\": \"Material\",\n    \"namespace\": \"custom\",\n    \"key\": \"material\",\n    \"description\": \"A list of materials used to make the product.\",\n    \"type\": \"list.single_line_text_field\",\n    \"ownerType\": \"PRODUCT\",\n    \"useAsCollectionCondition\": true\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Create a metafield definition with access controls", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation CreateMetafieldDefinition($definition: MetafieldDefinitionInput!) {\n    metafieldDefinitionCreate(definition: $definition) {\n      createdDefinition {\n        id\n        namespace\n        access {\n          admin\n        }\n      }\n      userErrors {\n        field\n        message\n        code\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"definition\": {\n    \"name\": \"Pizza size\",\n    \"namespace\": \"$app:bakery\",\n    \"key\": \"pizza_size\",\n    \"type\": \"dimension\",\n    \"description\": \"The size (diameter) of the pizza in inches.\",\n    \"ownerType\": \"PRODUCT\",\n    \"access\": {\n      \"admin\": \"MERCHANT_READ\"\n    }\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Create a metafield definition with validations", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation CreateMetafieldDefinition($definition: MetafieldDefinitionInput!) {\n    metafieldDefinitionCreate(definition: $definition) {\n      createdDefinition {\n        id\n        name\n      }\n      userErrors {\n        field\n        message\n        code\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"definition\": {\n    \"name\": \"Pizza size\",\n    \"namespace\": \"bakery\",\n    \"key\": \"pizza_size\",\n    \"type\": \"dimension\",\n    \"description\": \"The size (diameter) of the pizza in inches.\",\n    \"validations\": [{\"name\"=>\"min\", \"value\"=>\"{\\\"unit\\\": \\\"INCHES\\\", \\\"value\\\": \\\"9\\\"}\"}, {\"name\"=>\"max\", \"value\"=>\"{\\\"unit\\\": \\\"INCHES\\\", \\\"value\\\": \\\"15\\\"}\"}],\n    \"ownerType\": \"PRODUCT\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "metafieldDefinitionCreate reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation CreateMetafieldDefinition($definition: MetafieldDefinitionInput!) {\n    metafieldDefinitionCreate(definition: $definition) {\n      createdDefinition {\n        id\n        name\n      }\n      userErrors {\n        field\n        message\n        code\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"definition\": {\n    \"name\": \"Ingredients\",\n    \"namespace\": \"bakery\",\n    \"key\": \"ingredients\",\n    \"description\": \"A list of ingredients used to make the product.\",\n    \"type\": \"multi_line_text_field\",\n    \"ownerType\": \"PRODUCT\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "metafieldDefinitionDelete", "description": "Delete a metafield definition.\nOptionally deletes all associated metafields asynchronously when specified.", "arguments": [{"name": "deleteAllAssociatedMetafields", "type": "Boolean", "required": true, "description": "Whether to delete all associated metafields."}], "returns": [], "examples": [{"description": "Delete a metafield definition", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation DeleteMetafieldDefinition($id: ID!, $deleteAllAssociatedMetafields: Boolean!) {\n    metafieldDefinitionDelete(id: $id, deleteAllAssociatedMetafields: $deleteAllAssociatedMetafields) {\n      deletedDefinitionId\n      userErrors {\n        field\n        message\n        code\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/MetafieldDefinition/1071456130\",\n  \"deleteAllAssociatedMetafields\": true\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "metafieldDefinitionDelete reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation DeleteMetafieldDefinition($id: ID!, $deleteAllAssociatedMetafields: Boolean!) {\n    metafieldDefinitionDelete(id: $id, deleteAllAssociatedMetafields: $deleteAllAssociatedMetafields) {\n      deletedDefinitionId\n      userErrors {\n        field\n        message\n        code\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/MetafieldDefinition/1071456130\",\n  \"deleteAllAssociatedMetafields\": true\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "metafieldDefinitionPin", "description": "You can organize your metafields in your Shopify admin by pinning/unpinning metafield definitions.\nThe order of your pinned metafield definitions determines the order in which your metafields are displayed\non the corresponding pages in your Shopify admin. By default, only pinned metafields are automatically displayed.", "arguments": [{"name": "definitionId", "type": "ID", "required": true, "description": "The id of the metafield definition to pin. Using identifier is preferred."}], "returns": [], "examples": [{"description": "Pin a metafield definition", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation metafieldDefinitionPin($definitionId: ID!) {\n    metafieldDefinitionPin(definitionId: $definitionId) {\n      pinnedDefinition {\n        name\n        key\n        namespace\n        pinnedPosition\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"definitionId\": \"gid://shopify/MetafieldDefinition/1071456171\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "metafieldDefinitionPin reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation metafieldDefinitionPin($definitionId: ID!) {\n    metafieldDefinitionPin(definitionId: $definitionId) {\n      pinnedDefinition {\n        name\n        key\n        namespace\n        pinnedPosition\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"definitionId\": \"gid://shopify/MetafieldDefinition/1071456171\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "metafieldDefinitionUnpin", "description": "You can organize your metafields in your Shopify admin by pinning/unpinning metafield definitions.\nThe order of your pinned metafield definitions determines the order in which your metafields are displayed\non the corresponding pages in your Shopify admin. By default, only pinned metafields are automatically displayed.", "arguments": [{"name": "definitionId", "type": "ID", "required": true, "description": "The ID of the metafield definition to unpin. Using identifier is preferred."}], "returns": [], "examples": [{"description": "Unpin a metafield definition", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation metafieldDefinitionUnpin($definitionId: ID!) {\n    metafieldDefinitionUnpin(definitionId: $definitionId) {\n      unpinnedDefinition {\n        name\n        key\n        namespace\n        pinnedPosition\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"definitionId\": \"gid://shopify/MetafieldDefinition/1071456133\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "metafieldDefinitionUnpin reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation metafieldDefinitionUnpin($definitionId: ID!) {\n    metafieldDefinitionUnpin(definitionId: $definitionId) {\n      unpinnedDefinition {\n        name\n        key\n        namespace\n        pinnedPosition\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"definitionId\": \"gid://shopify/MetafieldDefinition/1071456133\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "metafieldDefinitionUpdate", "description": "Updates a metafield definition.", "arguments": [{"name": "definition", "type": "MetafieldDefinitionUpdateInput!", "required": true, "description": "The input fields for the metafield definition update."}], "returns": [], "examples": [{"description": "Update a metafield definition", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation UpdateMetafieldDefinition($definition: MetafieldDefinitionUpdateInput!) {\n    metafieldDefinitionUpdate(definition: $definition) {\n      updatedDefinition {\n        id\n        name\n      }\n      userErrors {\n        field\n        message\n        code\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"definition\": {\n    \"name\": \"Pizza size (inches)\",\n    \"namespace\": \"bakery\",\n    \"key\": \"pizza_size\",\n    \"ownerType\": \"PRODUCT\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Update a metafield definition with access controls", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation UpdateMetafieldDefinition($definition: MetafieldDefinitionUpdateInput!) {\n    metafieldDefinitionUpdate(definition: $definition) {\n      updatedDefinition {\n        id\n        name\n        access {\n          admin\n        }\n      }\n      userErrors {\n        field\n        message\n        code\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"definition\": {\n    \"name\": \"Pizza size (inches)\",\n    \"namespace\": \"$app:bakery\",\n    \"key\": \"pizza_size\",\n    \"ownerType\": \"PRODUCT\",\n    \"access\": {\n      \"admin\": \"PRIVATE\"\n    }\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "metafieldDefinitionUpdate reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation UpdateMetafieldDefinition($definition: MetafieldDefinitionUpdateInput!) {\n    metafieldDefinitionUpdate(definition: $definition) {\n      updatedDefinition {\n        id\n        name\n      }\n      userErrors {\n        field\n        message\n        code\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"definition\": {\n    \"name\": \"Pizza size (inches)\",\n    \"namespace\": \"bakery\",\n    \"key\": \"pizza_size\",\n    \"ownerType\": \"PRODUCT\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "metafieldsDelete", "description": "Deletes multiple metafields in bulk.", "arguments": [{"name": "metafields", "type": "[MetafieldIdentifierInput!]!", "required": true, "description": "A list of identifiers specifying metafields to delete. At least one identifier must be specified."}], "returns": [], "examples": [{"description": "Deletes a metafield by its ID", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation MetafieldsDelete($metafields: [MetafieldIdentifierInput!]!) {\n    metafieldsDelete(metafields: $metafields) {\n      deletedMetafields {\n        key\n        namespace\n        ownerId\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"metafields\": [{\"ownerId\"=>\"gid://shopify/Product/20995642\", \"namespace\"=>\"inventory\", \"key\"=>\"today\"}]\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "metafieldsDelete reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation MetafieldsDelete($metafields: [MetafieldIdentifierInput!]!) {\n    metafieldsDelete(metafields: $metafields) {\n      deletedMetafields {\n        key\n        namespace\n        ownerId\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"metafields\": [{\"ownerId\"=>\"gid://shopify/Product/20995642\", \"namespace\"=>\"inventory\", \"key\"=>\"today\"}]\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "metafieldsSet", "description": "Sets metafield values. Metafield values will be set regardless if they were previously created or not.\nAllows a maximum of 25 metafields to be set at a time.\nThis operation is atomic, meaning no changes are persisted if an error is encountered.\nAs of 2024-07, this operation supports compare-and-set functionality to better handle concurrent requests.\nIf compareDigest is set for any metafield, the mutation will only set that metafield if the persisted metafield value matches the digest used on compareDigest.\nIf the metafield doesn't exist yet, but you want to guarantee that the operation will run in a safe manner, set compareDigest to null.\nThe compareDigest value can be acquired by querying the metafield object and selecting compareDigest as a field.\nIf the compareDigest value does not match the digest for the persisted value, the mutation will return an error.\nYou can opt out of write guarantees by not sending compareDigest in the request.", "arguments": [{"name": "metafields", "type": "[MetafieldsSetInput!]!", "required": true, "description": "The list of metafield values to set. Maximum of 25."}], "returns": [], "examples": [{"description": "Create a metafield", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation MetafieldsSet($metafields: [MetafieldsSetInput!]!) {\n    metafieldsSet(metafields: $metafields) {\n      metafields {\n        key\n        namespace\n        value\n        createdAt\n        updatedAt\n      }\n      userErrors {\n        field\n        message\n        code\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"metafields\": [{\"key\"=>\"example_key\", \"namespace\"=>\"example_namespace\", \"ownerId\"=>\"gid://shopify/Product/20995642\", \"type\"=>\"single_line_text_field\", \"value\"=>\"Example Value\"}]\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Creating and updating metafields", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation MetafieldsSet($metafields: [MetafieldsSetInput!]!) {\n    metafieldsSet(metafields: $metafields) {\n      metafields {\n        key\n        namespace\n        value\n        createdAt\n        updatedAt\n      }\n      userErrors {\n        field\n        message\n        code\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"metafields\": [{\"key\"=>\"materials\", \"namespace\"=>\"my_fields\", \"ownerId\"=>\"gid://shopify/Product/20995642\", \"type\"=>\"multi_line_text_field\", \"value\"=>\"95% Cotton\\n5% Spandex\"}, {\"key\"=>\"manufactured\", \"namespace\"=>\"my_fields\", \"ownerId\"=>\"gid://shopify/Product/20995642\", \"type\"=>\"single_line_text_field\", \"value\"=>\"Made in Canada\"}, {\"key\"=>\"product_description\", \"namespace\"=>\"custom\", \"ownerId\"=>\"gid://shopify/Product/20995642\", \"type\"=>\"rich_text_field\", \"value\"=>\"{\\\"type\\\":\\\"root\\\",\\\"children\\\":[{\\\"type\\\":\\\"paragraph\\\",\\\"children\\\":[{\\\"type\\\":\\\"text\\\",\\\"value\\\":\\\"This is italicized text and \\\",\\\"italic\\\":true},{\\\"url\\\":\\\"https:\\\\/\\\\/example.com\\\",\\\"title\\\":\\\"Link to example.com\\\",\\\"type\\\":\\\"link\\\",\\\"children\\\":[{\\\"type\\\":\\\"text\\\",\\\"value\\\":\\\"a bolded hyperlink\\\",\\\"bold\\\":true}]}]}]}\"}]\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Creating and updating metafields using compare-and-swap (CAS)", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation MetafieldsSet($metafields: [MetafieldsSetInput!]!) {\n    metafieldsSet(metafields: $metafields) {\n      metafields {\n        key\n        namespace\n        value\n        compareDigest\n        createdAt\n        updatedAt\n      }\n      userErrors {\n        field\n        message\n        code\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"metafields\": [{\"key\"=>\"materials\", \"namespace\"=>\"my_fields\", \"ownerId\"=>\"gid://shopify/Product/20995642\", \"type\"=>\"multi_line_text_field\", \"value\"=>\"95% Cotton\\n5% Spandex\", \"compareDigest\"=>\"fd6b73725c9e83da2d2bcfaf90b27305b9058a48a1565639aa00d718d4caf8e8\"}, {\"key\"=>\"manufactured\", \"namespace\"=>\"my_fields\", \"ownerId\"=>\"gid://shopify/Product/20995642\", \"type\"=>\"single_line_text_field\", \"value\"=>\"Made in Canada\", \"compareDigest\"=>nil}]\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Updates a metafield", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation MetafieldsSet($metafields: [MetafieldsSetInput!]!) {\n    metafieldsSet(metafields: $metafields) {\n      metafields {\n        key\n        namespace\n        value\n        createdAt\n        updatedAt\n      }\n      userErrors {\n        field\n        message\n        code\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"metafields\": [{\"key\"=>\"materials\", \"namespace\"=>\"my_fields\", \"ownerId\"=>\"gid://shopify/Product/20995642\", \"type\"=>\"multi_line_text_field\", \"value\"=>\"95% Cotton\\n5% Spandex\"}]\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "metafieldsSet reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation MetafieldsSet($metafields: [MetafieldsSetInput!]!) {\n    metafieldsSet(metafields: $metafields) {\n      metafields {\n        key\n        namespace\n        value\n        createdAt\n        updatedAt\n      }\n      userErrors {\n        field\n        message\n        code\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"metafields\": [{\"key\"=>\"example_key\", \"namespace\"=>\"example_namespace\", \"ownerId\"=>\"gid://shopify/Product/20995642\", \"type\"=>\"single_line_text_field\", \"value\"=>\"Example Value\"}]\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "standardMetafieldDefinitionEnable", "description": "Activates the specified standard metafield definition from its template.\nRefer to the list of standard metafield definition templates.", "arguments": [{"name": "access", "type": "StandardMetafieldDefinitionAccessInput", "required": true, "description": "The access settings that apply to each of the metafields that belong to the metafield definition."}], "returns": [], "examples": [{"description": "Creates a metafield definition from an existing template", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation standardMetafieldDefinitionEnable($id: ID!, $ownerType: MetafieldOwnerType!, $pin: Boolean!, $visibleToStorefrontApi: Boolean!) {\n    standardMetafieldDefinitionEnable(id: $id, ownerType: $ownerType, pin: $pin, visibleToStorefrontApi: $visibleToStorefrontApi) {\n      createdDefinition {\n        name\n        key\n        namespace\n        description\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/StandardMetafieldDefinitionTemplate/2\",\n  \"ownerType\": \"PRODUCT\",\n  \"pin\": false,\n  \"visibleToStorefrontApi\": true\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "standardMetafieldDefinitionEnable reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation standardMetafieldDefinitionEnable($id: ID!, $ownerType: MetafieldOwnerType!, $pin: Boolean!, $visibleToStorefrontApi: Boolean!) {\n    standardMetafieldDefinitionEnable(id: $id, ownerType: $ownerType, pin: $pin, visibleToStorefrontApi: $visibleToStorefrontApi) {\n      createdDefinition {\n        name\n        key\n        namespace\n        description\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/StandardMetafieldDefinitionTemplate/2\",\n  \"ownerType\": \"PRODUCT\",\n  \"pin\": false,\n  \"visibleToStorefrontApi\": true\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}], "objects": [{"name": "Metafield", "description": "Metafields enable you to attach additional information to a Shopify resource, such as a Product or a Collection.\nFor more information about where you can attach metafields refer to HasMetafields.\nSome examples of the data that metafields enable you to store are specifications, size charts, downloadable documents, release dates, images, or part numbers.\nMetafields are identified by an owner resource, namespace, and key. and store a value along with type information for that value.", "fields_and_connections": [{"name": "compareDigest", "type": "String!", "description": "The data stored in the resource, represented as a digest.", "not_nullable": true}], "examples": []}, {"name": "MetafieldDefinition", "description": "Metafield definitions enable you to define additional validation constraints for metafields, and enable the\nmerchant to edit metafield values in context.", "fields_and_connections": [{"name": "access", "type": "MetafieldAccess!", "description": "The access settings associated with the metafield definition.", "not_nullable": true}], "examples": []}, {"name": "MetafieldDefinitionSupportedValidation", "description": "The type and name for the optional validation configuration of a metafield.\nFor example, a supported validation might consist of a max name and a number_integer type.\nThis validation can then be used to enforce a maximum character length for a single_line_text_field metafield.", "fields_and_connections": [{"name": "name", "type": "String!", "description": "The name of the metafield definition validation.", "not_nullable": true}], "examples": []}, {"name": "MetafieldDefinitionType", "description": "A metafield definition type provides basic foundation and validation for a metafield.", "fields_and_connections": [{"name": "category", "type": "String!", "description": "The category associated with the metafield definition type.", "not_nullable": true}], "examples": []}, {"name": "MetafieldDefinitionValidation", "description": "A configured metafield definition validation.\nFor example, for a metafield definition of number_integer type, you can set a validation with the name max\nand a value of 15. This validation will ensure that the value of the metafield is a number less than or equal to 15.\nRefer to the list of supported validations.", "fields_and_connections": [{"name": "name", "type": "String!", "description": "The validation name.", "not_nullable": true}], "examples": []}, {"name": "StandardMetafieldDefinitionTemplate", "description": "Standard metafield definition templates provide preset configurations to create metafield definitions.\nEach template has a specific namespace and key that we've reserved to have specific meanings for common use cases.\nRefer to the list of standard metafield definitions.", "fields_and_connections": [{"name": "description", "type": "String", "description": "The description of the standard metafield definition.", "not_nullable": true}], "examples": []}]}, {"name": "Metaobjects", "queries": [{"name": "metaobject", "description": "Retrieves a metaobject by ID.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID of the metaobject to return."}], "returns": [], "examples": []}, {"name": "metaobjectByHandle", "description": "Retrieves a metaobject by handle.", "arguments": [{"name": "handle", "type": "MetaobjectHandleInput!", "required": true, "description": "The identifier of the metaobject to return."}], "returns": [], "examples": []}, {"name": "metaobjectDefinition", "description": "Retrieves a metaobject definition by ID.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID of the metaobject to return."}], "returns": [], "examples": []}, {"name": "metaobjectDefinitionByType", "description": "Finds a metaobject definition by type.", "arguments": [{"name": "type", "type": "String!", "required": true, "description": "The type of the metaobject definition to return."}], "returns": [], "examples": []}, {"name": "metaobjectDefinitions", "description": "All metaobject definitions.", "arguments": [{"name": "after", "type": "String", "required": true, "description": "The elements that come after the specified cursor."}], "returns": [], "examples": []}, {"name": "metaobjects", "description": "All metaobjects for the shop.", "arguments": [{"name": "after", "type": "String", "required": true, "description": "The elements that come after the specified cursor."}], "returns": [], "examples": []}], "mutations": [{"name": "metaobjectBulkDelete", "description": "Asynchronously delete metaobjects and their associated metafields in bulk.", "arguments": [{"name": "where", "type": "MetaobjectBulkDeleteWhereCondition!", "required": true, "description": "Specifies the condition by which metaobjects are deleted.\nExactly one field of input is required."}], "returns": [], "examples": [{"description": "Delete metaobjects and their associated fields in bulk by IDs", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation DeleteMetaobjects($where: MetaobjectBulkDeleteWhereCondition!) {\n    metaobjectBulkDelete(where: $where) {\n      job {\n        id\n        done\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"where\": {\n    \"ids\": [\"gid://shopify/Metaobject/515107504\", \"gid://shopify/Metaobject/129678104\"]\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Delete metaobjects and their associated fields in bulk by type", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation DeleteMetaobjects($where: MetaobjectBulkDeleteWhereCondition!) {\n    metaobjectBulkDelete(where: $where) {\n      job {\n        id\n        done\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"where\": {\n    \"type\": \"lookbook\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "metaobjectBulkDelete reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation DeleteMetaobjects($where: MetaobjectBulkDeleteWhereCondition!) {\n    metaobjectBulkDelete(where: $where) {\n      job {\n        id\n        done\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"where\": {\n    \"ids\": [\"gid://shopify/Metaobject/515107504\", \"gid://shopify/Metaobject/129678104\"]\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "metaobjectCreate", "description": "Creates a new metaobject.", "arguments": [{"name": "metaobject", "type": "MetaobjectCreateInput!", "required": true, "description": "The parameters for the metaobject to create."}], "returns": [], "examples": [{"description": "Create a metaobject", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation CreateMetaobject($metaobject: MetaobjectCreateInput!) {\n    metaobjectCreate(metaobject: $metaobject) {\n      metaobject {\n        handle\n        season: field(key: \"season\") {\n          value\n        }\n      }\n      userErrors {\n        field\n        message\n        code\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"metaobject\": {\n    \"type\": \"lookbook\",\n    \"handle\": \"winter-2023\",\n    \"fields\": [{\"key\"=>\"season\", \"value\"=>\"winter\"}]\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "metaobjectCreate reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation CreateMetaobject($metaobject: MetaobjectCreateInput!) {\n    metaobjectCreate(metaobject: $metaobject) {\n      metaobject {\n        handle\n        season: field(key: \"season\") {\n          value\n        }\n      }\n      userErrors {\n        field\n        message\n        code\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"metaobject\": {\n    \"type\": \"lookbook\",\n    \"handle\": \"winter-2023\",\n    \"fields\": [{\"key\"=>\"season\", \"value\"=>\"winter\"}]\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "metaobjectDefinitionCreate", "description": "Creates a new metaobject definition.", "arguments": [{"name": "definition", "type": "MetaobjectDefinitionCreateInput!", "required": true, "description": "The input fields for creating a metaobject definition."}], "returns": [], "examples": [{"description": "Create a metaobject definition", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation CreateMetaobjectDefinition($definition: MetaobjectDefinitionCreateInput!) {\n    metaobjectDefinitionCreate(definition: $definition) {\n      metaobjectDefinition {\n        name\n        type\n        fieldDefinitions {\n          name\n          key\n        }\n      }\n      userErrors {\n        field\n        message\n        code\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"definition\": {\n    \"name\": \"Color swatch\",\n    \"type\": \"color-swatch\",\n    \"fieldDefinitions\": [{\"name\"=>\"Hex\", \"key\"=>\"hex\", \"type\"=>\"single_line_text_field\", \"validations\"=>[{\"name\"=>\"regex\", \"value\"=>\"^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$\"}]}]\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Create a metaobject definition with custom access controls", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation CreateMetaobjectDefinition($definition: MetaobjectDefinitionCreateInput!) {\n    metaobjectDefinitionCreate(definition: $definition) {\n      metaobjectDefinition {\n        name\n        type\n        access {\n          admin\n          storefront\n        }\n        fieldDefinitions {\n          name\n          key\n        }\n      }\n      userErrors {\n        field\n        message\n        code\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"definition\": {\n    \"name\": \"FAQ\",\n    \"type\": \"$app:faq\",\n    \"access\": {\n      \"admin\": \"MERCHANT_READ_WRITE\",\n      \"storefront\": \"PUBLIC_READ\"\n    },\n    \"fieldDefinitions\": [{\"name\"=>\"Question\", \"key\"=>\"question\", \"type\"=>\"single_line_text_field\", \"validations\"=>[{\"name\"=>\"max\", \"value\"=>\"100\"}]}, {\"name\"=>\"Answer\", \"key\"=>\"answer\", \"type\"=>\"multi_line_text_field\", \"validations\"=>[{\"name\"=>\"max\", \"value\"=>\"250\"}]}]\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Create a metaobject definition with the publishable capability enabled", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation CreateMetaobjectDefinition($definition: MetaobjectDefinitionCreateInput!) {\n    metaobjectDefinitionCreate(definition: $definition) {\n      metaobjectDefinition {\n        name\n        type\n        capabilities {\n          publishable {\n            enabled\n          }\n        }\n        fieldDefinitions {\n          name\n          key\n        }\n      }\n      userErrors {\n        field\n        message\n        code\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"definition\": {\n    \"name\": \"Custom Page\",\n    \"type\": \"$app:custom-page\",\n    \"capabilities\": {\n      \"publishable\": {\n        \"enabled\": true\n      }\n    },\n    \"fieldDefinitions\": [{\"name\"=>\"Title\", \"key\"=>\"title\", \"type\"=>\"single_line_text_field\", \"validations\"=>[{\"name\"=>\"max\", \"value\"=>\"100\"}]}, {\"name\"=>\"Author\", \"key\"=>\"author\", \"type\"=>\"single_line_text_field\", \"validations\"=>[{\"name\"=>\"max\", \"value\"=>\"32\"}]}]\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "metaobjectDefinitionCreate reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation CreateMetaobjectDefinition($definition: MetaobjectDefinitionCreateInput!) {\n    metaobjectDefinitionCreate(definition: $definition) {\n      metaobjectDefinition {\n        name\n        type\n        fieldDefinitions {\n          name\n          key\n        }\n      }\n      userErrors {\n        field\n        message\n        code\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"definition\": {\n    \"name\": \"Color swatch\",\n    \"type\": \"color-swatch\",\n    \"fieldDefinitions\": [{\"name\"=>\"Hex\", \"key\"=>\"hex\", \"type\"=>\"single_line_text_field\", \"validations\"=>[{\"name\"=>\"regex\", \"value\"=>\"^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$\"}]}]\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "metaobjectDefinitionDelete", "description": "Deletes the specified metaobject definition.\nAlso deletes all related metafield definitions, metaobjects, and metafields asynchronously.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID of the metaobjects definition to delete."}], "returns": [], "examples": [{"description": "Delete a metaobject definition", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation DeleteMetaobjectDefinition($id: ID!) {\n    metaobjectDefinitionDelete(id: $id) {\n      deletedId\n      userErrors {\n        field\n        message\n        code\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/MetaobjectDefinition/578408816\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "metaobjectDefinitionDelete reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation DeleteMetaobjectDefinition($id: ID!) {\n    metaobjectDefinitionDelete(id: $id) {\n      deletedId\n      userErrors {\n        field\n        message\n        code\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/MetaobjectDefinition/578408816\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "metaobjectDefinitionUpdate", "description": "Updates a metaobject definition with new settings and metafield definitions.", "arguments": [{"name": "definition", "type": "MetaobjectDefinitionUpdateInput!", "required": true, "description": "The input fields for updating a metaobject definition."}], "returns": [], "examples": [{"description": "Create additional field definitions on an existing metaobject definition", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation UpdateMetaobjectDefinition($id: ID!, $definition: MetaobjectDefinitionUpdateInput!) {\n    metaobjectDefinitionUpdate(id: $id, definition: $definition) {\n      metaobjectDefinition {\n        id\n        name\n        displayNameKey\n        fieldDefinitions {\n          name\n          key\n          type {\n            name\n          }\n        }\n      }\n      userErrors {\n        field\n        message\n        code\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/MetaobjectDefinition/578408816\",\n  \"definition\": {\n    \"displayNameKey\": \"description\",\n    \"fieldDefinitions\": [{\"create\"=>{\"key\"=>\"description\", \"name\"=>\"Description\", \"type\"=>\"single_line_text_field\"}}]\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Delete a field definition from a metaobject definition", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation UpdateMetaobjectDefinition($id: ID!, $definition: MetaobjectDefinitionUpdateInput!) {\n    metaobjectDefinitionUpdate(id: $id, definition: $definition) {\n      metaobjectDefinition {\n        id\n        name\n        fieldDefinitions {\n          name\n          key\n        }\n      }\n      userErrors {\n        field\n        message\n        code\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/MetaobjectDefinition/578408816\",\n  \"definition\": {\n    \"fieldDefinitions\": [{\"delete\"=>{\"key\"=>\"season\"}}]\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Update an existing field definition on a metaobject definition", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation UpdateMetaobjectDefinition($id: ID!, $definition: MetaobjectDefinitionUpdateInput!) {\n    metaobjectDefinitionUpdate(id: $id, definition: $definition) {\n      metaobjectDefinition {\n        name\n        fieldDefinitions {\n          name\n          key\n        }\n      }\n      userErrors {\n        field\n        message\n        code\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/MetaobjectDefinition/578408816\",\n  \"definition\": {\n    \"fieldDefinitions\": [{\"update\"=>{\"key\"=>\"season\", \"name\"=>\"Edition\"}}]\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Update base attributes of a metaobject definition", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation UpdateMetaobjectDefinition($id: ID!, $definition: MetaobjectDefinitionUpdateInput!) {\n    metaobjectDefinitionUpdate(id: $id, definition: $definition) {\n      metaobjectDefinition {\n        id\n        name\n        displayNameKey\n      }\n      userErrors {\n        field\n        message\n        code\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/MetaobjectDefinition/578408816\",\n  \"definition\": {\n    \"name\": \"StyleBook\",\n    \"displayNameKey\": \"season\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Update ordering of fields on an existing metaobject definition", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation UpdateMetaobjectDefinition($id: ID!, $definition: MetaobjectDefinitionUpdateInput!) {\n    metaobjectDefinitionUpdate(id: $id, definition: $definition) {\n      metaobjectDefinition {\n        id\n        name\n        fieldDefinitions {\n          name\n          key\n        }\n      }\n      userErrors {\n        field\n        message\n        code\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/MetaobjectDefinition/228758553\",\n  \"definition\": {\n    \"resetFieldOrder\": true,\n    \"fieldDefinitions\": [{\"update\"=>{\"key\"=>\"hex\"}}, {\"update\"=>{\"key\"=>\"name\"}}, {\"update\"=>{\"key\"=>\"accent_color\"}}]\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "metaobjectDefinitionUpdate reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation UpdateMetaobjectDefinition($id: ID!, $definition: MetaobjectDefinitionUpdateInput!) {\n    metaobjectDefinitionUpdate(id: $id, definition: $definition) {\n      metaobjectDefinition {\n        id\n        name\n        displayNameKey\n        fieldDefinitions {\n          name\n          key\n          type {\n            name\n          }\n        }\n      }\n      userErrors {\n        field\n        message\n        code\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/MetaobjectDefinition/578408816\",\n  \"definition\": {\n    \"displayNameKey\": \"description\",\n    \"fieldDefinitions\": [{\"create\"=>{\"key\"=>\"description\", \"name\"=>\"Description\", \"type\"=>\"single_line_text_field\"}}]\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "metaobjectDelete", "description": "Deletes the specified metaobject and its associated metafields.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID of the metaobject to delete."}], "returns": [], "examples": [{"description": "Deletes a metaobject", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation DeleteMetaobject($id: ID!) {\n    metaobjectDelete(id: $id) {\n      deletedId\n      userErrors {\n        field\n        message\n        code\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/Metaobject/515107504\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "metaobjectDelete reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation DeleteMetaobject($id: ID!) {\n    metaobjectDelete(id: $id) {\n      deletedId\n      userErrors {\n        field\n        message\n        code\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/Metaobject/515107504\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "metaobjectUpdate", "description": "Updates an existing metaobject.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID of the metaobject to update."}], "returns": [], "examples": [{"description": "Update a metaobject", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation UpdateMetaobject($id: ID!, $metaobject: MetaobjectUpdateInput!) {\n    metaobjectUpdate(id: $id, metaobject: $metaobject) {\n      metaobject {\n        handle\n        season: field(key: \"season\") {\n          value\n        }\n      }\n      userErrors {\n        field\n        message\n        code\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/Metaobject/515107504\",\n  \"metaobject\": {\n    \"fields\": [{\"key\"=>\"season\", \"value\"=>\"winter\"}]\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "metaobjectUpdate reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation UpdateMetaobject($id: ID!, $metaobject: MetaobjectUpdateInput!) {\n    metaobjectUpdate(id: $id, metaobject: $metaobject) {\n      metaobject {\n        handle\n        season: field(key: \"season\") {\n          value\n        }\n      }\n      userErrors {\n        field\n        message\n        code\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/Metaobject/515107504\",\n  \"metaobject\": {\n    \"fields\": [{\"key\"=>\"season\", \"value\"=>\"winter\"}]\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "metaobjectUpsert", "description": "Retrieves a metaobject by handle, then updates it with the provided input values.\nIf no matching metaobject is found, a new metaobject is created with the provided input values.", "arguments": [{"name": "handle", "type": "MetaobjectHandleInput!", "required": true, "description": "The identifier of the metaobject to upsert."}], "returns": [], "examples": [{"description": "Upsert a metaobject", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation UpsertMetaobject($handle: MetaobjectHandleInput!, $metaobject: MetaobjectUpsertInput!) {\n    metaobjectUpsert(handle: $handle, metaobject: $metaobject) {\n      metaobject {\n        handle\n        hex: field(key: \"hex\") {\n          value\n        }\n      }\n      userErrors {\n        field\n        message\n        code\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"handle\": {\n    \"type\": \"color\",\n    \"handle\": \"indigo-swatch\"\n  },\n  \"metaobject\": {\n    \"fields\": [{\"key\"=>\"hex\", \"value\"=>\"#4B0082\"}]\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "metaobjectUpsert reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation UpsertMetaobject($handle: MetaobjectHandleInput!, $metaobject: MetaobjectUpsertInput!) {\n    metaobjectUpsert(handle: $handle, metaobject: $metaobject) {\n      metaobject {\n        handle\n        hex: field(key: \"hex\") {\n          value\n        }\n      }\n      userErrors {\n        field\n        message\n        code\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"handle\": {\n    \"type\": \"color\",\n    \"handle\": \"indigo-swatch\"\n  },\n  \"metaobject\": {\n    \"fields\": [{\"key\"=>\"hex\", \"value\"=>\"#4B0082\"}]\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "standardMetaobjectDefinitionEnable", "description": "Enables the specified standard metaobject definition from its template.", "arguments": [{"name": "type", "type": "String!", "required": true, "description": "The type of the metaobject definition to enable."}], "returns": [], "examples": []}], "objects": [{"name": "Metaobject", "description": "Provides an object instance represented by a MetaobjectDefinition.", "fields_and_connections": [{"name": "capabilities", "type": "MetaobjectCapabilityData!", "description": "Metaobject capabilities for this Metaobject.", "not_nullable": true}], "examples": []}, {"name": "MetaobjectAccess", "description": "Access permissions for the definition's metaobjects.", "fields_and_connections": [{"name": "admin", "type": "MetaobjectAdminAccess!", "description": "The access permitted on the Admin API.", "not_nullable": true}], "examples": []}, {"name": "MetaobjectCapabilities", "description": "Provides the capabilities of a metaobject definition.", "fields_and_connections": [{"name": "onlineStore", "type": "MetaobjectCapabilitiesOnlineStore", "description": "Indicates whether a metaobject definition can be displayed as a page on the Online Store.", "not_nullable": true}], "examples": []}, {"name": "MetaobjectCapabilitiesOnlineStore", "description": "The Online Store capability of a metaobject definition.", "fields_and_connections": [{"name": "data", "type": "MetaobjectCapabilityDefinitionDataOnlineStore", "description": "The data associated with the Online Store capability.", "not_nullable": true}], "examples": []}, {"name": "MetaobjectCapabilitiesPublishable", "description": "The publishable capability of a metaobject definition.", "fields_and_connections": [{"name": "enabled", "type": "Boolean!", "description": "Indicates if the capability is enabled.", "not_nullable": true}], "examples": []}, {"name": "MetaobjectCapabilitiesRenderable", "description": "The renderable capability of a metaobject definition.", "fields_and_connections": [{"name": "data", "type": "MetaobjectCapabilityDefinitionDataRenderable", "description": "The data associated with the renderable capability.", "not_nullable": true}], "examples": []}, {"name": "MetaobjectCapabilitiesTranslatable", "description": "The translatable capability of a metaobject definition.", "fields_and_connections": [{"name": "enabled", "type": "Boolean!", "description": "Indicates if the capability is enabled.", "not_nullable": true}], "examples": []}, {"name": "MetaobjectCapabilityData", "description": "Provides the capabilities of a metaobject.", "fields_and_connections": [{"name": "onlineStore", "type": "MetaobjectCapabilityDataOnlineStore", "description": "The Online Store capability for this metaobject.", "not_nullable": false}], "examples": []}, {"name": "MetaobjectCapabilityDataOnlineStore", "description": "The Online Store capability for the parent metaobject.", "fields_and_connections": [{"name": "templateSuffix", "type": "String", "description": "The theme template used when viewing the metaobject in a store.", "not_nullable": false}], "examples": []}, {"name": "MetaobjectCapabilityDataPublishable", "description": "The publishable capability for the parent metaobject.", "fields_and_connections": [{"name": "status", "type": "MetaobjectStatus!", "description": "The visibility status of this metaobject across all channels.", "not_nullable": true}], "examples": []}, {"name": "MetaobjectCapabilityDefinitionDataOnlineStore", "description": "The Online Store capability data for the metaobject definition.", "fields_and_connections": [{"name": "canCreateRedirects", "type": "Boolean!", "description": "Flag indicating if a sufficient number of redirects are available to redirect all published entries.", "not_nullable": true}], "examples": []}, {"name": "MetaobjectCapabilityDefinitionDataRenderable", "description": "The renderable capability data for the metaobject definition.", "fields_and_connections": [{"name": "metaDescriptionKey", "type": "String", "description": "The metaobject field used as an alias for the SEO page description.", "not_nullable": false}], "examples": []}, {"name": "MetaobjectDefinition", "description": "Provides the definition of a generic object structure composed of metafields.", "fields_and_connections": [{"name": "access", "type": "MetaobjectAccess!", "description": "Access configuration for the metaobject definition.", "not_nullable": true}], "examples": []}, {"name": "MetaobjectField", "description": "Provides a field definition and the data value assigned to it.", "fields_and_connections": [{"name": "definition", "type": "MetaobjectFieldDefinition!", "description": "The field definition for this object key.", "not_nullable": true}], "examples": []}, {"name": "MetaobjectFieldDefinition", "description": "Defines a field for a MetaobjectDefinition with properties\nsuch as the field's data type and validations.", "fields_and_connections": [{"name": "description", "type": "String", "description": "The administrative description.", "not_nullable": true}], "examples": []}]}, {"name": "Online store", "queries": [{"name": "article", "description": "Returns an Article resource by ID.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID of the Article to return."}], "returns": [], "examples": [{"description": "Overview", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query ArticleShow($id: ID!) {\n    article(id: $id) {\n      id\n      author {\n        name\n      }\n      createdAt\n      handle\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/Article/959752435\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "articleAuthors", "description": "List of article authors for the shop.", "arguments": [{"name": "after", "type": "String", "required": true, "description": "The elements that come after the specified cursor."}], "returns": [], "examples": []}, {"name": "articles", "description": "List of the shop's articles.", "arguments": [{"name": "after", "type": "String", "required": true, "description": "The elements that come after the specified cursor."}], "returns": [], "examples": []}, {"name": "blog", "description": "Returns a Blog resource by ID.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID of the Blog to return."}], "returns": [], "examples": [{"description": "Receive a single Blog", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query BlogShow($id: ID!) {\n    blog(id: $id) {\n      id\n      title\n      handle\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/Blog/397675442\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Retrieves a count of all articles from a blog", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query BlogArticleCount($id: ID!) {\n    blog(id: $id) {\n      articlesCount {\n        count\n        precision\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/Blog/397675442\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Retrieves a list of all articles from a blog", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query BlogArticleList($id: ID!) {\n    blog(id: $id) {\n      id\n      articles(first: 10) {\n        nodes {\n          id\n          handle\n          author {\n            firstName\n            lastName\n          }\n          body\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/Blog/397675442\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "blogs", "description": "List of the shop's blogs.", "arguments": [{"name": "after", "type": "String", "required": true, "description": "The elements that come after the specified cursor."}], "returns": [], "examples": [{"description": "Overview", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query BlogList {\n    blogs(first: 50) {\n      nodes {\n        id\n        handle\n        title\n        updatedAt\n        commentPolicy\n        feed {\n          path\n          location\n        }\n        createdAt\n        templateSuffix\n        tags\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}]}, {"name": "blogsCount", "description": "Count of blogs.", "arguments": [{"name": "query", "type": "String", "required": true, "description": "A filter made up of terms, connectives, modifiers, and comparators.\nYou can apply one or more filters to a query. Learn more about Shopify API search syntax."}], "returns": [], "examples": [{"description": "Overview", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query BlogsCount {\n    blogsCount {\n      count\n      precision\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}]}, {"name": "comment", "description": "Returns a Comment resource by ID.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID of the Comment to return."}], "returns": [], "examples": [{"description": "Overview", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query CommentShow($id: ID!) {\n    comment(id: $id) {\n      id\n      body\n      bodyHtml\n      author {\n        name\n      }\n      ip\n      publishedAt\n      status\n      userAgent\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/Comment/9450891\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "comments", "description": "List of the shop's comments.", "arguments": [{"name": "after", "type": "String", "required": true, "description": "The elements that come after the specified cursor."}], "returns": [], "examples": [{"description": "Overview", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query CommentList {\n    comments(first: 50) {\n      nodes {\n        id\n        body\n        bodyHtml\n        author {\n          name\n        }\n        ip\n        publishedAt\n        status\n        userAgent\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}]}, {"name": "customerAccountPage", "description": "Returns a customer account page.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID of the CustomerAccountPage to return."}], "returns": [], "examples": []}, {"name": "customerAccountPages", "description": "List of the shop's customer account pages.", "arguments": [{"name": "after", "type": "String", "required": true, "description": "The elements that come after the specified cursor."}], "returns": [], "examples": []}, {"name": "menu", "description": "Returns a Menu resource by ID.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID of the Menu to return."}], "returns": [], "examples": []}, {"name": "menus", "description": "The shop's menus.", "arguments": [{"name": "after", "type": "String", "required": true, "description": "The elements that come after the specified cursor."}], "returns": [], "examples": []}, {"name": "onlineStore", "description": "The shop's online store channel.", "arguments": [{"name": "OnlineStore", "type": "OnlineStore!", "required": true, "description": "The shop's online store channel."}], "returns": [], "examples": []}, {"name": "page", "description": "Returns a Page resource by ID.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID of the Page to return."}], "returns": [], "examples": [{"description": "Overview", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query PageShow($id: ID!) {\n    page(id: $id) {\n      id\n      title\n      handle\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/Page/602767277\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "pages", "description": "List of the shop's pages.", "arguments": [{"name": "after", "type": "String", "required": true, "description": "The elements that come after the specified cursor."}], "returns": [], "examples": [{"description": "Overview", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query PageList {\n    pages(first: 10) {\n      edges {\n        node {\n          id\n        }\n      }\n      pageInfo {\n        endCursor\n        hasNextPage\n        hasPreviousPage\n        startCursor\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}]}, {"name": "pagesCount", "description": "Count of pages.", "arguments": [{"name": "Count", "type": "Count", "required": true, "description": "Details for count of elements."}], "returns": [], "examples": [{"description": "Overview", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query PagesCount {\n    pagesCount {\n      count\n      precision\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}]}, {"name": "scriptTag", "description": "Theme app extensions\n  Your app might not pass App Store review if it uses script tags instead of theme app extensions. All new apps, and apps that integrate with Online Store 2.0 themes, should use theme app extensions, such as app blocks or app embed blocks. Script tags are an alternative you can use with only vintage themes. Learn more.\n\nScript tag deprecation\n  Script tags will be sunset for the Order status page on August 28, 2025. Upgrade to Checkout Extensibility before this date. Shopify Scripts will continue to work alongside Checkout Extensibility until August 28, 2025.\n\n\nLookup a script tag resource by ID.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID of the ScriptTag to return."}], "returns": [], "examples": [{"description": "Overview", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query GetScriptTag($id: ID!) {\n    scriptTag(id: $id) {\n      id\n      cache\n      createdAt\n      displayScope\n      src\n      updatedAt\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/ScriptTag/466217408\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "scriptTags", "description": "Theme app extensions\n  Your app might not pass App Store review if it uses script tags instead of theme app extensions. All new apps, and apps that integrate with Online Store 2.0 themes, should use theme app extensions, such as app blocks or app embed blocks. Script tags are an alternative you can use with only vintage themes. Learn more.\n\nScript tag deprecation\n  Script tags will be sunset for the Order status page on August 28, 2025. Upgrade to Checkout Extensibility before this date. Shopify Scripts will continue to work alongside Checkout Extensibility until August 28, 2025.\n\n\nA list of script tags.", "arguments": [{"name": "after", "type": "String", "required": true, "description": "The elements that come after the specified cursor."}], "returns": [], "examples": [{"description": "Get the first five script tags", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    scriptTags(first: 5) {\n      edges {\n        node {\n          id\n        }\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "Get the first script tag with a specific source URL", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    scriptTags(first: 1, src: \"https://js.example.org/foo.js\") {\n      edges {\n        node {\n          id\n        }\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "Retrieves a list of all script tags", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query GetScriptTags($first: Int!, $cursor: String) {\n    scriptTags(first: $first, after: $cursor) {\n      nodes {\n        id\n        cache\n        createdAt\n        displayScope\n        src\n        updatedAt\n      }\n      pageInfo {\n        startCursor\n        endCursor\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"first\": 5,\n  \"cursor\": nil\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "theme", "description": "Returns a particular theme for the shop.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID of the theme."}], "returns": [], "examples": [{"description": "Get file content by theme id and filename", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    theme(id: \"gid://shopify/OnlineStoreTheme/225007463\") {\n      id\n      name\n      role\n      files(filenames: [\"assets/index.js\"], first: 1) {\n        nodes {\n          body {\n            ... on OnlineStoreThemeFileBodyText {\n              content\n            }\n          }\n        }\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "Get theme by id", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    theme(id: \"gid://shopify/OnlineStoreTheme/529529152\") {\n      id\n      name\n      role\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "Get theme files by theme id", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    theme(id: \"gid://shopify/OnlineStoreTheme/225007463\") {\n      id\n      name\n      role\n      files {\n        edges {\n          node {\n            filename\n            body {\n              ... on OnlineStoreThemeFileBodyText {\n                content\n              }\n            }\n          }\n        }\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "Retrieves a list of assets for a theme", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query ThemeFilesPaginated($themeId: ID!) {\n    theme(id: $themeId) {\n      files(first: 50) {\n        edges {\n          node {\n            body {\n              ... on OnlineStoreThemeFileBodyBase64 {\n                contentBase64\n              }\n              ... on OnlineStoreThemeFileBodyText {\n                content\n              }\n              ... on OnlineStoreThemeFileBodyUrl {\n                url\n              }\n            }\n            checksumMd5\n            contentType\n            createdAt\n            filename\n            size\n            updatedAt\n          }\n          cursor\n        }\n        pageInfo {\n          endCursor\n          hasNextPage\n          hasPreviousPage\n          startCursor\n        }\n        userErrors {\n          code\n          filename\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"themeId\": \"gid://shopify/OnlineStoreTheme/225007463\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Retrieves a single asset for a theme", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query ThemeFiles($themeId: ID!, $filenames: [String!]!) {\n    theme(id: $themeId) {\n      files(filenames: $filenames) {\n        nodes {\n          body {\n            ... on OnlineStoreThemeFileBodyBase64 {\n              contentBase64\n            }\n            ... on OnlineStoreThemeFileBodyText {\n              content\n            }\n            ... on OnlineStoreThemeFileBodyUrl {\n              url\n            }\n          }\n          checksumMd5\n          contentType\n          createdAt\n          filename\n          size\n          updatedAt\n        }\n        userErrors {\n          code\n          filename\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"themeId\": \"gid://shopify/OnlineStoreTheme/225007463\",\n  \"filenames\": [\"assets/index.js\"]\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Retrieves a single theme by its ID", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query Theme($id: ID!) {\n    theme(id: $id) {\n      createdAt\n      id\n      name\n      prefix\n      processing\n      processingFailed\n      role\n      themeStoreId\n      updatedAt\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/OnlineStoreTheme/529529152\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "themes", "description": "Returns a paginated list of themes for the shop.", "arguments": [{"name": "after", "type": "String", "required": true, "description": "The elements that come after the specified cursor."}], "returns": [], "examples": [{"description": "Get first theme", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    themes(first: 1) {\n      edges {\n        node {\n          name\n          id\n          role\n        }\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "Get themes by name", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    themes(first: 10, names: [\"Com*\", \"Development\"]) {\n      nodes {\n        id\n        name\n        role\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "Retrieves a list of themes", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query ThemeList {\n    themes(first: 10) {\n      edges {\n        node {\n          createdAt\n          id\n          name\n          prefix\n          processing\n          processingFailed\n          role\n          themeStoreId\n          updatedAt\n        }\n        cursor\n      }\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}]}, {"name": "urlRedirect", "description": "Returns a redirect resource by ID.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID of the UrlRedirect to return."}], "returns": [], "examples": [{"description": "Overview", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query UrlRedirect($id: ID!) {\n    urlRedirect(id: $id) {\n      id\n      path\n      target\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/UrlRedirect/905192165\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "urlRedirectImport", "description": "Returns a redirect import resource by ID.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID of the UrlRedirectImport to return."}], "returns": [], "examples": []}, {"name": "urlRedirects", "description": "A list of redirects for a shop.", "arguments": [{"name": "after", "type": "String", "required": true, "description": "The elements that come after the specified cursor."}], "returns": [], "examples": [{"description": "Overview", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query UrlRedirects {\n    urlRedirects(first: 100) {\n      edges {\n        node {\n          id\n          path\n          target\n        }\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}]}, {"name": "urlRedirectSavedSearches", "description": "A list of the shop's URL redirect saved searches.", "arguments": [{"name": "after", "type": "String", "required": true, "description": "The elements that come after the specified cursor."}], "returns": [], "examples": []}, {"name": "urlRedirectsCount", "description": "Count of redirects. Limited to a maximum of 10000.", "arguments": [{"name": "query", "type": "String", "required": true, "description": "A filter made up of terms, connectives, modifiers, and comparators.\nYou can apply one or more filters to a query. Learn more about Shopify API search syntax."}], "returns": [], "examples": [{"description": "Overview", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query RedirectCount {\n    urlRedirectsCount {\n      count\n      precision\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}]}], "mutations": [{"name": "articleCreate", "description": "Creates an article.", "arguments": [{"name": "article", "type": "ArticleCreateInput!", "required": true, "description": "The properties of the new article."}], "returns": [], "examples": [{"description": "Creates an article for a blog", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation CreateArticle($article: ArticleCreateInput!) {\n    articleCreate(article: $article) {\n      article {\n        id\n        title\n        author {\n          name\n        }\n        handle\n        body\n        summary\n        tags\n        image {\n          altText\n          originalSrc\n        }\n      }\n      userErrors {\n        code\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"article\": {\n    \"blogId\": \"gid://shopify/Blog/389767568\",\n    \"title\": \"New Article Title\",\n    \"author\": {\n      \"name\": \"Test User\"\n    },\n    \"handle\": \"new-article-title\",\n    \"body\": \"This is the content of the article.\",\n    \"summary\": \"This is a summary of the article.\",\n    \"isPublished\": true,\n    \"publishDate\": \"2023-01-01T12:00:00Z\",\n    \"tags\": [\"Tag1\", \"Tag2\"],\n    \"image\": {\n      \"altText\": \"Alt text for the image\",\n      \"url\": \"http://example.com/fake_image.jpg\"\n    }\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "articleCreate reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation CreateArticle($article: ArticleCreateInput!) {\n    articleCreate(article: $article) {\n      article {\n        id\n        title\n        author {\n          name\n        }\n        handle\n        body\n        summary\n        tags\n        image {\n          altText\n          originalSrc\n        }\n      }\n      userErrors {\n        code\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"article\": {\n    \"blogId\": \"gid://shopify/Blog/389767568\",\n    \"title\": \"New Article Title\",\n    \"author\": {\n      \"name\": \"Test User\"\n    },\n    \"handle\": \"new-article-title\",\n    \"body\": \"This is the content of the article.\",\n    \"summary\": \"This is a summary of the article.\",\n    \"isPublished\": true,\n    \"publishDate\": \"2023-01-01T12:00:00Z\",\n    \"tags\": [\"Tag1\", \"Tag2\"],\n    \"image\": {\n      \"altText\": \"Alt text for the image\",\n      \"url\": \"http://example.com/fake_image.jpg\"\n    }\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "articleDelete", "description": "Deletes an article.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID of the article to be deleted."}], "returns": [], "examples": [{"description": "Deletes an article", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation DeleteArticle($id: ID!) {\n    articleDelete(id: $id) {\n      deletedArticleId\n      userErrors {\n        code\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/Article/959752435\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "articleDelete reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation DeleteArticle($id: ID!) {\n    articleDelete(id: $id) {\n      deletedArticleId\n      userErrors {\n        code\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/Article/959752435\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "articleUpdate", "description": "Updates an article.", "arguments": [{"name": "article", "type": "ArticleUpdateInput!", "required": true, "description": "The properties of the article to be updated."}], "returns": [], "examples": [{"description": "Updates an article", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation UpdateArticle($id: ID!, $article: ArticleUpdateInput!) {\n    articleUpdate(id: $id, article: $article) {\n      article {\n        id\n        title\n        handle\n        body\n        summary\n        tags\n        image {\n          altText\n          originalSrc\n        }\n      }\n      userErrors {\n        code\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/Article/959752435\",\n  \"article\": {\n    \"title\": \"Updated Article Title\",\n    \"handle\": \"updated-article-title\",\n    \"body\": \"This is the updated content of the article.\",\n    \"summary\": \"This is an updated summary of the article.\",\n    \"tags\": [\"UpdatedTag1\", \"UpdatedTag2\"],\n    \"image\": {\n      \"altText\": \"Updated alt text for the image\",\n      \"url\": \"http://example.com/fake_image.jpg\"\n    }\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "articleUpdate reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation UpdateArticle($id: ID!, $article: ArticleUpdateInput!) {\n    articleUpdate(id: $id, article: $article) {\n      article {\n        id\n        title\n        handle\n        body\n        summary\n        tags\n        image {\n          altText\n          originalSrc\n        }\n      }\n      userErrors {\n        code\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/Article/959752435\",\n  \"article\": {\n    \"title\": \"Updated Article Title\",\n    \"handle\": \"updated-article-title\",\n    \"body\": \"This is the updated content of the article.\",\n    \"summary\": \"This is an updated summary of the article.\",\n    \"tags\": [\"UpdatedTag1\", \"UpdatedTag2\"],\n    \"image\": {\n      \"altText\": \"Updated alt text for the image\",\n      \"url\": \"http://example.com/fake_image.jpg\"\n    }\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "blogCreate", "description": "Creates a blog.", "arguments": [{"name": "blog", "type": "BlogCreateInput!", "required": true, "description": "The properties of the new blog."}], "returns": [], "examples": [{"description": "Create a new Blog", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation CreateBlog($blog: BlogCreateInput!) {\n    blogCreate(blog: $blog) {\n      blog {\n        id\n        title\n        handle\n        templateSuffix\n        commentPolicy\n      }\n      userErrors {\n        code\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"blog\": {\n    \"title\": \"New Blog Title\",\n    \"handle\": \"new-blog-title\",\n    \"templateSuffix\": \"standard\",\n    \"commentPolicy\": \"MODERATED\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "blogCreate reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation CreateBlog($blog: BlogCreateInput!) {\n    blogCreate(blog: $blog) {\n      blog {\n        id\n        title\n        handle\n        templateSuffix\n        commentPolicy\n      }\n      userErrors {\n        code\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"blog\": {\n    \"title\": \"New Blog Title\",\n    \"handle\": \"new-blog-title\",\n    \"templateSuffix\": \"standard\",\n    \"commentPolicy\": \"MODERATED\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "blogDelete", "description": "Deletes a blog.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID of the blog to be deleted."}], "returns": [], "examples": [{"description": "Remove an existing Blog", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation DeleteBlog($id: ID!) {\n    blogDelete(id: $id) {\n      deletedBlogId\n      userErrors {\n        code\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/Blog/389767568\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "blogDelete reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation DeleteBlog($id: ID!) {\n    blogDelete(id: $id) {\n      deletedBlogId\n      userErrors {\n        code\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/Blog/389767568\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "blogUpdate", "description": "Updates a blog.", "arguments": [{"name": "blog", "type": "BlogUpdateInput!", "required": true, "description": "The properties of the blog to be updated."}], "returns": [], "examples": [{"description": "Modify an existing Blog", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation UpdateBlog($id: ID!, $blog: BlogUpdateInput!) {\n    blogUpdate(id: $id, blog: $blog) {\n      blog {\n        id\n        title\n        handle\n        templateSuffix\n        commentPolicy\n      }\n      userErrors {\n        code\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/Blog/389767568\",\n  \"blog\": {\n    \"title\": \"Updated Blog Title\",\n    \"handle\": \"updated-blog-title\",\n    \"templateSuffix\": \"updated_template\",\n    \"commentPolicy\": \"MODERATED\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "blogUpdate reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation UpdateBlog($id: ID!, $blog: BlogUpdateInput!) {\n    blogUpdate(id: $id, blog: $blog) {\n      blog {\n        id\n        title\n        handle\n        templateSuffix\n        commentPolicy\n      }\n      userErrors {\n        code\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/Blog/389767568\",\n  \"blog\": {\n    \"title\": \"Updated Blog Title\",\n    \"handle\": \"updated-blog-title\",\n    \"templateSuffix\": \"updated_template\",\n    \"commentPolicy\": \"MODERATED\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "commentApprove", "description": "Approves a comment.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID of the comment to be approved."}], "returns": [], "examples": [{"description": "Approves a comment", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation ApproveComment($id: ID!) {\n    commentApprove(id: $id) {\n      comment {\n        id\n        status\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/Comment/757536350\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "commentApprove reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation ApproveComment($id: ID!) {\n    commentApprove(id: $id) {\n      comment {\n        id\n        status\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/Comment/757536350\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "commentDelete", "description": "Deletes a comment.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID of the comment to be deleted."}], "returns": [], "examples": [{"description": "Removes a comment", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation CommentDelete($id: ID!) {\n    commentDelete(id: $id) {\n      deletedCommentId\n      userErrors {\n        code\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/Comment/757536350\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "commentDelete reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation CommentDelete($id: ID!) {\n    commentDelete(id: $id) {\n      deletedCommentId\n      userErrors {\n        code\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/Comment/757536350\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "commentNotSpam", "description": "Marks a comment as not spam.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID of the comment to be marked as not spam."}], "returns": [], "examples": [{"description": "Marks a comment as not spam", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation CommentNotSpam($id: ID!) {\n    commentNotSpam(id: $id) {\n      comment {\n        id\n      }\n      userErrors {\n        code\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/Comment/9450891\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "commentNotSpam reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation CommentNotSpam($id: ID!) {\n    commentNotSpam(id: $id) {\n      comment {\n        id\n      }\n      userErrors {\n        code\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/Comment/9450891\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "commentSpam", "description": "Marks a comment as spam.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID of the comment to be marked as spam."}], "returns": [], "examples": [{"description": "Marks a comment as spam", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation MarkCommentAsSpam($id: ID!) {\n    commentSpam(id: $id) {\n      comment {\n        id\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/Comment/757536350\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "commentSpam reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation MarkCommentAsSpam($id: ID!) {\n    commentSpam(id: $id) {\n      comment {\n        id\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/Comment/757536350\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "menuCreate", "description": "Creates a menu.", "arguments": [{"name": "handle", "type": "String!", "required": true, "description": "The menu's handle."}], "returns": [], "examples": [{"description": "Create a menu", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation CreateMenu($title: String!, $handle: String!, $items: [MenuItemCreateInput!]!) {\n    menuCreate(title: $title, handle: $handle, items: $items) {\n      menu {\n        id\n        handle\n        items {\n          id\n          title\n          items {\n            id\n            title\n          }\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"title\": \"Sidebar\",\n  \"handle\": \"sidebar\",\n  \"items\": [{\"title\"=>\"Collections\", \"type\"=>\"COLLECTION\", \"url\"=>\"/collection\", \"items\"=>[{\"title\"=>\"Bestsellers\", \"type\"=>\"COLLECTION\", \"resourceId\"=>\"gid://shopify/Collection/1007901140\", \"url\"=>\"/collection/bestsellers/new\", \"tags\"=>[\"new\"], \"items\"=>[]}]}, {\"title\"=>\"Products\", \"type\"=>\"CATALOG\", \"url\"=>\"/collections/all\", \"items\"=>[]}, {\"title\"=>\"About us\", \"type\"=>\"PAGE\", \"resourceId\"=>\"gid://shopify/Page/905192165\", \"url\"=>\"/pages/about-us\", \"items\"=>[]}]\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "menuCreate reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation CreateMenu($title: String!, $handle: String!, $items: [MenuItemCreateInput!]!) {\n    menuCreate(title: $title, handle: $handle, items: $items) {\n      menu {\n        id\n        handle\n        items {\n          id\n          title\n          items {\n            id\n            title\n          }\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"title\": \"Sidebar\",\n  \"handle\": \"sidebar\",\n  \"items\": [{\"title\"=>\"Collections\", \"type\"=>\"COLLECTION\", \"url\"=>\"/collection\", \"items\"=>[{\"title\"=>\"Bestsellers\", \"type\"=>\"COLLECTION\", \"resourceId\"=>\"gid://shopify/Collection/1007901140\", \"url\"=>\"/collection/bestsellers/new\", \"tags\"=>[\"new\"], \"items\"=>[]}]}, {\"title\"=>\"Products\", \"type\"=>\"CATALOG\", \"url\"=>\"/collections/all\", \"items\"=>[]}, {\"title\"=>\"About us\", \"type\"=>\"PAGE\", \"resourceId\"=>\"gid://shopify/Page/905192165\", \"url\"=>\"/pages/about-us\", \"items\"=>[]}]\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "menuDelete", "description": "Deletes a menu.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID of the menu to be deleted."}], "returns": [], "examples": [{"description": "Failing to delete the main menu", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation DeleteMenu($id: ID!) {\n    menuDelete(id: $id) {\n      deletedMenuId\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/Menu/166235728\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Successfully deleting a menu", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation DeleteMenu($id: ID!) {\n    menuDelete(id: $id) {\n      deletedMenuId\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/Menu/166235728\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "menuDelete reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation DeleteMenu($id: ID!) {\n    menuDelete(id: $id) {\n      deletedMenuId\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/Menu/166235728\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "menuUpdate", "description": "Updates a menu.", "arguments": [{"name": "handle", "type": "String", "required": true, "description": "The menu's handle."}], "returns": [], "examples": [{"description": "Update a menu", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation UpdateMenu($id: ID!, $title: String!, $handle: String!, $items: [MenuItemUpdateInput!]!) {\n    menuUpdate(id: $id, title: $title, handle: $handle, items: $items) {\n      menu {\n        id\n        handle\n        items {\n          id\n          title\n          items {\n            id\n            title\n          }\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/Menu/442047006\",\n  \"title\": \"updated menu\",\n  \"handle\": \"danielstuff-main-menu\",\n  \"items\": [{\"id\"=>\"gid://shopify/MenuItem/398712010\", \"title\"=>\"Electronics\", \"url\"=>\"collection/tables\", \"resourceId\"=>\"gid://shopify/Collection/71762467\", \"type\"=>\"COLLECTION\", \"items\"=>[]}, {\"id\"=>\"gid://shopify/MenuItem/643685044\", \"title\"=>\"Furniture\", \"url\"=>\"/collections/furniture\", \"resourceId\"=>\"gid://shopify/Collection/643685044\", \"type\"=>\"COLLECTION\", \"items\"=>[{\"id\"=>\"gid://shopify/MenuItem/927352226\", \"title\"=>\"Updated Living Room\", \"url\"=>\"/collections/living-room\", \"resourceId\"=>\"gid://shopify/Collection/927352226\", \"type\"=>\"COLLECTION\", \"items\"=>[{\"id\"=>\"gid://shopify/MenuItem/307741084\", \"title\"=>\"Sofa\", \"url\"=>\"/collections/sofa\", \"resourceId\"=>\"gid://shopify/Collection/307741084\", \"type\"=>\"COLLECTION\", \"items\"=>[]}, {\"id\"=>\"gid://shopify/MenuItem/375350346\", \"title\"=>\"Sound System\", \"url\"=>\"/collections/sound-system\", \"resourceId\"=>\"gid://shopify/Collection/375350346\", \"type\"=>\"COLLECTION\", \"items\"=>[]}, {\"id\"=>\"gid://shopify/MenuItem/837241978\", \"title\"=>\"Massage Chairs\", \"url\"=>\"/collections/massage%20chairs\", \"resourceId\"=>\"gid://shopify/Collection/837241978\", \"type\"=>\"COLLECTION\", \"items\"=>[]}, {\"id\"=>\"gid://shopify/MenuItem/960081962\", \"title\"=>\"Living Room Rugs\", \"url\"=>\"/collections/living%20room%20rugs\", \"resourceId\"=>\"gid://shopify/Collection/960081962\", \"type\"=>\"COLLECTION\", \"items\"=>[]}]}, {\"id\"=>\"gid://shopify/MenuItem/715378231\", \"title\"=>\"Kitchen\", \"url\"=>\"/collections/kitchen\", \"resourceId\"=>\"gid://shopify/Collection/715378231\", \"type\"=>\"COLLECTION\", \"items\"=>[{\"id\"=>\"gid://shopify/MenuItem/108641250\", \"title\"=>\"Chairs\", \"url\"=>\"/collections/chairs\", \"resourceId\"=>\"gid://shopify/Collection/108641250\", \"type\"=>\"COLLECTION\", \"items\"=>[]}, {\"id\"=>\"gid://shopify/MenuItem/71762467\", \"title\"=>\"Tables\", \"url\"=>\"/collections/tables\", \"resourceId\"=>\"gid://shopify/Collection/71762467\", \"type\"=>\"COLLECTION\", \"items\"=>[]}, {\"id\"=>\"gid://shopify/MenuItem/826396515\", \"title\"=>\"Kitchen Rugs\", \"url\"=>\"/collections/kitchen%20rugs\", \"resourceId\"=>\"gid://shopify/Collection/826396515\", \"type\"=>\"COLLECTION\", \"items\"=>[]}]}]}, {\"id\"=>\"gid://shopify/MenuItem/698896745\", \"title\"=>\"Mega Sofa Sale\", \"url\"=>\"/collections/mega%20sale\", \"resourceId\"=>\"gid://shopify/Collection/307741084\", \"type\"=>\"COLLECTION\", \"items\"=>[]}]\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "menuUpdate reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation UpdateMenu($id: ID!, $title: String!, $handle: String!, $items: [MenuItemUpdateInput!]!) {\n    menuUpdate(id: $id, title: $title, handle: $handle, items: $items) {\n      menu {\n        id\n        handle\n        items {\n          id\n          title\n          items {\n            id\n            title\n          }\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/Menu/442047006\",\n  \"title\": \"updated menu\",\n  \"handle\": \"danielstuff-main-menu\",\n  \"items\": [{\"id\"=>\"gid://shopify/MenuItem/398712010\", \"title\"=>\"Electronics\", \"url\"=>\"collection/tables\", \"resourceId\"=>\"gid://shopify/Collection/71762467\", \"type\"=>\"COLLECTION\", \"items\"=>[]}, {\"id\"=>\"gid://shopify/MenuItem/643685044\", \"title\"=>\"Furniture\", \"url\"=>\"/collections/furniture\", \"resourceId\"=>\"gid://shopify/Collection/643685044\", \"type\"=>\"COLLECTION\", \"items\"=>[{\"id\"=>\"gid://shopify/MenuItem/927352226\", \"title\"=>\"Updated Living Room\", \"url\"=>\"/collections/living-room\", \"resourceId\"=>\"gid://shopify/Collection/927352226\", \"type\"=>\"COLLECTION\", \"items\"=>[{\"id\"=>\"gid://shopify/MenuItem/307741084\", \"title\"=>\"Sofa\", \"url\"=>\"/collections/sofa\", \"resourceId\"=>\"gid://shopify/Collection/307741084\", \"type\"=>\"COLLECTION\", \"items\"=>[]}, {\"id\"=>\"gid://shopify/MenuItem/375350346\", \"title\"=>\"Sound System\", \"url\"=>\"/collections/sound-system\", \"resourceId\"=>\"gid://shopify/Collection/375350346\", \"type\"=>\"COLLECTION\", \"items\"=>[]}, {\"id\"=>\"gid://shopify/MenuItem/837241978\", \"title\"=>\"Massage Chairs\", \"url\"=>\"/collections/massage%20chairs\", \"resourceId\"=>\"gid://shopify/Collection/837241978\", \"type\"=>\"COLLECTION\", \"items\"=>[]}, {\"id\"=>\"gid://shopify/MenuItem/960081962\", \"title\"=>\"Living Room Rugs\", \"url\"=>\"/collections/living%20room%20rugs\", \"resourceId\"=>\"gid://shopify/Collection/960081962\", \"type\"=>\"COLLECTION\", \"items\"=>[]}]}, {\"id\"=>\"gid://shopify/MenuItem/715378231\", \"title\"=>\"Kitchen\", \"url\"=>\"/collections/kitchen\", \"resourceId\"=>\"gid://shopify/Collection/715378231\", \"type\"=>\"COLLECTION\", \"items\"=>[{\"id\"=>\"gid://shopify/MenuItem/108641250\", \"title\"=>\"Chairs\", \"url\"=>\"/collections/chairs\", \"resourceId\"=>\"gid://shopify/Collection/108641250\", \"type\"=>\"COLLECTION\", \"items\"=>[]}, {\"id\"=>\"gid://shopify/MenuItem/71762467\", \"title\"=>\"Tables\", \"url\"=>\"/collections/tables\", \"resourceId\"=>\"gid://shopify/Collection/71762467\", \"type\"=>\"COLLECTION\", \"items\"=>[]}, {\"id\"=>\"gid://shopify/MenuItem/826396515\", \"title\"=>\"Kitchen Rugs\", \"url\"=>\"/collections/kitchen%20rugs\", \"resourceId\"=>\"gid://shopify/Collection/826396515\", \"type\"=>\"COLLECTION\", \"items\"=>[]}]}]}, {\"id\"=>\"gid://shopify/MenuItem/698896745\", \"title\"=>\"Mega Sofa Sale\", \"url\"=>\"/collections/mega%20sale\", \"resourceId\"=>\"gid://shopify/Collection/307741084\", \"type\"=>\"COLLECTION\", \"items\"=>[]}]\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "pageCreate", "description": "Creates a page.", "arguments": [{"name": "page", "type": "PageCreateInput!", "required": true, "description": "The properties of the new page."}], "returns": [], "examples": [{"description": "Creates a page", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation CreatePage($page: PageCreateInput!) {\n    pageCreate(page: $page) {\n      page {\n        id\n        title\n        handle\n      }\n      userErrors {\n        code\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"page\": {\n    \"title\": \"New Page Title\",\n    \"handle\": \"new-page-title\",\n    \"body\": \"This is the content of the page.\",\n    \"isPublished\": true,\n    \"templateSuffix\": \"custom\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "pageCreate reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation CreatePage($page: PageCreateInput!) {\n    pageCreate(page: $page) {\n      page {\n        id\n        title\n        handle\n      }\n      userErrors {\n        code\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"page\": {\n    \"title\": \"New Page Title\",\n    \"handle\": \"new-page-title\",\n    \"body\": \"This is the content of the page.\",\n    \"isPublished\": true,\n    \"templateSuffix\": \"custom\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "pageDelete", "description": "Deletes a page.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID of the page to be deleted."}], "returns": [], "examples": [{"description": "Deletes a page", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation DeletePage($id: ID!) {\n    pageDelete(id: $id) {\n      deletedPageId\n      userErrors {\n        code\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/Page/602767277\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "pageDelete reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation DeletePage($id: ID!) {\n    pageDelete(id: $id) {\n      deletedPageId\n      userErrors {\n        code\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/Page/602767277\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "pageUpdate", "description": "Updates a page.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID of the page to be updated."}], "returns": [], "examples": [{"description": "Updates a page", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation UpdatePage($id: ID!, $page: PageUpdateInput!) {\n    pageUpdate(id: $id, page: $page) {\n      page {\n        id\n        title\n        handle\n      }\n      userErrors {\n        code\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/Page/602767277\",\n  \"page\": {\n    \"title\": \"This is the Title\",\n    \"handle\": \"this-is-the-handle\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "pageUpdate reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation UpdatePage($id: ID!, $page: PageUpdateInput!) {\n    pageUpdate(id: $id, page: $page) {\n      page {\n        id\n        title\n        handle\n      }\n      userErrors {\n        code\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/Page/602767277\",\n  \"page\": {\n    \"title\": \"This is the Title\",\n    \"handle\": \"this-is-the-handle\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "scriptTagCreate", "description": "Theme app extensions\n  Your app might not pass App Store review if it uses script tags instead of theme app extensions. All new apps, and apps that integrate with Online Store 2.0 themes, should use theme app extensions, such as app blocks or app embed blocks. Script tags are an alternative you can use with only vintage themes. Learn more.\n\nScript tag deprecation\n  Script tags will be sunset for the Order status page on August 28, 2025. Upgrade to Checkout Extensibility before this date. Shopify Scripts will continue to work alongside Checkout Extensibility until August 28, 2025.\n\n\nCreates a new script tag.", "arguments": [{"name": "input", "type": "ScriptTagInput!", "required": true, "description": "The input fields for a script tag."}], "returns": [], "examples": [{"description": "Creates a new script tag", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation ScriptTagCreate($input: ScriptTagInput!) {\n    scriptTagCreate(input: $input) {\n      scriptTag {\n        id\n        cache\n        createdAt\n        displayScope\n        src\n        updatedAt\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": {\n    \"src\": \"https://js.example.org/bar.js\",\n    \"displayScope\": \"ONLINE_STORE\",\n    \"cache\": true\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "scriptTagCreate reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation ScriptTagCreate($input: ScriptTagInput!) {\n    scriptTagCreate(input: $input) {\n      scriptTag {\n        id\n        cache\n        createdAt\n        displayScope\n        src\n        updatedAt\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": {\n    \"src\": \"https://js.example.org/bar.js\",\n    \"displayScope\": \"ONLINE_STORE\",\n    \"cache\": true\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "scriptTagDelete", "description": "Theme app extensions\n  Your app might not pass App Store review if it uses script tags instead of theme app extensions. All new apps, and apps that integrate with Online Store 2.0 themes, should use theme app extensions, such as app blocks or app embed blocks. Script tags are an alternative you can use with only vintage themes. Learn more.\n\nScript tag deprecation\n  Script tags will be sunset for the Order status page on August 28, 2025. Upgrade to Checkout Extensibility before this date. Shopify Scripts will continue to work alongside Checkout Extensibility until August 28, 2025.\n\n\nDeletes a script tag.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID of the script tag to delete."}], "returns": [], "examples": [{"description": "Deletes a script tag", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation ScriptTagDelete($id: ID!) {\n    scriptTagDelete(id: $id) {\n      deletedScriptTagId\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/ScriptTag/421379493\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "scriptTagDelete reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation ScriptTagDelete($id: ID!) {\n    scriptTagDelete(id: $id) {\n      deletedScriptTagId\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/ScriptTag/421379493\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "scriptTagUpdate", "description": "Theme app extensions\n  Your app might not pass App Store review if it uses script tags instead of theme app extensions. All new apps, and apps that integrate with Online Store 2.0 themes, should use theme app extensions, such as app blocks or app embed blocks. Script tags are an alternative you can use with only vintage themes. Learn more.\n\nScript tag deprecation\n  Script tags will be sunset for the Order status page on August 28, 2025. Upgrade to Checkout Extensibility before this date. Shopify Scripts will continue to work alongside Checkout Extensibility until August 28, 2025.\n\n\nUpdates a script tag.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID of the script tag to update."}], "returns": [], "examples": [{"description": "Updates a script tag", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation ScriptTagUpdate($id: ID!, $input: ScriptTagInput!) {\n    scriptTagUpdate(id: $id, input: $input) {\n      scriptTag {\n        id\n        cache\n        createdAt\n        displayScope\n        src\n        updatedAt\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/ScriptTag/421379493\",\n  \"input\": {\n    \"src\": \"https://js.example.org/updated.js\",\n    \"displayScope\": \"ONLINE_STORE\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "scriptTagUpdate reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation ScriptTagUpdate($id: ID!, $input: ScriptTagInput!) {\n    scriptTagUpdate(id: $id, input: $input) {\n      scriptTag {\n        id\n        cache\n        createdAt\n        displayScope\n        src\n        updatedAt\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/ScriptTag/421379493\",\n  \"input\": {\n    \"src\": \"https://js.example.org/updated.js\",\n    \"displayScope\": \"ONLINE_STORE\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "themeCreate", "description": "Creates a theme using an external URL or for files that were previously uploaded using the\nstagedUploadsCreate mutation.\nThese themes are added to the Themes page in Shopify admin.", "arguments": [{"name": "name", "type": "String", "required": true, "description": "The name of the theme to be created."}], "returns": [], "examples": [{"description": "Create a new theme from an url with a custom name", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation themeCreate($source: URL!, $name: String!) {\n    themeCreate(source: $source, name: $name) {\n      theme {\n        name\n        role\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"source\": \"http://www.example.com/dawn.zip\",\n  \"name\": \"Dawn\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Creates a theme", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation ThemeCreate($name: String, $source: URL!) {\n    themeCreate(name: $name, source: $source) {\n      theme {\n        id\n      }\n      userErrors {\n        code\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"name\": \"New Theme\",\n  \"source\": \"http://someurl.com/lemongrass.zip\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "themeCreate reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation themeCreate($source: URL!, $name: String!) {\n    themeCreate(source: $source, name: $name) {\n      theme {\n        name\n        role\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"source\": \"http://www.example.com/dawn.zip\",\n  \"name\": \"Dawn\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "themeDelete", "description": "Deletes a theme.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID of the theme to be deleted."}], "returns": [], "examples": [{"description": "Delete a theme by its ID", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation themeDelete($id: ID!) {\n    themeDelete(id: $id) {\n      deletedThemeId\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/OnlineStoreTheme/908009861\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Remove an existing Theme", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation ThemeUpdate($id: ID!) {\n    themeDelete(id: $id) {\n      deletedThemeId\n      userErrors {\n        code\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/OnlineStoreTheme/908009861\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "themeDelete reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation themeDelete($id: ID!) {\n    themeDelete(id: $id) {\n      deletedThemeId\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/OnlineStoreTheme/908009861\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "themeFilesCopy", "description": "Copy theme files. Copying to existing theme files will overwrite them.", "arguments": [{"name": "files", "type": "[ThemeFilesCopyFileInput!]!", "required": true, "description": "The files to update."}], "returns": [], "examples": [{"description": "Copy the content of a file into another file", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation themeFilesCopy($files: [ThemeFilesCopyFileInput!]!, $themeId: ID!) {\n    themeFilesCopy(files: $files, themeId: $themeId) {\n      copiedThemeFiles {\n        filename\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"themeId\": \"gid://shopify/OnlineStoreTheme/529529152\",\n  \"files\": [{\"dstFilename\"=>\"templates/index.alt.json\", \"srcFilename\"=>\"templates/index.json\"}]\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Creates or updates an asset for a theme", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation ThemeFilesCopy($files: [ThemeFilesCopyFileInput!]!, $themeId: ID!) {\n    themeFilesCopy(files: $files, themeId: $themeId) {\n      copiedThemeFiles {\n        filename\n      }\n      userErrors {\n        code\n        field\n        filename\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"themeId\": \"gid://shopify/OnlineStoreTheme/529529152\",\n  \"files\": [{\"dstFilename\"=>\"templates/index.alt.liquid\", \"srcFilename\"=>\"templates/index.liquid\"}]\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "themeFilesCopy reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation themeFilesCopy($files: [ThemeFilesCopyFileInput!]!, $themeId: ID!) {\n    themeFilesCopy(files: $files, themeId: $themeId) {\n      copiedThemeFiles {\n        filename\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"themeId\": \"gid://shopify/OnlineStoreTheme/529529152\",\n  \"files\": [{\"dstFilename\"=>\"templates/index.alt.json\", \"srcFilename\"=>\"templates/index.json\"}]\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "themeFilesDelete", "description": "Deletes a theme's files.", "arguments": [{"name": "files", "type": "[String!]!", "required": true, "description": "The files to delete."}], "returns": [], "examples": [{"description": "Delete a theme file", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation themeFilesDelete($themeId: ID!, $files: [String!]!) {\n    themeFilesDelete(themeId: $themeId, files: $files) {\n      deletedThemeFiles {\n        filename\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"themeId\": \"gid://shopify/OnlineStoreTheme/529529152\",\n  \"files\": [\"templates/index.json\"]\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Deletes an asset from a theme", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation ThemeFilesDelete($files: [String!]!, $themeId: ID!) {\n    themeFilesDelete(files: $files, themeId: $themeId) {\n      deletedThemeFiles {\n        filename\n      }\n      userErrors {\n        code\n        field\n        filename\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"themeId\": \"gid://shopify/OnlineStoreTheme/529529152\",\n  \"files\": [\"sections/content_section.liquid\"]\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "themeFilesDelete reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation themeFilesDelete($themeId: ID!, $files: [String!]!) {\n    themeFilesDelete(themeId: $themeId, files: $files) {\n      deletedThemeFiles {\n        filename\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"themeId\": \"gid://shopify/OnlineStoreTheme/529529152\",\n  \"files\": [\"templates/index.json\"]\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "themeFilesUpsert", "description": "Create or update theme files.", "arguments": [{"name": "files", "type": "[OnlineStoreThemeFilesUpsertFileInput!]!", "required": true, "description": "The files to update."}], "returns": [], "examples": [{"description": "Create or update a theme file", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation themeFilesUpsert($files: [OnlineStoreThemeFilesUpsertFileInput!]!, $themeId: ID!) {\n    themeFilesUpsert(files: $files, themeId: $themeId) {\n      upsertedThemeFiles {\n        filename\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"themeId\": \"gid://shopify/OnlineStoreTheme/529529152\",\n  \"files\": [{\"filename\"=>\"templates/index.json\", \"body\"=>{\"type\"=>\"TEXT\", \"value\"=>\"{ \\\"sections\\\": {}, \\\"order\\\": [] }\"}}]\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Create or update theme files in bulk", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation themeFilesUpsert($files: [OnlineStoreThemeFilesUpsertFileInput!]!, $themeId: ID!) {\n    themeFilesUpsert(files: $files, themeId: $themeId) {\n      upsertedThemeFiles {\n        filename\n      }\n      job {\n        id\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"themeId\": \"gid://shopify/OnlineStoreTheme/529529152\",\n  \"files\": [{\"filename\"=>\"templates/index.json\", \"body\"=>{\"type\"=>\"TEXT\", \"value\"=>\"{ \\\"sections\\\": {}, \\\"order\\\": [] }\"}}, {\"filename\"=>\"assets/custom-content.txt\", \"body\"=>{\"type\"=>\"BASE64\", \"value\"=>\"Y3VzdG9tIGNvbnRlbnQ=\"}}, {\"filename\"=>\"assets/large-dog-image.jpg\", \"body\"=>{\"type\"=>\"URL\", \"value\"=>\"https://www.example.com/large-dog-image.jpg\"}}]\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "themeFilesUpsert reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation themeFilesUpsert($files: [OnlineStoreThemeFilesUpsertFileInput!]!, $themeId: ID!) {\n    themeFilesUpsert(files: $files, themeId: $themeId) {\n      upsertedThemeFiles {\n        filename\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"themeId\": \"gid://shopify/OnlineStoreTheme/529529152\",\n  \"files\": [{\"filename\"=>\"templates/index.json\", \"body\"=>{\"type\"=>\"TEXT\", \"value\"=>\"{ \\\"sections\\\": {}, \\\"order\\\": [] }\"}}]\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "themePublish", "description": "Publishes a theme.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "ID of the theme to be published."}], "returns": [], "examples": [{"description": "Modify an existing Theme", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation themePublish($id: ID!) {\n    themePublish(id: $id) {\n      theme {\n        id\n      }\n      userErrors {\n        code\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/OnlineStoreTheme/908009861\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Publish a theme", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation themePublish($id: ID!) {\n    themePublish(id: $id) {\n      theme {\n        id\n        name\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/OnlineStoreTheme/908009861\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "themePublish reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation themePublish($id: ID!) {\n    themePublish(id: $id) {\n      theme {\n        id\n      }\n      userErrors {\n        code\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/OnlineStoreTheme/908009861\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "themeUpdate", "description": "Updates a theme.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID of the theme to be updated."}], "returns": [], "examples": [{"description": "Update the name of a theme", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation themeUpdate($id: ID!, $input: OnlineStoreThemeInput!) {\n    themeUpdate(id: $id, input: $input) {\n      theme {\n        id\n        name\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/OnlineStoreTheme/908009861\",\n  \"input\": {\n    \"name\": \"Dawn - Summer Sale\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "themeUpdate reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation themeUpdate($id: ID!, $input: OnlineStoreThemeInput!) {\n    themeUpdate(id: $id, input: $input) {\n      theme {\n        id\n        name\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/OnlineStoreTheme/908009861\",\n  \"input\": {\n    \"name\": \"Dawn - Summer Sale\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "urlRedirectBulkDeleteAll", "description": "Asynchronously delete URL redirects in bulk.", "arguments": [{"name": "job", "type": "Job", "required": true, "description": "The asynchronous job removing the redirects."}], "returns": [], "examples": []}, {"name": "urlRedirectBulkDeleteByIds", "description": "Asynchronously delete URLRedirect \nobjects in bulk by IDs.\nLearn more about URLRedirect \nobjects.", "arguments": [{"name": "ids", "type": "[ID!]!", "required": true, "description": "A list of URLRedirect object IDs to delete."}], "returns": [], "examples": []}, {"name": "urlRedirectBulkDeleteBySavedSearch", "description": "Asynchronously delete redirects in bulk.", "arguments": [{"name": "savedSearchId", "type": "ID!", "required": true, "description": "The ID of the URL redirect saved search for filtering."}], "returns": [], "examples": []}, {"name": "urlRedirectBulkDeleteBySearch", "description": "Asynchronously delete redirects in bulk.", "arguments": [{"name": "search", "type": "String!", "required": true, "description": "Search query for filtering redirects on (both Redirect from and Redirect to fields)."}], "returns": [], "examples": []}, {"name": "urlRedirectCreate", "description": "Creates a UrlRedirect object.", "arguments": [{"name": "urlRedirect", "type": "UrlRedirectInput!", "required": true, "description": "The fields to use when creating the redirect."}], "returns": [], "examples": [{"description": "Creates a redirect", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation UrlRedirectCreate($urlRedirect: UrlRedirectInput!) {\n    urlRedirectCreate(urlRedirect: $urlRedirect) {\n      urlRedirect {\n        id\n        path\n        target\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"urlRedirect\": {\n    \"path\": \"/thepath\",\n    \"target\": \"/thetarget\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "urlRedirectCreate reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation UrlRedirectCreate($urlRedirect: UrlRedirectInput!) {\n    urlRedirectCreate(urlRedirect: $urlRedirect) {\n      urlRedirect {\n        id\n        path\n        target\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"urlRedirect\": {\n    \"path\": \"/thepath\",\n    \"target\": \"/thetarget\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "urlRedirectDelete", "description": "Deletes a UrlRedirect object.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID of the redirect to delete."}], "returns": [], "examples": [{"description": "Deletes a redirect", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation UrlRedirectDelete($id: ID!) {\n    urlRedirectDelete(id: $id) {\n      deletedUrlRedirectId\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/UrlRedirect/905192165\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "urlRedirectDelete reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation UrlRedirectDelete($id: ID!) {\n    urlRedirectDelete(id: $id) {\n      deletedUrlRedirectId\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/UrlRedirect/905192165\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "urlRedirectImportCreate", "description": "Creates a UrlRedirectImport object.\nAfter creating the UrlRedirectImport object, the UrlRedirectImport request can be performed using the urlRedirectImportSubmit mutation.", "arguments": [{"name": "url", "type": "URL!", "required": true, "description": "The staged upload URL of the CSV file.\nYou can download a sample URL redirect CSV file."}], "returns": [], "examples": []}, {"name": "urlRedirectImportSubmit", "description": "Submits a UrlRedirectImport request to be processed.\nThe UrlRedirectImport request is first created with the urlRedirectImportCreate mutation.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID of the UrlRedirectImport object."}], "returns": [], "examples": []}, {"name": "urlRedirectUpdate", "description": "Updates a URL redirect.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID of the URL redirect to update."}], "returns": [], "examples": [{"description": "Updates an existing redirect", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation UrlRedirectUpdate($id: ID!, $urlRedirect: UrlRedirectInput!) {\n    urlRedirectUpdate(id: $id, urlRedirect: $urlRedirect) {\n      urlRedirect {\n        id\n        path\n        target\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/UrlRedirect/905192165\",\n  \"urlRedirect\": {\n    \"path\": \"/thepath\",\n    \"target\": \"/thetarget\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "urlRedirectUpdate reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation UrlRedirectUpdate($id: ID!, $urlRedirect: UrlRedirectInput!) {\n    urlRedirectUpdate(id: $id, urlRedirect: $urlRedirect) {\n      urlRedirect {\n        id\n        path\n        target\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/UrlRedirect/905192165\",\n  \"urlRedirect\": {\n    \"path\": \"/thepath\",\n    \"target\": \"/thetarget\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}], "objects": [{"name": "Article", "description": "An article in the blogging system.", "fields_and_connections": [{"name": "author", "type": "ArticleAuthor", "description": "The name of the author of the article.", "not_nullable": true}], "examples": []}, {"name": "ArticleAuthor", "description": "Represents an article author in an Article.", "fields_and_connections": [{"name": "name", "type": "String!", "description": "The author's full name.", "not_nullable": true}], "examples": []}, {"name": "Blog", "description": "Shopify stores come with a built-in blogging engine, allowing a shop to have one or more blogs.  Blogs are meant\nto be used as a type of magazine or newsletter for the shop, with content that changes over time.", "fields_and_connections": [{"name": "articles", "type": "ArticleConnection!", "description": "List of the blog's articles.", "not_nullable": true}], "examples": []}, {"name": "BlogFeed", "description": "FeedBurner provider details. Any blogs that aren't already integrated with FeedBurner can't use the service.", "fields_and_connections": [{"name": "location", "type": "URL!", "description": "Blog feed provider url.", "not_nullable": true}], "examples": []}, {"name": "Comment", "description": "A comment on an article.", "fields_and_connections": [{"name": "article", "type": "Article", "description": "The article associated with the comment.", "not_nullable": true}], "examples": []}, {"name": "CommentAuthor", "description": "The author of a comment.", "fields_and_connections": [{"name": "email", "type": "String!", "description": "The author's email.", "not_nullable": true}], "examples": []}, {"name": "CustomerAccountAppExtensionPage", "description": "An app extension page for the customer account navigation menu.", "fields_and_connections": [{"name": "appExtensionUuid", "type": "String", "description": "The UUID of the app extension.", "not_nullable": true}], "examples": []}, {"name": "CustomerAccountNativePage", "description": "A native page for the customer account navigation menu.", "fields_and_connections": [{"name": "defaultCursor", "type": "String!", "description": "A default cursor that returns the single next record, sorted ascending by ID.", "not_nullable": true}], "examples": []}, {"name": "MarketsThemesEntitlement", "description": "The entitlements for themes.", "fields_and_connections": [{"name": "enabled", "type": "Boolean!", "description": "Whether themes are enabled.", "not_nullable": true}], "examples": []}, {"name": "Menu", "description": "A menu for display on the storefront.", "fields_and_connections": [{"name": "handle", "type": "String!", "description": "The menu's handle.", "not_nullable": true}], "examples": []}, {"name": "MenuItem", "description": "A menu item for display on the storefront.", "fields_and_connections": [{"name": "id", "type": "ID!", "description": "A globally-unique ID of the navigation menu item.", "not_nullable": true}], "examples": []}, {"name": "OnlineStore", "description": "The shop's online store channel.", "fields_and_connections": [{"name": "passwordProtection", "type": "OnlineStorePasswordProtection!", "description": "Storefront password information.", "not_nullable": true}], "examples": []}, {"name": "OnlineStorePasswordProtection", "description": "Storefront password information.", "fields_and_connections": [{"name": "enabled", "type": "Boolean!", "description": "Whether the storefront password is enabled.", "not_nullable": true}], "examples": []}, {"name": "OnlineStoreTheme", "description": "A theme for display on the storefront.", "fields_and_connections": [{"name": "createdAt", "type": "DateTime!", "description": "The date and time when the theme was created.", "not_nullable": true}], "examples": []}, {"name": "OnlineStoreThemeFile", "description": "Represents a theme file.", "fields_and_connections": [{"name": "body", "type": "OnlineStoreThemeFileBody!", "description": "The body of the theme file.", "not_nullable": true}], "examples": []}, {"name": "OnlineStoreThemeFileBodyBase64", "description": "Represents the base64 encoded body of a theme file.", "fields_and_connections": [{"name": "contentBase64", "type": "String!", "description": "The body of the theme file, base64 encoded.", "not_nullable": true}], "examples": []}, {"name": "OnlineStoreThemeFileBodyText", "description": "Represents the body of a theme file.", "fields_and_connections": [{"name": "content", "type": "String!", "description": "The body of the theme file.", "not_nullable": true}], "examples": []}, {"name": "OnlineStoreThemeFileBodyUrl", "description": "Represents the url of the body of a theme file.", "fields_and_connections": [{"name": "url", "type": "URL!", "description": "The short lived url for the body of the theme file.", "not_nullable": true}], "examples": []}, {"name": "OnlineStoreThemeFileOperationResult", "description": "Represents the result of a copy, delete, or write operation performed on a theme file.", "fields_and_connections": [{"name": "checksumMd5", "type": "String", "description": "The md5 digest of the theme file for data integrity.", "not_nullable": true}], "examples": []}, {"name": "OnlineStoreThemeFileReadResult", "description": "Represents the result of a read operation performed on a theme asset.", "fields_and_connections": [{"name": "code", "type": "OnlineStoreThemeFileResultType!", "description": "Type that indicates the result of the operation.", "not_nullable": true}], "examples": []}, {"name": "OnlineStoreThemeFilesUserErrors", "description": "User errors for theme file operations.", "fields_and_connections": [{"name": "code", "type": "OnlineStoreThemeFilesUserErrorsCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "Page", "description": "A page on the Online Store.", "fields_and_connections": [{"name": "body", "type": "HTML!", "description": "The text content of the page, complete with HTML markup.", "not_nullable": true}], "examples": []}, {"name": "ScriptTag", "description": "Theme app extensions\n  Your app might not pass App Store review if it uses script tags instead of theme app extensions. All new apps, and apps that integrate with Online Store 2.0 themes, should use theme app extensions, such as app blocks or app embed blocks. Script tags are an alternative you can use with only vintage themes. Learn more.\n\nScript tag deprecation\n  Script tags will be sunset for the Order status page on August 28, 2025. Upgrade to Checkout Extensibility before this date. Shopify Scripts will continue to work alongside Checkout Extensibility until August 28, 2025.\n\n\nA script tag represents remote JavaScript code that is loaded into the pages of a shop's storefront or the Order status page of checkout.", "fields_and_connections": [{"name": "cache", "type": "Boolean!", "description": "Whether the Shopify CDN can cache and serve the script tag.\nIf true, then the script will be cached and served by the CDN.\nThe cache expires 15 minutes after the script tag is successfully returned.\nIf false, then the script will be served as is.", "not_nullable": true}], "examples": []}, {"name": "SEO", "description": "SEO information.", "fields_and_connections": [{"name": "description", "type": "String", "description": "SEO Description.", "not_nullable": false}], "examples": []}, {"name": "UrlRedirect", "description": "The URL redirect for the online store.", "fields_and_connections": [{"name": "id", "type": "ID!", "description": "The ID of the URL redirect.", "not_nullable": true}], "examples": []}, {"name": "UrlRedirectImport", "description": "A request to import a URLRedirect object\ninto the Online Store channel. Apps can use this to query the state of an UrlRedirectImport request.\nFor more information, see url-redirects.", "fields_and_connections": [{"name": "count", "type": "Int", "description": "The number of rows in the file.", "not_nullable": true}], "examples": []}, {"name": "UrlRedirectImportPreview", "description": "A preview of a URL redirect import row.", "fields_and_connections": [{"name": "path", "type": "String!", "description": "The old path to be redirected from. When the user visits this path, they will be redirected to the target location.", "not_nullable": true}], "examples": []}]}, {"name": "Orders", "queries": [{"name": "availableBackupRegions", "description": "The regions that can be used as the backup region of the shop.", "arguments": [{"name": "MarketRegion", "type": "[MarketRegion!]!", "required": true, "description": "A geographic region which comprises a market."}], "returns": [], "examples": []}, {"name": "disputes", "description": "All disputes related to the Shop.", "arguments": [{"name": "after", "type": "String", "required": true, "description": "The elements that come after the specified cursor."}], "returns": [], "examples": []}, {"name": "draftOrder", "description": "Returns a DraftOrder resource by ID.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID of the DraftOrder to return."}], "returns": [], "examples": [{"description": "Get a draft order by ID", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    draftOrder(id: \"gid://shopify/DraftOrder/276395349\") {\n      name\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "Get a list of draft orders by ID and GraphQL alias", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    draftOrder1: draftOrder(id: \"gid://shopify/DraftOrder/276395349\") {\n      name\n    }\n    draftOrder2: draftOrder(id: \"gid://shopify/DraftOrder/221448317\") {\n      name\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "Get a list of line item names for a draft order", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    draftOrder(id: \"gid://shopify/DraftOrder/276395349\") {\n      lineItems(first: 5) {\n        edges {\n          node {\n            name\n          }\n        }\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "Get a metafield attached to a draft order", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query DraftOrderMetafield($namespace: String!, $key: String!, $ownerId: ID!) {\n    draftOrder(id: $ownerId) {\n      purchaseOrder: metafield(namespace: $namespace, key: $key) {\n        value\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"namespace\": \"my_fields\",\n  \"key\": \"purchase_order\",\n  \"ownerId\": \"gid://shopify/DraftOrder/276395349\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Get metafields attached to a draft order", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query DraftOrderMetafields($ownerId: ID!) {\n    draftOrder(id: $ownerId) {\n      metafields(first: 3) {\n        edges {\n          node {\n            namespace\n            key\n            value\n          }\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"ownerId\": \"gid://shopify/DraftOrder/276395349\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Receive a single DraftOrder", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query DraftOrder($id: ID!) {\n    draftOrder(id: $id) {\n      id\n      note2\n      email\n      taxesIncluded\n      currencyCode\n      invoiceSentAt\n      createdAt\n      updatedAt\n      taxExempt\n      completedAt\n      name\n      status\n      lineItems(first: 10) {\n        edges {\n          node {\n            id\n            variant {\n              id\n              title\n            }\n            product {\n              id\n            }\n            name\n            sku\n            vendor\n            quantity\n            requiresShipping\n            taxable\n            isGiftCard\n            fulfillmentService {\n              type\n            }\n            weight {\n              unit\n              value\n            }\n            taxLines {\n              title\n              source\n              rate\n              ratePercentage\n              priceSet {\n                presentmentMoney {\n                  amount\n                  currencyCode\n                }\n                shopMoney {\n                  amount\n                  currencyCode\n                }\n              }\n            }\n            appliedDiscount {\n              title\n              value\n              valueType\n            }\n            name\n            custom\n            id\n          }\n        }\n      }\n      shippingAddress {\n        firstName\n        address1\n        phone\n        city\n        zip\n        province\n        country\n        lastName\n        address2\n        company\n        latitude\n        longitude\n        name\n        country\n        countryCodeV2\n        provinceCode\n      }\n      billingAddress {\n        firstName\n        address1\n        phone\n        city\n        zip\n        province\n        country\n        lastName\n        address2\n        company\n        latitude\n        longitude\n        name\n        country\n        countryCodeV2\n        provinceCode\n      }\n      invoiceUrl\n      appliedDiscount {\n        title\n        value\n        valueType\n      }\n      order {\n        id\n        customAttributes {\n          key\n          value\n        }\n      }\n      shippingLine {\n        id\n        title\n        carrierIdentifier\n        custom\n        code\n        deliveryCategory\n        source\n        discountedPriceSet {\n          presentmentMoney {\n            amount\n            currencyCode\n          }\n          shopMoney {\n            amount\n            currencyCode\n          }\n        }\n      }\n      taxLines {\n        channelLiable\n        priceSet {\n          presentmentMoney {\n            amount\n            currencyCode\n          }\n          shopMoney {\n            amount\n            currencyCode\n          }\n        }\n        rate\n        ratePercentage\n        source\n        title\n      }\n      tags\n      customer {\n        id\n        email\n        smsMarketingConsent {\n          consentCollectedFrom\n          consentUpdatedAt\n          marketingOptInLevel\n          marketingState\n        }\n        emailMarketingConsent {\n          consentUpdatedAt\n          marketingOptInLevel\n          marketingState\n        }\n        createdAt\n        updatedAt\n        firstName\n        lastName\n        state\n        amountSpent {\n          amount\n          currencyCode\n        }\n        lastOrder {\n          id\n          name\n          currencyCode\n        }\n        note\n        verifiedEmail\n        multipassIdentifier\n        taxExempt\n        tags\n        phone\n        taxExemptions\n        defaultAddress {\n          id\n          firstName\n          lastName\n          company\n          address1\n          address2\n          city\n          province\n          country\n          zip\n          phone\n          name\n          provinceCode\n          countryCodeV2\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/DraftOrder/221448317\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "draftOrders", "description": "List of saved draft orders.", "arguments": [{"name": "after", "type": "String", "required": true, "description": "The elements that come after the specified cursor."}], "returns": [], "examples": [{"description": "Get the first 10 draft orders", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    draftOrders(first: 10) {\n      edges {\n        node {\n          id\n        }\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "Get the first 10 draft orders created after December 1, 2019", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    draftOrders(first: 10, query: \"created_at:>2019-12-01\") {\n      edges {\n        node {\n          id\n          createdAt\n        }\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "Get the first 10 draft orders with a status of 'OPEN'", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    draftOrders(first: 10, query: \"status:OPEN\") {\n      edges {\n        node {\n          id\n          status\n        }\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "Get the first draft order for a given customer", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    draftOrders(first: 1, query: \"customerId:544365967\") {\n      edges {\n        node {\n          id\n          status\n          customer {\n            firstName\n          }\n        }\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "Retrieves a list of draft orders", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query DraftOrders {\n    draftOrders(first: 10) {\n      edges {\n        node {\n          id\n          note2\n          email\n          taxesIncluded\n          currencyCode\n          invoiceSentAt\n          createdAt\n          updatedAt\n          taxExempt\n          completedAt\n          name\n          status\n          lineItems(first: 10) {\n            edges {\n              node {\n                id\n                variant {\n                  id\n                  title\n                }\n                product {\n                  id\n                }\n                name\n                sku\n                vendor\n                quantity\n                requiresShipping\n                taxable\n                isGiftCard\n                fulfillmentService {\n                  type\n                }\n                weight {\n                  unit\n                  value\n                }\n                taxLines {\n                  title\n                  source\n                  rate\n                  ratePercentage\n                  priceSet {\n                    presentmentMoney {\n                      amount\n                      currencyCode\n                    }\n                    shopMoney {\n                      amount\n                      currencyCode\n                    }\n                  }\n                }\n                appliedDiscount {\n                  title\n                  value\n                  valueType\n                }\n                name\n                custom\n                id\n              }\n            }\n          }\n          shippingAddress {\n            firstName\n            address1\n            phone\n            city\n            zip\n            province\n            country\n            lastName\n            address2\n            company\n            latitude\n            longitude\n            name\n            country\n            countryCodeV2\n            provinceCode\n          }\n          billingAddress {\n            firstName\n            address1\n            phone\n            city\n            zip\n            province\n            country\n            lastName\n            address2\n            company\n            latitude\n            longitude\n            name\n            country\n            countryCodeV2\n            provinceCode\n          }\n          invoiceUrl\n          appliedDiscount {\n            title\n            value\n            valueType\n          }\n          order {\n            id\n            customAttributes {\n              key\n              value\n            }\n          }\n          shippingLine {\n            id\n            title\n            carrierIdentifier\n            custom\n            code\n            deliveryCategory\n            source\n            discountedPriceSet {\n              presentmentMoney {\n                amount\n                currencyCode\n              }\n              shopMoney {\n                amount\n                currencyCode\n              }\n            }\n          }\n          taxLines {\n            channelLiable\n            priceSet {\n              presentmentMoney {\n                amount\n                currencyCode\n              }\n              shopMoney {\n                amount\n                currencyCode\n              }\n            }\n            rate\n            ratePercentage\n            source\n            title\n          }\n          tags\n          totalPrice\n          subtotalPrice\n          totalTax\n          customer {\n            id\n            email\n            smsMarketingConsent {\n              consentCollectedFrom\n              consentUpdatedAt\n              marketingOptInLevel\n              marketingState\n            }\n            emailMarketingConsent {\n              consentUpdatedAt\n              marketingOptInLevel\n              marketingState\n            }\n            createdAt\n            updatedAt\n            firstName\n            lastName\n            state\n            amountSpent {\n              amount\n              currencyCode\n            }\n            lastOrder {\n              id\n              name\n              currencyCode\n            }\n            note\n            verifiedEmail\n            multipassIdentifier\n            taxExempt\n            tags\n            phone\n            taxExemptions\n            defaultAddress {\n              id\n              firstName\n              lastName\n              company\n              address1\n              address2\n              city\n              province\n              country\n              zip\n              phone\n              name\n              provinceCode\n              countryCodeV2\n            }\n          }\n        }\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}]}, {"name": "draftOrderSavedSearches", "description": "List of the shop's draft order saved searches.", "arguments": [{"name": "after", "type": "String", "required": true, "description": "The elements that come after the specified cursor."}], "returns": [], "examples": []}, {"name": "draftOrderTag", "description": "Returns a DraftOrderTag resource by ID.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID of the DraftOrderTag to return."}], "returns": [], "examples": []}, {"name": "order", "description": "Returns an Order resource by ID.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID of the Order to return."}], "returns": [], "examples": [{"description": "Calculates a refund", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query SuggestedRefund($id: ID!, $refundLineItems: [RefundLineItemInput!]) {\n    order(id: $id) {\n      id\n      suggestedRefund(refundLineItems: $refundLineItems) {\n        subtotalSet {\n          shopMoney {\n            amount\n            currencyCode\n          }\n          presentmentMoney {\n            amount\n            currencyCode\n          }\n        }\n        refundLineItems {\n          lineItem {\n            id\n          }\n          quantity\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/Order/469306983\",\n  \"refundLineItems\": [{\"lineItemId\"=>\"gid://shopify/LineItem/983004162\", \"quantity\"=>1}]\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Get a list of orders using their IDs and GraphQL aliases", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    order1: order(id: \"gid://shopify/Order/148977776\") {\n      name\n    }\n    order2: order(id: \"gid://shopify/Order/1073459961\") {\n      name\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "Get a metafield attached to an order", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query OrderMetafield($namespace: String!, $key: String!, $ownerId: ID!) {\n    order(id: $ownerId) {\n      purchaseOrder: metafield(namespace: $namespace, key: $key) {\n        value\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"namespace\": \"my_fields\",\n  \"key\": \"purchase_order\",\n  \"ownerId\": \"gid://shopify/Order/148977776\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Get an order using the QueryRoot.node field and a GraphQL fragment", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    node(id: \"gid://shopify/Order/148977776\") {\n      id\n      ... on Order {\n        name\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "Get metafields attached to an order", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query OrderMetafields($ownerId: ID!) {\n    order(id: $ownerId) {\n      metafields(first: 3) {\n        edges {\n          node {\n            namespace\n            key\n            value\n          }\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"ownerId\": \"gid://shopify/Order/148977776\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Get pinned metafield definitions associated with an order", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query OrderMetafieldDefinitions($ownerId: ID!, $first: Int, $pinnedStatus: MetafieldDefinitionPinnedStatus, $sortKey: MetafieldDefinitionSortKeys) {\n    order(id: $ownerId) {\n      metafieldDefinitions(first: $first, pinnedStatus: $pinnedStatus, sortKey: $sortKey) {\n        edges {\n          node {\n            name\n            namespace\n            key\n            type {\n              name\n            }\n          }\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"pinnedStatus\": \"PINNED\",\n  \"ownerId\": \"gid://shopify/Order/148977776\",\n  \"first\": 10,\n  \"sortKey\": \"PINNED_POSITION\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Get sales agreements for an order", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    order(id: \"gid://shopify/Order/816964372\") {\n      agreements(first: 10) {\n        edges {\n          node {\n            id\n            happenedAt\n            sales(first: 10) {\n              edges {\n                node {\n                  actionType\n                  lineType\n                  quantity\n                  totalAmount {\n                    shopMoney {\n                      amount\n                    }\n                  }\n                  ... on ProductSale {\n                    lineItem {\n                      id\n                      name\n                    }\n                  }\n                  ... on ShippingLineSale {\n                    shippingLine {\n                      id\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "Get sales agreements for order edits", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    order(id: \"gid://shopify/Order/116757651\") {\n      agreements(first: 10) {\n        edges {\n          node {\n            id\n            happenedAt\n            sales(first: 10) {\n              edges {\n                node {\n                  actionType\n                  lineType\n                  quantity\n                  totalAmount {\n                    shopMoney {\n                      amount\n                    }\n                  }\n                  ... on ProductSale {\n                    lineItem {\n                      id\n                      name\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "Get shipping lines for an order", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query shippingLinesByOrder($id: ID!) {\n    order(id: $id) {\n      shippingLines(first: 10, includeRemovals: true) {\n        edges {\n          node {\n            id\n            title\n            isRemoved\n          }\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/Order/816964372\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Preview a full duty refund", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query suggestedRefund {\n    order(id: \"gid://shopify/Order/469306983\") {\n      suggestedRefund(refundDuties: [{dutyId: \"gid://shopify/Duty/1064114503\", refundType: FULL}]) {\n        refundDuties {\n          amountSet {\n            shopMoney {\n              amount\n              currencyCode\n            }\n          }\n          originalDuty {\n            id\n          }\n        }\n        totalDutiesSet {\n          shopMoney {\n            amount\n            currencyCode\n          }\n        }\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "Preview a proportional duty refund", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query suggestedRefund {\n    order(id: \"gid://shopify/Order/469306983\") {\n      suggestedRefund(refundLineItems: [{lineItemId: \"gid://shopify/LineItem/983004162\", quantity: 1}], refundDuties: [{dutyId: \"gid://shopify/Duty/1064114503\", refundType: PROPORTIONAL}]) {\n        refundDuties {\n          amountSet {\n            shopMoney {\n              amount\n              currencyCode\n            }\n          }\n          originalDuty {\n            id\n          }\n        }\n        totalDutiesSet {\n          shopMoney {\n            amount\n            currencyCode\n          }\n        }\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "Retrieve a specific order", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    order(id: \"gid://shopify/Order/148977776\") {\n      id\n      name\n      totalPriceSet {\n        presentmentMoney {\n          amount\n        }\n      }\n      lineItems(first: 10) {\n        nodes {\n          id\n          name\n        }\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "Retrieve duties applied to an order", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    order(id: \"gid://shopify/Order/469306983\") {\n      currentTotalDutiesSet {\n        shopMoney {\n          amount\n        }\n      }\n      lineItems(first: 10) {\n        edges {\n          node {\n            id\n            name\n            refundableQuantity\n            duties {\n              id\n              harmonizedSystemCode\n              price {\n                shopMoney {\n                  amount\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "Retrieves a count of an order's transactions", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query TransactionsCountForOrder($orderId: ID!) {\n    order(id: $orderId) {\n      transactionsCount {\n        count\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"orderId\": \"gid://shopify/Order/148977776\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Retrieves a count of fulfillments associated with a specific order", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query FulfillmentsCount($orderId: ID!) {\n    order(id: $orderId) {\n      fulfillmentsCount {\n        count\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"orderId\": \"gid://shopify/Order/148977776\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Retrieves a list of all order risks for an order", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query OrderRiskAssessmentsList($orderId: ID!) {\n    order(id: $orderId) {\n      risk {\n        assessments {\n          riskLevel\n          provider {\n            title\n          }\n          facts {\n            description\n            sentiment\n          }\n        }\n        recommendation\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"orderId\": \"gid://shopify/Order/647667644\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Retrieves a list of fulfillment orders for a specific order", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query FulfillmentOrderList($orderId: ID!) {\n    order(id: $orderId) {\n      fulfillmentOrders(first: 250) {\n        nodes {\n          id\n          createdAt\n          updatedAt\n          requestStatus\n          status\n          fulfillAt\n          destination {\n            id\n            address1\n            address2\n            city\n            company\n            countryCode\n            email\n            firstName\n            lastName\n            phone\n            province\n            zip\n          }\n          lineItems(first: 250) {\n            nodes {\n              id\n              totalQuantity\n              inventoryItemId\n              remainingQuantity\n              variant {\n                id\n              }\n            }\n          }\n          internationalDuties {\n            incoterm\n          }\n          fulfillmentHolds {\n            reason\n            reasonNotes\n          }\n          fulfillBy\n          deliveryMethod {\n            id\n            methodType\n            minDeliveryDateTime\n            maxDeliveryDateTime\n            additionalInformation {\n              instructions\n              phone\n            }\n            serviceCode\n            sourceReference\n            presentedName\n            brandedPromise {\n              handle\n              name\n            }\n          }\n          assignedLocation {\n            address1\n            address2\n            city\n            countryCode\n            location {\n              id\n            }\n            name\n            phone\n            province\n            zip\n          }\n          merchantRequests(first: 250) {\n            nodes {\n              message\n              requestOptions\n              kind\n            }\n          }\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"orderId\": \"gid://shopify/Order/148977776\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Retrieves a list of refunds for an order", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query RefundList($orderId: ID!) {\n    order(id: $orderId) {\n      refunds(first: 10) {\n        id\n        note\n        totalRefundedSet {\n          presentmentMoney {\n            amount\n            currencyCode\n          }\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"orderId\": \"gid://shopify/Order/647667644\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Retrieves a list of transactions", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query TransactionsForOrder($orderId: ID!) {\n    order(id: $orderId) {\n      transactions(first: 10) {\n        accountNumber\n        amountSet {\n          presentmentMoney {\n            amount\n            currencyCode\n          }\n          shopMoney {\n            amount\n            currencyCode\n          }\n        }\n        authorizationCode\n        authorizationExpiresAt\n        createdAt\n        errorCode\n        fees {\n          amount {\n            amount\n            currencyCode\n          }\n        }\n        formattedGateway\n        gateway\n        id\n        kind\n        manuallyCapturable\n        maximumRefundableV2 {\n          amount\n          currencyCode\n        }\n        multiCapturable\n        order {\n          id\n        }\n        parentTransaction {\n          id\n        }\n        paymentDetails {\n          ... on CardPaymentDetails {\n            paymentMethodName\n          }\n          ... on ShopPayInstallmentsPaymentDetails {\n            paymentMethodName\n          }\n        }\n        paymentIcon {\n          url\n        }\n        paymentId\n        processedAt\n        receiptJson\n        settlementCurrency\n        shopifyPaymentsSet {\n          refundSet {\n            acquirerReferenceNumber\n          }\n        }\n        status\n        test\n        totalUnsettledSet {\n          presentmentMoney {\n            amount\n            currencyCode\n          }\n          shopMoney {\n            amount\n            currencyCode\n          }\n        }\n        user {\n          id\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"orderId\": \"gid://shopify/Order/148977776\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Retrieves fulfillments associated with an order", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query FulfillmentList($orderId: ID!) {\n    order(id: $orderId) {\n      fulfillments(first: 10) {\n        fulfillmentLineItems(first: 10) {\n          edges {\n            node {\n              id\n              lineItem {\n                title\n                variant {\n                  id\n                }\n              }\n              quantity\n              originalTotalSet {\n                shopMoney {\n                  amount\n                  currencyCode\n                }\n              }\n            }\n          }\n        }\n        status\n        estimatedDeliveryAt\n        location {\n          id\n          legacyResourceId\n        }\n        service {\n          handle\n        }\n        trackingInfo(first: 10) {\n          company\n          number\n          url\n        }\n        originAddress {\n          address1\n          address2\n          city\n          countryCode\n          provinceCode\n          zip\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"orderId\": \"gid://shopify/Order/148977776\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Retrieves tax related information for a given order", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    order(id: \"gid://shopify/Order/53613399\") {\n      id\n      createdAt\n      currencyCode\n      currentSubtotalPriceSet {\n        shopMoney {\n          amount\n          currencyCode\n        }\n      }\n      currentTotalPriceSet {\n        shopMoney {\n          amount\n          currencyCode\n        }\n      }\n      currentTotalTaxSet {\n        shopMoney {\n          amount\n          currencyCode\n        }\n      }\n      name\n      subtotalPriceSet {\n        shopMoney {\n          amount\n          currencyCode\n        }\n      }\n      taxExempt\n      taxLines {\n        rate\n        title\n        priceSet {\n          shopMoney {\n            amount\n            currencyCode\n          }\n        }\n      }\n      taxesIncluded\n      subtotalPriceSet {\n        shopMoney {\n          amount\n          currencyCode\n        }\n      }\n      totalPriceSet {\n        shopMoney {\n          amount\n          currencyCode\n        }\n      }\n      totalShippingPriceSet {\n        shopMoney {\n          amount\n          currencyCode\n        }\n      }\n      totalTaxSet {\n        shopMoney {\n          amount\n          currencyCode\n        }\n      }\n      updatedAt\n      lineItems(first: 250) {\n        nodes {\n          unfulfilledQuantity\n          fulfillmentService {\n            serviceName\n          }\n          fulfillmentStatus\n          variant {\n            id\n            title\n          }\n          id\n          originalUnitPriceSet {\n            shopMoney {\n              amount\n              currencyCode\n            }\n          }\n          quantity\n          requiresShipping\n          sku\n          title\n          name\n          vendor\n          customAttributes {\n            key\n            value\n          }\n          taxable\n          taxLines {\n            rate\n            title\n            channelLiable\n            priceSet {\n              shopMoney {\n                amount\n                currencyCode\n              }\n            }\n          }\n        }\n      }\n      shippingAddress {\n        address1\n        address2\n        city\n        country\n        phone\n        province\n        zip\n        provinceCode\n        countryCodeV2\n      }\n      shippingLines(first: 50) {\n        nodes {\n          code\n          originalPriceSet {\n            shopMoney {\n              amount\n              currencyCode\n            }\n          }\n          taxLines {\n            rate\n            title\n            priceSet {\n              shopMoney {\n                amount\n                currencyCode\n              }\n            }\n          }\n        }\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}]}, {"name": "orderByIdentifier", "description": "Return an order by an identifier.", "arguments": [{"name": "identifier", "type": "OrderIdentifierInput!", "required": true, "description": "The identifier of the order."}], "returns": [], "examples": []}, {"name": "orders", "description": "Returns a list of orders placed in the store, including data such as order status, customer, and line item details.\nUse the orders query to build reports, analyze sales performance, or automate fulfillment workflows. The orders query supports pagination,\nsorting, and filtering.", "arguments": [{"name": "after", "type": "String", "required": true, "description": "The elements that come after the specified cursor."}], "returns": [], "examples": [{"description": "Retrieve a list of orders", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    orders(first: 10) {\n      edges {\n        cursor\n        node {\n          id\n        }\n      }\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "Retrieve a list of orders using their IDs and GraphQL aliases", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    order1: order(id: \"gid://shopify/Order/148977776\") {\n      name\n    }\n    order2: order(id: \"gid://shopify/Order/1073459961\") {\n      name\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "Retrieve specific order details", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    orders(first: 5) {\n      edges {\n        node {\n          id\n          name\n          createdAt\n          displayFinancialStatus\n          displayFulfillmentStatus\n          totalPriceSet {\n            shopMoney {\n              amount\n              currencyCode\n            }\n          }\n          subtotalPriceSet {\n            shopMoney {\n              amount\n              currencyCode\n            }\n          }\n          email\n          shippingAddress {\n            address1\n            city\n            provinceCode\n            zip\n          }\n          lineItems(first: 5) {\n            edges {\n              node {\n                name\n                quantity\n                sku\n                variant {\n                  id\n                  title\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "Retrieve the first 10 orders updated after December 1, 2019", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    orders(first: 10, query: \"updated_at:>2019-12-01\") {\n      edges {\n        node {\n          id\n          updatedAt\n        }\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "Retrieve the first 10 orders with authorized payments", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    orders(first: 10, query: \"financial_status:authorized\") {\n      edges {\n        node {\n          id\n          displayFinancialStatus\n        }\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}]}, {"name": "orderSavedSearches", "description": "List of the shop's order saved searches.", "arguments": [{"name": "after", "type": "String", "required": true, "description": "The elements that come after the specified cursor."}], "returns": [], "examples": []}, {"name": "ordersCount", "description": "Returns the count of orders for the given shop. Limited to a maximum of 10000.", "arguments": [{"name": "limit", "type": "Int", "required": true, "description": "The upper bound on count value before returning a result."}], "returns": [], "examples": [{"description": "Overview", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query OrdersCount {\n    ordersCount(limit: 2000) {\n      count\n      precision\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}]}, {"name": "pendingOrdersCount", "description": "The number of pendings orders. Limited to a maximum of 10000.", "arguments": [{"name": "Count", "type": "Count", "required": true, "description": "Details for count of elements."}], "returns": [], "examples": []}, {"name": "productTags", "description": "A list of tags that have been added to products.\nThe maximum page size is 5000.", "arguments": [{"name": "after", "type": "String", "required": true, "description": "The elements that come after the specified cursor."}], "returns": [], "examples": []}, {"name": "productTypes", "description": "The list of types added to products.\nThe maximum page size is 1000.", "arguments": [{"name": "after", "type": "String", "required": true, "description": "The elements that come after the specified cursor."}], "returns": [], "examples": []}, {"name": "productVendors", "description": "The list of vendors added to products.\nThe maximum page size is 1000.", "arguments": [{"name": "after", "type": "String", "required": true, "description": "The elements that come after the specified cursor."}], "returns": [], "examples": []}, {"name": "publishedProductsCount", "description": "Returns a count of published products by publication ID.", "arguments": [{"name": "publicationId", "type": "ID!", "required": true, "description": "The ID of the publication that the products are published to."}], "returns": [], "examples": [{"description": "Overview", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query PublishedProductCount($publicationId: ID!) {\n    publishedProductsCount(publicationId: $publicationId) {\n      count\n      precision\n    }\n  }\nQUERY\n\nvariables = {\n  \"publicationId\": \"gid://shopify/Publication/244171671\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "refund", "description": "Returns a Refund resource by ID.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID of the Refund to return."}], "returns": [], "examples": [{"description": "Get refund duties", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query refund($input: ID!) {\n    refund(id: $input) {\n      duties {\n        originalDuty {\n          countryCodeOfOrigin\n        }\n        amountSet {\n          shopMoney {\n            amount\n          }\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": \"gid://shopify/Refund/850600470\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Get the total refunded amount", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query refund($input: ID!) {\n    refund(id: $input) {\n      totalRefundedSet {\n        shopMoney {\n          amount\n          currencyCode\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": \"gid://shopify/Refund/196417871\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Retrieves a specific refund", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query RefundShow($id: ID!) {\n    refund(id: $id) {\n      id\n      note\n      totalRefundedSet {\n        presentmentMoney {\n          amount\n          currencyCode\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/Refund/196417871\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "return", "description": "Returns a Return resource by ID.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID of the Return to return."}], "returns": [], "examples": [{"description": "Get status and return line items for a return", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    return(id: \"gid://shopify/Return/945000954\") {\n      status\n      name\n      order {\n        id\n      }\n      returnLineItems(first: 10) {\n        edges {\n          node {\n            ... on ReturnLineItem {\n              fulfillmentLineItem {\n                lineItem {\n                  name\n                }\n              }\n              totalWeight {\n                value\n              }\n            }\n            quantity\n            returnReason\n            returnReasonNote\n          }\n        }\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "Get status and return line items for a return (API Version 2024-04 and older)", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    return(id: \"gid://shopify/Return/945000954\") {\n      status\n      name\n      order {\n        id\n      }\n      returnLineItems(first: 10) {\n        edges {\n          node {\n            quantity\n            returnReason\n            returnReasonNote\n            fulfillmentLineItem {\n              lineItem {\n                name\n              }\n            }\n            totalWeight {\n              value\n            }\n          }\n        }\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}]}, {"name": "returnableFulfillment", "description": "Lookup a returnable fulfillment by ID.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID of the ReturnableFulfillment to return."}], "returns": [], "examples": [{"description": "Overview", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    returnableFulfillment(id: \"gid://shopify/ReturnableFulfillment/607470790\") {\n      id\n      fulfillment {\n        id\n        status\n      }\n      returnableFulfillmentLineItems(first: 5) {\n        edges {\n          node {\n            quantity\n            fulfillmentLineItem {\n              id\n              lineItem {\n                id\n                originalUnitPriceSet {\n                  shopMoney {\n                    amount\n                    currencyCode\n                  }\n                }\n                quantity\n                requiresShipping\n                taxable\n                unfulfilledQuantity\n              }\n            }\n          }\n        }\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}]}, {"name": "returnableFulfillments", "description": "List of returnable fulfillments.", "arguments": [{"name": "after", "type": "String", "required": true, "description": "The elements that come after the specified cursor."}], "returns": [], "examples": [{"description": "Overview", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    returnableFulfillments(orderId: \"gid://shopify/Order/215577410\", first: 5) {\n      edges {\n        node {\n          id\n          fulfillment {\n            id\n            displayStatus\n            location {\n              address {\n                address1\n              }\n            }\n          }\n        }\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}]}, {"name": "returnCalculate", "description": "The calculated monetary value to be exchanged due to the return.", "arguments": [{"name": "input", "type": "CalculateReturnInput!", "required": true, "description": "The input fields for calculating a return."}], "returns": [], "examples": []}, {"name": "reverseDelivery", "description": "Lookup a reverse delivery by ID.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID of the ReverseDelivery to return."}], "returns": [], "examples": []}, {"name": "reverseFulfillmentOrder", "description": "Lookup a reverse fulfillment order by ID.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID of the reverse fulfillment order to return."}], "returns": [], "examples": []}, {"name": "subscriptionBillingAttempt", "description": "Returns a SubscriptionBillingAttempt by ID.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID of the SubscriptionBillingAttempt to return."}], "returns": [], "examples": [{"description": "Query for a billing attempt with a processing error", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query findBillingAttempt($subscriptionBillingAttempt: ID!) {\n    subscriptionBillingAttempt(id: $subscriptionBillingAttempt) {\n      id\n      nextActionUrl\n      idempotencyKey\n      ready\n      order {\n        id\n      }\n      subscriptionContract {\n        id\n      }\n      processingError {\n        __typename\n        code\n        message\n        ... on SubscriptionBillingAttemptInsufficientStockProductVariantsError {\n          insufficientStockProductVariants(first: 3) {\n            edges {\n              node {\n                id\n                title\n              }\n            }\n          }\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"subscriptionBillingAttempt\": \"gid://shopify/SubscriptionBillingAttempt/693432113\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Query for a subscription billing attempt", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query findBillingAttempt($subscriptionBillingAttempt: ID!) {\n    subscriptionBillingAttempt(id: $subscriptionBillingAttempt) {\n      id\n      nextActionUrl\n      idempotencyKey\n      ready\n      order {\n        id\n      }\n      subscriptionContract {\n        id\n      }\n      errorMessage\n      errorCode\n    }\n  }\nQUERY\n\nvariables = {\n  \"subscriptionBillingAttempt\": \"gid://shopify/SubscriptionBillingAttempt/693432112\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "subscriptionBillingAttempts", "description": "Returns subscription billing attempts on a store.", "arguments": [{"name": "after", "type": "String", "required": true, "description": "The elements that come after the specified cursor."}], "returns": [], "examples": []}, {"name": "subscriptionBillingCycle", "description": "Returns a subscription billing cycle found either by cycle index or date.", "arguments": [{"name": "billingCycleInput", "type": "SubscriptionBillingCycleInput!", "required": true, "description": "Input object used to select and use billing cycles."}], "returns": [], "examples": [{"description": "Get a billing cycle by cycle index", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query subscriptionBillingCycle($contractId: ID!, $index: Int!) {\n    subscriptionBillingCycle(billingCycleInput: {contractId: $contractId, selector: {index: $index}}) {\n      billingAttemptExpectedDate\n    }\n  }\nQUERY\n\nvariables = {\n  \"contractId\": \"gid://shopify/SubscriptionContract/593791907\",\n  \"index\": 1\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Get a billing cycle by date", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query subscriptionBillingCycle($contractId: ID!, $date: DateTime!) {\n    subscriptionBillingCycle(billingCycleInput: {contractId: $contractId, selector: {date: $date}}) {\n      billingAttemptExpectedDate\n    }\n  }\nQUERY\n\nvariables = {\n  \"contractId\": \"gid://shopify/SubscriptionContract/593791907\",\n  \"date\": \"2022-12-01T00:00:00Z\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "subscriptionBillingCycleBulkResults", "description": "Retrieves the results of the asynchronous job for the subscription billing cycle bulk action based on the specified job ID.\nThis query can be used to obtain the billing cycles that match the criteria defined in the subscriptionBillingCycleBulkSearch and subscriptionBillingCycleBulkCharge mutations.", "arguments": [{"name": "after", "type": "String", "required": true, "description": "The elements that come after the specified cursor."}], "returns": [], "examples": [{"description": "Overview", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query SubscriptionBillingCycleBulkResults($jobId: ID!, $first: Int!, $after: String) {\n    subscriptionBillingCycleBulkResults(first: $first, after: $after, jobId: $jobId) {\n      pageInfo {\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          cycleIndex\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"jobId\": \"gid://shopify/Job/0faf9493-b523-4c92-8e6e-59139254b03b\",\n  \"first\": 3\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "subscriptionBillingCycles", "description": "Returns subscription billing cycles for a contract ID.", "arguments": [{"name": "after", "type": "String", "required": true, "description": "The elements that come after the specified cursor."}], "returns": [], "examples": [{"description": "Get the billing cycles between specific dates", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query subscriptionBillingCycles($contractId: ID!) {\n    subscriptionBillingCycles(first: 10, contractId: $contractId, billingCyclesDateRangeSelector: {startDate: \"2022-12-15T00:00:00Z\", endDate: \"2023-02-15T00:00:00Z\"}) {\n      edges {\n        node {\n          billingAttemptExpectedDate\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"contractId\": \"gid://shopify/SubscriptionContract/593791907\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Get the billing cycles between specific indexes", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query subscriptionBillingCycles($contractId: ID!) {\n    subscriptionBillingCycles(first: 10, contractId: $contractId, billingCyclesIndexRangeSelector: {startIndex: 1, endIndex: 3}) {\n      edges {\n        node {\n          billingAttemptExpectedDate\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"contractId\": \"gid://shopify/SubscriptionContract/593791907\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "subscriptionContract", "description": "Returns a Subscription Contract resource by ID.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID of the Subscription Contract to return."}], "returns": [], "examples": [{"description": "Overview", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query findContract($subscriptionContractId: ID!) {\n    subscriptionContract(id: $subscriptionContractId) {\n      id\n      status\n      nextBillingDate\n    }\n  }\nQUERY\n\nvariables = {\n  \"subscriptionContractId\": \"gid://shopify/SubscriptionContract/593791907\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "subscriptionContracts", "description": "List Subscription Contracts.", "arguments": [{"name": "after", "type": "String", "required": true, "description": "The elements that come after the specified cursor."}], "returns": [], "examples": []}, {"name": "subscriptionDraft", "description": "Returns a Subscription Draft resource by ID.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID of the Subscription Draft to return."}], "returns": [], "examples": []}, {"name": "tenderTransactions", "description": "Returns a list of TenderTransactions associated with the shop.", "arguments": [{"name": "after", "type": "String", "required": true, "description": "The elements that come after the specified cursor."}], "returns": [], "examples": [{"description": "Overview", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query TenderTransactionList {\n    tenderTransactions(first: 10) {\n      nodes {\n        id\n        order {\n          id\n        }\n        amount {\n          amount\n          currencyCode\n        }\n        user {\n          id\n        }\n        test\n        processedAt\n        remoteReference\n        paymentDetails: transactionDetails {\n          ... on TenderTransactionCreditCardDetails {\n            creditCardCompany\n            creditCardNumber\n          }\n        }\n        paymentMethod\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}]}], "mutations": [{"name": "delegateAccessTokenDestroy", "description": "Destroys a delegate access token.", "arguments": [{"name": "accessToken", "type": "String!", "required": true, "description": "Provides the delegate access token to destroy."}], "returns": [], "examples": []}, {"name": "deliveryProfileRemove", "description": "Enqueue the removal of a delivery profile.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID of the delivery profile to remove."}], "returns": [], "examples": []}, {"name": "deliveryShippingOriginAssign", "description": "Assigns a location as the shipping origin while using legacy compatibility mode for multi-location delivery profiles.", "arguments": [{"name": "locationId", "type": "ID!", "required": true, "description": "The ID of the location to assign as the shipping origin."}], "returns": [], "examples": []}, {"name": "draftOrderBulkAddTags", "description": "Adds tags to multiple draft orders.", "arguments": [{"name": "ids", "type": "[ID!]", "required": true, "description": "The IDs of the draft orders to add tags to."}], "returns": [], "examples": []}, {"name": "draftOrderBulkDelete", "description": "Deletes multiple draft orders.", "arguments": [{"name": "ids", "type": "[ID!]", "required": true, "description": "The IDs of the draft orders to delete."}], "returns": [], "examples": []}, {"name": "draftOrderBulkRemoveTags", "description": "Removes tags from multiple draft orders.", "arguments": [{"name": "ids", "type": "[ID!]", "required": true, "description": "The IDs of the draft orders to remove tags from."}], "returns": [], "examples": []}, {"name": "draftOrderCalculate", "description": "Calculates the properties of a draft order. Useful for determining information\nsuch as total taxes or price without actually creating a draft order.", "arguments": [{"name": "input", "type": "DraftOrderInput!", "required": true, "description": "The fields for the draft order."}], "returns": [], "examples": [{"description": "Calculate properties of a draft order", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation CalculateDraftOrder($input: DraftOrderInput!) {\n    draftOrderCalculate(input: $input) {\n      calculatedDraftOrder {\n        customer {\n          id\n          email\n          firstName\n          numberOfOrders\n          defaultAddress {\n            id\n            firstName\n            lastName\n            address1\n            address2\n            city\n            provinceCode\n            zip\n            countryCodeV2\n          }\n          taxExempt\n        }\n        billingAddressMatchesShippingAddress\n        totalPriceSet {\n          presentmentMoney {\n            amount\n            currencyCode\n          }\n          shopMoney {\n            amount\n            currencyCode\n          }\n        }\n        lineItems {\n          appliedDiscount {\n            amountSet {\n              presentmentMoney {\n                amount\n                currencyCode\n              }\n              shopMoney {\n                amount\n                currencyCode\n              }\n            }\n            value\n            valueType\n            description\n          }\n          discountedTotalSet {\n            presentmentMoney {\n              amount\n              currencyCode\n            }\n            shopMoney {\n              amount\n              currencyCode\n            }\n          }\n          product {\n            id\n            title\n          }\n          quantity\n          requiresShipping\n          sku\n          taxable\n          title\n          variantTitle\n          variant {\n            id\n          }\n          weight {\n            value\n            unit\n          }\n        }\n        totalTaxSet {\n          presentmentMoney {\n            amount\n            currencyCode\n          }\n          shopMoney {\n            amount\n            currencyCode\n          }\n        }\n        totalDiscountsSet {\n          presentmentMoney {\n            amount\n            currencyCode\n          }\n          shopMoney {\n            amount\n            currencyCode\n          }\n        }\n        shippingLine {\n          id\n          custom\n          shippingRateHandle\n          title\n          originalPriceSet {\n            presentmentMoney {\n              amount\n              currencyCode\n            }\n            shopMoney {\n              amount\n              currencyCode\n            }\n          }\n        }\n        presentmentCurrencyCode\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": {\n    \"appliedDiscount\": {\n      \"description\": \"Loyalty\",\n      \"value\": 5,\n      \"valueType\": \"FIXED_AMOUNT\"\n    },\n    \"billingAddress\": {\n      \"address1\": \"123 Amoebobacterieae St\",\n      \"address2\": \"\",\n      \"city\": \"Ottawa\",\n      \"company\": \"\",\n      \"countryCode\": \"CA\",\n      \"firstName\": \"Bob\",\n      \"lastName\": \"Bobsen\",\n      \"phone\": \"\",\n      \"provinceCode\": \"ON\",\n      \"zip\": \"K2P0V6\"\n    },\n    \"customerId\": \"gid://shopify/Customer/544365967\",\n    \"lineItems\": [{\"appliedDiscount\"=>{\"description\"=>\"Promo\", \"value\"=>5, \"valueType\"=>\"FIXED_AMOUNT\"}, \"customAttributes\"=>[], \"originalUnitPrice\"=>10, \"quantity\"=>1, \"requiresShipping\"=>true, \"sku\"=>\"draft-151\", \"taxable\"=>true, \"title\"=>\"151cm\", \"variantId\"=>\"gid://shopify/ProductVariant/43729076\", \"weight\"=>{\"unit\"=>\"KILOGRAMS\", \"value\"=>1}}, {\"appliedDiscount\"=>nil, \"customAttributes\"=>[], \"originalUnitPrice\"=>\"10.0\", \"quantity\"=>2, \"requiresShipping\"=>true, \"sku\"=>nil, \"taxable\"=>true, \"title\"=>\"Spring Promo Item\", \"variantId\"=>nil, \"weight\"=>{\"unit\"=>\"KILOGRAMS\", \"value\"=>1.2}}],\n    \"presentmentCurrencyCode\": \"CAD\",\n    \"shippingAddress\": {\n      \"address1\": \"\",\n      \"address2\": \"\",\n      \"city\": \"\",\n      \"company\": \"\",\n      \"countryCode\": \"CA\",\n      \"firstName\": \"Bob\",\n      \"lastName\": \"Smith\",\n      \"phone\": \"\",\n      \"provinceCode\": \"AB\",\n      \"zip\": \"\"\n    },\n    \"shippingLine\": {\n      \"price\": \"0.0\",\n      \"title\": \"Free shipping\"\n    },\n    \"taxExempt\": false\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Calculate properties of a draft order with markets context", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation CalculateDraftOrder($input: DraftOrderInput!) {\n    draftOrderCalculate(input: $input) {\n      calculatedDraftOrder {\n        purchasingEntity {\n          ... on Customer {\n            firstName\n          }\n        }\n        totalPriceSet {\n          presentmentMoney {\n            amount\n            currencyCode\n          }\n          shopMoney {\n            amount\n            currencyCode\n          }\n        }\n        lineItems {\n          appliedDiscount {\n            amountSet {\n              presentmentMoney {\n                amount\n                currencyCode\n              }\n              shopMoney {\n                amount\n                currencyCode\n              }\n            }\n            value\n            valueType\n            description\n          }\n          discountedTotalSet {\n            presentmentMoney {\n              amount\n              currencyCode\n            }\n            shopMoney {\n              amount\n              currencyCode\n            }\n          }\n          product {\n            id\n            title\n          }\n          quantity\n          requiresShipping\n          sku\n          taxable\n          title\n          variantTitle\n          variant {\n            id\n          }\n          weight {\n            value\n            unit\n          }\n        }\n        totalTaxSet {\n          presentmentMoney {\n            amount\n            currencyCode\n          }\n          shopMoney {\n            amount\n            currencyCode\n          }\n        }\n        totalDiscountsSet {\n          presentmentMoney {\n            amount\n            currencyCode\n          }\n          shopMoney {\n            amount\n            currencyCode\n          }\n        }\n        presentmentCurrencyCode\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": {\n    \"presentmentCurrencyCode\": \"CAD\",\n    \"appliedDiscount\": {\n      \"description\": \"Loyalty\",\n      \"value\": 5,\n      \"valueType\": \"FIXED_AMOUNT\"\n    },\n    \"billingAddress\": {\n      \"address1\": \"123 Amoebobacterieae St\",\n      \"address2\": \"\",\n      \"city\": \"Ottawa\",\n      \"company\": \"\",\n      \"countryCode\": \"CA\",\n      \"firstName\": \"Bob\",\n      \"lastName\": \"Bobsen\",\n      \"phone\": \"\",\n      \"provinceCode\": \"ON\",\n      \"zip\": \"K2P0V6\"\n    },\n    \"customerId\": \"gid://shopify/Customer/544365967\",\n    \"lineItems\": [{\"appliedDiscount\"=>{\"description\"=>\"Promo\", \"value\"=>5, \"valueType\"=>\"FIXED_AMOUNT\"}, \"customAttributes\"=>[], \"quantity\"=>1, \"requiresShipping\"=>true, \"sku\"=>\"draft-151\", \"taxable\"=>true, \"title\"=>\"151cm\", \"variantId\"=>\"gid://shopify/ProductVariant/43729076\", \"weight\"=>{\"unit\"=>\"KILOGRAMS\", \"value\"=>1}}, {\"appliedDiscount\"=>nil, \"customAttributes\"=>[], \"originalUnitPrice\"=>\"10.0\", \"quantity\"=>2, \"requiresShipping\"=>true, \"sku\"=>nil, \"taxable\"=>true, \"title\"=>\"Spring Promo Item\", \"variantId\"=>nil, \"weight\"=>{\"unit\"=>\"KILOGRAMS\", \"value\"=>1.2}}],\n    \"shippingAddress\": {\n      \"address1\": \"\",\n      \"address2\": \"\",\n      \"city\": \"\",\n      \"company\": \"\",\n      \"countryCode\": \"CA\",\n      \"firstName\": \"Bob\",\n      \"lastName\": \"Smith\",\n      \"phone\": \"\",\n      \"provinceCode\": \"AB\",\n      \"zip\": \"\"\n    },\n    \"shippingLine\": {\n      \"price\": \"0.0\",\n      \"title\": \"Free shipping\"\n    },\n    \"taxExempt\": false\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Calculating a draft order with no line items", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation CalculateDraftOrder($input: DraftOrderInput!) {\n    draftOrderCalculate(input: $input) {\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": {\n    \"appliedDiscount\": {\n      \"description\": \"Loyalty\",\n      \"value\": 5,\n      \"valueType\": \"FIXED_AMOUNT\"\n    },\n    \"billingAddress\": {\n      \"address1\": \"\",\n      \"address2\": \"\",\n      \"city\": \"\",\n      \"company\": \"\",\n      \"countryCode\": \"CA\",\n      \"firstName\": \"Bob\",\n      \"lastName\": \"Smith\",\n      \"phone\": \"\",\n      \"provinceCode\": \"AB\",\n      \"zip\": \"\"\n    },\n    \"lineItems\": [],\n    \"presentmentCurrencyCode\": \"CAD\",\n    \"shippingAddress\": {\n      \"address1\": \"\",\n      \"address2\": \"\",\n      \"city\": \"\",\n      \"company\": \"\",\n      \"countryCode\": \"CA\",\n      \"firstName\": \"Bob\",\n      \"lastName\": \"Smith\",\n      \"phone\": \"\",\n      \"provinceCode\": \"AB\",\n      \"zip\": \"\"\n    },\n    \"shippingLine\": {\n      \"price\": \"0.0\",\n      \"title\": \"Free shipping\"\n    },\n    \"taxExempt\": false\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "draftOrderCalculate reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation CalculateDraftOrder($input: DraftOrderInput!) {\n    draftOrderCalculate(input: $input) {\n      calculatedDraftOrder {\n        customer {\n          id\n          email\n          firstName\n          numberOfOrders\n          defaultAddress {\n            id\n            firstName\n            lastName\n            address1\n            address2\n            city\n            provinceCode\n            zip\n            countryCodeV2\n          }\n          taxExempt\n        }\n        billingAddressMatchesShippingAddress\n        totalPriceSet {\n          presentmentMoney {\n            amount\n            currencyCode\n          }\n          shopMoney {\n            amount\n            currencyCode\n          }\n        }\n        lineItems {\n          appliedDiscount {\n            amountSet {\n              presentmentMoney {\n                amount\n                currencyCode\n              }\n              shopMoney {\n                amount\n                currencyCode\n              }\n            }\n            value\n            valueType\n            description\n          }\n          discountedTotalSet {\n            presentmentMoney {\n              amount\n              currencyCode\n            }\n            shopMoney {\n              amount\n              currencyCode\n            }\n          }\n          product {\n            id\n            title\n          }\n          quantity\n          requiresShipping\n          sku\n          taxable\n          title\n          variantTitle\n          variant {\n            id\n          }\n          weight {\n            value\n            unit\n          }\n        }\n        totalTaxSet {\n          presentmentMoney {\n            amount\n            currencyCode\n          }\n          shopMoney {\n            amount\n            currencyCode\n          }\n        }\n        totalDiscountsSet {\n          presentmentMoney {\n            amount\n            currencyCode\n          }\n          shopMoney {\n            amount\n            currencyCode\n          }\n        }\n        shippingLine {\n          id\n          custom\n          shippingRateHandle\n          title\n          originalPriceSet {\n            presentmentMoney {\n              amount\n              currencyCode\n            }\n            shopMoney {\n              amount\n              currencyCode\n            }\n          }\n        }\n        presentmentCurrencyCode\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": {\n    \"appliedDiscount\": {\n      \"description\": \"Loyalty\",\n      \"value\": 5,\n      \"valueType\": \"FIXED_AMOUNT\"\n    },\n    \"billingAddress\": {\n      \"address1\": \"123 Amoebobacterieae St\",\n      \"address2\": \"\",\n      \"city\": \"Ottawa\",\n      \"company\": \"\",\n      \"countryCode\": \"CA\",\n      \"firstName\": \"Bob\",\n      \"lastName\": \"Bobsen\",\n      \"phone\": \"\",\n      \"provinceCode\": \"ON\",\n      \"zip\": \"K2P0V6\"\n    },\n    \"customerId\": \"gid://shopify/Customer/544365967\",\n    \"lineItems\": [{\"appliedDiscount\"=>{\"description\"=>\"Promo\", \"value\"=>5, \"valueType\"=>\"FIXED_AMOUNT\"}, \"customAttributes\"=>[], \"originalUnitPrice\"=>10, \"quantity\"=>1, \"requiresShipping\"=>true, \"sku\"=>\"draft-151\", \"taxable\"=>true, \"title\"=>\"151cm\", \"variantId\"=>\"gid://shopify/ProductVariant/43729076\", \"weight\"=>{\"unit\"=>\"KILOGRAMS\", \"value\"=>1}}, {\"appliedDiscount\"=>nil, \"customAttributes\"=>[], \"originalUnitPrice\"=>\"10.0\", \"quantity\"=>2, \"requiresShipping\"=>true, \"sku\"=>nil, \"taxable\"=>true, \"title\"=>\"Spring Promo Item\", \"variantId\"=>nil, \"weight\"=>{\"unit\"=>\"KILOGRAMS\", \"value\"=>1.2}}],\n    \"presentmentCurrencyCode\": \"CAD\",\n    \"shippingAddress\": {\n      \"address1\": \"\",\n      \"address2\": \"\",\n      \"city\": \"\",\n      \"company\": \"\",\n      \"countryCode\": \"CA\",\n      \"firstName\": \"Bob\",\n      \"lastName\": \"Smith\",\n      \"phone\": \"\",\n      \"provinceCode\": \"AB\",\n      \"zip\": \"\"\n    },\n    \"shippingLine\": {\n      \"price\": \"0.0\",\n      \"title\": \"Free shipping\"\n    },\n    \"taxExempt\": false\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "draftOrderComplete", "description": "Completes a draft order and creates an order.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The draft order to complete."}], "returns": [], "examples": [{"description": "Complete a draft order", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation draftOrderComplete($id: ID!) {\n    draftOrderComplete(id: $id) {\n      draftOrder {\n        id\n        order {\n          id\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/DraftOrder/276395349\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Complete a draft order with payment pending", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation draftOrderComplete($id: ID!, $paymentPending: Boolean) {\n    draftOrderComplete(id: $id, paymentPending: $paymentPending) {\n      draftOrder {\n        id\n        order {\n          id\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/DraftOrder/276395349\",\n  \"paymentPending\": true\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Completing a draft order with an invalid payment gateway returns a user error", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation draftOrderComplete($id: ID!, $paymentGatewayId: ID) {\n    draftOrderComplete(id: $id, paymentGatewayId: $paymentGatewayId) {\n      userErrors {\n        message\n        field\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/DraftOrder/276395349\",\n  \"paymentGatewayId\": \"gid://shopify/PaymentGateway/12121213\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "draftOrderComplete reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation draftOrderComplete($id: ID!) {\n    draftOrderComplete(id: $id) {\n      draftOrder {\n        id\n        order {\n          id\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/DraftOrder/276395349\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "draftOrderCreate", "description": "Creates a draft order.", "arguments": [{"name": "input", "type": "DraftOrderInput!", "required": true, "description": "The fields used to create the draft order."}], "returns": [], "examples": [{"description": "Create a draft order", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation draftOrderCreate($input: DraftOrderInput!) {\n    draftOrderCreate(input: $input) {\n      draftOrder {\n        id\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": {\n    \"customerId\": \"gid://shopify/Customer/544365967\",\n    \"note\": \"Test draft order\",\n    \"email\": \"test.user@shopify.com\",\n    \"taxExempt\": true,\n    \"tags\": [\"foo\", \"bar\"],\n    \"shippingLine\": {\n      \"title\": \"Custom Shipping\",\n      \"price\": 4.55\n    },\n    \"shippingAddress\": {\n      \"address1\": \"123 Main St\",\n      \"city\": \"Waterloo\",\n      \"province\": \"Ontario\",\n      \"country\": \"Canada\",\n      \"zip\": \"A1A 1A1\"\n    },\n    \"billingAddress\": {\n      \"address1\": \"456 Main St\",\n      \"city\": \"Toronto\",\n      \"province\": \"Ontario\",\n      \"country\": \"Canada\",\n      \"zip\": \"Z9Z 9Z9\"\n    },\n    \"appliedDiscount\": {\n      \"description\": \"damaged\",\n      \"value\": 5.0,\n      \"amount\": 5.0,\n      \"valueType\": \"FIXED_AMOUNT\",\n      \"title\": \"Custom\"\n    },\n    \"lineItems\": [{\"title\"=>\"Custom product\", \"originalUnitPrice\"=>14.99, \"quantity\"=>5, \"appliedDiscount\"=>{\"description\"=>\"wholesale\", \"value\"=>5.0, \"amount\"=>3.74, \"valueType\"=>\"PERCENTAGE\", \"title\"=>\"Fancy\"}, \"weight\"=>{\"value\"=>1, \"unit\"=>\"KILOGRAMS\"}, \"customAttributes\"=>[{\"key\"=>\"color\", \"value\"=>\"Gold\"}, {\"key\"=>\"material\", \"value\"=>\"Plastic\"}]}, {\"variantId\"=>\"gid://shopify/ProductVariant/43729076\", \"quantity\"=>2}],\n    \"customAttributes\": [{\"key\"=>\"name\", \"value\"=>\"Achilles\"}, {\"key\"=>\"city\", \"value\"=>\"Troy\"}]\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Create a draft order with markets context", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation draftOrderCreate($input: DraftOrderInput!) {\n    draftOrderCreate(input: $input) {\n      draftOrder {\n        id\n        presentmentCurrencyCode\n        totalPriceSet {\n          shopMoney {\n            amount\n            currencyCode\n          }\n          presentmentMoney {\n            amount\n            currencyCode\n          }\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": {\n    \"customerId\": \"gid://shopify/Customer/544365967\",\n    \"note\": \"Test draft order\",\n    \"email\": \"test.user@shopify.com\",\n    \"taxExempt\": true,\n    \"tags\": [\"foo\", \"bar\"],\n    \"shippingLine\": {\n      \"title\": \"Custom Shipping\",\n      \"price\": 4.55\n    },\n    \"shippingAddress\": {\n      \"address1\": \"123 Main St\",\n      \"city\": \"Waterloo\",\n      \"province\": \"Ontario\",\n      \"country\": \"Canada\",\n      \"zip\": \"A1A 1A1\"\n    },\n    \"billingAddress\": {\n      \"address1\": \"456 Main St\",\n      \"city\": \"Toronto\",\n      \"province\": \"Ontario\",\n      \"country\": \"Canada\",\n      \"zip\": \"Z9Z 9Z9\"\n    },\n    \"appliedDiscount\": {\n      \"description\": \"damaged\",\n      \"value\": 5.0,\n      \"amount\": 5.0,\n      \"valueType\": \"FIXED_AMOUNT\",\n      \"title\": \"Custom\"\n    },\n    \"lineItems\": [{\"title\"=>\"Custom product\", \"originalUnitPrice\"=>14.99, \"quantity\"=>5, \"appliedDiscount\"=>{\"description\"=>\"wholesale\", \"value\"=>5.0, \"amount\"=>3.74, \"valueType\"=>\"PERCENTAGE\", \"title\"=>\"Fancy\"}, \"weight\"=>{\"value\"=>1, \"unit\"=>\"KILOGRAMS\"}, \"customAttributes\"=>[{\"key\"=>\"color\", \"value\"=>\"Gold\"}, {\"key\"=>\"material\", \"value\"=>\"Plastic\"}]}, {\"variantId\"=>\"gid://shopify/ProductVariant/43729076\", \"quantity\"=>2}],\n    \"presentmentCurrencyCode\": \"CAD\",\n    \"customAttributes\": [{\"key\"=>\"name\", \"value\"=>\"Achilles\"}, {\"key\"=>\"city\", \"value\"=>\"Troy\"}]\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Create a new metafield on a new draft order", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation createDraftOrderMetafields($input: DraftOrderInput!) {\n    draftOrderCreate(input: $input) {\n      draftOrder {\n        id\n        metafields(first: 3) {\n          edges {\n            node {\n              id\n              namespace\n              key\n              value\n            }\n          }\n        }\n      }\n      userErrors {\n        message\n        field\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": {\n    \"metafields\": [{\"namespace\"=>\"my_field\", \"key\"=>\"delivery_instructions\", \"type\"=>\"single_line_text_field\", \"value\"=>\"leave on back porch\"}],\n    \"lineItems\": [{\"title\"=>\"small wheel\", \"quantity\"=>1, \"originalUnitPrice\"=>\"10\"}]\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Creating a draft order with a company, location and company contact", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation draftOrderCreate($input: DraftOrderInput!) {\n    draftOrderCreate(input: $input) {\n      draftOrder {\n        id\n      }\n      userErrors {\n        message\n        field\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": {\n    \"purchasingEntity\": {\n      \"purchasingCompany\": {\n        \"companyId\": \"gid://shopify/Company/426793626\",\n        \"companyLocationId\": \"gid://shopify/CompanyLocation/441870438\",\n        \"companyContactId\": \"gid://shopify/CompanyContact/207808057\"\n      }\n    },\n    \"note\": \"Test B2B draft order\",\n    \"email\": \"test.b2b.user@shopify.com\",\n    \"shippingLine\": {\n      \"title\": \"Custom Shipping\",\n      \"price\": 4.55\n    },\n    \"shippingAddress\": {\n      \"address1\": \"555 Main St\",\n      \"city\": \"Waterloo\",\n      \"province\": \"Ontario\",\n      \"country\": \"Canada\",\n      \"zip\": \"B1B 1B1\"\n    },\n    \"billingAddress\": {\n      \"address1\": \"556 Main St\",\n      \"city\": \"Toronto\",\n      \"province\": \"Ontario\",\n      \"country\": \"Canada\",\n      \"zip\": \"D9D DZD\"\n    },\n    \"lineItems\": [{\"variantId\"=>\"gid://shopify/ProductVariant/43729076\", \"quantity\"=>5}]\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Creating a draft order with invalid input returns an error", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation draftOrderCreate($input: DraftOrderInput!) {\n    draftOrderCreate(input: $input) {\n      draftOrder {\n        id\n      }\n      userErrors {\n        message\n        field\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": {\n    \"lineItems\": []\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "draftOrderCreate reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation draftOrderCreate($input: DraftOrderInput!) {\n    draftOrderCreate(input: $input) {\n      draftOrder {\n        id\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": {\n    \"customerId\": \"gid://shopify/Customer/544365967\",\n    \"note\": \"Test draft order\",\n    \"email\": \"test.user@shopify.com\",\n    \"taxExempt\": true,\n    \"tags\": [\"foo\", \"bar\"],\n    \"shippingLine\": {\n      \"title\": \"Custom Shipping\",\n      \"price\": 4.55\n    },\n    \"shippingAddress\": {\n      \"address1\": \"123 Main St\",\n      \"city\": \"Waterloo\",\n      \"province\": \"Ontario\",\n      \"country\": \"Canada\",\n      \"zip\": \"A1A 1A1\"\n    },\n    \"billingAddress\": {\n      \"address1\": \"456 Main St\",\n      \"city\": \"Toronto\",\n      \"province\": \"Ontario\",\n      \"country\": \"Canada\",\n      \"zip\": \"Z9Z 9Z9\"\n    },\n    \"appliedDiscount\": {\n      \"description\": \"damaged\",\n      \"value\": 5.0,\n      \"amount\": 5.0,\n      \"valueType\": \"FIXED_AMOUNT\",\n      \"title\": \"Custom\"\n    },\n    \"lineItems\": [{\"title\"=>\"Custom product\", \"originalUnitPrice\"=>14.99, \"quantity\"=>5, \"appliedDiscount\"=>{\"description\"=>\"wholesale\", \"value\"=>5.0, \"amount\"=>3.74, \"valueType\"=>\"PERCENTAGE\", \"title\"=>\"Fancy\"}, \"weight\"=>{\"value\"=>1, \"unit\"=>\"KILOGRAMS\"}, \"customAttributes\"=>[{\"key\"=>\"color\", \"value\"=>\"Gold\"}, {\"key\"=>\"material\", \"value\"=>\"Plastic\"}]}, {\"variantId\"=>\"gid://shopify/ProductVariant/43729076\", \"quantity\"=>2}],\n    \"customAttributes\": [{\"key\"=>\"name\", \"value\"=>\"Achilles\"}, {\"key\"=>\"city\", \"value\"=>\"Troy\"}]\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "draftOrderCreateFromOrder", "description": "Creates a draft order from order.", "arguments": [{"name": "orderId", "type": "ID!", "required": true, "description": "Specifies the order's id that we create the draft order from."}], "returns": [], "examples": [{"description": "Create a draft order from order", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation DraftOrderCreateFromOrder($orderId: ID!) {\n    draftOrderCreateFromOrder(orderId: $orderId) {\n      draftOrder {\n        id\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"orderId\": \"gid://shopify/Order/148977776\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "draftOrderCreateFromOrder reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation DraftOrderCreateFromOrder($orderId: ID!) {\n    draftOrderCreateFromOrder(orderId: $orderId) {\n      draftOrder {\n        id\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"orderId\": \"gid://shopify/Order/148977776\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "draftOrderCreateMerchantCheckout", "description": "Creates a merchant checkout for the given draft order.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "Specifies the Draft order's id that we create the checkout for."}], "returns": [], "examples": []}, {"name": "draftOrderDelete", "description": "Deletes a draft order.", "arguments": [{"name": "input", "type": "DraftOrderDeleteInput!", "required": true, "description": "Specify the draft order to delete by its ID."}], "returns": [], "examples": [{"description": "Delete a draft order by ID and return the deleted ID", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation draftOrderDelete($input: DraftOrderDeleteInput!) {\n    draftOrderDelete(input: $input) {\n      deletedId\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": {\n    \"id\": \"gid://shopify/DraftOrder/276395349\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Deleting a draft order that doesn't exist returns an error", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation draftOrderDelete($input: DraftOrderDeleteInput!) {\n    draftOrderDelete(input: $input) {\n      deletedId\n      userErrors {\n        message\n        field\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": {\n    \"id\": \"gid://shopify/DraftOrder/1\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Remove an existing DraftOrder", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation draftOrderDelete($input: DraftOrderDeleteInput!) {\n    draftOrderDelete(input: $input) {\n      deletedId\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": {\n    \"id\": \"gid://shopify/DraftOrder/276395349\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "draftOrderDelete reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation draftOrderDelete($input: DraftOrderDeleteInput!) {\n    draftOrderDelete(input: $input) {\n      deletedId\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": {\n    \"id\": \"gid://shopify/DraftOrder/276395349\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "draftOrderDuplicate", "description": "Duplicates a draft order.", "arguments": [{"name": "id", "type": "ID", "required": true, "description": "The ID of the draft order to duplicate."}], "returns": [], "examples": []}, {"name": "draftOrderInvoicePreview", "description": "Previews a draft order invoice email.", "arguments": [{"name": "email", "type": "EmailInput", "required": true, "description": "Specifies the draft order invoice email fields."}], "returns": [], "examples": [{"description": "Preview a draft order invoice by draft order ID", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation draftOrderInvoicePreview($id: ID!) {\n    draftOrderInvoicePreview(id: $id) {\n      previewHtml\n      previewSubject\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/DraftOrder/276395349\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Preview a draft order invoice with custom email input", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation draftOrderInvoicePreview($id: ID!, $email: EmailInput) {\n    draftOrderInvoicePreview(id: $id, email: $email) {\n      previewHtml\n      previewSubject\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/DraftOrder/276395349\",\n  \"email\": {\n    \"to\": \"test@example.com\",\n    \"subject\": \"Custom subject\",\n    \"customMessage\": \"Hi,\nThis is a custom message for the customer.\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Previewing a completed draft order returns an error", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation draftOrderInvoicePreview($id: ID!) {\n    draftOrderInvoicePreview(id: $id) {\n      previewHtml\n      userErrors {\n        message\n        field\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/DraftOrder/989355118\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "draftOrderInvoicePreview reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation draftOrderInvoicePreview($id: ID!) {\n    draftOrderInvoicePreview(id: $id) {\n      previewHtml\n      previewSubject\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/DraftOrder/276395349\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "draftOrderInvoiceSend", "description": "Sends an email invoice for a draft order.", "arguments": [{"name": "email", "type": "EmailInput", "required": true, "description": "Specifies the draft order invoice email fields."}], "returns": [], "examples": [{"description": "Send a draft order invoice by draft order ID", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation draftOrderInvoiceSend($id: ID!) {\n    draftOrderInvoiceSend(id: $id) {\n      draftOrder {\n        id\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/DraftOrder/276395349\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Send an invoice", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation draftOrderInvoiceSend($id: ID!) {\n    draftOrderInvoiceSend(id: $id) {\n      draftOrder {\n        id\n        note2\n        email\n        taxesIncluded\n        currencyCode\n        invoiceSentAt\n        createdAt\n        updatedAt\n        taxExempt\n        completedAt\n        name\n        status\n        lineItems(first: 10) {\n          edges {\n            node {\n              id\n              variant {\n                id\n                title\n              }\n              product {\n                id\n              }\n              name\n              sku\n              vendor\n              quantity\n              requiresShipping\n              taxable\n              isGiftCard\n              fulfillmentService {\n                type\n              }\n              weight {\n                unit\n                value\n              }\n              taxLines {\n                title\n                source\n                rate\n                ratePercentage\n                priceSet {\n                  presentmentMoney {\n                    amount\n                    currencyCode\n                  }\n                  shopMoney {\n                    amount\n                    currencyCode\n                  }\n                }\n              }\n              appliedDiscount {\n                title\n                value\n                valueType\n              }\n              name\n              custom\n              id\n            }\n          }\n        }\n        shippingAddress {\n          firstName\n          address1\n          phone\n          city\n          zip\n          province\n          country\n          lastName\n          address2\n          company\n          latitude\n          longitude\n          name\n          country\n          countryCodeV2\n          provinceCode\n        }\n        billingAddress {\n          firstName\n          address1\n          phone\n          city\n          zip\n          province\n          country\n          lastName\n          address2\n          company\n          latitude\n          longitude\n          name\n          country\n          countryCodeV2\n          provinceCode\n        }\n        invoiceUrl\n        appliedDiscount {\n          title\n          value\n          valueType\n        }\n        order {\n          id\n          customAttributes {\n            key\n            value\n          }\n        }\n        shippingLine {\n          id\n          title\n          carrierIdentifier\n          custom\n          code\n          deliveryCategory\n          source\n          discountedPriceSet {\n            presentmentMoney {\n              amount\n              currencyCode\n            }\n            shopMoney {\n              amount\n              currencyCode\n            }\n          }\n        }\n        taxLines {\n          channelLiable\n          priceSet {\n            presentmentMoney {\n              amount\n              currencyCode\n            }\n            shopMoney {\n              amount\n              currencyCode\n            }\n          }\n          rate\n          ratePercentage\n          source\n          title\n        }\n        tags\n        customer {\n          id\n          email\n          smsMarketingConsent {\n            consentCollectedFrom\n            consentUpdatedAt\n            marketingOptInLevel\n            marketingState\n          }\n          emailMarketingConsent {\n            consentUpdatedAt\n            marketingOptInLevel\n            marketingState\n          }\n          createdAt\n          updatedAt\n          firstName\n          lastName\n          state\n          amountSpent {\n            amount\n            currencyCode\n          }\n          lastOrder {\n            id\n            name\n            currencyCode\n          }\n          note\n          verifiedEmail\n          multipassIdentifier\n          taxExempt\n          tags\n          phone\n          taxExemptions\n          defaultAddress {\n            id\n            firstName\n            lastName\n            company\n            address1\n            address2\n            city\n            province\n            country\n            zip\n            phone\n            name\n            provinceCode\n            countryCodeV2\n          }\n        }\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/DraftOrder/276395349\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Sending an invoice with invalid arguments returns an error", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation draftOrderInvoiceSend($id: ID!, $email: EmailInput) {\n    draftOrderInvoiceSend(id: $id, email: $email) {\n      draftOrder {\n        id\n      }\n      userErrors {\n        message\n        field\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/DraftOrder/276395349\",\n  \"email\": {\n    \"subject\": \"valid subject\",\n    \"to\": \"invalid recipient\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "draftOrderInvoiceSend reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation draftOrderInvoiceSend($id: ID!) {\n    draftOrderInvoiceSend(id: $id) {\n      draftOrder {\n        id\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/DraftOrder/276395349\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "draftOrderUpdate", "description": "Updates a draft order.\nIf a checkout has been started for a draft order, any update to the draft will unlink the checkout. Checkouts\nare created but not immediately completed when opening the merchant credit card modal in the admin, and when a\nbuyer opens the invoice URL. This is usually fine, but there is an edge case where a checkout is in progress\nand the draft is updated before the checkout completes. This will not interfere with the checkout and order\ncreation, but if the link from draft to checkout is broken the draft will remain open even after the order is\ncreated.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "Specifies the draft order to update."}], "returns": [], "examples": [{"description": "Create a new metafield and update another on an existing draft order", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation updateDraftOrderMetafields($input: DraftOrderInput!, $ownerId: ID!) {\n    draftOrderUpdate(input: $input, id: $ownerId) {\n      draftOrder {\n        id\n        metafields(first: 3) {\n          edges {\n            node {\n              id\n              namespace\n              key\n              value\n            }\n          }\n        }\n      }\n      userErrors {\n        message\n        field\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": {\n    \"metafields\": [{\"namespace\"=>\"my_field\", \"key\"=>\"delivery_instructions\", \"type\"=>\"single_line_text_field\", \"value\"=>\"leave on back porch\"}, {\"id\"=>\"gid://shopify/Metafield/1069229059\", \"value\"=>\"123\"}]\n  },\n  \"ownerId\": \"gid://shopify/DraftOrder/276395349\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Modify an existing DraftOrder", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation draftOrderUpdate($id: ID!, $input: DraftOrderInput!) {\n    draftOrderUpdate(id: $id, input: $input) {\n      draftOrder {\n        id\n        note2\n        email\n        taxesIncluded\n        currencyCode\n        invoiceSentAt\n        createdAt\n        updatedAt\n        taxExempt\n        completedAt\n        name\n        status\n        marketRegionCountryCode\n        presentmentCurrencyCode\n        shippingAddress {\n          firstName\n          address1\n          phone\n          city\n          zip\n          province\n          country\n          lastName\n          address2\n          company\n          latitude\n          longitude\n          name\n          country\n          countryCodeV2\n          provinceCode\n        }\n        billingAddress {\n          firstName\n          address1\n          phone\n          city\n          zip\n          province\n          country\n          lastName\n          address2\n          company\n          latitude\n          longitude\n          name\n          country\n          countryCodeV2\n          provinceCode\n        }\n        invoiceUrl\n        appliedDiscount {\n          title\n          value\n          valueType\n        }\n        order {\n          id\n          customAttributes {\n            key\n            value\n          }\n        }\n        shippingLine {\n          id\n          title\n          carrierIdentifier\n          custom\n          code\n          deliveryCategory\n          source\n          discountedPriceSet {\n            presentmentMoney {\n              amount\n              currencyCode\n            }\n            shopMoney {\n              amount\n              currencyCode\n            }\n          }\n        }\n        taxLines {\n          channelLiable\n          priceSet {\n            presentmentMoney {\n              amount\n              currencyCode\n            }\n            shopMoney {\n              amount\n              currencyCode\n            }\n          }\n          rate\n          ratePercentage\n          source\n          title\n        }\n        tags\n        customer {\n          id\n          email\n          smsMarketingConsent {\n            consentCollectedFrom\n            consentUpdatedAt\n            marketingOptInLevel\n            marketingState\n          }\n          emailMarketingConsent {\n            consentUpdatedAt\n            marketingOptInLevel\n            marketingState\n          }\n          createdAt\n          updatedAt\n          firstName\n          lastName\n          state\n          amountSpent {\n            amount\n            currencyCode\n          }\n          lastOrder {\n            id\n            name\n            currencyCode\n          }\n          note\n          verifiedEmail\n          multipassIdentifier\n          taxExempt\n          tags\n          phone\n          taxExemptions\n          defaultAddress {\n            id\n            firstName\n            lastName\n            company\n            address1\n            address2\n            city\n            province\n            country\n            zip\n            phone\n            name\n            provinceCode\n            countryCodeV2\n          }\n        }\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/DraftOrder/276395349\",\n  \"input\": {\n    \"shippingAddress\": {\n      \"address1\": \"123 shipping ave\",\n      \"city\": \"Ottawa\",\n      \"provinceCode\": \"ON\",\n      \"zip\": \"K1L 2J3\",\n      \"country\": \"Canada\"\n    },\n    \"marketRegionCountryCode\": \"CA\",\n    \"presentmentCurrencyCode\": \"CAD\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Update the draft order shipping address", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation draftOrderUpdate($id: ID!, $input: DraftOrderInput!) {\n    draftOrderUpdate(id: $id, input: $input) {\n      draftOrder {\n        shippingAddress {\n          id\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/DraftOrder/276395349\",\n  \"input\": {\n    \"shippingAddress\": {\n      \"address1\": \"123 shipping ave\",\n      \"city\": \"Ottawa\",\n      \"provinceCode\": \"ON\",\n      \"zip\": \"K1L 2J3\",\n      \"country\": \"Canada\"\n    }\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Updating a draft order that doesn't exist returns an error", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation draftOrderUpdate($id: ID!, $input: DraftOrderInput!) {\n    draftOrderUpdate(id: $id, input: $input) {\n      draftOrder {\n        id\n      }\n      userErrors {\n        message\n        field\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/DraftOrder/1\",\n  \"input\": {\n    \"note\": \"This is a really awesome draft order\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Updating a draft order with a company, location and company contact", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation draftOrderUpdate($id: ID!, $input: DraftOrderInput!) {\n    draftOrderUpdate(id: $id, input: $input) {\n      draftOrder {\n        purchasingEntity {\n          ... on PurchasingCompany {\n            company {\n              id\n            }\n          }\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/DraftOrder/276395349\",\n  \"input\": {\n    \"purchasingEntity\": {\n      \"purchasingCompany\": {\n        \"companyId\": \"gid://shopify/Company/426793626\",\n        \"companyLocationId\": \"gid://shopify/CompanyLocation/441870438\",\n        \"companyContactId\": \"gid://shopify/CompanyContact/207808057\"\n      }\n    }\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "draftOrderUpdate reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation updateDraftOrderMetafields($input: DraftOrderInput!, $ownerId: ID!) {\n    draftOrderUpdate(input: $input, id: $ownerId) {\n      draftOrder {\n        id\n        metafields(first: 3) {\n          edges {\n            node {\n              id\n              namespace\n              key\n              value\n            }\n          }\n        }\n      }\n      userErrors {\n        message\n        field\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": {\n    \"metafields\": [{\"namespace\"=>\"my_field\", \"key\"=>\"delivery_instructions\", \"type\"=>\"single_line_text_field\", \"value\"=>\"leave on back porch\"}, {\"id\"=>\"gid://shopify/Metafield/1069229059\", \"value\"=>\"123\"}]\n  },\n  \"ownerId\": \"gid://shopify/DraftOrder/276395349\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "orderCancel", "description": "Cancels an order.", "arguments": [{"name": "notifyCustomer", "type": "Boolean", "required": true, "description": "Whether to send a notification to the customer about the order cancellation."}], "returns": [], "examples": []}, {"name": "orderCapture", "description": "Captures payment for an authorized transaction on an order. An order can only be captured if it has a successful authorization transaction. Capturing an order will claim the money reserved by the authorization. orderCapture can be used to capture multiple times as long as the OrderTransaction is multi-capturable. To capture a partial payment, the included amount value should be less than the total order amount. Multi-capture is available only to stores on a Shopify Plus plan.", "arguments": [{"name": "input", "type": "OrderCaptureInput!", "required": true, "description": "The input for the mutation."}], "returns": [], "examples": [{"description": "Creates a transaction for an order", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation TransactionCreate($input: OrderCaptureInput!) {\n    orderCapture(input: $input) {\n      transaction {\n        accountNumber\n        amountSet {\n          presentmentMoney {\n            amount\n            currencyCode\n          }\n          shopMoney {\n            amount\n            currencyCode\n          }\n        }\n        authorizationCode\n        authorizationExpiresAt\n        createdAt\n        errorCode\n        fees {\n          amount {\n            amount\n            currencyCode\n          }\n        }\n        formattedGateway\n        gateway\n        id\n        kind\n        manuallyCapturable\n        maximumRefundableV2 {\n          amount\n          currencyCode\n        }\n        multiCapturable\n        order {\n          id\n        }\n        parentTransaction {\n          id\n        }\n        paymentDetails {\n          ... on CardPaymentDetails {\n            paymentMethodName\n          }\n          ... on ShopPayInstallmentsPaymentDetails {\n            paymentMethodName\n          }\n        }\n        paymentIcon {\n          url\n        }\n        paymentId\n        processedAt\n        receiptJson\n        settlementCurrency\n        shopifyPaymentsSet {\n          refundSet {\n            acquirerReferenceNumber\n          }\n        }\n        status\n        test\n        totalUnsettledSet {\n          presentmentMoney {\n            amount\n            currencyCode\n          }\n          shopMoney {\n            amount\n            currencyCode\n          }\n        }\n        user {\n          id\n        }\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": {\n    \"id\": \"gid://shopify/Order/431501862\",\n    \"parentTransactionId\": \"gid://shopify/OrderTransaction/336526656\",\n    \"amount\": \"1000.00\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "orderCapture reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation TransactionCreate($input: OrderCaptureInput!) {\n    orderCapture(input: $input) {\n      transaction {\n        accountNumber\n        amountSet {\n          presentmentMoney {\n            amount\n            currencyCode\n          }\n          shopMoney {\n            amount\n            currencyCode\n          }\n        }\n        authorizationCode\n        authorizationExpiresAt\n        createdAt\n        errorCode\n        fees {\n          amount {\n            amount\n            currencyCode\n          }\n        }\n        formattedGateway\n        gateway\n        id\n        kind\n        manuallyCapturable\n        maximumRefundableV2 {\n          amount\n          currencyCode\n        }\n        multiCapturable\n        order {\n          id\n        }\n        parentTransaction {\n          id\n        }\n        paymentDetails {\n          ... on CardPaymentDetails {\n            paymentMethodName\n          }\n          ... on ShopPayInstallmentsPaymentDetails {\n            paymentMethodName\n          }\n        }\n        paymentIcon {\n          url\n        }\n        paymentId\n        processedAt\n        receiptJson\n        settlementCurrency\n        shopifyPaymentsSet {\n          refundSet {\n            acquirerReferenceNumber\n          }\n        }\n        status\n        test\n        totalUnsettledSet {\n          presentmentMoney {\n            amount\n            currencyCode\n          }\n          shopMoney {\n            amount\n            currencyCode\n          }\n        }\n        user {\n          id\n        }\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": {\n    \"id\": \"gid://shopify/Order/431501862\",\n    \"parentTransactionId\": \"gid://shopify/OrderTransaction/336526656\",\n    \"amount\": \"1000.00\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "orderClose", "description": "Closes an open order.", "arguments": [{"name": "input", "type": "OrderCloseInput!", "required": true, "description": "The input for the mutation."}], "returns": [], "examples": [{"description": "Close an order", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation OrderClose($input: OrderCloseInput!) {\n    orderClose(input: $input) {\n      order {\n        canMarkAsPaid\n        cancelReason\n        cancelledAt\n        clientIp\n        confirmed\n        customer {\n          displayName\n          email\n        }\n        discountCodes\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": {\n    \"id\": \"gid://shopify/Order/148977776\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "orderClose reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation OrderClose($input: OrderCloseInput!) {\n    orderClose(input: $input) {\n      order {\n        canMarkAsPaid\n        cancelReason\n        cancelledAt\n        clientIp\n        confirmed\n        customer {\n          displayName\n          email\n        }\n        discountCodes\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": {\n    \"id\": \"gid://shopify/Order/148977776\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "orderCreate", "description": "Creates an order with attributes such as customer information, line items, and shipping and billing addresses.\nUse the orderCreate mutation to programmatically generate orders in scenarios where\norders aren't created through the standard checkout process, such as when importing orders from an external\nsystem or creating orders for wholesale customers.\nThe orderCreate mutation doesn't support applying multiple discounts, such as discounts on line items.\nAutomatic discounts won't be applied unless you replicate the logic of those discounts in your custom\nimplementation. You can apply a discount code,\nbut only one discount code can be set for each order.\nNoteIf you're using the orderCreate mutation with a\ntrial or\ndevelopment store, then you can create a\nmaximum of five new orders per minute.After you create an order, you can make subsequent edits to the order using one of the following mutations:\n\norderUpdate:\nUsed for simple updates to an order, such as changing the order's note, tags, or customer information.\norderEditBegin:\nUsed when you need to make significant updates to an order, such as adding or removing line items, changing\nquantities, or modifying discounts. The orderEditBegin mutation initiates an order editing session,\nallowing you to make multiple changes before finalizing them. Learn more about using the orderEditBegin\nmutation to edit existing orders.\n\nLearn how to build apps that integrate with\norder management and fulfillment processes.", "arguments": [{"name": "options", "type": "OrderCreateOptionsInput", "required": true, "description": "The strategies for updating inventory and whether to send shipping and order confirmations to customers."}], "returns": [], "examples": [{"description": "Create a comprehensive order", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation orderCreate($order: OrderCreateOrderInput!, $options: OrderCreateOptionsInput) {\n    orderCreate(order: $order, options: $options) {\n      userErrors {\n        field\n        message\n      }\n      order {\n        id\n        totalTaxSet {\n          shopMoney {\n            amount\n            currencyCode\n          }\n        }\n        lineItems(first: 5) {\n          nodes {\n            variant {\n              id\n            }\n            id\n            title\n            quantity\n            taxLines {\n              title\n              rate\n              priceSet {\n                shopMoney {\n                  amount\n                  currencyCode\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"order\": {\n    \"currency\": \"EUR\",\n    \"lineItems\": [{\"title\"=>\"Big Brown Bear Boots\", \"priceSet\"=>{\"shopMoney\"=>{\"amount\"=>74.99, \"currencyCode\"=>\"EUR\"}}, \"quantity\"=>3, \"taxLines\"=>[{\"priceSet\"=>{\"shopMoney\"=>{\"amount\"=>13.5, \"currencyCode\"=>\"EUR\"}}, \"rate\"=>0.06, \"title\"=>\"State tax\"}]}],\n    \"transactions\": [{\"kind\"=>\"SALE\", \"status\"=>\"SUCCESS\", \"amountSet\"=>{\"shopMoney\"=>{\"amount\"=>238.47, \"currencyCode\"=>\"EUR\"}}}]\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Create a paid order and update customer details", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation orderCreate($order: OrderCreateOrderInput!, $options: OrderCreateOptionsInput) {\n    orderCreate(order: $order, options: $options) {\n      userErrors {\n        field\n        message\n      }\n      order {\n        id\n        displayFinancialStatus\n        customer {\n          email\n          firstName\n          lastName\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"order\": {\n    \"lineItems\": [{\"variantId\"=>\"gid://shopify/ProductVariant/43729076\", \"quantity\"=>1}],\n    \"customer\": {\n      \"toUpsert\": {\n        \"email\": \"foo.bar@shopify.com\",\n        \"firstName\": \"Foo\",\n        \"lastName\": \"Bar\"\n      }\n    },\n    \"financialStatus\": \"PAID\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Create a pending order for an existing customer", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation orderCreate($order: OrderCreateOrderInput!, $options: OrderCreateOptionsInput) {\n    orderCreate(order: $order, options: $options) {\n      userErrors {\n        field\n        message\n      }\n      order {\n        id\n        displayFinancialStatus\n        shippingAddress {\n          lastName\n          address1\n          city\n          provinceCode\n          countryCode\n          zip\n        }\n        billingAddress {\n          lastName\n          address1\n          city\n          provinceCode\n          countryCode\n          zip\n        }\n        customer {\n          id\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"order\": {\n    \"lineItems\": [{\"variantId\"=>\"gid://shopify/ProductVariant/43729076\", \"quantity\"=>1}],\n    \"customer\": {\n      \"toAssociate\": {\n        \"id\": \"gid://shopify/Customer/544365967\"\n      }\n    },\n    \"financialStatus\": \"PENDING\",\n    \"shippingAddress\": {\n      \"lastName\": \"James\",\n      \"address1\": \"123 Main St\",\n      \"city\": \"Ottawa\",\n      \"countryCode\": \"CA\",\n      \"provinceCode\": \"ON\",\n      \"zip\": \"K1P 1J1\"\n    },\n    \"billingAddress\": {\n      \"lastName\": \"James\",\n      \"address1\": \"321 Secondary St\",\n      \"city\": \"Ottawa\",\n      \"countryCode\": \"CA\",\n      \"provinceCode\": \"ON\",\n      \"zip\": \"K1P 1J1\"\n    }\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Create an order and send email confirmations", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation orderCreate($order: OrderCreateOrderInput!, $options: OrderCreateOptionsInput) {\n    orderCreate(order: $order, options: $options) {\n      userErrors {\n        field\n        message\n      }\n      order {\n        id\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"order\": {\n    \"lineItems\": [{\"variantId\"=>\"gid://shopify/ProductVariant/43729076\", \"quantity\"=>1}],\n    \"email\": \"foo@shopify.com\",\n    \"fulfillmentStatus\": \"FULFILLED\"\n  },\n  \"options\": {\n    \"sendReceipt\": true,\n    \"sendFulfillmentReceipt\": true\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Create an order using a product variant ID", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation orderCreate($order: OrderCreateOrderInput!, $options: OrderCreateOptionsInput) {\n    orderCreate(order: $order, options: $options) {\n      userErrors {\n        field\n        message\n      }\n      order {\n        id\n        lineItems(first: 5) {\n          nodes {\n            id\n            title\n            quantity\n            variant {\n              id\n            }\n          }\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"order\": {\n    \"lineItems\": [{\"variantId\"=>\"gid://shopify/ProductVariant/43729076\", \"quantity\"=>1}]\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Create an order with a fixed amount off discount", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation orderCreate($order: OrderCreateOrderInput!, $options: OrderCreateOptionsInput) {\n    orderCreate(order: $order, options: $options) {\n      userErrors {\n        field\n        message\n      }\n      order {\n        totalDiscountsSet {\n          shopMoney {\n            amount\n            currencyCode\n          }\n          presentmentMoney {\n            amount\n            currencyCode\n          }\n        }\n        discountCodes\n        discountApplications(first: 5) {\n          nodes {\n            value {\n              ... on MoneyV2 {\n                amount\n                currencyCode\n              }\n            }\n          }\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"order\": {\n    \"lineItems\": [{\"variantId\"=>\"gid://shopify/ProductVariant/43729076\", \"quantity\"=>1, \"priceSet\"=>{\"shopMoney\"=>{\"amount\"=>100.0, \"currencyCode\"=>\"USD\"}, \"presentmentMoney\"=>{\"amount\"=>75.0, \"currencyCode\"=>\"CAD\"}}}],\n    \"presentmentCurrency\": \"CAD\",\n    \"discountCode\": {\n      \"itemFixedDiscountCode\": {\n        \"amountSet\": {\n          \"shopMoney\": {\n            \"amount\": 5.0,\n            \"currencyCode\": \"USD\"\n          },\n          \"presentmentMoney\": {\n            \"amount\": 9.0,\n            \"currencyCode\": \"CAD\"\n          }\n        },\n        \"code\": \"BESTSALE\"\n      }\n    }\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Create an order with a percentage discount", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation orderCreate($order: OrderCreateOrderInput!, $options: OrderCreateOptionsInput) {\n    orderCreate(order: $order, options: $options) {\n      userErrors {\n        field\n        message\n      }\n      order {\n        totalDiscountsSet {\n          shopMoney {\n            amount\n            currencyCode\n          }\n          presentmentMoney {\n            amount\n            currencyCode\n          }\n        }\n        discountCodes\n        discountApplications(first: 5) {\n          nodes {\n            value {\n              ... on MoneyV2 {\n                amount\n                currencyCode\n              }\n              ... on PricingPercentageValue {\n                percentage\n              }\n            }\n          }\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"order\": {\n    \"lineItems\": [{\"variantId\"=>\"gid://shopify/ProductVariant/43729076\", \"quantity\"=>1}],\n    \"discountCode\": {\n      \"itemPercentageDiscountCode\": {\n        \"percentage\": 10,\n        \"code\": \"SUMMER SALE\"\n      }\n    }\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Create an order with fulfillment details", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation orderCreate($order: OrderCreateOrderInput!, $options: OrderCreateOptionsInput) {\n    orderCreate(order: $order, options: $options) {\n      userErrors {\n        field\n        message\n      }\n      order {\n        id\n        fulfillments(first: 5) {\n          id\n          status\n          location {\n            id\n          }\n          originAddress {\n            address1\n            city\n            countryCode\n            provinceCode\n            zip\n          }\n          trackingInfo {\n            company\n            number\n          }\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"order\": {\n    \"lineItems\": [{\"variantId\"=>\"gid://shopify/ProductVariant/43729076\", \"quantity\"=>1}],\n    \"fulfillment\": {\n      \"locationId\": \"gid://shopify/Location/124656943\",\n      \"originAddress\": {\n        \"address1\": \"123 Main St\",\n        \"city\": \"Ottawa\",\n        \"countryCode\": \"CA\",\n        \"provinceCode\": \"ON\",\n        \"zip\": \"K1P 1J1\"\n      },\n      \"trackingCompany\": \"Canada Post\",\n      \"trackingNumber\": \"1234567890\",\n      \"shipmentStatus\": \"DELIVERED\",\n      \"notifyCustomer\": true\n    }\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Create an order with tax lines", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation orderCreate($order: OrderCreateOrderInput!, $options: OrderCreateOptionsInput) {\n    orderCreate(order: $order, options: $options) {\n      userErrors {\n        field\n        message\n      }\n      order {\n        id\n        totalTaxSet {\n          shopMoney {\n            amount\n            currencyCode\n          }\n        }\n        lineItems(first: 5) {\n          nodes {\n            id\n            title\n            quantity\n            variant {\n              id\n            }\n            taxLines {\n              title\n              rate\n              priceSet {\n                shopMoney {\n                  amount\n                  currencyCode\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"order\": {\n    \"lineItems\": [{\"title\"=>\"Red Leather Coat\", \"priceSet\"=>{\"shopMoney\"=>{\"amount\"=>129.99, \"currencyCode\"=>\"USD\"}}, \"quantity\"=>1}, {\"title\"=>\"Blue Suede Shoes\", \"priceSet\"=>{\"shopMoney\"=>{\"amount\"=>85.95, \"currencyCode\"=>\"USD\"}}, \"quantity\"=>1, \"taxable\"=>false}, {\"title\"=>\"Raspberry Beret\", \"priceSet\"=>{\"shopMoney\"=>{\"amount\"=>19.99, \"currencyCode\"=>\"USD\"}}, \"quantity\"=>2}],\n    \"taxLines\": [{\"priceSet\"=>{\"shopMoney\"=>{\"amount\"=>10.2, \"currencyCode\"=>\"USD\"}}, \"title\"=>\"State tax\", \"rate\"=>0.04}, {\"priceSet\"=>{\"shopMoney\"=>{\"amount\"=>4.25, \"currencyCode\"=>\"USD\"}}, \"title\"=>\"County tax\", \"rate\"=>0.02}]\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Create an order without sending email confirmations", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation orderCreate($order: OrderCreateOrderInput!, $options: OrderCreateOptionsInput) {\n    orderCreate(order: $order, options: $options) {\n      userErrors {\n        field\n        message\n      }\n      order {\n        id\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"order\": {\n    \"lineItems\": [{\"variantId\"=>\"gid://shopify/ProductVariant/43729076\", \"quantity\"=>1}],\n    \"email\": \"foo@shopify.com\",\n    \"fulfillmentStatus\": \"FULFILLED\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "orderCreate reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation orderCreate($order: OrderCreateOrderInput!, $options: OrderCreateOptionsInput) {\n    orderCreate(order: $order, options: $options) {\n      userErrors {\n        field\n        message\n      }\n      order {\n        id\n        totalTaxSet {\n          shopMoney {\n            amount\n            currencyCode\n          }\n        }\n        lineItems(first: 5) {\n          nodes {\n            variant {\n              id\n            }\n            id\n            title\n            quantity\n            taxLines {\n              title\n              rate\n              priceSet {\n                shopMoney {\n                  amount\n                  currencyCode\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"order\": {\n    \"currency\": \"EUR\",\n    \"lineItems\": [{\"title\"=>\"Big Brown Bear Boots\", \"priceSet\"=>{\"shopMoney\"=>{\"amount\"=>74.99, \"currencyCode\"=>\"EUR\"}}, \"quantity\"=>3, \"taxLines\"=>[{\"priceSet\"=>{\"shopMoney\"=>{\"amount\"=>13.5, \"currencyCode\"=>\"EUR\"}}, \"rate\"=>0.06, \"title\"=>\"State tax\"}]}],\n    \"transactions\": [{\"kind\"=>\"SALE\", \"status\"=>\"SUCCESS\", \"amountSet\"=>{\"shopMoney\"=>{\"amount\"=>238.47, \"currencyCode\"=>\"EUR\"}}}]\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "orderCreateMandatePayment", "description": "Creates a payment for an order by mandate.", "arguments": [{"name": "amount", "type": "MoneyInput", "required": true, "description": "The payment amount to collect."}], "returns": [], "examples": []}, {"name": "orderCreateManualPayment", "description": "Create a manual payment for an order. You can only create a manual payment for an order if it isn't already\nfully paid.", "arguments": [{"name": "amount", "type": "MoneyInput", "required": true, "description": "The manual payment amount to be created."}], "returns": [], "examples": []}, {"name": "orderDelete", "description": "Deletes an order. For more information on which orders can be deleted, refer to Delete an order.", "arguments": [{"name": "orderId", "type": "ID!", "required": true, "description": "The ID of the order to be deleted."}], "returns": [], "examples": [{"description": "Delete an order", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation OrderDelete($orderId: ID!) {\n    orderDelete(orderId: $orderId) {\n      deletedId\n      userErrors {\n        field\n        message\n        code\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"orderId\": \"gid://shopify/Order/776341364\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "orderDelete reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation OrderDelete($orderId: ID!) {\n    orderDelete(orderId: $orderId) {\n      deletedId\n      userErrors {\n        field\n        message\n        code\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"orderId\": \"gid://shopify/Order/776341364\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "orderEditAddCustomItem", "description": "Adds a custom line item to an existing order. For example, you could add a gift wrapping service as a custom line item. To learn how to edit existing orders, refer to Edit an existing order with Admin API.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID of the calculated order\nto which the custom item is added."}], "returns": [], "examples": []}, {"name": "orderEditAddLineItemDiscount", "description": "Adds a discount to a line item on the current order edit. For more information on how to use the GraphQL Admin API to edit an existing order, refer to Edit existing orders.", "arguments": [{"name": "discount", "type": "OrderEditAppliedDiscountInput!", "required": true, "description": "The discount to add to the line item."}], "returns": [], "examples": []}, {"name": "orderEditAddShippingLine", "description": "Adds a shipping line to an existing order. For more information on how to use the GraphQL Admin API to edit an existing order, refer to Edit existing orders.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID of the calculated order\nto edit."}], "returns": [], "examples": [{"description": "Add a shipping line to an order edit", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation addShippingLine($id: ID!, $shippingLine: OrderEditAddShippingLineInput!) {\n    orderEditAddShippingLine(id: $id, shippingLine: $shippingLine) {\n      calculatedOrder {\n        id\n        totalOutstandingSet {\n          presentmentMoney {\n            amount\n            currencyCode\n          }\n        }\n        totalPriceSet {\n          presentmentMoney {\n            amount\n            currencyCode\n          }\n        }\n      }\n      calculatedShippingLine {\n        id\n        title\n        price {\n          presentmentMoney {\n            amount\n            currencyCode\n          }\n        }\n        stagedStatus\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/CalculatedOrder/607673083\",\n  \"shippingLine\": {\n    \"title\": \"2-Day Shipping\",\n    \"price\": {\n      \"amount\": 19.99,\n      \"currencyCode\": \"USD\"\n    }\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "orderEditAddShippingLine reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation addShippingLine($id: ID!, $shippingLine: OrderEditAddShippingLineInput!) {\n    orderEditAddShippingLine(id: $id, shippingLine: $shippingLine) {\n      calculatedOrder {\n        id\n        totalOutstandingSet {\n          presentmentMoney {\n            amount\n            currencyCode\n          }\n        }\n        totalPriceSet {\n          presentmentMoney {\n            amount\n            currencyCode\n          }\n        }\n      }\n      calculatedShippingLine {\n        id\n        title\n        price {\n          presentmentMoney {\n            amount\n            currencyCode\n          }\n        }\n        stagedStatus\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/CalculatedOrder/607673083\",\n  \"shippingLine\": {\n    \"title\": \"2-Day Shipping\",\n    \"price\": {\n      \"amount\": 19.99,\n      \"currencyCode\": \"USD\"\n    }\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "orderEditAddVariant", "description": "Adds a line item from an existing product variant. As of API version 2025-04, the orderEditAddVariant API will respect the contextual pricing of the variant.", "arguments": [{"name": "allowDuplicates", "type": "Boolean", "required": true, "description": "Whether the mutation can create a line item for a variant that's already on the calculated order."}], "returns": [], "examples": []}, {"name": "orderEditBegin", "description": "Starts editing an order. Mutations are operating on OrderEdit.\nAll order edits start with orderEditBegin, have any number of orderEdit* mutations made, and end with orderEditCommit.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID of the order to begin editing."}], "returns": [], "examples": []}, {"name": "orderEditCommit", "description": "Applies and saves staged changes to an order. Mutations are operating on OrderEdit.\nAll order edits start with orderEditBegin, have any number of orderEdit* mutations made, and end with orderEditCommit.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID of the calculated order\nthat will have its changes applied to the order."}], "returns": [], "examples": []}, {"name": "orderEditRemoveDiscount", "description": "Removes a discount on the current order edit. For more information on how to use the GraphQL Admin API to edit an existing order, refer to Edit existing orders.", "arguments": [{"name": "discountApplicationId", "type": "ID!", "required": true, "description": "The ID of the calculated discount application\nto remove."}], "returns": [], "examples": []}, {"name": "orderEditRemoveLineItemDiscount", "description": "Removes a line item discount that was applied as part of an order edit.", "arguments": [{"name": "discountApplicationId", "type": "ID!", "required": true, "description": "The ID of the calculated discount application\nto remove."}], "returns": [], "examples": []}, {"name": "orderEditRemoveShippingLine", "description": "Removes a shipping line from an existing order. For more information on how to use the GraphQL Admin API to edit an existing order, refer to Edit existing orders.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID of the calculated order\nto edit."}], "returns": [], "examples": [{"description": "Remove a staged shipping line from an order edit", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation removeShippingLine($id: ID!, $shippingLineId: ID!) {\n    orderEditRemoveShippingLine(id: $id, shippingLineId: $shippingLineId) {\n      calculatedOrder {\n        id\n        totalOutstandingSet {\n          presentmentMoney {\n            amount\n            currencyCode\n          }\n        }\n        totalPriceSet {\n          presentmentMoney {\n            amount\n            currencyCode\n          }\n        }\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/CalculatedOrder/607673085\",\n  \"shippingLineId\": \"gid://shopify/CalculatedShippingLine/6ffda6d8-c0cf-44d6-8aa4-e89cea4a6607\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "orderEditRemoveShippingLine reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation removeShippingLine($id: ID!, $shippingLineId: ID!) {\n    orderEditRemoveShippingLine(id: $id, shippingLineId: $shippingLineId) {\n      calculatedOrder {\n        id\n        totalOutstandingSet {\n          presentmentMoney {\n            amount\n            currencyCode\n          }\n        }\n        totalPriceSet {\n          presentmentMoney {\n            amount\n            currencyCode\n          }\n        }\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/CalculatedOrder/607673085\",\n  \"shippingLineId\": \"gid://shopify/CalculatedShippingLine/6ffda6d8-c0cf-44d6-8aa4-e89cea4a6607\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "orderEditSetQuantity", "description": "Sets the quantity of a line item on an order that is being edited. For more information on how to use the GraphQL Admin API to edit an existing order, refer to Edit existing orders.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID of the calculated order\nto edit. The edit changes the quantity on the line item."}], "returns": [], "examples": []}, {"name": "orderEditUpdateDiscount", "description": "Updates a manual line level discount on the current order edit. For more information on how to use the GraphQL Admin API to edit an existing order, refer to Edit existing orders.", "arguments": [{"name": "discount", "type": "OrderEditAppliedDiscountInput!", "required": true, "description": "The updated discount."}], "returns": [], "examples": []}, {"name": "orderEditUpdateShippingLine", "description": "Updates a shipping line on the current order edit. For more information on how to use the GraphQL Admin API to edit an existing order, refer to Edit existing orders.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID of the calculated order\nfrom which to update the shipping line."}], "returns": [], "examples": [{"description": "Get a user error when updating a committed shipping line", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation updateShippingLine($id: ID!, $shippingLine: OrderEditUpdateShippingLineInput!, $shippingLineId: ID!) {\n    orderEditUpdateShippingLine(id: $id, shippingLine: $shippingLine, shippingLineId: $shippingLineId) {\n      calculatedOrder {\n        id\n        totalOutstandingSet {\n          presentmentMoney {\n            amount\n            currencyCode\n          }\n        }\n        totalPriceSet {\n          presentmentMoney {\n            amount\n            currencyCode\n          }\n        }\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/CalculatedOrder/607673082\",\n  \"shippingLineId\": \"gid://shopify/ShippingLine/1072813969\",\n  \"shippingLine\": {\n    \"title\": \"2-Day Shipping\",\n    \"price\": {\n      \"amount\": 19.99,\n      \"currencyCode\": \"USD\"\n    }\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Update a staged shipping line on an order edit", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation updateShippingLine($id: ID!, $shippingLine: OrderEditUpdateShippingLineInput!, $shippingLineId: ID!) {\n    orderEditUpdateShippingLine(id: $id, shippingLine: $shippingLine, shippingLineId: $shippingLineId) {\n      calculatedOrder {\n        id\n        totalOutstandingSet {\n          presentmentMoney {\n            amount\n            currencyCode\n          }\n        }\n        totalPriceSet {\n          presentmentMoney {\n            amount\n            currencyCode\n          }\n        }\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/CalculatedOrder/607673080\",\n  \"shippingLineId\": \"gid://shopify/CalculatedShippingLine/52ccb02a-dbb1-4b10-ac24-3e7861a641ec\",\n  \"shippingLine\": {\n    \"title\": \"2-Day Shipping\",\n    \"price\": {\n      \"amount\": 19.99,\n      \"currencyCode\": \"USD\"\n    }\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "orderEditUpdateShippingLine reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation updateShippingLine($id: ID!, $shippingLine: OrderEditUpdateShippingLineInput!, $shippingLineId: ID!) {\n    orderEditUpdateShippingLine(id: $id, shippingLine: $shippingLine, shippingLineId: $shippingLineId) {\n      calculatedOrder {\n        id\n        totalOutstandingSet {\n          presentmentMoney {\n            amount\n            currencyCode\n          }\n        }\n        totalPriceSet {\n          presentmentMoney {\n            amount\n            currencyCode\n          }\n        }\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/CalculatedOrder/607673082\",\n  \"shippingLineId\": \"gid://shopify/ShippingLine/1072813969\",\n  \"shippingLine\": {\n    \"title\": \"2-Day Shipping\",\n    \"price\": {\n      \"amount\": 19.99,\n      \"currencyCode\": \"USD\"\n    }\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "orderInvoiceSend", "description": "Sends an email invoice for an order.", "arguments": [{"name": "email", "type": "EmailInput", "required": true, "description": "The email input fields for the order invoice. The bcc and from fields should be store or staff account emails."}], "returns": [], "examples": [{"description": "Send invoice", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation OrderInvoiceSend($orderId: ID!, $email: EmailInput) {\n    orderInvoiceSend(id: $orderId, email: $email) {\n      order {\n        id\n      }\n      userErrors {\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"orderId\": \"gid://shopify/Order/17181286\",\n  \"email\": {\n    \"to\": \"test@example.net\",\n    \"from\": \"Sales Modyl <salesmodel@example.com>\",\n    \"subject\": \"Invoice #1001\",\n    \"customMessage\": \"Thank you for your order\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "orderInvoiceSend reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation OrderInvoiceSend($orderId: ID!, $email: EmailInput) {\n    orderInvoiceSend(id: $orderId, email: $email) {\n      order {\n        id\n      }\n      userErrors {\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"orderId\": \"gid://shopify/Order/17181286\",\n  \"email\": {\n    \"to\": \"test@example.net\",\n    \"from\": \"Sales Modyl <salesmodel@example.com>\",\n    \"subject\": \"Invoice #1001\",\n    \"customMessage\": \"Thank you for your order\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "orderMarkAsPaid", "description": "Marks an order as paid. You can only mark an order as paid if it isn't already fully paid.", "arguments": [{"name": "input", "type": "OrderMarkAsPaidInput!", "required": true, "description": "The input for the mutation."}], "returns": [], "examples": []}, {"name": "orderOpen", "description": "Opens a closed order.", "arguments": [{"name": "input", "type": "OrderOpenInput!", "required": true, "description": "The input for the mutation."}], "returns": [], "examples": [{"description": "Re-open a closed order", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation OrderOpen($input: OrderOpenInput!) {\n    orderOpen(input: $input) {\n      order {\n        canMarkAsPaid\n        cancelReason\n        cancelledAt\n        clientIp\n        confirmed\n        customer {\n          displayName\n          email\n        }\n        discountCodes\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": {\n    \"id\": \"gid://shopify/Order/235240302\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "orderOpen reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation OrderOpen($input: OrderOpenInput!) {\n    orderOpen(input: $input) {\n      order {\n        canMarkAsPaid\n        cancelReason\n        cancelledAt\n        clientIp\n        confirmed\n        customer {\n          displayName\n          email\n        }\n        discountCodes\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": {\n    \"id\": \"gid://shopify/Order/235240302\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "orderRiskAssessmentCreate", "description": "Create a risk assessment for an order.", "arguments": [{"name": "orderRiskAssessmentInput", "type": "OrderRiskAssessmentCreateInput!", "required": true, "description": "The input fields required to create a risk assessment."}], "returns": [], "examples": [{"description": "Create a risk assessment for an order", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation OrderRiskAssessmentCreate($input: OrderRiskAssessmentCreateInput!) {\n    orderRiskAssessmentCreate(orderRiskAssessmentInput: $input) {\n      userErrors {\n        field\n        message\n      }\n      orderRiskAssessment {\n        facts {\n          description\n          sentiment\n        }\n        provider {\n          title\n        }\n        riskLevel\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": {\n    \"orderId\": \"gid://shopify/Order/148977776\",\n    \"riskLevel\": \"LOW\",\n    \"facts\": [{\"description\"=>\"Payment verification successful.\", \"sentiment\"=>\"POSITIVE\"}, {\"description\"=>\"Buyer verification inconclusive.\", \"sentiment\"=>\"NEUTRAL\"}]\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Create a risk assessment for an order, in the pending state", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation OrderRiskAssessmentCreate($input: OrderRiskAssessmentCreateInput!) {\n    orderRiskAssessmentCreate(orderRiskAssessmentInput: $input) {\n      userErrors {\n        field\n        message\n      }\n      orderRiskAssessment {\n        facts {\n          description\n          sentiment\n        }\n        provider {\n          title\n        }\n        riskLevel\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": {\n    \"orderId\": \"gid://shopify/Order/148977776\",\n    \"riskLevel\": \"PENDING\",\n    \"facts\": [{\"description\"=>\"Analysis is underway.\", \"sentiment\"=>\"NEUTRAL\"}]\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Creates an order risk for an order", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation OrderRiskAssessmentCreate($input: OrderRiskAssessmentCreateInput!) {\n    orderRiskAssessmentCreate(orderRiskAssessmentInput: $input) {\n      userErrors {\n        field\n        message\n      }\n      orderRiskAssessment {\n        facts {\n          description\n          sentiment\n        }\n        provider {\n          title\n        }\n        riskLevel\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": {\n    \"orderId\": \"gid://shopify/Order/148977776\",\n    \"riskLevel\": \"LOW\",\n    \"facts\": [{\"description\"=>\"Payment verification successful.\", \"sentiment\"=>\"POSITIVE\"}, {\"description\"=>\"Buyer verification inconclusive.\", \"sentiment\"=>\"NEUTRAL\"}]\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "orderRiskAssessmentCreate reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation OrderRiskAssessmentCreate($input: OrderRiskAssessmentCreateInput!) {\n    orderRiskAssessmentCreate(orderRiskAssessmentInput: $input) {\n      userErrors {\n        field\n        message\n      }\n      orderRiskAssessment {\n        facts {\n          description\n          sentiment\n        }\n        provider {\n          title\n        }\n        riskLevel\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": {\n    \"orderId\": \"gid://shopify/Order/148977776\",\n    \"riskLevel\": \"LOW\",\n    \"facts\": [{\"description\"=>\"Payment verification successful.\", \"sentiment\"=>\"POSITIVE\"}, {\"description\"=>\"Buyer verification inconclusive.\", \"sentiment\"=>\"NEUTRAL\"}]\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "orderUpdate", "description": "Updates the attributes of an order, such as the customer's email, the shipping address for the order,\ntags, and metafields associated with the order.\nIf you need to make significant updates to an order, such as adding or removing line items, changing\nquantities, or modifying discounts, then use\nthe orderEditBegin\nmutation instead. The orderEditBegin mutation initiates an order editing session,\nallowing you to make multiple changes before finalizing them. Learn more about using the orderEditBegin\nmutation to edit existing orders.\nLearn how to build apps that integrate with\norder management and fulfillment processes.", "arguments": [{"name": "input", "type": "OrderInput!", "required": true, "description": "The attributes of the updated order."}], "returns": [], "examples": [{"description": "Update an order's shipping address and note", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation OrderUpdate($input: OrderInput!) {\n    orderUpdate(input: $input) {\n      order {\n        id\n        note\n        shippingAddress {\n          address1\n          city\n          province\n          zip\n          country\n        }\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": {\n    \"id\": \"gid://shopify/Order/148977776\",\n    \"shippingAddress\": {\n      \"address1\": \"190 MacLaren\",\n      \"city\": \"Sudbury\",\n      \"province\": \"Ontario\",\n      \"zip\": \"K2P0V6\",\n      \"country\": \"Canada\"\n    },\n    \"note\": \"Please gift wrap the snowboard.\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Update an order's tags and customer email address", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation OrderUpdate($input: OrderInput!) {\n    orderUpdate(input: $input) {\n      order {\n        canMarkAsPaid\n        cancelReason\n        cancelledAt\n        clientIp\n        confirmed\n        customer {\n          displayName\n          email\n        }\n        discountCodes\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": {\n    \"id\": \"gid://shopify/Order/148977776\",\n    \"email\": \"bob@example.com\",\n    \"tags\": [\"foo\", \"bar\"]\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "orderUpdate reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation OrderUpdate($input: OrderInput!) {\n    orderUpdate(input: $input) {\n      order {\n        id\n        note\n        shippingAddress {\n          address1\n          city\n          province\n          zip\n          country\n        }\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": {\n    \"id\": \"gid://shopify/Order/148977776\",\n    \"shippingAddress\": {\n      \"address1\": \"190 MacLaren\",\n      \"city\": \"Sudbury\",\n      \"province\": \"Ontario\",\n      \"zip\": \"K2P0V6\",\n      \"country\": \"Canada\"\n    },\n    \"note\": \"Please gift wrap the snowboard.\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "refundCreate", "description": "Creates a refund.", "arguments": [{"name": "input", "type": "RefundInput!", "required": true, "description": "The input fields that are used in the mutation for creating a refund."}], "returns": [], "examples": [{"description": "Create a refund with a note and transaction, then return the total refund amount across all transactions", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation M($input: RefundInput!) {\n    refundCreate(input: $input) {\n      userErrors {\n        field\n        message\n      }\n      refund {\n        id\n        note\n        totalRefundedSet {\n          presentmentMoney {\n            amount\n          }\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": {\n    \"orderId\": \"gid://shopify/Order/734509473\",\n    \"note\": \"Want to exchange for a different item\",\n    \"refundLineItems\": [{\"lineItemId\"=>\"gid://shopify/LineItem/25746870\", \"quantity\"=>2}],\n    \"transactions\": [{\"orderId\"=>\"gid://shopify/Order/734509473\", \"gateway\"=>\"foo\", \"kind\"=>\"REFUND\", \"amount\"=>\"10.0\", \"parentId\"=>\"gid://shopify/OrderTransaction/723599266\"}]\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Create a refund with shipping partially refunded. Then, return the total refund amount and information about the first two transactions.", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation M($input: RefundInput!) {\n    refundCreate(input: $input) {\n      userErrors {\n        field\n        message\n      }\n      refund {\n        id\n        totalRefundedSet {\n          presentmentMoney {\n            amount\n          }\n        }\n        transactions(first: 2) {\n          edges {\n            node {\n              amountSet {\n                presentmentMoney {\n                  amount\n                }\n              }\n              status\n            }\n          }\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": {\n    \"orderId\": \"gid://shopify/Order/734509473\",\n    \"transactions\": [{\"orderId\"=>\"gid://shopify/Order/734509473\", \"parentId\"=>\"gid://shopify/OrderTransaction/723599266\", \"kind\"=>\"REFUND\", \"gateway\"=>\"foo\", \"amount\"=>\"16.99\"}],\n    \"shipping\": {\n      \"amount\": \"6.99\"\n    }\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Creates a refund", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation RefundCreate($input: RefundInput!) {\n    refundCreate(input: $input) {\n      refund {\n        id\n        totalRefundedSet {\n          presentmentMoney {\n            amount\n            currencyCode\n          }\n        }\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": {\n    \"orderId\": \"gid://shopify/Order/734509473\",\n    \"refundLineItems\": [{\"lineItemId\"=>\"gid://shopify/LineItem/25746870\", \"quantity\"=>1}],\n    \"transactions\": []\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "refundCreate reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation M($input: RefundInput!) {\n    refundCreate(input: $input) {\n      userErrors {\n        field\n        message\n      }\n      refund {\n        id\n        note\n        totalRefundedSet {\n          presentmentMoney {\n            amount\n          }\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": {\n    \"orderId\": \"gid://shopify/Order/734509473\",\n    \"note\": \"Want to exchange for a different item\",\n    \"refundLineItems\": [{\"lineItemId\"=>\"gid://shopify/LineItem/25746870\", \"quantity\"=>2}],\n    \"transactions\": [{\"orderId\"=>\"gid://shopify/Order/734509473\", \"gateway\"=>\"foo\", \"kind\"=>\"REFUND\", \"amount\"=>\"10.0\", \"parentId\"=>\"gid://shopify/OrderTransaction/723599266\"}]\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "returnApproveRequest", "description": "Approves a customer's return request.\nIf this mutation is successful, then the Return.status field of the\napproved return is set to OPEN.", "arguments": [{"name": "input", "type": "ReturnApproveRequestInput!", "required": true, "description": "The input fields to approve a return."}], "returns": [], "examples": [{"description": "Approve a return", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation ReturnApproveRequest($input: ReturnApproveRequestInput!) {\n    returnApproveRequest(input: $input) {\n      return {\n        id\n        name\n        status\n        returnLineItems(first: 1) {\n          edges {\n            node {\n              id\n            }\n          }\n        }\n        order {\n          id\n        }\n      }\n      userErrors {\n        code\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": {\n    \"id\": \"gid://shopify/Return/945000959\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Cannot approve a return with an invalid status", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation ReturnApproveRequest($input: ReturnApproveRequestInput!) {\n    returnApproveRequest(input: $input) {\n      return {\n        id\n        status\n      }\n      userErrors {\n        code\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": {\n    \"id\": \"gid://shopify/Return/945000958\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "returnApproveRequest reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation ReturnApproveRequest($input: ReturnApproveRequestInput!) {\n    returnApproveRequest(input: $input) {\n      return {\n        id\n        name\n        status\n        returnLineItems(first: 1) {\n          edges {\n            node {\n              id\n            }\n          }\n        }\n        order {\n          id\n        }\n      }\n      userErrors {\n        code\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": {\n    \"id\": \"gid://shopify/Return/945000959\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "returnCancel", "description": "Cancels a return and restores the items back to being fulfilled.\nCanceling a return is only available before any work has been done\non the return (such as an inspection or refund).", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID of the return to cancel."}], "returns": [], "examples": []}, {"name": "returnClose", "description": "Indicates a return is complete, either when a refund has been made and items restocked,\nor simply when it has been marked as returned in the system.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID of the return to close."}], "returns": [], "examples": []}, {"name": "returnCreate", "description": "Creates a return.", "arguments": [{"name": "returnInput", "type": "ReturnInput!", "required": true, "description": "Specifies the input fields for a return."}], "returns": [], "examples": []}, {"name": "returnDeclineRequest", "description": "Declines a return on an order.\nWhen a return is declined, each ReturnLineItem.fulfillmentLineItem can be associated to a new return.\nUse the ReturnCreate or ReturnRequest mutation to initiate a new return.", "arguments": [{"name": "input", "type": "ReturnDeclineRequestInput!", "required": true, "description": "The input fields for declining a customer's return request."}], "returns": [], "examples": [{"description": "Cannot decline a return that has been refunded", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation ReturnDeclineRequest($input: ReturnDeclineRequestInput!) {\n    returnDeclineRequest(input: $input) {\n      return {\n        id\n        status\n      }\n      userErrors {\n        code\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": {\n    \"id\": \"gid://shopify/Return/491427904\",\n    \"declineReason\": \"RETURN_PERIOD_ENDED\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Cannot decline a return with an invalid status", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation ReturnDeclineRequest($input: ReturnDeclineRequestInput!) {\n    returnDeclineRequest(input: $input) {\n      return {\n        id\n        status\n      }\n      userErrors {\n        code\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": {\n    \"id\": \"gid://shopify/Return/945000954\",\n    \"declineReason\": \"RETURN_PERIOD_ENDED\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Decline a return", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation ReturnDeclineRequest($input: ReturnDeclineRequestInput!) {\n    returnDeclineRequest(input: $input) {\n      return {\n        id\n        status\n        decline {\n          reason\n        }\n        returnLineItems(first: 1) {\n          edges {\n            node {\n              id\n            }\n          }\n        }\n        order {\n          id\n        }\n      }\n      userErrors {\n        code\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": {\n    \"id\": \"gid://shopify/Return/945000960\",\n    \"declineReason\": \"RETURN_PERIOD_ENDED\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "returnDeclineRequest reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation ReturnDeclineRequest($input: ReturnDeclineRequestInput!) {\n    returnDeclineRequest(input: $input) {\n      return {\n        id\n        status\n      }\n      userErrors {\n        code\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": {\n    \"id\": \"gid://shopify/Return/491427904\",\n    \"declineReason\": \"RETURN_PERIOD_ENDED\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "returnLineItemRemoveFromReturn", "description": "Removes return lines from a return.", "arguments": [{"name": "returnId", "type": "ID!", "required": true, "description": "The ID of the return for line item removal."}], "returns": [], "examples": [{"description": "Remove a return line item from a return", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation ReturnLineItemRemoveFromReturn($returnId: ID!, $returnLineItems: [ReturnLineItemRemoveFromReturnInput!]!) {\n    returnLineItemRemoveFromReturn(returnId: $returnId, returnLineItems: $returnLineItems) {\n      userErrors {\n        field\n        message\n      }\n      return {\n        id\n        status\n        returnLineItems(first: 10) {\n          edges {\n            node {\n              id\n              quantity\n            }\n          }\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"returnId\": \"gid://shopify/Return/945000969\",\n  \"returnLineItems\": [{\"returnLineItemId\"=>\"gid://shopify/ReturnLineItem/791246324\", \"quantity\"=>1}]\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "returnLineItemRemoveFromReturn reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation ReturnLineItemRemoveFromReturn($returnId: ID!, $returnLineItems: [ReturnLineItemRemoveFromReturnInput!]!) {\n    returnLineItemRemoveFromReturn(returnId: $returnId, returnLineItems: $returnLineItems) {\n      userErrors {\n        field\n        message\n      }\n      return {\n        id\n        status\n        returnLineItems(first: 10) {\n          edges {\n            node {\n              id\n              quantity\n            }\n          }\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"returnId\": \"gid://shopify/Return/945000969\",\n  \"returnLineItems\": [{\"returnLineItemId\"=>\"gid://shopify/ReturnLineItem/791246324\", \"quantity\"=>1}]\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "returnRefund", "description": "Refunds a return when its status is OPEN or CLOSED and associates it with the related return request.", "arguments": [{"name": "returnRefundInput", "type": "ReturnRefundInput!", "required": true, "description": "The input fields to refund a return."}], "returns": [], "examples": []}, {"name": "returnReopen", "description": "Reopens a closed return.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID of the return to reopen."}], "returns": [], "examples": []}, {"name": "returnRequest", "description": "A customer's return request that hasn't been approved or declined.\nThis mutation sets the value of the Return.status field to REQUESTED.\nTo create a return that has the Return.status field set to OPEN, use the returnCreate mutation.", "arguments": [{"name": "input", "type": "ReturnRequestInput!", "required": true, "description": "The input fields for requesting a return."}], "returns": [], "examples": [{"description": "Request a return", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation ReturnRequest($input: ReturnRequestInput!) {\n    returnRequest(input: $input) {\n      userErrors {\n        field\n        message\n      }\n      return {\n        id\n        status\n        returnLineItems(first: 1) {\n          edges {\n            node {\n              id\n              returnReason\n              customerNote\n            }\n          }\n        }\n        order {\n          id\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": {\n    \"orderId\": \"gid://shopify/Order/625362839\",\n    \"returnLineItems\": [{\"fulfillmentLineItemId\"=>\"gid://shopify/FulfillmentLineItem/820022594\", \"quantity\"=>1, \"returnReason\"=>\"WRONG_ITEM\", \"customerNote\"=>\"Sorry, I ordered the wrong item. Could I get a refund or store credit?\"}]\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "returnRequest reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation ReturnRequest($input: ReturnRequestInput!) {\n    returnRequest(input: $input) {\n      userErrors {\n        field\n        message\n      }\n      return {\n        id\n        status\n        returnLineItems(first: 1) {\n          edges {\n            node {\n              id\n              returnReason\n              customerNote\n            }\n          }\n        }\n        order {\n          id\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": {\n    \"orderId\": \"gid://shopify/Order/625362839\",\n    \"returnLineItems\": [{\"fulfillmentLineItemId\"=>\"gid://shopify/FulfillmentLineItem/820022594\", \"quantity\"=>1, \"returnReason\"=>\"WRONG_ITEM\", \"customerNote\"=>\"Sorry, I ordered the wrong item. Could I get a refund or store credit?\"}]\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "reverseDeliveryCreateWithShipping", "description": "Creates a new reverse delivery with associated external shipping information.", "arguments": [{"name": "labelInput", "type": "ReverseDeliveryLabelInput", "required": true, "description": "The return label file information for the reverse delivery."}], "returns": [], "examples": []}, {"name": "reverseDeliveryShippingUpdate", "description": "Updates a reverse delivery with associated external shipping information.", "arguments": [{"name": "labelInput", "type": "ReverseDeliveryLabelInput", "required": true, "description": "The return label file information for the reverse delivery."}], "returns": [], "examples": []}, {"name": "reverseFulfillmentOrderDispose", "description": "Disposes reverse fulfillment order line items.", "arguments": [{"name": "dispositionInputs", "type": "[ReverseFulfillmentOrderDisposeInput!]!", "required": true, "description": "The input parameters required to dispose reverse fulfillment order line items."}], "returns": [], "examples": []}, {"name": "subscriptionBillingAttemptCreate", "description": "Creates a new subscription billing attempt. For more information, refer to Create a subscription contract.", "arguments": [{"name": "subscriptionBillingAttemptInput", "type": "SubscriptionBillingAttemptInput!", "required": true, "description": "The information to apply as a billing attempt."}], "returns": [], "examples": [{"description": "Create a billing attempt on a specific billing cycle", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation subscriptionBillingAttemptCreate($contractId: ID!, $index: Int!) {\n    subscriptionBillingAttemptCreate(subscriptionContractId: $contractId, subscriptionBillingAttemptInput: {billingCycleSelector: {index: $index}, idempotencyKey: \"aaa-bbb-ccc\", originTime: \"2020-10-01T10:00:00Z\"}) {\n      subscriptionBillingAttempt {\n        id\n        ready\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"contractId\": \"gid://shopify/SubscriptionContract/593791907\",\n  \"index\": 1\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "subscriptionBillingAttemptCreate reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation subscriptionBillingAttemptCreate($contractId: ID!, $index: Int!) {\n    subscriptionBillingAttemptCreate(subscriptionContractId: $contractId, subscriptionBillingAttemptInput: {billingCycleSelector: {index: $index}, idempotencyKey: \"aaa-bbb-ccc\", originTime: \"2020-10-01T10:00:00Z\"}) {\n      subscriptionBillingAttempt {\n        id\n        ready\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"contractId\": \"gid://shopify/SubscriptionContract/593791907\",\n  \"index\": 1\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "subscriptionBillingCycleBulkCharge", "description": "Asynchronously queries and charges all subscription billing cycles whose billingAttemptExpectedDate values fall within a specified date range and meet additional filtering criteria. The results of this action can be retrieved using the subscriptionBillingCycleBulkResults query.", "arguments": [{"name": "billingAttemptExpectedDateRange", "type": "SubscriptionBillingCyclesDateRangeSelector!", "required": true, "description": "Specifies the date range within which the billingAttemptExpectedDate values of the billing cycles should fall."}], "returns": [], "examples": [{"description": "Create a job to charge all subscription billing cycles in time range", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation($startDate: DateTime!, $endDate: DateTime!) {\n    subscriptionBillingCycleBulkCharge(billingAttemptExpectedDateRange: {startDate: $startDate, endDate: $endDate}) {\n      job {\n        id\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"startDate\": \"2023-02-01T00:00:00-05:00\",\n  \"endDate\": \"2023-02-02T23:59:59-05:00\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "subscriptionBillingCycleBulkCharge reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation($startDate: DateTime!, $endDate: DateTime!) {\n    subscriptionBillingCycleBulkCharge(billingAttemptExpectedDateRange: {startDate: $startDate, endDate: $endDate}) {\n      job {\n        id\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"startDate\": \"2023-02-01T00:00:00-05:00\",\n  \"endDate\": \"2023-02-02T23:59:59-05:00\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "subscriptionBillingCycleBulkSearch", "description": "Asynchronously queries all subscription billing cycles whose billingAttemptExpectedDate values fall within a specified date range and meet additional filtering criteria. The results of this action can be retrieved using the subscriptionBillingCycleBulkResults query.", "arguments": [{"name": "billingAttemptExpectedDateRange", "type": "SubscriptionBillingCyclesDateRangeSelector!", "required": true, "description": "Specifies the date range within which the billingAttemptExpectedDate values of the billing cycles should fall."}], "returns": [], "examples": [{"description": "Create a job to search for all subscription billing cycles in time range", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation($startDate: DateTime!, $endDate: DateTime!) {\n    subscriptionBillingCycleBulkSearch(billingAttemptExpectedDateRange: {startDate: $startDate, endDate: $endDate}) {\n      job {\n        id\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"startDate\": \"2023-02-01T00:00:00-05:00\",\n  \"endDate\": \"2023-02-02T23:59:59-05:00\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "subscriptionBillingCycleBulkSearch reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation($startDate: DateTime!, $endDate: DateTime!) {\n    subscriptionBillingCycleBulkSearch(billingAttemptExpectedDateRange: {startDate: $startDate, endDate: $endDate}) {\n      job {\n        id\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"startDate\": \"2023-02-01T00:00:00-05:00\",\n  \"endDate\": \"2023-02-02T23:59:59-05:00\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "subscriptionBillingCycleCharge", "description": "Creates a new subscription billing attempt for a specified billing cycle. This is the alternative mutation for subscriptionBillingAttemptCreate. For more information, refer to Create a subscription contract.", "arguments": [{"name": "billingCycleSelector", "type": "SubscriptionBillingCycleSelector!", "required": true, "description": "Select the specific billing cycle to be billed.\nIf the selected billing cycle's billingAttemptExpectedDate is in the past, the originTime of the billing attempt will be set to this date. However, if the billingAttemptExpectedDate is in the future, the originTime will be the current time."}], "returns": [], "examples": [{"description": "Create a billing attempt on a specific billing cycle", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation subscriptionBillingCycleCharge($contractId: ID!, $billingCycleSelector: SubscriptionBillingCycleSelector!) {\n    subscriptionBillingCycleCharge(subscriptionContractId: $contractId, billingCycleSelector: $billingCycleSelector) {\n      subscriptionBillingAttempt {\n        id\n        ready\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"contractId\": \"gid://shopify/SubscriptionContract/593791907\",\n  \"billingCycleSelector\": {\n    \"date\": \"2023-01-05T12:00:00Z\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "subscriptionBillingCycleCharge reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation subscriptionBillingCycleCharge($contractId: ID!, $billingCycleSelector: SubscriptionBillingCycleSelector!) {\n    subscriptionBillingCycleCharge(subscriptionContractId: $contractId, billingCycleSelector: $billingCycleSelector) {\n      subscriptionBillingAttempt {\n        id\n        ready\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"contractId\": \"gid://shopify/SubscriptionContract/593791907\",\n  \"billingCycleSelector\": {\n    \"date\": \"2023-01-05T12:00:00Z\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "subscriptionBillingCycleContractDraftCommit", "description": "Commits the updates of a Subscription Billing Cycle Contract draft.", "arguments": [{"name": "draftId", "type": "ID!", "required": true, "description": "The gid of the Subscription Contract draft to commit."}], "returns": [], "examples": []}, {"name": "subscriptionBillingCycleContractDraftConcatenate", "description": "Concatenates a contract to a Subscription Draft.", "arguments": [{"name": "concatenatedBillingCycleContracts", "type": "[SubscriptionBillingCycleInput!]!", "required": true, "description": "An array of Subscription Contracts with their selected billing cycles to concatenate to the subscription draft."}], "returns": [], "examples": []}, {"name": "subscriptionBillingCycleContractEdit", "description": "Edit the contents of a subscription contract for the specified billing cycle.", "arguments": [{"name": "billingCycleInput", "type": "SubscriptionBillingCycleInput!", "required": true, "description": "Input object for selecting and using billing cycles."}], "returns": [], "examples": []}, {"name": "subscriptionBillingCycleEditDelete", "description": "Delete the schedule and contract edits of the selected subscription billing cycle.", "arguments": [{"name": "billingCycleInput", "type": "SubscriptionBillingCycleInput!", "required": true, "description": "Input object used to select and use billing cycles."}], "returns": [], "examples": [{"description": "Deletes the edits on a future billing cycle", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation subscriptionBillingCycleEditDelete($contractId: ID!, $index: Int!) {\n    subscriptionBillingCycleEditDelete(billingCycleInput: {contractId: $contractId, selector: {index: $index}}) {\n      billingCycles {\n        cycleStartAt\n        cycleEndAt\n        cycleIndex\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"contractId\": \"gid://shopify/SubscriptionContract/398475269\",\n  \"index\": 1\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "subscriptionBillingCycleEditDelete reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation subscriptionBillingCycleEditDelete($contractId: ID!, $index: Int!) {\n    subscriptionBillingCycleEditDelete(billingCycleInput: {contractId: $contractId, selector: {index: $index}}) {\n      billingCycles {\n        cycleStartAt\n        cycleEndAt\n        cycleIndex\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"contractId\": \"gid://shopify/SubscriptionContract/398475269\",\n  \"index\": 1\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "subscriptionBillingCycleEditsDelete", "description": "Delete the current and future schedule and contract edits of a list of subscription billing cycles.", "arguments": [{"name": "contractId", "type": "ID!", "required": true, "description": "The globally-unique identifier of the subscription contract that the billing cycle belongs to."}], "returns": [], "examples": [{"description": "Delete the edits on the current and all future billing cycles", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation subscriptionBillingCycleEditsDelete($contractId: ID!) {\n    subscriptionBillingCycleEditsDelete(contractId: $contractId, targetSelection: ALL) {\n      billingCycles {\n        cycleStartAt\n        cycleEndAt\n        cycleIndex\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"contractId\": \"gid://shopify/SubscriptionContract/398475269\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "subscriptionBillingCycleEditsDelete reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation subscriptionBillingCycleEditsDelete($contractId: ID!) {\n    subscriptionBillingCycleEditsDelete(contractId: $contractId, targetSelection: ALL) {\n      billingCycles {\n        cycleStartAt\n        cycleEndAt\n        cycleIndex\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"contractId\": \"gid://shopify/SubscriptionContract/398475269\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "subscriptionBillingCycleScheduleEdit", "description": "Modify the schedule of a specific billing cycle.", "arguments": [{"name": "billingCycleInput", "type": "SubscriptionBillingCycleInput!", "required": true, "description": "Input object for selecting and using billing cycles."}], "returns": [], "examples": [{"description": "Change the billing date of a cycle", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation subscriptionBillingCycleScheduleEdit($contractId: ID!, $index: Int!, $date: DateTime!) {\n    subscriptionBillingCycleScheduleEdit(billingCycleInput: {contractId: $contractId, selector: {index: $index}}, input: {billingDate: $date, reason: BUYER_INITIATED}) {\n      billingCycle {\n        cycleIndex\n        billingAttemptExpectedDate\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"contractId\": \"gid://shopify/SubscriptionContract/398475269\",\n  \"index\": 1,\n  \"date\": \"2021-12-31T07:00:00-05:00\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Skip a cycle", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation subscriptionBillingCycleScheduleEdit($contractId: ID!, $index: Int!) {\n    subscriptionBillingCycleScheduleEdit(billingCycleInput: {contractId: $contractId, selector: {index: $index}}, input: {skip: true, reason: BUYER_INITIATED}) {\n      billingCycle {\n        cycleIndex\n        skipped\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"contractId\": \"gid://shopify/SubscriptionContract/398475269\",\n  \"index\": 1\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "subscriptionBillingCycleScheduleEdit reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation subscriptionBillingCycleScheduleEdit($contractId: ID!, $index: Int!, $date: DateTime!) {\n    subscriptionBillingCycleScheduleEdit(billingCycleInput: {contractId: $contractId, selector: {index: $index}}, input: {billingDate: $date, reason: BUYER_INITIATED}) {\n      billingCycle {\n        cycleIndex\n        billingAttemptExpectedDate\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"contractId\": \"gid://shopify/SubscriptionContract/398475269\",\n  \"index\": 1,\n  \"date\": \"2021-12-31T07:00:00-05:00\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "subscriptionBillingCycleSkip", "description": "Skips a Subscription Billing Cycle.", "arguments": [{"name": "billingCycleInput", "type": "SubscriptionBillingCycleInput!", "required": true, "description": "Input object for selecting and using billing cycles."}], "returns": [], "examples": []}, {"name": "subscriptionBillingCycleUnskip", "description": "Unskips a Subscription Billing Cycle.", "arguments": [{"name": "billingCycleInput", "type": "SubscriptionBillingCycleInput!", "required": true, "description": "Input object for selecting and using billing cycles."}], "returns": [], "examples": []}, {"name": "subscriptionContractActivate", "description": "Activates a Subscription Contract. Contract status must be either active, paused, or failed.", "arguments": [{"name": "subscriptionContractId", "type": "ID!", "required": true, "description": "The ID of the Subscription Contract."}], "returns": [], "examples": []}, {"name": "subscriptionContractAtomicCreate", "description": "Creates a Subscription Contract.", "arguments": [{"name": "input", "type": "SubscriptionContractAtomicCreateInput!", "required": true, "description": "The properties of the new Subscription Contract."}], "returns": [], "examples": [{"description": "Create a subscription contract with a single line item", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation($customerId: ID!, $paymentMethodId: ID!, $variantId: ID!) {\n    subscriptionContractAtomicCreate(input: {customerId: $customerId, nextBillingDate: \"2025-06-01\", currencyCode: USD, lines: [{line: {productVariantId: $variantId, quantity: 20, currentPrice: 25.0}}], contract: {status: ACTIVE, paymentMethodId: $paymentMethodId, billingPolicy: {interval: MONTH, intervalCount: 1, minCycles: 3}, deliveryPolicy: {interval: MONTH, intervalCount: 1}, deliveryPrice: 14.99, deliveryMethod: {shipping: {address: {firstName: \"John\", lastName: \"King\", address1: \"1483 rue Mossoro\", city: \"Montreal\", province: \"Quebec\", country: \"Canada\", zip: \"H2S1Z5\"}}}}}) {\n      contract {\n        id\n        lines(first: 10) {\n          nodes {\n            id\n            quantity\n          }\n        }\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"customerId\": \"gid://shopify/Customer/544365967\",\n  \"paymentMethodId\": \"gid://shopify/CustomerPaymentMethod/b7cc6e3267aace169e516ed48be72dff\",\n  \"variantId\": \"gid://shopify/ProductVariant/30322695\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "subscriptionContractAtomicCreate reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation($customerId: ID!, $paymentMethodId: ID!, $variantId: ID!) {\n    subscriptionContractAtomicCreate(input: {customerId: $customerId, nextBillingDate: \"2025-06-01\", currencyCode: USD, lines: [{line: {productVariantId: $variantId, quantity: 20, currentPrice: 25.0}}], contract: {status: ACTIVE, paymentMethodId: $paymentMethodId, billingPolicy: {interval: MONTH, intervalCount: 1, minCycles: 3}, deliveryPolicy: {interval: MONTH, intervalCount: 1}, deliveryPrice: 14.99, deliveryMethod: {shipping: {address: {firstName: \"John\", lastName: \"King\", address1: \"1483 rue Mossoro\", city: \"Montreal\", province: \"Quebec\", country: \"Canada\", zip: \"H2S1Z5\"}}}}}) {\n      contract {\n        id\n        lines(first: 10) {\n          nodes {\n            id\n            quantity\n          }\n        }\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"customerId\": \"gid://shopify/Customer/544365967\",\n  \"paymentMethodId\": \"gid://shopify/CustomerPaymentMethod/b7cc6e3267aace169e516ed48be72dff\",\n  \"variantId\": \"gid://shopify/ProductVariant/30322695\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "subscriptionContractCancel", "description": "Cancels a Subscription Contract.", "arguments": [{"name": "subscriptionContractId", "type": "ID!", "required": true, "description": "The ID of the Subscription Contract."}], "returns": [], "examples": []}, {"name": "subscriptionContractCreate", "description": "Creates a Subscription Contract Draft.\nYou can submit all the desired information for the draft using Subscription Draft Input object.\nYou can also update the draft using the Subscription Contract Update mutation.\nThe draft is not saved until you call the Subscription Draft Commit mutation.", "arguments": [{"name": "input", "type": "SubscriptionContractCreateInput!", "required": true, "description": "The properties of the new Subscription Contract."}], "returns": [], "examples": [{"description": "Create a subscription contract with draft input", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation createSubscriptionContract($input: SubscriptionContractCreateInput!) {\n    subscriptionContractCreate(input: $input) {\n      draft {\n        id\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": {\n    \"customerId\": \"gid://shopify/Customer/544365967\",\n    \"currencyCode\": \"USD\",\n    \"nextBillingDate\": \"2024-10-11T21:11:01-04:00\",\n    \"contract\": {\n      \"status\": \"ACTIVE\",\n      \"note\": \"Note of a thing.\",\n      \"customAttributes\": [{\"key\"=>\"Test\", \"value\"=>\"Test value\"}],\n      \"paymentMethodId\": \"gid://shopify/CustomerPaymentMethod/b7cc6e3267aace169e516ed48be72dff\",\n      \"billingPolicy\": {\n        \"minCycles\": 3,\n        \"maxCycles\": 12,\n        \"intervalCount\": 1,\n        \"interval\": \"MONTH\",\n        \"anchors\": [{\"type\"=>\"MONTHDAY\", \"day\"=>12}]\n      },\n      \"deliveryPolicy\": {\n        \"intervalCount\": 1,\n        \"interval\": \"MONTH\",\n        \"anchors\": [{\"type\"=>\"MONTHDAY\", \"day\"=>13}]\n      },\n      \"deliveryPrice\": 2.99,\n      \"deliveryMethod\": {\n        \"shipping\": {\n          \"address\": {\n            \"firstName\": \"Mont\",\n            \"lastName\": \"R\u00e9al\",\n            \"address1\": \"490 Rue De La Gaucheti\u00e8re O\",\n            \"country\": \"Canada\",\n            \"province\": \"Qu\u00e9bec\",\n            \"phone\": \"+16135551212\",\n            \"zip\": \"H2Z 0B3\",\n            \"city\": \"Montr\u00e9al\"\n          },\n          \"shippingOption\": {\n            \"title\": \"Subscription shipping\",\n            \"presentmentTitle\": \"Translated shipping for subscription\",\n            \"description\": \"5-7 Days\",\n            \"code\": \"GROUND\",\n            \"carrierServiceId\": null\n          }\n        }\n      }\n    }\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "subscriptionContractCreate reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation createSubscriptionContract($input: SubscriptionContractCreateInput!) {\n    subscriptionContractCreate(input: $input) {\n      draft {\n        id\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": {\n    \"customerId\": \"gid://shopify/Customer/544365967\",\n    \"currencyCode\": \"USD\",\n    \"nextBillingDate\": \"2024-10-11T21:11:01-04:00\",\n    \"contract\": {\n      \"status\": \"ACTIVE\",\n      \"note\": \"Note of a thing.\",\n      \"customAttributes\": [{\"key\"=>\"Test\", \"value\"=>\"Test value\"}],\n      \"paymentMethodId\": \"gid://shopify/CustomerPaymentMethod/b7cc6e3267aace169e516ed48be72dff\",\n      \"billingPolicy\": {\n        \"minCycles\": 3,\n        \"maxCycles\": 12,\n        \"intervalCount\": 1,\n        \"interval\": \"MONTH\",\n        \"anchors\": [{\"type\"=>\"MONTHDAY\", \"day\"=>12}]\n      },\n      \"deliveryPolicy\": {\n        \"intervalCount\": 1,\n        \"interval\": \"MONTH\",\n        \"anchors\": [{\"type\"=>\"MONTHDAY\", \"day\"=>13}]\n      },\n      \"deliveryPrice\": 2.99,\n      \"deliveryMethod\": {\n        \"shipping\": {\n          \"address\": {\n            \"firstName\": \"Mont\",\n            \"lastName\": \"R\u00e9al\",\n            \"address1\": \"490 Rue De La Gaucheti\u00e8re O\",\n            \"country\": \"Canada\",\n            \"province\": \"Qu\u00e9bec\",\n            \"phone\": \"+16135551212\",\n            \"zip\": \"H2Z 0B3\",\n            \"city\": \"Montr\u00e9al\"\n          },\n          \"shippingOption\": {\n            \"title\": \"Subscription shipping\",\n            \"presentmentTitle\": \"Translated shipping for subscription\",\n            \"description\": \"5-7 Days\",\n            \"code\": \"GROUND\",\n            \"carrierServiceId\": null\n          }\n        }\n      }\n    }\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "subscriptionContractExpire", "description": "Expires a Subscription Contract.", "arguments": [{"name": "subscriptionContractId", "type": "ID!", "required": true, "description": "The ID of the Subscription Contract."}], "returns": [], "examples": []}, {"name": "subscriptionContractFail", "description": "Fails a Subscription Contract.", "arguments": [{"name": "subscriptionContractId", "type": "ID!", "required": true, "description": "The ID of the Subscription Contract."}], "returns": [], "examples": []}, {"name": "subscriptionContractPause", "description": "Pauses a Subscription Contract.", "arguments": [{"name": "subscriptionContractId", "type": "ID!", "required": true, "description": "The ID of the Subscription Contract."}], "returns": [], "examples": []}, {"name": "subscriptionContractProductChange", "description": "Allows for the easy change of a Product in a Contract or a Product price change.", "arguments": [{"name": "input", "type": "SubscriptionContractProductChangeInput!", "required": true, "description": "The properties of the Product changes."}], "returns": [], "examples": [{"description": "Update both product and price in a subscription contract", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation($contractId: ID!, $lineId: ID!, $variantId: ID!) {\n    subscriptionContractProductChange(subscriptionContractId: $contractId, lineId: $lineId, input: {productVariantId: $variantId, currentPrice: 500}) {\n      contract {\n        id\n        updatedAt\n      }\n      lineUpdated {\n        id\n        currentPrice {\n          amount\n        }\n        variantId\n      }\n      userErrors {\n        field\n        message\n        code\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"contractId\": \"gid://shopify/SubscriptionContract/593791907\",\n  \"lineId\": \"gid://shopify/SubscriptionLine/25476bfc-b794-4ff5-b41f-7a00eb252d55\",\n  \"variantId\": \"gid://shopify/ProductVariant/30322695\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "subscriptionContractProductChange reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation($contractId: ID!, $lineId: ID!, $variantId: ID!) {\n    subscriptionContractProductChange(subscriptionContractId: $contractId, lineId: $lineId, input: {productVariantId: $variantId, currentPrice: 500}) {\n      contract {\n        id\n        updatedAt\n      }\n      lineUpdated {\n        id\n        currentPrice {\n          amount\n        }\n        variantId\n      }\n      userErrors {\n        field\n        message\n        code\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"contractId\": \"gid://shopify/SubscriptionContract/593791907\",\n  \"lineId\": \"gid://shopify/SubscriptionLine/25476bfc-b794-4ff5-b41f-7a00eb252d55\",\n  \"variantId\": \"gid://shopify/ProductVariant/30322695\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "subscriptionContractSetNextBillingDate", "description": "Sets the next billing date of a Subscription Contract. This field is managed by the apps.\n        Alternatively you can utilize our\n        Billing Cycles APIs,\n        which provide auto-computed billing dates and additional functionalities.", "arguments": [{"name": "contractId", "type": "ID!", "required": true, "description": "The gid of the Subscription Contract to set the next billing date for."}], "returns": [], "examples": []}, {"name": "subscriptionContractUpdate", "description": "The subscriptionContractUpdate mutation allows you to create a draft of an existing subscription contract. This draft can be reviewed and modified as needed. Once the draft is committed with subscriptionDraftCommit, the changes are applied to the original subscription contract.", "arguments": [{"name": "contractId", "type": "ID!", "required": true, "description": "The gid of the Subscription Contract to update."}], "returns": [], "examples": []}, {"name": "subscriptionDraftCommit", "description": "Commits the updates of a Subscription Contract draft.", "arguments": [{"name": "draftId", "type": "ID!", "required": true, "description": "The gid of the Subscription Contract draft to commit."}], "returns": [], "examples": []}, {"name": "subscriptionDraftDiscountAdd", "description": "Adds a subscription discount to a subscription draft.", "arguments": [{"name": "draftId", "type": "ID!", "required": true, "description": "The ID of the Subscription Contract draft to add a subscription discount to."}], "returns": [], "examples": []}, {"name": "subscriptionDraftDiscountCodeApply", "description": "Applies a code discount on the subscription draft.", "arguments": [{"name": "draftId", "type": "ID!", "required": true, "description": "The gid of the subscription contract draft to apply a subscription code discount on."}], "returns": [], "examples": []}, {"name": "subscriptionDraftDiscountRemove", "description": "Removes a subscription discount from a subscription draft.", "arguments": [{"name": "discountId", "type": "ID!", "required": true, "description": "The gid of the subscription draft discount to remove."}], "returns": [], "examples": []}, {"name": "subscriptionDraftDiscountUpdate", "description": "Updates a subscription discount on a subscription draft.", "arguments": [{"name": "discountId", "type": "ID!", "required": true, "description": "The gid of the Subscription Discount to update."}], "returns": [], "examples": []}, {"name": "subscriptionDraftFreeShippingDiscountAdd", "description": "Adds a subscription free shipping discount to a subscription draft.", "arguments": [{"name": "draftId", "type": "ID!", "required": true, "description": "The ID of the subscription contract draft to add a subscription free shipping discount to."}], "returns": [], "examples": []}, {"name": "subscriptionDraftFreeShippingDiscountUpdate", "description": "Updates a subscription free shipping discount on a subscription draft.", "arguments": [{"name": "discountId", "type": "ID!", "required": true, "description": "The gid of the Subscription Discount to update."}], "returns": [], "examples": []}, {"name": "subscriptionDraftLineAdd", "description": "Adds a subscription line to a subscription draft.", "arguments": [{"name": "draftId", "type": "ID!", "required": true, "description": "The gid of the Subscription Contract draft to add a subscription line to."}], "returns": [], "examples": []}, {"name": "subscriptionDraftLineRemove", "description": "Removes a subscription line from a subscription draft.", "arguments": [{"name": "draftId", "type": "ID!", "required": true, "description": "The gid of the Subscription Contract draft to remove a subscription line from."}], "returns": [], "examples": []}, {"name": "subscriptionDraftLineUpdate", "description": "Updates a subscription line on a subscription draft.", "arguments": [{"name": "draftId", "type": "ID!", "required": true, "description": "The gid of the Subscription Contract draft to update a subscription line from."}], "returns": [], "examples": []}, {"name": "subscriptionDraftUpdate", "description": "Updates a Subscription Draft.", "arguments": [{"name": "draftId", "type": "ID!", "required": true, "description": "The gid of the Subscription Draft to update."}], "returns": [], "examples": []}, {"name": "transactionVoid", "description": "Trigger the voiding of an uncaptured authorization transaction.", "arguments": [{"name": "parentTransactionId", "type": "ID!", "required": true, "description": "An uncaptured authorization transaction."}], "returns": [], "examples": []}], "objects": [{"name": "AdditionalFee", "description": "The additional fees that have been applied to the order.", "fields_and_connections": [{"name": "id", "type": "ID!", "description": "A globally-unique ID.", "not_nullable": true}], "examples": []}, {"name": "AdditionalFeeSale", "description": "A sale associated with an additional fee charge.", "fields_and_connections": [{"name": "actionType", "type": "SaleActionType!", "description": "The type of order action that the sale represents.", "not_nullable": true}], "examples": []}, {"name": "AdjustmentSale", "description": "A sale associated with an order price adjustment.", "fields_and_connections": [{"name": "actionType", "type": "SaleActionType!", "description": "The type of order action that the sale represents.", "not_nullable": true}], "examples": []}, {"name": "Attribute", "description": "Represents a generic custom attribute, such as whether an order is a customer's first.", "fields_and_connections": [{"name": "key", "type": "String!", "description": "The key or name of the attribute. For example, \"customersFirstOrder\".", "not_nullable": true}], "examples": []}, {"name": "AutomaticDiscountApplication", "description": "Automatic discount applications capture the intentions of a discount that was automatically applied.", "fields_and_connections": [{"name": "allocationMethod", "type": "DiscountApplicationAllocationMethod!", "description": "The method by which the discount's value is applied to its entitled items.", "not_nullable": true}], "examples": []}, {"name": "CalculatedAutomaticDiscountApplication", "description": "A discount that is automatically applied to an order that is being edited.", "fields_and_connections": [{"name": "allocationMethod", "type": "DiscountApplicationAllocationMethod!", "description": "The method by which the discount's value is allocated to its entitled items.", "not_nullable": true}], "examples": []}, {"name": "CalculatedDiscountAllocation", "description": "An amount discounting the line that has been allocated by an associated discount application.", "fields_and_connections": [{"name": "allocatedAmountSet", "type": "MoneyBag!", "description": "The money amount that's allocated by the discount application in shop and presentment currencies.", "not_nullable": true}], "examples": []}, {"name": "CalculatedDiscountCodeApplication", "description": "A discount code that is applied to an order that is being edited.", "fields_and_connections": [{"name": "allocationMethod", "type": "DiscountApplicationAllocationMethod!", "description": "The method by which the discount's value is allocated to its entitled items.", "not_nullable": true}], "examples": []}, {"name": "CalculatedDraftOrder", "description": "The calculated fields for a draft order.", "fields_and_connections": [{"name": "acceptAutomaticDiscounts", "type": "Boolean", "description": "Whether or not to accept automatic discounts on the draft order during calculation.\nIf false, only discount codes and custom draft order discounts (see appliedDiscount) will be applied.\nIf true, eligible automatic discounts will be applied in addition to discount codes and custom draft order discounts.", "not_nullable": true}], "examples": []}, {"name": "CalculatedDraftOrderLineItem", "description": "The calculated line item for a draft order.", "fields_and_connections": [{"name": "appliedDiscount", "type": "DraftOrderAppliedDiscount", "description": "The custom applied discount.", "not_nullable": true}], "examples": []}, {"name": "CalculatedExchangeLineItem", "description": "A calculated exchange line item.", "fields_and_connections": [{"name": "calculatedDiscountAllocations", "type": "[CalculatedDiscountAllocation!]!", "description": "The discounts that have been allocated onto the line item by discount applications.", "not_nullable": true}], "examples": []}, {"name": "CalculatedLineItem", "description": "A line item involved in order editing that may be newly added or have new changes applied.", "fields_and_connections": [{"name": "calculatedDiscountAllocations", "type": "[CalculatedDiscountAllocation!]!", "description": "The discounts that have been allocated onto the line item by discount applications.", "not_nullable": true}], "examples": []}, {"name": "CalculatedManualDiscountApplication", "description": "Represents a discount that was manually created for an order that is being edited.", "fields_and_connections": [{"name": "allocationMethod", "type": "DiscountApplicationAllocationMethod!", "description": "The method by which the discount's value is allocated to its entitled items.", "not_nullable": true}], "examples": []}, {"name": "CalculatedOrder", "description": "An order with edits applied but not saved.", "fields_and_connections": [{"name": "addedDiscountApplications", "type": "CalculatedDiscountApplicationConnection!", "description": "Returns only the new discount applications being added to the order in the current edit.", "not_nullable": true}], "examples": []}, {"name": "CalculatedRestockingFee", "description": "The calculated costs of handling a return line item.\nTypically, this would cover the costs of inspecting, repackaging, and restocking the item.", "fields_and_connections": [{"name": "amountSet", "type": "MoneyBag!", "description": "The calculated amount of the return fee, in shop and presentment currencies.", "not_nullable": true}], "examples": []}, {"name": "CalculatedReturn", "description": "A calculated return.", "fields_and_connections": [{"name": "exchangeLineItems", "type": "[CalculatedExchangeLineItem!]!", "description": "A list of calculated exchange line items.", "not_nullable": true}], "examples": []}, {"name": "CalculatedReturnLineItem", "description": "A calculated return line item.", "fields_and_connections": [{"name": "fulfillmentLineItem", "type": "FulfillmentLineItem!", "description": "The fulfillment line item from which items are returned.", "not_nullable": true}], "examples": []}, {"name": "CalculatedReturnShippingFee", "description": "The calculated cost of the return shipping.", "fields_and_connections": [{"name": "amountSet", "type": "MoneyBag!", "description": "The calculated amount of the return fee, in shop and presentment currencies.", "not_nullable": true}], "examples": []}, {"name": "CalculatedScriptDiscountApplication", "description": "A discount created by a Shopify script for an order that is being edited.", "fields_and_connections": [{"name": "allocationMethod", "type": "DiscountApplicationAllocationMethod!", "description": "The method by which the discount's value is allocated to its entitled items.", "not_nullable": true}], "examples": []}, {"name": "CalculatedShippingLine", "description": "A shipping line item involved in order editing that may be newly added or have new changes applied.", "fields_and_connections": [{"name": "id", "type": "ID", "description": "A globally-unique ID.", "not_nullable": true}], "examples": []}, {"name": "CardPaymentDetails", "description": "Card payment details related to a transaction.", "fields_and_connections": [{"name": "avsResultCode", "type": "String", "description": "The response code from the address verification system (AVS). The code is always a single letter.", "not_nullable": false}], "examples": []}, {"name": "CashRoundingAdjustment", "description": "The rounding adjustment applied to total payment or refund received for an Order involving cash payments.", "fields_and_connections": [{"name": "paymentSet", "type": "MoneyBag!", "description": "The rounding adjustment that can be applied to totalReceived for an Order involving cash payments in shop and presentment currencies. Could be a positive or negative value. Value is 0 if there's no rounding, or for non-cash payments.", "not_nullable": true}], "examples": []}, {"name": "CurrencySetting", "description": "A setting for a presentment currency.", "fields_and_connections": [{"name": "currencyCode", "type": "CurrencyCode!", "description": "The currency's ISO code.", "not_nullable": true}], "examples": []}, {"name": "DiscountAllocation", "description": "An amount that's allocated to a line based on an associated discount application.", "fields_and_connections": [{"name": "allocatedAmountSet", "type": "MoneyBag!", "description": "The money amount that's allocated to a line based on the associated discount application in shop and presentment currencies.", "not_nullable": true}], "examples": []}, {"name": "DiscountCodeApplication", "description": "Discount code applications capture the intentions of a discount code at\nthe time that it is applied onto an order.\nDiscount applications don't represent the actual final amount discounted on a line (line item or shipping line). The actual amount discounted on a line is represented by the DiscountAllocation object.", "fields_and_connections": [{"name": "allocationMethod", "type": "DiscountApplicationAllocationMethod!", "description": "The method by which the discount's value is applied to its entitled items.", "not_nullable": true}], "examples": []}, {"name": "DraftOrder", "description": "An order that a merchant creates on behalf of a customer. Draft orders are useful for merchants that need to do the following tasks:\n\nCreate new orders for sales made by phone, in person, by chat, or elsewhere. When a merchant accepts payment for a draft order, an order is created.\nSend invoices to customers to pay with a secure checkout link.\nUse custom items to represent additional costs or products that aren't displayed in a shop's inventory.\nRe-create orders manually from active sales channels.\nSell products at discount or wholesale rates.\nTake pre-orders.\nSave an order as a draft and resume working on it later.\n\nFor draft orders in multiple currencies presentment_money is the source of truth for what a customer is going to be charged and shop_money is an estimate of what the merchant might receive in their shop currency.\nCaution: Only use this data if it's required for your app's functionality. Shopify will restrict access to scopes for apps that don't have a legitimate use for the associated data.\nDraft orders created on or after April 1, 2025 will be automatically purged after one year of inactivity.", "fields_and_connections": [{"name": "acceptAutomaticDiscounts", "type": "Boolean", "description": "Whether or not to accept automatic discounts on the draft order during calculation.\nIf false, only discount codes and custom draft order discounts (see appliedDiscount) will be applied.\nIf true, eligible automatic discounts will be applied in addition to discount codes and custom draft order discounts.", "not_nullable": true}], "examples": []}, {"name": "DraftOrderAppliedDiscount", "description": "The order-level discount applied to a draft order.", "fields_and_connections": [{"name": "amountSet", "type": "MoneyBag!", "description": "The amount of money discounted, with values shown in both shop currency and presentment currency.", "not_nullable": true}], "examples": []}, {"name": "DraftOrderBundleAddedWarning", "description": "A warning indicating that a bundle was added to a draft order.", "fields_and_connections": [{"name": "errorCode", "type": "String!", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "DraftOrderDiscountNotAppliedWarning", "description": "A warning indicating that a discount cannot be applied to a draft order.", "fields_and_connections": [{"name": "discountCode", "type": "String", "description": "The code of the discount that can't be applied.", "not_nullable": true}], "examples": []}, {"name": "DraftOrderLineItem", "description": "The line item for a draft order.", "fields_and_connections": [{"name": "appliedDiscount", "type": "DraftOrderAppliedDiscount", "description": "The custom applied discount.", "not_nullable": true}], "examples": []}, {"name": "DraftOrderPlatformDiscount", "description": "The platform discounts applied to the draft order.", "fields_and_connections": [{"name": "allocations", "type": "[DraftOrderPlatformDiscountAllocation!]!", "description": "Price reduction allocations across the draft order's lines.", "not_nullable": true}], "examples": []}, {"name": "DraftOrderPlatformDiscountAllocation", "description": "Price reduction allocations across the draft order's lines.", "fields_and_connections": [{"name": "id", "type": "ID", "description": "The ID of the allocation.", "not_nullable": true}], "examples": []}, {"name": "DraftOrderTag", "description": "Represents a draft order tag.", "fields_and_connections": [{"name": "handle", "type": "String!", "description": "Handle of draft order tag.", "not_nullable": true}], "examples": []}, {"name": "Duty", "description": "The duty details for a line item.", "fields_and_connections": [{"name": "countryCodeOfOrigin", "type": "CountryCode", "description": "The ISO 3166-1 alpha-2 country code of the country of origin used in calculating the duty.", "not_nullable": true}], "examples": []}, {"name": "DutySale", "description": "A sale associated with a duty charge.", "fields_and_connections": [{"name": "actionType", "type": "SaleActionType!", "description": "The type of order action that the sale represents.", "not_nullable": true}], "examples": []}, {"name": "ExchangeLineItem", "description": "An item for exchange.", "fields_and_connections": [{"name": "id", "type": "ID!", "description": "A globally-unique ID.", "not_nullable": true}], "examples": []}, {"name": "FeeSale", "description": "A sale associated with a fee.", "fields_and_connections": [{"name": "actionType", "type": "SaleActionType!", "description": "The type of order action that the sale represents.", "not_nullable": true}], "examples": []}, {"name": "GiftCardSale", "description": "A sale associated with a gift card.", "fields_and_connections": [{"name": "actionType", "type": "SaleActionType!", "description": "The type of order action that the sale represents.", "not_nullable": true}], "examples": []}, {"name": "LineItem", "description": "Represents individual products and quantities purchased in the associated order.", "fields_and_connections": [{"name": "contract", "type": "SubscriptionContract", "description": "The subscription contract associated with this line item.", "not_nullable": true}], "examples": []}, {"name": "LineItemGroup", "description": "A line item group (bundle) to which a line item belongs to.", "fields_and_connections": [{"name": "customAttributes", "type": "[Attribute!]!", "description": "A list of attributes that represent custom features or special requests.", "not_nullable": true}], "examples": []}, {"name": "LineItemSellingPlan", "description": "Represents the selling plan for a line item.", "fields_and_connections": [{"name": "name", "type": "String!", "description": "The name of the selling plan for display purposes.", "not_nullable": true}], "examples": []}, {"name": "LocalPaymentMethodsPaymentDetails", "description": "Local payment methods payment details related to a transaction.", "fields_and_connections": [{"name": "paymentDescriptor", "type": "String", "description": "The descriptor by the payment provider. Only available for Amazon Pay and Buy with Prime.", "not_nullable": false}], "examples": []}, {"name": "ManualDiscountApplication", "description": "Manual discount applications capture the intentions of a discount that was manually created for an order.\nDiscount applications don't represent the actual final amount discounted on a line (line item or shipping line). The actual amount discounted on a line is represented by the DiscountAllocation object.", "fields_and_connections": [{"name": "allocationMethod", "type": "DiscountApplicationAllocationMethod!", "description": "The method by which the discount's value is applied to its entitled items.", "not_nullable": true}], "examples": []}, {"name": "Order", "description": "An order is a customer's request to purchase one or more products from a shop. You can retrieve and update orders using the Order object.\nLearn more about\nediting an existing order with the GraphQL Admin API.\nOnly the last 60 days' worth of orders from a store are accessible from the Order object by default. If you want to access older orders,\nthen you need to request access to all orders. If your app is granted\naccess, then you can add the read_all_orders scope to your app along with read_orders or write_orders.\nPrivate apps are not affected by this change and are automatically granted the scope.\nCaution: Only use this data if it's required for your app's functionality. Shopify will restrict access to scopes for apps that don't have a legitimate use for the associated data.", "fields_and_connections": [{"name": "additionalFees", "type": "[AdditionalFee!]!", "description": "A list of additional fees applied to the order.", "not_nullable": true}], "examples": []}, {"name": "OrderAdjustment", "description": "An order adjustment accounts for the difference between a calculated and actual refund amount.", "fields_and_connections": [{"name": "amountSet", "type": "MoneyBag!", "description": "The amount of the order adjustment in shop and presentment currencies.", "not_nullable": true}], "examples": []}, {"name": "OrderAgreement", "description": "An agreement associated with an order placement.", "fields_and_connections": [{"name": "app", "type": "App", "description": "The application that created the agreement.", "not_nullable": true}], "examples": []}, {"name": "OrderApp", "description": "The application that created the order.", "fields_and_connections": [{"name": "icon", "type": "Image!", "description": "The application icon.", "not_nullable": true}], "examples": []}, {"name": "OrderCancellation", "description": "Details about the order cancellation.", "fields_and_connections": [{"name": "staffNote", "type": "String", "description": "Staff provided note for the order cancellation.", "not_nullable": false}], "examples": []}, {"name": "OrderCreateManualPaymentOrderCreateManualPaymentError", "description": "An error that occurs during the execution of a order create manual payment mutation.", "fields_and_connections": [{"name": "code", "type": "OrderCreateManualPaymentOrderCreateManualPaymentErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "OrderEditAgreement", "description": "An agreement associated with an edit to the order.", "fields_and_connections": [{"name": "app", "type": "App", "description": "The application that created the agreement.", "not_nullable": true}], "examples": []}, {"name": "OrderPaymentCollectionDetails", "description": "The payment collection details for an order that requires additional payment following an edit to the order.", "fields_and_connections": [{"name": "additionalPaymentCollectionUrl", "type": "URL", "description": "The URL to use for collecting an additional payment on the order.", "not_nullable": false}], "examples": []}, {"name": "OrderRisk", "description": "Represents a fraud check on an order. This object is deprecated in favor of OrderRiskAssessment and its enhanced capabilities.", "fields_and_connections": [{"name": "display", "type": "Boolean!", "description": "Whether the risk level is shown in the Shopify admin. If false, then this order risk is ignored when Shopify determines the overall risk level for the order.", "not_nullable": true}], "examples": []}, {"name": "OrderRiskAssessment", "description": "The risk assessments for an order.\nSee the example query \"Retrieves a list of all order risks for an order\".", "fields_and_connections": [{"name": "facts", "type": "[RiskFact!]!", "description": "Optional facts used to describe the risk assessment. The values in here are specific to the provider.\nSee the examples for the mutation orderRiskAssessmentCreate.", "not_nullable": true}], "examples": []}, {"name": "OrderRiskSummary", "description": "Summary of risk characteristics for an order.\nSee the example query \"Retrieves a list of all order risks for an order\".", "fields_and_connections": [{"name": "assessments", "type": "[OrderRiskAssessment!]!", "description": "The list of risk assessments for the order.", "not_nullable": true}], "examples": []}, {"name": "OrderStagedChangeAddCustomItem", "description": "A change to the order representing the addition of a\ncustom line item. For example, you might want to add gift wrapping service\nas a custom line item.", "fields_and_connections": [{"name": "originalUnitPrice", "type": "MoneyV2!", "description": "The price of an individual item without any discounts applied. This value can't be negative.", "not_nullable": true}], "examples": []}, {"name": "OrderStagedChangeAddLineItemDiscount", "description": "The discount applied to an item that was added during the current order edit.", "fields_and_connections": [{"name": "description", "type": "String!", "description": "The description of the discount.", "not_nullable": true}], "examples": []}, {"name": "OrderStagedChangeAddShippingLine", "description": "A new shipping line\nadded as part of an order edit.", "fields_and_connections": [{"name": "phone", "type": "String", "description": "The phone number at the shipping address.", "not_nullable": true}], "examples": []}, {"name": "OrderStagedChangeAddVariant", "description": "A change to the order representing the addition of an existing product variant.", "fields_and_connections": [{"name": "quantity", "type": "Int!", "description": "The quantity of the product variant that was added.", "not_nullable": true}], "examples": []}, {"name": "OrderStagedChangeDecrementItem", "description": "An removal of items from an existing line item on the order.", "fields_and_connections": [{"name": "delta", "type": "Int!", "description": "The number of items removed.", "not_nullable": true}], "examples": []}, {"name": "OrderStagedChangeIncrementItem", "description": "An addition of items to an existing line item on the order.", "fields_and_connections": [{"name": "delta", "type": "Int!", "description": "The number of items added.", "not_nullable": true}], "examples": []}, {"name": "OrderStagedChangeRemoveShippingLine", "description": "A shipping line removed during an order edit.", "fields_and_connections": [{"name": "shippingLine", "type": "ShippingLine!", "description": "The removed shipping line.", "not_nullable": true}], "examples": []}, {"name": "OrderTransaction", "description": "A payment transaction in the context of an order.", "fields_and_connections": [{"name": "accountNumber", "type": "String", "description": "The masked account number associated with the payment method.", "not_nullable": true}], "examples": []}, {"name": "PaymentSettings", "description": "Settings related to payments.", "fields_and_connections": [{"name": "supportedDigitalWallets", "type": "[DigitalWallet!]!", "description": "List of the digital wallets which the shop supports.", "not_nullable": true}], "examples": []}, {"name": "ProductSale", "description": "A sale associated with a product.", "fields_and_connections": [{"name": "actionType", "type": "SaleActionType!", "description": "The type of order action that the sale represents.", "not_nullable": true}], "examples": []}, {"name": "Refund", "description": "The record of the line items and transactions that were refunded to a customer, along with restocking instructions for refunded line items.", "fields_and_connections": [{"name": "createdAt", "type": "DateTime", "description": "The date and time when the refund was created.", "not_nullable": true}], "examples": []}, {"name": "RefundAgreement", "description": "An agreement between the merchant and customer to refund all or a portion of the order.", "fields_and_connections": [{"name": "app", "type": "App", "description": "The application that created the agreement.", "not_nullable": true}], "examples": []}, {"name": "RefundDuty", "description": "Represents a refunded duty.", "fields_and_connections": [{"name": "amountSet", "type": "MoneyBag!", "description": "The amount of a refunded duty in shop and presentment currencies.", "not_nullable": true}], "examples": []}, {"name": "RefundLineItem", "description": "A line item that's included in a refund.", "fields_and_connections": [{"name": "id", "type": "ID", "description": "A globally-unique ID.", "not_nullable": true}], "examples": []}, {"name": "RefundShippingLine", "description": "A shipping line item that's included in a refund.", "fields_and_connections": [{"name": "id", "type": "ID!", "description": "A globally-unique ID.", "not_nullable": true}], "examples": []}, {"name": "RestockingFee", "description": "A restocking fee is a fee captured as part of a return to cover the costs of handling a return line item.\nTypically, this would cover the costs of inspecting, repackaging, and restocking the item.", "fields_and_connections": [{"name": "amountSet", "type": "MoneyBag!", "description": "The amount of the restocking fee, in shop and presentment currencies.", "not_nullable": true}], "examples": []}, {"name": "Return", "description": "Represents a return.", "fields_and_connections": [{"name": "decline", "type": "ReturnDecline", "description": "Additional information about the declined return.", "not_nullable": true}], "examples": []}, {"name": "ReturnableFulfillment", "description": "A returnable fulfillment, which is an order that has been delivered\nand is eligible to be returned to the merchant.", "fields_and_connections": [{"name": "fulfillment", "type": "Fulfillment!", "description": "The fulfillment that the returnable fulfillment refers to.", "not_nullable": true}], "examples": []}, {"name": "ReturnableFulfillmentLineItem", "description": "A returnable fulfillment line item.", "fields_and_connections": [{"name": "fulfillmentLineItem", "type": "FulfillmentLineItem!", "description": "The fulfillment line item that can be returned.", "not_nullable": true}], "examples": []}, {"name": "ReturnAgreement", "description": "An agreement between the merchant and customer for a return.", "fields_and_connections": [{"name": "app", "type": "App", "description": "The application that created the agreement.", "not_nullable": true}], "examples": []}, {"name": "ReturnDecline", "description": "Additional information about why a merchant declined the customer's return request.", "fields_and_connections": [{"name": "note", "type": "String", "description": "The notification message sent to the customer about their declined return request.\nMaximum length: 500 characters.", "not_nullable": true}], "examples": []}, {"name": "ReturnLineItem", "description": "A return line item.", "fields_and_connections": [{"name": "customerNote", "type": "String", "description": "A note from the customer that describes the item to be returned. Maximum length: 300 characters.", "not_nullable": true}], "examples": []}, {"name": "ReturnShippingFee", "description": "A return shipping fee is a fee captured as part of a return to cover the costs of shipping the return.", "fields_and_connections": [{"name": "amountSet", "type": "MoneyBag!", "description": "The amount of the return shipping fee, in shop and presentment currencies.", "not_nullable": true}], "examples": []}, {"name": "ReverseDelivery", "description": "A reverse delivery is a post-fulfillment object that represents a buyer sending a package to a merchant.\nFor example, a buyer requests a return, and a merchant sends the buyer a shipping label.\nThe reverse delivery contains the context of the items sent back, how they're being sent back\n(for example, a shipping label), and the current state of the delivery (tracking information).", "fields_and_connections": [{"name": "deliverable", "type": "ReverseDeliveryDeliverable", "description": "The deliverable associated with the reverse delivery.", "not_nullable": true}], "examples": []}, {"name": "ReverseDeliveryLabelV2", "description": "The return label file information for a reverse delivery.", "fields_and_connections": [{"name": "createdAt", "type": "DateTime!", "description": "The date and time when the reverse delivery label was created.", "not_nullable": true}], "examples": []}, {"name": "ReverseDeliveryLineItem", "description": "The details about a reverse delivery line item.", "fields_and_connections": [{"name": "dispositions", "type": "[ReverseFulfillmentOrderDisposition!]!", "description": "The dispositions of the item.", "not_nullable": true}], "examples": []}, {"name": "ReverseDeliveryShippingDeliverable", "description": "A reverse shipping deliverable that may include a label and tracking information.", "fields_and_connections": [{"name": "label", "type": "ReverseDeliveryLabelV2", "description": "The return label attached to the reverse delivery.", "not_nullable": false}], "examples": []}, {"name": "ReverseDeliveryTrackingV2", "description": "Represents the information used to track a reverse delivery.", "fields_and_connections": [{"name": "carrierName", "type": "String", "description": "The provider of the tracking information, in a human-readable format for display purposes.", "not_nullable": false}], "examples": []}, {"name": "ReverseFulfillmentOrder", "description": "A group of one or more items in a return that will be processed at a fulfillment service.\nThere can be more than one reverse fulfillment order for a return at a given location.", "fields_and_connections": [{"name": "id", "type": "ID!", "description": "A globally-unique ID.", "not_nullable": true}], "examples": []}, {"name": "ReverseFulfillmentOrderDisposition", "description": "The details of the arrangement of an item.", "fields_and_connections": [{"name": "id", "type": "ID!", "description": "A globally-unique ID.", "not_nullable": true}], "examples": []}, {"name": "ReverseFulfillmentOrderLineItem", "description": "The details about a reverse fulfillment order line item.", "fields_and_connections": [{"name": "dispositions", "type": "[ReverseFulfillmentOrderDisposition!]!", "description": "The dispositions of the item.", "not_nullable": true}], "examples": []}, {"name": "ReverseFulfillmentOrderThirdPartyConfirmation", "description": "The third-party confirmation of a reverse fulfillment order.", "fields_and_connections": [{"name": "status", "type": "ReverseFulfillmentOrderThirdPartyConfirmationStatus!", "description": "The status of the reverse fulfillment order third-party confirmation.", "not_nullable": true}], "examples": []}, {"name": "RiskFact", "description": "A risk fact belongs to a single risk assessment and serves to provide additional context for an assessment. Risk facts are not necessarily tied to the result of the recommendation.", "fields_and_connections": [{"name": "description", "type": "String!", "description": "A description of the fact.", "not_nullable": true}], "examples": []}, {"name": "SaleAdditionalFee", "description": "The additional fee details for a line item.", "fields_and_connections": [{"name": "id", "type": "ID!", "description": "A globally-unique ID.", "not_nullable": true}], "examples": []}, {"name": "SaleTax", "description": "The tax allocated to a sale from a single tax line.", "fields_and_connections": [{"name": "amount", "type": "MoneyBag!", "description": "The portion of the total tax amount on the related sale that comes from the associated tax line.", "not_nullable": true}], "examples": []}, {"name": "ScriptDiscountApplication", "description": "Script discount applications capture the intentions of a discount that\nwas created by a Shopify Script for an order's line item or shipping line.\nDiscount applications don't represent the actual final amount discounted on a line (line item or shipping line). The actual amount discounted on a line is represented by the DiscountAllocation object.", "fields_and_connections": [{"name": "allocationMethod", "type": "DiscountApplicationAllocationMethod!", "description": "The method by which the discount's value is applied to its entitled items.", "not_nullable": true}], "examples": []}, {"name": "ShippingLine", "description": "Represents the shipping details that the customer chose for their order.", "fields_and_connections": [{"name": "carrierIdentifier", "type": "String", "description": "A reference to the carrier service that provided the rate.\nPresent when the rate was computed by a third-party carrier service.", "not_nullable": true}], "examples": []}, {"name": "ShippingLineSale", "description": "A sale associated with a shipping charge.", "fields_and_connections": [{"name": "actionType", "type": "SaleActionType!", "description": "The type of order action that the sale represents.", "not_nullable": true}], "examples": []}, {"name": "ShippingRefund", "description": "Represents the shipping costs refunded on the Refund.", "fields_and_connections": [{"name": "amountSet", "type": "MoneyBag!", "description": "The monetary value of the shipping fees to be refunded in shop and presentment currencies.", "not_nullable": true}], "examples": []}, {"name": "ShopifyPaymentsExtendedAuthorization", "description": "Presents all Shopify Payments information related to an extended authorization.", "fields_and_connections": [{"name": "extendedAuthorizationExpiresAt", "type": "DateTime!", "description": "The time after which the extended authorization expires. After the expiry, the merchant is unable to capture the payment.", "not_nullable": true}], "examples": []}, {"name": "ShopifyPaymentsRefundSet", "description": "Presents all Shopify Payments specific information related to an order refund.", "fields_and_connections": [{"name": "acquirerReferenceNumber", "type": "String", "description": "The acquirer reference number (ARN) code generated for Visa/Mastercard transactions.", "not_nullable": false}], "examples": []}, {"name": "ShopifyPaymentsTransactionSet", "description": "Presents all Shopify Payments specific information related to an order transaction.", "fields_and_connections": [{"name": "extendedAuthorizationSet", "type": "ShopifyPaymentsExtendedAuthorization", "description": "Contains all fields related to an extended authorization.", "not_nullable": false}], "examples": []}, {"name": "ShopifyProtectOrderEligibility", "description": "The eligibility details of an order's protection against fraudulent chargebacks by Shopify Protect.", "fields_and_connections": [{"name": "status", "type": "ShopifyProtectEligibilityStatus!", "description": "The status of whether an order is eligible for protection against fraudulent chargebacks.", "not_nullable": true}], "examples": []}, {"name": "ShopifyProtectOrderSummary", "description": "A summary of Shopify Protect details for an order.", "fields_and_connections": [{"name": "eligibility", "type": "ShopifyProtectOrderEligibility!", "description": "The eligibility details of an order's protection against fraudulent chargebacks.", "not_nullable": true}], "examples": []}, {"name": "ShopPayInstallmentsPaymentDetails", "description": "Shop Pay Installments payment details related to a transaction.", "fields_and_connections": [{"name": "paymentMethodName", "type": "String", "description": "The name of payment method used by the buyer.", "not_nullable": false}], "examples": []}, {"name": "SubscriptionAppliedCodeDiscount", "description": "Represents an applied code discount.", "fields_and_connections": [{"name": "id", "type": "ID!", "description": "The unique ID.", "not_nullable": true}], "examples": []}, {"name": "SubscriptionBillingAttempt", "description": "A record of an execution of the subscription billing process. Billing attempts use\nidempotency keys to avoid duplicate order creation. A successful billing attempt\nwill create an order.", "fields_and_connections": [{"name": "completedAt", "type": "DateTime", "description": "The date and time when the billing attempt was completed.", "not_nullable": true}], "examples": []}, {"name": "SubscriptionBillingAttemptGenericError", "description": "A base error type that applies to all uncategorized error classes.", "fields_and_connections": [{"name": "code", "type": "SubscriptionBillingAttemptErrorCode!", "description": "The code for the error.", "not_nullable": true}], "examples": []}, {"name": "SubscriptionBillingAttemptInsufficientStockProductVariantsError", "description": "An inventory error caused by an issue with one or more of the contract merchandise lines.", "fields_and_connections": [{"name": "code", "type": "SubscriptionBillingAttemptErrorCode!", "description": "The code for the error.", "not_nullable": true}], "examples": []}, {"name": "SubscriptionBillingAttemptOutOfStockProductVariantsError", "description": "An inventory error caused by an issue with one or more of the contract merchandise lines.", "fields_and_connections": [{"name": "code", "type": "SubscriptionBillingAttemptErrorCode!", "description": "The code for the error.", "not_nullable": true}], "examples": []}, {"name": "SubscriptionBillingCycle", "description": "A subscription billing cycle.", "fields_and_connections": [{"name": "billingAttemptExpectedDate", "type": "DateTime!", "description": "The date on which the billing attempt is expected to be made.", "not_nullable": true}], "examples": []}, {"name": "SubscriptionBillingCycleEditedContract", "description": "Represents a subscription contract with billing cycles.", "fields_and_connections": [{"name": "app", "type": "App", "description": "The subscription app that the subscription contract is registered to.", "not_nullable": true}], "examples": []}, {"name": "SubscriptionBillingPolicy", "description": "Represents a Subscription Billing Policy.", "fields_and_connections": [{"name": "anchors", "type": "[SellingPlanAnchor!]!", "description": "Specific anchor dates upon which the billing interval calculations should be made.", "not_nullable": true}], "examples": []}, {"name": "SubscriptionContract", "description": "Represents a Subscription Contract.", "fields_and_connections": [{"name": "app", "type": "App", "description": "The subscription app that the subscription contract is registered to.", "not_nullable": true}], "examples": []}, {"name": "SubscriptionCyclePriceAdjustment", "description": "Represents a Subscription Line Pricing Cycle Adjustment.", "fields_and_connections": [{"name": "adjustmentType", "type": "SellingPlanPricingPolicyAdjustmentType!", "description": "Price adjustment type.", "not_nullable": true}], "examples": []}, {"name": "SubscriptionDeliveryMethodLocalDelivery", "description": "A subscription delivery method for local delivery.\nThe other subscription delivery methods can be found in the SubscriptionDeliveryMethod union type.", "fields_and_connections": [{"name": "address", "type": "SubscriptionMailingAddress!", "description": "The address to deliver to.", "not_nullable": true}], "examples": []}, {"name": "SubscriptionDeliveryMethodLocalDeliveryOption", "description": "The selected delivery option on a subscription contract.", "fields_and_connections": [{"name": "code", "type": "String", "description": "A custom reference to the delivery method for use with automations.", "not_nullable": true}], "examples": []}, {"name": "SubscriptionDeliveryMethodPickup", "description": "A delivery method with a pickup option.", "fields_and_connections": [{"name": "pickupOption", "type": "SubscriptionDeliveryMethodPickupOption!", "description": "The details of the pickup delivery method to use.", "not_nullable": true}], "examples": []}, {"name": "SubscriptionDeliveryMethodPickupOption", "description": "Represents the selected pickup option on a subscription contract.", "fields_and_connections": [{"name": "code", "type": "String", "description": "A custom reference to the delivery method for use with automations.", "not_nullable": true}], "examples": []}, {"name": "SubscriptionDeliveryMethodShipping", "description": "Represents a shipping delivery method: a mailing address and a shipping option.", "fields_and_connections": [{"name": "address", "type": "SubscriptionMailingAddress!", "description": "The address to ship to.", "not_nullable": true}], "examples": []}, {"name": "SubscriptionDeliveryMethodShippingOption", "description": "Represents the selected shipping option on a subscription contract.", "fields_and_connections": [{"name": "code", "type": "String", "description": "The code of the shipping option.", "not_nullable": false}], "examples": []}, {"name": "SubscriptionDeliveryOptionResultFailure", "description": "A failure to find the available delivery options for a subscription contract.", "fields_and_connections": [{"name": "message", "type": "String", "description": "The reason for the failure.", "not_nullable": false}], "examples": []}, {"name": "SubscriptionDeliveryOptionResultSuccess", "description": "The delivery option for a subscription contract.", "fields_and_connections": [{"name": "deliveryOptions", "type": "[SubscriptionDeliveryOption!]!", "description": "The available delivery options.", "not_nullable": true}], "examples": []}, {"name": "SubscriptionDeliveryPolicy", "description": "Represents a Subscription Delivery Policy.", "fields_and_connections": [{"name": "anchors", "type": "[SellingPlanAnchor!]!", "description": "The specific anchor dates upon which the delivery interval calculations should be made.", "not_nullable": true}], "examples": []}, {"name": "SubscriptionDiscountAllocation", "description": "Represents what a particular discount reduces from a line price.", "fields_and_connections": [{"name": "amount", "type": "MoneyV2!", "description": "Allocation amount.", "not_nullable": true}], "examples": []}, {"name": "SubscriptionDiscountEntitledLines", "description": "Represents the subscription lines the discount applies on.", "fields_and_connections": [{"name": "all", "type": "Boolean!", "description": "Specify whether the subscription discount will apply on all subscription lines.", "not_nullable": true}], "examples": []}, {"name": "SubscriptionDiscountFixedAmountValue", "description": "The value of the discount and how it will be applied.", "fields_and_connections": [{"name": "amount", "type": "MoneyV2!", "description": "The fixed amount value of the discount.", "not_nullable": true}], "examples": []}, {"name": "SubscriptionDiscountPercentageValue", "description": "The percentage value of the discount.", "fields_and_connections": [{"name": "percentage", "type": "Int!", "description": "The percentage value of the discount.", "not_nullable": true}], "examples": []}, {"name": "SubscriptionDraft", "description": "Represents a Subscription Draft.", "fields_and_connections": [{"name": "billingCycle", "type": "SubscriptionBillingCycle", "description": "The billing cycle that the subscription contract will be associated with.", "not_nullable": true}], "examples": []}, {"name": "SubscriptionLine", "description": "Represents a Subscription Line.", "fields_and_connections": [{"name": "concatenatedOriginContract", "type": "SubscriptionContract", "description": "The origin contract of the line if it was concatenated from another contract.", "not_nullable": true}], "examples": []}, {"name": "SubscriptionLocalDeliveryOption", "description": "A local delivery option for a subscription contract.", "fields_and_connections": [{"name": "code", "type": "String!", "description": "The code of the local delivery option.", "not_nullable": true}], "examples": []}, {"name": "SubscriptionMailingAddress", "description": "Represents a Mailing Address on a Subscription.", "fields_and_connections": [{"name": "address1", "type": "String", "description": "The first line of the address. Typically the street address or PO Box number.", "not_nullable": false}], "examples": []}, {"name": "SubscriptionManualDiscount", "description": "Custom subscription discount.", "fields_and_connections": [{"name": "entitledLines", "type": "SubscriptionDiscountEntitledLines!", "description": "Entitled line items used to apply the subscription discount on.", "not_nullable": true}], "examples": []}, {"name": "SubscriptionPickupOption", "description": "A pickup option to deliver a subscription contract.", "fields_and_connections": [{"name": "code", "type": "String!", "description": "The code of the pickup option.", "not_nullable": true}], "examples": []}, {"name": "SubscriptionPricingPolicy", "description": "Represents a Subscription Line Pricing Policy.", "fields_and_connections": [{"name": "basePrice", "type": "MoneyV2!", "description": "The base price per unit for the subscription line in the contract's currency.", "not_nullable": true}], "examples": []}, {"name": "SubscriptionShippingOption", "description": "A shipping option to deliver a subscription contract.", "fields_and_connections": [{"name": "code", "type": "String!", "description": "The code of the shipping option.", "not_nullable": true}], "examples": []}, {"name": "SubscriptionShippingOptionResultFailure", "description": "Failure determining available shipping options for delivery of a subscription contract.", "fields_and_connections": [{"name": "message", "type": "String", "description": "Failure reason.", "not_nullable": false}], "examples": []}, {"name": "SubscriptionShippingOptionResultSuccess", "description": "A shipping option for delivery of a subscription contract.", "fields_and_connections": [{"name": "shippingOptions", "type": "[SubscriptionShippingOption!]!", "description": "Available shipping options.", "not_nullable": true}], "examples": []}, {"name": "SuggestedOrderTransaction", "description": "A suggested transaction. Suggested transaction are usually used in the context of refunds\nand exchanges.", "fields_and_connections": [{"name": "accountNumber", "type": "String", "description": "The masked account number associated with the payment method.", "not_nullable": true}], "examples": []}, {"name": "SuggestedRefund", "description": "Represents a refund suggested by Shopify based on the items being reimbursed. You can then use the suggested refund object to generate an actual refund.", "fields_and_connections": [{"name": "amountSet", "type": "MoneyBag!", "description": "The total monetary value to be refunded in shop and presentment currencies.", "not_nullable": true}], "examples": []}, {"name": "SuggestedReturnRefund", "description": "Represents a return refund suggested by Shopify based on the items being reimbursed. You can then use the suggested refund object to generate an actual refund for the return.", "fields_and_connections": [{"name": "amount", "type": "MoneyBag!", "description": "The total monetary value to be refunded in shop and presentment currencies.", "not_nullable": true}], "examples": []}, {"name": "TaxLine", "description": "Represents a single tax applied to the associated line item.", "fields_and_connections": [{"name": "channelLiable", "type": "Boolean", "description": "Whether the channel that submitted the tax line is liable for remitting. A value of null indicates unknown liability for this tax line.", "not_nullable": true}], "examples": []}, {"name": "TenderTransaction", "description": "A TenderTransaction represents a transaction with financial impact on a shop's balance sheet. A tender transaction always\nrepresents actual money movement between a buyer and a shop. TenderTransactions can be used instead of OrderTransactions\nfor reconciling a shop's cash flow. A TenderTransaction is immutable once created.", "fields_and_connections": [{"name": "amount", "type": "MoneyV2!", "description": "The amount and currency of the tender transaction.", "not_nullable": true}], "examples": []}, {"name": "TenderTransactionCreditCardDetails", "description": "Information about the credit card used for this transaction.", "fields_and_connections": [{"name": "creditCardCompany", "type": "String", "description": "The name of the company that issued the customer's credit card. Example: Visa.", "not_nullable": false}], "examples": []}, {"name": "TipSale", "description": "A sale associated with a tip.", "fields_and_connections": [{"name": "actionType", "type": "SaleActionType!", "description": "The type of order action that the sale represents.", "not_nullable": true}], "examples": []}, {"name": "TransactionFee", "description": "Transaction fee related to an order transaction.", "fields_and_connections": [{"name": "amount", "type": "MoneyV2!", "description": "Amount of the fee.", "not_nullable": true}], "examples": []}, {"name": "UnknownSale", "description": "This is represents new sale types that have been added in future API versions. You may update to a more recent API version to receive additional details about this sale.", "fields_and_connections": [{"name": "actionType", "type": "SaleActionType!", "description": "The type of order action that the sale represents.", "not_nullable": true}], "examples": []}, {"name": "UnverifiedReturnLineItem", "description": "An unverified return line item.", "fields_and_connections": [{"name": "customerNote", "type": "String", "description": "A note from the customer that describes the item to be returned. Maximum length: 300 characters.", "not_nullable": true}], "examples": []}]}, {"name": "Privacy", "queries": [{"name": "consentPolicy", "description": "Returns the customer privacy consent policies of a shop.", "arguments": [{"name": "consentRequired", "type": "Boolean", "required": true, "description": "Return policies where consent is required or not."}], "returns": [], "examples": []}, {"name": "consentPolicyRegions", "description": "List of countries and regions for which consent policies can be created or updated.", "arguments": [{"name": "ConsentPolicyRegion", "type": "[ConsentPolicyRegion!]!", "required": false, "description": "A country or region code."}], "returns": [], "examples": []}, {"name": "privacySettings", "description": "Privacy related settings for a shop.", "arguments": [{"name": "PrivacySettings", "type": "PrivacySettings!", "required": false, "description": "A shop's privacy settings."}], "returns": [], "examples": []}], "mutations": [{"name": "consentPolicyUpdate", "description": "Update or create consent policies in bulk.", "arguments": [{"name": "consentPolicies", "type": "[ConsentPolicyInput!]!", "required": true, "description": "The consent policies to update or create. If the country and region matches an existing consent policy, then the consent policy is updated. Otherwise, a new consent policy is created."}], "returns": [], "examples": []}, {"name": "dataSaleOptOut", "description": "Opt out a customer from data sale.", "arguments": [{"name": "email", "type": "String!", "required": true, "description": "The email address of the customer to opt out of data sale."}], "returns": [], "examples": []}, {"name": "privacyFeaturesDisable", "description": "Disable a shop's privacy features.", "arguments": [{"name": "featuresToDisable", "type": "[PrivacyFeaturesEnum!]!", "required": true, "description": "The list of privacy features to disable."}], "returns": [], "examples": []}], "objects": [{"name": "ConsentPolicy", "description": "A consent policy describes the level of consent that the merchant requires from the user before actually\ncollecting and processing the data.", "fields_and_connections": [{"name": "consentRequired", "type": "Boolean", "description": "Whether consent is required for the region.", "not_nullable": true}], "examples": []}, {"name": "ConsentPolicyError", "description": "The errors encountered while performing mutations on consent policies.", "fields_and_connections": [{"name": "code", "type": "ConsentPolicyErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "ConsentPolicyRegion", "description": "A country or region code.", "fields_and_connections": [{"name": "countryCode", "type": "PrivacyCountryCode", "description": "The ISO 3166 country code for which the policy applies.", "not_nullable": false}], "examples": []}, {"name": "CookieBanner", "description": "A shop's banner settings.", "fields_and_connections": [{"name": "autoManaged", "type": "Boolean!", "description": "Indicates if the banner is auto managed.", "not_nullable": true}], "examples": []}, {"name": "DataSaleOptOutPage", "description": "A shop's data sale opt out page.", "fields_and_connections": [{"name": "autoManaged", "type": "Boolean!", "description": "If the data sale opt out page is auto managed.", "not_nullable": true}], "examples": []}, {"name": "PrivacyPolicy", "description": "A shop's privacy policy settings.", "fields_and_connections": [{"name": "autoManaged", "type": "Boolean!", "description": "Whether the policy is auto managed.", "not_nullable": true}], "examples": []}, {"name": "PrivacySettings", "description": "A shop's privacy settings.", "fields_and_connections": [{"name": "banner", "type": "CookieBanner", "description": "Banner customizations for the 'cookie banner'.", "not_nullable": false}], "examples": []}]}, {"name": "Products and collections", "queries": [{"name": "catalog", "description": "Returns a Catalog resource by ID.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID of the Catalog to return."}], "returns": [], "examples": []}, {"name": "catalogOperations", "description": "Returns the most recent catalog operations for the shop.", "arguments": [{"name": "ResourceOperation", "type": "[ResourceOperation!]!", "required": true, "description": "Represents a merchandising background operation interface."}], "returns": [], "examples": []}, {"name": "catalogs", "description": "The catalogs belonging to the shop.", "arguments": [{"name": "after", "type": "String", "required": true, "description": "The elements that come after the specified cursor."}], "returns": [], "examples": []}, {"name": "catalogsCount", "description": "The count of catalogs belonging to the shop. Limited to a maximum of 10000.", "arguments": [{"name": "query", "type": "String", "required": true, "description": "A filter made up of terms, connectives, modifiers, and comparators.\nYou can apply one or more filters to a query. Learn more about Shopify API search syntax."}], "returns": [], "examples": []}, {"name": "channel", "description": "Lookup a channel by ID.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID of the Channel to return."}], "returns": [], "examples": []}, {"name": "channels", "description": "List of the active sales channels.", "arguments": [{"name": "after", "type": "String", "required": true, "description": "The elements that come after the specified cursor."}], "returns": [], "examples": []}, {"name": "collection", "description": "Returns a Collection resource by ID.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID of the Collection to return."}], "returns": [], "examples": [{"description": "Get a collection by ID", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    collection(id: \"gid://shopify/Collection/841564295\") {\n      id\n      title\n      handle\n      updatedAt\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "Get a metafield attached to a collection", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query CollectionMetafield($namespace: String!, $key: String!, $ownerId: ID!) {\n    collection(id: $ownerId) {\n      subtitle: metafield(namespace: $namespace, key: $key) {\n        value\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"namespace\": \"my_fields\",\n  \"key\": \"subtitle\",\n  \"ownerId\": \"gid://shopify/Collection/841564295\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Get metafields attached to a collection", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query CollectionMetafields($ownerId: ID!) {\n    collection(id: $ownerId) {\n      metafields(first: 3) {\n        edges {\n          node {\n            namespace\n            key\n            value\n          }\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"ownerId\": \"gid://shopify/Collection/841564295\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Get pinned metafield definitions associated with a collection", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query CollectionMetafieldDefinitions($ownerId: ID!, $first: Int, $pinnedStatus: MetafieldDefinitionPinnedStatus, $sortKey: MetafieldDefinitionSortKeys) {\n    collection(id: $ownerId) {\n      metafieldDefinitions(first: $first, pinnedStatus: $pinnedStatus, sortKey: $sortKey) {\n        edges {\n          node {\n            name\n            namespace\n            key\n            type {\n              name\n            }\n          }\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"pinnedStatus\": \"PINNED\",\n  \"ownerId\": \"gid://shopify/Collection/841564295\",\n  \"first\": 10,\n  \"sortKey\": \"PINNED_POSITION\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Retrieve product_ids that are published to a collection_id", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    collection(id: \"gid://shopify/Collection/841564295\") {\n      id\n      title\n      handle\n      updatedAt\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "Retrieve a list of products belonging to a collection", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query GetCollection($id: ID!) {\n    collection(id: $id) {\n      id\n      title\n      description\n      handle\n      image {\n        url\n      }\n      products(first: 10) {\n        nodes {\n          id\n          title\n        }\n      }\n      updatedAt\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/Collection/841564295\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Retrieve a specific collection listing that is published to your app", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query CollectionShow($id: ID!) {\n    collection(id: $id) {\n      publishedOnCurrentPublication\n      id\n      title\n      descriptionHtml\n      updatedAt\n      handle\n      image {\n        id\n        height\n        width\n        url\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/Collection/841564295\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Retrieves a single collection", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query CollectionShow($id: ID!) {\n    collection(id: $id) {\n      publishedOnCurrentPublication\n      id\n      title\n      descriptionHtml\n      updatedAt\n      handle\n      products(first: 10) {\n        nodes {\n          id\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/Collection/841564295\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Retrieves a single custom collection", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query GetCollection($id: ID!) {\n    collection(id: $id) {\n      id\n      title\n      description\n      handle\n      image {\n        url\n      }\n      products(first: 10) {\n        nodes {\n          id\n          title\n        }\n      }\n      updatedAt\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/Collection/841564295\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Retrieves a single smart collection", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query GetCollection($id: ID!) {\n    collection(id: $id) {\n      id\n      title\n      description\n      handle\n      image {\n        url\n      }\n      products(first: 10) {\n        nodes {\n          id\n          title\n        }\n      }\n      updatedAt\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/Collection/841564295\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Returns null when collection is not found", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    collection(id: \"gid://shopify/Collection/-1\") {\n      id\n      title\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}]}, {"name": "collectionByHandle", "description": "Return a collection by its handle.", "arguments": [{"name": "handle", "type": "String!", "required": true, "description": "The handle of the collection."}], "returns": [], "examples": [{"description": "Retrieve a collection by a handle that doesn't exist", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    collectionByHandle(handle: \"there is no collection with a handle like this\") {\n      id\n      title\n      products(first: 5, reverse: true) {\n        edges {\n          node {\n            id\n            title\n            createdAt\n            priceRangeV2 {\n              minVariantPrice {\n                amount\n                currencyCode\n              }\n              maxVariantPrice {\n                amount\n                currencyCode\n              }\n            }\n          }\n        }\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "Retrieve a collection with five of its best-selling products by its handle", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    collectionByHandle(handle: \"everything\") {\n      id\n      title\n      products(first: 5, sortKey: BEST_SELLING) {\n        edges {\n          node {\n            id\n            title\n            priceRangeV2 {\n              minVariantPrice {\n                amount\n                currencyCode\n              }\n              maxVariantPrice {\n                amount\n                currencyCode\n              }\n            }\n          }\n        }\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "Retrieve the ID of a collection with a specified handle", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query getCollectionIdFromHandle($handle: String!) {\n    collectionByHandle(handle: $handle) {\n      id\n    }\n  }\nQUERY\n\nvariables = {\n  \"handle\": \"ipods\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "collectionByIdentifier", "description": "Return a collection by an identifier.", "arguments": [{"name": "identifier", "type": "CollectionIdentifierInput!", "required": true, "description": "The identifier of the collection."}], "returns": [], "examples": []}, {"name": "collectionRulesConditions", "description": "Lists all rules that can be used to create smart collections.", "arguments": [{"name": "CollectionRuleConditions", "type": "[CollectionRuleConditions!]!", "required": true, "description": "This object defines all columns and allowed relations that can be used in rules for smart collections to automatically include the matching products."}], "returns": [], "examples": [{"description": "Retrieve a list of collection rule conditions", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    collectionRulesConditions {\n      ruleType\n      allowedRelations\n      defaultRelation\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "Retrieve a list of collection rule conditions along with metafield rule objects", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    collectionRulesConditions {\n      ruleType\n      allowedRelations\n      defaultRelation\n      ruleObject {\n        ... on CollectionRuleMetafieldCondition {\n          metafieldDefinition {\n            id\n            name\n            ownerType\n            type {\n              name\n            }\n            validations {\n              value\n            }\n          }\n        }\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}]}, {"name": "collections", "description": "Returns a list of collections.", "arguments": [{"name": "after", "type": "String", "required": true, "description": "The elements that come after the specified cursor."}], "returns": [], "examples": [{"description": "Retrieve collection listings that are published to your app", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query CustomCollectionList {\n    collections(first: 50, query: \"collection_type:custom\") {\n      nodes {\n        id\n        handle\n        title\n        updatedAt\n        descriptionHtml\n        publishedOnCurrentPublication\n        sortOrder\n        templateSuffix\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "Retrieve the first five collections", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    collections(first: 5) {\n      edges {\n        node {\n          id\n          title\n          handle\n          updatedAt\n          sortOrder\n        }\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "Retrieve the five most recently updated smart collections", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    collections(first: 5, query: \"collection_type:smart\", sortKey: UPDATED_AT, reverse: true) {\n      edges {\n        node {\n          id\n          title\n          handle\n          updatedAt\n          sortOrder\n        }\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "Retrieves a list of custom collections", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query CustomCollectionList {\n    collections(first: 50, query: \"collection_type:custom\") {\n      nodes {\n        id\n        handle\n        title\n        updatedAt\n        descriptionHtml\n        publishedOnCurrentPublication\n        sortOrder\n        templateSuffix\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}]}, {"name": "collectionSavedSearches", "description": "Returns a list of the shop's collection saved searches.", "arguments": [{"name": "after", "type": "String", "required": true, "description": "The elements that come after the specified cursor."}], "returns": [], "examples": [{"description": "Overview", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    collectionSavedSearches(first: 3) {\n      nodes {\n        id\n        legacyResourceId\n        name\n        filters {\n          key\n          value\n        }\n        query\n        searchTerms\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}]}, {"name": "collectionsCount", "description": "Count of collections. Limited to a maximum of 10000.", "arguments": [{"name": "query", "type": "String", "required": true, "description": "A filter made up of terms, connectives, modifiers, and comparators.\nYou can apply one or more filters to a query. Learn more about Shopify API search syntax."}], "returns": [], "examples": [{"description": "Retrieves a count of custom collections", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query CollectionsCount {\n    collectionsCount(query: \"collection_type:custom\") {\n      count\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "Retrieves a count of smart collections", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query CollectionsCount {\n    collectionsCount(query: \"collection_type:smart\") {\n      count\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}]}, {"name": "files", "description": "Returns a paginated list of files that have been uploaded to Shopify.", "arguments": [{"name": "after", "type": "String", "required": true, "description": "The elements that come after the specified cursor."}], "returns": [], "examples": [{"description": "Overview", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    node(id: \"gid://shopify/MediaImage/1072273205\") {\n      id\n      ... on MediaImage {\n        image {\n          url\n        }\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}]}, {"name": "fileSavedSearches", "description": "A list of the shop's file saved searches.", "arguments": [{"name": "after", "type": "String", "required": true, "description": "The elements that come after the specified cursor."}], "returns": [], "examples": []}, {"name": "priceList", "description": "Returns a price list resource by ID.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID of the PriceList to return."}], "returns": [], "examples": [{"description": "Retrieve Price List Details and Associated Catalog Information", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    priceList(id: \"gid://shopify/PriceList/524058083\") {\n      catalog {\n        id\n        title\n      }\n      prices(first: 5, query: \"product_id:20995642\") {\n        nodes {\n          price {\n            amount\n            currencyCode\n          }\n          variant {\n            id\n          }\n        }\n      }\n      currency\n      parent {\n        adjustment {\n          type\n          value\n        }\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "Retrieve Quantity Rules on Price List", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    priceList(id: \"gid://shopify/PriceList/225060712\") {\n      quantityRules(first: 3, originType: FIXED) {\n        nodes {\n          increment\n          maximum\n          minimum\n          productVariant {\n            id\n            title\n          }\n        }\n      }\n      currency\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "Retrieve the FIXED prices on a price list", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    priceList(id: \"gid://shopify/PriceList/294167858\") {\n      id\n      name\n      prices(first: 10, originType: FIXED) {\n        nodes {\n          price {\n            amount\n            currencyCode\n          }\n          compareAtPrice {\n            amount\n            currencyCode\n          }\n          originType\n          variant {\n            id\n          }\n        }\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "Retrieve the prices on a price list filtered by product_id", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    priceList(id: \"gid://shopify/PriceList/524058083\") {\n      catalog {\n        id\n        title\n      }\n      prices(first: 5, query: \"product_id:20995642\") {\n        nodes {\n          price {\n            amount\n            currencyCode\n          }\n          variant {\n            id\n          }\n        }\n      }\n      currency\n      parent {\n        adjustment {\n          type\n          value\n        }\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "Retrieve the prices on a price list filtered by variant_id", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    priceList(id: \"gid://shopify/PriceList/524058083\") {\n      catalog {\n        id\n        title\n      }\n      prices(first: 5, query: \"product_id:20995642\") {\n        nodes {\n          price {\n            amount\n            currencyCode\n          }\n          variant {\n            id\n          }\n        }\n      }\n      currency\n      parent {\n        adjustment {\n          type\n          value\n        }\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}]}, {"name": "priceLists", "description": "All price lists for a shop.", "arguments": [{"name": "after", "type": "String", "required": true, "description": "The elements that come after the specified cursor."}], "returns": [], "examples": [{"description": "Retrieve price list in reversed order", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    priceLists(first: 1, reverse: true) {\n      nodes {\n        id\n        currency\n        fixedPricesCount\n        catalog {\n          id\n          title\n        }\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "Retrieve the ID, name, currency and quantity rules information", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    priceLists(first: 1) {\n      nodes {\n        id\n        name\n        currency\n        quantityRules(first: 3, originType: FIXED) {\n          nodes {\n            increment\n            maximum\n            minimum\n            productVariant {\n              id\n              title\n            }\n          }\n        }\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "Retrieve the first two price lists", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    priceLists(first: 2) {\n      edges {\n        node {\n          id\n          name\n          currency\n          fixedPricesCount\n          parent {\n            adjustment {\n              type\n              value\n            }\n          }\n        }\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}]}, {"name": "product", "description": "Returns a Product resource by ID.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID of the Product to return."}], "returns": [], "examples": [{"description": "Get a metafield attached to a product", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query ProductMetafield($namespace: String!, $key: String!, $ownerId: ID!) {\n    product(id: $ownerId) {\n      linerMaterial: metafield(namespace: $namespace, key: $key) {\n        value\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"namespace\": \"my_fields\",\n  \"key\": \"liner_material\",\n  \"ownerId\": \"gid://shopify/Product/108828309\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Get a product using the QueryRoot.node field and a GraphQL fragment", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    node(id: \"gid://shopify/Product/108828309\") {\n      id\n      ... on Product {\n        title\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "Get all a product's fields and connections", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    product(id: \"gid://shopify/Product/108828309\") {\n      collections(first: 5) {\n        edges {\n          node {\n            handle\n          }\n        }\n      }\n      createdAt\n      defaultCursor\n      description\n      descriptionHtml\n      featuredImage {\n        id\n      }\n      feedback {\n        details {\n          messages {\n            message\n          }\n        }\n      }\n      giftCardTemplateSuffix\n      handle\n      hasOnlyDefaultVariant\n      hasOutOfStockVariants\n      id\n      images(first: 5) {\n        edges {\n          node {\n            id\n          }\n        }\n      }\n      inCollection(id: \"gid://shopify/Collection/1007901140\")\n      isGiftCard\n      legacyResourceId\n      metafield(key: \"app_key\", namespace: \"affiliates\") {\n        description\n      }\n      metafields(first: 5) {\n        edges {\n          node {\n            description\n          }\n        }\n      }\n      onlineStorePreviewUrl\n      onlineStoreUrl\n      options {\n        name\n      }\n      priceRange {\n        maxVariantPrice {\n          amount\n        }\n        minVariantPrice {\n          amount\n        }\n      }\n      productType\n      resourcePublicationsCount {\n        count\n      }\n      availablePublicationsCount {\n        count\n      }\n      publishedAt\n      resourcePublications(first: 5) {\n        edges {\n          node {\n            isPublished\n          }\n        }\n      }\n      resourcePublicationOnCurrentPublication {\n        publication {\n          name\n          id\n        }\n        publishDate\n        isPublished\n      }\n      seo {\n        title\n      }\n      storefrontId\n      tags\n      templateSuffix\n      title\n      totalInventory\n      tracksInventory\n      unpublishedPublications(first: 5) {\n        edges {\n          node {\n            name\n          }\n        }\n      }\n      updatedAt\n      variants(first: 5) {\n        edges {\n          node {\n            displayName\n          }\n        }\n      }\n      variantsCount {\n        count\n      }\n      vendor\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "Get metafields attached to a product", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query ProductMetafields($ownerId: ID!) {\n    product(id: $ownerId) {\n      metafields(first: 3) {\n        edges {\n          node {\n            namespace\n            key\n            value\n          }\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"ownerId\": \"gid://shopify/Product/108828309\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Get pinned metafield definitions associated with a product", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query ProductMetafieldDefinitions($ownerId: ID!, $first: Int, $pinnedStatus: MetafieldDefinitionPinnedStatus, $sortKey: MetafieldDefinitionSortKeys) {\n    product(id: $ownerId) {\n      metafieldDefinitions(first: $first, pinnedStatus: $pinnedStatus, sortKey: $sortKey) {\n        edges {\n          node {\n            name\n            namespace\n            key\n            type {\n              name\n            }\n          }\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"pinnedStatus\": \"PINNED\",\n  \"ownerId\": \"gid://shopify/Product/108828309\",\n  \"first\": 10,\n  \"sortKey\": \"PINNED_POSITION\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Get the price range for a product for buyers from Canada", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    product(id: \"gid://shopify/Product/108828309\") {\n      contextualPricing(context: {country: CA}) {\n        priceRange {\n          maxVariantPrice {\n            amount\n            currencyCode\n          }\n          minVariantPrice {\n            amount\n            currencyCode\n          }\n        }\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "Get the title, description and online store URL of a product", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    product(id: \"gid://shopify/Product/108828309\") {\n      title\n      description\n      onlineStoreUrl\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "Get the total count of inventory in stock of a product", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    product(id: \"gid://shopify/Product/108828309\") {\n      title\n      totalInventory\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "Loading translations and localizations of a product's title and description", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query TranslationsAndLocalizations {\n    product(id: \"gid://shopify/Product/273955669\") {\n      title\n      descriptionHtml\n      translations(locale: \"fr\") {\n        key\n        value\n      }\n      localizations: translations(locale: \"fr\", marketId: \"gid://shopify/Market/249692835\") {\n        key\n        value\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "Query a product and display its variants", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    product(id: \"gid://shopify/Product/108828309\") {\n      title\n      variants(first: 10) {\n        edges {\n          node {\n            selectedOptions {\n              name\n              value\n            }\n            media(first: 10) {\n              edges {\n                node {\n                  alt\n                  mediaContentType\n                  status\n                  __typename\n                  ... on MediaImage {\n                    id\n                    preview {\n                      image {\n                        originalSrc\n                      }\n                    }\n                    __typename\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "Query whether a product is published in a given country", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    product(id: \"gid://shopify/Product/49527214\") {\n      title\n      publishedInCA: publishedInContext(context: {country: CA})\n      publishedInGB: publishedInContext(context: {country: GB})\n      publishedInUS: publishedInContext(context: {country: US})\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "Receive a list of all Product Images", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query ProductImageList($productId: ID!) {\n    product(id: $productId) {\n      media(first: 10, query: \"media_type:IMAGE\", sortKey: POSITION) {\n        nodes {\n          id\n          alt\n          ... on MediaImage {\n            createdAt\n            image {\n              width\n              height\n              url\n            }\n          }\n        }\n        pageInfo {\n          startCursor\n          endCursor\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"productId\": \"gid://shopify/Product/108828309\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Retrieve a single product", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query GetProduct($id: ID!) {\n    product(id: $id) {\n      id\n      title\n      variants(first: 10) {\n        nodes {\n          id\n          title\n        }\n      }\n      collections(first: 10) {\n        nodes {\n          id\n          title\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/Product/108828309\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Retrieve a specific product listing that is published to your app", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query ProductShow($id: ID!) {\n    product(id: $id) {\n      publishedOnCurrentPublication\n      id\n      createdAt\n      updatedAt\n      descriptionHtml\n      handle\n      productType\n      title\n      vendor\n      tags\n      publishedAt\n      variants(first: 10) {\n        nodes {\n          id\n        }\n      }\n      images(first: 10) {\n        nodes {\n          id\n          height\n          width\n          url\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/Product/20995642\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Retrieve media objects", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    product(id: \"gid://shopify/Product/108828309\") {\n      title\n      media(first: 5) {\n        edges {\n          node {\n            ...fieldsForMediaTypes\n          }\n        }\n      }\n    }\n  }\n  \n  fragment fieldsForMediaTypes on Media {\n    alt\n    mediaContentType\n    preview {\n      image {\n        id\n        altText\n        originalSrc\n      }\n    }\n    status\n    ... on Video {\n      id\n      sources {\n        format\n        height\n        mimeType\n        url\n        width\n      }\n      originalSource {\n        format\n        height\n        mimeType\n        url\n        width\n      }\n    }\n    ... on ExternalVideo {\n      id\n      host\n      embeddedUrl\n    }\n    ... on Model3d {\n      sources {\n        format\n        mimeType\n        url\n      }\n      originalSource {\n        format\n        mimeType\n        url\n      }\n    }\n    ... on MediaImage {\n      id\n      image {\n        altText\n        originalSrc\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "Retrieves a list of collects", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query CollectionsForProduct($productId: ID!) {\n    product(id: $productId) {\n      collections(first: 10) {\n        nodes {\n          id\n          title\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"productId\": \"gid://shopify/Product/108828309\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "productByHandle", "description": "Return a product by its handle.", "arguments": [{"name": "handle", "type": "String!", "required": true, "description": "A unique string that identifies the product. Handles are automatically generated based on the product's title, and are always lowercase. Whitespace and special characters are replaced with a hyphen: -. If there are multiple consecutive whitespace or special characters, then they're replaced with a single hyphen. Whitespace or special characters at the beginning are removed. If a duplicate product title is used, then the handle is auto-incremented by one. For example, if you had two products called Potion, then their handles would be potion and potion-1. After a product has been created, changing the product title doesn't update the handle."}], "returns": [], "examples": [{"description": "Retrieve a product by a handle that doesn't exist", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    productByHandle(handle: \"there is no product with a handle like this\") {\n      id\n      title\n      productType\n      description\n      vendor\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "Retrieve product information using the product handle", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    productByHandle(handle: \"ipod-nano\") {\n      id\n      handle\n      title\n      productType\n      description\n      vendor\n      priceRangeV2 {\n        minVariantPrice {\n          amount\n          currencyCode\n        }\n        maxVariantPrice {\n          amount\n          currencyCode\n        }\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "Retrieve the ID of a product with a specified handle", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query getProductIdFromHandle($handle: String!) {\n    productByHandle(handle: $handle) {\n      id\n    }\n  }\nQUERY\n\nvariables = {\n  \"handle\": \"element\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "productByIdentifier", "description": "Return a product by an identifier.", "arguments": [{"name": "identifier", "type": "ProductIdentifierInput!", "required": true, "description": "The identifier of the product."}], "returns": [], "examples": [{"description": "Find a product by custom id", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query($identifier: ProductIdentifierInput!) {\n    product: productByIdentifier(identifier: $identifier) {\n      id\n      handle\n      title\n    }\n  }\nQUERY\n\nvariables = {\n  \"identifier\": {\n    \"customId\": {\n      \"namespace\": \"custom\",\n      \"key\": \"id\",\n      \"value\": \"1001\"\n    }\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Find a product by handle", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query($identifier: ProductIdentifierInput!) {\n    product: productByIdentifier(identifier: $identifier) {\n      id\n      handle\n      title\n    }\n  }\nQUERY\n\nvariables = {\n  \"identifier\": {\n    \"handle\": \"boots\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "productDuplicateJob", "description": "Returns the product duplicate job.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "An ID of a product duplicate job to fetch."}], "returns": [], "examples": []}, {"name": "productOperation", "description": "Returns a ProductOperation resource by ID.\nThis can be used to query the\nProductSetOperation, using\nthe ID that was returned\nwhen the product was created or updated\nby the\nProductSet mutation.\nThe status field indicates whether the operation is CREATED, ACTIVE, or COMPLETE.\nThe product field provides the details of the created or updated product.\nFor the\nProductSetOperation, the\nuserErrors field provides mutation errors that occurred during the operation.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID of the ProductOperation to return."}], "returns": [], "examples": [{"description": "View the status of an asynchronous product delete operation", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query ProductDeleteOperation($id: ID!) {\n    productOperation(id: $id) {\n      ... on ProductDeleteOperation {\n        id\n        status\n        deletedProductId\n        product {\n          id\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/ProductDeleteOperation/843567278\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "View the status of an asynchronous product duplicate operation", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query ProductDuplicateOperation($operationId: ID!) {\n    productOperation(id: $operationId) {\n      ... on ProductDuplicateOperation {\n        id\n        status\n        newProduct {\n          id\n          title\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"operationId\": \"gid://shopify/ProductDuplicateOperation/893212316\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "View the status of an asynchronous product set operation", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query productSetOperation($id: ID!) {\n    productOperation(id: $id) {\n      ... on ProductSetOperation {\n        id\n        status\n        product {\n          id\n        }\n        userErrors {\n          field\n          message\n          code\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/ProductSetOperation/824846712\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "productResourceFeedback", "description": "Returns the product resource feedback for the currently authenticated app.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The product associated with the resource feedback."}], "returns": [], "examples": [{"description": "Get a product resource feedback record by ID that doesn't exist", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    productResourceFeedback(id: \"gid://shopify/Product/-1\") {\n      feedbackGeneratedAt\n      messages\n      productId\n      productUpdatedAt\n      state\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "Receive a list of all Product ResourceFeedbacks", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    productResourceFeedback(id: \"gid://shopify/Product/1048875085\") {\n      feedbackGeneratedAt\n      messages\n      productId\n      productUpdatedAt\n      state\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}]}, {"name": "products", "description": "Returns a list of products.", "arguments": [{"name": "after", "type": "String", "required": true, "description": "The elements that come after the specified cursor."}], "returns": [], "examples": [{"description": "Get 10 products after a given cursor and whether or not there is a subsequent page of       results", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    products(first: 10, after: \"eyJsYXN0X2lkIjoyMDk5NTY0MiwibGFzdF92YWx1ZSI6IjIwOTk1NjQyIn0=\") {\n      edges {\n        node {\n          id\n          title\n          handle\n        }\n        cursor\n      }\n      pageInfo {\n        hasNextPage\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "Get multiple sets of products with a single query using aliases to name the results", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    newestProducts: products(first: 5, reverse: true) {\n      edges {\n        node {\n          id\n          title\n        }\n      }\n    }\n    oldestProducts: products(first: 5) {\n      edges {\n        node {\n          id\n          title\n        }\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "Get the 10 most recently created products", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    products(first: 10, reverse: true) {\n      edges {\n        node {\n          id\n          title\n          handle\n          resourcePublicationOnCurrentPublication {\n            publication {\n              name\n              id\n            }\n            publishDate\n            isPublished\n          }\n        }\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "Get the first 10 products of a specific product type", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    products(first: 10, query: \"product_type:snowboards\") {\n      edges {\n        node {\n          title\n        }\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "Get the first 10 products updated after the specified date", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    products(first: 10, query: \"updated_at:>2019-12-01\") {\n      edges {\n        node {\n          id\n          updatedAt\n        }\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "Get the total inventory and price range of three products using a fragment", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    Glasses: product(id: \"gid://shopify/Product/20995642\") {\n      ...productInformation\n    }\n    Shoes: product(id: \"gid://shopify/Product/910489600\") {\n      ...productInformation\n    }\n    Bracelet: product(id: \"gid://shopify/Product/108828309\") {\n      ...productInformation\n    }\n  }\n  \n  fragment productInformation on Product {\n    totalInventory\n    priceRange {\n      minVariantPrice {\n        amount\n      }\n      maxVariantPrice {\n        amount\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "Get two specific products by their ID using aliases", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    glasses: product(id: \"gid://shopify/Product/108828309\") {\n      title\n      description\n    }\n    shoes: product(id: \"gid://shopify/Product/910489600\") {\n      title\n      description\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "Retrieve product_ids that are published to your app", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    products(first: 10, after: \"eyJsYXN0X2lkIjoyMDk5NTY0MiwibGFzdF92YWx1ZSI6IjIwOTk1NjQyIn0=\") {\n      edges {\n        node {\n          id\n          title\n          handle\n        }\n        cursor\n      }\n      pageInfo {\n        hasNextPage\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "Retrieve a list of products", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query GetProducts {\n    products(first: 10) {\n      nodes {\n        id\n        title\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "Retrieve product listings that are published to your app", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query ProductList {\n    products(first: 2) {\n      nodes {\n        publishedOnCurrentPublication\n        id\n        createdAt\n        updatedAt\n        descriptionHtml\n        handle\n        productType\n        title\n        vendor\n        tags\n        publishedAt\n        variants(first: 10) {\n          nodes {\n            id\n          }\n        }\n        images(first: 10) {\n          nodes {\n            id\n            height\n            width\n            url\n          }\n        }\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}]}, {"name": "productSavedSearches", "description": "Returns a list of the shop's product saved searches.", "arguments": [{"name": "after", "type": "String", "required": true, "description": "The elements that come after the specified cursor."}], "returns": [], "examples": [{"description": "Overview", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    productSavedSearches(first: 3) {\n      nodes {\n        id\n        legacyResourceId\n        name\n        filters {\n          key\n          value\n        }\n        query\n        searchTerms\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}]}, {"name": "productsCount", "description": "Count of products.", "arguments": [{"name": "limit", "type": "Int", "required": true, "description": "The upper bound on count value before returning a result."}], "returns": [], "examples": [{"description": "Overview", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    productsCount(query: \"id:>=1000\") {\n      count\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}]}, {"name": "productVariant", "description": "Returns a ProductVariant resource by ID.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID of the ProductVariant to return."}], "returns": [], "examples": [{"description": "Get a metafield attached to a product variant", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query ProductVariantMetafield($namespace: String!, $key: String!, $ownerId: ID!) {\n    productVariant(id: $ownerId) {\n      linerMaterial: metafield(namespace: $namespace, key: $key) {\n        value\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"namespace\": \"my_fields\",\n  \"key\": \"liner_material\",\n  \"ownerId\": \"gid://shopify/ProductVariant/43729076\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Get metafields attached to a product variant", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query ProductVariantMetafields($ownerId: ID!) {\n    productVariant(id: $ownerId) {\n      metafields(first: 3) {\n        edges {\n          node {\n            namespace\n            key\n            value\n          }\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"ownerId\": \"gid://shopify/ProductVariant/43729076\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Get pinned metafield definitions associated with a product variant", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query ProductVariantMetafieldDefinitions($ownerId: ID!, $first: Int, $pinnedStatus: MetafieldDefinitionPinnedStatus, $sortKey: MetafieldDefinitionSortKeys) {\n    productVariant(id: $ownerId) {\n      metafieldDefinitions(first: $first, pinnedStatus: $pinnedStatus, sortKey: $sortKey) {\n        edges {\n          node {\n            name\n            namespace\n            key\n            type {\n              name\n            }\n          }\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"pinnedStatus\": \"PINNED\",\n  \"ownerId\": \"gid://shopify/ProductVariant/43729076\",\n  \"first\": 10,\n  \"sortKey\": \"PINNED_POSITION\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Get the price for a product variant for buyers in Canada", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    productVariant(id: \"gid://shopify/ProductVariant/43729076\") {\n      contextualPricing(context: {country: CA}) {\n        price {\n          amount\n          currencyCode\n        }\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "Get the price for a product variant for different countries in the same request", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    productVariant(id: \"gid://shopify/ProductVariant/43729076\") {\n      CanadaPrice: contextualPricing(context: {country: CA}) {\n        price {\n          amount\n          currencyCode\n        }\n      }\n      USPrice: contextualPricing(context: {country: US}) {\n        price {\n          amount\n          currencyCode\n        }\n      }\n      FrancePrice: contextualPricing(context: {country: FR}) {\n        price {\n          amount\n          currencyCode\n        }\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "Receive a single Product Variant", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query GetProductVariant($id: ID!) {\n    productVariant(id: $id) {\n      id\n      title\n      availableForSale\n      barcode\n      compareAtPrice\n      createdAt\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/ProductVariant/43729076\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Retrieve information for non-existent variant ID", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    productVariant(id: \"gid://shopify/ProductVariant/-1\") {\n      contextualPricing(context: {country: CA}) {\n        price {\n          amount\n          currencyCode\n        }\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}]}, {"name": "productVariantByIdentifier", "description": "Return a product variant by an identifier.", "arguments": [{"name": "identifier", "type": "ProductVariantIdentifierInput!", "required": true, "description": "The identifier of the product variant."}], "returns": [], "examples": [{"description": "Overview", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query($identifier: ProductVariantIdentifierInput!) {\n    variant: productVariantByIdentifier(identifier: $identifier) {\n      id\n      title\n    }\n  }\nQUERY\n\nvariables = {\n  \"identifier\": {\n    \"customId\": {\n      \"namespace\": \"custom\",\n      \"key\": \"id\",\n      \"value\": \"1001\"\n    }\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "productVariants", "description": "Returns a list of product variants.", "arguments": [{"name": "after", "type": "String", "required": true, "description": "The elements that come after the specified cursor."}], "returns": [], "examples": [{"description": "Get multiple product variants using their IDs and GraphQL aliases", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    productVariant1: productVariant(id: \"gid://shopify/ProductVariant/30322695\") {\n      id\n      title\n    }\n    productVariant2: productVariant(id: \"gid://shopify/ProductVariant/43729076\") {\n      id\n      title\n    }\n    productVariant3: productVariant(id: \"gid://shopify/ProductVariant/113711323\") {\n      id\n      title\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "Get the IDs of the first 10 product variants", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    productVariants(first: 10) {\n      edges {\n        node {\n          id\n        }\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "Get the first three product variants sorted by available quantity at a location.", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    productVariants(first: 3, query: \"location_id:124656943\", sortKey: INVENTORY_LEVELS_AVAILABLE) {\n      edges {\n        node {\n          id\n          inventoryItem {\n            inventoryLevel(locationId: \"gid://shopify/Location/124656943\") {\n              quantities(names: \"available\") {\n                quantity\n                name\n              }\n            }\n          }\n        }\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "Get the first three product variants updated after the specified date", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    productVariants(first: 3, query: \"updated_at:>2021-01-01\") {\n      edges {\n        node {\n          id\n          title\n          price\n          updatedAt\n          inventoryQuantity\n          product {\n            id\n            title\n          }\n        }\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "Retrieves a list of product variants", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query ProductVariantsList {\n    productVariants(first: 10, query: \"product_id:20995642\") {\n      nodes {\n        id\n        title\n      }\n      pageInfo {\n        startCursor\n        endCursor\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}]}, {"name": "productVariantsCount", "description": "Count of product variants.", "arguments": [{"name": "query", "type": "String", "required": true, "description": "No supported search fields."}], "returns": [], "examples": [{"description": "Overview", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query ProductVariantsCount {\n    productVariantsCount {\n      count\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}]}, {"name": "sellingPlanGroup", "description": "Returns a Selling Plan Group resource by ID.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID of the SellingPlanGroup to return."}], "returns": [], "examples": [{"description": "Overview", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query sellingPlanGroups {\n    sellingPlanGroup(id: \"gid://shopify/SellingPlanGroup/1\") {\n      id,\n      name,\n      merchantCode,\n      appId,\n      description,\n      options,\n      position,\n      createdAt,\n      sellingPlans(first: 1) {\n        edges {\n          node {\n            id\n          }\n        }\n      }\n      productVariants(first: 1) {\n        edges {\n          node {\n            id\n          }\n        }\n      }\n      productVariantCount,\n      summary,\n      products(first: 1) {\n        edges {\n          node {\n            id\n          }\n        }\n      }\n      productCount,\n      appliesToProduct(productId: \"gid://shopify/Product/1\"),\n      appliesToProductVariant(productVariantId: \"gid://shopify/ProductVariant/1\")\n      app {\n        id\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}]}, {"name": "sellingPlanGroups", "description": "List Selling Plan Groups.", "arguments": [{"name": "after", "type": "String", "required": true, "description": "The elements that come after the specified cursor."}], "returns": [], "examples": []}, {"name": "taxonomy", "description": "The Taxonomy resource lets you access the categories, attributes and values of the loaded taxonomy tree.", "arguments": [{"name": "Taxonomy", "type": "Taxonomy", "required": true, "description": "The Taxonomy resource lets you access the categories, attributes and values of a taxonomy tree."}], "returns": [], "examples": []}], "mutations": [{"name": "catalogContextUpdate", "description": "Updates the context of a catalog.", "arguments": [{"name": "catalogId", "type": "ID!", "required": true, "description": "The ID of the catalog for which to update the context."}], "returns": [], "examples": []}, {"name": "catalogCreate", "description": "Creates a new catalog.", "arguments": [{"name": "input", "type": "CatalogCreateInput!", "required": true, "description": "The properties of the new catalog."}], "returns": [], "examples": []}, {"name": "catalogDelete", "description": "Delete a catalog.", "arguments": [{"name": "deleteDependentResources", "type": "Boolean", "required": true, "description": "Whether to also delete the price list and the publication owned by the catalog."}], "returns": [], "examples": []}, {"name": "catalogUpdate", "description": "Updates an existing catalog.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID of the catalog to update."}], "returns": [], "examples": []}, {"name": "collectionAddProducts", "description": "Adds products to a collection.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID of the collection that's being updated. This can't be a smart collection."}], "returns": [], "examples": [{"description": "Add a product to a collection that doesn't exist", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation collectionAddProducts($id: ID!, $productIds: [ID!]!) {\n    collectionAddProducts(id: $id, productIds: $productIds) {\n      collection {\n        id\n        title\n        products(first: 10) {\n          nodes {\n            id\n            title\n          }\n        }\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/Collection/-1\",\n  \"productIds\": [\"gid://shopify/Product/108828309\"]\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Add a product to a smart collection", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation collectionAddProducts($id: ID!, $productIds: [ID!]!) {\n    collectionAddProducts(id: $id, productIds: $productIds) {\n      collection {\n        id\n        title\n        products(first: 10) {\n          nodes {\n            id\n            title\n          }\n        }\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/Collection/142458073\",\n  \"productIds\": [\"gid://shopify/Product/910489600\"]\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Add products that already belong to the specified collection", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation collectionAddProducts($id: ID!, $productIds: [ID!]!) {\n    collectionAddProducts(id: $id, productIds: $productIds) {\n      collection {\n        id\n        title\n        products(first: 10) {\n          nodes {\n            id\n            title\n          }\n        }\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/Collection/1007901140\",\n  \"productIds\": [\"gid://shopify/Product/108828309\", \"gid://shopify/Product/632910392\", \"gid://shopify/Product/20995642\"]\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Add products that don't exist to an existing collection", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation collectionAddProducts($id: ID!, $productIds: [ID!]!) {\n    collectionAddProducts(id: $id, productIds: $productIds) {\n      collection {\n        id\n        title\n        products(first: 10) {\n          nodes {\n            id\n            title\n          }\n        }\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/Collection/636030761\",\n  \"productIds\": [\"gid://shopify/Product/-1\", \"gid://shopify/Product/108828309\", \"gid://shopify/Product/-2\"]\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Add products to an existing collection", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation collectionAddProducts($id: ID!, $productIds: [ID!]!) {\n    collectionAddProducts(id: $id, productIds: $productIds) {\n      collection {\n        id\n        title\n        products(first: 10) {\n          nodes {\n            id\n            title\n          }\n        }\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/Collection/636030761\",\n  \"productIds\": [\"gid://shopify/Product/121709582\", \"gid://shopify/Product/108828309\"]\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Add products to collections will fail when CollectionsAccess returns false", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation collectionAddProducts($id: ID!, $productIds: [ID!]!) {\n    collectionAddProducts(id: $id, productIds: $productIds) {\n      collection {\n        id\n        title\n        products(first: 10) {\n          nodes {\n            id\n            title\n          }\n        }\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/Collection/636030761\",\n  \"productIds\": [\"gid://shopify/Product/121709582\", \"gid://shopify/Product/108828309\"]\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Adds a product to a custom collection", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation AddToCollection($id: ID!, $productIds: [ID!]!) {\n    collectionAddProducts(id: $id, productIds: $productIds) {\n      collection {\n        id\n        title\n        products(first: 10) {\n          nodes {\n            id\n            title\n          }\n        }\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/Collection/1007901140\",\n  \"productIds\": [\"gid://shopify/Product/121709582\"]\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "collectionAddProducts reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation collectionAddProducts($id: ID!, $productIds: [ID!]!) {\n    collectionAddProducts(id: $id, productIds: $productIds) {\n      collection {\n        id\n        title\n        products(first: 10) {\n          nodes {\n            id\n            title\n          }\n        }\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/Collection/-1\",\n  \"productIds\": [\"gid://shopify/Product/108828309\"]\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "collectionAddProductsV2", "description": "Asynchronously adds a set of products to a given collection. It can take a long time to run. Instead of returning a collection, it returns a job which should be polled.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID of the collection that's being updated."}], "returns": [], "examples": [{"description": "Add a product to a non-existing collection", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation collectionAddProductsV2($id: ID!, $productIds: [ID!]!) {\n    collectionAddProductsV2(id: $id, productIds: $productIds) {\n      job {\n        done\n        id\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/Collection/-1\",\n  \"productIds\": [\"gid://shopify/Product/108828309\"]\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Add a product to a smart collection", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation collectionAddProductsV2($id: ID!, $productIds: [ID!]!) {\n    collectionAddProductsV2(id: $id, productIds: $productIds) {\n      job {\n        done\n        id\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/Collection/142458073\",\n  \"productIds\": [\"gid://shopify/Product/910489600\"]\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Add products that already belong to the specified collection", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation collectionAddProductsV2($id: ID!, $productIds: [ID!]!) {\n    collectionAddProductsV2(id: $id, productIds: $productIds) {\n      job {\n        done\n        id\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/Collection/1007901140\",\n  \"productIds\": [\"gid://shopify/Product/108828309\", \"gid://shopify/Product/632910392\", \"gid://shopify/Product/20995642\"]\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Add products that don't exist to an existing collection", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation collectionAddProductsV2($id: ID!, $productIds: [ID!]!) {\n    collectionAddProductsV2(id: $id, productIds: $productIds) {\n      job {\n        done\n        id\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/Collection/636030761\",\n  \"productIds\": [\"gid://shopify/Product/-1\", \"gid://shopify/Product/108828309\", \"gid://shopify/Product/-2\"]\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Add products to an existing collection", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation collectionAddProductsV2($id: ID!, $productIds: [ID!]!) {\n    collectionAddProductsV2(id: $id, productIds: $productIds) {\n      job {\n        done\n        id\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/Collection/636030761\",\n  \"productIds\": [\"gid://shopify/Product/121709582\", \"gid://shopify/Product/108828309\"]\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "collectionAddProductsV2 reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation collectionAddProductsV2($id: ID!, $productIds: [ID!]!) {\n    collectionAddProductsV2(id: $id, productIds: $productIds) {\n      job {\n        done\n        id\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/Collection/-1\",\n  \"productIds\": [\"gid://shopify/Product/108828309\"]\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "collectionCreate", "description": "Creates a collection.", "arguments": [{"name": "input", "type": "CollectionInput!", "required": true, "description": "The properties to use when creating the collection."}], "returns": [], "examples": [{"description": "Create a new metafield on a new collection", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation createCollectionMetafields($input: CollectionInput!) {\n    collectionCreate(input: $input) {\n      collection {\n        id\n        metafields(first: 3) {\n          edges {\n            node {\n              id\n              namespace\n              key\n              value\n            }\n          }\n        }\n      }\n      userErrors {\n        message\n        field\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": {\n    \"metafields\": [{\"namespace\"=>\"my_field\", \"key\"=>\"subtitle\", \"type\"=>\"single_line_text_field\", \"value\"=>\"Bold Colors\"}],\n    \"title\": \"Spring Styles\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Create a smart collection with metafield definition conditions", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation CollectionCreate($input: CollectionInput!) {\n    collectionCreate(input: $input) {\n      userErrors {\n        field\n        message\n      }\n      collection {\n        id\n        title\n        descriptionHtml\n        handle\n        sortOrder\n        ruleSet {\n          appliedDisjunctively\n          rules {\n            column\n            relation\n            condition\n            conditionObject {\n              ... on CollectionRuleMetafieldCondition {\n                metafieldDefinition {\n                  id\n                  name\n                  type {\n                    name\n                  }\n                  ownerType\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": {\n    \"title\": \"Our entire leather collection\",\n    \"descriptionHtml\": \"Check out our leather products.\",\n    \"ruleSet\": {\n      \"appliedDisjunctively\": false,\n      \"rules\": [{\"column\"=>\"PRODUCT_METAFIELD_DEFINITION\", \"relation\"=>\"EQUALS\", \"condition\"=>\"leather\", \"conditionObjectId\"=>\"gid://shopify/MetafieldDefinition/1071456109\"}, {\"column\"=>\"VARIANT_METAFIELD_DEFINITION\", \"relation\"=>\"EQUALS\", \"condition\"=>\"true\", \"conditionObjectId\"=>\"gid://shopify/MetafieldDefinition/1071456110\"}]\n    }\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Creates a custom collection", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation CollectionCreate($input: CollectionInput!) {\n    collectionCreate(input: $input) {\n      collection {\n        id\n        title\n        descriptionHtml\n        updatedAt\n        handle\n        image {\n          id\n          height\n          width\n          url\n        }\n        products(first: 10) {\n          nodes {\n            id\n            featuredImage {\n              id\n              height\n              width\n              url\n            }\n          }\n        }\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": {\n    \"title\": \"New Custom Collection\",\n    \"descriptionHtml\": \"This is a custom collection.\",\n    \"handle\": \"custom-collection\",\n    \"products\": [\"gid://shopify/Product/20995642\"]\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Creates a smart collection", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation CollectionCreate($input: CollectionInput!) {\n    collectionCreate(input: $input) {\n      userErrors {\n        field\n        message\n      }\n      collection {\n        id\n        title\n        descriptionHtml\n        handle\n        sortOrder\n        ruleSet {\n          appliedDisjunctively\n          rules {\n            column\n            relation\n            condition\n          }\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": {\n    \"title\": \"Our entire shoe collection\",\n    \"descriptionHtml\": \"View <b>every</b> shoe available in our store.\",\n    \"ruleSet\": {\n      \"appliedDisjunctively\": false,\n      \"rules\": {\n        \"column\": \"TITLE\",\n        \"relation\": \"CONTAINS\",\n        \"condition\": \"shoe\"\n      }\n    }\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "collectionCreate reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation createCollectionMetafields($input: CollectionInput!) {\n    collectionCreate(input: $input) {\n      collection {\n        id\n        metafields(first: 3) {\n          edges {\n            node {\n              id\n              namespace\n              key\n              value\n            }\n          }\n        }\n      }\n      userErrors {\n        message\n        field\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": {\n    \"metafields\": [{\"namespace\"=>\"my_field\", \"key\"=>\"subtitle\", \"type\"=>\"single_line_text_field\", \"value\"=>\"Bold Colors\"}],\n    \"title\": \"Spring Styles\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "collectionDelete", "description": "Deletes a collection.", "arguments": [{"name": "input", "type": "CollectionDeleteInput!", "required": true, "description": "The collection to delete."}], "returns": [], "examples": [{"description": "Delete a collection", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation collectionDelete($input: CollectionDeleteInput!) {\n    collectionDelete(input: $input) {\n      deletedCollectionId\n      shop {\n        id\n        name\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": {\n    \"id\": \"gid://shopify/Collection/1009501285\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Delete a collection that doesn't exist", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation collectionDelete($input: CollectionDeleteInput!) {\n    collectionDelete(input: $input) {\n      deletedCollectionId\n      shop {\n        id\n        name\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": {\n    \"id\": \"gid://shopify/Collection/-1\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Delete collection fails if call to CollectionsAccess returns false", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation collectionDelete($input: CollectionDeleteInput!) {\n    collectionDelete(input: $input) {\n      deletedCollectionId\n      shop {\n        id\n        name\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": {\n    \"id\": \"gid://shopify/Collection/1009501285\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Deletes a custom collection", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation CollectionDelete($id: ID!) {\n    collectionDelete(input: {id: $id}) {\n      deletedCollectionId\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/Collection/1009501285\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Removes a smart collection", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation CollectionDelete($id: ID!) {\n    collectionDelete(input: {id: $id}) {\n      deletedCollectionId\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/Collection/1009501285\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "collectionDelete reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation collectionDelete($input: CollectionDeleteInput!) {\n    collectionDelete(input: $input) {\n      deletedCollectionId\n      shop {\n        id\n        name\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": {\n    \"id\": \"gid://shopify/Collection/1009501285\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "collectionPublish", "description": "Publishes a collection to a channel.", "arguments": [{"name": "input", "type": "CollectionPublishInput!", "required": true, "description": "Specify a collection to publish and the sales channels to publish it to."}], "returns": [], "examples": []}, {"name": "collectionRemoveProducts", "description": "Removes a set of products from a given collection. The mutation can take a long time to run. Instead of returning an updated collection the mutation returns a job, which should be polled. For use with manual collections only.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID of the collection to remove products from. The ID must reference an existing manual collection."}], "returns": [], "examples": [{"description": "Remove a product from a manual collection", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation collectionRemoveProducts($id: ID!, $productIds: [ID!]!) {\n    collectionRemoveProducts(id: $id, productIds: $productIds) {\n      job {\n        done\n        id\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/Collection/1007901140\",\n  \"productIds\": [\"gid://shopify/Product/20995642\"]\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Remove a product from a non-existent collection", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation collectionRemoveProducts($id: ID!, $productIds: [ID!]!) {\n    collectionRemoveProducts(id: $id, productIds: $productIds) {\n      job {\n        done\n        id\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/Collection/-1\",\n  \"productIds\": [\"gid://shopify/Product/20995642\"]\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Remove a product from a smart collection", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation collectionRemoveProducts($id: ID!, $productIds: [ID!]!) {\n    collectionRemoveProducts(id: $id, productIds: $productIds) {\n      job {\n        done\n        id\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/Collection/142458073\",\n  \"productIds\": [\"gid://shopify/Product/108828309\"]\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Removes a product from a collection", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation RemoveFromCollection($id: ID!, $productIds: [ID!]!) {\n    collectionRemoveProducts(id: $id, productIds: $productIds) {\n      job {\n        done\n        id\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/Collection/1007901140\",\n  \"productIds\": [\"gid://shopify/Product/20995642\"]\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "collectionRemoveProducts reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation collectionRemoveProducts($id: ID!, $productIds: [ID!]!) {\n    collectionRemoveProducts(id: $id, productIds: $productIds) {\n      job {\n        done\n        id\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/Collection/1007901140\",\n  \"productIds\": [\"gid://shopify/Product/20995642\"]\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "collectionReorderProducts", "description": "Asynchronously reorders a set of products within a specified collection. Instead of returning an updated collection, this mutation returns a job, which should be polled. The Collection.sortOrder must be MANUAL. Displaced products will have their position altered in a consistent manner, with no gaps.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID of the collection on which to reorder products."}], "returns": [], "examples": [{"description": "Move a product to the top of a collection", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation collectionReorderProducts($id: ID!, $moves: [MoveInput!]!) {\n    collectionReorderProducts(id: $id, moves: $moves) {\n      job {\n        id\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/Collection/79210309\",\n  \"moves\": {\n    \"id\": \"gid://shopify/Product/20995642\",\n    \"newPosition\": \"0\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Move a product to the top of a sorted collection", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation collectionReorderProducts($id: ID!, $moves: [MoveInput!]!) {\n    collectionReorderProducts(id: $id, moves: $moves) {\n      job {\n        id\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/Collection/1063001310\",\n  \"moves\": {\n    \"id\": \"gid://shopify/Product/108828309\",\n    \"newPosition\": \"0\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Updates the ordering type of products in a smart collection", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation UpdateCollectionSortOrder($id: ID!, $sortOrder: CollectionSortOrder!) {\n    collectionUpdate(input: {id: $id, sortOrder: $sortOrder}) {\n      collection {\n        id\n        sortOrder\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/Collection/1063001310\",\n  \"sortOrder\": \"MANUAL\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "collectionReorderProducts reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation collectionReorderProducts($id: ID!, $moves: [MoveInput!]!) {\n    collectionReorderProducts(id: $id, moves: $moves) {\n      job {\n        id\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/Collection/79210309\",\n  \"moves\": {\n    \"id\": \"gid://shopify/Product/20995642\",\n    \"newPosition\": \"0\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "collectionUnpublish", "description": "Unpublishes a collection.", "arguments": [{"name": "input", "type": "CollectionUnpublishInput!", "required": true, "description": "Specify a collection to unpublish and the sales channels to remove it from."}], "returns": [], "examples": []}, {"name": "collectionUpdate", "description": "Updates a collection.", "arguments": [{"name": "input", "type": "CollectionInput!", "required": true, "description": "The updated properties for the collection."}], "returns": [], "examples": [{"description": "Apply a rule on a manual collection", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation updateCollectionRules($input: CollectionInput!) {\n    collectionUpdate(input: $input) {\n      collection {\n        id\n        title\n        description\n        handle\n        ruleSet {\n          rules {\n            column\n            relation\n            condition\n          }\n          appliedDisjunctively\n        }\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": {\n    \"id\": \"gid://shopify/Collection/442946009\",\n    \"ruleSet\": {\n      \"rules\": [{\"column\"=>\"IS_PRICE_REDUCED\", \"relation\"=>\"IS_NOT_SET\", \"condition\"=>\"\"}],\n      \"appliedDisjunctively\": true\n    }\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Create a new metafield and update another on an existing collection", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation updateCollectionMetafields($input: CollectionInput!) {\n    collectionUpdate(input: $input) {\n      collection {\n        id\n        metafields(first: 3) {\n          edges {\n            node {\n              id\n              namespace\n              key\n              value\n            }\n          }\n        }\n      }\n      userErrors {\n        message\n        field\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": {\n    \"metafields\": [{\"namespace\"=>\"my_field\", \"key\"=>\"subtitle\", \"type\"=>\"single_line_text_field\", \"value\"=>\"Bold Colors\"}, {\"id\"=>\"gid://shopify/Metafield/1069229037\", \"value\"=>\"New Mothers\"}],\n    \"id\": \"gid://shopify/Collection/79210309\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Delete the collection's image", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation deleteCollectionImage {\n    collectionUpdate(input: {id: \"gid://shopify/Collection/142458073\", image: null}) {\n      collection {\n        id\n        title\n        image {\n          src\n          altText\n        }\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "Update the collection's handle", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation updateCollectionHandle {\n    collectionUpdate(input: {id: \"gid://shopify/Collection/142458073\", handle: \"my-most-popular-collection\"}) {\n      collection {\n        id\n        title\n        description\n        handle\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "Update the collection's rule set", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation updateCollectionRules($input: CollectionInput!) {\n    collectionUpdate(input: $input) {\n      collection {\n        id\n        title\n        description\n        handle\n        ruleSet {\n          rules {\n            column\n            relation\n            condition\n          }\n          appliedDisjunctively\n        }\n      }\n      job {\n        id\n        done\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": {\n    \"id\": \"gid://shopify/Collection/142458073\",\n    \"ruleSet\": {\n      \"rules\": [{\"column\"=>\"VARIANT_PRICE\", \"relation\"=>\"LESS_THAN\", \"condition\"=>\"200\"}, {\"column\"=>\"TAG\", \"relation\"=>\"EQUALS\", \"condition\"=>\"board\"}],\n      \"appliedDisjunctively\": true\n    }\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Updates an existing custom collection", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation CollectionUpdate($input: CollectionInput!) {\n    collectionUpdate(input: $input) {\n      collection {\n        id\n        title\n        description\n        handle\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": {\n    \"id\": \"gid://shopify/Collection/142458073\",\n    \"title\": \"Updated Collection Title\",\n    \"handle\": \"updated-collection-handle\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Updates an existing smart collection", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation CollectionUpdate($input: CollectionInput!) {\n    collectionUpdate(input: $input) {\n      collection {\n        id\n        title\n        description\n        handle\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": {\n    \"id\": \"gid://shopify/Collection/142458073\",\n    \"title\": \"Updated Smart Collection\",\n    \"handle\": \"updated-smart-collection\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "collectionUpdate reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation updateCollectionRules($input: CollectionInput!) {\n    collectionUpdate(input: $input) {\n      collection {\n        id\n        title\n        description\n        handle\n        ruleSet {\n          rules {\n            column\n            relation\n            condition\n          }\n          appliedDisjunctively\n        }\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": {\n    \"id\": \"gid://shopify/Collection/442946009\",\n    \"ruleSet\": {\n      \"rules\": [{\"column\"=>\"IS_PRICE_REDUCED\", \"relation\"=>\"IS_NOT_SET\", \"condition\"=>\"\"}],\n      \"appliedDisjunctively\": true\n    }\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "combinedListingUpdate", "description": "Add, remove and update CombinedListings of a given Product.\nCombinedListings are comprised of multiple products to create a single listing. There are two kinds of products used in a CombinedListing:\n\nParent products\nChild products\n\nThe parent product is created with a productCreate with a CombinedListingRole of PARENT. Once created, you can associate child products with the parent product using this mutation. Parent products represent the idea of a product (e.g. Shoe).\nChild products represent a particular option value (or combination of option values) of a parent product. For instance, with your Shoe parent product, you may have several child products representing specific colors of the shoe (e.g. Shoe - Blue). You could also have child products representing more than a single option (e.g. Shoe - Blue/Canvas, Shoe - Blue/Leather, etc...).\nThe combined listing is the association of parent product to one or more child products.\nLearn more about Combined Listings.", "arguments": [{"name": "optionsAndValues", "type": "[OptionAndValueInput!]", "required": true, "description": "The ordered options and values to be used by the combined listing. Options and values will be reordered to match the order specified here."}], "returns": [], "examples": [{"description": "Add child products to a combined listing", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation AddChildProductsToCombinedListing($parentProductId: ID!, $productsAdded: [ChildProductRelationInput!], $optionsAndValues: [OptionAndValueInput!]) {\n    combinedListingUpdate(parentProductId: $parentProductId, productsAdded: $productsAdded, optionsAndValues: $optionsAndValues) {\n      product {\n        id\n        combinedListing {\n          combinedListingChildren(first: 10) {\n            nodes {\n              product {\n                id\n              }\n              parentVariant {\n                selectedOptions {\n                  value\n                }\n              }\n            }\n          }\n        }\n      }\n      userErrors {\n        code\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"parentProductId\": \"gid://shopify/Product/108828309\",\n  \"productsAdded\": [{\"childProductId\"=>\"gid://shopify/Product/121709582\", \"selectedParentOptionValues\"=>[{\"name\"=>\"color\", \"value\"=>\"Blue\"}, {\"name\"=>\"size\", \"value\"=>\"12\"}]}, {\"childProductId\"=>\"gid://shopify/Product/912855135\", \"selectedParentOptionValues\"=>[{\"name\"=>\"color\", \"value\"=>\"Red\"}, {\"name\"=>\"size\", \"value\"=>\"12\"}]}],\n  \"optionsAndValues\": [{\"name\"=>\"color\", \"values\"=>[\"Blue\", \"Red\"]}, {\"name\"=>\"size\", \"values\"=>[\"12\"]}]\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Remove child products from a combined listing", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation RemoveChildProductsFromCombinedListing($parentProductId: ID!, $productsRemovedIds: [ID!]) {\n    combinedListingUpdate(parentProductId: $parentProductId, productsRemovedIds: $productsRemovedIds) {\n      product {\n        id\n        combinedListing {\n          combinedListingChildren(first: 10) {\n            nodes {\n              product {\n                id\n              }\n            }\n          }\n        }\n      }\n      userErrors {\n        code\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"parentProductId\": \"gid://shopify/Product/362339553\",\n  \"productsRemovedIds\": [\"gid://shopify/Product/223392616\"]\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Update option values of combined listing child product", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation UpdateChildProductsOfCombinedListing($parentProductId: ID!, $productsEdited: [ChildProductRelationInput!]) {\n    combinedListingUpdate(parentProductId: $parentProductId, productsEdited: $productsEdited) {\n      product {\n        id\n        combinedListing {\n          combinedListingChildren(first: 10) {\n            nodes {\n              product {\n                id\n              }\n              parentVariant {\n                selectedOptions {\n                  value\n                }\n              }\n            }\n          }\n        }\n      }\n      userErrors {\n        code\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"parentProductId\": \"gid://shopify/Product/362339553\",\n  \"productsEdited\": [{\"childProductId\"=>\"gid://shopify/Product/223392616\", \"selectedParentOptionValues\"=>[{\"name\"=>\"Color\", \"value\"=>\"green\"}]}, {\"childProductId\"=>\"gid://shopify/Product/555575834\", \"selectedParentOptionValues\"=>[{\"name\"=>\"Color\", \"value\"=>\"blue\"}]}]\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "combinedListingUpdate reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation AddChildProductsToCombinedListing($parentProductId: ID!, $productsAdded: [ChildProductRelationInput!], $optionsAndValues: [OptionAndValueInput!]) {\n    combinedListingUpdate(parentProductId: $parentProductId, productsAdded: $productsAdded, optionsAndValues: $optionsAndValues) {\n      product {\n        id\n        combinedListing {\n          combinedListingChildren(first: 10) {\n            nodes {\n              product {\n                id\n              }\n              parentVariant {\n                selectedOptions {\n                  value\n                }\n              }\n            }\n          }\n        }\n      }\n      userErrors {\n        code\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"parentProductId\": \"gid://shopify/Product/108828309\",\n  \"productsAdded\": [{\"childProductId\"=>\"gid://shopify/Product/121709582\", \"selectedParentOptionValues\"=>[{\"name\"=>\"color\", \"value\"=>\"Blue\"}, {\"name\"=>\"size\", \"value\"=>\"12\"}]}, {\"childProductId\"=>\"gid://shopify/Product/912855135\", \"selectedParentOptionValues\"=>[{\"name\"=>\"color\", \"value\"=>\"Red\"}, {\"name\"=>\"size\", \"value\"=>\"12\"}]}],\n  \"optionsAndValues\": [{\"name\"=>\"color\", \"values\"=>[\"Blue\", \"Red\"]}, {\"name\"=>\"size\", \"values\"=>[\"12\"]}]\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "fileAcknowledgeUpdateFailed", "description": "Acknowledges file update failure by resetting FAILED status to READY and clearing any media errors.", "arguments": [{"name": "fileIds", "type": "[ID!]!", "required": true, "description": "Specifies the file(s) to acknowledge the failed updates of."}], "returns": [], "examples": []}, {"name": "fileCreate", "description": "Creates file assets using an external URL or for files that were previously uploaded using the\nstagedUploadsCreate mutation.\nThese files are added to the Files page in Shopify admin.\nFiles are processed asynchronously. Some data is not available until processing is completed.\nCheck fileStatus\nto know when the files are READY or FAILED. See the FileStatus\nfor the complete set of possible fileStatus values.\nTo get a list of all files, use the files query.", "arguments": [{"name": "files", "type": "[FileCreateInput!]!", "required": true, "description": "List of new files to be created."}], "returns": [], "examples": [{"description": "Create a file using a staged upload URL", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation fileCreate($files: [FileCreateInput!]!) {\n    fileCreate(files: $files) {\n      files {\n        id\n        fileStatus\n        alt\n        createdAt\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"files\": {\n    \"alt\": \"fallback text for a video\",\n    \"contentType\": \"VIDEO\",\n    \"originalSource\": \"https://snowdevil.myshopify.com/admin/tmp/files\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Create a file using an external URL", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation fileCreate($files: [FileCreateInput!]!) {\n    fileCreate(files: $files) {\n      files {\n        id\n        fileStatus\n        alt\n        createdAt\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"files\": {\n    \"alt\": \"fallback text for an image\",\n    \"contentType\": \"IMAGE\",\n    \"originalSource\": \"https://example.com/image.jpg\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Create an image with custom filename", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation fileCreate($files: [FileCreateInput!]!) {\n    fileCreate(files: $files) {\n      files {\n        id\n        fileStatus\n        alt\n        createdAt\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"files\": {\n    \"alt\": \"fallback text for an image\",\n    \"contentType\": \"IMAGE\",\n    \"originalSource\": \"https://burst.shopifycdn.com/photos/pug-in-city.jpg\",\n    \"filename\": \"dog.jpg\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "fileCreate reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation fileCreate($files: [FileCreateInput!]!) {\n    fileCreate(files: $files) {\n      files {\n        id\n        fileStatus\n        alt\n        createdAt\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"files\": {\n    \"alt\": \"fallback text for a video\",\n    \"contentType\": \"VIDEO\",\n    \"originalSource\": \"https://snowdevil.myshopify.com/admin/tmp/files\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "fileDelete", "description": "Deletes existing file assets that were uploaded to Shopify.", "arguments": [{"name": "fileIds", "type": "[ID!]!", "required": true, "description": "The IDs of the files to be deleted."}], "returns": [], "examples": [{"description": "Delete a list of files", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation fileDelete($input: [ID!]!) {\n    fileDelete(fileIds: $input) {\n      deletedFileIds\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": [\"gid://shopify/GenericFile/1072273199\", \"gid://shopify/MediaImage/1072273200\", \"gid://shopify/Video/1072273201\"]\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Deleting a file that doesn't exist returns an error", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation fileDelete($input: [ID!]!) {\n    fileDelete(fileIds: $input) {\n      deletedFileIds\n      userErrors {\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": [\"gid://shopify/GenericFile/1\"]\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "fileDelete reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation fileDelete($input: [ID!]!) {\n    fileDelete(fileIds: $input) {\n      deletedFileIds\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": [\"gid://shopify/GenericFile/1072273199\", \"gid://shopify/MediaImage/1072273200\", \"gid://shopify/Video/1072273201\"]\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "fileUpdate", "description": "Updates an existing file asset that was uploaded to Shopify.", "arguments": [{"name": "files", "type": "[FileUpdateInput!]!", "required": true, "description": "List of files to be updated."}], "returns": [], "examples": [{"description": "Update a file", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation FileUpdate($input: [FileUpdateInput!]!) {\n    fileUpdate(files: $input) {\n      userErrors {\n        code\n        field\n        message\n      }\n      files {\n        alt\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": {\n    \"id\": \"gid://shopify/GenericFile/1072273203\",\n    \"alt\": \"new alt text\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Update a generic file", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation fileUpdate($input: [FileUpdateInput!]!) {\n    fileUpdate(files: $input) {\n      files {\n        ... on GenericFile {\n          id\n          url\n        }\n      }\n      userErrors {\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": {\n    \"id\": \"gid://shopify/GenericFile/1072273204\",\n    \"originalSource\": \"https://example.com/manual.pdf\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Update an image", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation fileUpdate($input: [FileUpdateInput!]!) {\n    fileUpdate(files: $input) {\n      files {\n        ... on MediaImage {\n          id\n          image {\n            url\n          }\n        }\n      }\n      userErrors {\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": {\n    \"id\": \"gid://shopify/MediaImage/1072273202\",\n    \"originalSource\": \"https://example.com/image.jpg\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Updating a file that doesn't exist returns an error", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation fileUpdate($input: [FileUpdateInput!]!) {\n    fileUpdate(files: $input) {\n      files {\n        alt\n        ... on GenericFile {\n          id\n        }\n      }\n      userErrors {\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": {\n    \"id\": \"gid://shopify/GenericFile/1\",\n    \"alt\": \"new alt text\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "fileUpdate reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation FileUpdate($input: [FileUpdateInput!]!) {\n    fileUpdate(files: $input) {\n      userErrors {\n        code\n        field\n        message\n      }\n      files {\n        alt\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": {\n    \"id\": \"gid://shopify/GenericFile/1072273203\",\n    \"alt\": \"new alt text\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "priceListCreate", "description": "Creates a price list. You can use the priceListCreate mutation to create a new price list and associate it with a catalog. This enables you to sell your products with contextual pricing.", "arguments": [{"name": "input", "type": "PriceListCreateInput!", "required": true, "description": "The properties of the new price list."}], "returns": [], "examples": [{"description": "Create a price list with a percentage adjustment.", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation PriceListCreate($input: PriceListCreateInput!) {\n    priceListCreate(input: $input) {\n      userErrors {\n        field\n        message\n      }\n      priceList {\n        id\n        name\n        currency\n        parent {\n          adjustment {\n            type\n            value\n          }\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": {\n    \"name\": \"Price List\",\n    \"currency\": \"USD\",\n    \"parent\": {\n      \"adjustment\": {\n        \"type\": \"PERCENTAGE_INCREASE\",\n        \"value\": 10\n      }\n    }\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "priceListCreate reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation PriceListCreate($input: PriceListCreateInput!) {\n    priceListCreate(input: $input) {\n      userErrors {\n        field\n        message\n      }\n      priceList {\n        id\n        name\n        currency\n        parent {\n          adjustment {\n            type\n            value\n          }\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": {\n    \"name\": \"Price List\",\n    \"currency\": \"USD\",\n    \"parent\": {\n      \"adjustment\": {\n        \"type\": \"PERCENTAGE_INCREASE\",\n        \"value\": 10\n      }\n    }\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "priceListDelete", "description": "Deletes a price list. For example, you can delete a price list so that it no longer applies for products in the associated market.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID of the price list to be deleted."}], "returns": [], "examples": [{"description": "Delete a price list", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation priceListDelete($id: ID!) {\n    priceListDelete(id: $id) {\n      deletedId\n      userErrors {\n        field\n        code\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/PriceList/294167858\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "priceListDelete reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation priceListDelete($id: ID!) {\n    priceListDelete(id: $id) {\n      deletedId\n      userErrors {\n        field\n        code\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/PriceList/294167858\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "priceListFixedPricesAdd", "description": "Creates or updates fixed prices on a price list. You can use the priceListFixedPricesAdd mutation to set a fixed price for specific product variants. This lets you change product variant pricing on a per country basis. Any existing fixed price list prices for these variants will be overwritten.", "arguments": [{"name": "priceListId", "type": "ID!", "required": true, "description": "The ID of the price list to which the fixed prices will be added or updated."}], "returns": [], "examples": [{"description": "Add multiple fixed prices to a price list", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation priceListFixedPricesAdd($priceListId: ID!, $prices: [PriceListPriceInput!]!) {\n    priceListFixedPricesAdd(priceListId: $priceListId, prices: $prices) {\n      prices {\n        compareAtPrice {\n          amount\n          currencyCode\n        }\n        price {\n          amount\n          currencyCode\n        }\n      }\n      userErrors {\n        field\n        code\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"priceListId\": \"gid://shopify/PriceList/115567603\",\n  \"prices\": [{\"compareAtPrice\"=>{\"amount\"=>\"125.50\", \"currencyCode\"=>\"CAD\"}, \"price\"=>{\"amount\"=>\"100\", \"currencyCode\"=>\"CAD\"}, \"variantId\"=>\"gid://shopify/ProductVariant/43729076\"}, {\"compareAtPrice\"=>{\"amount\"=>\"6.99\", \"currencyCode\"=>\"CAD\"}, \"price\"=>{\"amount\"=>\"4\", \"currencyCode\"=>\"CAD\"}, \"variantId\"=>\"gid://shopify/ProductVariant/138327650\"}]\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Adding a fixed price using a currency that isn't supported by the price list returns a currency mismatch error", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation priceListFixedPricesAdd($priceListId: ID!, $prices: [PriceListPriceInput!]!) {\n    priceListFixedPricesAdd(priceListId: $priceListId, prices: $prices) {\n      prices {\n        compareAtPrice {\n          amount\n          currencyCode\n        }\n        price {\n          amount\n          currencyCode\n        }\n      }\n      userErrors {\n        field\n        code\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"priceListId\": \"gid://shopify/PriceList/115567603\",\n  \"prices\": [{\"compareAtPrice\"=>{\"amount\"=>\"125.50\", \"currencyCode\"=>\"EUR\"}, \"price\"=>{\"amount\"=>\"100\", \"currencyCode\"=>\"EUR\"}, \"variantId\"=>\"gid://shopify/ProductVariant/43729076\"}]\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "priceListFixedPricesAdd reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation priceListFixedPricesAdd($priceListId: ID!, $prices: [PriceListPriceInput!]!) {\n    priceListFixedPricesAdd(priceListId: $priceListId, prices: $prices) {\n      prices {\n        compareAtPrice {\n          amount\n          currencyCode\n        }\n        price {\n          amount\n          currencyCode\n        }\n      }\n      userErrors {\n        field\n        code\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"priceListId\": \"gid://shopify/PriceList/115567603\",\n  \"prices\": [{\"compareAtPrice\"=>{\"amount\"=>\"125.50\", \"currencyCode\"=>\"CAD\"}, \"price\"=>{\"amount\"=>\"100\", \"currencyCode\"=>\"CAD\"}, \"variantId\"=>\"gid://shopify/ProductVariant/43729076\"}, {\"compareAtPrice\"=>{\"amount\"=>\"6.99\", \"currencyCode\"=>\"CAD\"}, \"price\"=>{\"amount\"=>\"4\", \"currencyCode\"=>\"CAD\"}, \"variantId\"=>\"gid://shopify/ProductVariant/138327650\"}]\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "priceListFixedPricesByProductUpdate", "description": "Updates the fixed prices for all variants for a product on a price list. You can use the priceListFixedPricesByProductUpdate mutation to set or remove a fixed price for all variants of a product associated with the price list.", "arguments": [{"name": "priceListId", "type": "ID!", "required": true, "description": "The price list to update the prices for."}], "returns": [], "examples": []}, {"name": "priceListFixedPricesDelete", "description": "Deletes specific fixed prices from a price list using a product variant ID. You can use the priceListFixedPricesDelete mutation to delete a set of fixed prices from a price list. After deleting the set of fixed prices from the price list, the price of each product variant reverts to the original price that was determined by the price list adjustment.", "arguments": [{"name": "priceListId", "type": "ID!", "required": true, "description": "The ID of the price list from which the fixed prices will be removed."}], "returns": [], "examples": [{"description": "Delete multiple fixed prices from a price list", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation priceListFixedPricesDelete($priceListId: ID!, $variantIds: [ID!]!) {\n    priceListFixedPricesDelete(priceListId: $priceListId, variantIds: $variantIds) {\n      deletedFixedPriceVariantIds\n      userErrors {\n        field\n        code\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"priceListId\": \"gid://shopify/PriceList/294167858\",\n  \"variantIds\": [\"gid://shopify/ProductVariant/498744621\", \"gid://shopify/ProductVariant/113711323\"]\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "priceListFixedPricesDelete reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation priceListFixedPricesDelete($priceListId: ID!, $variantIds: [ID!]!) {\n    priceListFixedPricesDelete(priceListId: $priceListId, variantIds: $variantIds) {\n      deletedFixedPriceVariantIds\n      userErrors {\n        field\n        code\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"priceListId\": \"gid://shopify/PriceList/294167858\",\n  \"variantIds\": [\"gid://shopify/ProductVariant/498744621\", \"gid://shopify/ProductVariant/113711323\"]\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "priceListFixedPricesUpdate", "description": "Updates fixed prices on a price list. You can use the priceListFixedPricesUpdate mutation to set a fixed price for specific product variants or to delete prices for variants associated with the price list.", "arguments": [{"name": "priceListId", "type": "ID!", "required": true, "description": "The price list that the prices will be updated against."}], "returns": [], "examples": []}, {"name": "priceListUpdate", "description": "Updates a price list.\nIf you modify the currency, then any fixed prices set on the price list will be deleted.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID of the price list to update."}], "returns": [], "examples": [{"description": "Update a price list", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation priceListUpdate($id: ID!, $input: PriceListUpdateInput!) {\n    priceListUpdate(id: $id, input: $input) {\n      priceList {\n        id\n        parent {\n          adjustment {\n            type\n            value\n          }\n        }\n      }\n      userErrors {\n        message\n        field\n        code\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/PriceList/734173888\",\n  \"input\": {\n    \"parent\": {\n      \"adjustment\": {\n        \"value\": 10,\n        \"type\": \"PERCENTAGE_INCREASE\"\n      }\n    }\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "priceListUpdate reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation priceListUpdate($id: ID!, $input: PriceListUpdateInput!) {\n    priceListUpdate(id: $id, input: $input) {\n      priceList {\n        id\n        parent {\n          adjustment {\n            type\n            value\n          }\n        }\n      }\n      userErrors {\n        message\n        field\n        code\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/PriceList/734173888\",\n  \"input\": {\n    \"parent\": {\n      \"adjustment\": {\n        \"value\": 10,\n        \"type\": \"PERCENTAGE_INCREASE\"\n      }\n    }\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "productBundleCreate", "description": "Creates a new componentized product.", "arguments": [{"name": "input", "type": "ProductBundleCreateInput!", "required": true, "description": "Input for creating a componentized product."}], "returns": [], "examples": []}, {"name": "productBundleUpdate", "description": "Updates a componentized product.", "arguments": [{"name": "input", "type": "ProductBundleUpdateInput!", "required": true, "description": "Input for updating a componentized product."}], "returns": [], "examples": []}, {"name": "productChangeStatus", "description": "Changes the status of a product. This allows you to set the availability of the product across all channels.", "arguments": [{"name": "productId", "type": "ID!", "required": true, "description": "The ID of the product."}], "returns": [], "examples": [{"description": "Update a product's status and return its ID and new status", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation productChangeStatus($productId: ID!, $status: ProductStatus!) {\n    productChangeStatus(productId: $productId, status: $status) {\n      product {\n        id\n        status\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"productId\": \"gid://shopify/Product/108828309\",\n  \"status\": \"ARCHIVED\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Update the status of a product that doesn't exist", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation productChangeStatus($productId: ID!, $status: ProductStatus!) {\n    productChangeStatus(productId: $productId, status: $status) {\n      product {\n        id\n        status\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"productId\": \"gid://shopify/Product/-1\",\n  \"status\": \"ARCHIVED\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "productChangeStatus reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation productChangeStatus($productId: ID!, $status: ProductStatus!) {\n    productChangeStatus(productId: $productId, status: $status) {\n      product {\n        id\n        status\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"productId\": \"gid://shopify/Product/108828309\",\n  \"status\": \"ARCHIVED\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "productCreate", "description": "Creates a product\nwith attributes such as title, description, and vendor.\nYou can use the productCreate mutation to define\noptions and\nvalues\nfor products with\nproduct variants,\nsuch as different sizes or colors.\nTo create multiple product variants for a single product and manage prices, use the\nproductVariantsBulkCreate\nmutation.\nTo create or update a product in a single request, use the\nproductSet mutation.\nLearn more about the product model\nand adding product data.", "arguments": [{"name": "media", "type": "[CreateMediaInput!]", "required": true, "description": "The media to add to the product."}], "returns": [], "examples": [{"description": "Create a product", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation {\n    productCreate(product: {title: \"Cool socks\", productOptions: [{name: \"Color\", values: [{name: \"Red\"}, {name: \"Blue\"}]}, {name: \"Size\", values: [{name: \"Small\"}, {name: \"Large\"}]}]}) {\n      product {\n        id\n        title\n        options {\n          id\n          name\n          position\n          optionValues {\n            id\n            name\n            hasVariants\n          }\n        }\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "Create a product and associate metafields", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation {\n    productCreate(product: {title: \"Hiking Boots\", metafields: [{namespace: \"my_fields\", key: \"liner_material\", type: \"single_line_text_field\", value: \"Synthetic Leather\"}]}) {\n      product {\n        id\n        title\n        metafields(first: 1) {\n          nodes {\n            id\n            namespace\n            key\n            value\n          }\n        }\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "Create a product and return the product ID", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation {\n    productCreate(product: {title: \"Sweet new product\", productType: \"Snowboard\", vendor: \"JadedPixel\"}) {\n      product {\n        id\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "Create a product with a combined listing role", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation {\n    productCreate(product: {title: \"Helmet Nova\", combinedListingRole: PARENT}) {\n      product {\n        id\n        combinedListingRole\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "Create a product with media", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation CreateProductWithNewMedia($product: ProductCreateInput!, $media: [CreateMediaInput!]) {\n    productCreate(product: $product, media: $media) {\n      product {\n        id\n        title\n        media(first: 10) {\n          nodes {\n            alt\n            mediaContentType\n            preview {\n              status\n            }\n          }\n        }\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"product\": {\n    \"title\": \"Helmet Nova\"\n  },\n  \"media\": [{\"originalSource\"=>\"https://cdn.shopify.com/shopifycloud/brochure/assets/sell/image/image-@artdirection-large-1ba8d5de56c361cec6bc487b747c8774b9ec8203f392a99f53c028df8d0fb3fc.png\", \"alt\"=>\"Gray helmet for bikers\", \"mediaContentType\"=>\"IMAGE\"}, {\"originalSource\"=>\"https://www.youtube.com/watch?v=4L8VbGRibj8&list=PLlMkWQ65HlcEoPyG9QayqEaAu0ftj0MMz\", \"alt\"=>\"Testing helmet resistance against impacts\", \"mediaContentType\"=>\"EXTERNAL_VIDEO\"}]\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Create a product with product options and option values", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation {\n    productCreate(product: {title: \"New product\", productOptions: [{name: \"Color\", values: [{name: \"Red\"}, {name: \"Green\"}]}, {name: \"Size\", values: [{name: \"Small\"}, {name: \"Medium\"}]}]}) {\n      userErrors {\n        field\n        message\n      }\n      product {\n        id\n        options {\n          id\n          name\n          position\n          values\n          optionValues {\n            id\n            name\n            hasVariants\n          }\n        }\n        variants(first: 5) {\n          nodes {\n            id\n            title\n            selectedOptions {\n              name\n              value\n            }\n          }\n        }\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "productCreate reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation {\n    productCreate(product: {title: \"Cool socks\", productOptions: [{name: \"Color\", values: [{name: \"Red\"}, {name: \"Blue\"}]}, {name: \"Size\", values: [{name: \"Small\"}, {name: \"Large\"}]}]}) {\n      product {\n        id\n        title\n        options {\n          id\n          name\n          position\n          optionValues {\n            id\n            name\n            hasVariants\n          }\n        }\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}]}, {"name": "productCreateMedia", "description": "Creates media for a product.", "arguments": [{"name": "media", "type": "[CreateMediaInput!]!", "required": true, "description": "List of new media to be added to a product."}], "returns": [], "examples": [{"description": "Add both valid and invalid media to an existing product", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation productCreateMedia($media: [CreateMediaInput!]!, $productId: ID!) {\n    productCreateMedia(media: $media, productId: $productId) {\n      media {\n        alt\n        mediaContentType\n        status\n      }\n      mediaUserErrors {\n        field\n        message\n      }\n      product {\n        id\n        title\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"media\": [{\"alt\"=>\"Image\", \"mediaContentType\"=>\"EXTERNAL_VIDEO\", \"originalSource\"=>\"https://youtu.be/32mGBDk3LSo\"}, {\"alt\"=>\"Image\", \"mediaContentType\"=>\"IMAGE\", \"originalSource\"=>\"invalid_img\"}],\n  \"productId\": \"gid://shopify/Product/121709582\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Add invalid media to an existing product", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation productCreateMedia($media: [CreateMediaInput!]!, $productId: ID!) {\n    productCreateMedia(media: $media, productId: $productId) {\n      media {\n        alt\n        mediaContentType\n        status\n      }\n      mediaUserErrors {\n        field\n        message\n      }\n      product {\n        id\n        title\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"media\": {\n    \"alt\": \"Image\",\n    \"mediaContentType\": \"IMAGE\",\n    \"originalSource\": \"invalid_img\"\n  },\n  \"productId\": \"gid://shopify/Product/121709582\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Add new media to a non-existent product", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation productCreateMedia($media: [CreateMediaInput!]!, $productId: ID!) {\n    productCreateMedia(media: $media, productId: $productId) {\n      media {\n        alt\n        mediaContentType\n        status\n      }\n      mediaUserErrors {\n        field\n        message\n      }\n      product {\n        id\n        title\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"media\": {\n    \"alt\": \"Video\",\n    \"mediaContentType\": \"EXTERNAL_VIDEO\",\n    \"originalSource\": \"https://youtu.be/32mGBDk3LSo\"\n  },\n  \"productId\": \"gid://shopify/Product/-1\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Add new media to an existing product", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation productCreateMedia($media: [CreateMediaInput!]!, $productId: ID!) {\n    productCreateMedia(media: $media, productId: $productId) {\n      media {\n        alt\n        mediaContentType\n        status\n      }\n      mediaUserErrors {\n        field\n        message\n      }\n      product {\n        id\n        title\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"media\": {\n    \"alt\": \"Video\",\n    \"mediaContentType\": \"EXTERNAL_VIDEO\",\n    \"originalSource\": \"https://youtu.be/32mGBDk3LSo\"\n  },\n  \"productId\": \"gid://shopify/Product/121709582\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Create a new Product Image", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation ProductImageCreate($id: ID!) {\n    productCreateMedia(productId: $id, media: [{mediaContentType: IMAGE, originalSource: \"https://path.to/image.jpg\", alt: \"Alt text.\"}]) {\n      media {\n        id\n        alt\n        status\n        ... on MediaImage {\n          image {\n            url\n          }\n        }\n      }\n      mediaUserErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/Product/121709582\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "productCreateMedia reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation productCreateMedia($media: [CreateMediaInput!]!, $productId: ID!) {\n    productCreateMedia(media: $media, productId: $productId) {\n      media {\n        alt\n        mediaContentType\n        status\n      }\n      mediaUserErrors {\n        field\n        message\n      }\n      product {\n        id\n        title\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"media\": [{\"alt\"=>\"Image\", \"mediaContentType\"=>\"EXTERNAL_VIDEO\", \"originalSource\"=>\"https://youtu.be/32mGBDk3LSo\"}, {\"alt\"=>\"Image\", \"mediaContentType\"=>\"IMAGE\", \"originalSource\"=>\"invalid_img\"}],\n  \"productId\": \"gid://shopify/Product/121709582\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "productDelete", "description": "Deletes a product, including all associated variants and media.\nAs of API version 2023-01, if you need to delete a large product, such as one that has many\nvariants\nthat are active at several\nlocations,\nyou may encounter timeout errors. To avoid these timeout errors, you can instead use the asynchronous\nProductDeleteAsync\nmutation.", "arguments": [{"name": "input", "type": "ProductDeleteInput!", "required": true, "description": "Specifies the product to delete by its ID."}], "returns": [], "examples": [{"description": "Delete a non-existent product", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation {\n    productDelete(input: {id: \"gid://shopify/Product/-1\"}) {\n      deletedProductId\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "Delete a product", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation {\n    productDelete(input: {id: \"gid://shopify/Product/108828309\"}) {\n      deletedProductId\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "Delete a product asynchronously and return a product delete operation", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation productDelete($input: ProductDeleteInput!, $synchronous: Boolean!) {\n    productDelete(synchronous: $synchronous, input: $input) {\n      deletedProductId\n      productDeleteOperation {\n        id\n        status\n        deletedProductId\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"synchronous\": false,\n  \"input\": {\n    \"id\": \"gid://shopify/Product/108828309\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "productDelete reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation {\n    productDelete(input: {id: \"gid://shopify/Product/-1\"}) {\n      deletedProductId\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}]}, {"name": "productDeleteMedia", "description": "Deletes media for a product.", "arguments": [{"name": "mediaIds", "type": "[ID!]!", "required": true, "description": "The media IDs to be deleted."}], "returns": [], "examples": [{"description": "Delete existing and non-existing media from a product", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation productDeleteMedia($mediaIds: [ID!]!, $productId: ID!) {\n    productDeleteMedia(mediaIds: $mediaIds, productId: $productId) {\n      deletedMediaIds\n      deletedProductImageIds\n      mediaUserErrors {\n        field\n        message\n      }\n      product {\n        id\n        title\n        media(first: 5) {\n          nodes {\n            alt\n            mediaContentType\n            status\n          }\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"mediaIds\": [\"gid://shopify/Video/-1\", \"gid://shopify/Video/723685877\"],\n  \"productId\": \"gid://shopify/Product/108828309\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Delete media from a non-existent product", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation productDeleteMedia($mediaIds: [ID!]!, $productId: ID!) {\n    productDeleteMedia(mediaIds: $mediaIds, productId: $productId) {\n      deletedMediaIds\n      deletedProductImageIds\n      mediaUserErrors {\n        field\n        message\n      }\n      product {\n        id\n        title\n        media(first: 5) {\n          nodes {\n            alt\n            mediaContentType\n            status\n          }\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"mediaIds\": [\"gid://shopify/Video/723685877\"],\n  \"productId\": \"gid://shopify/Product/0\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Delete media from an existing product", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation productDeleteMedia($mediaIds: [ID!]!, $productId: ID!) {\n    productDeleteMedia(mediaIds: $mediaIds, productId: $productId) {\n      deletedMediaIds\n      deletedProductImageIds\n      mediaUserErrors {\n        field\n        message\n      }\n      product {\n        id\n        title\n        media(first: 5) {\n          nodes {\n            alt\n            mediaContentType\n            status\n          }\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"mediaIds\": [\"gid://shopify/Video/723685877\"],\n  \"productId\": \"gid://shopify/Product/108828309\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Delete non-existing media from an existing product", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation productDeleteMedia($mediaIds: [ID!]!, $productId: ID!) {\n    productDeleteMedia(mediaIds: $mediaIds, productId: $productId) {\n      deletedMediaIds\n      deletedProductImageIds\n      mediaUserErrors {\n        field\n        message\n      }\n      product {\n        id\n        title\n        media(first: 5) {\n          nodes {\n            alt\n            mediaContentType\n            status\n          }\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"mediaIds\": [\"gid://shopify/Video/-1\"],\n  \"productId\": \"gid://shopify/Product/108828309\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Remove an existing Product Image", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation productDeleteMedia($productId: ID!, $mediaIds: [ID!]!) {\n    productDeleteMedia(productId: $productId, mediaIds: $mediaIds) {\n      deletedMediaIds\n      deletedProductImageIds\n      mediaUserErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"productId\": \"gid://shopify/Product/20995642\",\n  \"mediaIds\": [\"gid://shopify/MediaImage/730211239\"]\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "productDeleteMedia reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation productDeleteMedia($mediaIds: [ID!]!, $productId: ID!) {\n    productDeleteMedia(mediaIds: $mediaIds, productId: $productId) {\n      deletedMediaIds\n      deletedProductImageIds\n      mediaUserErrors {\n        field\n        message\n      }\n      product {\n        id\n        title\n        media(first: 5) {\n          nodes {\n            alt\n            mediaContentType\n            status\n          }\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"mediaIds\": [\"gid://shopify/Video/-1\", \"gid://shopify/Video/723685877\"],\n  \"productId\": \"gid://shopify/Product/108828309\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "productDuplicate", "description": "Duplicates a product.\nIf you need to duplicate a large product, such as one that has many\nvariants\nthat are active at several\nlocations,\nyou might encounter timeout errors.\nTo avoid these timeout errors, you can instead duplicate the product asynchronously.\nIn API version 2024-10 and higher, include synchronous: false argument in this mutation to perform the duplication asynchronously.\nIn API version 2024-07 and lower, use the asynchronous ProductDuplicateAsyncV2.\nMetafield values are not duplicated if the unique values capability is enabled.", "arguments": [{"name": "includeImages", "type": "Boolean", "required": true, "description": "Specifies whether or not to duplicate images."}], "returns": [], "examples": [{"description": "Duplicate a product", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation DuplicateProduct($productId: ID!, $newTitle: String!, $includeImages: Boolean, $newStatus: ProductStatus) {\n    productDuplicate(productId: $productId, newTitle: $newTitle, includeImages: $includeImages, newStatus: $newStatus) {\n      newProduct {\n        id\n        title\n        vendor\n        productType\n        variants(first: 1) {\n          nodes {\n            id\n            title\n          }\n        }\n      }\n      imageJob {\n        id\n        done\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"productId\": \"gid://shopify/Product/20995642\",\n  \"newTitle\": \"Copy of Product\",\n  \"includeImages\": true,\n  \"newStatus\": \"ACTIVE\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Duplicate a product asynchronously and return productDuplicateOperation", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation DuplicateProduct($productId: ID!, $newTitle: String!, $includeImages: Boolean, $newStatus: ProductStatus, $synchronous: Boolean) {\n    productDuplicate(productId: $productId, newTitle: $newTitle, includeImages: $includeImages, newStatus: $newStatus, synchronous: $synchronous) {\n      productDuplicateOperation {\n        id\n        status\n        newProduct {\n          id\n          title\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"productId\": \"gid://shopify/Product/20995642\",\n  \"newTitle\": \"Copy of Product\",\n  \"includeImages\": true,\n  \"newStatus\": \"ACTIVE\",\n  \"synchronous\": false\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "productDuplicate reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation DuplicateProduct($productId: ID!, $newTitle: String!, $includeImages: Boolean, $newStatus: ProductStatus) {\n    productDuplicate(productId: $productId, newTitle: $newTitle, includeImages: $includeImages, newStatus: $newStatus) {\n      newProduct {\n        id\n        title\n        vendor\n        productType\n        variants(first: 1) {\n          nodes {\n            id\n            title\n          }\n        }\n      }\n      imageJob {\n        id\n        done\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"productId\": \"gid://shopify/Product/20995642\",\n  \"newTitle\": \"Copy of Product\",\n  \"includeImages\": true,\n  \"newStatus\": \"ACTIVE\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "productJoinSellingPlanGroups", "description": "Adds multiple selling plan groups to a product.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID of the product."}], "returns": [], "examples": []}, {"name": "productLeaveSellingPlanGroups", "description": "Removes multiple groups from a product.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID of the product."}], "returns": [], "examples": []}, {"name": "productOptionsCreate", "description": "Creates options on a product.", "arguments": [{"name": "options", "type": "[OptionCreateInput!]!", "required": true, "description": "Options to add to the product."}], "returns": [], "examples": [{"description": "Create a product option linked to a metafield", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation createOptions($productId: ID!, $options: [OptionCreateInput!]!) {\n    productOptionsCreate(productId: $productId, options: $options) {\n      userErrors {\n        field\n        message\n        code\n      }\n      product {\n        options {\n          name\n          linkedMetafield {\n            namespace\n            key\n          }\n          optionValues {\n            name\n            linkedMetafieldValue\n          }\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"productId\": \"gid://shopify/Product/1072481128\",\n  \"options\": [{\"name\"=>\"Color\", \"linkedMetafield\"=>{\"namespace\"=>\"shopify\", \"key\"=>\"color-pattern\", \"values\"=>[\"gid://shopify/Metaobject/971662503\", \"gid://shopify/Metaobject/971662504\", \"gid://shopify/Metaobject/971662505\"]}}]\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Create a product option linked to a metafield (with existing values)", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation createOptions($productId: ID!, $options: [OptionCreateInput!]!) {\n    productOptionsCreate(productId: $productId, options: $options) {\n      userErrors {\n        field\n        message\n        code\n      }\n      product {\n        options {\n          name\n          linkedMetafield {\n            namespace\n            key\n          }\n          optionValues {\n            name\n            linkedMetafieldValue\n          }\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"productId\": \"gid://shopify/Product/1072481129\",\n  \"options\": [{\"name\"=>\"Color\", \"linkedMetafield\"=>{\"namespace\"=>\"shopify\", \"key\"=>\"color-pattern\"}}]\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Create new product option and variants with CREATE variantStrategy", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation createOptions($productId: ID!, $options: [OptionCreateInput!]!, $variantStrategy: ProductOptionCreateVariantStrategy) {\n    productOptionsCreate(productId: $productId, options: $options, variantStrategy: $variantStrategy) {\n      userErrors {\n        field\n        message\n        code\n      }\n      product {\n        id\n        variants(first: 10) {\n          nodes {\n            id\n            title\n            selectedOptions {\n              name\n              value\n            }\n          }\n        }\n        options {\n          id\n          name\n          values\n          position\n          optionValues {\n            id\n            name\n            hasVariants\n          }\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"productId\": \"gid://shopify/Product/20995642\",\n  \"options\": [{\"name\"=>\"Color\", \"values\"=>[{\"name\"=>\"Blue\"}, {\"name\"=>\"Green\"}]}],\n  \"variantStrategy\": \"CREATE\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Create new product option but no new variants with LEAVE_AS_IS variantStrategy", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation createOptions($productId: ID!, $options: [OptionCreateInput!]!) {\n    productOptionsCreate(productId: $productId, options: $options) {\n      userErrors {\n        field\n        message\n        code\n      }\n      product {\n        options {\n          name\n          linkedMetafield {\n            namespace\n            key\n          }\n          optionValues {\n            name\n            linkedMetafieldValue\n          }\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"productId\": \"gid://shopify/Product/1072481128\",\n  \"options\": [{\"name\"=>\"Color\", \"linkedMetafield\"=>{\"namespace\"=>\"shopify\", \"key\"=>\"color-pattern\", \"values\"=>[\"gid://shopify/Metaobject/971662503\", \"gid://shopify/Metaobject/971662504\", \"gid://shopify/Metaobject/971662505\"]}}]\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Create new product option with an explicit position", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation createOptions($productId: ID!, $options: [OptionCreateInput!]!, $variantStrategy: ProductOptionCreateVariantStrategy) {\n    productOptionsCreate(productId: $productId, options: $options, variantStrategy: $variantStrategy) {\n      userErrors {\n        field\n        message\n        code\n      }\n      product {\n        id\n        variants(first: 10) {\n          nodes {\n            id\n            title\n            selectedOptions {\n              name\n              value\n            }\n          }\n        }\n        options {\n          id\n          name\n          values\n          position\n          optionValues {\n            id\n            name\n            hasVariants\n          }\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"productId\": \"gid://shopify/Product/20995642\",\n  \"options\": [{\"name\"=>\"Color\", \"position\"=>1, \"values\"=>[{\"name\"=>\"Blue\"}]}]\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Create new product options", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation createOptions($productId: ID!, $options: [OptionCreateInput!]!, $variantStrategy: ProductOptionCreateVariantStrategy) {\n    productOptionsCreate(productId: $productId, options: $options, variantStrategy: $variantStrategy) {\n      userErrors {\n        field\n        message\n        code\n      }\n      product {\n        id\n        variants(first: 10) {\n          nodes {\n            id\n            title\n            selectedOptions {\n              name\n              value\n            }\n          }\n        }\n        options {\n          id\n          name\n          values\n          position\n          optionValues {\n            id\n            name\n            hasVariants\n          }\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"productId\": \"gid://shopify/Product/1072481130\",\n  \"options\": [{\"name\"=>\"Color\", \"values\"=>[{\"name\"=>\"Blue\"}, {\"name\"=>\"Red\"}]}, {\"name\"=>\"Size\", \"values\"=>[{\"name\"=>\"Small\"}, {\"name\"=>\"Medium\"}]}]\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Trying to create an option with a name that already exists on the product returns an error", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation createOptions($productId: ID!, $options: [OptionCreateInput!]!, $variantStrategy: ProductOptionCreateVariantStrategy) {\n    productOptionsCreate(productId: $productId, options: $options, variantStrategy: $variantStrategy) {\n      userErrors {\n        field\n        message\n        code\n      }\n      product {\n        id\n        variants(first: 10) {\n          nodes {\n            id\n            title\n            selectedOptions {\n              name\n              value\n            }\n          }\n        }\n        options {\n          id\n          name\n          values\n          position\n          optionValues {\n            id\n            name\n            hasVariants\n          }\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"productId\": \"gid://shopify/Product/20995642\",\n  \"options\": [{\"name\"=>\"Color\", \"values\"=>[{\"name\"=>\"Blue\"}]}]\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Trying to create too many options returns an error", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation createOptions($productId: ID!, $options: [OptionCreateInput!]!, $variantStrategy: ProductOptionCreateVariantStrategy) {\n    productOptionsCreate(productId: $productId, options: $options, variantStrategy: $variantStrategy) {\n      userErrors {\n        field\n        message\n        code\n      }\n      product {\n        id\n        variants(first: 10) {\n          nodes {\n            id\n            title\n            selectedOptions {\n              name\n              value\n            }\n          }\n        }\n        options {\n          id\n          name\n          values\n          position\n          optionValues {\n            id\n            name\n            hasVariants\n          }\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"productId\": \"gid://shopify/Product/20995642\",\n  \"options\": [{\"name\"=>\"Color\", \"values\"=>[{\"name\"=>\"Blue\"}]}, {\"name\"=>\"Style\", \"values\"=>[{\"name\"=>\"Classic\"}]}, {\"name\"=>\"Size\", \"values\"=>[{\"name\"=>\"Small\"}]}, {\"name\"=>\"Material\", \"values\"=>[{\"name\"=>\"Linen\"}]}]\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "productOptionsCreate reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation createOptions($productId: ID!, $options: [OptionCreateInput!]!) {\n    productOptionsCreate(productId: $productId, options: $options) {\n      userErrors {\n        field\n        message\n        code\n      }\n      product {\n        options {\n          name\n          linkedMetafield {\n            namespace\n            key\n          }\n          optionValues {\n            name\n            linkedMetafieldValue\n          }\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"productId\": \"gid://shopify/Product/1072481128\",\n  \"options\": [{\"name\"=>\"Color\", \"linkedMetafield\"=>{\"namespace\"=>\"shopify\", \"key\"=>\"color-pattern\", \"values\"=>[\"gid://shopify/Metaobject/971662503\", \"gid://shopify/Metaobject/971662504\", \"gid://shopify/Metaobject/971662505\"]}}]\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "productOptionsDelete", "description": "Deletes the specified options.", "arguments": [{"name": "options", "type": "[ID!]!", "required": true, "description": "IDs of the options to delete from the product."}], "returns": [], "examples": [{"description": "Delete an option", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation deleteOptions($productId: ID!, $options: [ID!]!, $strategy: ProductOptionDeleteStrategy) {\n    productOptionsDelete(productId: $productId, options: $options, strategy: $strategy) {\n      userErrors {\n        field\n        message\n        code\n      }\n      deletedOptionsIds\n      product {\n        id\n        options {\n          id\n          name\n          values\n          position\n          optionValues {\n            id\n            name\n            hasVariants\n          }\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"productId\": \"gid://shopify/Product/20995642\",\n  \"options\": [\"gid://shopify/ProductOption/1064576514\"]\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Delete an option with the POSITION delete strategy", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation deleteOptions($productId: ID!, $options: [ID!]!, $strategy: ProductOptionDeleteStrategy) {\n    productOptionsDelete(productId: $productId, options: $options, strategy: $strategy) {\n      userErrors {\n        field\n        message\n        code\n      }\n      deletedOptionsIds\n      product {\n        id\n        options {\n          id\n          name\n          values\n          position\n          optionValues {\n            id\n            name\n            hasVariants\n          }\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"productId\": \"gid://shopify/Product/20995642\",\n  \"options\": [\"gid://shopify/ProductOption/328272167\"],\n  \"strategy\": \"POSITION\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Trying to delete an option with multiple option values linked to variants with no option delete strategy\n            returns an error", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation deleteOptions($productId: ID!, $options: [ID!]!, $strategy: ProductOptionDeleteStrategy) {\n    productOptionsDelete(productId: $productId, options: $options, strategy: $strategy) {\n      userErrors {\n        field\n        message\n        code\n      }\n      deletedOptionsIds\n      product {\n        id\n        options {\n          id\n          name\n          values\n          position\n          optionValues {\n            id\n            name\n            hasVariants\n          }\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"productId\": \"gid://shopify/Product/20995642\",\n  \"options\": [\"gid://shopify/ProductOption/328272167\"]\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "productOptionsDelete reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation deleteOptions($productId: ID!, $options: [ID!]!, $strategy: ProductOptionDeleteStrategy) {\n    productOptionsDelete(productId: $productId, options: $options, strategy: $strategy) {\n      userErrors {\n        field\n        message\n        code\n      }\n      deletedOptionsIds\n      product {\n        id\n        options {\n          id\n          name\n          values\n          position\n          optionValues {\n            id\n            name\n            hasVariants\n          }\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"productId\": \"gid://shopify/Product/20995642\",\n  \"options\": [\"gid://shopify/ProductOption/1064576514\"]\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "productOptionsReorder", "description": "Reorders options and option values on a product, causing product variants to alter their position.\nOptions order take precedence over option values order. Depending on the existing product variants,\nsome input orders might not be achieved.\nExample:\n  Existing product variants:\n    [\"Red / Small\", \"Green / Medium\", \"Blue / Small\"].\n  New order:\n    [\n      {\n        name: \"Size\", values: [{ name: \"Small\" }, { name: \"Medium\" }],\n        name: \"Color\", values: [{ name: \"Green\" }, { name: \"Red\" }, { name: \"Blue\" }]\n      }\n    ].\n  Description:\n    Variants with \"Green\" value are expected to appear before variants with \"Red\" and \"Blue\" values.\n    However, \"Size\" option appears before \"Color\".\n  Therefore, output will be:\n    [\"Small / \"Red\", \"Small / Blue\", \"Medium / Green\"].", "arguments": [{"name": "options", "type": "[OptionReorderInput!]!", "required": true, "description": "Options to reorder on the product."}], "returns": [], "examples": [{"description": "Reorder options and change the order of option values", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation reorderOptions($options: [OptionReorderInput!]!, $productId: ID!) {\n    productOptionsReorder(options: $options, productId: $productId) {\n      userErrors {\n        field\n        message\n        code\n      }\n      product {\n        id\n        options {\n          id\n          name\n          values\n          position\n          optionValues {\n            id\n            name\n            hasVariants\n          }\n        }\n        variants(first: 5) {\n          nodes {\n            id\n            title\n            selectedOptions {\n              name\n              value\n            }\n          }\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"productId\": \"gid://shopify/Product/1072481054\",\n  \"options\": [{\"name\"=>\"Color\", \"values\"=>[{\"name\"=>\"Green\"}, {\"name\"=>\"Blue\"}, {\"name\"=>\"Red\"}]}, {\"name\"=>\"Size\"}]\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Trying to reorder option values with any value missing in the input returns an error", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation reorderOptions($options: [OptionReorderInput!]!, $productId: ID!) {\n    productOptionsReorder(options: $options, productId: $productId) {\n      userErrors {\n        field\n        message\n        code\n      }\n      product {\n        id\n        options {\n          id\n          name\n          values\n          position\n          optionValues {\n            id\n            name\n            hasVariants\n          }\n        }\n        variants(first: 5) {\n          nodes {\n            id\n            title\n            selectedOptions {\n              name\n              value\n            }\n          }\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"productId\": \"gid://shopify/Product/20995642\",\n  \"options\": [{\"name\"=>\"Title\", \"values\"=>[{\"name\"=>\"158cm\"}, {\"name\"=>\"151cm\"}]}]\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "productOptionsReorder reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation reorderOptions($options: [OptionReorderInput!]!, $productId: ID!) {\n    productOptionsReorder(options: $options, productId: $productId) {\n      userErrors {\n        field\n        message\n        code\n      }\n      product {\n        id\n        options {\n          id\n          name\n          values\n          position\n          optionValues {\n            id\n            name\n            hasVariants\n          }\n        }\n        variants(first: 5) {\n          nodes {\n            id\n            title\n            selectedOptions {\n              name\n              value\n            }\n          }\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"productId\": \"gid://shopify/Product/1072481054\",\n  \"options\": [{\"name\"=>\"Color\", \"values\"=>[{\"name\"=>\"Green\"}, {\"name\"=>\"Blue\"}, {\"name\"=>\"Red\"}]}, {\"name\"=>\"Size\"}]\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "productOptionUpdate", "description": "Updates a product option.", "arguments": [{"name": "option", "type": "OptionUpdateInput!", "required": true, "description": "Option to update."}], "returns": [], "examples": [{"description": "Add 2 new option values and update an existing one", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation updateOption($productId: ID!, $option: OptionUpdateInput!, $optionValuesToAdd: [OptionValueCreateInput!], $optionValuesToUpdate: [OptionValueUpdateInput!], $optionValuesToDelete: [ID!], $variantStrategy: ProductOptionUpdateVariantStrategy) {\n    productOptionUpdate(productId: $productId, option: $option, optionValuesToAdd: $optionValuesToAdd, optionValuesToUpdate: $optionValuesToUpdate, optionValuesToDelete: $optionValuesToDelete, variantStrategy: $variantStrategy) {\n      userErrors {\n        field\n        message\n        code\n      }\n      product {\n        id\n        options {\n          id\n          name\n          values\n          position\n          optionValues {\n            id\n            name\n            hasVariants\n          }\n        }\n        variants(first: 5) {\n          nodes {\n            id\n            title\n            selectedOptions {\n              name\n              value\n            }\n          }\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"productId\": \"gid://shopify/Product/1072481063\",\n  \"option\": {\n    \"id\": \"gid://shopify/ProductOption/1064576526\"\n  },\n  \"optionValuesToAdd\": [{\"name\"=>\"Yellow\"}, {\"name\"=>\"Red\"}],\n  \"optionValuesToUpdate\": [{\"id\"=>\"gid://shopify/ProductOptionValue/1054672275\", \"name\"=>\"Purple\"}]\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Replace a value with another", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation updateOption($productId: ID!, $option: OptionUpdateInput!, $optionValuesToAdd: [OptionValueCreateInput!], $optionValuesToUpdate: [OptionValueUpdateInput!], $optionValuesToDelete: [ID!], $variantStrategy: ProductOptionUpdateVariantStrategy) {\n    productOptionUpdate(productId: $productId, option: $option, optionValuesToAdd: $optionValuesToAdd, optionValuesToUpdate: $optionValuesToUpdate, optionValuesToDelete: $optionValuesToDelete, variantStrategy: $variantStrategy) {\n      userErrors {\n        field\n        message\n        code\n      }\n      product {\n        id\n        options {\n          id\n          name\n          values\n          position\n          optionValues {\n            id\n            name\n            hasVariants\n          }\n        }\n        variants(first: 5) {\n          nodes {\n            id\n            title\n            selectedOptions {\n              name\n              value\n            }\n          }\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"productId\": \"gid://shopify/Product/1072481069\",\n  \"option\": {\n    \"id\": \"gid://shopify/ProductOption/1064576533\"\n  },\n  \"optionValuesToAdd\": [{\"name\"=>\"Small\"}],\n  \"optionValuesToUpdate\": [{\"id\"=>\"gid://shopify/ProductOptionValue/1054672293\", \"name\"=>\"Medium\"}]\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Trying to add an option value with a name that already exists returns an error", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation updateOption($productId: ID!, $option: OptionUpdateInput!, $optionValuesToAdd: [OptionValueCreateInput!], $optionValuesToUpdate: [OptionValueUpdateInput!], $optionValuesToDelete: [ID!], $variantStrategy: ProductOptionUpdateVariantStrategy) {\n    productOptionUpdate(productId: $productId, option: $option, optionValuesToAdd: $optionValuesToAdd, optionValuesToUpdate: $optionValuesToUpdate, optionValuesToDelete: $optionValuesToDelete, variantStrategy: $variantStrategy) {\n      userErrors {\n        field\n        message\n        code\n      }\n      product {\n        id\n        options {\n          id\n          name\n          values\n          position\n          optionValues {\n            id\n            name\n            hasVariants\n          }\n        }\n        variants(first: 5) {\n          nodes {\n            id\n            title\n            selectedOptions {\n              name\n              value\n            }\n          }\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"productId\": \"gid://shopify/Product/1072481067\",\n  \"option\": {\n    \"id\": \"gid://shopify/ProductOption/1064576530\"\n  },\n  \"optionValuesToAdd\": [{\"name\"=>\"Red\"}, {\"name\"=>\"Blue\"}]\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Update name and position of an option", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation updateOption($productId: ID!, $option: OptionUpdateInput!, $optionValuesToAdd: [OptionValueCreateInput!], $optionValuesToUpdate: [OptionValueUpdateInput!], $optionValuesToDelete: [ID!], $variantStrategy: ProductOptionUpdateVariantStrategy) {\n    productOptionUpdate(productId: $productId, option: $option, optionValuesToAdd: $optionValuesToAdd, optionValuesToUpdate: $optionValuesToUpdate, optionValuesToDelete: $optionValuesToDelete, variantStrategy: $variantStrategy) {\n      userErrors {\n        field\n        message\n        code\n      }\n      product {\n        id\n        options {\n          id\n          name\n          values\n          position\n          optionValues {\n            id\n            name\n            hasVariants\n          }\n        }\n        variants(first: 5) {\n          nodes {\n            id\n            title\n            selectedOptions {\n              name\n              value\n            }\n          }\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"productId\": \"gid://shopify/Product/1072481071\",\n  \"option\": {\n    \"id\": \"gid://shopify/ProductOption/1064576536\",\n    \"position\": 1,\n    \"name\": \"Tint\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Update the values of an option linked to a metafield", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation updateOption($productId: ID!, $option: OptionUpdateInput!, $optionValuesToAdd: [OptionValueCreateInput!], $optionValuesToUpdate: [OptionValueUpdateInput!], $optionValuesToDelete: [ID!]) {\n    productOptionUpdate(productId: $productId, option: $option, optionValuesToAdd: $optionValuesToAdd, optionValuesToUpdate: $optionValuesToUpdate, optionValuesToDelete: $optionValuesToDelete) {\n      userErrors {\n        field\n        message\n        code\n      }\n      product {\n        options {\n          name\n          linkedMetafield {\n            namespace\n            key\n          }\n          optionValues {\n            name\n            linkedMetafieldValue\n          }\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"productId\": \"gid://shopify/Product/1072481065\",\n  \"option\": {\n    \"id\": \"gid://shopify/ProductOption/1064576528\"\n  },\n  \"optionValuesToAdd\": [{\"linkedMetafieldValue\"=>\"gid://shopify/Metaobject/971662473\"}],\n  \"optionValuesToUpdate\": [{\"id\"=>\"gid://shopify/ProductOptionValue/1054672281\", \"linkedMetafieldValue\"=>\"gid://shopify/Metaobject/971662474\"}]\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "productOptionUpdate reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation updateOption($productId: ID!, $option: OptionUpdateInput!, $optionValuesToAdd: [OptionValueCreateInput!], $optionValuesToUpdate: [OptionValueUpdateInput!], $optionValuesToDelete: [ID!], $variantStrategy: ProductOptionUpdateVariantStrategy) {\n    productOptionUpdate(productId: $productId, option: $option, optionValuesToAdd: $optionValuesToAdd, optionValuesToUpdate: $optionValuesToUpdate, optionValuesToDelete: $optionValuesToDelete, variantStrategy: $variantStrategy) {\n      userErrors {\n        field\n        message\n        code\n      }\n      product {\n        id\n        options {\n          id\n          name\n          values\n          position\n          optionValues {\n            id\n            name\n            hasVariants\n          }\n        }\n        variants(first: 5) {\n          nodes {\n            id\n            title\n            selectedOptions {\n              name\n              value\n            }\n          }\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"productId\": \"gid://shopify/Product/1072481063\",\n  \"option\": {\n    \"id\": \"gid://shopify/ProductOption/1064576526\"\n  },\n  \"optionValuesToAdd\": [{\"name\"=>\"Yellow\"}, {\"name\"=>\"Red\"}],\n  \"optionValuesToUpdate\": [{\"id\"=>\"gid://shopify/ProductOptionValue/1054672275\", \"name\"=>\"Purple\"}]\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "productPublish", "description": "Publishes a product. Products that are sold exclusively on subscription (requiresSellingPlan: true) can only be published on online stores.", "arguments": [{"name": "input", "type": "ProductPublishInput!", "required": true, "description": "Specifies the product to publish and the channels to publish it to."}], "returns": [], "examples": []}, {"name": "productReorderMedia", "description": "Asynchronously reorders the media attached to a product.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID of the product on which to reorder medias."}], "returns": [], "examples": [{"description": "Reorder a product's media", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation productReorderMedia($id: ID!, $moves: [MoveInput!]!) {\n    productReorderMedia(id: $id, moves: $moves) {\n      job {\n        id\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/Product/108828309\",\n  \"moves\": [{\"id\"=>\"gid://shopify/MediaImage/183532652\", \"newPosition\"=>\"2\"}, {\"id\"=>\"gid://shopify/MediaImage/731367280\", \"newPosition\"=>\"3\"}]\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "productReorderMedia reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation productReorderMedia($id: ID!, $moves: [MoveInput!]!) {\n    productReorderMedia(id: $id, moves: $moves) {\n      job {\n        id\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/Product/108828309\",\n  \"moves\": [{\"id\"=>\"gid://shopify/MediaImage/183532652\", \"newPosition\"=>\"2\"}, {\"id\"=>\"gid://shopify/MediaImage/731367280\", \"newPosition\"=>\"3\"}]\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "productSet", "description": "Creates or updates a product in a single request.\nUse this mutation when syncing information from an external data source into Shopify.\nWhen using this mutation to update a product, specify that product's id in the input.\nAny list field (e.g.\ncollections,\nmetafields,\nvariants)\nwill be updated so that all included entries are either created or updated, and all existing entries not\nincluded will be deleted.\nAll other fields will be updated to the value passed. Omitted fields will not be updated.\nWhen run in synchronous mode, you will get the product back in the response.\nFor versions 2024-04 and earlier, the synchronous mode has an input limit of 100 variants.\nThis limit has been removed for versions 2024-07 and later.\nIn asynchronous mode, you will instead get a\nProductSetOperation\nobject back. You can then use the\nproductOperation query to\nretrieve the updated product data. This query uses the ProductSetOperation object to\ncheck the status of the operation and to retrieve the details of the updated product and its variants.\nIf you need to update a subset of variants, use one of the bulk variant mutations:\n\nproductVariantsBulkCreate\nproductVariantsBulkUpdate\nproductVariantsBulkDelete\n\nIf you need to update options, use one of the product option mutations:\n\nproductOptionsCreate\nproductOptionUpdate\nproductOptionsDelete\nproductOptionsReorder\n\nSee our guide to\nsync product data from an external source\nfor more.", "arguments": [{"name": "identifier", "type": "ProductSetIdentifiers", "required": true, "description": "Specifies the identifier that will be used to lookup the resource."}], "returns": [], "examples": [{"description": "Asynchronously create a product with two variants", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation createProductAsynchronous($productSet: ProductSetInput!, $synchronous: Boolean!) {\n    productSet(synchronous: $synchronous, input: $productSet) {\n      product {\n        id\n      }\n      productSetOperation {\n        id\n        status\n        userErrors {\n          code\n          field\n          message\n        }\n      }\n      userErrors {\n        code\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"synchronous\": false,\n  \"productSet\": {\n    \"title\": \"Winter hat\",\n    \"productOptions\": [{\"name\"=>\"Color\", \"position\"=>1, \"values\"=>[{\"name\"=>\"Grey\"}, {\"name\"=>\"Black\"}]}],\n    \"variants\": [{\"optionValues\"=>[{\"optionName\"=>\"Color\", \"name\"=>\"Grey\"}], \"price\"=>79.99}, {\"optionValues\"=>[{\"optionName\"=>\"Color\", \"name\"=>\"Black\"}], \"price\"=>69.99}]\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Create a product with customized inventory quantities", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation createProduct($productSet: ProductSetInput!, $synchronous: Boolean!) {\n    productSet(synchronous: $synchronous, input: $productSet) {\n      product {\n        id\n        variants(first: 5) {\n          nodes {\n            title\n            price\n            inventoryQuantity\n            inventoryItem {\n              inventoryLevels(first: 5) {\n                nodes {\n                  location {\n                    id\n                    name\n                  }\n                  available\n                }\n              }\n            }\n          }\n        }\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"synchronous\": true,\n  \"productSet\": {\n    \"title\": \"Winter hat\",\n    \"productOptions\": [{\"name\"=>\"Color\", \"position\"=>1, \"values\"=>[{\"name\"=>\"Grey\"}, {\"name\"=>\"Black\"}]}],\n    \"variants\": [{\"optionValues\"=>[{\"optionName\"=>\"Color\", \"name\"=>\"Grey\"}], \"inventoryQuantities\"=>[{\"locationId\"=>\"gid://shopify/Location/415211365\", \"name\"=>\"available\", \"quantity\"=>12}, {\"locationId\"=>\"gid://shopify/Location/346779380\", \"name\"=>\"available\", \"quantity\"=>19}], \"price\"=>79.99}, {\"optionValues\"=>[{\"optionName\"=>\"Color\", \"name\"=>\"Black\"}], \"inventoryQuantities\"=>[{\"locationId\"=>\"gid://shopify/Location/346779380\", \"name\"=>\"available\", \"quantity\"=>976}, {\"locationId\"=>\"gid://shopify/Location/415211365\", \"name\"=>\"available\", \"quantity\"=>844}], \"price\"=>11.99}]\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Create a product with files", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation createProduct($productSet: ProductSetInput!, $synchronous: Boolean!) {\n    productSet(synchronous: $synchronous, input: $productSet) {\n      product {\n        id\n        media(first: 5) {\n          nodes {\n            id\n            position\n            alt\n            mediaContentType\n            status\n          }\n        }\n        variants(first: 5) {\n          nodes {\n            title\n            price\n            media(first: 5) {\n              nodes {\n                id\n                position\n                alt\n                mediaContentType\n                status\n              }\n            }\n          }\n        }\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"synchronous\": true,\n  \"productSet\": {\n    \"title\": \"Winter hat\",\n    \"productOptions\": [{\"name\"=>\"Color\", \"position\"=>1, \"values\"=>[{\"name\"=>\"Grey\"}, {\"name\"=>\"Black\"}]}],\n    \"files\": [{\"originalSource\"=>\"https://example.com/hats/grey-hat.jpg\", \"alt\"=>\"An elegant grey hat\", \"filename\"=>\"grey-hat.jpg\", \"contentType\"=>\"IMAGE\"}, {\"originalSource\"=>\"https://example.com/hats/black-hat.jpg\", \"alt\"=>\"An elegant black hat\", \"filename\"=>\"black-hat.jpg\", \"contentType\"=>\"IMAGE\"}],\n    \"variants\": [{\"optionValues\"=>[{\"optionName\"=>\"Color\", \"name\"=>\"Grey\"}], \"file\"=>{\"originalSource\"=>\"https://example.com/hats/grey-hat.jpg\", \"alt\"=>\"An elegant grey hat\", \"filename\"=>\"grey-hat.jpg\", \"contentType\"=>\"IMAGE\"}, \"price\"=>11.99}, {\"optionValues\"=>[{\"optionName\"=>\"Color\", \"name\"=>\"Black\"}], \"file\"=>{\"originalSource\"=>\"https://example.com/hats/black-hat.jpg\", \"alt\"=>\"An elegant black hat\", \"filename\"=>\"black-hat.jpg\", \"contentType\"=>\"IMAGE\"}, \"price\"=>11.99}]\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Create a product with two options and four variants", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation createProductWithTwoOptionsAndVariants($productSet: ProductSetInput!, $synchronous: Boolean!) {\n    productSet(synchronous: $synchronous, input: $productSet) {\n      product {\n        id\n        title\n        options(first: 5) {\n          name\n          position\n          optionValues {\n            name\n          }\n        }\n        variants(first: 5) {\n          nodes {\n            price\n            selectedOptions {\n              name\n              optionValue {\n                id\n                name\n              }\n            }\n          }\n        }\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"synchronous\": true,\n  \"productSet\": {\n    \"title\": \"A humble tie\",\n    \"productOptions\": [{\"name\"=>\"Pattern\", \"position\"=>1, \"values\"=>[{\"name\"=>\"Plain\"}, {\"name\"=>\"Stripes\"}]}, {\"name\"=>\"Width\", \"position\"=>2, \"values\"=>[{\"name\"=>\"Slim\"}, {\"name\"=>\"Classic\"}]}],\n    \"variants\": [{\"optionValues\"=>[{\"optionName\"=>\"Pattern\", \"name\"=>\"Plain\"}, {\"optionName\"=>\"Width\", \"name\"=>\"Slim\"}], \"price\"=>15.0}, {\"optionValues\"=>[{\"optionName\"=>\"Pattern\", \"name\"=>\"Plain\"}, {\"optionName\"=>\"Width\", \"name\"=>\"Classic\"}], \"price\"=>15.0}, {\"optionValues\"=>[{\"optionName\"=>\"Pattern\", \"name\"=>\"Stripes\"}, {\"optionName\"=>\"Width\", \"name\"=>\"Slim\"}], \"price\"=>15.0}, {\"optionValues\"=>[{\"optionName\"=>\"Pattern\", \"name\"=>\"Stripes\"}, {\"optionName\"=>\"Width\", \"name\"=>\"Classic\"}], \"price\"=>15.0}]\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Remove custom options and variants from a product", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation updateProductToLeaveDefaultVariant($productSet: ProductSetInput!, $synchronous: Boolean!) {\n    productSet(synchronous: $synchronous, input: $productSet) {\n      product {\n        id\n        hasOnlyDefaultVariant\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"synchronous\": true,\n  \"productSet\": {\n    \"id\": \"gid://shopify/Product/20995642\",\n    \"productOptions\": [],\n    \"variants\": []\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Update product variant pricing referencing options and variants by Ids", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation updateProductVariantPricing($input: ProductSetInput!, $synchronous: Boolean!) {\n    productSet(synchronous: $synchronous, input: $input) {\n      product {\n        id\n        title\n        description\n        handle\n        options(first: 5) {\n          name\n          position\n          optionValues {\n            name\n          }\n        }\n        variants(first: 5) {\n          nodes {\n            price\n            compareAtPrice\n            selectedOptions {\n              name\n              optionValue {\n                id\n                name\n              }\n            }\n          }\n        }\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"synchronous\": true,\n  \"input\": {\n    \"id\": \"gid://shopify/Product/1072481473\",\n    \"title\": \"Bike frame\",\n    \"descriptionHtml\": \"Blending durability with aerodynamics\",\n    \"handle\": \"bike-frame\",\n    \"productType\": \"parts\",\n    \"tags\": [\"cycling\", \"bike\", \"parts\"],\n    \"vendor\": \"Your cycling company\",\n    \"status\": \"ACTIVE\",\n    \"productOptions\": [{\"id\"=>\"gid://shopify/ProductOption/1064577289\", \"values\"=>[{\"id\"=>\"gid://shopify/ProductOptionValue/1054675047\"}, {\"id\"=>\"gid://shopify/ProductOptionValue/1054675048\"}, {\"id\"=>\"gid://shopify/ProductOptionValue/1054675049\"}]}, {\"id\"=>\"gid://shopify/ProductOption/1064577290\", \"values\"=>[{\"id\"=>\"gid://shopify/ProductOptionValue/1054675051\"}, {\"id\"=>\"gid://shopify/ProductOptionValue/1054675050\"}, {\"id\"=>\"gid://shopify/ProductOptionValue/1054675052\"}]}],\n    \"variants\": [{\"id\"=>\"gid://shopify/ProductVariant/1070327057\", \"position\"=>1, \"price\"=>94.99, \"compareAtPrice\"=>99.99, \"optionValues\"=>[{\"id\"=>\"gid://shopify/ProductOptionValue/1054675047\", \"optionId\"=>\"gid://shopify/ProductOption/1064577289\"}, {\"id\"=>\"gid://shopify/ProductOptionValue/1054675050\", \"optionId\"=>\"gid://shopify/ProductOption/1064577290\"}]}, {\"id\"=>\"gid://shopify/ProductVariant/1070327058\", \"position\"=>2, \"price\"=>259.99, \"compareAtPrice\"=>299.99, \"optionValues\"=>[{\"id\"=>\"gid://shopify/ProductOptionValue/1054675048\", \"optionId\"=>\"gid://shopify/ProductOption/1064577289\"}, {\"id\"=>\"gid://shopify/ProductOptionValue/1054675051\", \"optionId\"=>\"gid://shopify/ProductOption/1064577290\"}]}, {\"id\"=>\"gid://shopify/ProductVariant/1070327059\", \"position\"=>3, \"price\"=>169.99, \"compareAtPrice\"=>199.99, \"optionValues\"=>[{\"id\"=>\"gid://shopify/ProductOptionValue/1054675049\", \"optionId\"=>\"gid://shopify/ProductOption/1064577289\"}, {\"id\"=>\"gid://shopify/ProductOptionValue/1054675052\", \"optionId\"=>\"gid://shopify/ProductOption/1064577290\"}]}]\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Update product variant pricing referencing options and variants by Ids", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation updateProductVariantPricing($input: ProductSetInput!, $synchronous: Boolean!) {\n    productSet(synchronous: $synchronous, input: $input) {\n      product {\n        id\n        title\n        description\n        handle\n        options(first: 5) {\n          name\n          position\n          optionValues {\n            name\n          }\n        }\n        variants(first: 5) {\n          nodes {\n            price\n            compareAtPrice\n            selectedOptions {\n              name\n              optionValue {\n                id\n                name\n              }\n            }\n          }\n        }\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"synchronous\": true,\n  \"input\": {\n    \"id\": \"gid://shopify/Product/1072481473\",\n    \"title\": \"Bike frame\",\n    \"descriptionHtml\": \"Blending durability with aerodynamics\",\n    \"handle\": \"bike-frame\",\n    \"productType\": \"parts\",\n    \"tags\": [\"cycling\", \"bike\", \"parts\"],\n    \"vendor\": \"Your cycling company\",\n    \"status\": \"ACTIVE\",\n    \"productOptions\": [{\"id\"=>\"gid://shopify/ProductOption/1064577289\", \"values\"=>[{\"id\"=>\"gid://shopify/ProductOptionValue/1054675047\"}, {\"id\"=>\"gid://shopify/ProductOptionValue/1054675048\"}, {\"id\"=>\"gid://shopify/ProductOptionValue/1054675049\"}]}, {\"id\"=>\"gid://shopify/ProductOption/1064577290\", \"values\"=>[{\"id\"=>\"gid://shopify/ProductOptionValue/1054675051\"}, {\"id\"=>\"gid://shopify/ProductOptionValue/1054675050\"}, {\"id\"=>\"gid://shopify/ProductOptionValue/1054675052\"}]}],\n    \"variants\": [{\"id\"=>\"gid://shopify/ProductVariant/1070327057\", \"position\"=>1, \"price\"=>94.99, \"compareAtPrice\"=>99.99, \"optionValues\"=>[{\"id\"=>\"gid://shopify/ProductOptionValue/1054675047\", \"optionId\"=>\"gid://shopify/ProductOption/1064577289\"}, {\"id\"=>\"gid://shopify/ProductOptionValue/1054675050\", \"optionId\"=>\"gid://shopify/ProductOption/1064577290\"}]}, {\"id\"=>\"gid://shopify/ProductVariant/1070327058\", \"position\"=>2, \"price\"=>259.99, \"compareAtPrice\"=>299.99, \"optionValues\"=>[{\"id\"=>\"gid://shopify/ProductOptionValue/1054675048\", \"optionId\"=>\"gid://shopify/ProductOption/1064577289\"}, {\"id\"=>\"gid://shopify/ProductOptionValue/1054675051\", \"optionId\"=>\"gid://shopify/ProductOption/1064577290\"}]}, {\"id\"=>\"gid://shopify/ProductVariant/1070327059\", \"position\"=>3, \"price\"=>169.99, \"compareAtPrice\"=>199.99, \"optionValues\"=>[{\"id\"=>\"gid://shopify/ProductOptionValue/1054675049\", \"optionId\"=>\"gid://shopify/ProductOption/1064577289\"}, {\"id\"=>\"gid://shopify/ProductOptionValue/1054675052\", \"optionId\"=>\"gid://shopify/ProductOption/1064577290\"}]}]\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "productSet reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation createProductAsynchronous($productSet: ProductSetInput!, $synchronous: Boolean!) {\n    productSet(synchronous: $synchronous, input: $productSet) {\n      product {\n        id\n      }\n      productSetOperation {\n        id\n        status\n        userErrors {\n          code\n          field\n          message\n        }\n      }\n      userErrors {\n        code\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"synchronous\": false,\n  \"productSet\": {\n    \"title\": \"Winter hat\",\n    \"productOptions\": [{\"name\"=>\"Color\", \"position\"=>1, \"values\"=>[{\"name\"=>\"Grey\"}, {\"name\"=>\"Black\"}]}],\n    \"variants\": [{\"optionValues\"=>[{\"optionName\"=>\"Color\", \"name\"=>\"Grey\"}], \"price\"=>79.99}, {\"optionValues\"=>[{\"optionName\"=>\"Color\", \"name\"=>\"Black\"}], \"price\"=>69.99}]\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "productUnpublish", "description": "Unpublishes a product.", "arguments": [{"name": "input", "type": "ProductUnpublishInput!", "required": true, "description": "Specifies the product to unpublish and the channel to unpublish it from."}], "returns": [], "examples": []}, {"name": "productUpdate", "description": "Updates a product.\nFor versions 2024-01 and older:\nIf you update a product and only include some variants in the update,\nthen any variants not included will be deleted.\nTo safely manage variants without the risk of\ndeleting excluded variants, use\nproductVariantsBulkUpdate.\nIf you want to update a single variant, then use\nproductVariantUpdate.", "arguments": [{"name": "media", "type": "[CreateMediaInput!]", "required": true, "description": "List of new media to be added to the product."}], "returns": [], "examples": [{"description": "Add new media to an existing product", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation UpdateProductWithNewMedia($input: ProductInput!, $media: [CreateMediaInput!]) {\n    productUpdate(input: $input, media: $media) {\n      product {\n        id\n        media(first: 10) {\n          nodes {\n            alt\n            mediaContentType\n            preview {\n              status\n            }\n          }\n        }\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": {\n    \"id\": \"gid://shopify/Product/912855135\"\n  },\n  \"media\": [{\"originalSource\"=>\"https://cdn.shopify.com/shopifycloud/brochure/assets/sell/image/image-@artdirection-large-1ba8d5de56c361cec6bc487b747c8774b9ec8203f392a99f53c028df8d0fb3fc.png\", \"alt\"=>\"Gray helmet for bikers\", \"mediaContentType\"=>\"IMAGE\"}, {\"originalSource\"=>\"https://www.youtube.com/watch?v=4L8VbGRibj8&list=PLlMkWQ65HlcEoPyG9QayqEaAu0ftj0MMz\", \"alt\"=>\"Testing helmet resistance against impacts\", \"mediaContentType\"=>\"EXTERNAL_VIDEO\"}]\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Create a new metafield and update another on an existing product", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation updateProductMetafields($input: ProductInput!) {\n    productUpdate(input: $input) {\n      product {\n        id\n        metafields(first: 3) {\n          edges {\n            node {\n              id\n              namespace\n              key\n              value\n            }\n          }\n        }\n      }\n      userErrors {\n        message\n        field\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": {\n    \"metafields\": [{\"namespace\"=>\"my_field\", \"key\"=>\"liner_material\", \"type\"=>\"single_line_text_field\", \"value\"=>\"Synthetic Leather\"}, {\"id\"=>\"gid://shopify/Metafield/1069229063\", \"value\"=>\"Rubber\"}],\n    \"id\": \"gid://shopify/Product/108828309\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Update a product's title and return the product ID", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation {\n    productUpdate(input: {id: \"gid://shopify/Product/108828309\", title: \"Sweet new product - GraphQL Edition\"}) {\n      product {\n        id\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "Updates a product", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation ProductUpdate($input: ProductInput!) {\n    productUpdate(input: $input) {\n      product {\n        id\n        title\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": {\n    \"id\": \"gid://shopify/Product/108828309\",\n    \"title\": \"Updated Product Title\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "productUpdate reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation UpdateProductWithNewMedia($input: ProductInput!, $media: [CreateMediaInput!]) {\n    productUpdate(input: $input, media: $media) {\n      product {\n        id\n        media(first: 10) {\n          nodes {\n            alt\n            mediaContentType\n            preview {\n              status\n            }\n          }\n        }\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": {\n    \"id\": \"gid://shopify/Product/912855135\"\n  },\n  \"media\": [{\"originalSource\"=>\"https://cdn.shopify.com/shopifycloud/brochure/assets/sell/image/image-@artdirection-large-1ba8d5de56c361cec6bc487b747c8774b9ec8203f392a99f53c028df8d0fb3fc.png\", \"alt\"=>\"Gray helmet for bikers\", \"mediaContentType\"=>\"IMAGE\"}, {\"originalSource\"=>\"https://www.youtube.com/watch?v=4L8VbGRibj8&list=PLlMkWQ65HlcEoPyG9QayqEaAu0ftj0MMz\", \"alt\"=>\"Testing helmet resistance against impacts\", \"mediaContentType\"=>\"EXTERNAL_VIDEO\"}]\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "productUpdateMedia", "description": "Updates media for a product.", "arguments": [{"name": "media", "type": "[UpdateMediaInput!]!", "required": true, "description": "A list of media updates."}], "returns": [], "examples": [{"description": "Modify an existing Product Image", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation ProductImageUpdate($id: ID!) {\n    productUpdateMedia(productId: $id, media: [{id: \"gid://shopify/MediaImage/853695510\", alt: \"Updated alt text.\"}]) {\n      media {\n        id\n        alt\n        status\n        ... on MediaImage {\n          image {\n            url\n          }\n        }\n      }\n      mediaUserErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/Product/108828309\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Update a product's media fields", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation productUpdateMedia($media: [UpdateMediaInput!]!, $productId: ID!) {\n    productUpdateMedia(media: $media, productId: $productId) {\n      media {\n        alt\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"media\": [{\"alt\"=>\"Some alt text\", \"id\"=>\"gid://shopify/Video/723685877\"}, {\"alt\"=>\"Some more alt text\", \"id\"=>\"gid://shopify/MediaImage/853695510\"}],\n  \"productId\": \"gid://shopify/Product/108828309\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Update new media on a non-existent product", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation productUpdateMedia($media: [UpdateMediaInput!]!, $productId: ID!) {\n    productUpdateMedia(media: $media, productId: $productId) {\n      product {\n        id\n        title\n      }\n      media {\n        alt\n      }\n      mediaUserErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"media\": [{\"alt\"=>\"Some alt text\", \"id\"=>\"gid://shopify/Video/723685877\"}, {\"alt\"=>\"Some more alt text\", \"id\"=>\"gid://shopify/MediaImage/853695510\"}],\n  \"productId\": \"gid://shopify/Product/-1\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Update non-existent media on a non-existent product", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation productUpdateMedia($media: [UpdateMediaInput!]!, $productId: ID!) {\n    productUpdateMedia(media: $media, productId: $productId) {\n      product {\n        id\n        title\n      }\n      media {\n        alt\n      }\n      mediaUserErrors {\n        field\n        message\n        code\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"media\": [{\"alt\"=>\"Some more alt text\", \"id\"=>\"gid://shopify/MediaImage/-1\"}],\n  \"productId\": \"gid://shopify/Product/-1\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Update non-existent media on a valid product", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation productUpdateMedia($media: [UpdateMediaInput!]!, $productId: ID!) {\n    productUpdateMedia(media: $media, productId: $productId) {\n      product {\n        id\n        title\n      }\n      media {\n        alt\n      }\n      mediaUserErrors {\n        field\n        message\n        code\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"media\": [{\"alt\"=>\"Some more alt text\", \"id\"=>\"gid://shopify/MediaImage/-1\"}],\n  \"productId\": \"gid://shopify/Product/108828309\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "productUpdateMedia reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation ProductImageUpdate($id: ID!) {\n    productUpdateMedia(productId: $id, media: [{id: \"gid://shopify/MediaImage/853695510\", alt: \"Updated alt text.\"}]) {\n      media {\n        id\n        alt\n        status\n        ... on MediaImage {\n          image {\n            url\n          }\n        }\n      }\n      mediaUserErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/Product/108828309\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "productVariantAppendMedia", "description": "Appends media from a product to variants of the product.", "arguments": [{"name": "productId", "type": "ID!", "required": true, "description": "Specifies the product associated to the media."}], "returns": [], "examples": [{"description": "Append a product's media to variants of the product", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation productVariantAppendMedia($productId: ID!, $variantMedia: [ProductVariantAppendMediaInput!]!) {\n    productVariantAppendMedia(productId: $productId, variantMedia: $variantMedia) {\n      product {\n        id\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"productId\": \"gid://shopify/Product/1072481072\",\n  \"variantMedia\": [{\"mediaIds\"=>[\"gid://shopify/MediaImage/1072273216\"], \"variantId\"=>\"gid://shopify/ProductVariant/1070325119\"}, {\"mediaIds\"=>[\"gid://shopify/MediaImage/1072273217\"], \"variantId\"=>\"gid://shopify/ProductVariant/1070325120\"}]\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "productVariantAppendMedia reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation productVariantAppendMedia($productId: ID!, $variantMedia: [ProductVariantAppendMediaInput!]!) {\n    productVariantAppendMedia(productId: $productId, variantMedia: $variantMedia) {\n      product {\n        id\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"productId\": \"gid://shopify/Product/1072481072\",\n  \"variantMedia\": [{\"mediaIds\"=>[\"gid://shopify/MediaImage/1072273216\"], \"variantId\"=>\"gid://shopify/ProductVariant/1070325119\"}, {\"mediaIds\"=>[\"gid://shopify/MediaImage/1072273217\"], \"variantId\"=>\"gid://shopify/ProductVariant/1070325120\"}]\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "productVariantDetachMedia", "description": "Detaches media from product variants.", "arguments": [{"name": "productId", "type": "ID!", "required": true, "description": "Specifies the product to which the variants and media are associated."}], "returns": [], "examples": [{"description": "Detach a product variant's media from a product", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation productVariantDetachMedia($productId: ID!, $variantMedia: [ProductVariantDetachMediaInput!]!) {\n    productVariantDetachMedia(productId: $productId, variantMedia: $variantMedia) {\n      product {\n        id\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"productId\": \"gid://shopify/Product/1072481079\",\n  \"variantMedia\": [{\"mediaIds\"=>[\"gid://shopify/MediaImage/1072273220\"], \"variantId\"=>\"gid://shopify/ProductVariant/1070325128\"}, {\"mediaIds\"=>[\"gid://shopify/MediaImage/1072273221\"], \"variantId\"=>\"gid://shopify/ProductVariant/1070325129\"}]\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "productVariantDetachMedia reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation productVariantDetachMedia($productId: ID!, $variantMedia: [ProductVariantDetachMediaInput!]!) {\n    productVariantDetachMedia(productId: $productId, variantMedia: $variantMedia) {\n      product {\n        id\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"productId\": \"gid://shopify/Product/1072481079\",\n  \"variantMedia\": [{\"mediaIds\"=>[\"gid://shopify/MediaImage/1072273220\"], \"variantId\"=>\"gid://shopify/ProductVariant/1070325128\"}, {\"mediaIds\"=>[\"gid://shopify/MediaImage/1072273221\"], \"variantId\"=>\"gid://shopify/ProductVariant/1070325129\"}]\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "productVariantJoinSellingPlanGroups", "description": "Adds multiple selling plan groups to a product variant.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID of the product variant."}], "returns": [], "examples": []}, {"name": "productVariantLeaveSellingPlanGroups", "description": "Remove multiple groups from a product variant.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID of the product variant."}], "returns": [], "examples": []}, {"name": "productVariantRelationshipBulkUpdate", "description": "Creates new bundles, updates existing bundles, and removes bundle components for one or multiple bundles.", "arguments": [{"name": "input", "type": "[ProductVariantRelationshipUpdateInput!]!", "required": true, "description": "The input options for the product variant being updated."}], "returns": [], "examples": [{"description": "Create a bundle by adding components to a product variant", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation CreateBundle($input: [ProductVariantRelationshipUpdateInput!]!) {\n    productVariantRelationshipBulkUpdate(input: $input) {\n      parentProductVariants {\n        id\n        productVariantComponents(first: 10) {\n          nodes {\n            id\n            productVariant {\n              id\n              displayName\n            }\n          }\n        }\n      }\n      userErrors {\n        code\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": [{\"parentProductVariantId\"=>\"gid://shopify/ProductVariant/799757249\", \"productVariantRelationshipsToCreate\"=>[{\"id\"=>\"gid://shopify/ProductVariant/149896808\", \"quantity\"=>1}, {\"id\"=>\"gid://shopify/ProductVariant/709406719\", \"quantity\"=>1}]}]\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Delete a product variant component", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation RemoveABundleComponent($input: [ProductVariantRelationshipUpdateInput!]!) {\n    productVariantRelationshipBulkUpdate(input: $input) {\n      parentProductVariants {\n        id\n        productVariantComponents(first: 10) {\n          nodes {\n            id\n            productVariant {\n              id\n              displayName\n            }\n          }\n        }\n      }\n      userErrors {\n        code\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": [{\"parentProductVariantId\"=>\"gid://shopify/ProductVariant/799757249\", \"productVariantRelationshipsToRemove\"=>[\"gid://shopify/ProductVariant/149896808\"]}]\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Remove all product variant components of a bundle", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation RemoveAllBundleComponents($input: [ProductVariantRelationshipUpdateInput!]!) {\n    productVariantRelationshipBulkUpdate(input: $input) {\n      parentProductVariants {\n        id\n        productVariantComponents(first: 10) {\n          nodes {\n            id\n            productVariant {\n              id\n              displayName\n            }\n          }\n        }\n      }\n      userErrors {\n        code\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": [{\"parentProductVariantId\"=>\"gid://shopify/ProductVariant/799757249\", \"removeAllProductVariantRelationships\"=>true}]\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Update a product variant relationship", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation UpdateBundleComponent($input: [ProductVariantRelationshipUpdateInput!]!) {\n    productVariantRelationshipBulkUpdate(input: $input) {\n      parentProductVariants {\n        id\n        productVariantComponents(first: 10) {\n          nodes {\n            id\n            productVariant {\n              id\n              displayName\n            }\n          }\n        }\n      }\n      userErrors {\n        code\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": [{\"parentProductVariantId\"=>\"gid://shopify/ProductVariant/799757249\", \"productVariantRelationshipsToUpdate\"=>[{\"id\"=>\"gid://shopify/ProductVariant/149896808\", \"quantity\"=>33}]}]\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "productVariantRelationshipBulkUpdate reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation CreateBundle($input: [ProductVariantRelationshipUpdateInput!]!) {\n    productVariantRelationshipBulkUpdate(input: $input) {\n      parentProductVariants {\n        id\n        productVariantComponents(first: 10) {\n          nodes {\n            id\n            productVariant {\n              id\n              displayName\n            }\n          }\n        }\n      }\n      userErrors {\n        code\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": [{\"parentProductVariantId\"=>\"gid://shopify/ProductVariant/799757249\", \"productVariantRelationshipsToCreate\"=>[{\"id\"=>\"gid://shopify/ProductVariant/149896808\", \"quantity\"=>1}, {\"id\"=>\"gid://shopify/ProductVariant/709406719\", \"quantity\"=>1}]}]\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "productVariantsBulkCreate", "description": "Creates multiple variants in a single product. This mutation can be called directly or via the bulkOperation.", "arguments": [{"name": "media", "type": "[CreateMediaInput!]", "required": true, "description": "List of new media to be added to the product."}], "returns": [], "examples": [{"description": "Create a new Product Variant", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation ProductVariantsCreate($productId: ID!, $variants: [ProductVariantsBulkInput!]!) {\n    productVariantsBulkCreate(productId: $productId, variants: $variants) {\n      productVariants {\n        id\n        title\n        selectedOptions {\n          name\n          value\n        }\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"productId\": \"gid://shopify/Product/20995642\",\n  \"variants\": [{\"price\"=>15.99, \"compareAtPrice\"=>19.99, \"optionValues\"=>[{\"name\"=>\"Golden\", \"optionId\"=>\"gid://shopify/ProductOption/328272167\"}]}]\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Create product variants using existing and new option values", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation productVariantsBulkCreate($productId: ID!, $variants: [ProductVariantsBulkInput!]!) {\n    productVariantsBulkCreate(productId: $productId, variants: $variants) {\n      userErrors {\n        field\n        message\n      }\n      product {\n        id\n        options {\n          id\n          name\n          values\n          position\n          optionValues {\n            id\n            name\n            hasVariants\n          }\n        }\n      }\n      productVariants {\n        id\n        title\n        selectedOptions {\n          name\n          value\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"productId\": \"gid://shopify/Product/1072481066\",\n  \"variants\": [{\"optionValues\"=>[{\"name\"=>\"Red\", \"optionName\"=>\"Color\"}, {\"name\"=>\"Brand new style\", \"optionId\"=>\"gid://shopify/ProductOption/1064576530\"}, {\"name\"=>\"Silk\", \"optionName\"=>\"Material\"}], \"price\"=>22.0}, {\"optionValues\"=>[{\"name\"=>\"Brand new style\", \"optionName\"=>\"Style\"}, {\"id\"=>\"gid://shopify/ProductOptionValue/1054672336\", \"optionName\"=>\"Color\"}, {\"name\"=>\"Silk\", \"optionName\"=>\"Material\"}], \"price\"=>23.5}, {\"optionValues\"=>[{\"name\"=>\"Brand new style\", \"optionId\"=>\"gid://shopify/ProductOption/1064576530\"}, {\"id\"=>\"gid://shopify/ProductOptionValue/1054672337\", \"optionId\"=>\"gid://shopify/ProductOption/1064576529\"}, {\"id\"=>\"gid://shopify/ProductOptionValue/1054672339\", \"optionId\"=>\"gid://shopify/ProductOption/1064576531\"}], \"price\"=>29.5}]\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "productVariantsBulkCreate reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation ProductVariantsCreate($productId: ID!, $variants: [ProductVariantsBulkInput!]!) {\n    productVariantsBulkCreate(productId: $productId, variants: $variants) {\n      productVariants {\n        id\n        title\n        selectedOptions {\n          name\n          value\n        }\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"productId\": \"gid://shopify/Product/20995642\",\n  \"variants\": [{\"price\"=>15.99, \"compareAtPrice\"=>19.99, \"optionValues\"=>[{\"name\"=>\"Golden\", \"optionId\"=>\"gid://shopify/ProductOption/328272167\"}]}]\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "productVariantsBulkDelete", "description": "Deletes multiple variants in a single product. This mutation can be called directly or via the bulkOperation.", "arguments": [{"name": "productId", "type": "ID!", "required": true, "description": "The ID of the product with the variants to update."}], "returns": [], "examples": [{"description": "Bulk delete multiple product variants.", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation bulkDeleteProductVariants($productId: ID!, $variantsIds: [ID!]!) {\n    productVariantsBulkDelete(productId: $productId, variantsIds: $variantsIds) {\n      product {\n        id\n        title\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"productId\": \"gid://shopify/Product/20995642\",\n  \"variantsIds\": [\"gid://shopify/ProductVariant/30322695\", \"gid://shopify/ProductVariant/113711323\"]\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Remove an existing Product Variant", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation ProductVariantsDelete($productId: ID!, $variantsIds: [ID!]!) {\n    productVariantsBulkDelete(productId: $productId, variantsIds: $variantsIds) {\n      product {\n        id\n        title\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"productId\": \"gid://shopify/Product/20995642\",\n  \"variantsIds\": [\"gid://shopify/ProductVariant/30322695\", \"gid://shopify/ProductVariant/113711323\"]\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Returns an error if any of the product variants does not belong to the product.", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation bulkDeleteProductVariants($productId: ID!, $variantsIds: [ID!]!) {\n    productVariantsBulkDelete(productId: $productId, variantsIds: $variantsIds) {\n      product {\n        id\n        title\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"productId\": \"gid://shopify/Product/20995642\",\n  \"variantsIds\": [\"gid://shopify/ProductVariant/30322695\", \"gid://shopify/ProductVariant/-1\"]\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "productVariantsBulkDelete reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation bulkDeleteProductVariants($productId: ID!, $variantsIds: [ID!]!) {\n    productVariantsBulkDelete(productId: $productId, variantsIds: $variantsIds) {\n      product {\n        id\n        title\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"productId\": \"gid://shopify/Product/20995642\",\n  \"variantsIds\": [\"gid://shopify/ProductVariant/30322695\", \"gid://shopify/ProductVariant/113711323\"]\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "productVariantsBulkReorder", "description": "Reorders multiple variants in a single product. This mutation can be called directly or via the bulkOperation.", "arguments": [{"name": "positions", "type": "[ProductVariantPositionInput!]!", "required": true, "description": "An array of variant positions."}], "returns": [], "examples": []}, {"name": "productVariantsBulkUpdate", "description": "Updates multiple variants in a single product. This mutation can be called directly or via the bulkOperation.", "arguments": [{"name": "allowPartialUpdates", "type": "Boolean", "required": true, "description": "When partial updates are allowed, valid variant changes may be persisted even if some of\nthe variants updated have invalid data and cannot be persisted.\nWhen partial updates are not allowed, any error will prevent all variants from updating."}], "returns": [], "examples": [{"description": "Create and update metafields when updating product variants in bulk", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation productVariantsBulkUpdate($productId: ID!, $variants: [ProductVariantsBulkInput!]!) {\n    productVariantsBulkUpdate(productId: $productId, variants: $variants) {\n      product {\n        id\n      }\n      productVariants {\n        id\n        metafields(first: 2) {\n          edges {\n            node {\n              namespace\n              key\n              value\n            }\n          }\n        }\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"productId\": \"gid://shopify/Product/20995642\",\n  \"variants\": [{\"id\"=>\"gid://shopify/ProductVariant/1070325197\", \"metafields\"=>[{\"id\"=>\"gid://shopify/Metafield/1069229095\", \"value\"=>\"SYNTHETIC LEATHER\"}, {\"namespace\"=>\"my_fields\", \"key\"=>\"sole_material\", \"value\"=>\"RUBBER\", \"type\"=>\"single_line_text_field\"}]}, {\"id\"=>\"gid://shopify/ProductVariant/1070325198\", \"metafields\"=>[{\"id\"=>\"gid://shopify/Metafield/1069229096\", \"value\"=>\"SYNTHETIC LEATHER\"}, {\"namespace\"=>\"my_fields\", \"key\"=>\"sole_material\", \"value\"=>\"CREPE\", \"type\"=>\"single_line_text_field\"}]}]\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Modify an existing Product Variant", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation ProductVariantsUpdate($productId: ID!) {\n    productVariantsBulkUpdate(productId: $productId, variants: [{id: \"gid://shopify/ProductVariant/1\", barcode: \"12345\"}, {id: \"gid://shopify/ProductVariant/2\", barcode: \"67890\"}]) {\n      product {\n        id\n      }\n      productVariants {\n        id\n        metafields(first: 2) {\n          edges {\n            node {\n              namespace\n              key\n              value\n            }\n          }\n        }\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"productId\": \"gid://shopify/Product/20995642\",\n  \"variants\": [{\"id\"=>\"gid://shopify/ProductVariant/1\", \"barcode\"=>\"12345\"}, {\"id\"=>\"gid://shopify/ProductVariant/2\", \"barcode\"=>\"67890\"}]\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Update product variants with option values", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation UpdateProductVariantsOptionValuesInBulk($productId: ID!, $variants: [ProductVariantsBulkInput!]!) {\n    productVariantsBulkUpdate(productId: $productId, variants: $variants) {\n      product {\n        id\n        title\n        options {\n          id\n          position\n          name\n          values\n          optionValues {\n            id\n            name\n            hasVariants\n          }\n        }\n      }\n      productVariants {\n        id\n        title\n        selectedOptions {\n          name\n          value\n        }\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"productId\": \"gid://shopify/Product/1072481069\",\n  \"variants\": [{\"id\"=>\"gid://shopify/ProductVariant/1070325199\", \"optionValues\"=>[{\"name\"=>\"Green\", \"optionName\"=>\"Color\"}]}, {\"id\"=>\"gid://shopify/ProductVariant/1070325200\", \"optionValues\"=>[{\"name\"=>\"Large\", \"optionId\"=>\"gid://shopify/ProductOption/1064576536\"}, {\"id\"=>\"gid://shopify/ProductOptionValue/1054672367\", \"optionId\"=>\"gid://shopify/ProductOption/1064576537\"}]}, {\"id\"=>\"gid://shopify/ProductVariant/1070325201\", \"optionValues\"=>[{\"name\"=>\"Medium\", \"optionName\"=>\"Size\"}, {\"id\"=>\"gid://shopify/ProductOptionValue/1054672367\", \"optionName\"=>\"Color\"}]}]\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "productVariantsBulkUpdate reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation productVariantsBulkUpdate($productId: ID!, $variants: [ProductVariantsBulkInput!]!) {\n    productVariantsBulkUpdate(productId: $productId, variants: $variants) {\n      product {\n        id\n      }\n      productVariants {\n        id\n        metafields(first: 2) {\n          edges {\n            node {\n              namespace\n              key\n              value\n            }\n          }\n        }\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"productId\": \"gid://shopify/Product/20995642\",\n  \"variants\": [{\"id\"=>\"gid://shopify/ProductVariant/1070325197\", \"metafields\"=>[{\"id\"=>\"gid://shopify/Metafield/1069229095\", \"value\"=>\"SYNTHETIC LEATHER\"}, {\"namespace\"=>\"my_fields\", \"key\"=>\"sole_material\", \"value\"=>\"RUBBER\", \"type\"=>\"single_line_text_field\"}]}, {\"id\"=>\"gid://shopify/ProductVariant/1070325198\", \"metafields\"=>[{\"id\"=>\"gid://shopify/Metafield/1069229096\", \"value\"=>\"SYNTHETIC LEATHER\"}, {\"namespace\"=>\"my_fields\", \"key\"=>\"sole_material\", \"value\"=>\"CREPE\", \"type\"=>\"single_line_text_field\"}]}]\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "quantityPricingByVariantUpdate", "description": "Updates quantity pricing on a price list. You can use the quantityPricingByVariantUpdate mutation to set fixed prices, quantity rules, and quantity price breaks. This mutation does not allow partial successes. If any of the requested resources fail to update, none of the requested resources will be updated. Delete operations are executed before create operations.", "arguments": [{"name": "input", "type": "QuantityPricingByVariantUpdateInput!", "required": true, "description": "The input data used to update the quantity pricing in the price list."}], "returns": [], "examples": [{"description": "Configure quantity pricing for a price list", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation quantityPricingByVariantUpdate($priceListId: ID!, $input: QuantityPricingByVariantUpdateInput!, $companyLocationId: ID!) {\n    quantityPricingByVariantUpdate(priceListId: $priceListId, input: $input) {\n      productVariants {\n        id\n        contextualPricing(context: {companyLocationId: $companyLocationId}) {\n          quantityPriceBreaks(first: 1) {\n            nodes {\n              minimumQuantity\n              price {\n                amount\n                currencyCode\n              }\n            }\n          }\n          quantityRule {\n            minimum\n            maximum\n            increment\n          }\n        }\n      }\n      userErrors {\n        message\n        code\n        field\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"priceListId\": \"gid://shopify/PriceList/467640202\",\n  \"companyLocationId\": \"gid://shopify/CompanyLocation/441870438\",\n  \"input\": {\n    \"quantityPriceBreaksToAdd\": [{\"variantId\"=>\"gid://shopify/ProductVariant/113711323\", \"price\"=>{\"amount\"=>35.0, \"currencyCode\"=>\"USD\"}, \"minimumQuantity\"=>10}],\n    \"quantityPriceBreaksToDelete\": [],\n    \"quantityRulesToAdd\": [{\"variantId\"=>\"gid://shopify/ProductVariant/113711323\", \"minimum\"=>10, \"maximum\"=>100, \"increment\"=>5}],\n    \"quantityRulesToDeleteByVariantId\": [],\n    \"pricesToAdd\": [{\"price\"=>{\"amount\"=>40.0, \"currencyCode\"=>\"USD\"}, \"variantId\"=>\"gid://shopify/ProductVariant/113711323\"}],\n    \"pricesToDeleteByVariantId\": []\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Configuring invalid quantity pricing returns an error", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation quantityPricingByVariantUpdate($priceListId: ID!, $input: QuantityPricingByVariantUpdateInput!, $companyLocationId: ID!) {\n    quantityPricingByVariantUpdate(priceListId: $priceListId, input: $input) {\n      productVariants {\n        id\n        contextualPricing(context: {companyLocationId: $companyLocationId}) {\n          quantityPriceBreaks(first: 1) {\n            nodes {\n              minimumQuantity\n              price {\n                amount\n                currencyCode\n              }\n            }\n          }\n          quantityRule {\n            minimum\n            maximum\n            increment\n          }\n        }\n      }\n      userErrors {\n        message\n        code\n        field\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"priceListId\": \"gid://shopify/PriceList/467640202\",\n  \"companyLocationId\": \"gid://shopify/CompanyLocation/441870438\",\n  \"input\": {\n    \"quantityPriceBreaksToAdd\": [{\"variantId\"=>\"gid://shopify/ProductVariant/113711323\", \"price\"=>{\"amount\"=>35.0, \"currencyCode\"=>\"USD\"}, \"minimumQuantity\"=>5}],\n    \"quantityPriceBreaksToDelete\": [],\n    \"quantityRulesToAdd\": [{\"variantId\"=>\"gid://shopify/ProductVariant/113711323\", \"minimum\"=>10, \"maximum\"=>100, \"increment\"=>5}],\n    \"quantityRulesToDeleteByVariantId\": [],\n    \"pricesToAdd\": [{\"price\"=>{\"amount\"=>40.0, \"currencyCode\"=>\"USD\"}, \"variantId\"=>\"gid://shopify/ProductVariant/113711323\"}],\n    \"pricesToDeleteByVariantId\": []\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "quantityPricingByVariantUpdate reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation quantityPricingByVariantUpdate($priceListId: ID!, $input: QuantityPricingByVariantUpdateInput!, $companyLocationId: ID!) {\n    quantityPricingByVariantUpdate(priceListId: $priceListId, input: $input) {\n      productVariants {\n        id\n        contextualPricing(context: {companyLocationId: $companyLocationId}) {\n          quantityPriceBreaks(first: 1) {\n            nodes {\n              minimumQuantity\n              price {\n                amount\n                currencyCode\n              }\n            }\n          }\n          quantityRule {\n            minimum\n            maximum\n            increment\n          }\n        }\n      }\n      userErrors {\n        message\n        code\n        field\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"priceListId\": \"gid://shopify/PriceList/467640202\",\n  \"companyLocationId\": \"gid://shopify/CompanyLocation/441870438\",\n  \"input\": {\n    \"quantityPriceBreaksToAdd\": [{\"variantId\"=>\"gid://shopify/ProductVariant/113711323\", \"price\"=>{\"amount\"=>35.0, \"currencyCode\"=>\"USD\"}, \"minimumQuantity\"=>10}],\n    \"quantityPriceBreaksToDelete\": [],\n    \"quantityRulesToAdd\": [{\"variantId\"=>\"gid://shopify/ProductVariant/113711323\", \"minimum\"=>10, \"maximum\"=>100, \"increment\"=>5}],\n    \"quantityRulesToDeleteByVariantId\": [],\n    \"pricesToAdd\": [{\"price\"=>{\"amount\"=>40.0, \"currencyCode\"=>\"USD\"}, \"variantId\"=>\"gid://shopify/ProductVariant/113711323\"}],\n    \"pricesToDeleteByVariantId\": []\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "quantityRulesAdd", "description": "Creates or updates existing quantity rules on a price list.\nYou can use the quantityRulesAdd mutation to set order level minimums, maximumums and increments for specific product variants.", "arguments": [{"name": "priceListId", "type": "ID!", "required": true, "description": "The ID of the price list to which the quantity rules will be added or updated."}], "returns": [], "examples": [{"description": "Add multiple quantity rules to a price list", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation quantityRulesAdd($priceListId: ID!, $quantityRules: [QuantityRuleInput!]!) {\n    quantityRulesAdd(priceListId: $priceListId, quantityRules: $quantityRules) {\n      userErrors {\n        field\n        code\n        message\n      }\n      quantityRules {\n        minimum\n        maximum\n        increment\n        isDefault\n        originType\n        productVariant {\n          id\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"priceListId\": \"gid://shopify/PriceList/155157792\",\n  \"quantityRules\": [{\"variantId\"=>\"gid://shopify/ProductVariant/138327650\", \"minimum\"=>1, \"maximum\"=>nil, \"increment\"=>1}, {\"variantId\"=>\"gid://shopify/ProductVariant/113711323\", \"minimum\"=>5, \"maximum\"=>25, \"increment\"=>5}]\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Adding invalid quantity rules returns an error", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation quantityRulesAdd($priceListId: ID!, $quantityRules: [QuantityRuleInput!]!) {\n    quantityRulesAdd(priceListId: $priceListId, quantityRules: $quantityRules) {\n      userErrors {\n        field\n        code\n        message\n      }\n      quantityRules {\n        minimum\n        maximum\n        increment\n        isDefault\n        originType\n        productVariant {\n          id\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"priceListId\": \"gid://shopify/PriceList/155157792\",\n  \"quantityRules\": [{\"variantId\"=>\"gid://shopify/ProductVariant/138327650\", \"minimum\"=>1, \"maximum\"=>5, \"increment\"=>2}, {\"variantId\"=>\"gid://shopify/ProductVariant/113711323\", \"minimum\"=>10, \"maximum\"=>5, \"increment\"=>5}]\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "quantityRulesAdd reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation quantityRulesAdd($priceListId: ID!, $quantityRules: [QuantityRuleInput!]!) {\n    quantityRulesAdd(priceListId: $priceListId, quantityRules: $quantityRules) {\n      userErrors {\n        field\n        code\n        message\n      }\n      quantityRules {\n        minimum\n        maximum\n        increment\n        isDefault\n        originType\n        productVariant {\n          id\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"priceListId\": \"gid://shopify/PriceList/155157792\",\n  \"quantityRules\": [{\"variantId\"=>\"gid://shopify/ProductVariant/138327650\", \"minimum\"=>1, \"maximum\"=>nil, \"increment\"=>1}, {\"variantId\"=>\"gid://shopify/ProductVariant/113711323\", \"minimum\"=>5, \"maximum\"=>25, \"increment\"=>5}]\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "quantityRulesDelete", "description": "Deletes specific quantity rules from a price list using a product variant ID.\nYou can use the quantityRulesDelete mutation to delete a set of quantity rules from a price list.", "arguments": [{"name": "priceListId", "type": "ID!", "required": true, "description": "The ID of the price list from which the quantity rules will be deleted."}], "returns": [], "examples": [{"description": "Delete multiple quantity rules from a price list", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation quantityRulesDelete($priceListId: ID!, $variantIds: [ID!]!) {\n    quantityRulesDelete(priceListId: $priceListId, variantIds: $variantIds) {\n      deletedQuantityRulesVariantIds\n      userErrors {\n        field\n        code\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"priceListId\": \"gid://shopify/PriceList/225060712\",\n  \"variantIds\": [\"gid://shopify/ProductVariant/43729076\", \"gid://shopify/ProductVariant/138327650\"]\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "quantityRulesDelete reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation quantityRulesDelete($priceListId: ID!, $variantIds: [ID!]!) {\n    quantityRulesDelete(priceListId: $priceListId, variantIds: $variantIds) {\n      deletedQuantityRulesVariantIds\n      userErrors {\n        field\n        code\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"priceListId\": \"gid://shopify/PriceList/225060712\",\n  \"variantIds\": [\"gid://shopify/ProductVariant/43729076\", \"gid://shopify/ProductVariant/138327650\"]\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "sellingPlanGroupAddProducts", "description": "Adds multiple products to a selling plan group.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID of the selling plan group."}], "returns": [], "examples": []}, {"name": "sellingPlanGroupAddProductVariants", "description": "Adds multiple product variants to a selling plan group.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID of the selling plan group."}], "returns": [], "examples": []}, {"name": "sellingPlanGroupCreate", "description": "Creates a Selling Plan Group.", "arguments": [{"name": "input", "type": "SellingPlanGroupInput!", "required": true, "description": "The properties of the new Selling Plan Group."}], "returns": [], "examples": [{"description": "Create a TBYB selling plan group", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation createSellingPlanGroup($input: SellingPlanGroupInput!, $resources: SellingPlanGroupResourceInput) {\n    sellingPlanGroupCreate(input: $input, resources: $resources) {\n      sellingPlanGroup {\n        id\n        sellingPlans(first: 1) {\n          edges {\n            node {\n              id\n            }\n          }\n        }\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": {\n    \"name\": \"TBYB\",\n    \"merchantCode\": \"tbyb\",\n    \"options\": [\"Try before you buy\"],\n    \"sellingPlansToCreate\": [{\"name\"=>\"TBYB\", \"options\"=>\"Try free for 14 days\", \"category\"=>\"TRY_BEFORE_YOU_BUY\", \"billingPolicy\"=>{\"fixed\"=>{\"checkoutCharge\"=>{\"type\"=>\"PRICE\", \"value\"=>{\"fixedValue\"=>0}}, \"remainingBalanceChargeTrigger\"=>\"TIME_AFTER_CHECKOUT\", \"remainingBalanceChargeTimeAfterCheckout\"=>\"P14D\"}}, \"inventoryPolicy\"=>{\"reserve\"=>\"ON_SALE\"}, \"deliveryPolicy\"=>{\"fixed\"=>{\"fulfillmentTrigger\"=>\"ASAP\"}}}]\n  },\n  \"resources\": {\n    \"productIds\": [\"gid://shopify/Product/121709582\"],\n    \"productVariantIds\": []\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Create a prepaid selling plan group with anchor dates", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation createSellingPlanGroup($input: SellingPlanGroupInput!, $resources: SellingPlanGroupResourceInput) {\n    sellingPlanGroupCreate(input: $input, resources: $resources) {\n      sellingPlanGroup {\n        id\n        sellingPlans(first: 1) {\n          edges {\n            node {\n              id\n            }\n          }\n        }\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": {\n    \"name\": \"Delivered every week and billed every three weeks\",\n    \"merchantCode\": \"prepaid-weekly\",\n    \"options\": [\"1 week\"],\n    \"sellingPlansToCreate\": [{\"name\"=>\"Delivered every week\", \"options\"=>\"1 Week(s)\", \"category\"=>\"SUBSCRIPTION\", \"billingPolicy\"=>{\"recurring\"=>{\"interval\"=>\"WEEK\", \"intervalCount\"=>3, \"anchors\"=>[{\"cutoffDay\"=>2, \"day\"=>4, \"type\"=>\"WEEKDAY\"}]}}, \"pricingPolicies\"=>[{\"fixed\"=>{\"adjustmentType\"=>\"PERCENTAGE\", \"adjustmentValue\"=>{\"percentage\"=>25.0}}}], \"deliveryPolicy\"=>{\"recurring\"=>{\"interval\"=>\"WEEK\", \"intervalCount\"=>1, \"anchors\"=>[{\"cutoffDay\"=>2, \"day\"=>4, \"type\"=>\"WEEKDAY\"}]}}}]\n  },\n  \"resources\": {\n    \"productIds\": [\"gid://shopify/Product/121709582\"],\n    \"productVariantIds\": []\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Create a selling plan group with metafields", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation createSellingPlanGroup($input: SellingPlanGroupInput!, $resources: SellingPlanGroupResourceInput) {\n    sellingPlanGroupCreate(input: $input, resources: $resources) {\n      sellingPlanGroup {\n        id\n        sellingPlans(first: 1) {\n          edges {\n            node {\n              id\n              metafields(first: 1) {\n                edges {\n                  node {\n                    id\n                    namespace\n                    key\n                    value\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": {\n    \"name\": \"Subscribe and save\",\n    \"merchantCode\": \"subscribe-and-save\",\n    \"appId\": \"groovy\",\n    \"options\": [\"Delivery every\", \"Delivery interval\", \"Fun every\"],\n    \"position\": 1,\n    \"description\": \"Subscribe and save group\",\n    \"sellingPlansToCreate\": [{\"name\"=>\"Pay every month deliver every month\", \"options\"=>[\"1\", \"month\", \"day\"], \"metafields\"=>[{\"namespace\"=>\"for_testing\", \"key\"=>\"my_key\", \"value\"=>\"selling plan metafield\", \"type\"=>\"single_line_text_field\"}], \"position\"=>1, \"category\"=>\"SUBSCRIPTION\", \"billingPolicy\"=>{\"recurring\"=>{\"interval\"=>\"MONTH\", \"intervalCount\"=>1, \"anchors\"=>[{\"type\"=>\"MONTHDAY\", \"day\"=>26}]}}, \"deliveryPolicy\"=>{\"recurring\"=>{\"interval\"=>\"MONTH\", \"intervalCount\"=>1, \"anchors\"=>[{\"type\"=>\"MONTHDAY\", \"day\"=>26}], \"cutoff\"=>5, \"intent\"=>\"FULFILLMENT_BEGIN\", \"preAnchorBehavior\"=>\"ASAP\"}}, \"inventoryPolicy\"=>{\"reserve\"=>\"ON_SALE\"}, \"pricingPolicies\"=>[{\"fixed\"=>{\"adjustmentType\"=>\"PERCENTAGE\", \"adjustmentValue\"=>{\"percentage\"=>25.0}}}, {\"recurring\"=>{\"afterCycle\"=>3, \"adjustmentType\"=>\"PERCENTAGE\", \"adjustmentValue\"=>{\"percentage\"=>26.0}}}]}]\n  },\n  \"resources\": {\n\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "sellingPlanGroupCreate reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation createSellingPlanGroup($input: SellingPlanGroupInput!, $resources: SellingPlanGroupResourceInput) {\n    sellingPlanGroupCreate(input: $input, resources: $resources) {\n      sellingPlanGroup {\n        id\n        sellingPlans(first: 1) {\n          edges {\n            node {\n              id\n            }\n          }\n        }\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": {\n    \"name\": \"TBYB\",\n    \"merchantCode\": \"tbyb\",\n    \"options\": [\"Try before you buy\"],\n    \"sellingPlansToCreate\": [{\"name\"=>\"TBYB\", \"options\"=>\"Try free for 14 days\", \"category\"=>\"TRY_BEFORE_YOU_BUY\", \"billingPolicy\"=>{\"fixed\"=>{\"checkoutCharge\"=>{\"type\"=>\"PRICE\", \"value\"=>{\"fixedValue\"=>0}}, \"remainingBalanceChargeTrigger\"=>\"TIME_AFTER_CHECKOUT\", \"remainingBalanceChargeTimeAfterCheckout\"=>\"P14D\"}}, \"inventoryPolicy\"=>{\"reserve\"=>\"ON_SALE\"}, \"deliveryPolicy\"=>{\"fixed\"=>{\"fulfillmentTrigger\"=>\"ASAP\"}}}]\n  },\n  \"resources\": {\n    \"productIds\": [\"gid://shopify/Product/121709582\"],\n    \"productVariantIds\": []\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "sellingPlanGroupDelete", "description": "Delete a Selling Plan Group. This does not affect subscription contracts.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The id of the selling plan group to delete."}], "returns": [], "examples": []}, {"name": "sellingPlanGroupRemoveProducts", "description": "Removes multiple products from a selling plan group.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID of the selling plan group."}], "returns": [], "examples": []}, {"name": "sellingPlanGroupRemoveProductVariants", "description": "Removes multiple product variants from a selling plan group.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID of the selling plan group."}], "returns": [], "examples": []}, {"name": "sellingPlanGroupUpdate", "description": "Update a Selling Plan Group.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The Selling Plan Group to update."}], "returns": [], "examples": [{"description": "Update a selling plan group and its metafields", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation sellingPlanGroupUpdate($id: ID!, $input: SellingPlanGroupInput!) {\n    sellingPlanGroupUpdate(id: $id, input: $input) {\n      sellingPlanGroup {\n        id\n        sellingPlans(first: 1) {\n          edges {\n            node {\n              id\n              metafields(first: 1) {\n                edges {\n                  node {\n                    id\n                    namespace\n                    key\n                    value\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/SellingPlanGroup/964742479\",\n  \"input\": {\n    \"sellingPlansToUpdate\": [{\"id\"=>\"gid://shopify/SellingPlan/563068713\", \"metafields\"=>[{\"value\"=>\"waterproof\", \"type\"=>\"single_line_text_field\", \"key\"=>\"test_key\", \"namespace\"=>\"example-selling-plan\"}]}]\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "sellingPlanGroupUpdate reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation sellingPlanGroupUpdate($id: ID!, $input: SellingPlanGroupInput!) {\n    sellingPlanGroupUpdate(id: $id, input: $input) {\n      sellingPlanGroup {\n        id\n        sellingPlans(first: 1) {\n          edges {\n            node {\n              id\n              metafields(first: 1) {\n                edges {\n                  node {\n                    id\n                    namespace\n                    key\n                    value\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/SellingPlanGroup/964742479\",\n  \"input\": {\n    \"sellingPlansToUpdate\": [{\"id\"=>\"gid://shopify/SellingPlan/563068713\", \"metafields\"=>[{\"value\"=>\"waterproof\", \"type\"=>\"single_line_text_field\", \"key\"=>\"test_key\", \"namespace\"=>\"example-selling-plan\"}]}]\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "stagedUploadsCreate", "description": "Creates staged upload targets for each input. This is the first step in the upload process.\nThe returned staged upload targets' URL and parameter fields can be used to send a request\nto upload the file described in the corresponding input.\nFor more information on the upload process, refer to\nUpload media to Shopify.", "arguments": [{"name": "input", "type": "[StagedUploadInput!]!", "required": true, "description": "The information required to generate staged upload targets."}], "returns": [], "examples": [{"description": "Create staged upload targets", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation stagedUploadsCreate($input: [StagedUploadInput!]!) {\n    stagedUploadsCreate(input: $input) {\n      stagedTargets {\n        url\n        resourceUrl\n        parameters {\n          name\n          value\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": [{\"filename\"=>\"image1.png\", \"mimeType\"=>\"image/png\", \"httpMethod\"=>\"POST\", \"resource\"=>\"IMAGE\"}, {\"filename\"=>\"video.mp4\", \"mimeType\"=>\"video/mp4\", \"fileSize\"=>\"1234\", \"resource\"=>\"VIDEO\"}, {\"filename\"=>\"3d_model.glb\", \"mimeType\"=>\"model/gltf-binary\", \"resource\"=>\"MODEL_3D\", \"fileSize\"=>\"456\"}]\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "stagedUploadsCreate reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation stagedUploadsCreate($input: [StagedUploadInput!]!) {\n    stagedUploadsCreate(input: $input) {\n      stagedTargets {\n        url\n        resourceUrl\n        parameters {\n          name\n          value\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": [{\"filename\"=>\"image1.png\", \"mimeType\"=>\"image/png\", \"httpMethod\"=>\"POST\", \"resource\"=>\"IMAGE\"}, {\"filename\"=>\"video.mp4\", \"mimeType\"=>\"video/mp4\", \"fileSize\"=>\"1234\", \"resource\"=>\"VIDEO\"}, {\"filename\"=>\"3d_model.glb\", \"mimeType\"=>\"model/gltf-binary\", \"resource\"=>\"MODEL_3D\", \"fileSize\"=>\"456\"}]\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}], "objects": [{"name": "AddAllProductsOperation", "description": "Represents an operation publishing all products to a publication.", "fields_and_connections": [{"name": "id", "type": "ID!", "description": "A globally-unique ID.", "not_nullable": true}], "examples": []}, {"name": "AppCatalog", "description": "A catalog that defines the publication associated with an app.", "fields_and_connections": [{"name": "apps", "type": "AppConnection!", "description": "The apps associated with the catalog.", "not_nullable": true}], "examples": []}, {"name": "BundlesFeature", "description": "Represents the Bundles feature configuration for the shop.", "fields_and_connections": [{"name": "eligibleForBundles", "type": "Boolean!", "description": "Whether a shop is configured properly to sell bundles.", "not_nullable": true}], "examples": []}, {"name": "CatalogCsvOperation", "description": "A catalog csv operation represents a CSV file import.", "fields_and_connections": [{"name": "id", "type": "ID!", "description": "A globally-unique ID.", "not_nullable": true}], "examples": []}, {"name": "Channel", "description": "A channel represents an app where you sell a group of products and collections.\nA channel can be a platform or marketplace such as Facebook or Pinterest, an online store, or POS.", "fields_and_connections": [{"name": "app", "type": "App!", "description": "The underlying app used by the channel.", "not_nullable": true}], "examples": []}, {"name": "Collection", "description": "Represents a group of products that can be displayed in online stores and other sales channels in categories, which makes it easy for customers to find them. For example, an athletics store might create different collections for running attire, shoes, and accessories.\nCollections can be defined by conditions, such as whether they match certain product tags. These are called smart or automated collections.\nCollections can also be created for a custom group of products. These are called custom or manual collections.", "fields_and_connections": [{"name": "availablePublicationsCount", "type": "Count", "description": "The number of\npublications\nthat a resource is published to, without\nfeedback errors.", "not_nullable": true}], "examples": []}, {"name": "CollectionPublication", "description": "Represents the publications where a collection is published.", "fields_and_connections": [{"name": "collection", "type": "Collection!", "description": "The collection to be published on the publication.", "not_nullable": true}], "examples": []}, {"name": "CollectionRule", "description": "Represents at rule that's used to assign products to a collection.", "fields_and_connections": [{"name": "column", "type": "CollectionRuleColumn!", "description": "The attribute that the rule focuses on. For example, title or product_type.", "not_nullable": true}], "examples": []}, {"name": "CollectionRuleCategoryCondition", "description": "Specifies the taxonomy category to used for the condition.", "fields_and_connections": [{"name": "value", "type": "TaxonomyCategory!", "description": "The taxonomy category used as condition.", "not_nullable": true}], "examples": []}, {"name": "CollectionRuleConditions", "description": "This object defines all columns and allowed relations that can be used in rules for smart collections to automatically include the matching products.", "fields_and_connections": [{"name": "allowedRelations", "type": "[CollectionRuleRelation!]!", "description": "Allowed relations of the rule.", "not_nullable": true}], "examples": []}, {"name": "CollectionRuleMetafieldCondition", "description": "Identifies a metafield definition used as a rule for the smart collection.", "fields_and_connections": [{"name": "metafieldDefinition", "type": "MetafieldDefinition!", "description": "The metafield definition associated with the condition.", "not_nullable": true}], "examples": []}, {"name": "CollectionRuleProductCategoryCondition", "description": "Specifies the condition for a Product Category field.", "fields_and_connections": [{"name": "value", "type": "ProductTaxonomyNode!", "description": "The value of the condition.", "not_nullable": true}], "examples": []}, {"name": "CollectionRuleSet", "description": "The set of rules that are used to determine which products are included in the collection.", "fields_and_connections": [{"name": "appliedDisjunctively", "type": "Boolean!", "description": "Whether products must match any or all of the rules to be included in the collection.\nIf true, then products must match at least one of the rules to be included in the collection.\nIf false, then products must match all of the rules to be included in the collection.", "not_nullable": true}], "examples": []}, {"name": "CollectionRuleTextCondition", "description": "Specifies the condition for a text field.", "fields_and_connections": [{"name": "value", "type": "String!", "description": "The value of the condition.", "not_nullable": true}], "examples": []}, {"name": "CombinedListing", "description": "A combined listing of products.", "fields_and_connections": [{"name": "combinedListingChildren", "type": "CombinedListingChildConnection!", "description": "A list of child products in the combined listing.", "not_nullable": true}], "examples": []}, {"name": "CombinedListingChild", "description": "A child of a combined listing.", "fields_and_connections": [{"name": "parentVariant", "type": "ProductVariant!", "description": "The parent variant.", "not_nullable": true}], "examples": []}, {"name": "CompanyLocationCatalog", "description": "A list of products with publishing and pricing information associated with company locations.", "fields_and_connections": [{"name": "companyLocations", "type": "CompanyLocationConnection!", "description": "The company locations associated with the catalog.", "not_nullable": true}], "examples": []}, {"name": "ExternalVideo", "description": "Represents a video hosted outside of Shopify.", "fields_and_connections": [{"name": "alt", "type": "String", "description": "A word or phrase to describe the contents or the function of a file.", "not_nullable": true}], "examples": []}, {"name": "FileError", "description": "A file error. This typically occurs when there is an issue with the file itself causing it to fail validation.\nCheck the file before attempting to upload again.", "fields_and_connections": [{"name": "code", "type": "FileErrorCode!", "description": "Code representing the type of error.", "not_nullable": true}], "examples": []}, {"name": "GenericFile", "description": "Represents any file other than HTML.", "fields_and_connections": [{"name": "alt", "type": "String", "description": "A word or phrase to describe the contents or the function of a file.", "not_nullable": true}], "examples": []}, {"name": "LinkedMetafield", "description": "The identifier for the metafield linked to this option.\nThis API is currently in early access. See Metafield-linked product options for more details.", "fields_and_connections": [{"name": "key", "type": "String", "description": "Key of the metafield the option is linked to.", "not_nullable": false}], "examples": []}, {"name": "MarketCatalog", "description": "A list of products with publishing and pricing information associated with markets.", "fields_and_connections": [{"name": "id", "type": "ID!", "description": "A globally-unique ID.", "not_nullable": true}], "examples": []}, {"name": "MarketsCatalogsEntitlement", "description": "The entitlements for catalogs.", "fields_and_connections": [{"name": "enabled", "type": "Boolean!", "description": "Whether catalogs are enabled.", "not_nullable": true}], "examples": []}, {"name": "MediaError", "description": "Represents a media error. This typically occurs when there is an issue with the media itself causing it to fail validation.\nCheck the media before attempting to upload again.", "fields_and_connections": [{"name": "code", "type": "MediaErrorCode!", "description": "Code representing the type of error.", "not_nullable": true}], "examples": []}, {"name": "MediaImage", "description": "An image hosted on Shopify.", "fields_and_connections": [{"name": "alt", "type": "String", "description": "A word or phrase to share the nature or contents of a media.", "not_nullable": true}], "examples": []}, {"name": "MediaImageOriginalSource", "description": "The original source for an image.", "fields_and_connections": [{"name": "fileSize", "type": "Int", "description": "The size of the original file in bytes.", "not_nullable": false}], "examples": []}, {"name": "MediaPreviewImage", "description": "Represents the preview image for a media.", "fields_and_connections": [{"name": "image", "type": "Image", "description": "The preview image for the media. Returns null until status is READY.", "not_nullable": true}], "examples": []}, {"name": "MediaWarning", "description": "Represents a media warning. This occurs when there is a non-blocking concern regarding your media.\nConsider reviewing your media to ensure it is correct and its parameters are as expected.", "fields_and_connections": [{"name": "code", "type": "MediaWarningCode!", "description": "The code representing the type of warning.", "not_nullable": true}], "examples": []}, {"name": "MetafieldCapabilitySmartCollectionCondition", "description": "Information about the smart collection condition capability on a metafield definition.", "fields_and_connections": [{"name": "eligible", "type": "Boolean!", "description": "Indicates if the definition is eligible to have the capability.", "not_nullable": true}], "examples": []}, {"name": "Model3d", "description": "Represents a Shopify hosted 3D model.", "fields_and_connections": [{"name": "alt", "type": "String", "description": "A word or phrase to describe the contents or the function of a file.", "not_nullable": true}], "examples": []}, {"name": "Model3dBoundingBox", "description": "Bounding box information of a 3d model.", "fields_and_connections": [{"name": "size", "type": "Vector3!", "description": "Size in meters of the smallest volume which contains the 3d model.", "not_nullable": true}], "examples": []}, {"name": "Model3dSource", "description": "A source for a Shopify-hosted 3d model.\nTypes of sources include GLB and USDZ formatted 3d models, where the former\nis an original 3d model and the latter has been converted from the original.\nIf the original source is in GLB format and over 15 MBs in size, then both the\noriginal and the USDZ formatted source are optimized to reduce the file size.", "fields_and_connections": [{"name": "filesize", "type": "Int!", "description": "The 3d model source's filesize.", "not_nullable": true}], "examples": []}, {"name": "PriceList", "description": "Represents a price list, including information about related prices and eligibility rules.\nYou can use price lists to specify either fixed prices or adjusted relative prices that\noverride initial product variant prices. Price lists are applied to customers\nusing context rules, which determine price list eligibility.\n  For more information on price lists, refer to\n  Support different pricing models.", "fields_and_connections": [{"name": "catalog", "type": "Catalog", "description": "The catalog that the price list is associated with.", "not_nullable": true}], "examples": []}, {"name": "PriceListAdjustment", "description": "The type and value of a price list adjustment.\nFor more information on price lists, refer to\nSupport different pricing models.", "fields_and_connections": [{"name": "type", "type": "PriceListAdjustmentType!", "description": "The type of price adjustment, such as percentage increase or decrease.", "not_nullable": true}], "examples": []}, {"name": "PriceListAdjustmentSettings", "description": "Represents the settings of price list adjustments.", "fields_and_connections": [{"name": "compareAtMode", "type": "PriceListCompareAtMode!", "description": "The type of price list adjustment setting for compare at price.", "not_nullable": true}], "examples": []}, {"name": "PriceListParent", "description": "Represents relative adjustments from one price list to other prices.\n  You can use a PriceListParent to specify an adjusted relative price using a percentage-based\n  adjustment. Adjusted prices work in conjunction with exchange rules and rounding.\n  Adjustment types\n  support both percentage increases and decreases.", "fields_and_connections": [{"name": "adjustment", "type": "PriceListAdjustment!", "description": "A price list adjustment.", "not_nullable": true}], "examples": []}, {"name": "PriceListPrice", "description": "Represents information about pricing for a product variant\n        as defined on a price list, such as the price, compare at price, and origin type. You can use a PriceListPrice to specify a fixed price for a specific product variant. For examples, refer to PriceListFixedPricesAdd and PriceList.", "fields_and_connections": [{"name": "compareAtPrice", "type": "MoneyV2", "description": "The compare-at price of the product variant on this price list.", "not_nullable": true}], "examples": []}, {"name": "Product", "description": "The Product object lets you manage products in a merchant\u2019s store.\nProducts are the goods and services that merchants offer to customers. They can include various details such as title, description, price, images, and options such as size or color.\nYou can use product variants to create or update different versions of the same product.\nYou can also add or update product media.\nProducts can be organized by grouping them into a collection.\nLearn more about working with Shopify's product model,\nincluding limitations and considerations.", "fields_and_connections": [{"name": "availablePublicationsCount", "type": "Count", "description": "The number of\npublications\nthat a resource is published to, without\nfeedback errors.", "not_nullable": true}], "examples": []}, {"name": "ProductBundleComponent", "description": "The product's component information.", "fields_and_connections": [{"name": "componentProduct", "type": "Product!", "description": "The product that's related as a component.", "not_nullable": true}], "examples": []}, {"name": "ProductBundleComponentOptionSelection", "description": "A relationship between a component option and a parent option.", "fields_and_connections": [{"name": "componentOption", "type": "ProductOption!", "description": "The option that existed on the component product prior to the fixed bundle creation.", "not_nullable": true}], "examples": []}, {"name": "ProductBundleComponentOptionSelectionValue", "description": "A component option value related to a bundle line.", "fields_and_connections": [{"name": "selectionStatus", "type": "ProductBundleComponentOptionSelectionStatus!", "description": "Selection status of the option.", "not_nullable": true}], "examples": []}, {"name": "ProductBundleComponentQuantityOption", "description": "A quantity option related to a bundle.", "fields_and_connections": [{"name": "name", "type": "String!", "description": "The name of the option value.", "not_nullable": true}], "examples": []}, {"name": "ProductBundleComponentQuantityOptionValue", "description": "A quantity option value related to a componentized product.", "fields_and_connections": [{"name": "name", "type": "String!", "description": "The name of the option value.", "not_nullable": true}], "examples": []}, {"name": "ProductBundleOperation", "description": "An entity that represents details of an asynchronous\nProductBundleCreate or\nProductBundleUpdate mutation.\nBy querying this entity with the\nproductOperation query\nusing the ID that was returned when the bundle was created or updated, this can be used to check the status of an operation.\nThe status field indicates whether the operation is CREATED, ACTIVE, or COMPLETE.\nThe product field provides the details of the created or updated product.\nThe userErrors field provides mutation errors that occurred during the operation.", "fields_and_connections": [{"name": "id", "type": "ID!", "description": "A globally-unique ID.", "not_nullable": true}], "examples": []}, {"name": "ProductCategory", "description": "The details of a specific product category within the Shopify product taxonomy.", "fields_and_connections": [{"name": "productTaxonomyNode", "type": "ProductTaxonomyNode", "description": "The product taxonomy node associated with the product category.", "not_nullable": false}], "examples": []}, {"name": "ProductCompareAtPriceRange", "description": "The compare-at price range of the product.", "fields_and_connections": [{"name": "maxVariantCompareAtPrice", "type": "MoneyV2!", "description": "The highest variant's compare-at price.", "not_nullable": true}], "examples": []}, {"name": "ProductContextualPricing", "description": "The price of a product in a specific country.\nPrices vary between countries.\nRefer to Product\nfor more information on how to use this object.", "fields_and_connections": [{"name": "fixedQuantityRulesCount", "type": "Int!", "description": "The number of fixed quantity rules for the product's variants on the price list.", "not_nullable": true}], "examples": []}, {"name": "ProductDeleteOperation", "description": "An entity that represents details of an asynchronous\nProductDelete mutation.\nBy querying this entity with the\nproductOperation query\nusing the ID that was returned when the product was deleted, this can be used to check the status of an operation.\nThe status field indicates whether the operation is CREATED, ACTIVE, or COMPLETE.\nThe deletedProductId field provides the ID of the deleted product.\nThe userErrors field provides mutation errors that occurred during the operation.", "fields_and_connections": [{"name": "deletedProductId", "type": "ID", "description": "The ID of the deleted product.", "not_nullable": true}], "examples": []}, {"name": "ProductDuplicateJob", "description": "Represents a product duplication job.", "fields_and_connections": [{"name": "done", "type": "Boolean!", "description": "This indicates if the job is still queued or has been run.", "not_nullable": true}], "examples": []}, {"name": "ProductDuplicateOperation", "description": "An entity that represents details of an asynchronous\nProductDuplicate mutation.\nBy querying this entity with the\nproductOperation query\nusing the ID that was returned\nwhen the product was duplicated,\nthis can be used to check the status of an operation.\nThe status field indicates whether the operation is CREATED, ACTIVE, or COMPLETE.\nThe product field provides the details of the original product.\nThe newProduct field provides the details of the new duplicate of the product.\nThe userErrors field provides mutation errors that occurred during the operation.", "fields_and_connections": [{"name": "id", "type": "ID!", "description": "A globally-unique ID.", "not_nullable": true}], "examples": []}, {"name": "ProductOption", "description": "The product property names. For example, \"Size\", \"Color\", and \"Material\".\nVariants are selected based on permutations of these options.\nThe limit for each product property name is 255 characters.", "fields_and_connections": [{"name": "id", "type": "ID!", "description": "A globally-unique ID.", "not_nullable": true}], "examples": []}, {"name": "ProductOptionValue", "description": "The product option value names. For example, \"Red\", \"Blue\", and \"Green\" for a \"Color\" option.", "fields_and_connections": [{"name": "hasVariants", "type": "Boolean!", "description": "Whether the product option value has any linked variants.", "not_nullable": true}], "examples": []}, {"name": "ProductOptionValueSwatch", "description": "A swatch associated with a product option value.", "fields_and_connections": [{"name": "color", "type": "Color", "description": "The color representation of the swatch.", "not_nullable": false}], "examples": []}, {"name": "ProductPriceRange", "description": "The price range of the product.", "fields_and_connections": [{"name": "maxVariantPrice", "type": "MoneyV2!", "description": "The highest variant's price.", "not_nullable": true}], "examples": []}, {"name": "ProductPriceRangeV2", "description": "The price range of the product.", "fields_and_connections": [{"name": "maxVariantPrice", "type": "MoneyV2!", "description": "The highest variant's price.", "not_nullable": true}], "examples": []}, {"name": "ProductPublication", "description": "Represents the channels where a product is published.", "fields_and_connections": [{"name": "channel", "type": "Channel!", "description": "The channel where the product was or is published.", "not_nullable": true}], "examples": []}, {"name": "ProductSetOperation", "description": "An entity that represents details of an asynchronous\nProductSet mutation.\nBy querying this entity with the\nproductOperation query\nusing the ID that was returned\nwhen the product was created or updated,\nthis can be used to check the status of an operation.\nThe status field indicates whether the operation is CREATED, ACTIVE, or COMPLETE.\nThe product field provides the details of the created or updated product.\nThe userErrors field provides mutation errors that occurred during the operation.", "fields_and_connections": [{"name": "id", "type": "ID!", "description": "A globally-unique ID.", "not_nullable": true}], "examples": []}, {"name": "ProductTaxonomyNode", "description": "Represents a Shopify product taxonomy node.", "fields_and_connections": [{"name": "fullName", "type": "String!", "description": "The full name of the product taxonomy node. For example,  Animals & Pet Supplies > Pet Supplies > Dog Supplies > Dog Beds.", "not_nullable": true}], "examples": []}, {"name": "ProductVariant", "description": "Represents a product variant.", "fields_and_connections": [{"name": "availableForSale", "type": "Boolean!", "description": "Whether the product variant is available for sale.", "not_nullable": true}], "examples": []}, {"name": "ProductVariantComponent", "description": "A product variant component associated with a product variant.", "fields_and_connections": [{"name": "id", "type": "ID!", "description": "A globally-unique ID.", "not_nullable": true}], "examples": []}, {"name": "ProductVariantContextualPricing", "description": "The price of a product variant in a specific country.\nPrices vary between countries.", "fields_and_connections": [{"name": "compareAtPrice", "type": "MoneyV2", "description": "The final compare-at price after all adjustments are applied.", "not_nullable": true}], "examples": []}, {"name": "ProductVariantPricePair", "description": "The compare-at price and price of a variant sharing a currency.", "fields_and_connections": [{"name": "compareAtPrice", "type": "MoneyV2", "description": "The compare-at price of the variant with associated currency.", "not_nullable": true}], "examples": []}, {"name": "PublicationResourceOperation", "description": "A bulk update operation on a publication.", "fields_and_connections": [{"name": "id", "type": "ID!", "description": "A globally-unique ID.", "not_nullable": true}], "examples": []}, {"name": "QuantityPriceBreak", "description": "Quantity price breaks lets you offer different rates that are based on the\namount of a specific variant being ordered.", "fields_and_connections": [{"name": "id", "type": "ID!", "description": "A globally-unique ID.", "not_nullable": true}], "examples": []}, {"name": "QuantityRule", "description": "The quantity rule for the product variant in a given context.", "fields_and_connections": [{"name": "increment", "type": "Int!", "description": "The value that specifies the quantity increment between minimum and maximum of the rule.\nOnly quantities divisible by this value will be considered valid.\nThe increment must be lower than or equal to the minimum and the maximum, and both minimum and maximum\nmust be divisible by this value.", "not_nullable": true}], "examples": []}, {"name": "ResourcePublication", "description": "A resource publication represents information about the publication of a resource.\nAn instance of ResourcePublication, unlike ResourcePublicationV2, can be neither published or scheduled to be published.\nSee ResourcePublicationV2 for more context.", "fields_and_connections": [{"name": "isPublished", "type": "Boolean!", "description": "Whether the resource publication is published. Also returns true if the resource publication is scheduled to be published.\nIf false, then the resource publication is neither published nor scheduled to be published.", "not_nullable": true}], "examples": []}, {"name": "ResourcePublicationV2", "description": "A resource publication represents information about the publication of a resource.\nUnlike ResourcePublication, an instance of ResourcePublicationV2 can't be unpublished. It must either be published or scheduled to be published.\nSee ResourcePublication for more context.", "fields_and_connections": [{"name": "isPublished", "type": "Boolean!", "description": "Whether the resource publication is published. If true, then the resource publication is published to the publication.\nIf false, then the resource publication is staged to be published to the publication.", "not_nullable": true}], "examples": []}, {"name": "RestrictedForResource", "description": "Information about product is restricted for a given resource.", "fields_and_connections": [{"name": "restricted", "type": "Boolean!", "description": "Returns true when the product is restricted for the given resource.", "not_nullable": true}], "examples": []}, {"name": "RowCount", "description": "A row count represents rows on background operation.", "fields_and_connections": [{"name": "count", "type": "Int!", "description": "Estimated number of rows contained within this background operation.", "not_nullable": true}], "examples": []}, {"name": "SelectedOption", "description": "Properties used by customers to select a product variant.\nProducts can have multiple options, like different sizes or colors.", "fields_and_connections": [{"name": "name", "type": "String!", "description": "The product option\u2019s name.", "not_nullable": true}], "examples": []}, {"name": "SellingPlan", "description": "Represents how a product can be sold and purchased. Selling plans and associated records (selling plan groups\nand policies) are deleted 48 hours after a merchant uninstalls their subscriptions app. We recommend backing\nup these records if you need to restore them later.\nFor more information on selling plans, refer to\nCreating and managing selling plans.", "fields_and_connections": [{"name": "billingPolicy", "type": "SellingPlanBillingPolicy!", "description": "A selling plan policy which describes the recurring billing details.", "not_nullable": true}], "examples": []}, {"name": "SellingPlanAnchor", "description": "Specifies the date when delivery or fulfillment is completed by a merchant for a given time cycle. You can also\ndefine a cutoff for which customers are eligible to enter this cycle and the desired behavior for customers who\nstart their subscription inside the cutoff period.\nSome example scenarios where anchors can be useful to implement advanced delivery behavior:\n\nA merchant starts fulfillment on a specific date every month.\nA merchant wants to bill the 1st of every quarter.\nA customer expects their delivery every Tuesday.\n\nFor more details, see About Selling Plans.", "fields_and_connections": [{"name": "cutoffDay", "type": "Int", "description": "The cutoff day for the anchor. Specifies a buffer period before the anchor date for orders to be included in a\ndelivery or fulfillment cycle.\nIf type is WEEKDAY, then the value must be between 1-7. Shopify interprets\nthe days of the week according to ISO 8601, where 1 is Monday.\nIf type is MONTHDAY, then the value must be between 1-31.\nIf type is YEARDAY, then the value must be null.", "not_nullable": true}], "examples": []}, {"name": "SellingPlanCheckoutCharge", "description": "The amount charged at checkout when the full amount isn't charged at checkout.", "fields_and_connections": [{"name": "type", "type": "SellingPlanCheckoutChargeType!", "description": "The charge type for the checkout charge.", "not_nullable": true}], "examples": []}, {"name": "SellingPlanCheckoutChargePercentageValue", "description": "The percentage value of the price used for checkout charge.", "fields_and_connections": [{"name": "percentage", "type": "Float!", "description": "The percentage value of the price used for checkout charge.", "not_nullable": true}], "examples": []}, {"name": "SellingPlanFixedBillingPolicy", "description": "The fixed selling plan billing policy defines how much of the price of the product will be billed to customer\nat checkout. If there is an outstanding balance, it determines when it will be paid.", "fields_and_connections": [{"name": "checkoutCharge", "type": "SellingPlanCheckoutCharge!", "description": "The checkout charge when the full amount isn't charged at checkout.", "not_nullable": true}], "examples": []}, {"name": "SellingPlanFixedDeliveryPolicy", "description": "Represents a fixed selling plan delivery policy.", "fields_and_connections": [{"name": "anchors", "type": "[SellingPlanAnchor!]!", "description": "The specific anchor dates upon which the delivery interval calculations should be made.", "not_nullable": true}], "examples": []}, {"name": "SellingPlanFixedPricingPolicy", "description": "Represents the pricing policy of a subscription or deferred purchase option selling plan.\nThe selling plan fixed pricing policy works with the billing and delivery policy\nto determine the final price. Discounts are divided among fulfillments.\nFor example, a subscription with a $10 discount and two deliveries will have a $5\ndiscount applied to each delivery.", "fields_and_connections": [{"name": "adjustmentType", "type": "SellingPlanPricingPolicyAdjustmentType!", "description": "The price adjustment type.", "not_nullable": true}], "examples": []}, {"name": "SellingPlanGroup", "description": "Represents a selling method (for example, \"Subscribe and save\" or \"Pre-paid\"). Selling plan groups\nand associated records (selling plans and policies) are deleted 48 hours after a merchant\nuninstalls their subscriptions app. We recommend backing up these records if you need to restore them later.", "fields_and_connections": [{"name": "appId", "type": "String", "description": "The ID for app, exposed in Liquid and product JSON.", "not_nullable": true}], "examples": []}, {"name": "SellingPlanInventoryPolicy", "description": "The selling plan inventory policy.", "fields_and_connections": [{"name": "reserve", "type": "SellingPlanReserve!", "description": "When to reserve inventory for the order.", "not_nullable": true}], "examples": []}, {"name": "SellingPlanPricingPolicyPercentageValue", "description": "The percentage value of a selling plan pricing policy percentage type.", "fields_and_connections": [{"name": "percentage", "type": "Float!", "description": "The percentage value.", "not_nullable": true}], "examples": []}, {"name": "SellingPlanRecurringBillingPolicy", "description": "Represents a recurring selling plan billing policy.", "fields_and_connections": [{"name": "anchors", "type": "[SellingPlanAnchor!]!", "description": "Specific anchor dates upon which the billing interval calculations should be made.", "not_nullable": true}], "examples": []}, {"name": "SellingPlanRecurringDeliveryPolicy", "description": "Represents a recurring selling plan delivery policy.", "fields_and_connections": [{"name": "anchors", "type": "[SellingPlanAnchor!]!", "description": "The specific anchor dates upon which the delivery interval calculations should be made.", "not_nullable": true}], "examples": []}, {"name": "SellingPlanRecurringPricingPolicy", "description": "Represents a recurring selling plan pricing policy. It applies after the fixed pricing policy. By using the afterCycle parameter, you can specify the cycle when the recurring pricing policy comes into effect. Recurring pricing policies are not available for deferred purchase options.", "fields_and_connections": [{"name": "adjustmentType", "type": "SellingPlanPricingPolicyAdjustmentType!", "description": "The price adjustment type.", "not_nullable": true}], "examples": []}, {"name": "StagedMediaUploadTarget", "description": "Information about a staged upload target, which should be used to send a request to upload\nthe file.\nFor more information on the upload process, refer to\nUpload media to Shopify.", "fields_and_connections": [{"name": "parameters", "type": "[StagedUploadParameter!]!", "description": "Parameters needed to authenticate a request to upload the file.", "not_nullable": true}], "examples": []}, {"name": "StandardizedProductType", "description": "Represents the details of a specific type of product within the Shopify product taxonomy.", "fields_and_connections": [{"name": "productTaxonomyNode", "type": "ProductTaxonomyNode", "description": "The product taxonomy node associated with the standardized product type.", "not_nullable": false}], "examples": []}, {"name": "Taxonomy", "description": "The Taxonomy resource lets you access the categories, attributes and values of a taxonomy tree.", "fields_and_connections": [{"name": "categories", "type": "TaxonomyCategoryConnection!", "description": "Returns the categories of the product taxonomy based on the arguments provided.\nIf a search argument is provided, then all categories that match the search query globally are returned.\nIf a children_of argument is provided, then all children of the specified category are returned.\nIf a siblings_of argument is provided, then all siblings of the specified category are returned.\nIf a decendents_of argument is provided, then all descendents of the specified category are returned.\nIf no arguments are provided, then all the top-level categories of the taxonomy are returned.", "not_nullable": true}], "examples": []}, {"name": "TaxonomyAttribute", "description": "A Shopify product taxonomy attribute.", "fields_and_connections": [{"name": "id", "type": "ID!", "description": "A globally-unique ID.", "not_nullable": true}], "examples": []}, {"name": "TaxonomyCategory", "description": "The details of a specific product category within the Shopify product taxonomy.", "fields_and_connections": [{"name": "ancestorIds", "type": "[ID!]!", "description": "The IDs of the category's ancestor categories.", "not_nullable": true}], "examples": []}, {"name": "TaxonomyChoiceListAttribute", "description": "A Shopify product taxonomy choice list attribute.", "fields_and_connections": [{"name": "id", "type": "ID!", "description": "The unique ID of the TaxonomyAttribute.", "not_nullable": true}], "examples": []}, {"name": "TaxonomyMeasurementAttribute", "description": "A Shopify product taxonomy measurement attribute.", "fields_and_connections": [{"name": "id", "type": "ID!", "description": "The unique ID of the TaxonomyAttribute.", "not_nullable": true}], "examples": []}, {"name": "TaxonomyValue", "description": "Represents a Shopify product taxonomy value.", "fields_and_connections": [{"name": "id", "type": "ID!", "description": "A globally-unique ID.", "not_nullable": true}], "examples": []}, {"name": "UnitPriceMeasurement", "description": "The measurement used to calculate a unit price for a product variant (e.g. $9.99 / 100ml).", "fields_and_connections": [{"name": "measuredType", "type": "UnitPriceMeasurementMeasuredType", "description": "The type of unit of measurement for the unit price measurement.", "not_nullable": true}], "examples": []}, {"name": "Vector3", "description": "Representation of 3d vectors and points. It can represent\neither the coordinates of a point in space, a direction, or\nsize. Presented as an object with three floating-point values.", "fields_and_connections": [{"name": "x", "type": "Float!", "description": "The x coordinate of Vector3.", "not_nullable": true}], "examples": []}, {"name": "Video", "description": "Represents a Shopify hosted video.", "fields_and_connections": [{"name": "alt", "type": "String", "description": "A word or phrase to share the nature or contents of a media.", "not_nullable": true}], "examples": []}, {"name": "VideoSource", "description": "Represents a source for a Shopify hosted video.\nTypes of sources include the original video, lower resolution versions of the original video,\nand an m3u8 playlist file.\nOnly videos with a status field\nof READY have sources.", "fields_and_connections": [{"name": "fileSize", "type": "Int", "description": "The video source's file size in bytes.", "not_nullable": true}], "examples": []}, {"name": "Weight", "description": "A weight, which includes a numeric value and a unit of measurement.", "fields_and_connections": [{"name": "unit", "type": "WeightUnit!", "description": "The unit of measurement for value.", "not_nullable": true}], "examples": []}]}, {"name": "Retail", "queries": [{"name": "cashTrackingSession", "description": "Lookup a cash tracking session by ID.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID of the CashTrackingSession to return."}], "returns": [], "examples": []}, {"name": "cashTrackingSessions", "description": "Returns a shop's cash tracking sessions for locations with a POS Pro subscription.\nTip: To query for cash tracking sessions in bulk, you can\nperform a bulk operation.", "arguments": [{"name": "after", "type": "String", "required": true, "description": "The elements that come after the specified cursor."}], "returns": [], "examples": []}], "mutations": [], "objects": [{"name": "CashTrackingAdjustment", "description": "Tracks an adjustment to the cash in a cash tracking session for a point of sale device over the course of a shift.", "fields_and_connections": [{"name": "cash", "type": "MoneyV2!", "description": "The amount of cash being added or removed.", "not_nullable": true}], "examples": []}, {"name": "CashTrackingSession", "description": "Tracks the balance in a cash drawer for a point of sale device over the course of a shift.", "fields_and_connections": [{"name": "adjustments", "type": "CashTrackingAdjustmentConnection!", "description": "The adjustments made to the cash drawer during this session.", "not_nullable": true}], "examples": []}]}, {"name": "Shipping and fulfillment", "queries": [{"name": "assignedFulfillmentOrders", "description": "The paginated list of fulfillment orders assigned to the shop locations owned by the app.\nAssigned fulfillment orders are fulfillment orders that are set to be fulfilled from locations\nmanaged by\nfulfillment services\nthat are registered by the app.\nOne app (api_client) can host multiple fulfillment services on a shop.\nEach fulfillment service manages a dedicated location on a shop.\nAssigned fulfillment orders can have associated\nfulfillment requests,\nor might currently not be requested to be fulfilled.\nThe app must have the read_assigned_fulfillment_orders\naccess scope\nto be able to retrieve the fulfillment orders assigned to its locations.\nAll assigned fulfillment orders (except those with the CLOSED status) will be returned by default.\nPerform filtering with the assignmentStatus argument\nto receive only fulfillment orders that have been requested to be fulfilled.", "arguments": [{"name": "after", "type": "String", "required": true, "description": "The elements that come after the specified cursor."}], "returns": [], "examples": []}, {"name": "availableCarrierServices", "description": "Returns a list of activated carrier services and associated shop locations that support them.", "arguments": [{"name": "DeliveryCarrierServiceAndLocations", "type": "[DeliveryCarrierServiceAndLocations!]!", "required": true, "description": "A carrier service and the associated list of shop locations."}], "returns": [], "examples": []}, {"name": "carrierService", "description": "Returns a DeliveryCarrierService object by ID.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID of the DeliveryCarrierService to return."}], "returns": [], "examples": [{"description": "Overview", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query CarrierServiceShow($id: ID!) {\n    carrierService(id: $id) {\n      id\n      name\n      callbackUrl\n      active\n      supportsServiceDiscovery\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/DeliveryCarrierService/763770004\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "carrierServices", "description": "Retrieve a list of CarrierServices.", "arguments": [{"name": "after", "type": "String", "required": true, "description": "The elements that come after the specified cursor."}], "returns": [], "examples": [{"description": "Overview", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query CarrierServiceList {\n    carrierServices(first: 10, query: \"active:true\") {\n      edges {\n        node {\n          id\n          name\n          callbackUrl\n          active\n          supportsServiceDiscovery\n        }\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}]}, {"name": "deliveryCustomization", "description": "The delivery customization.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID of the delivery customization."}], "returns": [], "examples": []}, {"name": "deliveryCustomizations", "description": "The delivery customizations.", "arguments": [{"name": "after", "type": "String", "required": true, "description": "The elements that come after the specified cursor."}], "returns": [], "examples": []}, {"name": "deliveryProfile", "description": "Returns a Delivery Profile resource by ID.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID of the DeliveryProfile to return."}], "returns": [], "examples": []}, {"name": "deliveryProfiles", "description": "Returns a list of saved delivery profiles.", "arguments": [{"name": "after", "type": "String", "required": true, "description": "The elements that come after the specified cursor."}], "returns": [], "examples": [{"description": "Overview", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query DeliveryZoneList {\n    deliveryProfiles(first: 10) {\n      edges {\n        node {\n          id\n          profileLocationGroups {\n            locationGroup {\n              id\n            }\n            locationGroupZones(first: 10) {\n              edges {\n                node {\n                  zone {\n                    id\n                    name\n                    countries {\n                      code {\n                        countryCode\n                        restOfWorld\n                      }\n                      provinces {\n                        name\n                        code\n                      }\n                    }\n                  }\n                  methodDefinitions(first: 10) {\n                    edges {\n                      node {\n                        id\n                        active\n                        description\n                        methodConditions {\n                          field\n                          operator\n                          conditionCriteria {\n                            __typename\n                            ... on MoneyV2 {\n                              amount\n                              currencyCode\n                            }\n                            ... on Weight {\n                              unit\n                              value\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}]}, {"name": "deliveryPromiseParticipants", "description": "Returns delivery promise participants.", "arguments": [{"name": "after", "type": "String", "required": true, "description": "The elements that come after the specified cursor."}], "returns": [], "examples": []}, {"name": "deliveryPromiseProvider", "description": "Lookup a delivery promise provider.", "arguments": [{"name": "locationId", "type": "ID!", "required": true, "description": "The ID of the location associated with the delivery promise provider."}], "returns": [], "examples": []}, {"name": "deliveryPromiseSettings", "description": "Represents the delivery promise settings for a shop.", "arguments": [{"name": "DeliveryPromiseSetting", "type": "DeliveryPromiseSetting!", "required": true, "description": "The delivery promise settings."}], "returns": [], "examples": []}, {"name": "deliverySettings", "description": "Returns the shop-wide shipping settings.", "arguments": [{"name": "DeliverySetting", "type": "DeliverySetting", "required": true, "description": "The DeliverySetting object enables you to manage shop-wide shipping settings.\nYou can enable legacy compatibility mode for the multi-location delivery profiles feature\nif the legacy mode isn't blocked."}], "returns": [], "examples": []}, {"name": "fulfillment", "description": "Returns a Fulfillment resource by ID.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID of the Fulfillment to return."}], "returns": [], "examples": [{"description": "Receive a single Fulfillment", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query FulfillmentShow($id: ID!) {\n    fulfillment(id: $id) {\n      fulfillmentLineItems(first: 10) {\n        edges {\n          node {\n            id\n            lineItem {\n              title\n              variant {\n                id\n              }\n            }\n            quantity\n            originalTotalSet {\n              shopMoney {\n                amount\n                currencyCode\n              }\n            }\n          }\n        }\n      }\n      status\n      estimatedDeliveryAt\n      location {\n        id\n        legacyResourceId\n      }\n      service {\n        handle\n      }\n      trackingInfo(first: 10) {\n        company\n        number\n        url\n      }\n      originAddress {\n        address1\n        address2\n        city\n        countryCode\n        provinceCode\n        zip\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/Fulfillment/237894043\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Retrieves a list of fulfillment events for a specific fulfillment", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query FulfillmentEventList($id: ID!) {\n    fulfillment(id: $id) {\n      events(first: 10) {\n        edges {\n          node {\n            happenedAt\n            status\n          }\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/Fulfillment/237894043\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "fulfillmentOrder", "description": "Returns a Fulfillment order resource by ID.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID of the FulfillmentOrder to return."}], "returns": [], "examples": [{"description": "Retrieves a list of locations that a fulfillment order can potentially move to.", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query LocationsForMoveList($fulfillmentOrderId: ID!) {\n    fulfillmentOrder(id: $fulfillmentOrderId) {\n      locationsForMove(first: 10) {\n        edges {\n          node {\n            location {\n              id\n              name\n            }\n            message\n            movable\n            availableLineItemsCount {\n              count\n            }\n            unavailableLineItemsCount {\n              count\n            }\n          }\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"fulfillmentOrderId\": \"gid://shopify/FulfillmentOrder/564786110\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Retrieves a specific fulfillment order", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query FulfillmentOrderShow($id: ID!) {\n    fulfillmentOrder(id: $id) {\n      assignedLocation {\n        location {\n          id\n        }\n      }\n      channelId\n      destination {\n        address1\n        address2\n        city\n        company\n        countryCode\n        zip\n        firstName\n        lastName\n      }\n      fulfillAt\n      fulfillBy\n      requestStatus\n      status\n      lineItems(first: 10) {\n        edges {\n          node {\n            inventoryItemId\n            remainingQuantity\n            requiresShipping\n            weight {\n              unit\n              value\n            }\n          }\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/FulfillmentOrder/564786110\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Retrieves fulfillments associated with a fulfillment order", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query FulfillmentList($fulfillmentOrderId: ID!) {\n    fulfillmentOrder(id: $fulfillmentOrderId) {\n      fulfillments(first: 10) {\n        edges {\n          node {\n            id\n            fulfillmentLineItems(first: 10) {\n              edges {\n                node {\n                  id\n                  lineItem {\n                    title\n                    variant {\n                      id\n                    }\n                  }\n                  quantity\n                  originalTotalSet {\n                    shopMoney {\n                      amount\n                      currencyCode\n                    }\n                  }\n                }\n              }\n            }\n            status\n            estimatedDeliveryAt\n            service {\n              handle\n            }\n            trackingInfo(first: 10) {\n              company\n              number\n              url\n            }\n            originAddress {\n              address1\n              address2\n              city\n              countryCode\n              provinceCode\n              zip\n            }\n          }\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"fulfillmentOrderId\": \"gid://shopify/FulfillmentOrder/158170091\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "fulfillmentOrders", "description": "The paginated list of all fulfillment orders.\nThe returned fulfillment orders are filtered according to the\nfulfillment order access scopes\ngranted to the app.\nUse this query to retrieve fulfillment orders assigned to merchant-managed locations,\nthird-party fulfillment service locations, or all kinds of locations together.\nFor fetching only the fulfillment orders assigned to the app's locations, use the\nassignedFulfillmentOrders\nconnection.", "arguments": [{"name": "after", "type": "String", "required": true, "description": "The elements that come after the specified cursor."}], "returns": [], "examples": []}, {"name": "fulfillmentService", "description": "Returns a FulfillmentService resource by ID.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID of the FulfillmentService to return."}], "returns": [], "examples": [{"description": "Overview", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query FulfillmentServiceShow($id: ID!) {\n    fulfillmentService(id: $id) {\n      id\n      callbackUrl\n      fulfillmentOrdersOptIn\n      permitsSkuSharing\n      handle\n      inventoryManagement\n      serviceName\n      location {\n        legacyResourceId\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/FulfillmentService/18961920\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "manualHoldsFulfillmentOrders", "description": "Returns a list of fulfillment orders that are on hold.", "arguments": [{"name": "after", "type": "String", "required": true, "description": "The elements that come after the specified cursor."}], "returns": [], "examples": []}], "mutations": [{"name": "carrierServiceCreate", "description": "Creates a new carrier service.", "arguments": [{"name": "input", "type": "DeliveryCarrierServiceCreateInput!", "required": true, "description": "The input fields used to create a carrier service."}], "returns": [], "examples": [{"description": "Create a new CarrierService", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation CarrierServiceCreate($input: DeliveryCarrierServiceCreateInput!) {\n    carrierServiceCreate(input: $input) {\n      carrierService {\n        id\n        name\n        callbackUrl\n        active\n        supportsServiceDiscovery\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": {\n    \"name\": \"test carrier service\",\n    \"callbackUrl\": \"https://example.com/\",\n    \"supportsServiceDiscovery\": true,\n    \"active\": true\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "carrierServiceCreate reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation CarrierServiceCreate($input: DeliveryCarrierServiceCreateInput!) {\n    carrierServiceCreate(input: $input) {\n      carrierService {\n        id\n        name\n        callbackUrl\n        active\n        supportsServiceDiscovery\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": {\n    \"name\": \"test carrier service\",\n    \"callbackUrl\": \"https://example.com/\",\n    \"supportsServiceDiscovery\": true,\n    \"active\": true\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "carrierServiceUpdate", "description": "Updates a carrier service. Only the app that creates a carrier service can update it.", "arguments": [{"name": "input", "type": "DeliveryCarrierServiceUpdateInput!", "required": true, "description": "The input fields used to update a carrier service."}], "returns": [], "examples": [{"description": "Modify an existing CarrierService", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation CarrierServiceUpdate($input: DeliveryCarrierServiceUpdateInput!) {\n    carrierServiceUpdate(input: $input) {\n      carrierService {\n        id\n        name\n        callbackUrl\n        active\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": {\n    \"id\": \"gid://shopify/DeliveryCarrierService/1036895102\",\n    \"name\": \"new test carrier service\",\n    \"callbackUrl\": \"https://new.example.com/\",\n    \"active\": true\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "carrierServiceUpdate reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation CarrierServiceUpdate($input: DeliveryCarrierServiceUpdateInput!) {\n    carrierServiceUpdate(input: $input) {\n      carrierService {\n        id\n        name\n        callbackUrl\n        active\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": {\n    \"id\": \"gid://shopify/DeliveryCarrierService/1036895102\",\n    \"name\": \"new test carrier service\",\n    \"callbackUrl\": \"https://new.example.com/\",\n    \"active\": true\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "deliveryCustomizationActivation", "description": "Activates and deactivates delivery customizations.", "arguments": [{"name": "enabled", "type": "Boolean!", "required": true, "description": "The enabled status of the delivery customizations."}], "returns": [], "examples": []}, {"name": "deliveryCustomizationCreate", "description": "Creates a delivery customization.", "arguments": [{"name": "deliveryCustomization", "type": "DeliveryCustomizationInput!", "required": true, "description": "The input data used to create the delivery customization."}], "returns": [], "examples": []}, {"name": "deliveryCustomizationDelete", "description": "Creates a delivery customization.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The global ID of the delivery customization."}], "returns": [], "examples": []}, {"name": "deliveryCustomizationUpdate", "description": "Updates a delivery customization.", "arguments": [{"name": "deliveryCustomization", "type": "DeliveryCustomizationInput!", "required": true, "description": "The input data used to update the delivery customization."}], "returns": [], "examples": []}, {"name": "deliveryProfileCreate", "description": "Create a delivery profile.", "arguments": [{"name": "profile", "type": "DeliveryProfileInput!", "required": true, "description": "Specifies the input fields for a delivery profile."}], "returns": [], "examples": [{"description": "Create delivery profile", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation createDeliveryProfile($profile: DeliveryProfileInput!) {\n    deliveryProfileCreate(profile: $profile) {\n      profile {\n        id\n        name\n        profileLocationGroups {\n          locationGroup {\n            id\n            locations(first: 5) {\n              nodes {\n                name\n                address {\n                  country\n                }\n              }\n            }\n          }\n          locationGroupZones(first: 2) {\n            edges {\n              node {\n                zone {\n                  id\n                  name\n                  countries {\n                    code {\n                      countryCode\n                    }\n                    provinces {\n                      code\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"profile\": {\n    \"name\": \"Sample Delivery Profile\",\n    \"locationGroupsToCreate\": [{\"locationsToAdd\"=>[\"gid://shopify/Location/750123840\", \"gid://shopify/Location/884687543\"], \"zonesToCreate\"=>[{\"name\"=>\"Canada Zone\", \"countries\"=>[{\"code\"=>\"CA\", \"provinces\"=>[{\"code\"=>\"ON\"}]}], \"methodDefinitionsToCreate\"=>[{\"name\"=>\"Standard\", \"rateDefinition\"=>{\"price\"=>{\"amount\"=>1.0, \"currencyCode\"=>\"USD\"}}, \"weightConditionsToCreate\"=>[{\"operator\"=>\"GREATER_THAN_OR_EQUAL_TO\", \"criteria\"=>{\"value\"=>0, \"unit\"=>\"KILOGRAMS\"}}, {\"operator\"=>\"LESS_THAN_OR_EQUAL_TO\", \"criteria\"=>{\"value\"=>15.0, \"unit\"=>\"KILOGRAMS\"}}]}]}]}, {\"locationsToAdd\"=>[\"gid://shopify/Location/415211365\"], \"zonesToCreate\"=>[{\"name\"=>\"USA Zone\", \"countries\"=>{\"code\"=>\"US\", \"provinces\"=>[{\"code\"=>\"CO\"}]}, \"methodDefinitionsToCreate\"=>[{\"name\"=>\"Standard\", \"rateDefinition\"=>{\"price\"=>{\"amount\"=>1.0, \"currencyCode\"=>\"USD\"}}}]}, {\"name\"=>\"Mexico Zone\", \"countries\"=>{\"code\"=>\"MX\", \"provinces\"=>[{\"code\"=>\"MOR\"}]}, \"methodDefinitionsToCreate\"=>[{\"name\"=>\"Standard\", \"rateDefinition\"=>{\"price\"=>{\"amount\"=>1.0, \"currencyCode\"=>\"USD\"}}}]}]}]\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "deliveryProfileCreate reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation createDeliveryProfile($profile: DeliveryProfileInput!) {\n    deliveryProfileCreate(profile: $profile) {\n      profile {\n        id\n        name\n        profileLocationGroups {\n          locationGroup {\n            id\n            locations(first: 5) {\n              nodes {\n                name\n                address {\n                  country\n                }\n              }\n            }\n          }\n          locationGroupZones(first: 2) {\n            edges {\n              node {\n                zone {\n                  id\n                  name\n                  countries {\n                    code {\n                      countryCode\n                    }\n                    provinces {\n                      code\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"profile\": {\n    \"name\": \"Sample Delivery Profile\",\n    \"locationGroupsToCreate\": [{\"locationsToAdd\"=>[\"gid://shopify/Location/750123840\", \"gid://shopify/Location/884687543\"], \"zonesToCreate\"=>[{\"name\"=>\"Canada Zone\", \"countries\"=>[{\"code\"=>\"CA\", \"provinces\"=>[{\"code\"=>\"ON\"}]}], \"methodDefinitionsToCreate\"=>[{\"name\"=>\"Standard\", \"rateDefinition\"=>{\"price\"=>{\"amount\"=>1.0, \"currencyCode\"=>\"USD\"}}, \"weightConditionsToCreate\"=>[{\"operator\"=>\"GREATER_THAN_OR_EQUAL_TO\", \"criteria\"=>{\"value\"=>0, \"unit\"=>\"KILOGRAMS\"}}, {\"operator\"=>\"LESS_THAN_OR_EQUAL_TO\", \"criteria\"=>{\"value\"=>15.0, \"unit\"=>\"KILOGRAMS\"}}]}]}]}, {\"locationsToAdd\"=>[\"gid://shopify/Location/415211365\"], \"zonesToCreate\"=>[{\"name\"=>\"USA Zone\", \"countries\"=>{\"code\"=>\"US\", \"provinces\"=>[{\"code\"=>\"CO\"}]}, \"methodDefinitionsToCreate\"=>[{\"name\"=>\"Standard\", \"rateDefinition\"=>{\"price\"=>{\"amount\"=>1.0, \"currencyCode\"=>\"USD\"}}}]}, {\"name\"=>\"Mexico Zone\", \"countries\"=>{\"code\"=>\"MX\", \"provinces\"=>[{\"code\"=>\"MOR\"}]}, \"methodDefinitionsToCreate\"=>[{\"name\"=>\"Standard\", \"rateDefinition\"=>{\"price\"=>{\"amount\"=>1.0, \"currencyCode\"=>\"USD\"}}}]}]}]\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "deliveryProfileUpdate", "description": "Update a delivery profile.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID of the delivery profile to update."}], "returns": [], "examples": [{"description": "Update delivery profile to add a location and a zone to an existing group", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation deliveryProfileUpdate($id: ID!, $profile: DeliveryProfileInput!) {\n    deliveryProfileUpdate(id: $id, profile: $profile) {\n      profile {\n        id\n        name\n        profileLocationGroups {\n          locationGroup {\n            id\n            locations(first: 5) {\n              nodes {\n                name\n                address {\n                  country\n                }\n              }\n            }\n          }\n          locationGroupZones(first: 2) {\n            edges {\n              node {\n                zone {\n                  id\n                  name\n                  countries {\n                    code {\n                      countryCode\n                    }\n                    provinces {\n                      code\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/DeliveryProfile/593363170\",\n  \"profile\": {\n    \"name\": \"Sample Updated Delivery Profile\",\n    \"locationGroupsToUpdate\": [{\"id\"=>\"gid://shopify/DeliveryLocationGroup/955592432\", \"locationsToAdd\"=>[\"gid://shopify/Location/884687543\"], \"zonesToCreate\"=>[{\"name\"=>\"USA Zone\", \"countries\"=>{\"code\"=>\"US\", \"provinces\"=>[{\"code\"=>\"CO\"}]}, \"methodDefinitionsToCreate\"=>[{\"name\"=>\"Standard\", \"rateDefinition\"=>{\"price\"=>{\"amount\"=>1.0, \"currencyCode\"=>\"USD\"}}}]}]}]\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Update delivery profile to add a location group", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation deliveryProfileUpdate($id: ID!, $profile: DeliveryProfileInput!) {\n    deliveryProfileUpdate(id: $id, profile: $profile) {\n      profile {\n        id\n        name\n        profileLocationGroups {\n          locationGroup {\n            id\n            locations(first: 5) {\n              nodes {\n                name\n                address {\n                  country\n                }\n              }\n            }\n          }\n          locationGroupZones(first: 2) {\n            edges {\n              node {\n                zone {\n                  id\n                  name\n                  countries {\n                    code {\n                      countryCode\n                    }\n                    provinces {\n                      code\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/DeliveryProfile/593363170\",\n  \"profile\": {\n    \"name\": \"Sample Updated Delivery Profile\",\n    \"locationGroupsToCreate\": [{\"locationsToAdd\"=>[\"gid://shopify/Location/415211365\"], \"zonesToCreate\"=>[{\"name\"=>\"USA Zone\", \"countries\"=>{\"code\"=>\"US\", \"provinces\"=>[{\"code\"=>\"CO\"}]}, \"methodDefinitionsToCreate\"=>[{\"name\"=>\"Standard\", \"rateDefinition\"=>{\"price\"=>{\"amount\"=>1.0, \"currencyCode\"=>\"USD\"}}}]}, {\"name\"=>\"Mexico Zone\", \"countries\"=>{\"code\"=>\"MX\", \"provinces\"=>[{\"code\"=>\"MOR\"}]}, \"methodDefinitionsToCreate\"=>[{\"name\"=>\"Standard\", \"rateDefinition\"=>{\"price\"=>{\"amount\"=>1.0, \"currencyCode\"=>\"USD\"}}}]}]}]\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "deliveryProfileUpdate reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation deliveryProfileUpdate($id: ID!, $profile: DeliveryProfileInput!) {\n    deliveryProfileUpdate(id: $id, profile: $profile) {\n      profile {\n        id\n        name\n        profileLocationGroups {\n          locationGroup {\n            id\n            locations(first: 5) {\n              nodes {\n                name\n                address {\n                  country\n                }\n              }\n            }\n          }\n          locationGroupZones(first: 2) {\n            edges {\n              node {\n                zone {\n                  id\n                  name\n                  countries {\n                    code {\n                      countryCode\n                    }\n                    provinces {\n                      code\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/DeliveryProfile/593363170\",\n  \"profile\": {\n    \"name\": \"Sample Updated Delivery Profile\",\n    \"locationGroupsToUpdate\": [{\"id\"=>\"gid://shopify/DeliveryLocationGroup/955592432\", \"locationsToAdd\"=>[\"gid://shopify/Location/884687543\"], \"zonesToCreate\"=>[{\"name\"=>\"USA Zone\", \"countries\"=>{\"code\"=>\"US\", \"provinces\"=>[{\"code\"=>\"CO\"}]}, \"methodDefinitionsToCreate\"=>[{\"name\"=>\"Standard\", \"rateDefinition\"=>{\"price\"=>{\"amount\"=>1.0, \"currencyCode\"=>\"USD\"}}}]}]}]\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "deliveryPromiseParticipantsUpdate", "description": "Updates the delivery promise participants by adding or removing owners based on a branded promise handle.", "arguments": [{"name": "brandedPromiseHandle", "type": "String!", "required": true, "description": "The branded promise handle to update the delivery promise participants for."}], "returns": [], "examples": []}, {"name": "deliveryPromiseProviderUpsert", "description": "Creates or updates a delivery promise provider. Currently restricted to select approved delivery promise partners.", "arguments": [{"name": "active", "type": "Boolean", "required": true, "description": "Whether the delivery promise provider is active. Defaults to true when creating a provider."}], "returns": [], "examples": []}, {"name": "deliverySettingUpdate", "description": "Set the delivery settings for a shop.", "arguments": [{"name": "setting", "type": "DeliverySettingInput!", "required": true, "description": "Specifies the input fields for the delivery shop level settings."}], "returns": [], "examples": []}, {"name": "fulfillmentCancel", "description": "Cancels a fulfillment.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID of the fulfillment to be canceled."}], "returns": [], "examples": [{"description": "Cancels a fulfillment", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation fulfillmentCancel($id: ID!) {\n    fulfillmentCancel(id: $id) {\n      fulfillment {\n        id\n        status\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/Fulfillment/237894043\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "fulfillmentCancel reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation fulfillmentCancel($id: ID!) {\n    fulfillmentCancel(id: $id) {\n      fulfillment {\n        id\n        status\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/Fulfillment/237894043\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "fulfillmentCreate", "description": "Creates a fulfillment for one or many fulfillment orders.\nThe fulfillment orders are associated with the same order and are assigned to the same location.", "arguments": [{"name": "fulfillment", "type": "FulfillmentInput!", "required": true, "description": "The input fields used to create a fulfillment from fulfillment orders."}], "returns": [], "examples": []}, {"name": "fulfillmentCreateV2", "description": "Creates a fulfillment for one or many fulfillment orders.\nThe fulfillment orders are associated with the same order and are assigned to the same location.", "arguments": [{"name": "fulfillment", "type": "FulfillmentV2Input!", "required": true, "description": "The input fields used to create a fulfillment from fulfillment orders."}], "returns": [], "examples": [{"description": "Creates a fulfillment for one or many fulfillment orders", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation FulfillmentCreate($fulfillment: FulfillmentV2Input!) {\n    fulfillmentCreateV2(fulfillment: $fulfillment) {\n      fulfillment {\n        fulfillmentLineItems(first: 10) {\n          edges {\n            node {\n              id\n              lineItem {\n                title\n                variant {\n                  id\n                }\n              }\n              quantity\n              originalTotalSet {\n                shopMoney {\n                  amount\n                  currencyCode\n                }\n              }\n            }\n          }\n        }\n        status\n        estimatedDeliveryAt\n        location {\n          id\n          legacyResourceId\n        }\n        service {\n          handle\n        }\n        trackingInfo(first: 10) {\n          company\n          number\n          url\n        }\n        originAddress {\n          address1\n          address2\n          city\n          countryCode\n          provinceCode\n          zip\n        }\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"fulfillment\": {\n    \"lineItemsByFulfillmentOrder\": {\n      \"fulfillmentOrderId\": \"gid://shopify/FulfillmentOrder/940656279\"\n    }\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Fulfill a fulfillment order", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation fulfillmentCreateV2($fulfillment: FulfillmentV2Input!) {\n    fulfillmentCreateV2(fulfillment: $fulfillment) {\n      fulfillment {\n        id\n        status\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"fulfillment\": {\n    \"lineItemsByFulfillmentOrder\": {\n      \"fulfillmentOrderId\": \"gid://shopify/FulfillmentOrder/940656279\"\n    }\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Fulfill a fulfillment order with tracking data specified", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation fulfillmentCreateV2($fulfillment: FulfillmentV2Input!) {\n    fulfillmentCreateV2(fulfillment: $fulfillment) {\n      fulfillment {\n        id\n        status\n        trackingInfo(first: 10) {\n          company\n          number\n          url\n        }\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"fulfillment\": {\n    \"lineItemsByFulfillmentOrder\": {\n      \"fulfillmentOrderId\": \"gid://shopify/FulfillmentOrder/940656279\"\n    },\n    \"trackingInfo\": {\n      \"company\": \"UPS\",\n      \"number\": \"1Z001985YW99744790\"\n    }\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Fulfill a fulfillment order with two tracking numbers and  a supported tracking company name specified", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation fulfillmentCreateV2($fulfillment: FulfillmentV2Input!) {\n    fulfillmentCreateV2(fulfillment: $fulfillment) {\n      fulfillment {\n        id\n        status\n        trackingInfo(first: 10) {\n          company\n          number\n          url\n        }\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"fulfillment\": {\n    \"lineItemsByFulfillmentOrder\": {\n      \"fulfillmentOrderId\": \"gid://shopify/FulfillmentOrder/940656279\"\n    },\n    \"trackingInfo\": {\n      \"company\": \"UPS\",\n      \"numbers\": [\"1Z001985YW99744790\", \"1Z001985YW99744791\"]\n    }\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Fulfill a fulfillment order with two tracking numbers and tracking urls from different tracking tracking providers", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation fulfillmentCreateV2($fulfillment: FulfillmentV2Input!) {\n    fulfillmentCreateV2(fulfillment: $fulfillment) {\n      fulfillment {\n        id\n        status\n        trackingInfo(first: 10) {\n          company\n          number\n          url\n        }\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"fulfillment\": {\n    \"lineItemsByFulfillmentOrder\": {\n      \"fulfillmentOrderId\": \"gid://shopify/FulfillmentOrder/940656279\"\n    },\n    \"trackingInfo\": {\n      \"numbers\": [\"1Z1234512345123456\", \"MS123\"],\n      \"urls\": [\"https://www.ups.com/WebTracking?loc=en_US&requester=ST&trackNums=1Z1234512345123456\", \"http://shopify-unsupported-tracking-company.com?tracking_number=MS123\"]\n    }\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Fulfill a fulfillment order without providing tracking info", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation fulfillmentCreateV2($fulfillment: FulfillmentV2Input!) {\n    fulfillmentCreateV2(fulfillment: $fulfillment) {\n      fulfillment {\n        id\n        status\n        trackingInfo(first: 10) {\n          company\n          number\n          url\n        }\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"fulfillment\": {\n    \"lineItemsByFulfillmentOrder\": {\n      \"fulfillmentOrderId\": \"gid://shopify/FulfillmentOrder/940656279\"\n    }\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Partially fulfill a fulfillment order", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation fulfillmentCreateV2($fulfillment: FulfillmentV2Input!) {\n    fulfillmentCreateV2(fulfillment: $fulfillment) {\n      fulfillment {\n        id\n        status\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"fulfillment\": {\n    \"lineItemsByFulfillmentOrder\": {\n      \"fulfillmentOrderId\": \"gid://shopify/FulfillmentOrder/940656279\",\n      \"fulfillmentOrderLineItems\": {\n        \"id\": \"gid://shopify/FulfillmentOrderLineItem/361939597\",\n        \"quantity\": 1\n      }\n    }\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "fulfillmentCreateV2 reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation FulfillmentCreate($fulfillment: FulfillmentV2Input!) {\n    fulfillmentCreateV2(fulfillment: $fulfillment) {\n      fulfillment {\n        fulfillmentLineItems(first: 10) {\n          edges {\n            node {\n              id\n              lineItem {\n                title\n                variant {\n                  id\n                }\n              }\n              quantity\n              originalTotalSet {\n                shopMoney {\n                  amount\n                  currencyCode\n                }\n              }\n            }\n          }\n        }\n        status\n        estimatedDeliveryAt\n        location {\n          id\n          legacyResourceId\n        }\n        service {\n          handle\n        }\n        trackingInfo(first: 10) {\n          company\n          number\n          url\n        }\n        originAddress {\n          address1\n          address2\n          city\n          countryCode\n          provinceCode\n          zip\n        }\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"fulfillment\": {\n    \"lineItemsByFulfillmentOrder\": {\n      \"fulfillmentOrderId\": \"gid://shopify/FulfillmentOrder/940656279\"\n    }\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "fulfillmentEventCreate", "description": "Creates a fulfillment event for a specified fulfillment.", "arguments": [{"name": "fulfillmentEvent", "type": "FulfillmentEventInput!", "required": true, "description": "The input fields used to create a fulfillment event for a fulfillment."}], "returns": [], "examples": [{"description": "Create fulfillment event when a package is out for delivery", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation fulfillmentEventCreate($fulfillmentEvent: FulfillmentEventInput!) {\n    fulfillmentEventCreate(fulfillmentEvent: $fulfillmentEvent) {\n      fulfillmentEvent {\n        id\n        status\n        message\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"fulfillmentEvent\": {\n    \"fulfillmentId\": \"gid://shopify/Fulfillment/237894043\",\n    \"address1\": \"151 O'Connor St\",\n    \"city\": \"Ottawa\",\n    \"province\": \"Ontario\",\n    \"country\": \"Canada\",\n    \"zip\": \"K2P 2L8\",\n    \"latitude\": 45.4191176,\n    \"longitude\": 75.6966166,\n    \"happenedAt\": \"2024-03-07T15:50:00Z\",\n    \"estimatedDeliveryAt\": \"2024-03-07T16:50:00Z\",\n    \"message\": \"This package is now out for delivery!\",\n    \"status\": \"OUT_FOR_DELIVERY\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Creates a fulfillment event", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation fulfillmentEventCreate($fulfillmentEvent: FulfillmentEventInput!) {\n    fulfillmentEventCreate(fulfillmentEvent: $fulfillmentEvent) {\n      fulfillmentEvent {\n        address1\n        city\n        country\n        estimatedDeliveryAt\n        happenedAt\n        latitude\n        longitude\n        message\n        province\n        status\n        zip\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"fulfillmentEvent\": {\n    \"fulfillmentId\": \"gid://shopify/Fulfillment/237894043\",\n    \"address1\": \"150 Elgin St.\",\n    \"city\": \"Ottawa\",\n    \"country\": \"Canada\",\n    \"estimatedDeliveryAt\": \"2024-11-15T23:40:59Z\",\n    \"happenedAt\": \"2024-11-15T23:40:49Z\",\n    \"latitude\": 1.234,\n    \"longitude\": 9.876,\n    \"message\": \"In transit\",\n    \"province\": \"Ontario\",\n    \"status\": \"IN_TRANSIT\",\n    \"zip\": \"K2P1L4\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "fulfillmentEventCreate reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation fulfillmentEventCreate($fulfillmentEvent: FulfillmentEventInput!) {\n    fulfillmentEventCreate(fulfillmentEvent: $fulfillmentEvent) {\n      fulfillmentEvent {\n        id\n        status\n        message\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"fulfillmentEvent\": {\n    \"fulfillmentId\": \"gid://shopify/Fulfillment/237894043\",\n    \"address1\": \"151 O'Connor St\",\n    \"city\": \"Ottawa\",\n    \"province\": \"Ontario\",\n    \"country\": \"Canada\",\n    \"zip\": \"K2P 2L8\",\n    \"latitude\": 45.4191176,\n    \"longitude\": 75.6966166,\n    \"happenedAt\": \"2024-03-07T15:50:00Z\",\n    \"estimatedDeliveryAt\": \"2024-03-07T16:50:00Z\",\n    \"message\": \"This package is now out for delivery!\",\n    \"status\": \"OUT_FOR_DELIVERY\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "fulfillmentOrderAcceptCancellationRequest", "description": "Accept a cancellation request sent to a fulfillment service for a fulfillment order.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID of the fulfillment order associated with the cancellation request."}], "returns": [], "examples": [{"description": "Accepts a cancellation request", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation fulfillmentOrderAcceptCancellationRequest($id: ID!, $message: String) {\n    fulfillmentOrderAcceptCancellationRequest(id: $id, message: $message) {\n      fulfillmentOrder {\n        id\n        status\n        requestStatus\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/FulfillmentOrder/1046000777\",\n  \"message\": \"Fragile\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "fulfillmentOrderAcceptCancellationRequest reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation fulfillmentOrderAcceptCancellationRequest($id: ID!, $message: String) {\n    fulfillmentOrderAcceptCancellationRequest(id: $id, message: $message) {\n      fulfillmentOrder {\n        id\n        status\n        requestStatus\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/FulfillmentOrder/1046000777\",\n  \"message\": \"Fragile\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "fulfillmentOrderAcceptFulfillmentRequest", "description": "Accepts a fulfillment request sent to a fulfillment service for a fulfillment order.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID of the fulfillment order associated with the fulfillment request."}], "returns": [], "examples": [{"description": "Accepts a fulfillment request", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation fulfillmentOrderAcceptFulfillmentRequest($id: ID!, $message: String) {\n    fulfillmentOrderAcceptFulfillmentRequest(id: $id, message: $message) {\n      fulfillmentOrder {\n        id\n        status\n        requestStatus\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/FulfillmentOrder/1046000778\",\n  \"message\": \"Fragile\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "fulfillmentOrderAcceptFulfillmentRequest reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation fulfillmentOrderAcceptFulfillmentRequest($id: ID!, $message: String) {\n    fulfillmentOrderAcceptFulfillmentRequest(id: $id, message: $message) {\n      fulfillmentOrder {\n        id\n        status\n        requestStatus\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/FulfillmentOrder/1046000778\",\n  \"message\": \"Fragile\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "fulfillmentOrderCancel", "description": "Marks a fulfillment order as canceled.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID of the fulfillment order to mark as canceled."}], "returns": [], "examples": [{"description": "Cancel a fulfillment order", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation fulfillmentOrderCancel($id: ID!) {\n    fulfillmentOrderCancel(id: $id) {\n      fulfillmentOrder {\n        id\n        status\n        requestStatus\n      }\n      replacementFulfillmentOrder {\n        id\n        status\n        requestStatus\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/FulfillmentOrder/1046000804\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "fulfillmentOrderCancel reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation fulfillmentOrderCancel($id: ID!) {\n    fulfillmentOrderCancel(id: $id) {\n      fulfillmentOrder {\n        id\n        status\n        requestStatus\n      }\n      replacementFulfillmentOrder {\n        id\n        status\n        requestStatus\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/FulfillmentOrder/1046000804\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "fulfillmentOrderClose", "description": "Marks an in-progress fulfillment order as incomplete,\nindicating the fulfillment service is unable to ship any remaining items,\nand closes the fulfillment request.\nThis mutation can only be called for fulfillment orders that meet the following criteria:\n\nAssigned to a fulfillment service location,\nThe fulfillment request has been accepted,\nThe fulfillment order status is IN_PROGRESS.\n\nThis mutation can only be called by the fulfillment service app that accepted the fulfillment request.\nCalling this mutation returns the control of the fulfillment order to the merchant, allowing them to\nmove the fulfillment order line items to another location and fulfill from there,\nremove and refund the line items, or to request fulfillment from the same fulfillment service again.\nClosing a fulfillment order is explained in\nthe fulfillment service guide.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID of the fulfillment order to mark as incomplete."}], "returns": [], "examples": [{"description": "Marks a fulfillment order as incomplete", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation fulfillmentOrderClose($id: ID!, $message: String) {\n    fulfillmentOrderClose(id: $id, message: $message) {\n      fulfillmentOrder {\n        id\n        status\n        requestStatus\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/FulfillmentOrder/1046000779\",\n  \"message\": \"Out of Stock\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "fulfillmentOrderClose reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation fulfillmentOrderClose($id: ID!, $message: String) {\n    fulfillmentOrderClose(id: $id, message: $message) {\n      fulfillmentOrder {\n        id\n        status\n        requestStatus\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/FulfillmentOrder/1046000779\",\n  \"message\": \"Out of Stock\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "fulfillmentOrderHold", "description": "Applies a fulfillment hold on a fulfillment order.\nAs of the\n2025-01 API version,\nthe mutation can be successfully executed on fulfillment orders that are already on hold.\nTo place multiple holds on a fulfillment order, apps need to supply the\nhandle\nfield. Each app can place up to\n10 active holds\nper fulfillment order. If an app attempts to place more than this, the mutation will return\na user error indicating that the limit has been reached.\nThe app would need to release one of its existing holds before being able to apply a new one.", "arguments": [{"name": "fulfillmentHold", "type": "FulfillmentOrderHoldInput!", "required": true, "description": "The details of the fulfillment hold applied on the fulfillment order."}], "returns": [], "examples": [{"description": "Applies a fulfillment hold on an open fulfillment order", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation FulfillmentOrderHold($fulfillmentHold: FulfillmentOrderHoldInput!, $id: ID!) {\n    fulfillmentOrderHold(fulfillmentHold: $fulfillmentHold, id: $id) {\n      fulfillmentOrder {\n        id\n      }\n      remainingFulfillmentOrder {\n        id\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"fulfillmentHold\": {\n    \"reason\": \"INVENTORY_OUT_OF_STOCK\",\n    \"reasonNotes\": \"Waiting on new shipment\"\n  },\n  \"id\": \"gid://shopify/FulfillmentOrder/1046001479\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Put a fulfillment order on hold", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation fulfillmentOrderHold($fulfillmentHold: FulfillmentOrderHoldInput!, $id: ID!) {\n    fulfillmentOrderHold(fulfillmentHold: $fulfillmentHold, id: $id) {\n      fulfillmentOrder {\n        id\n        status\n        requestStatus\n        fulfillmentHolds {\n          reason\n          reasonNotes\n        }\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"fulfillmentHold\": {\n    \"notifyMerchant\": true,\n    \"reason\": \"INVENTORY_OUT_OF_STOCK\",\n    \"reasonNotes\": \"Waiting on new shipment\"\n  },\n  \"id\": \"gid://shopify/FulfillmentOrder/1046001480\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "fulfillmentOrderHold reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation FulfillmentOrderHold($fulfillmentHold: FulfillmentOrderHoldInput!, $id: ID!) {\n    fulfillmentOrderHold(fulfillmentHold: $fulfillmentHold, id: $id) {\n      fulfillmentOrder {\n        id\n      }\n      remainingFulfillmentOrder {\n        id\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"fulfillmentHold\": {\n    \"reason\": \"INVENTORY_OUT_OF_STOCK\",\n    \"reasonNotes\": \"Waiting on new shipment\"\n  },\n  \"id\": \"gid://shopify/FulfillmentOrder/1046001479\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "fulfillmentOrderLineItemsPreparedForPickup", "description": "Mark line items associated with a fulfillment order as being ready for pickup by a customer.\nSends a Ready For Pickup notification to the customer to let them know that their order is ready\nto be picked up.", "arguments": [{"name": "input", "type": "FulfillmentOrderLineItemsPreparedForPickupInput!", "required": true, "description": "The input for marking fulfillment order line items as ready for pickup."}], "returns": [], "examples": [{"description": "Mark all line items associated with a fulfillment order as being ready for a customer to pick up", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation fulfillmentOrderLineItemsPreparedForPickup($input: FulfillmentOrderLineItemsPreparedForPickupInput!) {\n    fulfillmentOrderLineItemsPreparedForPickup(input: $input) {\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": {\n    \"lineItemsByFulfillmentOrder\": [{\"fulfillmentOrderId\"=>\"gid://shopify/FulfillmentOrder/1046000776\"}]\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "fulfillmentOrderLineItemsPreparedForPickup reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation fulfillmentOrderLineItemsPreparedForPickup($input: FulfillmentOrderLineItemsPreparedForPickupInput!) {\n    fulfillmentOrderLineItemsPreparedForPickup(input: $input) {\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": {\n    \"lineItemsByFulfillmentOrder\": [{\"fulfillmentOrderId\"=>\"gid://shopify/FulfillmentOrder/1046000776\"}]\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "fulfillmentOrderMerge", "description": "Merges a set or multiple sets of fulfillment orders together into one based on\nline item inputs and quantities.", "arguments": [{"name": "fulfillmentOrderMergeInputs", "type": "[FulfillmentOrderMergeInput!]!", "required": true, "description": "One or more sets of fulfillment orders to be merged."}], "returns": [], "examples": []}, {"name": "fulfillmentOrderMove", "description": "Changes the location which is assigned to fulfill a number of unfulfilled fulfillment order line items.\nMoving a fulfillment order will fail in the following circumstances:\n\nThe fulfillment order is closed.\nThe destination location has never stocked the requested inventory item.\nThe API client doesn't have the correct permissions.\n\nLine items which have already been fulfilled can't be re-assigned\nand will always remain assigned to the original location.\nYou can't change the assigned location while a fulfillment order has a\nrequest status\nof SUBMITTED, ACCEPTED, CANCELLATION_REQUESTED, or CANCELLATION_REJECTED.\nThese request statuses mean that a fulfillment order is awaiting action by a fulfillment service\nand can't be re-assigned without first having the fulfillment service accept a cancellation request.\nThis behavior is intended to prevent items from being fulfilled by multiple locations or fulfillment services.\nHow re-assigning line items affects fulfillment orders\nFirst scenario: Re-assign all line items belonging to a fulfillment order to a new location.\nIn this case, the\nassignedLocation\nof the original fulfillment order will be updated to the new location.\nSecond scenario: Re-assign a subset of the line items belonging to a fulfillment order to a new location.\nYou can specify a subset of line items using the fulfillmentOrderLineItems parameter\n(available as of the 2023-04 API version),\nor specify that the original fulfillment order contains line items which have already been fulfilled.\nIf the new location is already assigned to another active fulfillment order, on the same order, then\na new fulfillment order is created. The existing fulfillment order is closed and line items are recreated\nin a new fulfillment order.", "arguments": [{"name": "fulfillmentOrderLineItems", "type": "[FulfillmentOrderLineItemInput!]", "required": true, "description": "The fulfillment order line items to be moved.\nIf left blank, all unfulfilled line items belonging to the fulfillment order are moved."}], "returns": [], "examples": [{"description": "Move some of the line items in a fulfillment order to a new location", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation fulfillmentOrderMove($id: ID!, $newLocationId: ID!) {\n    fulfillmentOrderMove(id: $id, newLocationId: $newLocationId) {\n      movedFulfillmentOrder {\n        id\n        status\n      }\n      originalFulfillmentOrder {\n        id\n        status\n      }\n      remainingFulfillmentOrder {\n        id\n        status\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/FulfillmentOrder/940656279\",\n  \"newLocationId\": \"gid://shopify/Location/346779380\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Moves a fulfillment order to a new location", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation fulfillmentOrderMove($id: ID!, $newLocationId: ID!) {\n    fulfillmentOrderMove(id: $id, newLocationId: $newLocationId) {\n      movedFulfillmentOrder {\n        id\n        status\n      }\n      originalFulfillmentOrder {\n        id\n        status\n      }\n      remainingFulfillmentOrder {\n        id\n        status\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/FulfillmentOrder/564786110\",\n  \"newLocationId\": \"gid://shopify/Location/346779380\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "fulfillmentOrderMove reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation fulfillmentOrderMove($id: ID!, $newLocationId: ID!) {\n    fulfillmentOrderMove(id: $id, newLocationId: $newLocationId) {\n      movedFulfillmentOrder {\n        id\n        status\n      }\n      originalFulfillmentOrder {\n        id\n        status\n      }\n      remainingFulfillmentOrder {\n        id\n        status\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/FulfillmentOrder/940656279\",\n  \"newLocationId\": \"gid://shopify/Location/346779380\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "fulfillmentOrderOpen", "description": "Marks a scheduled fulfillment order as open.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID of the fulfillment order to mark as open."}], "returns": [], "examples": [{"description": "Marks the fulfillment order as open", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation fulfillmentOrderOpen($id: ID!) {\n    fulfillmentOrderOpen(id: $id) {\n      fulfillmentOrder {\n        id\n        status\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/FulfillmentOrder/1046000781\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "fulfillmentOrderOpen reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation fulfillmentOrderOpen($id: ID!) {\n    fulfillmentOrderOpen(id: $id) {\n      fulfillmentOrder {\n        id\n        status\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/FulfillmentOrder/1046000781\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "fulfillmentOrderRejectCancellationRequest", "description": "Rejects a cancellation request sent to a fulfillment service for a fulfillment order.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID of the fulfillment order associated with the cancellation request."}], "returns": [], "examples": [{"description": "Rejects a cancellation request", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation fulfillmentOrderRejectCancellationRequest($id: ID!, $message: String) {\n    fulfillmentOrderRejectCancellationRequest(id: $id, message: $message) {\n      fulfillmentOrder {\n        id\n        status\n        requestStatus\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/FulfillmentOrder/1046000785\",\n  \"message\": \"Already shipped product\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "fulfillmentOrderRejectCancellationRequest reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation fulfillmentOrderRejectCancellationRequest($id: ID!, $message: String) {\n    fulfillmentOrderRejectCancellationRequest(id: $id, message: $message) {\n      fulfillmentOrder {\n        id\n        status\n        requestStatus\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/FulfillmentOrder/1046000785\",\n  \"message\": \"Already shipped product\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "fulfillmentOrderRejectFulfillmentRequest", "description": "Rejects a fulfillment request sent to a fulfillment service for a fulfillment order.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID of the fulfillment order associated with the fulfillment request."}], "returns": [], "examples": [{"description": "Rejects a fulfillment request", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation fulfillmentOrderRejectFulfillmentRequest($id: ID!, $message: String) {\n    fulfillmentOrderRejectFulfillmentRequest(id: $id, message: $message) {\n      fulfillmentOrder {\n        id\n        status\n        requestStatus\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/FulfillmentOrder/1046000786\",\n  \"message\": \"Can't fulfill due to no inventory on product\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "fulfillmentOrderRejectFulfillmentRequest reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation fulfillmentOrderRejectFulfillmentRequest($id: ID!, $message: String) {\n    fulfillmentOrderRejectFulfillmentRequest(id: $id, message: $message) {\n      fulfillmentOrder {\n        id\n        status\n        requestStatus\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/FulfillmentOrder/1046000786\",\n  \"message\": \"Can't fulfill due to no inventory on product\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "fulfillmentOrderReleaseHold", "description": "Releases the fulfillment hold on a fulfillment order.", "arguments": [{"name": "externalId", "type": "String", "required": true, "description": "A configurable ID used to track the automation system releasing this hold."}], "returns": [], "examples": [{"description": "Release all holds on a fulfillment order", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation fulfillmentOrderReleaseHold($id: ID!) {\n    fulfillmentOrderReleaseHold(id: $id) {\n      fulfillmentOrder {\n        id\n        status\n        requestStatus\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/FulfillmentOrder/564786110\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Releases the fulfillment hold on a fulfillment order", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation {\n    fulfillmentOrderReleaseHold(holdIds: [\"gid://shopify/FulfillmentHold/172\"], id: \"gid://shopify/FulfillmentOrder/564786110\") {\n      fulfillmentOrder {\n        id\n        status\n        requestStatus\n      }\n      userErrors {\n        field\n        message\n        code\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "fulfillmentOrderReleaseHold reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation fulfillmentOrderReleaseHold($id: ID!) {\n    fulfillmentOrderReleaseHold(id: $id) {\n      fulfillmentOrder {\n        id\n        status\n        requestStatus\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/FulfillmentOrder/564786110\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "fulfillmentOrderReschedule", "description": "Reschedules a scheduled fulfillment order.\nUpdates the value of the fulfillAt field on a scheduled fulfillment order.\nThe fulfillment order will be marked as ready for fulfillment at this date and time.", "arguments": [{"name": "fulfillAt", "type": "DateTime!", "required": true, "description": "A future date and time when the fulfillment order will be marked as ready for fulfillment."}], "returns": [], "examples": [{"description": "Reschedules the fulfill_at time of a scheduled fulfillment order", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation fulfillmentOrderReschedule($fulfillAt: DateTime!, $id: ID!) {\n    fulfillmentOrderReschedule(fulfillAt: $fulfillAt, id: $id) {\n      fulfillmentOrder {\n        id\n        status\n        fulfillAt\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/FulfillmentOrder/564786110\",\n  \"fulfillAt\": \"2024-11-25T18:40:54Z\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "fulfillmentOrderReschedule reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation fulfillmentOrderReschedule($fulfillAt: DateTime!, $id: ID!) {\n    fulfillmentOrderReschedule(fulfillAt: $fulfillAt, id: $id) {\n      fulfillmentOrder {\n        id\n        status\n        fulfillAt\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/FulfillmentOrder/564786110\",\n  \"fulfillAt\": \"2024-11-25T18:40:54Z\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "fulfillmentOrderSplit", "description": "Splits a fulfillment order or orders based on line item inputs and quantities.", "arguments": [{"name": "fulfillmentOrderSplits", "type": "[FulfillmentOrderSplitInput!]!", "required": true, "description": "The fulfillment orders, line items and quantities to be split into new fulfillment orders."}], "returns": [], "examples": [{"description": "Split a single fulfillment order", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation fulfillmentOrderSplit($fulfillmentOrderSplits: [FulfillmentOrderSplitInput!]!) {\n    fulfillmentOrderSplit(fulfillmentOrderSplits: $fulfillmentOrderSplits) {\n      fulfillmentOrderSplits {\n        fulfillmentOrder {\n          id\n          lineItems(first: 10) {\n            edges {\n              cursor\n              node {\n                id\n                totalQuantity\n              }\n            }\n          }\n        }\n        remainingFulfillmentOrder {\n          id\n          lineItems(first: 10) {\n            edges {\n              cursor\n              node {\n                id\n                totalQuantity\n              }\n            }\n          }\n        }\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"fulfillmentOrderSplits\": [{\"fulfillmentOrderId\"=>\"gid://shopify/FulfillmentOrder/1046000796\", \"fulfillmentOrderLineItems\"=>[{\"id\"=>\"gid://shopify/FulfillmentOrderLineItem/1058737504\", \"quantity\"=>2}]}]\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "fulfillmentOrderSplit reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation fulfillmentOrderSplit($fulfillmentOrderSplits: [FulfillmentOrderSplitInput!]!) {\n    fulfillmentOrderSplit(fulfillmentOrderSplits: $fulfillmentOrderSplits) {\n      fulfillmentOrderSplits {\n        fulfillmentOrder {\n          id\n          lineItems(first: 10) {\n            edges {\n              cursor\n              node {\n                id\n                totalQuantity\n              }\n            }\n          }\n        }\n        remainingFulfillmentOrder {\n          id\n          lineItems(first: 10) {\n            edges {\n              cursor\n              node {\n                id\n                totalQuantity\n              }\n            }\n          }\n        }\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"fulfillmentOrderSplits\": [{\"fulfillmentOrderId\"=>\"gid://shopify/FulfillmentOrder/1046000796\", \"fulfillmentOrderLineItems\"=>[{\"id\"=>\"gid://shopify/FulfillmentOrderLineItem/1058737504\", \"quantity\"=>2}]}]\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "fulfillmentOrdersSetFulfillmentDeadline", "description": "Sets the latest date and time by which the fulfillment orders need to be fulfilled.", "arguments": [{"name": "fulfillmentDeadline", "type": "DateTime!", "required": true, "description": "The new fulfillment deadline of the fulfillment orders."}], "returns": [], "examples": [{"description": "Sets deadline for fulfillment orders", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation fulfillmentOrdersSetFulfillmentDeadline($fulfillmentDeadline: DateTime!, $fulfillmentOrderIds: [ID!]!) {\n    fulfillmentOrdersSetFulfillmentDeadline(fulfillmentDeadline: $fulfillmentDeadline, fulfillmentOrderIds: $fulfillmentOrderIds) {\n      success\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"fulfillmentDeadline\": \"2024-11-25T18:44:04Z\",\n  \"fulfillmentOrderIds\": [\"gid://shopify/FulfillmentOrder/234125762\", \"gid://shopify/FulfillmentOrder/564786110\"]\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "fulfillmentOrdersSetFulfillmentDeadline reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation fulfillmentOrdersSetFulfillmentDeadline($fulfillmentDeadline: DateTime!, $fulfillmentOrderIds: [ID!]!) {\n    fulfillmentOrdersSetFulfillmentDeadline(fulfillmentDeadline: $fulfillmentDeadline, fulfillmentOrderIds: $fulfillmentOrderIds) {\n      success\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"fulfillmentDeadline\": \"2024-11-25T18:44:04Z\",\n  \"fulfillmentOrderIds\": [\"gid://shopify/FulfillmentOrder/234125762\", \"gid://shopify/FulfillmentOrder/564786110\"]\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "fulfillmentOrderSubmitCancellationRequest", "description": "Sends a cancellation request to the fulfillment service of a fulfillment order.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID of the fulfillment order associated with the cancellation request."}], "returns": [], "examples": [{"description": "Sends a cancellation request", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation fulfillmentOrderSubmitCancellationRequest($id: ID!, $message: String) {\n    fulfillmentOrderSubmitCancellationRequest(id: $id, message: $message) {\n      fulfillmentOrder {\n        id\n        status\n        requestStatus\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/FulfillmentOrder/1046001469\",\n  \"message\": \"Customer cancelled their order\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "fulfillmentOrderSubmitCancellationRequest reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation fulfillmentOrderSubmitCancellationRequest($id: ID!, $message: String) {\n    fulfillmentOrderSubmitCancellationRequest(id: $id, message: $message) {\n      fulfillmentOrder {\n        id\n        status\n        requestStatus\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/FulfillmentOrder/1046001469\",\n  \"message\": \"Customer cancelled their order\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "fulfillmentOrderSubmitFulfillmentRequest", "description": "Sends a fulfillment request to the fulfillment service of a fulfillment order.", "arguments": [{"name": "fulfillmentOrderLineItems", "type": "[FulfillmentOrderLineItemInput!]", "required": true, "description": "The fulfillment order line items to be requested for fulfillment.\nIf left blank, all line items of the fulfillment order are requested for fulfillment."}], "returns": [], "examples": [{"description": "Sends a fulfillment request", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation fulfillmentOrderSubmitFulfillmentRequest($id: ID!) {\n    fulfillmentOrderSubmitFulfillmentRequest(id: $id) {\n      originalFulfillmentOrder {\n        id\n        status\n        requestStatus\n      }\n      submittedFulfillmentOrder {\n        id\n        status\n        requestStatus\n      }\n      unsubmittedFulfillmentOrder {\n        id\n        status\n        requestStatus\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/FulfillmentOrder/1046000784\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Split a fulfillment order into a partial fulfillment request", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation fulfillmentOrderSubmitFulfillmentRequest($id: ID!, $fulfillmentOrderLineItems: [FulfillmentOrderLineItemInput!]) {\n    fulfillmentOrderSubmitFulfillmentRequest(id: $id, fulfillmentOrderLineItems: $fulfillmentOrderLineItems) {\n      originalFulfillmentOrder {\n        id\n        status\n        requestStatus\n      }\n      submittedFulfillmentOrder {\n        id\n        status\n        requestStatus\n      }\n      unsubmittedFulfillmentOrder {\n        id\n        status\n        requestStatus\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/FulfillmentOrder/1046000782\",\n  \"fulfillmentOrderLineItems\": [{\"id\"=>\"gid://shopify/FulfillmentOrderLineItem/1072503280\", \"quantity\"=>1}]\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "fulfillmentOrderSubmitFulfillmentRequest reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation fulfillmentOrderSubmitFulfillmentRequest($id: ID!) {\n    fulfillmentOrderSubmitFulfillmentRequest(id: $id) {\n      originalFulfillmentOrder {\n        id\n        status\n        requestStatus\n      }\n      submittedFulfillmentOrder {\n        id\n        status\n        requestStatus\n      }\n      unsubmittedFulfillmentOrder {\n        id\n        status\n        requestStatus\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/FulfillmentOrder/1046000784\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "fulfillmentServiceCreate", "description": "Creates a fulfillment service.\nFulfillment service location\nWhen creating a fulfillment service, a new location will be automatically created on the shop\nand will be associated with this fulfillment service.\nThis location will be named after the fulfillment service and inherit the shop's address.\nIf you are using API version 2023-10 or later, and you need to specify custom attributes for the fulfillment service location\n(for example, to change its address to a country different from the shop's country),\nuse the\nLocationEdit\nmutation after creating the fulfillment service.", "arguments": [{"name": "callbackUrl", "type": "URL!", "required": true, "description": "The URL to send requests for the fulfillment service. The following considerations apply:\n\nShopify queries the callback_url/fetch_tracking_numbers endpoint to retrieve tracking numbers\nfor orders, if trackingSupport is set to true.\nShopify queries the callback_url/fetch_stock endpoint to retrieve inventory levels,\nif inventoryManagement is set to true.\nShopify uses the callback_url/fulfillment_order_notification endpoint to send\nfulfillment and cancellation requests."}], "returns": [], "examples": [{"description": "Create a new FulfillmentService", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation fulfillmentServiceCreate($name: String!, $callbackUrl: URL!) {\n    fulfillmentServiceCreate(name: $name, callbackUrl: $callbackUrl) {\n      fulfillmentService {\n        id\n        serviceName\n        callbackUrl\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"name\": \"example_fulfillment_service\",\n  \"callbackUrl\": \"https://callback.org/\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "fulfillmentServiceCreate reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation fulfillmentServiceCreate($name: String!, $callbackUrl: URL!) {\n    fulfillmentServiceCreate(name: $name, callbackUrl: $callbackUrl) {\n      fulfillmentService {\n        id\n        serviceName\n        callbackUrl\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"name\": \"example_fulfillment_service\",\n  \"callbackUrl\": \"https://callback.org/\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "fulfillmentServiceDelete", "description": "Deletes a fulfillment service.", "arguments": [{"name": "destinationLocationId", "type": "ID", "required": true, "description": "The ID of an active merchant managed location where inventory and commitments will be relocated\nafter the fulfillment service is deleted.\nInventory will only be transferred if the\nTRANSFER\ninventory action has been chosen."}], "returns": [], "examples": [{"description": "Remove an existing FulfillmentService", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation fulfillmentServiceDelete($id: ID!, $destinationLocationId: ID) {\n    fulfillmentServiceDelete(id: $id, destinationLocationId: $destinationLocationId) {\n      deletedId\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"destinationLocationId\": \"gid://shopify/Location/124656943\",\n  \"id\": \"gid://shopify/FulfillmentService/198258461\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "fulfillmentServiceDelete reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation fulfillmentServiceDelete($id: ID!, $destinationLocationId: ID) {\n    fulfillmentServiceDelete(id: $id, destinationLocationId: $destinationLocationId) {\n      deletedId\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"destinationLocationId\": \"gid://shopify/Location/124656943\",\n  \"id\": \"gid://shopify/FulfillmentService/198258461\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "fulfillmentServiceUpdate", "description": "Updates a fulfillment service.\nIf you are using API version 2023-10 or later,\nand you need to update the location managed by the fulfillment service\n(for example, to change the address of a fulfillment service),\nuse the\nLocationEdit\nmutation.", "arguments": [{"name": "callbackUrl", "type": "URL", "required": true, "description": "The URL to send requests for the fulfillment service. The following considerations apply:\n\nShopify queries the callback_url/fetch_tracking_numbers endpoint to retrieve tracking numbers\nfor orders, if trackingSupport is set to true.\nShopify queries the callback_url/fetch_stock endpoint to retrieve inventory levels,\nif inventoryManagement is set to true.\nShopify uses the callback_url/fulfillment_order_notification endpoint to send\nfulfillment and cancellation requests."}], "returns": [], "examples": [{"description": "Modify an existing FulfillmentService", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation fulfillmentServiceUpdate($id: ID!, $name: String!) {\n    fulfillmentServiceUpdate(id: $id, name: $name) {\n      fulfillmentService {\n        id\n        serviceName\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/FulfillmentService/198258461\",\n  \"name\": \"My Updated Fulfillment Warehouse\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "fulfillmentServiceUpdate reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation fulfillmentServiceUpdate($id: ID!, $name: String!) {\n    fulfillmentServiceUpdate(id: $id, name: $name) {\n      fulfillmentService {\n        id\n        serviceName\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/FulfillmentService/198258461\",\n  \"name\": \"My Updated Fulfillment Warehouse\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "fulfillmentTrackingInfoUpdate", "description": "Updates tracking information for a fulfillment.", "arguments": [{"name": "fulfillmentId", "type": "ID!", "required": true, "description": "The ID of the fulfillment."}], "returns": [], "examples": [{"description": "Updates the tracking information for a fulfillment", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation FulfillmentTrackingInfoUpdate($fulfillmentId: ID!, $trackingInfoInput: FulfillmentTrackingInput!, $notifyCustomer: Boolean) {\n    fulfillmentTrackingInfoUpdate(fulfillmentId: $fulfillmentId, trackingInfoInput: $trackingInfoInput, notifyCustomer: $notifyCustomer) {\n      fulfillment {\n        id\n        status\n        trackingInfo {\n          company\n          number\n          url\n        }\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"fulfillmentId\": \"gid://shopify/Fulfillment/255858046\",\n  \"notifyCustomer\": true,\n  \"trackingInfoInput\": {\n    \"company\": \"UPS\",\n    \"number\": \"1Z001985YW99744790\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "fulfillmentTrackingInfoUpdate reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation FulfillmentTrackingInfoUpdate($fulfillmentId: ID!, $trackingInfoInput: FulfillmentTrackingInput!, $notifyCustomer: Boolean) {\n    fulfillmentTrackingInfoUpdate(fulfillmentId: $fulfillmentId, trackingInfoInput: $trackingInfoInput, notifyCustomer: $notifyCustomer) {\n      fulfillment {\n        id\n        status\n        trackingInfo {\n          company\n          number\n          url\n        }\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"fulfillmentId\": \"gid://shopify/Fulfillment/255858046\",\n  \"notifyCustomer\": true,\n  \"trackingInfoInput\": {\n    \"company\": \"UPS\",\n    \"number\": \"1Z001985YW99744790\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "fulfillmentTrackingInfoUpdateV2", "description": "Updates tracking information for a fulfillment.", "arguments": [{"name": "fulfillmentId", "type": "ID!", "required": true, "description": "The ID of the fulfillment."}], "returns": [], "examples": [{"description": "Add a tracking number and a tracking company name to a fulfillment", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation fulfillmentTrackingInfoUpdateV2($fulfillmentId: ID!, $trackingInfoInput: FulfillmentTrackingInput!, $notifyCustomer: Boolean) {\n    fulfillmentTrackingInfoUpdateV2(fulfillmentId: $fulfillmentId, trackingInfoInput: $trackingInfoInput, notifyCustomer: $notifyCustomer) {\n      fulfillment {\n        id\n        status\n        trackingInfo {\n          company\n          number\n          url\n        }\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"fulfillmentId\": \"gid://shopify/Fulfillment/255858046\",\n  \"notifyCustomer\": true,\n  \"trackingInfoInput\": {\n    \"company\": \"UPS\",\n    \"number\": \"1Z001985YW99744790\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Add tracking information with two tracking numbers and a supported tracking company name specified", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation fulfillmentTrackingInfoUpdateV2($fulfillmentId: ID!, $trackingInfoInput: FulfillmentTrackingInput!, $notifyCustomer: Boolean) {\n    fulfillmentTrackingInfoUpdateV2(fulfillmentId: $fulfillmentId, trackingInfoInput: $trackingInfoInput, notifyCustomer: $notifyCustomer) {\n      fulfillment {\n        id\n        status\n        trackingInfo {\n          company\n          number\n          url\n        }\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"fulfillmentId\": \"gid://shopify/Fulfillment/255858046\",\n  \"notifyCustomer\": true,\n  \"trackingInfoInput\": {\n    \"company\": \"UPS\",\n    \"numbers\": [\"1Z001985YW99744790\", \"1Z001985YW99744791\"]\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "returns a user error if the fulfillment is not found", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation fulfillmentTrackingInfoUpdateV2($fulfillmentId: ID!, $trackingInfoInput: FulfillmentTrackingInput!, $notifyCustomer: Boolean) {\n    fulfillmentTrackingInfoUpdateV2(fulfillmentId: $fulfillmentId, trackingInfoInput: $trackingInfoInput, notifyCustomer: $notifyCustomer) {\n      fulfillment {\n        id\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"fulfillmentId\": \"gid://shopify/Fulfillment/623721858\",\n  \"trackingInfoInput\": {\n    \"company\": \"UPS\",\n    \"number\": \"1Z001985YW99744790\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "fulfillmentTrackingInfoUpdateV2 reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation fulfillmentTrackingInfoUpdateV2($fulfillmentId: ID!, $trackingInfoInput: FulfillmentTrackingInput!, $notifyCustomer: Boolean) {\n    fulfillmentTrackingInfoUpdateV2(fulfillmentId: $fulfillmentId, trackingInfoInput: $trackingInfoInput, notifyCustomer: $notifyCustomer) {\n      fulfillment {\n        id\n        status\n        trackingInfo {\n          company\n          number\n          url\n        }\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"fulfillmentId\": \"gid://shopify/Fulfillment/255858046\",\n  \"notifyCustomer\": true,\n  \"trackingInfoInput\": {\n    \"company\": \"UPS\",\n    \"number\": \"1Z001985YW99744790\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "shippingPackageDelete", "description": "Deletes a shipping package.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID of the shipping package to remove."}], "returns": [], "examples": []}, {"name": "shippingPackageMakeDefault", "description": "Set a shipping package as the default.\nThe default shipping package is the one used to calculate shipping costs on checkout.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID of the shipping package to set as the default."}], "returns": [], "examples": []}, {"name": "shippingPackageUpdate", "description": "Updates a shipping package.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID of the shipping package to update."}], "returns": [], "examples": []}], "objects": [{"name": "CountriesInShippingZones", "description": "The list of all the countries from the combined shipping zones for the shop.", "fields_and_connections": [{"name": "countryCodes", "type": "[CountryCode!]!", "description": "The list of all the countries from all the combined shipping zones.", "not_nullable": true}], "examples": []}, {"name": "DeliveryAvailableService", "description": "A shipping service and a list of countries that the service is available for.", "fields_and_connections": [{"name": "countries", "type": "DeliveryCountryCodesOrRestOfWorld!", "description": "The countries the service provider ships to.", "not_nullable": true}], "examples": []}, {"name": "DeliveryBrandedPromise", "description": "Represents a branded promise presented to buyers.", "fields_and_connections": [{"name": "handle", "type": "String!", "description": "The handle of the branded promise.  For example: shop_promise.", "not_nullable": true}], "examples": []}, {"name": "DeliveryCarrierService", "description": "A carrier service (also known as a carrier calculated service or shipping service) provides real-time shipping rates to Shopify. Some common carrier services include Canada Post, FedEx, UPS, and USPS. The term carrier is often used interchangeably with the terms shipping company and rate provider.\nUsing the CarrierService resource, you can add a carrier service to a shop and then provide a list of applicable shipping rates at checkout. You can even use the cart data to adjust shipping rates and offer shipping discounts based on what is in the customer's cart.\nRequirements for accessing the CarrierService resource\nTo access the CarrierService resource, add the write_shipping permission to your app's requested scopes. For more information, see API access scopes.\nYour app's request to create a carrier service will fail unless the store installing your carrier service meets one of the following requirements:\n\nIt's on the Advanced Shopify plan or higher.\nIt's on the Shopify plan with yearly billing, or the carrier service feature has been added to the store for a monthly fee. For more information, contact Shopify Support.\nIt's a development store.\n\nNoteIf a store changes its Shopify plan, then the store's association with a carrier service is deactivated if the store no long meets one of the requirements above.Providing shipping rates to Shopify\nWhen adding a carrier service to a store, you need to provide a POST endpoint rooted in the callbackUrl property where Shopify can retrieve applicable shipping rates. The callback URL should be a public endpoint that expects these requests from Shopify.\nExample shipping rate request sent to a carrier service\nCopy991234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950{  \"rate\": {    \"origin\": {      \"country\": \"CA\",      \"postal_code\": \"K2P1L4\",      \"province\": \"ON\",      \"city\": \"Ottawa\",      \"name\": null,      \"address1\": \"150 Elgin St.\",      \"address2\": \"\",      \"address3\": null,      \"phone\": null,      \"fax\": null,      \"email\": null,      \"address_type\": null,      \"company_name\": \"Jamie D's Emporium\"    },    \"destination\": {      \"country\": \"CA\",      \"postal_code\": \"K1M1M4\",      \"province\": \"ON\",      \"city\": \"Ottawa\",      \"name\": \"Bob Norman\",      \"address1\": \"24 Sussex Dr.\",      \"address2\": \"\",      \"address3\": null,      \"phone\": null,      \"fax\": null,      \"email\": null,      \"address_type\": null,      \"company_name\": null    },    \"items\": [{      \"name\": \"Short Sleeve T-Shirt\",      \"sku\": \"\",      \"quantity\": 1,      \"grams\": 1000,      \"price\": 1999,      \"vendor\": \"Jamie D's Emporium\",      \"requires_shipping\": true,      \"taxable\": true,      \"fulfillment_service\": \"manual\",      \"properties\": null,      \"product_id\": 48447225880,      \"variant_id\": 258644705304    }],    \"currency\": \"USD\",    \"locale\": \"en\"  }}\n\nExample response\nCopy991234567891011121314151617181920212223242526272829{   \"rates\": [       {           \"service_name\": \"canadapost-overnight\",           \"service_code\": \"ON\",           \"total_price\": \"1295\",           \"description\": \"This is the fastest option by far\",           \"currency\": \"CAD\",           \"min_delivery_date\": \"2013-04-12 14:48:45 -0400\",           \"max_delivery_date\": \"2013-04-12 14:48:45 -0400\"       },       {           \"service_name\": \"fedex-2dayground\",           \"service_code\": \"2D\",           \"total_price\": \"2934\",           \"currency\": \"USD\",           \"min_delivery_date\": \"2013-04-12 14:48:45 -0400\",           \"max_delivery_date\": \"2013-04-12 14:48:45 -0400\"       },       {           \"service_name\": \"fedex-priorityovernight\",           \"service_code\": \"1D\",           \"total_price\": \"3587\",           \"currency\": \"USD\",           \"min_delivery_date\": \"2013-04-12 14:48:45 -0400\",           \"max_delivery_date\": \"2013-04-12 14:48:45 -0400\"       }   ]}\n\nThe address3, fax, address_type, and company_name fields are returned by specific ActiveShipping providers. For API-created carrier services, you should use only the following shipping address fields:\n\naddress1\naddress2\ncity\nzip\nprovince\ncountry\n\nOther values remain as null and are not sent to the callback URL.\nResponse fields\nWhen Shopify requests shipping rates using your callback URL, the response object rates must be a JSON array of objects with the following fields.  Required fields must be included in the response for the carrier service integration to work properly.\nFieldRequiredDescriptionservice_nameYesThe name of the rate, which customers see at checkout. For example: Expedited Mail.descriptionYesA description of the rate, which customers see at checkout. For example: Includes tracking and insurance.service_codeYesA unique code associated with the rate. For example: expedited_mail.currencyYesThe currency of the shipping rate.total_priceYesThe total price expressed in subunits. If the currency doesn't use subunits, then the value must be multiplied by 100. For example: \"total_price\": 500 for 5.00 CAD, \"total_price\": 100000 for 1000 JPY.phone_requiredNoWhether the customer must provide a phone number at checkout.min_delivery_dateNoThe earliest delivery date for the displayed rate.max_delivery_dateNoThe latest delivery date for the displayed rate to still be valid.Special conditions\n\nTo indicate that this carrier service cannot handle this shipping request, return an empty array and any successful (20x) HTTP code.\nTo force backup rates instead, return a 40x or 50x HTTP code with any content. A good choice is the regular 404 Not Found code.\nRedirects (30x codes) will only be followed for the same domain as the original callback URL. Attempting to redirect to a different domain will trigger backup rates.\nThere is no retry mechanism. The response must be successful on the first try, within the time budget listed below. Timeouts or errors will trigger backup rates.\n\nResponse Timeouts\nThe read timeout for rate requests are dynamic, based on the number of requests per minute (RPM). These limits are applied to each shop-app pair. The timeout values are as follows.\nRPM RangeTimeoutUnder 150010s1500 to 30005sOver 30003sNoteThese values are upper limits and should not be interpretted as a goal to develop towards. Shopify is constantly evaluating the performance of the platform and working towards improving resilience as well as app capabilities. As such, these numbers may be adjusted outside of our normal versioning timelines.Server-side caching of requests\nShopify provides server-side caching to reduce the number of requests it makes. Any shipping rate request that identically matches the following fields will be retrieved from Shopify's cache of the initial response:\n\nvariant IDs\ndefault shipping box weight and dimensions\nvariant quantities\ncarrier service ID\norigin address\ndestination address\nitem weights and signatures\n\nIf any of these fields differ, or if the cache has expired since the original request, then new shipping rates are requested. The cache expires 15 minutes after rates are successfully returned. If an error occurs, then the cache expires after 30 seconds.", "fields_and_connections": [{"name": "active", "type": "Boolean!", "description": "Whether the carrier service is active.", "not_nullable": true}], "examples": []}, {"name": "DeliveryCarrierServiceAndLocations", "description": "A carrier service and the associated list of shop locations.", "fields_and_connections": [{"name": "carrierService", "type": "DeliveryCarrierService!", "description": "The carrier service.", "not_nullable": true}], "examples": []}, {"name": "DeliveryCondition", "description": "A condition that must pass for a delivery method definition to be applied to an order.", "fields_and_connections": [{"name": "conditionCriteria", "type": "DeliveryConditionCriteria!", "description": "The value (weight or price) that the condition field is compared to.", "not_nullable": true}], "examples": []}, {"name": "DeliveryCountry", "description": "A country that is used to define a shipping zone.", "fields_and_connections": [{"name": "code", "type": "DeliveryCountryCodeOrRestOfWorld!", "description": "A two-letter country code in ISO 3166-1 alpha-2 standard.\nIt also includes a flag indicating whether the country should be\na part of the 'Rest Of World' shipping zone.", "not_nullable": true}], "examples": []}, {"name": "DeliveryCountryAndZone", "description": "The country details and the associated shipping zone.", "fields_and_connections": [{"name": "country", "type": "DeliveryCountry!", "description": "The country details.", "not_nullable": true}], "examples": []}, {"name": "DeliveryCountryCodeOrRestOfWorld", "description": "The country code and whether the country is a part of the 'Rest Of World' shipping zone.", "fields_and_connections": [{"name": "countryCode", "type": "CountryCode", "description": "The country code in the ISO 3166-1 alpha-2 format.", "not_nullable": true}], "examples": []}, {"name": "DeliveryCountryCodesOrRestOfWorld", "description": "The list of country codes and information whether the countries\nare a part of the 'Rest Of World' shipping zone.", "fields_and_connections": [{"name": "countryCodes", "type": "[CountryCode!]!", "description": "List of applicable country codes in the ISO 3166-1 alpha-2 format.", "not_nullable": true}], "examples": []}, {"name": "DeliveryCustomization", "description": "A delivery customization.", "fields_and_connections": [{"name": "enabled", "type": "Boolean!", "description": "The enabled status of the delivery customization.", "not_nullable": true}], "examples": []}, {"name": "DeliveryCustomizationError", "description": "An error that occurs during the execution of a delivery customization mutation.", "fields_and_connections": [{"name": "code", "type": "DeliveryCustomizationErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "DeliveryLegacyModeBlocked", "description": "Whether the shop is blocked from converting to full multi-location delivery profiles mode. If the shop is blocked, then the blocking reasons are also returned.", "fields_and_connections": [{"name": "blocked", "type": "Boolean!", "description": "Whether the shop can convert to full multi-location delivery profiles mode.", "not_nullable": true}], "examples": []}, {"name": "DeliveryLocalPickupSettings", "description": "Local pickup settings associated with a location.", "fields_and_connections": [{"name": "instructions", "type": "String!", "description": "Additional instructions or information related to the local pickup.", "not_nullable": true}], "examples": []}, {"name": "DeliveryLocationGroup", "description": "A location group is a collection of locations. They share zones and delivery methods across delivery\nprofiles.", "fields_and_connections": [{"name": "id", "type": "ID!", "description": "A globally-unique ID.", "not_nullable": true}], "examples": []}, {"name": "DeliveryLocationGroupZone", "description": "Links a location group with a zone and the associated method definitions.", "fields_and_connections": [{"name": "methodDefinitionCounts", "type": "DeliveryMethodDefinitionCounts!", "description": "The number of method definitions for the zone.", "not_nullable": true}], "examples": []}, {"name": "DeliveryLocationLocalPickupSettingsError", "description": "Represents an error that happened when changing local pickup settings for a location.", "fields_and_connections": [{"name": "code", "type": "DeliveryLocationLocalPickupSettingsErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "DeliveryMethod", "description": "The delivery method used by a fulfillment order.", "fields_and_connections": [{"name": "additionalInformation", "type": "DeliveryMethodAdditionalInformation", "description": "The Additional information to consider when performing the delivery.", "not_nullable": true}], "examples": []}, {"name": "DeliveryMethodAdditionalInformation", "description": "Additional information included on a delivery method that will help during the delivery process.", "fields_and_connections": [{"name": "instructions", "type": "String", "description": "The delivery instructions to follow when performing the delivery.", "not_nullable": false}], "examples": []}, {"name": "DeliveryMethodDefinition", "description": "A method definition contains the delivery rate and the conditions that must be met for the method to be\napplied.", "fields_and_connections": [{"name": "active", "type": "Boolean!", "description": "Whether this method definition is active.", "not_nullable": true}], "examples": []}, {"name": "DeliveryMethodDefinitionCounts", "description": "The number of method definitions for a zone, separated into merchant-owned and participant definitions.", "fields_and_connections": [{"name": "participantDefinitionsCount", "type": "Int!", "description": "The number of participant method definitions for the specified zone.", "not_nullable": true}], "examples": []}, {"name": "DeliveryParticipant", "description": "A participant defines carrier-calculated rates for shipping services\nwith a possible merchant-defined fixed fee or a percentage-of-rate fee.", "fields_and_connections": [{"name": "adaptToNewServicesFlag", "type": "Boolean!", "description": "Whether to display new shipping services automatically to the customer when the service becomes available.", "not_nullable": true}], "examples": []}, {"name": "DeliveryParticipantService", "description": "A mail service provided by the participant.", "fields_and_connections": [{"name": "active", "type": "Boolean!", "description": "Whether the service is active.", "not_nullable": true}], "examples": []}, {"name": "DeliveryProductVariantsCount", "description": "How many product variants are in a profile. This count is capped at 500.", "fields_and_connections": [{"name": "capped", "type": "Boolean!", "description": "Whether the count has reached the cap of 500.", "not_nullable": true}], "examples": []}, {"name": "DeliveryProfile", "description": "A shipping profile. In Shopify, a shipping profile is a set of shipping rates scoped to a set of products or variants that can be shipped from selected locations to zones. Learn more about building with delivery profiles.", "fields_and_connections": [{"name": "activeMethodDefinitionsCount", "type": "Int!", "description": "The number of active shipping rates for the profile.", "not_nullable": true}], "examples": []}, {"name": "DeliveryProfileItem", "description": "A product and the subset of associated variants that are part of this delivery profile.", "fields_and_connections": [{"name": "id", "type": "ID!", "description": "A globally-unique ID.", "not_nullable": true}], "examples": []}, {"name": "DeliveryProfileLocationGroup", "description": "Links a location group with zones. Both are associated to a delivery profile.", "fields_and_connections": [{"name": "countriesInAnyZone", "type": "[DeliveryCountryAndZone!]!", "description": "The countries already selected in any zone for the specified location group.", "not_nullable": true}], "examples": []}, {"name": "DeliveryPromiseParticipant", "description": "Returns enabled delivery promise participants.", "fields_and_connections": [{"name": "id", "type": "ID!", "description": "The ID of the promise participant.", "not_nullable": true}], "examples": []}, {"name": "DeliveryPromiseProvider", "description": "A delivery promise provider. Currently restricted to select approved delivery promise partners.", "fields_and_connections": [{"name": "active", "type": "Boolean!", "description": "Whether the delivery promise provider is active. Defaults to true when creating a provider.", "not_nullable": true}], "examples": []}, {"name": "DeliveryPromiseSetting", "description": "The delivery promise settings.", "fields_and_connections": [{"name": "deliveryDatesEnabled", "type": "Boolean!", "description": "Whether delivery dates is enabled.", "not_nullable": true}], "examples": []}, {"name": "DeliveryProvince", "description": "A region that is used to define a shipping zone.", "fields_and_connections": [{"name": "code", "type": "String!", "description": "The code of the region.", "not_nullable": true}], "examples": []}, {"name": "DeliveryRateDefinition", "description": "The merchant-defined rate of the DeliveryMethodDefinition.", "fields_and_connections": [{"name": "id", "type": "ID!", "description": "A globally-unique ID.", "not_nullable": true}], "examples": []}, {"name": "DeliverySetting", "description": "The DeliverySetting object enables you to manage shop-wide shipping settings.\nYou can enable legacy compatibility mode for the multi-location delivery profiles feature\nif the legacy mode isn't blocked.", "fields_and_connections": [{"name": "legacyModeBlocked", "type": "DeliveryLegacyModeBlocked!", "description": "Whether the shop is blocked from converting to full multi-location delivery profiles mode. If the shop is blocked, then the blocking reasons are also returned.", "not_nullable": true}], "examples": []}, {"name": "DeliveryZone", "description": "A zone is a group of countries that have the same shipping rates. Customers can order products from a store only if they choose a shipping destination that's included in one of the store's zones.", "fields_and_connections": [{"name": "countries", "type": "[DeliveryCountry!]!", "description": "The list of countries within the zone.", "not_nullable": true}], "examples": []}, {"name": "EditableProperty", "description": "The attribute editable information.", "fields_and_connections": [{"name": "locked", "type": "Boolean!", "description": "Whether the attribute is locked for editing.", "not_nullable": true}], "examples": []}, {"name": "FinancialSummaryDiscountAllocation", "description": "An amount that's allocated to a line item based on an associated discount application.", "fields_and_connections": [{"name": "approximateAllocatedAmountPerItem", "type": "MoneyBag!", "description": "The money amount that's allocated per unit on the associated line based on the discount application in shop and presentment currencies. If the allocated amount for the line cannot be evenly divided by the quantity, then this amount will be an approximate amount, avoiding fractional pennies. For example, if the associated line had a quantity of 3 with a discount of 4 cents, then the discount distribution would be [0.01, 0.01, 0.02]. This field returns the highest number of the distribution. In this example, this would be 0.02.", "not_nullable": true}], "examples": []}, {"name": "FinancialSummaryDiscountApplication", "description": "Discount applications capture the intentions of a discount source at\nthe time of application on an order's line items or shipping lines.", "fields_and_connections": [{"name": "allocationMethod", "type": "DiscountApplicationAllocationMethod!", "description": "The method by which the discount's value is applied to its entitled items.", "not_nullable": true}], "examples": []}, {"name": "Fulfillment", "description": "Represents a fulfillment.\nIn Shopify, a fulfillment represents a shipment of one or more items in an order.\nWhen an order has been completely fulfilled, it means that all the items that are included\nin the order have been sent to the customer.\nThere can be more than one fulfillment for an order.", "fields_and_connections": [{"name": "createdAt", "type": "DateTime!", "description": "The date and time when the fulfillment was created.", "not_nullable": true}], "examples": []}, {"name": "FulfillmentEvent", "description": "The fulfillment event that describes the fulfilllment status at a particular time.", "fields_and_connections": [{"name": "address1", "type": "String", "description": "The street address where this fulfillment event occurred.", "not_nullable": true}], "examples": []}, {"name": "FulfillmentHold", "description": "A fulfillment hold currently applied on a fulfillment order.", "fields_and_connections": [{"name": "displayReason", "type": "String!", "description": "The localized reason for the fulfillment hold for display purposes.", "not_nullable": true}], "examples": []}, {"name": "FulfillmentLineItem", "description": "Represents a line item from an order that's included in a fulfillment.", "fields_and_connections": [{"name": "discountedTotalSet", "type": "MoneyBag!", "description": "The total price after discounts are applied in shop and presentment currencies. This value doesn't include order-level discounts.", "not_nullable": true}], "examples": []}, {"name": "FulfillmentOrder", "description": "The FulfillmentOrder object represents either an item or a group of items in an\nOrder\nthat are expected to be fulfilled from the same location.\nThere can be more than one fulfillment order for an\norder\nat a given location.\n\n\nFulfillment orders represent the work which is intended to be done in relation to an order.\nWhen fulfillment has started for one or more line items, a\nFulfillment\nis created by a merchant or third party to represent the ongoing or completed work of fulfillment.\nSee below for more details on creating fulfillments.\nNoteShopify creates fulfillment orders automatically when an order is created.\nIt is not possible to manually create fulfillment orders.\nSee below for more details on the lifecycle of a fulfillment order.Retrieving fulfillment orders\nFulfillment orders from an order\nAll fulfillment orders related to a given order can be retrieved with the\nOrder.fulfillmentOrders\nconnection.\nAPI access scopes\ngovern which fulfillments orders are returned to clients.\nAn API client will only receive a subset of the fulfillment orders which belong to an order\nif they don't have the necessary access scopes to view all of the fulfillment orders.\nFulfillment orders assigned to the app for fulfillment\nFulfillment service apps can retrieve the fulfillment orders which have been assigned to their locations with the\nassignedFulfillmentOrders\nconnection.\nUse the assignmentStatus argument to control whether all assigned fulfillment orders\nshould be returned or only those where a merchant has sent a\nfulfillment request\nand it has yet to be responded to.\nThe API client must be granted the read_assigned_fulfillment_orders access scope to access\nthe assigned fulfillment orders.\nAll fulfillment orders\nApps can retrieve all fulfillment orders with the\nfulfillmentOrders\nquery. This query returns all assigned, merchant-managed, and third-party fulfillment orders on the shop,\nwhich are accessible to the app according to the\nfulfillment order access scopes it was granted with.\nThe lifecycle of a fulfillment order\nFulfillment Order Creation\nAfter an order is created, a background worker performs the order routing process which determines\nwhich locations will be responsible for fulfilling the purchased items.\nOnce the order routing process is complete, one or more fulfillment orders will be created\nand assigned to these locations. It is not possible to manually create fulfillment orders.\nOnce a fulfillment order has been created, it will have one of two different lifecycles depending on\nthe type of location which the fulfillment order is assigned to.\nThe lifecycle of a fulfillment order at a merchant managed location\nFulfillment orders are completed by creating\nfulfillments.\nFulfillments represents the work done.\nFor digital products a merchant or an order management app would create a fulfilment once the digital asset\nhas been provisioned.\nFor example, in the case of a digital gift card, a merchant would to do this once\nthe gift card has been activated - before the email has been shipped.\nOn the other hand, for a traditional shipped order,\na merchant or an order management app would create a fulfillment after picking and packing the items relating\nto a fulfillment order, but before the courier has collected the goods.\nLearn about managing fulfillment orders as an order management app.\nThe lifecycle of a fulfillment order at a location which is managed by a fulfillment service\nFor fulfillment orders which are assigned to a location that is managed by a fulfillment service,\na merchant or an Order Management App can\nsend a fulfillment request\nto the fulfillment service which operates the location to request that they fulfill the associated items.\nA fulfillment service has the option to\naccept\nor reject\nthis fulfillment request.\nOnce the fulfillment service has accepted the request, the request can no longer be cancelled by the merchant\nor order management app and instead a\ncancellation request must be submitted\nto the fulfillment service.\nOnce a fulfillment service accepts a fulfillment request,\nthen after they are ready to pack items and send them for delivery, they create fulfillments with the\nfulfillmentCreate\nmutation.\nThey can provide tracking information right away or create fulfillments without it and then\nupdate the tracking information for fulfillments with the\nfulfillmentTrackingInfoUpdate\nmutation.\nLearn about managing fulfillment orders as a fulfillment service.\nAPI access scopes\nFulfillment orders are governed by the following API access scopes:\n\nThe read_merchant_managed_fulfillment_orders and\nwrite_merchant_managed_fulfillment_orders access scopes\ngrant access to fulfillment orders assigned to merchant-managed locations.\nThe read_assigned_fulfillment_orders and write_assigned_fulfillment_orders\naccess scopes are intended for fulfillment services.\nThese scopes grant access to fulfillment orders assigned to locations that are being managed\nby fulfillment services.\nThe read_third_party_fulfillment_orders and write_third_party_fulfillment_orders\naccess scopes grant access to fulfillment orders\nassigned to locations managed by other fulfillment services.\n\nFulfillment service app access scopes\nUsually, fulfillment services have the write_assigned_fulfillment_orders access scope\nand don't have the *_third_party_fulfillment_orders\nor *_merchant_managed_fulfillment_orders access scopes.\nThe app will only have access to the fulfillment orders assigned to their location\n(or multiple locations if the app registers multiple fulfillment services on the shop).\nThe app will not have access to fulfillment orders assigned to merchant-managed locations\nor locations owned by other fulfillment service apps.\nOrder management app access scopes\nOrder management apps will usually request write_merchant_managed_fulfillment_orders and\nwrite_third_party_fulfillment_orders access scopes. This will allow them to manage all fulfillment orders\non behalf of a merchant.\nIf an app combines the functions of an order management app and a fulfillment service,\nthen the app should request all\naccess scopes to manage all assigned and all unassigned fulfillment orders.\nNotifications about fulfillment orders\nFulfillment services are required to\nregister\na self-hosted callback URL which has a number of uses. One of these uses is that this callback URL will be notified\nwhenever a merchant submits a fulfillment or cancellation request.\nBoth merchants and apps can\nsubscribe\nto the\nfulfillment order webhooks\nto be notified whenever fulfillment order related domain events occur.\nLearn about fulfillment workflows.", "fields_and_connections": [{"name": "assignedLocation", "type": "FulfillmentOrderAssignedLocation!", "description": "The fulfillment order's assigned location. This is the location where the fulfillment is expected to happen.\nThe fulfillment order's assigned location might change in the following cases:\n\nThe fulfillment order has been entirely moved to a new location. For example, the fulfillmentOrderMove mutation has been called, and you see the original fulfillment order in the movedFulfillmentOrder field within the mutation's response.\nWork on the fulfillment order hasn't yet begun, which means that the fulfillment order has the\nOPEN,\nSCHEDULED, or\nON_HOLD\nstatus, and the shop's location properties might be undergoing edits (for example, in the Shopify admin).", "not_nullable": true}], "examples": []}, {"name": "FulfillmentOrderAssignedLocation", "description": "The fulfillment order's assigned location. This is the location where the fulfillment is expected to happen.\n The fulfillment order's assigned location might change in the following cases:\n\nThe fulfillment order has been entirely moved to a new location. For example, the fulfillmentOrderMove mutation has been called, and you see the original fulfillment order in the movedFulfillmentOrder field within the mutation's response.\n\nWork on the fulfillment order has not yet begun, which means that the fulfillment order has the\n  OPEN,\n  SCHEDULED, or\n  ON_HOLD\n  status, and the shop's location properties might be undergoing edits (for example, in the Shopify admin).\n\n\nIf the fulfillmentOrderMove mutation has moved the fulfillment order's line items to a new location,\nbut hasn't moved the fulfillment order instance itself, then the original fulfillment order's assigned location\ndoesn't change.\nThis happens if the fulfillment order is being split during the move, or if all line items can be moved\nto an existing fulfillment order at a new location.\nOnce the fulfillment order has been taken into work or canceled,\nwhich means that the fulfillment order has the\nIN_PROGRESS,\nCLOSED,\nCANCELLED, or\nINCOMPLETE\nstatus, FulfillmentOrderAssignedLocation acts as a snapshot of the shop's location content.\nUp-to-date shop's location data may be queried through location connection.", "fields_and_connections": [{"name": "address1", "type": "String", "description": "The first line of the address for the location.", "not_nullable": true}], "examples": []}, {"name": "FulfillmentOrderDestination", "description": "Represents the destination where the items should be sent upon fulfillment.", "fields_and_connections": [{"name": "address1", "type": "String", "description": "The first line of the address of the destination.", "not_nullable": true}], "examples": []}, {"name": "FulfillmentOrderInternationalDuties", "description": "The international duties relevant to a fulfillment order.", "fields_and_connections": [{"name": "incoterm", "type": "String!", "description": "The method of duties payment. Example values: DDP, DAP.", "not_nullable": true}], "examples": []}, {"name": "FulfillmentOrderLineItem", "description": "Associates an order line item with quantities requiring fulfillment from the respective fulfillment order.", "fields_and_connections": [{"name": "financialSummaries", "type": "[FulfillmentOrderLineItemFinancialSummary!]!", "description": "The financial summary for the Fulfillment Order's Line Items.", "not_nullable": true}], "examples": []}, {"name": "FulfillmentOrderLineItemFinancialSummary", "description": "The financial details of a fulfillment order line item.", "fields_and_connections": [{"name": "approximateDiscountedUnitPriceSet", "type": "MoneyBag!", "description": "The approximate split price of a line item unit, in shop and presentment currencies. This value doesn't include discounts applied to the entire order.For the full picture of applied discounts, see discountAllocations.", "not_nullable": true}], "examples": []}, {"name": "FulfillmentOrderLineItemWarning", "description": "A fulfillment order line item warning. For example, a warning about why a fulfillment request was rejected.", "fields_and_connections": [{"name": "description", "type": "String", "description": "The description of warning.", "not_nullable": false}], "examples": []}, {"name": "FulfillmentOrderLocationForMove", "description": "A location that a fulfillment order can potentially move to.", "fields_and_connections": [{"name": "availableLineItems", "type": "FulfillmentOrderLineItemConnection!", "description": "Fulfillment order line items that can be moved from their current location to the given location.", "not_nullable": true}], "examples": []}, {"name": "FulfillmentOrderMerchantRequest", "description": "A request made by the merchant or an order management app to a fulfillment service\nfor a fulfillment order.", "fields_and_connections": [{"name": "fulfillmentOrder", "type": "FulfillmentOrder!", "description": "The fulfillment order associated with the merchant request.", "not_nullable": true}], "examples": []}, {"name": "FulfillmentOrderMergeResult", "description": "The result of merging a set of fulfillment orders.", "fields_and_connections": [{"name": "fulfillmentOrder", "type": "FulfillmentOrder!", "description": "The new fulfillment order as a result of the merge.", "not_nullable": true}], "examples": []}, {"name": "FulfillmentOrderSplitResult", "description": "The result of splitting a fulfillment order.", "fields_and_connections": [{"name": "fulfillmentOrder", "type": "FulfillmentOrder!", "description": "The original fulfillment order as a result of the split.", "not_nullable": true}], "examples": []}, {"name": "FulfillmentOrderSupportedAction", "description": "One of the actions that the fulfillment order supports in its current state.", "fields_and_connections": [{"name": "action", "type": "FulfillmentOrderAction!", "description": "The action value.", "not_nullable": true}], "examples": []}, {"name": "FulfillmentOriginAddress", "description": "The address at which the fulfillment occurred. This object is intended for tax purposes, as a full address is required for tax providers to accurately calculate taxes. Typically this is the address of the warehouse or fulfillment center. To retrieve a fulfillment location's address, use the assignedLocation field on the FulfillmentOrder object instead.", "fields_and_connections": [{"name": "address1", "type": "String", "description": "The street address of the fulfillment location.", "not_nullable": true}], "examples": []}, {"name": "FulfillmentService", "description": "A Fulfillment Service is a third party warehouse that prepares and ships orders\non behalf of the store owner. Fulfillment services charge a fee to package and ship items\nand update product inventory levels. Some well known fulfillment services with Shopify integrations\ninclude: Amazon, Shipwire, and Rakuten. When an app registers a new FulfillmentService on a store,\nShopify automatically creates a Location that's associated to the fulfillment service.\nTo learn more about fulfillment services, refer to\nManage fulfillments as a fulfillment service app\nguide.\nMutations\nYou can work with the FulfillmentService object with the\nfulfillmentServiceCreate,\nfulfillmentServiceUpdate,\nand fulfillmentServiceDelete\nmutations.\nHosted endpoints\nFulfillment service providers integrate with Shopify by providing Shopify with a set of hosted endpoints that\nShopify can query on certain conditions.\nThese endpoints must have a common prefix, and this prefix should be supplied in the callbackUrl parameter\nin the\nfulfillmentServiceCreate\nmutation.\n\nShopify sends POST requests to the <callbackUrl>/fulfillment_order_notification endpoint\nto notify the fulfillment service about fulfillment requests and fulfillment cancellation requests.\nFor more information, refer to\nReceive fulfillment requests and cancellations.\n\nShopify sends GET requests to the <callbackUrl>/fetch_tracking_numbers endpoint to retrieve tracking numbers for orders\nif trackingSupport is set to true.\nFor more information, refer to\nEnable tracking support.\nFulfillment services can also update tracking information using the\nfulfillmentTrackingInfoUpdate mutation,\nrather than waiting for Shopify to ask for tracking numbers.\n\nShopify sends GET requests to the <callbackUrl>/fetch_stock endpoint to retrieve\non hand inventory levels for the fulfillment service location if inventoryManagement is set to true.\nFor more information, refer to\nSharing inventory levels with Shopify.\n\n\nTo make sure you have everything set up correctly, you can test the callbackUrl-prefixed endpoints\nin your development store.\nResources and webhooks\nThere are a variety of objects and webhooks that enable a fulfillment service to work.\nTo exchange fulfillment information with Shopify, fulfillment services use the\nFulfillmentOrder,\nFulfillment and\nOrder objects and related mutations.\nTo act on fulfillment process events that happen on the Shopify side,\nbesides awaiting calls to callbackUrl-prefixed endpoints,\nfulfillment services can subscribe to the\nfulfillment order\nand order\nwebhooks.", "fields_and_connections": [{"name": "callbackUrl", "type": "URL", "description": "The callback URL that the fulfillment service has registered for requests. The following considerations apply:\n\nShopify queries the <callbackUrl>/fetch_tracking_numbers endpoint to retrieve tracking numbers\nfor orders, if trackingSupport is set to true.\nShopify queries the <callbackUrl>/fetch_stock endpoint to retrieve inventory levels,\nif inventoryManagement is set to true.\nShopify uses the <callbackUrl>/fulfillment_order_notification endpoint to send\nfulfillment and cancellation requests.", "not_nullable": true}], "examples": []}, {"name": "FulfillmentTrackingInfo", "description": "Represents the tracking information for a fulfillment.", "fields_and_connections": [{"name": "company", "type": "String", "description": "The name of the tracking company.\nFor tracking company names from the list below\nShopify will automatically build tracking URLs for all provided tracking numbers,\nwhich will make the tracking numbers clickable in the interface.\nAdditionally, for the tracking companies listed on the\nShipping Carriers help page\nShopify will automatically update the fulfillment's shipment_status field during the fulfillment process.\nSupported tracking companies\nThe following tracking companies display for shops located in any country:\n\n4PX\nAGS\nAmazon\nAmazon Logistics UK\nAn Post\nAnjun Logistics\nAPC\nAsendia USA\nAustralia Post\nBonshaw\nBPost\nBPost International\nCanada Post\nCanpar\nCDL Last Mile\nChina Post\nChronopost\nChukou1\nColissimo\nComingle\nCoordinadora\nCorreios\nCorreos\nCTT\nCTT Express\nCyprus Post\nDelnext\nDeutsche Post\nDHL eCommerce\nDHL eCommerce Asia\nDHL Express\nDPD\nDPD Local\nDPD UK\nDTD Express\nDX\nEagle\nEstes\nEvri\nFedEx\nFirst Global Logistics\nFirst Line\nFSC\nFulfilla\nGLS\nGuangdong Weisuyi Information Technology (WSE)\nHeppner Internationale Spedition GmbH & Co.\nIceland Post\nIDEX\nIsrael Post\nJapan Post (EN)\nJapan Post (JA)\nLa Poste\nLasership\nLatvia Post\nLietuvos Pa\u0161tas\nLogisters\nLone Star Overnight\nM3 Logistics\nMeteor Space\nMondial Relay\nNew Zealand Post\nNinjaVan\nNorth Russia Supply Chain (Shenzhen) Co.\nOnTrac\nPacketa\nPago Logistics\nPing An Da Tengfei Express\nPitney Bowes\nPortal PostNord\nPoste Italiane\nPostNL\nPostNord DK\nPostNord NO\nPostNord SE\nPurolator\nQxpress\nQyun Express\nRoyal Mail\nRoyal Shipments\nSagawa (EN)\nSagawa (JA)\nSendle\nSF Express\nSFC Fulfillment\nSHREE NANDAN COURIER\nSingapore Post\nSouthwest Air Cargo\nStarTrack\nStep Forward Freight\nSwiss Post\nTForce Final Mile\nTinghao\nTNT\nToll IPEC\nUnited Delivery Service\nUPS\nUSPS\nVenipak\nWe Post\nWhistl\nWizmo\nWMYC\nXpedigo\nXPO Logistics\nYamato (EN)\nYamato (JA)\nYiFan Express\nYunExpress\n\nThe following tracking companies are displayed for shops located in specific countries:\n\nAustralia: Australia Post, Sendle, Aramex Australia, TNT Australia, Hunter Express, Couriers Please, Bonds, Allied Express, Direct Couriers, Northline, GO Logistics\nAustria: \u00d6sterreichische Post\nBulgaria: Speedy\nCanada: Intelcom, BoxKnight, Loomis, GLS\nChina: China Post, DHL eCommerce Asia, WanbExpress, YunExpress, Anjun Logistics, SFC Fulfillment, FSC\nCzechia: Z\u00e1silkovna\nGermany: Deutsche Post (DE), Deutsche Post (EN), DHL, DHL Express, Swiship, Hermes, GLS\nSpain: SEUR\nFrance: Colissimo, Mondial Relay, Colis Priv\u00e9, GLS\nUnited Kingdom: Evri, DPD UK, Parcelforce, Yodel, DHL Parcel, Tuffnells\nGreece: ACS Courier\nHong Kong SAR: SF Express\nIreland: Fastway, DPD Ireland\nIndia: DTDC, India Post, Delhivery, Gati KWE, Professional Couriers, XpressBees, Ecom Express, Ekart, Shadowfax, Bluedart\nItaly: BRT, GLS Italy\nJapan: \u30a8\u30b3\u914d, \u897f\u6fc3\u904b\u8f38, \u897f\u6fc3\u30b9\u30fc\u30d1\u30fc\u30a8\u30ad\u30b9\u30d7\u30ec\u30b9, \u798f\u5c71\u901a\u904b, \u65e5\u672c\u901a\u904b, \u540d\u9244\u904b\u8f38, \u7b2c\u4e00\u8ca8\u7269\nNetherlands: DHL Parcel, DPD\nNorway: Bring\nPoland: Inpost\nTurkey: PTT, Yurti\u00e7i Kargo, Aras Kargo, S\u00fcrat Kargo\nUnited States: GLS, Alliance Air Freight, Pilot Freight, LSO, Old Dominion, Pandion, R+L Carriers, Southwest Air Cargo\nSouth Africa: Fastway, Skynet.", "not_nullable": false}], "examples": []}, {"name": "ShippingRate", "description": "A shipping rate is an additional cost added to the cost of the products that were ordered.", "fields_and_connections": [{"name": "handle", "type": "String!", "description": "Human-readable unique identifier for this shipping rate.", "not_nullable": true}], "examples": []}]}, {"name": "Shopify Markets", "queries": [{"name": "backupRegion", "description": "The backup region of the shop.", "arguments": [{"name": "MarketRegion", "type": "MarketRegion!", "required": true, "description": "A geographic region which comprises a market."}], "returns": [], "examples": []}, {"name": "market", "description": "Returns a market resource by ID.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID of the Market to return."}], "returns": [], "examples": []}, {"name": "marketByGeography", "description": "Returns the applicable market for a customer based on where they are in the world.", "arguments": [{"name": "countryCode", "type": "CountryCode!", "required": true, "description": "The code for the country where the customer is."}], "returns": [], "examples": []}, {"name": "markets", "description": "The markets configured for the shop.", "arguments": [{"name": "after", "type": "String", "required": true, "description": "The elements that come after the specified cursor."}], "returns": [], "examples": [{"description": "Get market web presences and their root URLs", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query Markets {\n    markets(first: 4) {\n      nodes {\n        name\n        webPresence {\n          rootUrls {\n            locale\n            url\n          }\n        }\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "Get the first four markets", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query Markets {\n    markets(first: 4) {\n      nodes {\n        id\n        name\n        regions(first: 2) {\n          pageInfo {\n            hasNextPage\n          }\n          nodes {\n            name\n            ... on MarketRegionCountry {\n              code\n            }\n          }\n        }\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}]}, {"name": "primaryMarket", "description": "The primary market of the shop.", "arguments": [{"name": "Market", "type": "Market!", "required": true, "description": "A market is a group of one or more regions that you want to target for international sales.\nBy creating a market, you can configure a distinct, localized shopping experience for\ncustomers from a specific area of the world. For example, you can\nchange currency,\nconfigure international pricing,\nor add market-specific domains or subfolders."}], "returns": [], "examples": []}, {"name": "webPresences", "description": "The web presences for the shop.", "arguments": [{"name": "after", "type": "String", "required": true, "description": "The elements that come after the specified cursor."}], "returns": [], "examples": []}], "mutations": [{"name": "backupRegionUpdate", "description": "Update the backup region that is used when we have no better signal of what region a buyer is in.", "arguments": [{"name": "region", "type": "BackupRegionUpdateInput", "required": true, "description": "Optional input representing the region to be updated. If not provided, the existing regions remain unchanged."}], "returns": [], "examples": []}, {"name": "marketCreate", "description": "Creates a new market.", "arguments": [{"name": "input", "type": "MarketCreateInput!", "required": true, "description": "The properties of the new market."}], "returns": [], "examples": [{"description": "Create a B2B market for all company locations located in the United States", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation marketCreate($input: MarketCreateInput!) {\n    marketCreate(input: $input) {\n      market {\n        id\n        handle\n        status\n        conditions {\n          companyLocationsCondition {\n            companyLocations(first: 10) {\n              edges {\n                node {\n                  id\n                }\n              }\n            }\n          }\n        }\n        currencySettings {\n          baseCurrency {\n            currencyCode\n          }\n          localCurrencies\n        }\n      }\n      userErrors {\n        field\n        message\n        code\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": {\n    \"name\": \"Company Location Market\",\n    \"handle\": \"Company-Location\",\n    \"enabled\": true,\n    \"conditions\": {\n      \"regionsCondition\": {\n        \"regions\": [{\"countryCode\"=>\"US\"}]\n      },\n      \"companyLocationsCondition\": {\n        \"applicationLevel\": \"ALL\"\n      }\n    },\n    \"currencySettings\": {\n      \"baseCurrency\": \"USD\",\n      \"localCurrencies\": false\n    }\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Create a B2B market with a specific currency and price inclusions", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation marketCreate($input: MarketCreateInput!) {\n    marketCreate(input: $input) {\n      market {\n        id\n        handle\n        status\n        conditions {\n          companyLocationsCondition {\n            companyLocations(first: 10) {\n              edges {\n                node {\n                  id\n                }\n              }\n            }\n          }\n        }\n        currencySettings {\n          baseCurrency {\n            currencyCode\n          }\n          localCurrencies\n        }\n      }\n      userErrors {\n        field\n        message\n        code\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": {\n    \"name\": \"Company Location Market\",\n    \"handle\": \"company-location-market\",\n    \"enabled\": true,\n    \"conditions\": {\n      \"companyLocationsCondition\": {\n        \"companyLocationIds\": [\"gid://shopify/CompanyLocation/423757199\"]\n      }\n    },\n    \"currencySettings\": {\n      \"baseCurrency\": \"USD\",\n      \"localCurrencies\": false\n    }\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Create a North America market with a catalog and web presences", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation marketCreate($input: MarketCreateInput!) {\n    marketCreate(input: $input) {\n      market {\n        id\n        handle\n        status\n        conditions {\n          regionsCondition {\n            regions(first: 10) {\n              edges {\n                node {\n                  id\n                  name\n                }\n              }\n            }\n          }\n        }\n        catalogs(first: 10) {\n          edges {\n            node {\n              id\n            }\n          }\n        }\n        webPresences(first: 10) {\n          edges {\n            node {\n              domain {\n                id\n              }\n              subfolderSuffix\n            }\n          }\n        }\n      }\n      userErrors {\n        field\n        message\n        code\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": {\n    \"name\": \"North America Market\",\n    \"handle\": \"NA\",\n    \"enabled\": true,\n    \"conditions\": {\n      \"regionsCondition\": {\n        \"regions\": [{\"countryCode\"=>\"US\"}, {\"countryCode\"=>\"CA\"}, {\"countryCode\"=>\"MX\"}]\n      }\n    },\n    \"catalogs\": [\"gid://shopify/Catalog/307400570\"],\n    \"webPresences\": [\"gid://shopify/MarketWebPresence/1068177692\"]\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Create a POS market for all locations", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation marketCreate($input: MarketCreateInput!) {\n    marketCreate(input: $input) {\n      market {\n        id\n        handle\n        status\n        conditions {\n          locationsCondition {\n            locations(first: 10) {\n              edges {\n                node {\n                  id\n                }\n              }\n            }\n          }\n        }\n        currencySettings {\n          baseCurrency {\n            currencyCode\n          }\n          localCurrencies\n        }\n      }\n      userErrors {\n        field\n        message\n        code\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": {\n    \"name\": \"All POS Market\",\n    \"handle\": \"all-pos-market\",\n    \"enabled\": true,\n    \"conditions\": {\n      \"locationsCondition\": {\n        \"applicationLevel\": \"ALL\"\n      }\n    },\n    \"currencySettings\": {\n      \"baseCurrency\": \"USD\",\n      \"localCurrencies\": false\n    }\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "marketCreate reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation marketCreate($input: MarketCreateInput!) {\n    marketCreate(input: $input) {\n      market {\n        id\n        handle\n        status\n        conditions {\n          companyLocationsCondition {\n            companyLocations(first: 10) {\n              edges {\n                node {\n                  id\n                }\n              }\n            }\n          }\n        }\n        currencySettings {\n          baseCurrency {\n            currencyCode\n          }\n          localCurrencies\n        }\n      }\n      userErrors {\n        field\n        message\n        code\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": {\n    \"name\": \"Company Location Market\",\n    \"handle\": \"Company-Location\",\n    \"enabled\": true,\n    \"conditions\": {\n      \"regionsCondition\": {\n        \"regions\": [{\"countryCode\"=>\"US\"}]\n      },\n      \"companyLocationsCondition\": {\n        \"applicationLevel\": \"ALL\"\n      }\n    },\n    \"currencySettings\": {\n      \"baseCurrency\": \"USD\",\n      \"localCurrencies\": false\n    }\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "marketCurrencySettingsUpdate", "description": "Updates currency settings of a market.", "arguments": [{"name": "input", "type": "MarketCurrencySettingsUpdateInput!", "required": true, "description": "Properties to update for the market currency settings."}], "returns": [], "examples": []}, {"name": "marketDelete", "description": "Deletes a market definition.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID of the market to delete."}], "returns": [], "examples": []}, {"name": "marketRegionDelete", "description": "Deletes a market region.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID of the market region to delete."}], "returns": [], "examples": []}, {"name": "marketRegionsCreate", "description": "Creates regions that belong to an existing market.", "arguments": [{"name": "marketId", "type": "ID!", "required": true, "description": "The ID of the market to add the regions to."}], "returns": [], "examples": []}, {"name": "marketUpdate", "description": "Updates the properties of a market.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID of the market to update."}], "returns": [], "examples": [{"description": "Update a market status to make it draft", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation marketUpdate($input: MarketUpdateInput!) {\n    marketUpdate(id: \"gid://shopify/Market/73827535\", input: $input) {\n      market {\n        id\n        handle\n        status\n        conditions {\n          regionsCondition {\n            regions(first: 10) {\n              edges {\n                node {\n                  id\n                  name\n                }\n              }\n            }\n          }\n        }\n        currencySettings {\n          baseCurrency {\n            currencyCode\n          }\n          localCurrencies\n        }\n      }\n      userErrors {\n        field\n        message\n        code\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": {\n    \"status\": \"DRAFT\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Update a market to add a new catalog", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation marketUpdate($input: MarketUpdateInput!) {\n    marketUpdate(id: \"gid://shopify/Market/73827535\", input: $input) {\n      market {\n        id\n        handle\n        status\n        conditions {\n          regionsCondition {\n            regions(first: 10) {\n              edges {\n                node {\n                  id\n                  name\n                }\n              }\n            }\n          }\n        }\n        catalogs(first: 10) {\n          edges {\n            node {\n              id\n            }\n          }\n        }\n      }\n      userErrors {\n        field\n        message\n        code\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": {\n    \"catalogsToAdd\": [\"gid://shopify/Catalog/307400570\"]\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Update a market to change its conditions", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation marketUpdate($input: MarketUpdateInput!) {\n    marketUpdate(id: \"gid://shopify/Market/73827535\", input: $input) {\n      market {\n        id\n        handle\n        status\n        conditions {\n          regionsCondition {\n            regions(first: 10) {\n              edges {\n                node {\n                  id\n                  name\n                }\n              }\n            }\n          }\n        }\n        catalogs(first: 10) {\n          edges {\n            node {\n              id\n            }\n          }\n        }\n      }\n      userErrors {\n        field\n        message\n        code\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": {\n    \"conditions\": {\n      \"conditionsToAdd\": {\n        \"regionsCondition\": {\n          \"regions\": [{\"countryCode\"=>\"GB\"}]\n        }\n      },\n      \"conditionsToDelete\": {\n        \"regionsCondition\": {\n          \"regions\": [{\"countryCode\"=>\"US\"}]\n        }\n      }\n    }\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "marketUpdate reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation marketUpdate($input: MarketUpdateInput!) {\n    marketUpdate(id: \"gid://shopify/Market/73827535\", input: $input) {\n      market {\n        id\n        handle\n        status\n        conditions {\n          regionsCondition {\n            regions(first: 10) {\n              edges {\n                node {\n                  id\n                  name\n                }\n              }\n            }\n          }\n        }\n        currencySettings {\n          baseCurrency {\n            currencyCode\n          }\n          localCurrencies\n        }\n      }\n      userErrors {\n        field\n        message\n        code\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": {\n    \"status\": \"DRAFT\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "marketWebPresenceCreate", "description": "Creates a web presence for a market.", "arguments": [{"name": "marketId", "type": "ID!", "required": true, "description": "The ID of the market for which to create a web presence."}], "returns": [], "examples": []}, {"name": "marketWebPresenceDelete", "description": "Deletes a market web presence.", "arguments": [{"name": "webPresenceId", "type": "ID!", "required": true, "description": "The ID of the web presence to delete."}], "returns": [], "examples": []}, {"name": "marketWebPresenceUpdate", "description": "Updates a market web presence.", "arguments": [{"name": "webPresence", "type": "MarketWebPresenceUpdateInput!", "required": true, "description": "The web_presence fields used to update the market's web presence."}], "returns": [], "examples": []}, {"name": "webPresenceCreate", "description": "Creates a web presence.", "arguments": [{"name": "input", "type": "WebPresenceCreateInput!", "required": true, "description": "The details of the web presence to be created."}], "returns": [], "examples": []}, {"name": "webPresenceDelete", "description": "Deletes a web presence.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID of the web presence to delete."}], "returns": [], "examples": []}, {"name": "webPresenceUpdate", "description": "Updates a web presence.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID of the web presence to update."}], "returns": [], "examples": []}], "objects": [{"name": "Market", "description": "A market is a group of one or more regions that you want to target for international sales.\nBy creating a market, you can configure a distinct, localized shopping experience for\ncustomers from a specific area of the world. For example, you can\nchange currency,\nconfigure international pricing,\nor add market-specific domains or subfolders.", "fields_and_connections": [{"name": "assignedCustomization", "type": "Boolean!", "description": "Whether the market has a customization with the given ID.", "not_nullable": true}], "examples": []}, {"name": "MarketConditions", "description": "The conditions that determine whether a visitor is in a market.", "fields_and_connections": [{"name": "companyLocationsCondition", "type": "CompanyLocationsCondition", "description": "The company location conditions that determine whether a visitor is in the market.", "not_nullable": true}], "examples": []}, {"name": "MarketCurrencySettings", "description": "A market's currency settings.", "fields_and_connections": [{"name": "baseCurrency", "type": "CurrencySetting!", "description": "The currency which this market's customers must use if local currencies are disabled.", "not_nullable": true}], "examples": []}, {"name": "MarketRegionCountry", "description": "A country which comprises a market.", "fields_and_connections": [{"name": "code", "type": "CountryCode!", "description": "The ISO code identifying the country.", "not_nullable": true}], "examples": []}, {"name": "MarketsB2BEntitlement", "description": "The entitlements for B2B markets.", "fields_and_connections": [{"name": "catalogs", "type": "MarketsCatalogsEntitlement!", "description": "The entitlements for B2B market catalogs.", "not_nullable": true}], "examples": []}, {"name": "MarketsRegionsEntitlement", "description": "The entitlements for region markets.", "fields_and_connections": [{"name": "catalogs", "type": "MarketsCatalogsEntitlement!", "description": "The entitlements for region market catalogs.", "not_nullable": true}], "examples": []}, {"name": "MarketsRetailEntitlement", "description": "The entitlements for retail markets.", "fields_and_connections": [{"name": "catalogs", "type": "MarketsCatalogsEntitlement!", "description": "The entitlements for retail market catalogs.", "not_nullable": true}], "examples": []}, {"name": "MarketWebPresence", "description": "The market\u2019s web presence, which defines its SEO strategy. This can be a different domain\n(e.g. example.ca), subdomain (e.g. ca.example.com), or subfolders of the primary\ndomain (e.g. example.com/en-ca). Each web presence comprises one or more language\nvariants. If a market does not have its own web presence, it is accessible on the shop\u2019s\nprimary domain via country\nselectors.\nNote: while the domain/subfolders defined by a market\u2019s web presence are not applicable to\ncustom storefronts, which must manage their own domains and routing, the languages chosen\nhere do govern the languages available on the Storefront\nAPI for the countries in\nthis market.", "fields_and_connections": [{"name": "alternateLocales", "type": "[ShopLocale!]!", "description": "The ShopLocale object for the alternate locales. When a domain is used, these locales will be\navailable as language-specific subfolders. For example, if English is an\nalternate locale, and example.ca is the market\u2019s domain, then\nexample.ca/en will load in English.", "not_nullable": true}], "examples": []}, {"name": "MarketWebPresenceRootUrl", "description": "The URL for the homepage of the online store in the context of a particular market and a\nparticular locale.", "fields_and_connections": [{"name": "locale", "type": "String!", "description": "The locale that the storefront loads in.", "not_nullable": true}], "examples": []}, {"name": "RegionsCondition", "description": "A condition checking the visitor's region.", "fields_and_connections": [{"name": "applicationLevel", "type": "MarketConditionApplicationType", "description": "The application level for the condition.", "not_nullable": true}], "examples": []}, {"name": "WebPresence", "description": "This can be a domain (e.g. example.ca), subdomain (e.g. ca.example.com), or subfolders of the primary\ndomain (e.g. example.com/en-ca). Each web presence comprises one or more language\nvariants.\nNote: while the domain/subfolders defined by a web presence are not applicable to\ncustom storefronts, which must manage their own domains and routing, the languages chosen\nhere do govern the languages available on the Storefront\nAPI for the countries\nusing this web presence.", "fields_and_connections": [{"name": "alternateLocales", "type": "[ShopLocale!]!", "description": "The ShopLocale object for the alternate locales. When a domain is used, these locales will be\navailable as language-specific subfolders. For example, if English is an\nalternate locale, and example.ca is the domain, then\nexample.ca/en will load in English.", "not_nullable": true}], "examples": []}, {"name": "WebPresenceRootUrl", "description": "The URL for the homepage of the online store in the context of the web presence and a\nparticular locale.", "fields_and_connections": [{"name": "locale", "type": "String!", "description": "The locale that the storefront loads in.", "not_nullable": true}], "examples": []}]}, {"name": "Shopify Payments", "queries": [{"name": "dispute", "description": "Returns dispute details based on ID.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID of the ShopifyPaymentsDispute to return."}], "returns": [], "examples": [{"description": "Overview", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query ShopifyPaymentsDisputesShow($id: ID!) {\n    dispute(id: $id) {\n      amount {\n        amount\n        currencyCode\n      }\n      evidenceDueBy\n      evidenceSentOn\n      finalizedOn\n      id\n      initiatedAt\n      reasonDetails {\n        reason\n        networkReasonCode\n      }\n      status\n      type\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/ShopifyPaymentsDispute/598735659\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "disputeEvidence", "description": "Returns dispute evidence details based on ID.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID of the ShopifyPaymentsDisputeEvidence to return."}], "returns": [], "examples": [{"description": "Overview", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query ShopifyPaymentsDisputeEvidenceShow($id: ID!) {\n    disputeEvidence(id: $id) {\n      dispute {\n        amount {\n          amount\n          currencyCode\n        }\n        evidenceDueBy\n        evidenceSentOn\n        finalizedOn\n        id\n        initiatedAt\n        reasonDetails {\n          reason\n          networkReasonCode\n        }\n        status\n        type\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/ShopifyPaymentsDisputeEvidence/819974671\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "financeKycInformation", "description": "Returns the KYC information for the shop's Shopify Payments account, used in embedded finance apps.", "arguments": [{"name": "FinanceKycInformation", "type": "FinanceKycInformation", "required": true, "description": "Shopify Payments account information shared with embedded finance applications."}], "returns": [], "examples": []}, {"name": "shopifyPaymentsAccount", "description": "Shopify Payments account information, including balances and payouts.", "arguments": [{"name": "ShopifyPaymentsAccount", "type": "ShopifyPaymentsAccount", "required": true, "description": "Balance and payout information for a\nShopify Payments\naccount. Balance includes all balances for the currencies supported by the shop.\nYou can also query for a list of payouts, where each payout includes the corresponding currencyCode field."}], "returns": [], "examples": [{"description": "Return a list of all balance transactions", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    shopifyPaymentsAccount {\n      balanceTransactions(first: 10) {\n        nodes {\n          id\n          type\n          test\n          associatedPayout {\n            id\n            status\n          }\n          amount {\n            amount\n            currencyCode\n          }\n          fee {\n            amount\n          }\n          net {\n            amount\n          }\n          sourceId\n          sourceType\n          sourceOrderTransactionId\n          associatedOrder {\n            id\n          }\n          adjustmentsOrders {\n            orderTransactionId\n            amount {\n              amount\n            }\n            name\n          }\n          adjustmentReason\n        }\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "Return a list of all disputes", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query ShopifyPaymentsListDisputes {\n    shopifyPaymentsAccount {\n      disputes(first: 10) {\n        edges {\n          node {\n            amount {\n              amount\n              currencyCode\n            }\n            evidenceDueBy\n            evidenceSentOn\n            finalizedOn\n            id\n            initiatedAt\n            reasonDetails {\n              reason\n              networkReasonCode\n            }\n            status\n            type\n          }\n        }\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "Return a list of all payouts", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query ShopifyPaymentsPayoutShow {\n    shopifyPaymentsAccount {\n      payouts(first: 10) {\n        nodes {\n          id\n          issuedAt\n          net {\n            amount\n            currencyCode\n          }\n          status\n          transactionType\n        }\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "Return a single payout", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query ShopifyPaymentsPayoutShow {\n    shopifyPaymentsAccount {\n      payouts(first: 10, query: \"id:623721858\") {\n        nodes {\n          id\n          issuedAt\n          net {\n            amount\n            currencyCode\n          }\n          status\n          transactionType\n        }\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "Return the current balance", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query ShopifyPaymentsShowBalance {\n    shopifyPaymentsAccount {\n      balance {\n        amount\n        currencyCode\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}]}], "mutations": [{"name": "disputeEvidenceUpdate", "description": "Updates a dispute evidence.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID of the dispute evidence to be updated."}], "returns": [], "examples": [{"description": "Delete a dispute evidence file", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation ShopifyPaymentsDisputeFileUploadDestroy($id: ID!, $fileId: ID!) {\n    disputeEvidenceUpdate(id: $id, input: {uncategorizedFile: {id: $fileId, destroy: true}}) {\n      disputeEvidence {\n        disputeFileUploads {\n          id\n        }\n        dispute {\n          amount {\n            amount\n            currencyCode\n          }\n          evidenceDueBy\n          evidenceSentOn\n          finalizedOn\n          id\n          initiatedAt\n          reasonDetails {\n            reason\n            networkReasonCode\n          }\n          status\n          type\n        }\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/ShopifyPaymentsDisputeEvidence/819974671\",\n  \"fileId\": \"gid://shopify/ShopifyPaymentsDisputeFileUpload/567271523\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Updates dispute evidence", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation ShopifyPaymentsDisputeEvidenceUpdate($id: ID!, $input: ShopifyPaymentsDisputeEvidenceUpdateInput!) {\n    disputeEvidenceUpdate(id: $id, input: $input) {\n      disputeEvidence {\n        uncategorizedText\n        dispute {\n          amount {\n            amount\n            currencyCode\n          }\n          evidenceDueBy\n          evidenceSentOn\n          finalizedOn\n          id\n          initiatedAt\n          reasonDetails {\n            reason\n            networkReasonCode\n          }\n          status\n          type\n        }\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/ShopifyPaymentsDisputeEvidence/819974671\",\n  \"input\": {\n    \"customerFirstName\": \"Kermit\",\n    \"customerLastName\": \"The frog\",\n    \"customerEmailAddress\": \"kermit@example.com\",\n    \"shippingAddress\": {\n      \"address1\": \"1 Infinite Loop\",\n      \"address2\": \"Muppet Studio\",\n      \"city\": \"Cupertino\",\n      \"zip\": \"95014\",\n      \"country\": \"US\",\n      \"province\": \"California\"\n    },\n    \"uncategorizedText\": \"Test uncategorized text\",\n    \"accessActivityLog\": \"Test access activity log\",\n    \"cancellationPolicyDisclosure\": \"Test cancellation policy disclosure\",\n    \"cancellationRebuttal\": \"Test cancellation rebuttal\",\n    \"refundPolicyDisclosure\": \"Test refund policy disclosure\",\n    \"refundRefusalExplanation\": \"Test refund refusal explanation\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Upload a file to a dispute", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation ShopifyPaymentsDisputeFileUpload($id: ID!, $fileId: ID!) {\n    disputeEvidenceUpdate(id: $id, input: {uncategorizedFile: {id: $fileId}}) {\n      disputeEvidence {\n        disputeFileUploads {\n          id\n        }\n        dispute {\n          amount {\n            amount\n            currencyCode\n          }\n          evidenceDueBy\n          evidenceSentOn\n          finalizedOn\n          id\n          initiatedAt\n          reasonDetails {\n            reason\n            networkReasonCode\n          }\n          status\n          type\n        }\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/ShopifyPaymentsDisputeEvidence/819974671\",\n  \"fileId\": \"gid://shopify/ShopifyPaymentsDisputeFileUpload/567271523\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "disputeEvidenceUpdate reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation ShopifyPaymentsDisputeFileUploadDestroy($id: ID!, $fileId: ID!) {\n    disputeEvidenceUpdate(id: $id, input: {uncategorizedFile: {id: $fileId, destroy: true}}) {\n      disputeEvidence {\n        disputeFileUploads {\n          id\n        }\n        dispute {\n          amount {\n            amount\n            currencyCode\n          }\n          evidenceDueBy\n          evidenceSentOn\n          finalizedOn\n          id\n          initiatedAt\n          reasonDetails {\n            reason\n            networkReasonCode\n          }\n          status\n          type\n        }\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/ShopifyPaymentsDisputeEvidence/819974671\",\n  \"fileId\": \"gid://shopify/ShopifyPaymentsDisputeFileUpload/567271523\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "shopifyPaymentsPayoutAlternateCurrencyCreate", "description": "Creates an alternate currency payout for a Shopify Payments account.", "arguments": [{"name": "accountId", "type": "ID", "required": true, "description": "The ID of the Shopify Payments account on which the mutation is being performed."}], "returns": [], "examples": []}], "objects": [{"name": "FinanceKycInformation", "description": "Shopify Payments account information shared with embedded finance applications.", "fields_and_connections": [{"name": "businessAddress", "type": "ShopifyPaymentsAddressBasic", "description": "The legal entity business address.", "not_nullable": true}], "examples": []}, {"name": "FinancialKycShopOwner", "description": "Represents the shop owner information for financial KYC purposes.", "fields_and_connections": [{"name": "email", "type": "String!", "description": "The email of the shop owner.", "not_nullable": true}], "examples": []}, {"name": "OrderDisputeSummary", "description": "A summary of the important details for a dispute on an order.", "fields_and_connections": [{"name": "id", "type": "ID!", "description": "A globally-unique ID.", "not_nullable": true}], "examples": []}, {"name": "ShopifyPaymentsAccount", "description": "Balance and payout information for a\nShopify Payments\naccount. Balance includes all balances for the currencies supported by the shop.\nYou can also query for a list of payouts, where each payout includes the corresponding currencyCode field.", "fields_and_connections": [{"name": "accountOpenerName", "type": "String", "description": "The name of the account opener.", "not_nullable": true}], "examples": []}, {"name": "ShopifyPaymentsAddressBasic", "description": "A Shopify Payments address.", "fields_and_connections": [{"name": "addressLine1", "type": "String", "description": "Line 1 of the address.", "not_nullable": false}], "examples": []}, {"name": "ShopifyPaymentsAdjustmentOrder", "description": "The adjustment order object.", "fields_and_connections": [{"name": "amount", "type": "MoneyV2!", "description": "The amount of the adjustment order.", "not_nullable": true}], "examples": []}, {"name": "ShopifyPaymentsAssociatedOrder", "description": "The order associated to the balance transaction.", "fields_and_connections": [{"name": "id", "type": "ID!", "description": "The ID of the associated order.", "not_nullable": true}], "examples": []}, {"name": "ShopifyPaymentsBalanceTransaction", "description": "A transaction that contributes to a Shopify Payments account balance.", "fields_and_connections": [{"name": "adjustmentReason", "type": "String", "description": "The reason for the adjustment that's associated with the transaction.\nIf the source_type isn't an adjustment, the value will be null.", "not_nullable": true}], "examples": []}, {"name": "ShopifyPaymentsBalanceTransactionAssociatedPayout", "description": "The payout associated with a balance transaction.", "fields_and_connections": [{"name": "id", "type": "ID", "description": "The ID of the payout associated with the balance transaction.", "not_nullable": false}], "examples": []}, {"name": "ShopifyPaymentsBankAccount", "description": "A bank account that can receive payouts.", "fields_and_connections": [{"name": "accountNumberLastDigits", "type": "String!", "description": "The last digits of the account number (the rest is redacted).", "not_nullable": true}], "examples": []}, {"name": "ShopifyPaymentsDefaultChargeStatementDescriptor", "description": "The charge descriptors for a payments account.", "fields_and_connections": [{"name": "default", "type": "String", "description": "The default charge statement descriptor.", "not_nullable": true}], "examples": []}, {"name": "ShopifyPaymentsDispute", "description": "A dispute occurs when a buyer questions the legitimacy of a charge with their financial institution.", "fields_and_connections": [{"name": "amount", "type": "MoneyV2!", "description": "The total amount disputed by the cardholder.", "not_nullable": true}], "examples": []}, {"name": "ShopifyPaymentsDisputeEvidence", "description": "The evidence associated with the dispute.", "fields_and_connections": [{"name": "accessActivityLog", "type": "String", "description": "The activity logs associated with the dispute evidence.", "not_nullable": true}], "examples": []}, {"name": "ShopifyPaymentsDisputeFileUpload", "description": "The file upload associated with the dispute evidence.", "fields_and_connections": [{"name": "disputeEvidenceType", "type": "ShopifyPaymentsDisputeEvidenceFileType", "description": "The type of the file for the dispute evidence.", "not_nullable": true}], "examples": []}, {"name": "ShopifyPaymentsDisputeFulfillment", "description": "The fulfillment associated with dispute evidence.", "fields_and_connections": [{"name": "id", "type": "ID!", "description": "A globally-unique ID.", "not_nullable": true}], "examples": []}, {"name": "ShopifyPaymentsDisputeReasonDetails", "description": "Details regarding a dispute reason.", "fields_and_connections": [{"name": "networkReasonCode", "type": "String", "description": "The raw code provided by the payment network.", "not_nullable": true}], "examples": []}, {"name": "ShopifyPaymentsJpChargeStatementDescriptor", "description": "The charge descriptors for a Japanese payments account.", "fields_and_connections": [{"name": "default", "type": "String", "description": "The default charge statement descriptor.", "not_nullable": true}], "examples": []}, {"name": "ShopifyPaymentsMerchantCategoryCode", "description": "A MerchantCategoryCode (MCC) is a four-digit number listed in ISO 18245 for retail financial services and used to classify the business by the type of goods or services it provides.", "fields_and_connections": [{"name": "category", "type": "String!", "description": "The category of the MCC.", "not_nullable": true}], "examples": []}, {"name": "ShopifyPaymentsPayout", "description": "Payouts represent the movement of money between a merchant's Shopify\nPayments balance and their bank account.", "fields_and_connections": [{"name": "businessEntity", "type": "BusinessEntity!", "description": "The business entity associated with the payout.", "not_nullable": true}], "examples": []}, {"name": "ShopifyPaymentsPayoutSchedule", "description": "The payment schedule for a payments account.", "fields_and_connections": [{"name": "interval", "type": "ShopifyPaymentsPayoutInterval!", "description": "The interval at which payouts are sent to the connected bank account.", "not_nullable": true}], "examples": []}, {"name": "ShopifyPaymentsPayoutSummary", "description": "Breakdown of the total fees and gross of each of the different types of transactions associated\nwith the payout.", "fields_and_connections": [{"name": "adjustmentsFee", "type": "MoneyV2!", "description": "Total fees for all adjustments including disputes.", "not_nullable": true}], "examples": []}, {"name": "ShopifyPaymentsTaxIdentification", "description": "A typed identifier that represents an individual within a tax jurisdiction.", "fields_and_connections": [{"name": "taxIdentificationType", "type": "ShopifyPaymentsTaxIdentificationType!", "description": "The type of the identification.", "not_nullable": true}], "examples": []}, {"name": "ShopifyPaymentsToolingProviderPayout", "description": "Relevant reference information for an alternate currency payout.", "fields_and_connections": [{"name": "amount", "type": "MoneyV2!", "description": "The balance amount the alternate currency payout was created for.", "not_nullable": true}], "examples": []}, {"name": "ShopifyPaymentsVerification", "description": "Each subject (individual) of an account has a verification object giving\n information about the verification state.", "fields_and_connections": [{"name": "id", "type": "ID!", "description": "A globally-unique ID.", "not_nullable": true}], "examples": []}, {"name": "ShopifyPaymentsVerificationSubject", "description": "The verification subject represents an individual that has to be verified.", "fields_and_connections": [{"name": "familyName", "type": "String!", "description": "The family name of the individual to verify.", "not_nullable": true}], "examples": []}]}, {"name": "Store properties", "queries": [{"name": "businessEntities", "description": "Returns a list of Business Entities associated with the shop.", "arguments": [{"name": "BusinessEntity", "type": "[BusinessEntity!]!", "required": true, "description": "Represents a merchant's Business Entity."}], "returns": [], "examples": []}, {"name": "businessEntity", "description": "Returns a Business Entity by ID.", "arguments": [{"name": "id", "type": "ID", "required": true, "description": "The ID of the Business Entity to return. Returns the primary Business Entity if not provided."}], "returns": [], "examples": []}, {"name": "location", "description": "Returns an inventory Location resource by ID.", "arguments": [{"name": "id", "type": "ID", "required": true, "description": "The ID of the location to return. If no ID is provided, the primary location of the Shop is returned."}], "returns": [], "examples": [{"description": "Get a metafield attached to a location", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query LocationMetafield($namespace: String!, $key: String!, $ownerId: ID!) {\n    location(id: $ownerId) {\n      hours: metafield(namespace: $namespace, key: $key) {\n        value\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"namespace\": \"my_fields\",\n  \"key\": \"hours\",\n  \"ownerId\": \"gid://shopify/Location/346779380\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Get metafields attached to a location", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query LocationMetafields($ownerId: ID!) {\n    location(id: $ownerId) {\n      metafields(first: 3) {\n        edges {\n          node {\n            namespace\n            key\n            value\n          }\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"ownerId\": \"gid://shopify/Location/346779380\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Get pinned metafield definitions associated with a location", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query LocationMetafieldDefinitions($ownerId: ID!, $first: Int, $pinnedStatus: MetafieldDefinitionPinnedStatus, $sortKey: MetafieldDefinitionSortKeys) {\n    location(id: $ownerId) {\n      metafieldDefinitions(first: $first, pinnedStatus: $pinnedStatus, sortKey: $sortKey) {\n        edges {\n          node {\n            name\n            namespace\n            key\n            type {\n              name\n            }\n          }\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"pinnedStatus\": \"PINNED\",\n  \"ownerId\": \"gid://shopify/Location/346779380\",\n  \"first\": 10,\n  \"sortKey\": \"PINNED_POSITION\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Retrieve a list of inventory levels for a location", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query LocationInventoryLevelList($id: ID!) {\n    location(id: $id) {\n      inventoryLevels(first: 10) {\n        nodes {\n          item {\n            id\n          }\n          location {\n            id\n          }\n          quantities(names: [\"available\"]) {\n            name\n            quantity\n          }\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/Location/346779380\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Retrieve a single location by its ID", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query LocationShow($id: ID!) {\n    location(id: $id) {\n      id\n      name\n      fulfillmentService {\n        handle\n      }\n      address {\n        address1\n        address2\n        city\n        country\n        countryCode\n        province\n        provinceCode\n        zip\n      }\n      fulfillsOnlineOrders\n      hasActiveInventory\n      isActive\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/Location/346779380\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Returns a Location resource by ID", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    location(id: \"gid://shopify/Location/346779380\") {\n      id\n      name\n      address {\n        formatted\n      }\n      deactivatable\n      fulfillsOnlineOrders\n      hasActiveInventory\n      isActive\n      shipsInventory\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}]}, {"name": "locationByIdentifier", "description": "Return a location by an identifier.", "arguments": [{"name": "identifier", "type": "LocationIdentifierInput!", "required": true, "description": "The identifier of the location."}], "returns": [], "examples": [{"description": "Overview", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query($identifier: LocationIdentifierInput!) {\n    location: locationByIdentifier(identifier: $identifier) {\n      id\n      name\n    }\n  }\nQUERY\n\nvariables = {\n  \"identifier\": {\n    \"customId\": {\n      \"namespace\": \"custom\",\n      \"key\": \"id\",\n      \"value\": \"1001\"\n    }\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "locations", "description": "Returns a list of active inventory locations.", "arguments": [{"name": "after", "type": "String", "required": true, "description": "The elements that come after the specified cursor."}], "returns": [], "examples": [{"description": "Overview", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    locations(first: 5) {\n      edges {\n        node {\n          id\n          name\n          address {\n            formatted\n          }\n        }\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}]}, {"name": "locationsAvailableForDeliveryProfiles", "description": "Returns a list of all origin locations available for a delivery profile.", "arguments": [{"name": "Location", "type": "[Location!]", "required": true, "description": "Represents the location where the physical good resides. You can stock inventory at active locations. Active\nlocations that have fulfills_online_orders: true and are configured with a shipping rate, pickup enabled or\nlocal delivery will be able to sell from their storefront."}], "returns": [], "examples": []}, {"name": "locationsAvailableForDeliveryProfilesConnection", "description": "Returns a list of all origin locations available for a delivery profile.", "arguments": [{"name": "after", "type": "String", "required": true, "description": "The elements that come after the specified cursor."}], "returns": [], "examples": []}, {"name": "locationsCount", "description": "Returns the count of locations for the given shop. Limited to a maximum of 10000.", "arguments": [{"name": "query", "type": "String", "required": true, "description": "A filter made up of terms, connectives, modifiers, and comparators.\nYou can apply one or more filters to a query. Learn more about Shopify API search syntax."}], "returns": [], "examples": [{"description": "Overview", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    locationsCount {\n      count\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}]}, {"name": "shop", "description": "Returns the Shop resource corresponding to the access token used in the request. The Shop resource contains\nbusiness and store management settings for the shop.", "arguments": [{"name": "Shop", "type": "Shop!", "required": true, "description": "Represents a collection of general settings and information about the shop."}], "returns": [], "examples": [{"description": "Get a metafield attached to a shop", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query ShopMetafield($namespace: String!, $key: String!) {\n    shop {\n      copyrightYear: metafield(namespace: $namespace, key: $key) {\n        value\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"namespace\": \"my_fields\",\n  \"key\": \"copyright_year\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Get metafields attached to a shop", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query ShopMetafields {\n    shop {\n      metafields(first: 3) {\n        edges {\n          node {\n            namespace\n            key\n            value\n          }\n        }\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "Receive a list of all FulfillmentServices", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query FulfillmentServiceList {\n    shop {\n      fulfillmentServices {\n        id\n        callbackUrl\n        fulfillmentOrdersOptIn\n        permitsSkuSharing\n        handle\n        inventoryManagement\n        serviceName\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "Retrieve information about a shop", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    shop {\n      name\n      currencyCode\n      checkoutApiSupported\n      taxesIncluded\n      resourceLimits {\n        maxProductVariants\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "Retrieves a list of fulfillment orders assigned to the shop locations that are owned by the app", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query AssignedFulfillmentOrderList($assignmentStatus: FulfillmentOrderAssignmentStatus) {\n    shop {\n      assignedFulfillmentOrders(first: 10, assignmentStatus: $assignmentStatus) {\n        edges {\n          node {\n            id\n            status\n            requestStatus\n            destination {\n              firstName\n              lastName\n              address1\n              city\n              province\n              zip\n              countryCode\n              phone\n            }\n            lineItems(first: 10) {\n              edges {\n                node {\n                  id\n                  productTitle\n                  sku\n                  remainingQuantity\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"assignmentStatus\": \"FULFILLMENT_REQUESTED\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Retrieves a list of all users", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    shop {\n      staffMembers(first: 10) {\n        edges {\n          node {\n            active\n            avatar {\n              url\n            }\n            email\n            exists\n            firstName\n            id\n            initials\n            isShopOwner\n            lastName\n            locale\n            name\n            phone\n          }\n        }\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "Retrieves a list of currencies enabled on a shop", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    shop {\n      currencySettings(first: 1) {\n        edges {\n          node {\n            currencyCode\n            rateUpdatedAt\n          }\n        }\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "Retrieves a list of storefront access tokens that have been issued", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query storefrontAccessToken {\n    shop {\n      storefrontAccessTokens(first: 10) {\n        edges {\n          node {\n            id\n            accessToken\n            accessScopes {\n              handle\n            }\n            createdAt\n            title\n          }\n        }\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "Retrieves a list of the shop's policies", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query ShopPolicyList {\n    shop {\n      shopPolicies {\n        id\n        url\n        body\n        type\n        title\n        createdAt\n        updatedAt\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "Retrieves the shop's configuration", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query ShopShow {\n    shop {\n      accountOwner {\n        name\n      }\n      alerts {\n        action {\n          title\n          url\n        }\n        description\n      }\n      billingAddress {\n        address1\n        address2\n        city\n        company\n        country\n        countryCodeV2\n        latitude\n        longitude\n        phone\n        province\n        provinceCode\n        zip\n      }\n      checkoutApiSupported\n      contactEmail\n      createdAt\n      currencyCode\n      currencyFormats {\n        moneyFormat\n        moneyInEmailsFormat\n        moneyWithCurrencyFormat\n        moneyWithCurrencyInEmailsFormat\n      }\n      customerAccounts\n      description\n      email\n      enabledPresentmentCurrencies\n      fulfillmentServices {\n        handle\n        serviceName\n      }\n      ianaTimezone\n      id\n      marketingSmsConsentEnabledAtCheckout\n      myshopifyDomain\n      name\n      paymentSettings {\n        supportedDigitalWallets\n      }\n      plan {\n        displayName\n        partnerDevelopment\n        shopifyPlus\n      }\n      primaryDomain {\n        host\n        id\n      }\n      productTypes(first: 250) {\n        edges {\n          node\n        }\n      }\n      setupRequired\n      shipsToCountries\n      taxesIncluded\n      taxShipping\n      timezoneAbbreviation\n      transactionalSmsDisabled\n      updatedAt\n      url\n      weightUnit\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}]}], "mutations": [{"name": "locationActivate", "description": "Activates a location so that you can stock inventory at the location. Refer to the\nisActive and\nactivatable\nfields on the Location object.", "arguments": [{"name": "locationId", "type": "ID!", "required": true, "description": "The ID of a location to activate."}], "returns": [], "examples": [{"description": "Activate a deactivated location", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation {\n    locationActivate(locationId: \"gid://shopify/Location/658095763\") {\n      location {\n        id\n        isActive\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "locationActivate reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation {\n    locationActivate(locationId: \"gid://shopify/Location/658095763\") {\n      location {\n        id\n        isActive\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}]}, {"name": "locationAdd", "description": "Adds a new location.", "arguments": [{"name": "input", "type": "LocationAddInput!", "required": true, "description": "The properties of the location to add."}], "returns": [], "examples": [{"description": "Add a location and return the location ID", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation {\n    locationAdd(input: {name: \"New York Warehouses\", address: {address1: \"101 Liberty Street\", city: \"New York\", provinceCode: \"NY\", countryCode: US, zip: \"10006\"}, fulfillsOnlineOrders: true}) {\n      location {\n        id\n        name\n        address {\n          address1\n          provinceCode\n          countryCode\n          zip\n        }\n        fulfillsOnlineOrders\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "Create a new metafield on a new location", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation createLocationMetafields($input: LocationAddInput!) {\n    locationAdd(input: $input) {\n      location {\n        id\n        metafields(first: 3) {\n          edges {\n            node {\n              id\n              namespace\n              key\n              value\n            }\n          }\n        }\n      }\n      userErrors {\n        message\n        field\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": {\n    \"metafields\": [{\"namespace\"=>\"my_field\", \"key\"=>\"delivery_type\", \"type\"=>\"single_line_text_field\", \"value\"=>\"local\"}],\n    \"name\": \"Warehouse\",\n    \"address\": {\n      \"countryCode\": \"CA\"\n    }\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "locationAdd reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation {\n    locationAdd(input: {name: \"New York Warehouses\", address: {address1: \"101 Liberty Street\", city: \"New York\", provinceCode: \"NY\", countryCode: US, zip: \"10006\"}, fulfillsOnlineOrders: true}) {\n      location {\n        id\n        name\n        address {\n          address1\n          provinceCode\n          countryCode\n          zip\n        }\n        fulfillsOnlineOrders\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}]}, {"name": "locationDeactivate", "description": "Deactivates a location and moves inventory, pending orders, and moving transfers to a destination location.", "arguments": [{"name": "destinationLocationId", "type": "ID", "required": true, "description": "The ID of a destination location to which inventory, pending orders and moving transfers will be moved from the location to deactivate."}], "returns": [], "examples": [{"description": "Deactivate a location with active inventory", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation locationDeactivate {\n    locationDeactivate(locationId: \"gid://shopify/Location/922479430\") {\n      location {\n        id\n        isActive\n      }\n      locationDeactivateUserErrors {\n        message\n        code\n        field\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "Deactivate a location with pending orders", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation locationDeactivate {\n    locationDeactivate(locationId: \"gid://shopify/Location/123\") {\n      location {\n        id\n        isActive\n      }\n      locationDeactivateUserErrors {\n        message\n        code\n        field\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "Deactivate an active location", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation {\n    locationDeactivate(locationId: \"gid://shopify/Location/922479430\", destinationLocationId: \"gid://shopify/Location/147921425\") {\n      location {\n        id\n        isActive\n      }\n      locationDeactivateUserErrors {\n        message\n        code\n        field\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "locationDeactivate reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation locationDeactivate {\n    locationDeactivate(locationId: \"gid://shopify/Location/922479430\") {\n      location {\n        id\n        isActive\n      }\n      locationDeactivateUserErrors {\n        message\n        code\n        field\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}]}, {"name": "locationDelete", "description": "Deletes a location.", "arguments": [{"name": "locationId", "type": "ID!", "required": true, "description": "The ID of a location to delete."}], "returns": [], "examples": [{"description": "Delete a location and return the location ID", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation {\n    locationDelete(locationId: \"gid://shopify/Location/658095763\") {\n      deletedLocationId\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "Delete an active location", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation {\n    locationDelete(locationId: \"gid://shopify/Location/658095763\") {\n      deletedLocationId\n      locationDeleteUserErrors {\n        message\n        code\n        field\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "locationDelete reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation {\n    locationDelete(locationId: \"gid://shopify/Location/658095763\") {\n      deletedLocationId\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}]}, {"name": "locationEdit", "description": "Edits an existing location.\nAs of the 2023-10 API version, apps can change the name and address of their fulfillment service locations.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID of a location to edit."}], "returns": [], "examples": [{"description": "Create a new metafield and update another on an existing location", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation updateLocationMetafields($input: LocationEditInput!, $ownerId: ID!) {\n    locationEdit(input: $input, id: $ownerId) {\n      location {\n        id\n        metafields(first: 3) {\n          edges {\n            node {\n              id\n              namespace\n              key\n              value\n            }\n          }\n        }\n      }\n      userErrors {\n        message\n        field\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": {\n    \"metafields\": [{\"namespace\"=>\"my_field\", \"key\"=>\"delivery_type\", \"type\"=>\"single_line_text_field\", \"value\"=>\"local\"}, {\"id\"=>\"gid://shopify/Metafield/1069229306\", \"value\"=>\"Open from 7am to 10pm\"}]\n  },\n  \"ownerId\": \"gid://shopify/Location/346779380\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Edit a location and return the location ID", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation locationEdit {\n    locationEdit(id: \"gid://shopify/Location/346779380\", input: {name: \"Shipping Warehouse\", address: {address1: \"290 Bremner Blvd\", city: \"Toronto\", zip: \"M5V 3L9\", provinceCode: \"ON\", countryCode: CA}, fulfillsOnlineOrders: false}) {\n      location {\n        id\n        name\n        address {\n          address1\n          provinceCode\n          countryCode\n          zip\n        }\n        fulfillsOnlineOrders\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "locationEdit reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation updateLocationMetafields($input: LocationEditInput!, $ownerId: ID!) {\n    locationEdit(input: $input, id: $ownerId) {\n      location {\n        id\n        metafields(first: 3) {\n          edges {\n            node {\n              id\n              namespace\n              key\n              value\n            }\n          }\n        }\n      }\n      userErrors {\n        message\n        field\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"input\": {\n    \"metafields\": [{\"namespace\"=>\"my_field\", \"key\"=>\"delivery_type\", \"type\"=>\"single_line_text_field\", \"value\"=>\"local\"}, {\"id\"=>\"gid://shopify/Metafield/1069229306\", \"value\"=>\"Open from 7am to 10pm\"}]\n  },\n  \"ownerId\": \"gid://shopify/Location/346779380\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "locationLocalPickupDisable", "description": "Disables local pickup for a location.", "arguments": [{"name": "locationId", "type": "ID!", "required": true, "description": "The ID of the location to disable local pickup for."}], "returns": [], "examples": [{"description": "Disable local pickup for a location", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation disableLocalPickup($locationId: ID!) {\n    locationLocalPickupDisable(locationId: $locationId) {\n      locationId\n      userErrors {\n        code\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"locationId\": \"gid://shopify/Location/750123840\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Disabling local pickup for an invalid location returns an error", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation disableLocalPickup($locationId: ID!) {\n    locationLocalPickupDisable(locationId: $locationId) {\n      locationId\n      userErrors {\n        code\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"locationId\": \"gid://shopify/Location/123\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "locationLocalPickupDisable reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation disableLocalPickup($locationId: ID!) {\n    locationLocalPickupDisable(locationId: $locationId) {\n      locationId\n      userErrors {\n        code\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"locationId\": \"gid://shopify/Location/750123840\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "locationLocalPickupEnable", "description": "Enables local pickup for a location.", "arguments": [{"name": "localPickupSettings", "type": "DeliveryLocationLocalPickupEnableInput!", "required": true, "description": "The settings required to enable local pickup for a location."}], "returns": [], "examples": [{"description": "Enable local pickup for a location", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation enableLocalPickup($localPickupSettings: DeliveryLocationLocalPickupEnableInput!) {\n    locationLocalPickupEnable(localPickupSettings: $localPickupSettings) {\n      localPickupSettings {\n        pickupTime\n        instructions\n      }\n      userErrors {\n        message\n        field\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"localPickupSettings\": {\n    \"locationId\": \"gid://shopify/Location/530388139\",\n    \"pickupTime\": \"TWENTY_FOUR_HOURS\",\n    \"instructions\": \"Use side door.\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Enabling local pickup for an invalid location returns an error", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation enableLocalPickup($localPickupSettings: DeliveryLocationLocalPickupEnableInput!) {\n    locationLocalPickupEnable(localPickupSettings: $localPickupSettings) {\n      localPickupSettings {\n        pickupTime\n        instructions\n      }\n      userErrors {\n        code\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"localPickupSettings\": {\n    \"locationId\": \"gid://shopify/Location/123\",\n    \"pickupTime\": \"TWENTY_FOUR_HOURS\",\n    \"instructions\": \"Use side door.\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "locationLocalPickupEnable reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation enableLocalPickup($localPickupSettings: DeliveryLocationLocalPickupEnableInput!) {\n    locationLocalPickupEnable(localPickupSettings: $localPickupSettings) {\n      localPickupSettings {\n        pickupTime\n        instructions\n      }\n      userErrors {\n        message\n        field\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"localPickupSettings\": {\n    \"locationId\": \"gid://shopify/Location/530388139\",\n    \"pickupTime\": \"TWENTY_FOUR_HOURS\",\n    \"instructions\": \"Use side door.\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "publishablePublish", "description": "Publishes a resource to a channel. If the resource is a product, then it's visible in the channel only if the product status is active. Products that are sold exclusively on subscription (requiresSellingPlan: true) can be published only on online stores.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The resource to create or update publications for."}], "returns": [], "examples": [{"description": "Create a collection listing to publish a collection to your app", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation PublishablePublish($collectionId: ID!, $publicationId: ID!) {\n    publishablePublish(id: $collectionId, input: {publicationId: $publicationId}) {\n      publishable {\n        publishedOnPublication(publicationId: $publicationId)\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"collectionId\": \"gid://shopify/Collection/636030761\",\n  \"publicationId\": \"gid://shopify/Publication/762454635\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Create a product listing to publish a product to your app", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation publishablePublish($id: ID!, $input: [PublicationInput!]!) {\n    publishablePublish(id: $id, input: $input) {\n      publishable {\n        availablePublicationsCount {\n          count\n        }\n        resourcePublicationsCount {\n          count\n        }\n      }\n      shop {\n        publicationCount\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/Product/558169081\",\n  \"input\": {\n    \"publicationId\": \"gid://shopify/Publication/762454635\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Publish a collection with a publication ID", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation publishablePublish($id: ID!, $input: [PublicationInput!]!) {\n    publishablePublish(id: $id, input: $input) {\n      publishable {\n        availablePublicationsCount {\n          count\n        }\n        resourcePublicationsCount {\n          count\n        }\n      }\n      shop {\n        publicationCount\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/Collection/636030761\",\n  \"input\": {\n    \"publicationId\": \"gid://shopify/Publication/762454635\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Publish a product that does not belong to the shop", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation publishablePublish($id: ID!, $input: [PublicationInput!]!) {\n    publishablePublish(id: $id, input: $input) {\n      publishable {\n        availablePublicationsCount {\n          count\n        }\n        resourcePublicationsCount {\n          count\n        }\n      }\n      shop {\n        publicationCount\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/Product/921728736\",\n  \"input\": {\n    \"publicationId\": \"gid://shopify/Publication/762454635\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Publish a product that does not exist", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation publishablePublish($id: ID!, $input: [PublicationInput!]!) {\n    publishablePublish(id: $id, input: $input) {\n      publishable {\n        availablePublicationsCount {\n          count\n        }\n        resourcePublicationsCount {\n          count\n        }\n      }\n      shop {\n        publicationCount\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/Product/0\",\n  \"input\": {\n    \"publicationId\": \"gid://shopify/Publication/762454635\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Publish a product with a future publication date", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation publishablePublish($id: ID!, $input: [PublicationInput!]!) {\n    publishablePublish(id: $id, input: $input) {\n      publishable {\n        availablePublicationsCount {\n          count\n        }\n        resourcePublicationsCount {\n          count\n        }\n      }\n      shop {\n        publicationCount\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/Product/558169081\",\n  \"input\": {\n    \"publicationId\": \"gid://shopify/Publication/762454635\",\n    \"publishDate\": \"2999-01-01T00:00:00-00:00\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Publish a product with an invalid publication ID", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation publishablePublish($id: ID!, $input: [PublicationInput!]!) {\n    publishablePublish(id: $id, input: $input) {\n      publishable {\n        availablePublicationsCount {\n          count\n        }\n        resourcePublicationsCount {\n          count\n        }\n      }\n      shop {\n        publicationCount\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/Product/558169081\",\n  \"input\": {\n    \"publicationId\": \"gid://shopify/Publication/0\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "publishablePublish reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation PublishablePublish($collectionId: ID!, $publicationId: ID!) {\n    publishablePublish(id: $collectionId, input: {publicationId: $publicationId}) {\n      publishable {\n        publishedOnPublication(publicationId: $publicationId)\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"collectionId\": \"gid://shopify/Collection/636030761\",\n  \"publicationId\": \"gid://shopify/Publication/762454635\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "publishablePublishToCurrentChannel", "description": "Publishes a resource to current channel. If the resource is a product, then it's visible in the channel only if the product status is active. Products that are sold exclusively on subscription (requiresSellingPlan: true) can be published only on online stores.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The resource to create or update publications for."}], "returns": [], "examples": [{"description": "Publish a product to the current channel", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation publishablePublishToCurrentChannel($id: ID!) {\n    publishablePublishToCurrentChannel(id: $id) {\n      publishable {\n        availablePublicationsCount {\n          count\n        }\n        resourcePublicationsCount {\n          count\n        }\n      }\n      shop {\n        publicationCount\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/Product/921728736\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Publish a publication to the current channel", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation publishablePublishToCurrentChannel($id: ID!) {\n    publishablePublishToCurrentChannel(id: $id) {\n      publishable {\n        availablePublicationsCount {\n          count\n        }\n        resourcePublicationsCount {\n          count\n        }\n      }\n      shop {\n        publicationCount\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/Collection/841564295\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Publishing a product that does not exist", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation publishablePublishToCurrentChannel($id: ID!) {\n    publishablePublishToCurrentChannel(id: $id) {\n      publishable {\n        availablePublicationsCount {\n          count\n        }\n        resourcePublicationsCount {\n          count\n        }\n      }\n      shop {\n        publicationCount\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/Product/non-existent_product_id\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "publishablePublishToCurrentChannel reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation publishablePublishToCurrentChannel($id: ID!) {\n    publishablePublishToCurrentChannel(id: $id) {\n      publishable {\n        availablePublicationsCount {\n          count\n        }\n        resourcePublicationsCount {\n          count\n        }\n      }\n      shop {\n        publicationCount\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/Product/921728736\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "publishableUnpublish", "description": "Unpublishes a resource from a channel. If the resource is a product, then it's visible in the channel only if the product status is active.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The resource to delete or update publications for."}], "returns": [], "examples": [{"description": "Delete a collection listing to unpublish a collection from your app", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation PublishableUnpublish($collectionId: ID!, $publicationId: ID!) {\n    publishableUnpublish(id: $collectionId, input: {publicationId: $publicationId}) {\n      publishable {\n        publishedOnPublication(publicationId: $publicationId)\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"collectionId\": \"gid://shopify/Collection/142458073\",\n  \"publicationId\": \"gid://shopify/Publication/762454635\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Delete a product listing to unpublish a product from your app", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation PublishableUnpublish($productId: ID!, $publicationId: ID!) {\n    publishableUnpublish(id: $productId, input: {publicationId: $publicationId}) {\n      publishable {\n        publishedOnPublication(publicationId: $publicationId)\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"productId\": \"gid://shopify/Product/108828309\",\n  \"publicationId\": \"gid://shopify/Publication/762454635\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Error response", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation publishableUnpublish($id: ID!, $input: [PublicationInput!]!) {\n    publishableUnpublish(id: $id, input: $input) {\n      publishable {\n        availablePublicationsCount {\n          count\n        }\n        resourcePublicationsCount {\n          count\n        }\n      }\n      shop {\n        publicationCount\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/Product/108828309\",\n  \"input\": {\n    \"publishDate\": \"2024-11-14T11:45:48-05:00\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Unpublish a product from a channel", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation publishableUnpublish($id: ID!, $input: [PublicationInput!]!) {\n    publishableUnpublish(id: $id, input: $input) {\n      publishable {\n        availablePublicationsCount {\n          count\n        }\n        resourcePublicationsCount {\n          count\n        }\n      }\n      shop {\n        publicationCount\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/Product/108828309\",\n  \"input\": {\n    \"channelId\": \"gid://shopify/Channel/762454635\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Unpublish a product from a non-existing channel", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation publishableUnpublish($id: ID!, $input: [PublicationInput!]!) {\n    publishableUnpublish(id: $id, input: $input) {\n      publishable {\n        availablePublicationsCount {\n          count\n        }\n        resourcePublicationsCount {\n          count\n        }\n      }\n      shop {\n        publicationCount\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/Product/108828309\",\n  \"input\": {\n    \"channelId\": \"gid://shopify/Channel/0\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Unpublish a product from a non-existing publication", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation publishableUnpublish($id: ID!, $input: [PublicationInput!]!) {\n    publishableUnpublish(id: $id, input: $input) {\n      publishable {\n        availablePublicationsCount {\n          count\n        }\n        resourcePublicationsCount {\n          count\n        }\n      }\n      shop {\n        publicationCount\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/Product/108828309\",\n  \"input\": {\n    \"publicationId\": \"gid://shopify/Publication/0\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Unpublish a product from a publication", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation publishableUnpublish($id: ID!, $input: [PublicationInput!]!) {\n    publishableUnpublish(id: $id, input: $input) {\n      publishable {\n        availablePublicationsCount {\n          count\n        }\n        resourcePublicationsCount {\n          count\n        }\n      }\n      shop {\n        publicationCount\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/Product/108828309\",\n  \"input\": {\n    \"publicationId\": \"gid://shopify/Publication/762454635\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Unpublish a product using both a channel ID and publication ID", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation publishableUnpublish($id: ID!, $input: [PublicationInput!]!) {\n    publishableUnpublish(id: $id, input: $input) {\n      publishable {\n        availablePublicationsCount {\n          count\n        }\n        resourcePublicationsCount {\n          count\n        }\n      }\n      shop {\n        publicationCount\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/Product/108828309\",\n  \"input\": {\n    \"channelId\": \"gid://shopify/Channel/762454635\",\n    \"publicationId\": \"gid://shopify/Publication/762454635\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "publishableUnpublish reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation PublishableUnpublish($collectionId: ID!, $publicationId: ID!) {\n    publishableUnpublish(id: $collectionId, input: {publicationId: $publicationId}) {\n      publishable {\n        publishedOnPublication(publicationId: $publicationId)\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"collectionId\": \"gid://shopify/Collection/142458073\",\n  \"publicationId\": \"gid://shopify/Publication/762454635\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "publishableUnpublishToCurrentChannel", "description": "Unpublishes a resource from the current channel. If the resource is a product, then it's visible in the channel only if the product status is active.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The resource to delete or update publications for."}], "returns": [], "examples": [{"description": "Unpublish a product from the current channel", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation publishableUnpublishToCurrentChannel($id: ID!) {\n    publishableUnpublishToCurrentChannel(id: $id) {\n      publishable {\n        availablePublicationsCount {\n          count\n        }\n        resourcePublicationsCount {\n          count\n        }\n      }\n      shop {\n        publicationCount\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/Product/921728736\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "publishableUnpublishToCurrentChannel reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation publishableUnpublishToCurrentChannel($id: ID!) {\n    publishableUnpublishToCurrentChannel(id: $id) {\n      publishable {\n        availablePublicationsCount {\n          count\n        }\n        resourcePublicationsCount {\n          count\n        }\n      }\n      shop {\n        publicationCount\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/Product/921728736\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "shopPolicyUpdate", "description": "Updates a shop policy.", "arguments": [{"name": "shopPolicy", "type": "ShopPolicyInput!", "required": true, "description": "The properties to use when updating the shop policy."}], "returns": [], "examples": []}], "objects": [{"name": "BusinessEntity", "description": "Represents a merchant's Business Entity.", "fields_and_connections": [{"name": "address", "type": "BusinessEntityAddress!", "description": "The address of the merchant's Business Entity.", "not_nullable": true}], "examples": []}, {"name": "BusinessEntityAddress", "description": "Represents the address of a merchant's Business Entity.", "fields_and_connections": [{"name": "address1", "type": "String", "description": "The first line of the address. Typically the street address or PO Box number.", "not_nullable": true}], "examples": []}, {"name": "CartTransformEligibleOperations", "description": "Represents the cart transform feature configuration for the shop.", "fields_and_connections": [{"name": "expandOperation", "type": "Boolean!", "description": "The shop is eligible for expand operations.", "not_nullable": true}], "examples": []}, {"name": "CartTransformFeature", "description": "Represents the cart transform feature configuration for the shop.", "fields_and_connections": [{"name": "eligibleOperations", "type": "CartTransformEligibleOperations!", "description": "The cart transform operations eligible for the shop.", "not_nullable": true}], "examples": []}, {"name": "CurrencyFormats", "description": "Currency formats configured for the merchant. These formats are available to use within Liquid.", "fields_and_connections": [{"name": "moneyFormat", "type": "FormattedString!", "description": "Money without currency in HTML.", "not_nullable": true}], "examples": []}, {"name": "FilterOption", "description": "A filter option is one possible value in a search filter.", "fields_and_connections": [{"name": "label", "type": "String!", "description": "The filter option's label for display purposes.", "not_nullable": true}], "examples": []}, {"name": "LimitedPendingOrderCount", "description": "The total number of pending orders on a shop if less then a maximum, or that maximum.\nThe atMax field indicates when this maximum has been reached.", "fields_and_connections": [{"name": "atMax", "type": "Boolean!", "description": "This is set when the number of pending orders has reached the maximum.", "not_nullable": true}], "examples": []}, {"name": "Location", "description": "Represents the location where the physical good resides. You can stock inventory at active locations. Active\nlocations that have fulfills_online_orders: true and are configured with a shipping rate, pickup enabled or\nlocal delivery will be able to sell from their storefront.", "fields_and_connections": [{"name": "activatable", "type": "Boolean!", "description": "Whether the location can be reactivated. If false, then trying to activate the location with the\nLocationActivate\nmutation will return an error that describes why the location can't be activated.", "not_nullable": true}], "examples": []}, {"name": "LocationAddress", "description": "Represents the address of a location.", "fields_and_connections": [{"name": "address1", "type": "String", "description": "The first line of the address for the location.", "not_nullable": true}], "examples": []}, {"name": "LocationsCondition", "description": "A condition checking the location that the visitor is shopping from.", "fields_and_connections": [{"name": "applicationLevel", "type": "MarketConditionApplicationType", "description": "The application level for the condition.", "not_nullable": true}], "examples": []}, {"name": "LocationSuggestedAddress", "description": "Represents a suggested address for a location.", "fields_and_connections": [{"name": "address1", "type": "String", "description": "The first line of the suggested address.", "not_nullable": true}], "examples": []}, {"name": "NavigationItem", "description": "A navigation item, holding basic link attributes.", "fields_and_connections": [{"name": "id", "type": "String!", "description": "The unique identifier of the navigation item.", "not_nullable": true}], "examples": []}, {"name": "Shop", "description": "Represents a collection of general settings and information about the shop.", "fields_and_connections": [{"name": "accountOwner", "type": "StaffMember!", "description": "Account owner information.", "not_nullable": true}], "examples": []}, {"name": "ShopAddress", "description": "An address for a shop.", "fields_and_connections": [{"name": "address1", "type": "String", "description": "The first line of the address. Typically the street address or PO Box number.", "not_nullable": true}], "examples": []}, {"name": "ShopFeatures", "description": "Represents the feature set available to the shop.\nMost fields specify whether a feature is enabled for a shop, and some fields return information\nrelated to specific features.", "fields_and_connections": [{"name": "avalaraAvatax", "type": "Boolean!", "description": "Whether a shop has access to Avalara AvaTax.", "not_nullable": true}], "examples": []}, {"name": "ShopPlan", "description": "The billing plan of the shop.", "fields_and_connections": [{"name": "displayName", "type": "String!", "description": "The name of the shop's billing plan.", "not_nullable": true}], "examples": []}, {"name": "ShopPolicy", "description": "Policy that a merchant has configured for their store, such as their refund or privacy policy.", "fields_and_connections": [{"name": "body", "type": "HTML!", "description": "The text of the policy. The maximum size is 512kb.", "not_nullable": true}], "examples": []}, {"name": "ShopResourceLimits", "description": "Resource limits of a shop.", "fields_and_connections": [{"name": "locationLimit", "type": "Int!", "description": "Maximum number of locations allowed.", "not_nullable": true}], "examples": []}]}, {"name": "Webhooks", "queries": [{"name": "webhookSubscription", "description": "Returns a webhook subscription by ID.\nBuilding an app? If you only use app-specific webhooks, you won't need this. App-specific webhook subscriptions specified in your shopify.app.toml may be easier. They are automatically kept up to date by Shopify & require less maintenance. Please read About managing webhook subscriptions.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID of the WebhookSubscription to return."}], "returns": [], "examples": [{"description": "Get a single webhook subscription's ID, topic, and endpoint", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    webhookSubscription(id: \"gid://shopify/WebhookSubscription/892403750\") {\n      id\n      topic\n      endpoint {\n        __typename\n        ... on WebhookHttpEndpoint {\n          callbackUrl\n        }\n        ... on WebhookEventBridgeEndpoint {\n          arn\n        }\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "Get a specific webhook subscription using the node field and a GraphQL fragment", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    node(id: \"gid://shopify/WebhookSubscription/892403750\") {\n      ... on WebhookSubscription {\n        id\n        createdAt\n        updatedAt\n        legacyResourceId\n        topic\n        format\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "Get the dates a webhook subscription was created and updated", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    webhookSubscription(id: \"gid://shopify/WebhookSubscription/892403750\") {\n      createdAt\n      updatedAt\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "Get the format in which the webhook subscription serializes the payload", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    webhookSubscription(id: \"gid://shopify/WebhookSubscription/892403750\") {\n      format\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "Get the topic of a webhook subscription", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    webhookSubscription(id: \"gid://shopify/WebhookSubscription/892403750\") {\n      topic\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "Receive a single Webhook", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query WebhookSubscription($id: ID!) {\n    webhookSubscription(id: $id) {\n      id\n      topic\n      endpoint {\n        __typename\n        ... on WebhookHttpEndpoint {\n          callbackUrl\n        }\n        ... on WebhookEventBridgeEndpoint {\n          arn\n        }\n        ... on WebhookPubSubEndpoint {\n          pubSubProject\n          pubSubTopic\n        }\n      }\n      apiVersion {\n        handle\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/WebhookSubscription/892403750\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "webhookSubscriptions", "description": "Returns a list of webhook subscriptions.\nBuilding an app? If you only use app-specific webhooks, you won't need this. App-specific webhook subscriptions specified in your shopify.app.toml may be easier. They are automatically kept up to date by Shopify & require less maintenance. Please read About managing webhook subscriptions.", "arguments": [{"name": "after", "type": "String", "required": true, "description": "The elements that come after the specified cursor."}], "returns": [], "examples": [{"description": "Get the IDs, topics, and endpoints of the first 2 webhook subscriptions", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    webhookSubscriptions(first: 2) {\n      edges {\n        node {\n          id\n          topic\n          endpoint {\n            __typename\n            ... on WebhookHttpEndpoint {\n              callbackUrl\n            }\n            ... on WebhookEventBridgeEndpoint {\n              arn\n            }\n            ... on WebhookPubSubEndpoint {\n              pubSubProject\n              pubSubTopic\n            }\n          }\n        }\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "Get the first two webhook subscriptions with an APP_UNINSTALLED topic", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query {\n    webhookSubscriptions(first: 2) {\n      edges {\n        node {\n          id\n          topic\n          endpoint {\n            __typename\n            ... on WebhookHttpEndpoint {\n              callbackUrl\n            }\n            ... on WebhookEventBridgeEndpoint {\n              arn\n            }\n            ... on WebhookPubSubEndpoint {\n              pubSubProject\n              pubSubTopic\n            }\n          }\n        }\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}, {"description": "Retrieves a list of webhooks", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query WebhookSubscriptionList {\n    webhookSubscriptions(first: 3) {\n      edges {\n        node {\n          id\n          topic\n          endpoint {\n            __typename\n            ... on WebhookHttpEndpoint {\n              callbackUrl\n            }\n            ... on WebhookEventBridgeEndpoint {\n              arn\n            }\n            ... on WebhookPubSubEndpoint {\n              pubSubProject\n              pubSubTopic\n            }\n          }\n          createdAt\n          updatedAt\n          apiVersion {\n            handle\n          }\n          format\n          includeFields\n          metafieldNamespaces\n          privateMetafieldNamespaces\n        }\n      }\n    }\n  }\nQUERY\n\nresponse = client.query(query: query)\n"}]}, {"name": "webhookSubscriptionsCount", "description": "The count of webhook subscriptions.\nBuilding an app? If you only use app-specific webhooks, you won't need this. App-specific webhook subscriptions specified in your shopify.app.toml may be easier. They are automatically kept up to date by Shopify & require less maintenance. Please read About managing webhook subscriptions. Limited to a maximum of 10000.", "arguments": [{"name": "query", "type": "String", "required": true, "description": "A filter made up of terms, connectives, modifiers, and comparators.\nYou can apply one or more filters to a query. Learn more about Shopify API search syntax."}], "returns": [], "examples": [{"description": "Overview", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  query WebhookSubscriptionsCount($query: String!) {\n    webhookSubscriptionsCount(query: $query) {\n      count\n      precision\n    }\n  }\nQUERY\n\nvariables = {\n  \"query\": \"topic:\"orders/create\"\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}], "mutations": [{"name": "eventBridgeWebhookSubscriptionCreate", "description": "Creates a new Amazon EventBridge webhook subscription.\nBuilding an app? If you only use app-specific webhooks, you won't need this. App-specific webhook subscriptions specified in your shopify.app.toml may be easier. They are automatically kept up to date by Shopify & require less maintenance. Please read About managing webhook subscriptions.", "arguments": [{"name": "topic", "type": "WebhookSubscriptionTopic!", "required": true, "description": "The type of event that triggers the webhook."}], "returns": [], "examples": [{"description": "Create a METAOBJECTS_CREATE EventBridge webhook subscription for lookbook metaobjects", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation eventBridgeWebhookSubscriptionCreate($topic: WebhookSubscriptionTopic!, $webhookSubscription: EventBridgeWebhookSubscriptionInput!) {\n    eventBridgeWebhookSubscriptionCreate(topic: $topic, webhookSubscription: $webhookSubscription) {\n      webhookSubscription {\n        id\n        topic\n        filter\n        format\n        endpoint {\n          __typename\n          ... on WebhookEventBridgeEndpoint {\n            arn\n          }\n        }\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"topic\": \"METAOBJECTS_CREATE\",\n  \"webhookSubscription\": {\n    \"arn\": \"arn:aws:events:us-east-1::event-source/aws.partner/shopify.com/1830279/test-event-source\",\n    \"format\": \"JSON\",\n    \"filter\": \"type:lookbook\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Create an Amazon EventBridge webhook subscription for ORDERS_CREATE events", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation eventBridgeWebhookSubscriptionCreate($topic: WebhookSubscriptionTopic!, $webhookSubscription: EventBridgeWebhookSubscriptionInput!) {\n    eventBridgeWebhookSubscriptionCreate(topic: $topic, webhookSubscription: $webhookSubscription) {\n      webhookSubscription {\n        id\n        topic\n        filter\n        format\n        endpoint {\n          __typename\n          ... on WebhookEventBridgeEndpoint {\n            arn\n          }\n        }\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"topic\": \"METAOBJECTS_CREATE\",\n  \"webhookSubscription\": {\n    \"arn\": \"arn:aws:events:us-east-1::event-source/aws.partner/shopify.com/1830279/test-event-source\",\n    \"format\": \"JSON\",\n    \"filter\": \"type:lookbook\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Create an ORDERS_CREATE EventBridge webhook subscription thatincludes metafields during serialization", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation eventBridgeWebhookSubscriptionCreate($topic: WebhookSubscriptionTopic!, $webhookSubscription: EventBridgeWebhookSubscriptionInput!) {\n    eventBridgeWebhookSubscriptionCreate(topic: $topic, webhookSubscription: $webhookSubscription) {\n      webhookSubscription {\n        id\n        topic\n        filter\n        format\n        endpoint {\n          __typename\n          ... on WebhookEventBridgeEndpoint {\n            arn\n          }\n        }\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"topic\": \"METAOBJECTS_CREATE\",\n  \"webhookSubscription\": {\n    \"arn\": \"arn:aws:events:us-east-1::event-source/aws.partner/shopify.com/1830279/test-event-source\",\n    \"format\": \"JSON\",\n    \"filter\": \"type:lookbook\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Create an ORDERS_CREATE EventBridge webhook subscription with fewer resource fields", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation eventBridgeWebhookSubscriptionCreate($topic: WebhookSubscriptionTopic!, $webhookSubscription: EventBridgeWebhookSubscriptionInput!) {\n    eventBridgeWebhookSubscriptionCreate(topic: $topic, webhookSubscription: $webhookSubscription) {\n      webhookSubscription {\n        id\n        topic\n        filter\n        format\n        endpoint {\n          __typename\n          ... on WebhookEventBridgeEndpoint {\n            arn\n          }\n        }\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"topic\": \"METAOBJECTS_CREATE\",\n  \"webhookSubscription\": {\n    \"arn\": \"arn:aws:events:us-east-1::event-source/aws.partner/shopify.com/1830279/test-event-source\",\n    \"format\": \"JSON\",\n    \"filter\": \"type:lookbook\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "eventBridgeWebhookSubscriptionCreate reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation eventBridgeWebhookSubscriptionCreate($topic: WebhookSubscriptionTopic!, $webhookSubscription: EventBridgeWebhookSubscriptionInput!) {\n    eventBridgeWebhookSubscriptionCreate(topic: $topic, webhookSubscription: $webhookSubscription) {\n      webhookSubscription {\n        id\n        topic\n        filter\n        format\n        endpoint {\n          __typename\n          ... on WebhookEventBridgeEndpoint {\n            arn\n          }\n        }\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"topic\": \"METAOBJECTS_CREATE\",\n  \"webhookSubscription\": {\n    \"arn\": \"arn:aws:events:us-east-1::event-source/aws.partner/shopify.com/1830279/test-event-source\",\n    \"format\": \"JSON\",\n    \"filter\": \"type:lookbook\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "eventBridgeWebhookSubscriptionUpdate", "description": "Updates an Amazon EventBridge webhook subscription.\nBuilding an app? If you only use app-specific webhooks, you won't need this. App-specific webhook subscriptions specified in your shopify.app.toml may be easier. They are automatically kept up to date by Shopify & require less maintenance. Please read About managing webhook subscriptions.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID of the webhook subscription to update."}], "returns": [], "examples": [{"description": "Update a webhook subscription from HTTP to Amazon EventBridge", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation eventBridgeWebhookSubscriptionUpdate($id: ID!, $webhookSubscription: EventBridgeWebhookSubscriptionInput!) {\n    eventBridgeWebhookSubscriptionUpdate(id: $id, webhookSubscription: $webhookSubscription) {\n      userErrors {\n        field\n        message\n      }\n      webhookSubscription {\n        id\n        topic\n        endpoint {\n          ... on WebhookEventBridgeEndpoint {\n            arn\n          }\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/WebhookSubscription/525699895\",\n  \"webhookSubscription\": {\n    \"arn\": \"arn:aws:events:us-east-1::event-source/aws.partner/shopify.com/755357713/test-event-source\",\n    \"format\": \"JSON\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "eventBridgeWebhookSubscriptionUpdate reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation eventBridgeWebhookSubscriptionUpdate($id: ID!, $webhookSubscription: EventBridgeWebhookSubscriptionInput!) {\n    eventBridgeWebhookSubscriptionUpdate(id: $id, webhookSubscription: $webhookSubscription) {\n      userErrors {\n        field\n        message\n      }\n      webhookSubscription {\n        id\n        topic\n        endpoint {\n          ... on WebhookEventBridgeEndpoint {\n            arn\n          }\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/WebhookSubscription/525699895\",\n  \"webhookSubscription\": {\n    \"arn\": \"arn:aws:events:us-east-1::event-source/aws.partner/shopify.com/755357713/test-event-source\",\n    \"format\": \"JSON\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "pubSubWebhookSubscriptionCreate", "description": "Creates a new Google Cloud Pub/Sub webhook subscription.\nBuilding an app? If you only use app-specific webhooks, you won't need this. App-specific webhook subscriptions specified in your shopify.app.toml may be easier. They are automatically kept up to date by Shopify & require less maintenance. Please read About managing webhook subscriptions.", "arguments": [{"name": "topic", "type": "WebhookSubscriptionTopic!", "required": true, "description": "The type of event that triggers the webhook."}], "returns": [], "examples": [{"description": "Create a Google Cloud Pub/Sub webhook subscription for ORDERS_CREATE events", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation pubSubWebhookSubscriptionCreate($topic: WebhookSubscriptionTopic!, $webhookSubscription: PubSubWebhookSubscriptionInput!) {\n    pubSubWebhookSubscriptionCreate(topic: $topic, webhookSubscription: $webhookSubscription) {\n      webhookSubscription {\n        id\n        topic\n        format\n        endpoint {\n          __typename\n          ... on WebhookPubSubEndpoint {\n            pubSubProject\n            pubSubTopic\n          }\n        }\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"topic\": \"ORDERS_CREATE\",\n  \"webhookSubscription\": {\n    \"pubSubProject\": \"my-gcp-project\",\n    \"pubSubTopic\": \"my-gcp-topic\",\n    \"format\": \"JSON\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Create a METAOBJECTS_CREATE Pub/Sub webhook subscription for lookbook metaobjects", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation pubSubWebhookSubscriptionCreate($topic: WebhookSubscriptionTopic!, $webhookSubscription: PubSubWebhookSubscriptionInput!) {\n    pubSubWebhookSubscriptionCreate(topic: $topic, webhookSubscription: $webhookSubscription) {\n      webhookSubscription {\n        id\n        topic\n        format\n        endpoint {\n          __typename\n          ... on WebhookPubSubEndpoint {\n            pubSubProject\n            pubSubTopic\n          }\n        }\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"topic\": \"ORDERS_CREATE\",\n  \"webhookSubscription\": {\n    \"pubSubProject\": \"my-gcp-project\",\n    \"pubSubTopic\": \"my-gcp-topic\",\n    \"format\": \"JSON\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Create an ORDERS_CREATE Pub/Sub webhook subscription that includes metafields during serialization", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation pubSubWebhookSubscriptionCreate($topic: WebhookSubscriptionTopic!, $webhookSubscription: PubSubWebhookSubscriptionInput!) {\n    pubSubWebhookSubscriptionCreate(topic: $topic, webhookSubscription: $webhookSubscription) {\n      webhookSubscription {\n        id\n        topic\n        format\n        endpoint {\n          __typename\n          ... on WebhookPubSubEndpoint {\n            pubSubProject\n            pubSubTopic\n          }\n        }\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"topic\": \"ORDERS_CREATE\",\n  \"webhookSubscription\": {\n    \"pubSubProject\": \"my-gcp-project\",\n    \"pubSubTopic\": \"my-gcp-topic\",\n    \"format\": \"JSON\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Create an ORDERS_CREATE Pub/Sub webhook subscription with fewer resource fields", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation pubSubWebhookSubscriptionCreate($topic: WebhookSubscriptionTopic!, $webhookSubscription: PubSubWebhookSubscriptionInput!) {\n    pubSubWebhookSubscriptionCreate(topic: $topic, webhookSubscription: $webhookSubscription) {\n      webhookSubscription {\n        id\n        topic\n        format\n        endpoint {\n          __typename\n          ... on WebhookPubSubEndpoint {\n            pubSubProject\n            pubSubTopic\n          }\n        }\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"topic\": \"ORDERS_CREATE\",\n  \"webhookSubscription\": {\n    \"pubSubProject\": \"my-gcp-project\",\n    \"pubSubTopic\": \"my-gcp-topic\",\n    \"format\": \"JSON\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "pubSubWebhookSubscriptionCreate reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation pubSubWebhookSubscriptionCreate($topic: WebhookSubscriptionTopic!, $webhookSubscription: PubSubWebhookSubscriptionInput!) {\n    pubSubWebhookSubscriptionCreate(topic: $topic, webhookSubscription: $webhookSubscription) {\n      webhookSubscription {\n        id\n        topic\n        format\n        endpoint {\n          __typename\n          ... on WebhookPubSubEndpoint {\n            pubSubProject\n            pubSubTopic\n          }\n        }\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"topic\": \"ORDERS_CREATE\",\n  \"webhookSubscription\": {\n    \"pubSubProject\": \"my-gcp-project\",\n    \"pubSubTopic\": \"my-gcp-topic\",\n    \"format\": \"JSON\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "pubSubWebhookSubscriptionUpdate", "description": "Updates a Google Cloud Pub/Sub webhook subscription.\nBuilding an app? If you only use app-specific webhooks, you won't need this. App-specific webhook subscriptions specified in your shopify.app.toml may be easier. They are automatically kept up to date by Shopify & require less maintenance. Please read About managing webhook subscriptions.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID of the webhook subscription to update."}], "returns": [], "examples": [{"description": "Update a webhook subscription from HTTP to Google Pub/Sub", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation pubSubWebhookSubscriptionUpdate($id: ID!, $webhookSubscription: PubSubWebhookSubscriptionInput!) {\n    pubSubWebhookSubscriptionUpdate(id: $id, webhookSubscription: $webhookSubscription) {\n      userErrors {\n        field\n        message\n      }\n      webhookSubscription {\n        id\n        topic\n        endpoint {\n          ... on WebhookPubSubEndpoint {\n            pubSubProject\n            pubSubTopic\n          }\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/WebhookSubscription/525699895\",\n  \"webhookSubscription\": {\n    \"pubSubProject\": \"a-gcp-project\",\n    \"pubSubTopic\": \"a-pubsub-topic\",\n    \"format\": \"JSON\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "pubSubWebhookSubscriptionUpdate reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation pubSubWebhookSubscriptionUpdate($id: ID!, $webhookSubscription: PubSubWebhookSubscriptionInput!) {\n    pubSubWebhookSubscriptionUpdate(id: $id, webhookSubscription: $webhookSubscription) {\n      userErrors {\n        field\n        message\n      }\n      webhookSubscription {\n        id\n        topic\n        endpoint {\n          ... on WebhookPubSubEndpoint {\n            pubSubProject\n            pubSubTopic\n          }\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/WebhookSubscription/525699895\",\n  \"webhookSubscription\": {\n    \"pubSubProject\": \"a-gcp-project\",\n    \"pubSubTopic\": \"a-pubsub-topic\",\n    \"format\": \"JSON\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "webhookSubscriptionCreate", "description": "Creates a new webhook subscription.\nBuilding an app? If you only use app-specific webhooks, you won't need this. App-specific webhook subscriptions specified in your shopify.app.toml may be easier. They are automatically kept up to date by Shopify & require less maintenance. Please read About managing webhook subscriptions.", "arguments": [{"name": "topic", "type": "WebhookSubscriptionTopic!", "required": true, "description": "The type of event that triggers the webhook."}], "returns": [], "examples": [{"description": "Create a METAOBJECTS_CREATE webhook subscription for lookbook metaobjects", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation webhookSubscriptionCreate($topic: WebhookSubscriptionTopic!, $webhookSubscription: WebhookSubscriptionInput!) {\n    webhookSubscriptionCreate(topic: $topic, webhookSubscription: $webhookSubscription) {\n      webhookSubscription {\n        id\n        topic\n        filter\n        format\n        endpoint {\n          __typename\n          ... on WebhookHttpEndpoint {\n            callbackUrl\n          }\n        }\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"topic\": \"METAOBJECTS_CREATE\",\n  \"webhookSubscription\": {\n    \"callbackUrl\": \"https://example.org/endpoint\",\n    \"format\": \"JSON\",\n    \"filter\": \"type:lookbook\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Create a new Webhook", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation WebhookSubscriptionCreate($topic: WebhookSubscriptionTopic!, $webhookSubscription: WebhookSubscriptionInput!) {\n    webhookSubscriptionCreate(topic: $topic, webhookSubscription: $webhookSubscription) {\n      webhookSubscription {\n        id\n        topic\n        apiVersion {\n          handle\n        }\n        format\n        createdAt\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"topic\": \"ORDERS_CREATE\",\n  \"webhookSubscription\": {\n    \"callbackUrl\": \"https://example.org/endpoint\",\n    \"format\": \"JSON\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Create an HTTP webhook subscription for APP_UNINSTALLED events", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation webhookSubscriptionCreate($topic: WebhookSubscriptionTopic!, $webhookSubscription: WebhookSubscriptionInput!) {\n    webhookSubscriptionCreate(topic: $topic, webhookSubscription: $webhookSubscription) {\n      webhookSubscription {\n        id\n        topic\n        filter\n        format\n        endpoint {\n          __typename\n          ... on WebhookHttpEndpoint {\n            callbackUrl\n          }\n        }\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"topic\": \"METAOBJECTS_CREATE\",\n  \"webhookSubscription\": {\n    \"callbackUrl\": \"https://example.org/endpoint\",\n    \"format\": \"JSON\",\n    \"filter\": \"type:lookbook\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Create an ORDERS_CREATE webhook subscription that includes metafields during serialization", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation webhookSubscriptionCreate($topic: WebhookSubscriptionTopic!, $webhookSubscription: WebhookSubscriptionInput!) {\n    webhookSubscriptionCreate(topic: $topic, webhookSubscription: $webhookSubscription) {\n      webhookSubscription {\n        id\n        topic\n        filter\n        format\n        endpoint {\n          __typename\n          ... on WebhookHttpEndpoint {\n            callbackUrl\n          }\n        }\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"topic\": \"METAOBJECTS_CREATE\",\n  \"webhookSubscription\": {\n    \"callbackUrl\": \"https://example.org/endpoint\",\n    \"format\": \"JSON\",\n    \"filter\": \"type:lookbook\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Create an ORDERS_CREATE webhook subscription with fewer resource fields during serialization", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation webhookSubscriptionCreate($topic: WebhookSubscriptionTopic!, $webhookSubscription: WebhookSubscriptionInput!) {\n    webhookSubscriptionCreate(topic: $topic, webhookSubscription: $webhookSubscription) {\n      webhookSubscription {\n        id\n        topic\n        filter\n        format\n        endpoint {\n          __typename\n          ... on WebhookHttpEndpoint {\n            callbackUrl\n          }\n        }\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"topic\": \"METAOBJECTS_CREATE\",\n  \"webhookSubscription\": {\n    \"callbackUrl\": \"https://example.org/endpoint\",\n    \"format\": \"JSON\",\n    \"filter\": \"type:lookbook\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "webhookSubscriptionCreate reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation webhookSubscriptionCreate($topic: WebhookSubscriptionTopic!, $webhookSubscription: WebhookSubscriptionInput!) {\n    webhookSubscriptionCreate(topic: $topic, webhookSubscription: $webhookSubscription) {\n      webhookSubscription {\n        id\n        topic\n        filter\n        format\n        endpoint {\n          __typename\n          ... on WebhookHttpEndpoint {\n            callbackUrl\n          }\n        }\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"topic\": \"METAOBJECTS_CREATE\",\n  \"webhookSubscription\": {\n    \"callbackUrl\": \"https://example.org/endpoint\",\n    \"format\": \"JSON\",\n    \"filter\": \"type:lookbook\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "webhookSubscriptionDelete", "description": "Deletes a webhook subscription.\nBuilding an app? If you only use app-specific webhooks, you won't need this. App-specific webhook subscriptions specified in your shopify.app.toml may be easier. They are automatically kept up to date by Shopify & require less maintenance. Please read About managing webhook subscriptions.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID of the webhook subscription to delete."}], "returns": [], "examples": [{"description": "Remove an existing Webhook", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation webhookSubscriptionDelete($id: ID!) {\n    webhookSubscriptionDelete(id: $id) {\n      userErrors {\n        field\n        message\n      }\n      deletedWebhookSubscriptionId\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/WebhookSubscription/525699895\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "webhookSubscriptionDelete reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation webhookSubscriptionDelete($id: ID!) {\n    webhookSubscriptionDelete(id: $id) {\n      userErrors {\n        field\n        message\n      }\n      deletedWebhookSubscriptionId\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/WebhookSubscription/525699895\"\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}, {"name": "webhookSubscriptionUpdate", "description": "Updates a webhook subscription.\nBuilding an app? If you only use app-specific webhooks, you won't need this. App-specific webhook subscriptions specified in your shopify.app.toml may be easier. They are automatically kept up to date by Shopify & require less maintenance. Please read About managing webhook subscriptions.", "arguments": [{"name": "id", "type": "ID!", "required": true, "description": "The ID of the webhook subscription to update."}], "returns": [], "examples": [{"description": "Modify an existing Webhook", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation WebhookSubscriptionUpdate($id: ID!, $webhookSubscription: WebhookSubscriptionInput!) {\n    webhookSubscriptionUpdate(id: $id, webhookSubscription: $webhookSubscription) {\n      userErrors {\n        field\n        message\n      }\n      webhookSubscription {\n        id\n        topic\n        endpoint {\n          __typename\n          ... on WebhookHttpEndpoint {\n            callbackUrl\n          }\n          ... on WebhookEventBridgeEndpoint {\n            arn\n          }\n          ... on WebhookPubSubEndpoint {\n            pubSubProject\n            pubSubTopic\n          }\n        }\n        apiVersion {\n          handle\n        }\n        format\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/WebhookSubscription/525699895\",\n  \"webhookSubscription\": {\n    \"callbackUrl\": \"https://example.org/aValidEndpoint\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "Update the callback URL of a webhook subscription", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation webhookSubscriptionUpdate($id: ID!, $webhookSubscription: WebhookSubscriptionInput!) {\n    webhookSubscriptionUpdate(id: $id, webhookSubscription: $webhookSubscription) {\n      userErrors {\n        field\n        message\n      }\n      webhookSubscription {\n        id\n        topic\n        endpoint {\n          ... on WebhookHttpEndpoint {\n            callbackUrl\n          }\n        }\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/WebhookSubscription/525699895\",\n  \"webhookSubscription\": {\n    \"callbackUrl\": \"https://example.org/aValidEndpoint\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}, {"description": "webhookSubscriptionUpdate reference", "code": "session = ShopifyAPI::Auth::Session.new(\n  shop: \"your-development-store.myshopify.com\",\n  access_token: access_token\n)\nclient = ShopifyAPI::Clients::Graphql::Admin.new(\n  session: session\n)\n\nquery = <<~QUERY\n  mutation WebhookSubscriptionUpdate($id: ID!, $webhookSubscription: WebhookSubscriptionInput!) {\n    webhookSubscriptionUpdate(id: $id, webhookSubscription: $webhookSubscription) {\n      userErrors {\n        field\n        message\n      }\n      webhookSubscription {\n        id\n        topic\n        endpoint {\n          __typename\n          ... on WebhookHttpEndpoint {\n            callbackUrl\n          }\n          ... on WebhookEventBridgeEndpoint {\n            arn\n          }\n          ... on WebhookPubSubEndpoint {\n            pubSubProject\n            pubSubTopic\n          }\n        }\n        apiVersion {\n          handle\n        }\n        format\n      }\n    }\n  }\nQUERY\n\nvariables = {\n  \"id\": \"gid://shopify/WebhookSubscription/525699895\",\n  \"webhookSubscription\": {\n    \"callbackUrl\": \"https://example.org/aValidEndpoint\"\n  }\n}\n\nresponse = client.query(query: query, variables: variables)\n"}]}], "objects": [{"name": "WebhookEventBridgeEndpoint", "description": "An Amazon EventBridge partner event source to which webhook subscriptions publish events.", "fields_and_connections": [{"name": "arn", "type": "ARN!", "description": "The ARN of this EventBridge partner event source.", "not_nullable": true}], "examples": []}, {"name": "WebhookHttpEndpoint", "description": "An HTTPS endpoint to which webhook subscriptions send POST requests.", "fields_and_connections": [{"name": "callbackUrl", "type": "URL!", "description": "The URL to which the webhooks events are sent.", "not_nullable": true}], "examples": []}, {"name": "WebhookPubSubEndpoint", "description": "A Google Cloud Pub/Sub topic to which webhook subscriptions publish events.", "fields_and_connections": [{"name": "pubSubProject", "type": "String!", "description": "The Google Cloud Pub/Sub project ID.", "not_nullable": true}], "examples": []}, {"name": "WebhookSubscription", "description": "A webhook subscription is a persisted data object created by an app using the REST Admin API or GraphQL Admin API.\nIt describes the topic that the app wants to receive, and a destination where Shopify should send webhooks of the specified topic.\nWhen an event for a given topic occurs, the webhook subscription sends a relevant payload to the destination.\nLearn more about the webhooks system.", "fields_and_connections": [{"name": "apiVersion", "type": "ApiVersion!", "description": "The Admin API version that Shopify uses to serialize webhook events. This value is inherited from the app that created the webhook subscription.", "not_nullable": true}], "examples": []}]}, {"name": "GraphQL Types", "queries": [], "mutations": [], "objects": [{"name": "AbandonedCheckoutEdge", "description": "An auto-generated type which holds one AbandonedCheckout and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "AbandonedCheckoutLineItemEdge", "description": "An auto-generated type which holds one AbandonedCheckoutLineItem and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "AbandonmentEmailStateUpdateUserError", "description": "An error that occurs during the execution of AbandonmentEmailStateUpdate.", "fields_and_connections": [{"name": "code", "type": "AbandonmentEmailStateUpdateUserErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "AbandonmentUpdateActivitiesDeliveryStatusesUserError", "description": "An error that occurs during the execution of AbandonmentUpdateActivitiesDeliveryStatuses.", "fields_and_connections": [{"name": "code", "type": "AbandonmentUpdateActivitiesDeliveryStatusesUserErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "AppCreditEdge", "description": "An auto-generated type which holds one AppCredit and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "AppDiscountTypeEdge", "description": "An auto-generated type which holds one AppDiscountType and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "AppEdge", "description": "An auto-generated type which holds one App and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "AppInstallationEdge", "description": "An auto-generated type which holds one AppInstallation and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "AppPurchaseOneTimeEdge", "description": "An auto-generated type which holds one AppPurchaseOneTime and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "AppRevenueAttributionRecordEdge", "description": "An auto-generated type which holds one AppRevenueAttributionRecord and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "AppSubscriptionEdge", "description": "An auto-generated type which holds one AppSubscription and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "AppSubscriptionTrialExtendUserError", "description": "An error that occurs during the execution of AppSubscriptionTrialExtend.", "fields_and_connections": [{"name": "code", "type": "AppSubscriptionTrialExtendUserErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "AppUsageRecordEdge", "description": "An auto-generated type which holds one AppUsageRecord and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "ArticleAuthorEdge", "description": "An auto-generated type which holds one ArticleAuthor and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "ArticleCreateUserError", "description": "An error that occurs during the execution of ArticleCreate.", "fields_and_connections": [{"name": "code", "type": "ArticleCreateUserErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "ArticleDeleteUserError", "description": "An error that occurs during the execution of ArticleDelete.", "fields_and_connections": [{"name": "code", "type": "ArticleDeleteUserErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "ArticleEdge", "description": "An auto-generated type which holds one Article and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "ArticleUpdateUserError", "description": "An error that occurs during the execution of ArticleUpdate.", "fields_and_connections": [{"name": "code", "type": "ArticleUpdateUserErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "BillingAttemptUserError", "description": "Represents an error that happens during the execution of a billing attempt mutation.", "fields_and_connections": [{"name": "code", "type": "BillingAttemptUserErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "BlogCreateUserError", "description": "An error that occurs during the execution of BlogCreate.", "fields_and_connections": [{"name": "code", "type": "BlogCreateUserErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "BlogDeleteUserError", "description": "An error that occurs during the execution of BlogDelete.", "fields_and_connections": [{"name": "code", "type": "BlogDeleteUserErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "BlogEdge", "description": "An auto-generated type which holds one Blog and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "BlogUpdateUserError", "description": "An error that occurs during the execution of BlogUpdate.", "fields_and_connections": [{"name": "code", "type": "BlogUpdateUserErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "BulkMutationUserError", "description": "Represents an error that happens during execution of a bulk mutation.", "fields_and_connections": [{"name": "code", "type": "BulkMutationErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "BulkOperationUserError", "description": "Represents an error in the input of a mutation.", "fields_and_connections": [{"name": "code", "type": "BulkOperationUserErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "BulkProductResourceFeedbackCreateUserError", "description": "An error that occurs during the execution of BulkProductResourceFeedbackCreate.", "fields_and_connections": [{"name": "code", "type": "BulkProductResourceFeedbackCreateUserErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "BusinessCustomerUserError", "description": "An error that happens during the execution of a business customer mutation.", "fields_and_connections": [{"name": "code", "type": "BusinessCustomerErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "CalculatedDiscountApplicationEdge", "description": "An auto-generated type which holds one CalculatedDiscountApplication and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "CalculatedLineItemEdge", "description": "An auto-generated type which holds one CalculatedLineItem and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "CarrierServiceCreateUserError", "description": "An error that occurs during the execution of CarrierServiceCreate.", "fields_and_connections": [{"name": "code", "type": "CarrierServiceCreateUserErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "CarrierServiceDeleteUserError", "description": "An error that occurs during the execution of CarrierServiceDelete.", "fields_and_connections": [{"name": "code", "type": "CarrierServiceDeleteUserErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "CarrierServiceUpdateUserError", "description": "An error that occurs during the execution of CarrierServiceUpdate.", "fields_and_connections": [{"name": "code", "type": "CarrierServiceUpdateUserErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "CartTransformCreateUserError", "description": "An error that occurs during the execution of CartTransformCreate.", "fields_and_connections": [{"name": "code", "type": "CartTransformCreateUserErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "CartTransformDeleteUserError", "description": "An error that occurs during the execution of CartTransformDelete.", "fields_and_connections": [{"name": "code", "type": "CartTransformDeleteUserErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "CartTransformEdge", "description": "An auto-generated type which holds one CartTransform and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "CashTrackingAdjustmentEdge", "description": "An auto-generated type which holds one CashTrackingAdjustment and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "CashTrackingSessionEdge", "description": "An auto-generated type which holds one CashTrackingSession and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "CatalogEdge", "description": "An auto-generated type which holds one Catalog and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "CatalogUserError", "description": "Defines errors encountered while managing a catalog.", "fields_and_connections": [{"name": "code", "type": "CatalogUserErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "ChannelEdge", "description": "An auto-generated type which holds one Channel and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "CheckoutBrandingUpsertUserError", "description": "An error that occurs during the execution of CheckoutBrandingUpsert.", "fields_and_connections": [{"name": "code", "type": "CheckoutBrandingUpsertUserErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "CheckoutProfileEdge", "description": "An auto-generated type which holds one CheckoutProfile and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "CollectionAddProductsV2UserError", "description": "An error that occurs during the execution of CollectionAddProductsV2.", "fields_and_connections": [{"name": "code", "type": "CollectionAddProductsV2UserErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "CollectionEdge", "description": "An auto-generated type which holds one Collection and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "CollectionPublicationEdge", "description": "An auto-generated type which holds one CollectionPublication and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "CombinedListingChildEdge", "description": "An auto-generated type which holds one CombinedListingChild and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "CombinedListingUpdateUserError", "description": "An error that occurs during the execution of CombinedListingUpdate.", "fields_and_connections": [{"name": "code", "type": "CombinedListingUpdateUserErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "CommentApproveUserError", "description": "An error that occurs during the execution of CommentApprove.", "fields_and_connections": [{"name": "code", "type": "CommentApproveUserErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "CommentDeleteUserError", "description": "An error that occurs during the execution of CommentDelete.", "fields_and_connections": [{"name": "code", "type": "CommentDeleteUserErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "CommentEdge", "description": "An auto-generated type which holds one Comment and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "CommentNotSpamUserError", "description": "An error that occurs during the execution of CommentNotSpam.", "fields_and_connections": [{"name": "code", "type": "CommentNotSpamUserErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "CommentSpamUserError", "description": "An error that occurs during the execution of CommentSpam.", "fields_and_connections": [{"name": "code", "type": "CommentSpamUserErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "CompanyContactEdge", "description": "An auto-generated type which holds one CompanyContact and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "CompanyContactRoleAssignmentEdge", "description": "An auto-generated type which holds one CompanyContactRoleAssignment and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "CompanyContactRoleEdge", "description": "An auto-generated type which holds one CompanyContactRole and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "CompanyEdge", "description": "An auto-generated type which holds one Company and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "CompanyLocationEdge", "description": "An auto-generated type which holds one CompanyLocation and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "CompanyLocationStaffMemberAssignmentEdge", "description": "An auto-generated type which holds one CompanyLocationStaffMemberAssignment and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "CountryHarmonizedSystemCodeEdge", "description": "An auto-generated type which holds one CountryHarmonizedSystemCode and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "CurrencySettingEdge", "description": "An auto-generated type which holds one CurrencySetting and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "CustomerAccountPageEdge", "description": "An auto-generated type which holds one CustomerAccountPage and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "CustomerCancelDataErasureUserError", "description": "An error that occurs when cancelling a customer data erasure request.", "fields_and_connections": [{"name": "code", "type": "CustomerCancelDataErasureErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "CustomerEdge", "description": "An auto-generated type which holds one Customer and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "CustomerEmailMarketingConsentUpdateUserError", "description": "An error that occurs during the execution of CustomerEmailMarketingConsentUpdate.", "fields_and_connections": [{"name": "code", "type": "CustomerEmailMarketingConsentUpdateUserErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "CustomerMergeUserError", "description": "An error that occurs while merging two customers.", "fields_and_connections": [{"name": "code", "type": "CustomerMergeErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "CustomerMomentEdge", "description": "An auto-generated type which holds one CustomerMoment and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "CustomerPaymentMethodCreateFromDuplicationDataUserError", "description": "An error that occurs during the execution of CustomerPaymentMethodCreateFromDuplicationData.", "fields_and_connections": [{"name": "code", "type": "CustomerPaymentMethodCreateFromDuplicationDataUserErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "CustomerPaymentMethodEdge", "description": "An auto-generated type which holds one CustomerPaymentMethod and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "CustomerPaymentMethodGetDuplicationDataUserError", "description": "An error that occurs during the execution of CustomerPaymentMethodGetDuplicationData.", "fields_and_connections": [{"name": "code", "type": "CustomerPaymentMethodGetDuplicationDataUserErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "CustomerPaymentMethodGetUpdateUrlUserError", "description": "An error that occurs during the execution of CustomerPaymentMethodGetUpdateUrl.", "fields_and_connections": [{"name": "code", "type": "CustomerPaymentMethodGetUpdateUrlUserErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "CustomerPaymentMethodRemoteUserError", "description": "Represents an error in the input of a mutation.", "fields_and_connections": [{"name": "code", "type": "CustomerPaymentMethodRemoteUserErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "CustomerPaymentMethodUserError", "description": "Represents an error in the input of a mutation.", "fields_and_connections": [{"name": "code", "type": "CustomerPaymentMethodUserErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "CustomerRequestDataErasureUserError", "description": "An error that occurs when requesting a customer data erasure.", "fields_and_connections": [{"name": "code", "type": "CustomerRequestDataErasureErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "CustomerSegmentMemberEdge", "description": "An auto-generated type which holds one CustomerSegmentMember and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "CustomerSegmentMembersQueryUserError", "description": "Represents a customer segment members query custom error.", "fields_and_connections": [{"name": "code", "type": "CustomerSegmentMembersQueryUserErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "CustomerSendAccountInviteEmailUserError", "description": "Defines errors for customerSendAccountInviteEmail mutation.", "fields_and_connections": [{"name": "code", "type": "CustomerSendAccountInviteEmailUserErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "CustomerSetUserError", "description": "Defines errors for CustomerSet mutation.", "fields_and_connections": [{"name": "code", "type": "CustomerSetUserErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "CustomerVisitProductInfoEdge", "description": "An auto-generated type which holds one CustomerVisitProductInfo and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "DataSaleOptOutUserError", "description": "An error that occurs during the execution of DataSaleOptOut.", "fields_and_connections": [{"name": "code", "type": "DataSaleOptOutUserErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "DelegateAccessTokenCreateUserError", "description": "An error that occurs during the execution of DelegateAccessTokenCreate.", "fields_and_connections": [{"name": "code", "type": "DelegateAccessTokenCreateUserErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "DelegateAccessTokenDestroyUserError", "description": "An error that occurs during the execution of DelegateAccessTokenDestroy.", "fields_and_connections": [{"name": "code", "type": "DelegateAccessTokenDestroyUserErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "DeletionEventEdge", "description": "An auto-generated type which holds one DeletionEvent and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "DeliveryCarrierServiceEdge", "description": "An auto-generated type which holds one DeliveryCarrierService and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "DeliveryCustomizationEdge", "description": "An auto-generated type which holds one DeliveryCustomization and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "DeliveryLocationGroupZoneEdge", "description": "An auto-generated type which holds one DeliveryLocationGroupZone and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "DeliveryMethodDefinitionEdge", "description": "An auto-generated type which holds one DeliveryMethodDefinition and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "DeliveryProfileEdge", "description": "An auto-generated type which holds one DeliveryProfile and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "DeliveryProfileItemEdge", "description": "An auto-generated type which holds one DeliveryProfileItem and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "DeliveryPromiseParticipantEdge", "description": "An auto-generated type which holds one DeliveryPromiseParticipant and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "DeliveryPromiseProviderUpsertUserError", "description": "An error that occurs during the execution of DeliveryPromiseProviderUpsert.", "fields_and_connections": [{"name": "code", "type": "DeliveryPromiseProviderUpsertUserErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "DiscountAllocationEdge", "description": "An auto-generated type which holds one DiscountAllocation and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "DiscountApplicationEdge", "description": "An auto-generated type which holds one DiscountApplication and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "DiscountAutomaticEdge", "description": "An auto-generated type which holds one DiscountAutomatic and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "DiscountAutomaticNodeEdge", "description": "An auto-generated type which holds one DiscountAutomaticNode and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "DiscountCodeNodeEdge", "description": "An auto-generated type which holds one DiscountCodeNode and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "DiscountNodeEdge", "description": "An auto-generated type which holds one DiscountNode and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "DiscountRedeemCodeBulkCreationCodeEdge", "description": "An auto-generated type which holds one DiscountRedeemCodeBulkCreationCode and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "DiscountRedeemCodeEdge", "description": "An auto-generated type which holds one DiscountRedeemCode and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "DiscountUserError", "description": "An error that occurs during the execution of a discount mutation.", "fields_and_connections": [{"name": "code", "type": "DiscountErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "DisputeEvidenceUpdateUserError", "description": "An error that occurs during the execution of DisputeEvidenceUpdate.", "fields_and_connections": [{"name": "code", "type": "DisputeEvidenceUpdateUserErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "DraftOrderEdge", "description": "An auto-generated type which holds one DraftOrder and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "DraftOrderLineItemEdge", "description": "An auto-generated type which holds one DraftOrderLineItem and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "ErrorsServerPixelUserError", "description": "An error that occurs during the execution of a server pixel mutation.", "fields_and_connections": [{"name": "code", "type": "ErrorsServerPixelUserErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "ErrorsWebPixelUserError", "description": "An error that occurs during the execution of a web pixel mutation.", "fields_and_connections": [{"name": "code", "type": "ErrorsWebPixelUserErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "EventEdge", "description": "An auto-generated type which holds one Event and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "ExchangeLineItemEdge", "description": "An auto-generated type which holds one ExchangeLineItem and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "FileEdge", "description": "An auto-generated type which holds one File and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "FilesUserError", "description": "An error that happens during the execution of a Files API query or mutation.", "fields_and_connections": [{"name": "code", "type": "FilesErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "FulfillmentConstraintRuleCreateUserError", "description": "An error that occurs during the execution of FulfillmentConstraintRuleCreate.", "fields_and_connections": [{"name": "code", "type": "FulfillmentConstraintRuleCreateUserErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "FulfillmentConstraintRuleDeleteUserError", "description": "An error that occurs during the execution of FulfillmentConstraintRuleDelete.", "fields_and_connections": [{"name": "code", "type": "FulfillmentConstraintRuleDeleteUserErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "FulfillmentConstraintRuleUpdateUserError", "description": "An error that occurs during the execution of FulfillmentConstraintRuleUpdate.", "fields_and_connections": [{"name": "code", "type": "FulfillmentConstraintRuleUpdateUserErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "FulfillmentEdge", "description": "An auto-generated type which holds one Fulfillment and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "FulfillmentEventEdge", "description": "An auto-generated type which holds one FulfillmentEvent and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "FulfillmentLineItemEdge", "description": "An auto-generated type which holds one FulfillmentLineItem and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "FulfillmentOrderEdge", "description": "An auto-generated type which holds one FulfillmentOrder and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "FulfillmentOrderHoldUserError", "description": "An error that occurs during the execution of FulfillmentOrderHold.", "fields_and_connections": [{"name": "code", "type": "FulfillmentOrderHoldUserErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "FulfillmentOrderLineItemEdge", "description": "An auto-generated type which holds one FulfillmentOrderLineItem and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "FulfillmentOrderLineItemsPreparedForPickupUserError", "description": "An error that occurs during the execution of FulfillmentOrderLineItemsPreparedForPickup.", "fields_and_connections": [{"name": "code", "type": "FulfillmentOrderLineItemsPreparedForPickupUserErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "FulfillmentOrderLocationForMoveEdge", "description": "An auto-generated type which holds one FulfillmentOrderLocationForMove and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "FulfillmentOrderMerchantRequestEdge", "description": "An auto-generated type which holds one FulfillmentOrderMerchantRequest and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "FulfillmentOrderMergeUserError", "description": "An error that occurs during the execution of FulfillmentOrderMerge.", "fields_and_connections": [{"name": "code", "type": "FulfillmentOrderMergeUserErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "FulfillmentOrderReleaseHoldUserError", "description": "An error that occurs during the execution of FulfillmentOrderReleaseHold.", "fields_and_connections": [{"name": "code", "type": "FulfillmentOrderReleaseHoldUserErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "FulfillmentOrderRescheduleUserError", "description": "An error that occurs during the execution of FulfillmentOrderReschedule.", "fields_and_connections": [{"name": "code", "type": "FulfillmentOrderRescheduleUserErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "FulfillmentOrderSplitUserError", "description": "An error that occurs during the execution of FulfillmentOrderSplit.", "fields_and_connections": [{"name": "code", "type": "FulfillmentOrderSplitUserErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "FulfillmentOrdersSetFulfillmentDeadlineUserError", "description": "An error that occurs during the execution of FulfillmentOrdersSetFulfillmentDeadline.", "fields_and_connections": [{"name": "code", "type": "FulfillmentOrdersSetFulfillmentDeadlineUserErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "GiftCardDeactivateUserError", "description": "An error that occurs during the execution of GiftCardDeactivate.", "fields_and_connections": [{"name": "code", "type": "GiftCardDeactivateUserErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "GiftCardEdge", "description": "An auto-generated type which holds one GiftCard and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "GiftCardSendNotificationToCustomerUserError", "description": "An error that occurs during the execution of GiftCardSendNotificationToCustomer.", "fields_and_connections": [{"name": "code", "type": "GiftCardSendNotificationToCustomerUserErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "GiftCardSendNotificationToRecipientUserError", "description": "An error that occurs during the execution of GiftCardSendNotificationToRecipient.", "fields_and_connections": [{"name": "code", "type": "GiftCardSendNotificationToRecipientUserErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "GiftCardTransactionEdge", "description": "An auto-generated type which holds one GiftCardTransaction and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "GiftCardTransactionUserError", "description": "Represents an error that happens during the execution of a gift card transaction mutation.", "fields_and_connections": [{"name": "code", "type": "GiftCardTransactionUserErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "GiftCardUserError", "description": "Represents an error that happens during the execution of a gift card mutation.", "fields_and_connections": [{"name": "code", "type": "GiftCardErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "ImageEdge", "description": "An auto-generated type which holds one Image and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "InventoryAdjustQuantitiesUserError", "description": "An error that occurs during the execution of InventoryAdjustQuantities.", "fields_and_connections": [{"name": "code", "type": "InventoryAdjustQuantitiesUserErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "InventoryBulkToggleActivationUserError", "description": "An error that occurred while setting the activation status of an inventory item.", "fields_and_connections": [{"name": "code", "type": "InventoryBulkToggleActivationUserErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "InventoryItemEdge", "description": "An auto-generated type which holds one InventoryItem and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "InventoryLevelEdge", "description": "An auto-generated type which holds one InventoryLevel and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "InventoryMoveQuantitiesUserError", "description": "An error that occurs during the execution of InventoryMoveQuantities.", "fields_and_connections": [{"name": "code", "type": "InventoryMoveQuantitiesUserErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "InventoryScheduledChangeEdge", "description": "An auto-generated type which holds one InventoryScheduledChange and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "InventorySetOnHandQuantitiesUserError", "description": "An error that occurs during the execution of InventorySetOnHandQuantities.", "fields_and_connections": [{"name": "code", "type": "InventorySetOnHandQuantitiesUserErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "InventorySetQuantitiesUserError", "description": "An error that occurs during the execution of InventorySetQuantities.", "fields_and_connections": [{"name": "code", "type": "InventorySetQuantitiesUserErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "InventorySetScheduledChangesUserError", "description": "An error that occurs during the execution of InventorySetScheduledChanges.", "fields_and_connections": [{"name": "code", "type": "InventorySetScheduledChangesUserErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "LineItemEdge", "description": "An auto-generated type which holds one LineItem and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "LocalizationExtensionEdge", "description": "An auto-generated type which holds one LocalizationExtension and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "LocalizedFieldEdge", "description": "An auto-generated type which holds one LocalizedField and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "LocationActivateUserError", "description": "An error that occurs while activating a location.", "fields_and_connections": [{"name": "code", "type": "LocationActivateUserErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "LocationAddUserError", "description": "An error that occurs while adding a location.", "fields_and_connections": [{"name": "code", "type": "LocationAddUserErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "LocationDeactivateUserError", "description": "The possible errors that can be returned when executing the locationDeactivate mutation.", "fields_and_connections": [{"name": "code", "type": "LocationDeactivateUserErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "LocationDeleteUserError", "description": "An error that occurs while deleting a location.", "fields_and_connections": [{"name": "code", "type": "LocationDeleteUserErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "LocationEdge", "description": "An auto-generated type which holds one Location and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "LocationEditUserError", "description": "An error that occurs while editing a location.", "fields_and_connections": [{"name": "code", "type": "LocationEditUserErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "MailingAddressEdge", "description": "An auto-generated type which holds one MailingAddress and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "MarketCatalogEdge", "description": "An auto-generated type which holds one MarketCatalog and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "MarketCurrencySettingsUserError", "description": "Error codes for failed market multi-currency operations.", "fields_and_connections": [{"name": "code", "type": "MarketCurrencySettingsUserErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "MarketEdge", "description": "An auto-generated type which holds one Market and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "MarketingActivityEdge", "description": "An auto-generated type which holds one MarketingActivity and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "MarketingActivityUserError", "description": "An error that occurs during the execution of marketing activity and engagement mutations.", "fields_and_connections": [{"name": "code", "type": "MarketingActivityUserErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "MarketingEventEdge", "description": "An auto-generated type which holds one MarketingEvent and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "MarketLocalizableResourceEdge", "description": "An auto-generated type which holds one MarketLocalizableResource and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "MarketRegionEdge", "description": "An auto-generated type which holds one MarketRegion and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "MarketUserError", "description": "Defines errors encountered while managing a Market.", "fields_and_connections": [{"name": "code", "type": "MarketUserErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "MarketWebPresenceEdge", "description": "An auto-generated type which holds one MarketWebPresence and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "MediaEdge", "description": "An auto-generated type which holds one Media and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "MediaUserError", "description": "Represents an error that happens during execution of a Media query or mutation.", "fields_and_connections": [{"name": "code", "type": "MediaUserErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "MenuCreateUserError", "description": "An error that occurs during the execution of MenuCreate.", "fields_and_connections": [{"name": "code", "type": "MenuCreateUserErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "MenuDeleteUserError", "description": "An error that occurs during the execution of MenuDelete.", "fields_and_connections": [{"name": "code", "type": "MenuDeleteUserErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "MenuEdge", "description": "An auto-generated type which holds one Menu and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "MenuUpdateUserError", "description": "An error that occurs during the execution of MenuUpdate.", "fields_and_connections": [{"name": "code", "type": "MenuUpdateUserErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "MetafieldDefinitionConstraintValueEdge", "description": "An auto-generated type which holds one MetafieldDefinitionConstraintValue and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "MetafieldDefinitionCreateUserError", "description": "An error that occurs during the execution of MetafieldDefinitionCreate.", "fields_and_connections": [{"name": "code", "type": "MetafieldDefinitionCreateUserErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "MetafieldDefinitionDeleteUserError", "description": "An error that occurs during the execution of MetafieldDefinitionDelete.", "fields_and_connections": [{"name": "code", "type": "MetafieldDefinitionDeleteUserErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "MetafieldDefinitionEdge", "description": "An auto-generated type which holds one MetafieldDefinition and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "MetafieldDefinitionPinUserError", "description": "An error that occurs during the execution of MetafieldDefinitionPin.", "fields_and_connections": [{"name": "code", "type": "MetafieldDefinitionPinUserErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "MetafieldDefinitionUnpinUserError", "description": "An error that occurs during the execution of MetafieldDefinitionUnpin.", "fields_and_connections": [{"name": "code", "type": "MetafieldDefinitionUnpinUserErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "MetafieldDefinitionUpdateUserError", "description": "An error that occurs during the execution of MetafieldDefinitionUpdate.", "fields_and_connections": [{"name": "code", "type": "MetafieldDefinitionUpdateUserErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "MetafieldEdge", "description": "An auto-generated type which holds one Metafield and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "MetafieldReferenceEdge", "description": "An auto-generated type which holds one MetafieldReference and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "MetafieldRelationEdge", "description": "An auto-generated type which holds one MetafieldRelation and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "MetafieldsSetUserError", "description": "An error that occurs during the execution of MetafieldsSet.", "fields_and_connections": [{"name": "code", "type": "MetafieldsSetUserErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "MetaobjectDefinitionEdge", "description": "An auto-generated type which holds one MetaobjectDefinition and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "MetaobjectEdge", "description": "An auto-generated type which holds one Metaobject and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "MetaobjectUserError", "description": "Defines errors encountered while managing metaobject resources.", "fields_and_connections": [{"name": "code", "type": "MetaobjectUserErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "MobilePlatformApplicationEdge", "description": "An auto-generated type which holds one MobilePlatformApplication and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "MobilePlatformApplicationUserError", "description": "Represents an error in the input of a mutation.", "fields_and_connections": [{"name": "code", "type": "MobilePlatformApplicationUserErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "OnlineStoreThemeEdge", "description": "An auto-generated type which holds one OnlineStoreTheme and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "OnlineStoreThemeFileEdge", "description": "An auto-generated type which holds one OnlineStoreThemeFile and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "OrderAdjustmentEdge", "description": "An auto-generated type which holds one OrderAdjustment and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "OrderCancelUserError", "description": "Errors related to order cancellation.", "fields_and_connections": [{"name": "code", "type": "OrderCancelUserErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "OrderCreateMandatePaymentUserError", "description": "An error that occurs during the execution of OrderCreateMandatePayment.", "fields_and_connections": [{"name": "code", "type": "OrderCreateMandatePaymentUserErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "OrderCreateUserError", "description": "An error that occurs during the execution of OrderCreate.", "fields_and_connections": [{"name": "code", "type": "OrderCreateUserErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "OrderDeleteUserError", "description": "Errors related to deleting an order.", "fields_and_connections": [{"name": "code", "type": "OrderDeleteUserErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "OrderEdge", "description": "An auto-generated type which holds one Order and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "OrderEditAddShippingLineUserError", "description": "An error that occurs during the execution of OrderEditAddShippingLine.", "fields_and_connections": [{"name": "code", "type": "OrderEditAddShippingLineUserErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "OrderEditRemoveDiscountUserError", "description": "An error that occurs during the execution of OrderEditRemoveDiscount.", "fields_and_connections": [{"name": "code", "type": "OrderEditRemoveDiscountUserErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "OrderEditRemoveShippingLineUserError", "description": "An error that occurs during the execution of OrderEditRemoveShippingLine.", "fields_and_connections": [{"name": "code", "type": "OrderEditRemoveShippingLineUserErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "OrderEditUpdateDiscountUserError", "description": "An error that occurs during the execution of OrderEditUpdateDiscount.", "fields_and_connections": [{"name": "code", "type": "OrderEditUpdateDiscountUserErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "OrderEditUpdateShippingLineUserError", "description": "An error that occurs during the execution of OrderEditUpdateShippingLine.", "fields_and_connections": [{"name": "code", "type": "OrderEditUpdateShippingLineUserErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "OrderInvoiceSendUserError", "description": "An error that occurs during the execution of OrderInvoiceSend.", "fields_and_connections": [{"name": "code", "type": "OrderInvoiceSendUserErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "OrderRiskAssessmentCreateUserError", "description": "An error that occurs during the execution of OrderRiskAssessmentCreate.", "fields_and_connections": [{"name": "code", "type": "OrderRiskAssessmentCreateUserErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "OrderStagedChangeEdge", "description": "An auto-generated type which holds one OrderStagedChange and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "OrderTransactionEdge", "description": "An auto-generated type which holds one OrderTransaction and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "PageCreateUserError", "description": "An error that occurs during the execution of PageCreate.", "fields_and_connections": [{"name": "code", "type": "PageCreateUserErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "PageDeleteUserError", "description": "An error that occurs during the execution of PageDelete.", "fields_and_connections": [{"name": "code", "type": "PageDeleteUserErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "PageEdge", "description": "An auto-generated type which holds one Page and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "PageUpdateUserError", "description": "An error that occurs during the execution of PageUpdate.", "fields_and_connections": [{"name": "code", "type": "PageUpdateUserErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "PaymentCustomizationEdge", "description": "An auto-generated type which holds one PaymentCustomization and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "PaymentReminderSendUserError", "description": "An error that occurs during the execution of PaymentReminderSend.", "fields_and_connections": [{"name": "code", "type": "PaymentReminderSendUserErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "PaymentScheduleEdge", "description": "An auto-generated type which holds one PaymentSchedule and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "PaymentTermsCreateUserError", "description": "An error that occurs during the execution of PaymentTermsCreate.", "fields_and_connections": [{"name": "code", "type": "PaymentTermsCreateUserErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "PaymentTermsDeleteUserError", "description": "An error that occurs during the execution of PaymentTermsDelete.", "fields_and_connections": [{"name": "code", "type": "PaymentTermsDeleteUserErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "PaymentTermsUpdateUserError", "description": "An error that occurs during the execution of PaymentTermsUpdate.", "fields_and_connections": [{"name": "code", "type": "PaymentTermsUpdateUserErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "PriceListEdge", "description": "An auto-generated type which holds one PriceList and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "PriceListFixedPricesByProductBulkUpdateUserError", "description": "Error codes for failed price list fixed prices by product bulk update operations.", "fields_and_connections": [{"name": "code", "type": "PriceListFixedPricesByProductBulkUpdateUserErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "PriceListPriceEdge", "description": "An auto-generated type which holds one PriceListPrice and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "PriceListPriceUserError", "description": "An error for a failed price list price operation.", "fields_and_connections": [{"name": "code", "type": "PriceListPriceUserErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "PriceListUserError", "description": "Error codes for failed contextual pricing operations.", "fields_and_connections": [{"name": "code", "type": "PriceListUserErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "PriceRuleDiscountCodeEdge", "description": "An auto-generated type which holds one PriceRuleDiscountCode and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "PrivacyFeaturesDisableUserError", "description": "An error that occurs during the execution of PrivacyFeaturesDisable.", "fields_and_connections": [{"name": "code", "type": "PrivacyFeaturesDisableUserErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "ProductBundleComponentEdge", "description": "An auto-generated type which holds one ProductBundleComponent and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "ProductBundleMutationUserError", "description": "Defines errors encountered while managing a product bundle.", "fields_and_connections": [{"name": "code", "type": "ProductBundleMutationUserErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "ProductChangeStatusUserError", "description": "An error that occurs during the execution of ProductChangeStatus.", "fields_and_connections": [{"name": "code", "type": "ProductChangeStatusUserErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "ProductEdge", "description": "An auto-generated type which holds one Product and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "ProductFeedCreateUserError", "description": "An error that occurs during the execution of ProductFeedCreate.", "fields_and_connections": [{"name": "code", "type": "ProductFeedCreateUserErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "ProductFeedDeleteUserError", "description": "An error that occurs during the execution of ProductFeedDelete.", "fields_and_connections": [{"name": "code", "type": "ProductFeedDeleteUserErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "ProductFeedEdge", "description": "An auto-generated type which holds one ProductFeed and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "ProductFullSyncUserError", "description": "An error that occurs during the execution of ProductFullSync.", "fields_and_connections": [{"name": "code", "type": "ProductFullSyncUserErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "ProductOptionsCreateUserError", "description": "Error codes for failed ProductOptionsCreate mutation.", "fields_and_connections": [{"name": "code", "type": "ProductOptionsCreateUserErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "ProductOptionsDeleteUserError", "description": "Error codes for failed ProductOptionsDelete mutation.", "fields_and_connections": [{"name": "code", "type": "ProductOptionsDeleteUserErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "ProductOptionsReorderUserError", "description": "Error codes for failed ProductOptionsReorder mutation.", "fields_and_connections": [{"name": "code", "type": "ProductOptionsReorderUserErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "ProductOptionUpdateUserError", "description": "Error codes for failed ProductOptionUpdate mutation.", "fields_and_connections": [{"name": "code", "type": "ProductOptionUpdateUserErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "ProductPublicationEdge", "description": "An auto-generated type which holds one ProductPublication and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "ProductSetUserError", "description": "Defines errors for ProductSet mutation.", "fields_and_connections": [{"name": "code", "type": "ProductSetUserErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "ProductVariantComponentEdge", "description": "An auto-generated type which holds one ProductVariantComponent and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "ProductVariantEdge", "description": "An auto-generated type which holds one ProductVariant and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "ProductVariantPricePairEdge", "description": "An auto-generated type which holds one ProductVariantPricePair and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "ProductVariantRelationshipBulkUpdateUserError", "description": "An error that occurs during the execution of ProductVariantRelationshipBulkUpdate.", "fields_and_connections": [{"name": "code", "type": "ProductVariantRelationshipBulkUpdateUserErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "ProductVariantsBulkCreateUserError", "description": "Error codes for failed product variant bulk create mutations.", "fields_and_connections": [{"name": "code", "type": "ProductVariantsBulkCreateUserErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "ProductVariantsBulkDeleteUserError", "description": "Error codes for failed bulk variant delete mutations.", "fields_and_connections": [{"name": "code", "type": "ProductVariantsBulkDeleteUserErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "ProductVariantsBulkReorderUserError", "description": "Error codes for failed bulk product variants reorder operation.", "fields_and_connections": [{"name": "code", "type": "ProductVariantsBulkReorderUserErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "ProductVariantsBulkUpdateUserError", "description": "Error codes for failed variant bulk update mutations.", "fields_and_connections": [{"name": "code", "type": "ProductVariantsBulkUpdateUserErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "PublicationEdge", "description": "An auto-generated type which holds one Publication and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "PublicationUserError", "description": "Defines errors encountered while managing a publication.", "fields_and_connections": [{"name": "code", "type": "PublicationUserErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "PubSubWebhookSubscriptionCreateUserError", "description": "An error that occurs during the execution of PubSubWebhookSubscriptionCreate.", "fields_and_connections": [{"name": "code", "type": "PubSubWebhookSubscriptionCreateUserErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "PubSubWebhookSubscriptionUpdateUserError", "description": "An error that occurs during the execution of PubSubWebhookSubscriptionUpdate.", "fields_and_connections": [{"name": "code", "type": "PubSubWebhookSubscriptionUpdateUserErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "QuantityPriceBreakEdge", "description": "An auto-generated type which holds one QuantityPriceBreak and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "QuantityPricingByVariantUserError", "description": "Error codes for failed volume pricing operations.", "fields_and_connections": [{"name": "code", "type": "QuantityPricingByVariantUserErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "QuantityRuleEdge", "description": "An auto-generated type which holds one QuantityRule and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "QuantityRuleUserError", "description": "An error for a failed quantity rule operation.", "fields_and_connections": [{"name": "code", "type": "QuantityRuleUserErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "RefundEdge", "description": "An auto-generated type which holds one Refund and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "RefundLineItemEdge", "description": "An auto-generated type which holds one RefundLineItem and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "RefundShippingLineEdge", "description": "An auto-generated type which holds one RefundShippingLine and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "ResourcePublicationEdge", "description": "An auto-generated type which holds one ResourcePublication and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "ResourcePublicationV2Edge", "description": "An auto-generated type which holds one ResourcePublicationV2 and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "ReturnableFulfillmentEdge", "description": "An auto-generated type which holds one ReturnableFulfillment and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "ReturnableFulfillmentLineItemEdge", "description": "An auto-generated type which holds one ReturnableFulfillmentLineItem and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "ReturnEdge", "description": "An auto-generated type which holds one Return and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "ReturnLineItemTypeEdge", "description": "An auto-generated type which holds one ReturnLineItemType and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "ReturnUserError", "description": "An error that occurs during the execution of a return mutation.", "fields_and_connections": [{"name": "code", "type": "ReturnErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "ReverseDeliveryEdge", "description": "An auto-generated type which holds one ReverseDelivery and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "ReverseDeliveryLineItemEdge", "description": "An auto-generated type which holds one ReverseDeliveryLineItem and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "ReverseFulfillmentOrderEdge", "description": "An auto-generated type which holds one ReverseFulfillmentOrder and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "ReverseFulfillmentOrderLineItemEdge", "description": "An auto-generated type which holds one ReverseFulfillmentOrderLineItem and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "SaleEdge", "description": "An auto-generated type which holds one Sale and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "SalesAgreementEdge", "description": "An auto-generated type which holds one SalesAgreement and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "SavedSearchEdge", "description": "An auto-generated type which holds one SavedSearch and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "ScriptTagEdge", "description": "An auto-generated type which holds one ScriptTag and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "SearchResultEdge", "description": "An auto-generated type which holds one SearchResult and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "SegmentEdge", "description": "An auto-generated type which holds one Segment and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "SegmentFilterEdge", "description": "An auto-generated type which holds one SegmentFilter and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "SegmentMigrationEdge", "description": "An auto-generated type which holds one SegmentMigration and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "SegmentValueEdge", "description": "An auto-generated type which holds one SegmentValue and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "SellingPlanEdge", "description": "An auto-generated type which holds one SellingPlan and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "SellingPlanGroupEdge", "description": "An auto-generated type which holds one SellingPlanGroup and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "SellingPlanGroupUserError", "description": "Represents a selling plan group custom error.", "fields_and_connections": [{"name": "code", "type": "SellingPlanGroupUserErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "ShippingLineEdge", "description": "An auto-generated type which holds one ShippingLine and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "ShopifyFunctionEdge", "description": "An auto-generated type which holds one ShopifyFunction and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "ShopifyPaymentsBalanceTransactionEdge", "description": "An auto-generated type which holds one ShopifyPaymentsBalanceTransaction and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "ShopifyPaymentsBankAccountEdge", "description": "An auto-generated type which holds one ShopifyPaymentsBankAccount and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "ShopifyPaymentsDisputeEdge", "description": "An auto-generated type which holds one ShopifyPaymentsDispute and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "ShopifyPaymentsPayoutAlternateCurrencyCreateUserError", "description": "An error that occurs during the execution of ShopifyPaymentsPayoutAlternateCurrencyCreate.", "fields_and_connections": [{"name": "code", "type": "ShopifyPaymentsPayoutAlternateCurrencyCreateUserErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "ShopifyPaymentsPayoutEdge", "description": "An auto-generated type which holds one ShopifyPaymentsPayout and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "ShopPolicyUserError", "description": "An error that occurs during the execution of a shop policy mutation.", "fields_and_connections": [{"name": "code", "type": "ShopPolicyErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "ShopResourceFeedbackCreateUserError", "description": "An error that occurs during the execution of ShopResourceFeedbackCreate.", "fields_and_connections": [{"name": "code", "type": "ShopResourceFeedbackCreateUserErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "StaffMemberEdge", "description": "An auto-generated type which holds one StaffMember and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "StandardMetafieldDefinitionEnableUserError", "description": "An error that occurs during the execution of StandardMetafieldDefinitionEnable.", "fields_and_connections": [{"name": "code", "type": "StandardMetafieldDefinitionEnableUserErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "StandardMetafieldDefinitionTemplateEdge", "description": "An auto-generated type which holds one StandardMetafieldDefinitionTemplate and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "StoreCreditAccountCreditUserError", "description": "An error that occurs during the execution of StoreCreditAccountCredit.", "fields_and_connections": [{"name": "code", "type": "StoreCreditAccountCreditUserErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "StoreCreditAccountDebitUserError", "description": "An error that occurs during the execution of StoreCreditAccountDebit.", "fields_and_connections": [{"name": "code", "type": "StoreCreditAccountDebitUserErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "StoreCreditAccountEdge", "description": "An auto-generated type which holds one StoreCreditAccount and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "StoreCreditAccountTransactionEdge", "description": "An auto-generated type which holds one StoreCreditAccountTransaction and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "StorefrontAccessTokenEdge", "description": "An auto-generated type which holds one StorefrontAccessToken and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "StringEdge", "description": "An auto-generated type which holds one String and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "SubscriptionBillingAttemptEdge", "description": "An auto-generated type which holds one SubscriptionBillingAttempt and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "SubscriptionBillingCycleBulkUserError", "description": "Represents an error that happens during the execution of subscriptionBillingCycles mutations.", "fields_and_connections": [{"name": "code", "type": "SubscriptionBillingCycleBulkUserErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "SubscriptionBillingCycleEdge", "description": "An auto-generated type which holds one SubscriptionBillingCycle and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "SubscriptionBillingCycleSkipUserError", "description": "An error that occurs during the execution of SubscriptionBillingCycleSkip.", "fields_and_connections": [{"name": "code", "type": "SubscriptionBillingCycleSkipUserErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "SubscriptionBillingCycleUnskipUserError", "description": "An error that occurs during the execution of SubscriptionBillingCycleUnskip.", "fields_and_connections": [{"name": "code", "type": "SubscriptionBillingCycleUnskipUserErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "SubscriptionBillingCycleUserError", "description": "The possible errors for a subscription billing cycle.", "fields_and_connections": [{"name": "code", "type": "SubscriptionBillingCycleErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "SubscriptionContractEdge", "description": "An auto-generated type which holds one SubscriptionContract and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "SubscriptionContractStatusUpdateUserError", "description": "Represents a subscription contract status update error.", "fields_and_connections": [{"name": "code", "type": "SubscriptionContractStatusUpdateErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "SubscriptionContractUserError", "description": "Represents a Subscription Contract error.", "fields_and_connections": [{"name": "code", "type": "SubscriptionContractErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "SubscriptionDiscountEdge", "description": "An auto-generated type which holds one SubscriptionDiscount and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "SubscriptionDraftUserError", "description": "Represents a Subscription Draft error.", "fields_and_connections": [{"name": "code", "type": "SubscriptionDraftErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "SubscriptionLineEdge", "description": "An auto-generated type which holds one SubscriptionLine and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "SubscriptionManualDiscountEdge", "description": "An auto-generated type which holds one SubscriptionManualDiscount and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "TaxAppConfigureUserError", "description": "An error that occurs during the execution of TaxAppConfigure.", "fields_and_connections": [{"name": "code", "type": "TaxAppConfigureUserErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "TaxonomyCategoryAttributeEdge", "description": "An auto-generated type which holds one TaxonomyCategoryAttribute and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "TaxonomyCategoryEdge", "description": "An auto-generated type which holds one TaxonomyCategory and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "TaxonomyValueEdge", "description": "An auto-generated type which holds one TaxonomyValue and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "TenderTransactionEdge", "description": "An auto-generated type which holds one TenderTransaction and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "ThemeCreateUserError", "description": "An error that occurs during the execution of ThemeCreate.", "fields_and_connections": [{"name": "code", "type": "ThemeCreateUserErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "ThemeDeleteUserError", "description": "An error that occurs during the execution of ThemeDelete.", "fields_and_connections": [{"name": "code", "type": "ThemeDeleteUserErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "ThemePublishUserError", "description": "An error that occurs during the execution of ThemePublish.", "fields_and_connections": [{"name": "code", "type": "ThemePublishUserErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "ThemeUpdateUserError", "description": "An error that occurs during the execution of ThemeUpdate.", "fields_and_connections": [{"name": "code", "type": "ThemeUpdateUserErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "TransactionVoidUserError", "description": "An error that occurs during the execution of TransactionVoid.", "fields_and_connections": [{"name": "code", "type": "TransactionVoidUserErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "TranslatableResourceEdge", "description": "An auto-generated type which holds one TranslatableResource and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "TranslationUserError", "description": "Represents an error that happens during the execution of a translation mutation.", "fields_and_connections": [{"name": "code", "type": "TranslationErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "UrlRedirectBulkDeleteByIdsUserError", "description": "An error that occurs during the execution of UrlRedirectBulkDeleteByIds.", "fields_and_connections": [{"name": "code", "type": "UrlRedirectBulkDeleteByIdsUserErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "UrlRedirectBulkDeleteBySavedSearchUserError", "description": "An error that occurs during the execution of UrlRedirectBulkDeleteBySavedSearch.", "fields_and_connections": [{"name": "code", "type": "UrlRedirectBulkDeleteBySavedSearchUserErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "UrlRedirectBulkDeleteBySearchUserError", "description": "An error that occurs during the execution of UrlRedirectBulkDeleteBySearch.", "fields_and_connections": [{"name": "code", "type": "UrlRedirectBulkDeleteBySearchUserErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "UrlRedirectEdge", "description": "An auto-generated type which holds one UrlRedirect and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "UrlRedirectImportUserError", "description": "Represents an error that happens during execution of a redirect import mutation.", "fields_and_connections": [{"name": "code", "type": "UrlRedirectImportErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "UrlRedirectUserError", "description": "Represents an error that happens during execution of a redirect mutation.", "fields_and_connections": [{"name": "code", "type": "UrlRedirectErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "UserError", "description": "Represents an error in the input of a mutation.", "fields_and_connections": [{"name": "field", "type": "[String!]", "description": "The path to the input field that caused the error.", "not_nullable": true}], "examples": []}, {"name": "ValidationEdge", "description": "An auto-generated type which holds one Validation and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}, {"name": "ValidationUserError", "description": "An error that occurs during the execution of a validation mutation.", "fields_and_connections": [{"name": "code", "type": "ValidationUserErrorCode", "description": "The error code.", "not_nullable": true}], "examples": []}, {"name": "WebhookSubscriptionEdge", "description": "An auto-generated type which holds one WebhookSubscription and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}], "examples": []}]}]}