{"categories": [{"name": "Access", "queries": [], "mutations": [{"name": "appRevokeAccessScopes", "description": "Revokes access scopes previously granted for an app installation.", "arguments": [{"name": "scopes", "type": "[String!]!", "required": false, "description": "The list of scope handles to revoke."}], "returns": [], "examples": []}, {"name": "delegateAccessTokenCreate", "description": "Creates a delegate access token.\nTo learn more about creating delegate access tokens, refer to\nDelegate OAuth access tokens to subsystems.", "arguments": [{"name": "input", "type": "DelegateAccessTokenInput!", "required": false, "description": "The input fields for creating a delegate access token."}], "returns": [], "examples": []}, {"name": "storefrontAccessTokenCreate", "description": "Creates a storefront access token for use with the Storefront API.\nAn app can have a maximum of 100 active storefront access tokens for each shop.\nGet started with the Storefront API.", "arguments": [{"name": "input", "type": "StorefrontAccessTokenInput!", "required": false, "description": "Provides the input fields for creating a storefront access token."}], "returns": [], "examples": [{"description": "Create a Storefront Access Token", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation StorefrontAccessTokenCreate($input: StorefrontAccessTokenInput!) {\n      storefrontAccessTokenCreate(input: $input) {\n        userErrors {\n          field\n          message\n        }\n        shop {\n          id\n        }\n        storefrontAccessToken {\n          accessScopes {\n            handle\n          }\n          accessToken\n          title\n        }\n      }\n    }`,\n    \"variables\": {\n      \"input\": {\n        \"title\": \"New Storefront Access Token\"\n      }\n    },\n  },\n});\n"}, {"description": "Creates a new StorefrontAccessToken", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation storeFrontAccessTokenCreate($input: StorefrontAccessTokenInput!) {\n      storefrontAccessTokenCreate(input: $input) {\n        storefrontAccessToken {\n          id\n          accessToken\n          accessScopes {\n            handle\n          }\n          createdAt\n          title\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"input\": {\n        \"title\": \"New Storefront Access Token\"\n      }\n    },\n  },\n});\n"}, {"description": "storefrontAccessTokenCreate reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation StorefrontAccessTokenCreate($input: StorefrontAccessTokenInput!) {\n      storefrontAccessTokenCreate(input: $input) {\n        userErrors {\n          field\n          message\n        }\n        shop {\n          id\n        }\n        storefrontAccessToken {\n          accessScopes {\n            handle\n          }\n          accessToken\n          title\n        }\n      }\n    }`,\n    \"variables\": {\n      \"input\": {\n        \"title\": \"New Storefront Access Token\"\n      }\n    },\n  },\n});\n"}]}, {"name": "storefrontAccessTokenDelete", "description": "Deletes a storefront access token.", "arguments": [{"name": "input", "type": "StorefrontAccessTokenDeleteInput!", "required": false, "description": "Provides the input fields required to delete a storefront access token."}], "returns": [], "examples": [{"description": "Delete a Storefront Access Token.", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation storefrontAccessTokenDelete($input: StorefrontAccessTokenDeleteInput!) {\n      storefrontAccessTokenDelete(input: $input) {\n        deletedStorefrontAccessTokenId\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"input\": {\n        \"id\": \"gid://shopify/StorefrontAccessToken/55270800\"\n      }\n    },\n  },\n});\n"}, {"description": "Deletes an existing storefront access token", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation storefrontAccessTokenDelete($id: ID!) {\n      storefrontAccessTokenDelete(input: {id: $id}) {\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/StorefrontAccessToken/55270800\"\n    },\n  },\n});\n"}, {"description": "storefrontAccessTokenDelete reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation storefrontAccessTokenDelete($input: StorefrontAccessTokenDeleteInput!) {\n      storefrontAccessTokenDelete(input: $input) {\n        deletedStorefrontAccessTokenId\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"input\": {\n        \"id\": \"gid://shopify/StorefrontAccessToken/55270800\"\n      }\n    },\n  },\n});\n"}]}], "objects": [{"name": "AccessScope", "description": "The permission required to access a Shopify Admin API or Storefront API resource for a shop. Merchants grant access scopes that are requested by applications.", "fields_and_connections": [{"name": "description", "type": "appRevokeAccessScopes", "description": "Revokes access scopes previously granted for an app installation.", "not_nullable": false}], "examples": []}, {"name": "DelegateAccessToken", "description": "A token that delegates a set of scopes from the original permission.\nTo learn more about creating delegate access tokens, refer to\nDelegate OAuth access tokens to subsystems.", "fields_and_connections": [{"name": "accessScopes", "type": "delegateAccessTokenCreate", "description": "Creates a delegate access token.\nTo learn more about creating delegate access tokens, refer to\nDelegate OAuth access tokens to subsystems.", "not_nullable": false}], "examples": []}, {"name": "StorefrontAccessToken", "description": "A token that's used to delegate unauthenticated access scopes to clients that need to access\nthe unauthenticated Storefront API.\nAn app can have a maximum of 100 active storefront access\ntokens for each shop.\nGet started with the Storefront API.", "fields_and_connections": [{"name": "accessScopes", "type": "storefrontAccessTokenCreate", "description": "Creates a storefront access token for use with the Storefront API.\nAn app can have a maximum of 100 active storefront access tokens for each shop.\nGet started with the Storefront API.", "not_nullable": false}, {"name": "accessScopes", "type": "Node", "description": "List of permissions associated with the token.", "not_nullable": false}], "examples": []}]}, {"name": "Apps", "queries": [{"name": "app", "description": "Lookup an App by ID or return the currently authenticated App.", "arguments": [{"name": "id", "type": "ID", "required": false, "description": "The ID to lookup the App by."}], "returns": [], "examples": [{"description": "Get an app by its ID", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `query {\n    app(id: \"gid://shopify/App/193172482\") {\n      title\n    }\n  }`,\n});\n"}, {"description": "Get the currently authenticated app", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `query {\n    app {\n      title\n    }\n  }`,\n});\n"}, {"description": "Get the feedback field", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `query ShopFeedbackList {\n    app(id: \"gid://shopify/App/88312\") {\n      feedback {\n        messages {\n          message\n        }\n        feedbackGeneratedAt\n        state\n      }\n    }\n  }`,\n});\n"}]}, {"name": "appByHandle", "description": "Fetches app by handle.\nReturns null if the app doesn't exist.", "arguments": [{"name": "handle", "type": "String!", "required": false, "description": "Handle of the App."}], "returns": [], "examples": []}, {"name": "appByKey", "description": "Fetches an app by its client ID.\nReturns null if the app doesn't exist.", "arguments": [{"name": "apiKey", "type": "String!", "required": false, "description": "Client ID of the app."}], "returns": [], "examples": []}, {"name": "appInstallation", "description": "Lookup an AppInstallation by ID or return the AppInstallation for the currently authenticated App.", "arguments": [{"name": "id", "type": "ID", "required": false, "description": "ID used to lookup AppInstallation."}], "returns": [], "examples": [{"description": "Get a metafield attached to an app installation", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `query AppInstallationMetafield($namespace: String!, $key: String!, $ownerId: ID!) {\n      appInstallation(id: $ownerId) {\n        apiKey: metafield(namespace: $namespace, key: $key) {\n          value\n        }\n      }\n    }`,\n    \"variables\": {\n      \"namespace\": \"secret_keys\",\n      \"key\": \"api_key\",\n      \"ownerId\": \"gid://shopify/AppInstallation/1002334195\"\n    },\n  },\n});\n"}, {"description": "Get metafields attached to an app installation", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `query AppInstallationMetafields($ownerId: ID!) {\n      appInstallation(id: $ownerId) {\n        metafields(first: 3) {\n          edges {\n            node {\n              namespace\n              key\n              value\n            }\n          }\n        }\n      }\n    }`,\n    \"variables\": {\n      \"ownerId\": \"gid://shopify/AppInstallation/1002334195\"\n    },\n  },\n});\n"}, {"description": "Get the URL used to launch the application", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `query {\n    appInstallation(id: \"gid://shopify/AppInstallation/1002334195\") {\n      launchUrl\n    }\n  }`,\n});\n"}, {"description": "Get the URL used to uninstall the application", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `query {\n    appInstallation(id: \"gid://shopify/AppInstallation/688276949\") {\n      uninstallUrl\n    }\n  }`,\n});\n"}, {"description": "Get the access scopes associated with the app installation", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `query {\n    appInstallation(id: \"gid://shopify/AppInstallation/1002334195\") {\n      accessScopes {\n        handle\n        description\n      }\n    }\n  }`,\n});\n"}, {"description": "Get the active subscriptions for the app installation", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `query {\n    appInstallation(id: \"gid://shopify/AppInstallation/881878037\") {\n      activeSubscriptions {\n        id\n      }\n    }\n  }`,\n});\n"}, {"description": "Get the app associated with the installation", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `query {\n    appInstallation(id: \"gid://shopify/AppInstallation/1002334195\") {\n      app {\n        id\n      }\n    }\n  }`,\n});\n"}, {"description": "Retrieves all application credits", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `query GetAppInstallationCredits($appInstallationId: ID!) {\n      appInstallation(id: $appInstallationId) {\n        credits(first: 10) {\n          edges {\n            node {\n              amount {\n                amount\n                currencyCode\n              }\n              createdAt\n              description\n              id\n            }\n          }\n        }\n      }\n    }`,\n    \"variables\": {\n      \"appInstallationId\": \"gid://shopify/AppInstallation/236444539\"\n    },\n  },\n});\n"}]}, {"name": "appInstallations", "description": "A list of app installations. To use this query, you need to contact Shopify Support to grant your custom app the read_apps access scope. Public apps can't be granted this access scope.", "arguments": [{"name": "after", "type": "String", "required": false, "description": "The elements that come after the specified cursor."}, {"name": "before", "type": "String", "required": false, "description": "The elements that come before the specified cursor."}, {"name": "category", "type": "AppInstallationCategory", "required": false, "description": "The category of app installations to fetch."}, {"name": "first", "type": "Int", "required": false, "description": "The first n elements from the paginated list."}, {"name": "last", "type": "Int", "required": false, "description": "The last n elements from the paginated list."}, {"name": "privacy", "type": "AppInstallationPrivacy", "required": false, "description": "The privacy level of app installations to fetch."}, {"name": "reverse", "type": "Boolean", "required": false, "description": "Reverse the order of the underlying list."}, {"name": "sortKey", "type": "AppInstallationSortKeys", "required": false, "description": "Sort the underlying list using a key. If your query is slow or returns an error, then try specifying a sort key that matches the field used in the search."}], "returns": [], "examples": []}, {"name": "currentAppInstallation", "description": "Return the AppInstallation for the currently authenticated App.", "arguments": [], "returns": [{"name": "AppInstallation", "type": "AppInstallation!", "description": "non-null"}, {"name": "AppInstallation", "type": "AppInstallation!", "description": "non-null"}, {"name": "AppInstallation", "type": "AppInstallation!", "description": "non-null"}, {"name": "AppInstallation", "type": "AppInstallation!", "description": "non-null"}, {"name": "AppInstallation", "type": "AppInstallation!", "description": "non-null"}, {"name": "AppInstallation", "type": "AppInstallation!", "description": "non-null"}, {"name": "AppInstallation", "type": "AppInstallation!", "description": "non-null"}, {"name": "AppInstallation", "type": "AppInstallation!", "description": "non-null"}, {"name": "AppInstallation", "type": "AppInstallation!", "description": ""}, {"name": "AppInstallation", "type": "AppInstallation!", "description": "non-null"}, {"name": "AppInstallation", "type": "AppInstallation!", "description": "non-null"}, {"name": "AppInstallation", "type": "AppInstallation!", "description": ""}, {"name": "AppInstallation", "type": "AppInstallation!", "description": "non-null"}, {"name": "AppInstallation", "type": "AppInstallation!", "description": ""}, {"name": "AppInstallation", "type": "AppInstallation!", "description": ""}, {"name": "AppInstallation", "type": "AppInstallation!", "description": "non-null"}], "examples": [{"description": "Get a list of access scopes", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `query AccessScopeList {\n    currentAppInstallation {\n      accessScopes {\n        handle\n      }\n    }\n  }`,\n});\n"}, {"description": "Retrieves a list of application charges", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `query {\n    currentAppInstallation {\n      oneTimePurchases(first: 10) {\n        edges {\n          node {\n            createdAt\n            id\n            name\n            price {\n              amount\n              currencyCode\n            }\n            status\n            test\n          }\n        }\n      }\n    }\n  }`,\n});\n"}, {"description": "Retrieves a list of recurring application charges", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `query GetRecurringApplicationCharges {\n    currentAppInstallation {\n      activeSubscriptions {\n        id\n        name\n        status\n        lineItems {\n          id\n          plan {\n            pricingDetails {\n              __typename\n            }\n          }\n        }\n      }\n    }\n  }`,\n});\n"}]}, {"name": "mobilePlatformApplication", "description": "Return a mobile platform application by its ID.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "ID of the mobile platform app."}], "returns": [], "examples": []}, {"name": "mobilePlatformApplications", "description": "List the mobile platform applications.", "arguments": [{"name": "after", "type": "String", "required": false, "description": "The elements that come after the specified cursor."}, {"name": "before", "type": "String", "required": false, "description": "The elements that come before the specified cursor."}, {"name": "first", "type": "Int", "required": false, "description": "The first n elements from the paginated list."}, {"name": "last", "type": "Int", "required": false, "description": "The last n elements from the paginated list."}, {"name": "reverse", "type": "Boolean", "required": false, "description": "Reverse the order of the underlying list."}], "returns": [], "examples": []}, {"name": "publication", "description": "Lookup a publication by ID.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of the Publication to return."}], "returns": [], "examples": [{"description": "Retrieve an existing publication", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `query publication($id: ID!) {\n      publication(id: $id) {\n        name\n        collections(first: 5) {\n          edges {\n            node {\n              id\n              title\n              updatedAt\n            }\n          }\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/Publication/244171671\"\n    },\n  },\n});\n"}]}, {"name": "publications", "description": "List of publications.", "arguments": [{"name": "after", "type": "String", "required": false, "description": "The elements that come after the specified cursor."}, {"name": "before", "type": "String", "required": false, "description": "The elements that come before the specified cursor."}, {"name": "catalogType", "type": "CatalogType", "required": false, "description": "Filter publications by catalog type."}, {"name": "first", "type": "Int", "required": false, "description": "The first n elements from the paginated list."}, {"name": "last", "type": "Int", "required": false, "description": "The last n elements from the paginated list."}, {"name": "reverse", "type": "Boolean", "required": false, "description": "Reverse the order of the underlying list."}], "returns": [], "examples": []}, {"name": "publicationsCount", "description": "Count of publications.", "arguments": [{"name": "catalogType", "type": "CatalogType", "required": false, "description": "Filter publications by catalog type."}], "returns": [], "examples": []}], "mutations": [{"name": "mobilePlatformApplicationCreate", "description": "Create a mobile platform application.", "arguments": [{"name": "input", "type": "MobilePlatformApplicationCreateInput!", "required": false, "description": "The input to create a mobile platform application."}], "returns": [], "examples": [{"description": "Create a mobile platform application", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation mobilePlatformApplicationCreate($input: MobilePlatformApplicationCreateInput!) {\n      mobilePlatformApplicationCreate(input: $input) {\n        mobilePlatformApplication {\n          ... on AppleApplication {\n            id\n            appId\n            universalLinksEnabled\n            sharedWebCredentialsEnabled\n            appClipsEnabled\n            appClipApplicationId\n          }\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"input\": {\n        \"apple\": {\n          \"appId\": \"com.apple.package\",\n          \"appClipsEnabled\": true,\n          \"appClipApplicationId\": \"clip.app\",\n          \"universalLinksEnabled\": false,\n          \"sharedWebCredentialsEnabled\": false\n        }\n      }\n    },\n  },\n});\n"}, {"description": "Create an Android Mobile Platform Application", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation CreateMobilePlatformApplication($input: MobilePlatformApplicationCreateInput!) {\n      mobilePlatformApplicationCreate(input: $input) {\n        mobilePlatformApplication {\n          ... on AndroidApplication {\n            id\n            applicationId\n            sha256CertFingerprints\n            appLinksEnabled\n            __typename\n          }\n        }\n        userErrors {\n          field\n          message\n          code\n        }\n      }\n    }`,\n    \"variables\": {\n      \"input\": {\n        \"android\": {\n          \"applicationId\": \"com.android.package\",\n          \"appLinksEnabled\": true,\n          \"sha256CertFingerprints\": [\n            \"A1:B2:C3:D4\"\n          ]\n        }\n      }\n    },\n  },\n});\n"}, {"description": "Create an Apple Mobile Platform Application", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation CreateMobilePlatformApplication($input: MobilePlatformApplicationCreateInput!) {\n      mobilePlatformApplicationCreate(input: $input) {\n        mobilePlatformApplication {\n          ... on AppleApplication {\n            id\n            appId\n            universalLinksEnabled\n            sharedWebCredentialsEnabled\n            appClipsEnabled\n            appClipApplicationId\n            __typename\n          }\n        }\n        userErrors {\n          field\n          message\n          code\n        }\n      }\n    }`,\n    \"variables\": {\n      \"input\": {\n        \"apple\": {\n          \"appId\": \"com.apple.package\",\n          \"appClipsEnabled\": true,\n          \"appClipApplicationId\": \"clip.app\",\n          \"universalLinksEnabled\": false,\n          \"sharedWebCredentialsEnabled\": false\n        }\n      }\n    },\n  },\n});\n"}, {"description": "mobilePlatformApplicationCreate reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation mobilePlatformApplicationCreate($input: MobilePlatformApplicationCreateInput!) {\n      mobilePlatformApplicationCreate(input: $input) {\n        mobilePlatformApplication {\n          ... on AppleApplication {\n            id\n            appId\n            universalLinksEnabled\n            sharedWebCredentialsEnabled\n            appClipsEnabled\n            appClipApplicationId\n          }\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"input\": {\n        \"apple\": {\n          \"appId\": \"com.apple.package\",\n          \"appClipsEnabled\": true,\n          \"appClipApplicationId\": \"clip.app\",\n          \"universalLinksEnabled\": false,\n          \"sharedWebCredentialsEnabled\": false\n        }\n      }\n    },\n  },\n});\n"}]}, {"name": "mobilePlatformApplicationDelete", "description": "Delete a mobile platform application.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of the Mobile Platform Application to be deleted."}], "returns": [], "examples": [{"description": "Delete a mobile platform application", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation DeleteMobilePlatformApplication($id: ID!) {\n      mobilePlatformApplicationDelete(id: $id) {\n        deletedMobilePlatformApplicationId\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/MobilePlatformApplication/1066176028\"\n    },\n  },\n});\n"}, {"description": "mobilePlatformApplicationDelete reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation DeleteMobilePlatformApplication($id: ID!) {\n      mobilePlatformApplicationDelete(id: $id) {\n        deletedMobilePlatformApplicationId\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/MobilePlatformApplication/1066176028\"\n    },\n  },\n});\n"}]}, {"name": "mobilePlatformApplicationUpdate", "description": "Update a mobile platform application.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of the Mobile Platform Application to be updated."}, {"name": "input", "type": "MobilePlatformApplicationUpdateInput!", "required": false, "description": "The input to updat a Mobile Platform Application."}], "returns": [], "examples": [{"description": "Update a mobile platform application", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation MobilePlatformApplicationUpdate($id: ID!, $input: MobilePlatformApplicationUpdateInput!) {\n      mobilePlatformApplicationUpdate(id: $id, input: $input) {\n        mobilePlatformApplication {\n          ... on AppleApplication {\n            id\n            appId\n            universalLinksEnabled\n            sharedWebCredentialsEnabled\n            appClipsEnabled\n            appClipApplicationId\n          }\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/MobilePlatformApplication/1066176040\",\n      \"input\": {\n        \"apple\": {\n          \"appId\": \"com.apple.package\",\n          \"universalLinksEnabled\": false,\n          \"sharedWebCredentialsEnabled\": false,\n          \"appClipsEnabled\": true,\n          \"appClipApplicationId\": \"clip.app\"\n        }\n      }\n    },\n  },\n});\n"}, {"description": "Update an Android Mobile Platform Application", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation UpdateMobilePlatformApplication($id: ID!, $input: MobilePlatformApplicationUpdateInput!) {\n      mobilePlatformApplicationUpdate(id: $id, input: $input) {\n        mobilePlatformApplication {\n          ... on AndroidApplication {\n            id\n            applicationId\n            sha256CertFingerprints\n            appLinksEnabled\n            __typename\n          }\n        }\n        userErrors {\n          field\n          message\n          code\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/MobilePlatformApplication/1066176035\",\n      \"input\": {\n        \"android\": {\n          \"applicationId\": \"com.android.package\",\n          \"appLinksEnabled\": true,\n          \"sha256CertFingerprints\": [\n            \"A1:B2:C3:D4\"\n          ]\n        }\n      }\n    },\n  },\n});\n"}, {"description": "Update an Apple Mobile Platform Application", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation UpdateMobilePlatformApplication($id: ID!, $input: MobilePlatformApplicationUpdateInput!) {\n      mobilePlatformApplicationUpdate(id: $id, input: $input) {\n        mobilePlatformApplication {\n          ... on AppleApplication {\n            id\n            appId\n            universalLinksEnabled\n            sharedWebCredentialsEnabled\n            appClipsEnabled\n            appClipApplicationId\n            __typename\n          }\n        }\n        userErrors {\n          field\n          message\n          code\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/MobilePlatformApplication/1066176032\",\n      \"input\": {\n        \"apple\": {\n          \"appId\": \"com.apple.package\",\n          \"appClipsEnabled\": true,\n          \"appClipApplicationId\": \"clip.app\",\n          \"universalLinksEnabled\": false,\n          \"sharedWebCredentialsEnabled\": false\n        }\n      }\n    },\n  },\n});\n"}, {"description": "mobilePlatformApplicationUpdate reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation MobilePlatformApplicationUpdate($id: ID!, $input: MobilePlatformApplicationUpdateInput!) {\n      mobilePlatformApplicationUpdate(id: $id, input: $input) {\n        mobilePlatformApplication {\n          ... on AppleApplication {\n            id\n            appId\n            universalLinksEnabled\n            sharedWebCredentialsEnabled\n            appClipsEnabled\n            appClipApplicationId\n          }\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/MobilePlatformApplication/1066176040\",\n      \"input\": {\n        \"apple\": {\n          \"appId\": \"com.apple.package\",\n          \"universalLinksEnabled\": false,\n          \"sharedWebCredentialsEnabled\": false,\n          \"appClipsEnabled\": true,\n          \"appClipApplicationId\": \"clip.app\"\n        }\n      }\n    },\n  },\n});\n"}]}, {"name": "publicationCreate", "description": "Creates a publication.", "arguments": [{"name": "input", "type": "PublicationCreateInput!", "required": false, "description": "The input fields to use when creating the publication."}], "returns": [], "examples": []}, {"name": "publicationDelete", "description": "Deletes a publication.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of the publication to delete."}], "returns": [], "examples": []}, {"name": "publicationUpdate", "description": "Updates a publication.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of the publication to update."}, {"name": "input", "type": "PublicationUpdateInput!", "required": false, "description": "The input fields to use when updating the publication."}], "returns": [], "examples": []}, {"name": "shopResourceFeedbackCreate", "description": "The ResourceFeedback object lets your app report the status of shops and their resources. For example, if\nyour app is a marketplace channel, then you can use resource feedback to alert merchants that they need to connect their marketplace account by signing in.\nResource feedback notifications are displayed to the merchant on the home screen of their Shopify admin, and in the product details view for any products that are published to your app.\nThis resource should be used only in cases where you're describing steps that a merchant is required to complete. If your app offers optional or promotional set-up steps, or if it makes recommendations, then don't use resource feedback to let merchants know about them.\nSending feedback on a shop\nYou can send resource feedback on a shop to let the merchant know what steps they need to take to make sure that your app is set up correctly. Feedback can have one of two states: requires_action or success. You need to send a requires_action feedback request for each step that the merchant is required to complete.\nIf there are multiple set-up steps that require merchant action, then send feedback with a state of requires_action as merchants complete prior steps. And to remove the feedback message from the Shopify admin, send a success feedback request.\nImportant\nSending feedback replaces previously sent feedback for the shop. Send a new shopResourceFeedbackCreate mutation to push the latest state of a shop or its resources to Shopify.", "arguments": [{"name": "input", "type": "ResourceFeedbackCreateInput!", "required": false, "description": "The fields required to create shop feedback."}], "returns": [], "examples": [{"description": "Create a new ResourceFeedback", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation ShopResourceFeedbackCreate($input: ResourceFeedbackCreateInput!) {\n      shopResourceFeedbackCreate(input: $input) {\n        feedback {\n          messages {\n            message\n          }\n          feedbackGeneratedAt\n          state\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"input\": {\n        \"messages\": [\n          \"is not connected. Connect your account to use this sales channel.\"\n        ],\n        \"state\": \"REQUIRES_ACTION\",\n        \"feedbackGeneratedAt\": \"2024-12-05T14:05:02.351662Z\"\n      }\n    },\n  },\n});\n"}, {"description": "Create a shop feedback record indicating a problem specific to your app", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation shopResourceFeedbackCreate($input: ResourceFeedbackCreateInput!) {\n      shopResourceFeedbackCreate(input: $input) {\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"input\": {\n        \"messages\": [\n          \"is not connected. Connect your account to use this sales channel.\"\n        ],\n        \"state\": \"REQUIRES_ACTION\",\n        \"feedbackGeneratedAt\": \"2024-12-05T14:05:00.688444Z\"\n      }\n    },\n  },\n});\n"}, {"description": "Create a shop feedback record indicating the shop is usable by your app", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation shopResourceFeedbackCreate($input: ResourceFeedbackCreateInput!) {\n      shopResourceFeedbackCreate(input: $input) {\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"input\": {\n        \"state\": \"ACCEPTED\",\n        \"feedbackGeneratedAt\": \"2024-12-05T14:05:01.601550Z\"\n      }\n    },\n  },\n});\n"}, {"description": "Sending an invalid feedback payload returns an error", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation shopResourceFeedbackCreate($input: ResourceFeedbackCreateInput!) {\n      shopResourceFeedbackCreate(input: $input) {\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"input\": {\n        \"state\": \"FOOBAR\",\n        \"feedbackGeneratedAt\": \"2024-12-05T14:05:01.831106Z\"\n      }\n    },\n  },\n});\n"}, {"description": "Sending outdated feedback (previous feedback payload has a greater resource_updated_at value)\n            returns an error", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation ShopResourceFeedbackCreate($input: ResourceFeedbackCreateInput!) {\n      shopResourceFeedbackCreate(input: $input) {\n        feedback {\n          messages {\n            message\n          }\n          feedbackGeneratedAt\n          state\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"input\": {\n        \"messages\": [\n          \"is not connected. Connect your account to use this sales channel.\"\n        ],\n        \"state\": \"REQUIRES_ACTION\",\n        \"feedbackGeneratedAt\": \"2024-12-05T14:05:02.351662Z\"\n      }\n    },\n  },\n});\n"}, {"description": "shopResourceFeedbackCreate reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation ShopResourceFeedbackCreate($input: ResourceFeedbackCreateInput!) {\n      shopResourceFeedbackCreate(input: $input) {\n        feedback {\n          messages {\n            message\n          }\n          feedbackGeneratedAt\n          state\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"input\": {\n        \"messages\": [\n          \"is not connected. Connect your account to use this sales channel.\"\n        ],\n        \"state\": \"REQUIRES_ACTION\",\n        \"feedbackGeneratedAt\": \"2024-12-05T14:05:02.351662Z\"\n      }\n    },\n  },\n});\n"}]}], "objects": [{"name": "AndroidApplication", "description": "The Android mobile platform application.", "fields_and_connections": [{"name": "applicationId", "type": "String", "description": "The Android application ID.", "not_nullable": false}, {"name": "appLinksEnabled", "type": "Boolean!", "description": "Whether Android App Links are supported by this app.", "not_nullable": true}, {"name": "id", "type": "ID!", "description": "A globally-unique ID.", "not_nullable": true}, {"name": "sha256CertFingerprints", "type": "[String!]!", "description": "The SHA256 fingerprints of the app's signing certificate.", "not_nullable": true}], "examples": []}, {"name": "App", "description": "A Shopify application.", "fields_and_connections": [{"name": "apiKey", "type": "app", "description": "Lookup an App by ID or return the currently authenticated App.", "not_nullable": false}, {"name": "apiKey", "type": "appByHandle", "description": "Fetches app by handle.\nReturns null if the app doesn't exist.", "not_nullable": false}, {"name": "apiKey", "type": "appByKey", "description": "Fetches an app by its client ID.\nReturns null if the app doesn't exist.", "not_nullable": false}, {"name": "apiKey", "type": "Node", "description": "A unique application API identifier.", "not_nullable": false}], "examples": []}, {"name": "AppFeedback", "description": "Reports the status of shops and their resources and displays this information\nwithin Shopify admin. AppFeedback is used to notify merchants about steps they need to take\nto set up an app on their store.", "fields_and_connections": [{"name": "app", "type": "shopResourceFeedbackCreate", "description": "The ResourceFeedback object lets your app report the status of shops and their resources. For example, if\nyour app is a marketplace channel, then you can use resource feedback to alert merchants that they need to connect their marketplace account by signing in.\nResource feedback notifications are displayed to the merchant on the home screen of their Shopify admin, and in the product details view for any products that are published to your app.\nThis resource should be used only in cases where you're describing steps that a merchant is required to complete. If your app offers optional or promotional set-up steps, or if it makes recommendations, then don't use resource feedback to let merchants know about them.\nSending feedback on a shop\nYou can send resource feedback on a shop to let the merchant know what steps they need to take to make sure that your app is set up correctly. Feedback can have one of two states: requires_action or success. You need to send a requires_action feedback request for each step that the merchant is required to complete.\nIf there are multiple set-up steps that require merchant action, then send feedback with a state of requires_action as merchants complete prior steps. And to remove the feedback message from the Shopify admin, send a success feedback request.\nImportant\nSending feedback replaces previously sent feedback for the shop. Send a new shopResourceFeedbackCreate mutation to push the latest state of a shop or its resources to Shopify.", "not_nullable": false}], "examples": []}, {"name": "AppInstallation", "description": "Represents an installed application on a shop.", "fields_and_connections": [{"name": "accessScopes", "type": "appInstallation", "description": "Lookup an AppInstallation by ID or return the AppInstallation for the currently authenticated App.", "not_nullable": false}, {"name": "accessScopes", "type": "appInstallations", "description": "A list of app installations. To use this query, you need to contact Shopify Support to grant your custom app the read_apps access scope. Public apps can't be granted this access scope.", "not_nullable": false}, {"name": "accessScopes", "type": "currentAppInstallation", "description": "Return the AppInstallation for the currently authenticated App.", "not_nullable": false}, {"name": "accessScopes", "type": "HasMetafields", "description": "The access scopes granted to the application by a merchant during installation.", "not_nullable": false}, {"name": "accessScopes", "type": "Node", "description": "The access scopes granted to the application by a merchant during installation.", "not_nullable": false}], "examples": []}, {"name": "AppleApplication", "description": "The Apple mobile platform application.", "fields_and_connections": [{"name": "appClipApplicationId", "type": "String", "description": "The iOS App Clip application ID.", "not_nullable": false}, {"name": "appClipsEnabled", "type": "Boolean!", "description": "Whether iOS App Clips are enabled for this app.", "not_nullable": true}, {"name": "appId", "type": "String", "description": "The iOS App ID.", "not_nullable": false}, {"name": "id", "type": "ID!", "description": "A globally-unique ID.", "not_nullable": true}, {"name": "sharedWebCredentialsEnabled", "type": "Boolean!", "description": "Whether iOS shared web credentials are enabled for this app.", "not_nullable": true}, {"name": "universalLinksEnabled", "type": "Boolean!", "description": "Whether iOS Universal Links are supported by this app.", "not_nullable": true}], "examples": []}, {"name": "FailedRequirement", "description": "Requirements that must be met before an app can be installed.", "fields_and_connections": [{"name": "action", "type": "NavigationItem", "description": "Action to be taken to resolve a failed requirement, including URL link.", "not_nullable": false}, {"name": "message", "type": "String!", "description": "A concise set of copy strings to be displayed to merchants, to guide them in resolving problems your app\nencounters when trying to make use of their Shop and its resources.", "not_nullable": true}], "examples": []}, {"name": "Link", "description": "A link to direct users to.", "fields_and_connections": [{"name": "label", "type": "HasPublishedTranslations", "description": "A context-sensitive label for the link.", "not_nullable": false}], "examples": []}, {"name": "Publication", "description": "A publication is a group of products and collections that is published to an app.", "fields_and_connections": [{"name": "autoPublish", "type": "publication", "description": "Lookup a publication by ID.", "not_nullable": false}, {"name": "autoPublish", "type": "publications", "description": "List of publications.", "not_nullable": false}, {"name": "autoPublish", "type": "publicationCreate", "description": "Creates a publication.", "not_nullable": false}, {"name": "autoPublish", "type": "publicationUpdate", "description": "Updates a publication.", "not_nullable": false}, {"name": "autoPublish", "type": "Node", "description": "Whether new products are automatically published to this publication.", "not_nullable": false}], "examples": []}, {"name": "ResourceFeedback", "description": "Represents feedback from apps about a resource, and the steps required to set up the apps on the shop.", "fields_and_connections": [{"name": "details", "type": "[AppFeedback!]!", "description": "List of AppFeedback detailing issues regarding a resource.", "not_nullable": true}, {"name": "summary", "type": "String!", "description": "Summary of resource feedback pertaining to the resource.", "not_nullable": true}, {"name": "appFeedback", "type": "[AppFeedback!]!", "description": "Feedback from an app about the steps a merchant needs to take to set up the app on their store. Use details instead.", "not_nullable": true}], "examples": []}]}, {"name": "B2B", "queries": [{"name": "companies", "description": "Returns the list of companies in the shop.", "arguments": [{"name": "after", "type": "String", "required": false, "description": "The elements that come after the specified cursor."}, {"name": "before", "type": "String", "required": false, "description": "The elements that come before the specified cursor."}, {"name": "first", "type": "Int", "required": false, "description": "The first n elements from the paginated list."}, {"name": "last", "type": "Int", "required": false, "description": "The last n elements from the paginated list."}, {"name": "query", "type": "String", "required": false, "description": "A filter made up of terms, connectives, modifiers, and comparators.\nYou can apply one or more filters to a query. Learn more about Shopify API search syntax."}, {"name": "reverse", "type": "Boolean", "required": false, "description": "Reverse the order of the underlying list."}, {"name": "sortKey", "type": "CompanySortKeys", "required": false, "description": "Sort the underlying list by the given key."}], "returns": [], "examples": []}, {"name": "companiesCount", "description": "The number of companies for a shop.", "arguments": [], "returns": [{"name": "Count", "type": "Count", "description": "non-null"}, {"name": "Count", "type": "Count", "description": "non-null"}, {"name": "Count", "type": "Count", "description": "non-null"}], "examples": []}, {"name": "company", "description": "Returns a Company object by ID.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of the Company to return."}], "returns": [], "examples": [{"description": "Get a company by its ID", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `query {\n    company(id: \"gid://shopify/Company/426793626\") {\n      id\n      name\n      note\n      externalId\n      totalSpent {\n        amount\n        currencyCode\n      }\n    }\n  }`,\n});\n"}, {"description": "Get a metafield attached to a company", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `query CompanyMetafield($namespace: String!, $key: String!, $ownerId: ID!) {\n      company(id: $ownerId) {\n        industry: metafield(namespace: $namespace, key: $key) {\n          value\n        }\n      }\n    }`,\n    \"variables\": {\n      \"namespace\": \"my_fields\",\n      \"key\": \"industry\",\n      \"ownerId\": \"gid://shopify/Company/426793626\"\n    },\n  },\n});\n"}, {"description": "Get metafields attached to a company", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `query CompanyMetafields($ownerId: ID!) {\n      company(id: $ownerId) {\n        metafields(first: 3) {\n          edges {\n            node {\n              namespace\n              key\n              value\n            }\n          }\n        }\n      }\n    }`,\n    \"variables\": {\n      \"ownerId\": \"gid://shopify/Company/426793626\"\n    },\n  },\n});\n"}, {"description": "Get pinned metafield definitions associated with a company", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `query CompanyMetafieldDefinitions($ownerId: ID!, $first: Int, $pinnedStatus: MetafieldDefinitionPinnedStatus, $sortKey: MetafieldDefinitionSortKeys) {\n      company(id: $ownerId) {\n        metafieldDefinitions(first: $first, pinnedStatus: $pinnedStatus, sortKey: $sortKey) {\n          edges {\n            node {\n              name\n              namespace\n              key\n              type {\n                name\n              }\n            }\n          }\n        }\n      }\n    }`,\n    \"variables\": {\n      \"pinnedStatus\": \"PINNED\",\n      \"ownerId\": \"gid://shopify/Company/426793626\",\n      \"first\": 10,\n      \"sortKey\": \"PINNED_POSITION\"\n    },\n  },\n});\n"}]}, {"name": "companyContact", "description": "Returns a CompanyContact object by ID.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of the CompanyContact to return."}], "returns": [], "examples": []}, {"name": "companyContactRole", "description": "Returns a CompanyContactRole object by ID.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of the CompanyContactRole to return."}], "returns": [], "examples": []}, {"name": "companyLocation", "description": "Returns a CompanyLocation object by ID.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of the CompanyLocation to return."}], "returns": [], "examples": []}, {"name": "companyLocations", "description": "Returns the list of company locations in the shop.", "arguments": [{"name": "after", "type": "String", "required": false, "description": "The elements that come after the specified cursor."}, {"name": "before", "type": "String", "required": false, "description": "The elements that come before the specified cursor."}, {"name": "first", "type": "Int", "required": false, "description": "The first n elements from the paginated list."}, {"name": "last", "type": "Int", "required": false, "description": "The last n elements from the paginated list."}, {"name": "query", "type": "String", "required": false, "description": "A filter made up of terms, connectives, modifiers, and comparators.\nYou can apply one or more filters to a query. Learn more about Shopify API search syntax."}, {"name": "reverse", "type": "Boolean", "required": false, "description": "Reverse the order of the underlying list."}, {"name": "sortKey", "type": "CompanyLocationSortKeys", "required": false, "description": "Sort the underlying list by the given key."}], "returns": [], "examples": []}], "mutations": [{"name": "companiesDelete", "description": "Deletes a list of companies.", "arguments": [{"name": "companyIds", "type": "[ID!]!", "required": false, "description": "A list of IDs of companies to delete."}], "returns": [], "examples": []}, {"name": "companyAddressDelete", "description": "Deletes a company address.", "arguments": [{"name": "addressId", "type": "ID!", "required": false, "description": "The ID of the address to delete."}], "returns": [], "examples": []}, {"name": "companyAssignCustomerAsContact", "description": "Assigns the customer as a company contact.", "arguments": [{"name": "companyId", "type": "ID!", "required": false, "description": "The ID of the company to assign the contact to."}, {"name": "customerId", "type": "ID!", "required": false, "description": "The ID of the customer to assign as the contact."}], "returns": [], "examples": []}, {"name": "companyAssignMainContact", "description": "Assigns the main contact for the company.", "arguments": [{"name": "companyContactId", "type": "ID!", "required": false, "description": "The ID of the company contact to be assigned as the main contact."}, {"name": "companyId", "type": "ID!", "required": false, "description": "The ID of the company to assign the main contact to."}], "returns": [], "examples": []}, {"name": "companyContactAssignRole", "description": "Assigns a role to a contact for a location.", "arguments": [{"name": "companyContactId", "type": "ID!", "required": false, "description": "The ID of the contact to assign a role to."}, {"name": "companyContactRoleId", "type": "ID!", "required": false, "description": "The ID of the role to assign to a contact."}, {"name": "companyLocationId", "type": "ID!", "required": false, "description": "The ID of the location to assign a role to a contact."}], "returns": [], "examples": []}, {"name": "companyContactAssignRoles", "description": "Assigns roles on a company contact.", "arguments": [{"name": "companyContactId", "type": "ID!", "required": false, "description": "The contact whose roles are being assigned."}, {"name": "rolesToAssign", "type": "[CompanyContactRoleAssign!]!", "required": false, "description": "The new roles to assign."}], "returns": [], "examples": []}, {"name": "companyContactCreate", "description": "Creates a company contact and the associated customer.", "arguments": [{"name": "companyId", "type": "ID!", "required": false, "description": "The ID of the company that the company contact belongs to."}, {"name": "input", "type": "CompanyContactInput!", "required": false, "description": "The fields to use to create the company contact."}], "returns": [], "examples": [{"description": "Create a company contact", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation CompanyContactCreate($companyId: ID!, $input: CompanyContactInput!) {\n      companyContactCreate(companyId: $companyId, input: $input) {\n        companyContact {\n          id\n          company {\n            id\n            name\n          }\n          customer {\n            id\n            firstName\n            lastName\n            email\n          }\n        }\n        userErrors {\n          field\n          message\n          code\n        }\n      }\n    }`,\n    \"variables\": {\n      \"companyId\": \"gid://shopify/Company/426793626\",\n      \"input\": {\n        \"email\": \"avery.brown@example.com\",\n        \"firstName\": \"Avery\",\n        \"lastName\": \"Brown\"\n      }\n    },\n  },\n});\n"}, {"description": "companyContactCreate reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation CompanyContactCreate($companyId: ID!, $input: CompanyContactInput!) {\n      companyContactCreate(companyId: $companyId, input: $input) {\n        companyContact {\n          id\n          company {\n            id\n            name\n          }\n          customer {\n            id\n            firstName\n            lastName\n            email\n          }\n        }\n        userErrors {\n          field\n          message\n          code\n        }\n      }\n    }`,\n    \"variables\": {\n      \"companyId\": \"gid://shopify/Company/426793626\",\n      \"input\": {\n        \"email\": \"avery.brown@example.com\",\n        \"firstName\": \"Avery\",\n        \"lastName\": \"Brown\"\n      }\n    },\n  },\n});\n"}]}, {"name": "companyContactDelete", "description": "Deletes a company contact.", "arguments": [{"name": "companyContactId", "type": "ID!", "required": false, "description": "The ID of the company contact to delete."}], "returns": [], "examples": []}, {"name": "companyContactRemoveFromCompany", "description": "Removes a company contact from a Company.", "arguments": [{"name": "companyContactId", "type": "ID!", "required": false, "description": "The ID of the company contact to remove from the Company."}], "returns": [], "examples": []}, {"name": "companyContactRevokeRole", "description": "Revokes a role on a company contact.", "arguments": [{"name": "companyContactId", "type": "ID!", "required": false, "description": "The ID of the contact to revoke a role from."}, {"name": "companyContactRoleAssignmentId", "type": "ID!", "required": false, "description": "The ID of the role assignment to revoke from a contact."}], "returns": [], "examples": []}, {"name": "companyContactRevokeRoles", "description": "Revokes roles on a company contact.", "arguments": [{"name": "companyContactId", "type": "ID!", "required": false, "description": "The contact whose roles are being revoked."}, {"name": "revokeAll", "type": "Boolean", "required": false, "description": "Flag to revoke all roles on the contact."}, {"name": "roleAssignmentIds", "type": "[ID!]", "required": false, "description": "The current role assignment IDs to revoke."}], "returns": [], "examples": []}, {"name": "companyContactsDelete", "description": "Deletes one or more company contacts.", "arguments": [{"name": "companyContactIds", "type": "[ID!]!", "required": false, "description": "The list of IDs of the company contacts to delete."}], "returns": [], "examples": []}, {"name": "companyContactUpdate", "description": "Updates a company contact.", "arguments": [{"name": "companyContactId", "type": "ID!", "required": false, "description": "The ID of the company contact to be updated."}, {"name": "input", "type": "CompanyContactInput!", "required": false, "description": "The fields to use to update the company contact."}], "returns": [], "examples": []}, {"name": "companyCreate", "description": "Creates a company.", "arguments": [{"name": "input", "type": "CompanyCreateInput!", "required": false, "description": "The fields to use when creating the company."}], "returns": [], "examples": [{"description": "Create a company", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation CompanyCreate($input: CompanyCreateInput!) {\n      companyCreate(input: $input) {\n        company {\n          id\n          name\n          externalId\n          mainContact {\n            id\n            customer {\n              id\n              email\n              firstName\n              lastName\n            }\n          }\n          contacts(first: 5) {\n            edges {\n              node {\n                id\n                customer {\n                  email\n                  firstName\n                  lastName\n                }\n              }\n            }\n          }\n          contactRoles(first: 5) {\n            edges {\n              node {\n                id\n                name\n              }\n            }\n          }\n          locations(first: 5) {\n            edges {\n              node {\n                id\n                name\n                shippingAddress {\n                  firstName\n                  lastName\n                  address1\n                  city\n                  province\n                  zip\n                  country\n                }\n              }\n            }\n          }\n        }\n        userErrors {\n          field\n          message\n          code\n        }\n      }\n    }`,\n    \"variables\": {\n      \"input\": {\n        \"company\": {\n          \"name\": \"Postal Cards Inc\",\n          \"externalId\": \"01456606-0001\"\n        },\n        \"companyLocation\": {\n          \"name\": \"Ottawa Postal Cards\",\n          \"shippingAddress\": {\n            \"firstName\": \"Avery\",\n            \"lastName\": \"Brown\",\n            \"address1\": \"150 Elgin Street\",\n            \"address2\": \"8th Floor\",\n            \"city\": \"Ottawa\",\n            \"zoneCode\": \"ON\",\n            \"zip\": \"K2P 1L4\",\n            \"countryCode\": \"CA\"\n          },\n          \"billingSameAsShipping\": true\n        },\n        \"companyContact\": {\n          \"email\": \"avery.brown@example.com\",\n          \"firstName\": \"Avery\",\n          \"lastName\": \"Brown\"\n        }\n      }\n    },\n  },\n});\n"}, {"description": "Create a company with required fields only", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation CompanyCreate($input: CompanyCreateInput!) {\n      companyCreate(input: $input) {\n        company {\n          id\n          name\n          mainContact {\n            id\n          }\n          contactRoles(first: 5) {\n            edges {\n              node {\n                id\n                name\n              }\n            }\n          }\n          locations(first: 5) {\n            edges {\n              node {\n                id\n                name\n                shippingAddress {\n                  firstName\n                  lastName\n                  address1\n                  city\n                  province\n                  zip\n                  country\n                }\n              }\n            }\n          }\n        }\n        userErrors {\n          field\n          message\n          code\n        }\n      }\n    }`,\n    \"variables\": {\n      \"input\": {\n        \"company\": {\n          \"name\": \"Postal Cards Inc\"\n        }\n      }\n    },\n  },\n});\n"}, {"description": "Creating a company without a name returns an error", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation CompanyCreate($input: CompanyCreateInput!) {\n      companyCreate(input: $input) {\n        company {\n          id\n          name\n          mainContact {\n            id\n          }\n          contactRoles(first: 5) {\n            edges {\n              node {\n                id\n                name\n              }\n            }\n          }\n          locations(first: 5) {\n            edges {\n              node {\n                id\n                name\n                shippingAddress {\n                  firstName\n                  lastName\n                  address1\n                  city\n                  province\n                  zip\n                  country\n                }\n              }\n            }\n          }\n        }\n        userErrors {\n          field\n          message\n          code\n        }\n      }\n    }`,\n    \"variables\": {\n      \"input\": {\n        \"company\": {\n          \"externalId\": \"123\"\n        }\n      }\n    },\n  },\n});\n"}]}, {"name": "companyDelete", "description": "Deletes a company.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of the company to delete."}], "returns": [], "examples": []}, {"name": "companyLocationAssignAddress", "description": "Updates an address on a company location.", "arguments": [{"name": "address", "type": "CompanyAddressInput!", "required": false, "description": "The input fields to use to update the address."}, {"name": "addressTypes", "type": "[CompanyAddressType!]!", "required": false, "description": "The list of address types on the location to update."}, {"name": "locationId", "type": "ID!", "required": false, "description": "The ID of the company location to update addresses on."}], "returns": [], "examples": []}, {"name": "companyLocationAssignRoles", "description": "Assigns roles on a company location.", "arguments": [{"name": "companyLocationId", "type": "ID!", "required": false, "description": "The location whose roles are being assigned."}, {"name": "rolesToAssign", "type": "[CompanyLocationRoleAssign!]!", "required": false, "description": "The roles to assign."}], "returns": [], "examples": []}, {"name": "companyLocationAssignStaffMembers", "description": "Creates one or more mappings between a staff member at a shop and a company location.", "arguments": [{"name": "companyLocationId", "type": "ID!", "required": false, "description": "The ID of the company location to assign the staff member to."}, {"name": "staffMemberIds", "type": "[ID!]!", "required": false, "description": "The list of IDs of the staff members to assign."}], "returns": [], "examples": []}, {"name": "companyLocationAssignTaxExemptions", "description": "Assigns tax exemptions to the company location. Use companyLocationTaxSettingsUpdate instead.", "arguments": [{"name": "companyLocationId", "type": "ID!", "required": false, "description": "The location to which the tax exemptions will be assigned."}, {"name": "taxExemptions", "type": "[TaxExemption!]!", "required": false, "description": "The tax exemptions that are being assigned to the location."}], "returns": [], "examples": []}, {"name": "companyLocationCreate", "description": "Creates a company location.", "arguments": [{"name": "companyId", "type": "ID!", "required": false, "description": "The ID of the company that the company location belongs to."}, {"name": "input", "type": "CompanyLocationInput!", "required": false, "description": "The fields to use to create the company location."}], "returns": [], "examples": []}, {"name": "companyLocationCreateTaxRegistration", "description": "Creates a tax registration for a company location. Use companyLocationTaxSettingsUpdate instead.", "arguments": [{"name": "locationId", "type": "ID!", "required": false, "description": "The ID of the company location that the tax registration gets assigned to."}, {"name": "taxId", "type": "String!", "required": false, "description": "The unique tax id for the tax registration."}], "returns": [], "examples": []}, {"name": "companyLocationDelete", "description": "Deletes a company location.", "arguments": [{"name": "companyLocationId", "type": "ID!", "required": false, "description": "The ID of the company location to delete."}], "returns": [], "examples": []}, {"name": "companyLocationRemoveStaffMembers", "description": "Deletes one or more existing mappings between a staff member at a shop and a company location.", "arguments": [{"name": "companyLocationStaffMemberAssignmentIds", "type": "[ID!]!", "required": false, "description": "The list of IDs of the company location staff member assignment to delete."}], "returns": [], "examples": []}, {"name": "companyLocationRevokeRoles", "description": "Revokes roles on a company location.", "arguments": [{"name": "companyLocationId", "type": "ID!", "required": false, "description": "The location whose roles are being revoked."}, {"name": "rolesToRevoke", "type": "[ID!]!", "required": false, "description": "The current roles to revoke."}], "returns": [], "examples": []}, {"name": "companyLocationRevokeTaxExemptions", "description": "Revokes tax exemptions from the company location. Use companyLocationTaxSettingsUpdate instead.", "arguments": [{"name": "companyLocationId", "type": "ID!", "required": false, "description": "The location from which the tax exemptions will be revoked."}, {"name": "taxExemptions", "type": "[TaxExemption!]!", "required": false, "description": "The tax exemptions that are being revoked from the location."}], "returns": [], "examples": []}, {"name": "companyLocationRevokeTaxRegistration", "description": "Revokes tax registration on a company location. Use companyLocationTaxSettingsUpdate instead.", "arguments": [{"name": "companyLocationId", "type": "ID!", "required": false, "description": "The location whose tax registration is being revoked."}], "returns": [], "examples": []}, {"name": "companyLocationsDelete", "description": "Deletes a list of company locations.", "arguments": [{"name": "companyLocationIds", "type": "[ID!]!", "required": false, "description": "A list of IDs of company locations to delete."}], "returns": [], "examples": []}, {"name": "companyLocationTaxSettingsUpdate", "description": "Sets the tax settings for a company location.", "arguments": [{"name": "companyLocationId", "type": "ID!", "required": false, "description": "The ID of the company location that the tax settings get assigned to."}, {"name": "exemptionsToAssign", "type": "[TaxExemption!]", "required": false, "description": "The list of tax exemptions to assign to the company location."}, {"name": "exemptionsToRemove", "type": "[TaxExemption!]", "required": false, "description": "The list of tax exemptions to remove from the company location."}, {"name": "taxExempt", "type": "Boolean", "required": false, "description": "Whether the location is exempt from taxes."}, {"name": "taxRegistrationId", "type": "String", "required": false, "description": "The unique tax registration ID for the company location."}], "returns": [], "examples": []}, {"name": "companyLocationUpdate", "description": "Updates a company location.", "arguments": [{"name": "companyLocationId", "type": "ID!", "required": false, "description": "The ID of the company location to update."}, {"name": "input", "type": "CompanyLocationUpdateInput!", "required": false, "description": "The input fields to update in the company location."}], "returns": [], "examples": []}, {"name": "companyRevokeMainContact", "description": "Revokes the main contact from the company.", "arguments": [{"name": "companyId", "type": "ID!", "required": false, "description": "The ID of the company to revoke the main contact from."}], "returns": [], "examples": []}, {"name": "companyUpdate", "description": "Updates a company.", "arguments": [{"name": "companyId", "type": "ID!", "required": false, "description": "The ID of the company to be updated."}, {"name": "input", "type": "CompanyInput!", "required": false, "description": "The input fields to update the company."}], "returns": [], "examples": []}], "objects": [{"name": "Company", "description": "Represents information about a company which is also a customer of the shop.", "fields_and_connections": [{"name": "contactRoles", "type": "companies", "description": "Returns the list of companies in the shop.", "not_nullable": false}, {"name": "contactRoles", "type": "company", "description": "Returns a Company object by ID.", "not_nullable": false}, {"name": "contactRoles", "type": "companyAssignMainContact", "description": "Assigns the main contact for the company.", "not_nullable": false}, {"name": "contactRoles", "type": "companyCreate", "description": "Creates a company.", "not_nullable": false}, {"name": "contactRoles", "type": "companyRevokeMainContact", "description": "Revokes the main contact from the company.", "not_nullable": false}, {"name": "contactRoles", "type": "companyUpdate", "description": "Updates a company.", "not_nullable": false}, {"name": "contactRoles", "type": "CommentEventSubject", "description": "The list of roles for the company contacts.", "not_nullable": false}, {"name": "contactRoles", "type": "HasEvents", "description": "The list of roles for the company contacts.", "not_nullable": false}, {"name": "contactRoles", "type": "HasMetafieldDefinitions", "description": "The list of roles for the company contacts.", "not_nullable": false}, {"name": "contactRoles", "type": "HasMetafields", "description": "The list of roles for the company contacts.", "not_nullable": false}, {"name": "contactRoles", "type": "Navigable", "description": "The list of roles for the company contacts.", "not_nullable": false}, {"name": "contactRoles", "type": "Node", "description": "The list of roles for the company contacts.", "not_nullable": false}], "examples": []}, {"name": "CompanyAddress", "description": "Represents a billing or shipping address for a company location.", "fields_and_connections": [{"name": "address1", "type": "companyLocationAssignAddress", "description": "Updates an address on a company location.", "not_nullable": false}, {"name": "address1", "type": "Node", "description": "The first line of the address. Typically the street address or PO Box number.", "not_nullable": false}], "examples": []}, {"name": "CompanyContact", "description": "A person that acts on behalf of company associated to a customer.", "fields_and_connections": [{"name": "company", "type": "companyContact", "description": "Returns a CompanyContact object by ID.", "not_nullable": false}, {"name": "company", "type": "companyAssignCustomerAsContact", "description": "Assigns the customer as a company contact.", "not_nullable": false}, {"name": "company", "type": "companyContactCreate", "description": "Creates a company contact and the associated customer.", "not_nullable": false}, {"name": "company", "type": "companyContactUpdate", "description": "Updates a company contact.", "not_nullable": false}, {"name": "company", "type": "Node", "description": "The company to which the contact belongs.", "not_nullable": false}], "examples": []}, {"name": "CompanyContactRole", "description": "The role for a company contact.", "fields_and_connections": [{"name": "id", "type": "companyContactRole", "description": "Returns a CompanyContactRole object by ID.", "not_nullable": false}, {"name": "id", "type": "Node", "description": "A globally-unique ID.", "not_nullable": false}], "examples": []}, {"name": "CompanyContactRoleAssignment", "description": "The CompanyContactRoleAssignment describes the company and location associated to a company contact's role.", "fields_and_connections": [{"name": "company", "type": "companyContactAssignRole", "description": "Assigns a role to a contact for a location.", "not_nullable": false}, {"name": "company", "type": "companyContactAssignRoles", "description": "Assigns roles on a company contact.", "not_nullable": false}, {"name": "company", "type": "companyLocationAssignRoles", "description": "Assigns roles on a company location.", "not_nullable": false}, {"name": "company", "type": "Node", "description": "The company this role assignment belongs to.", "not_nullable": false}], "examples": []}, {"name": "CompanyLocation", "description": "A location or branch of a company that's a customer of the shop. Configuration of B2B relationship, for example prices lists and checkout settings, may be done for a location.", "fields_and_connections": [{"name": "billingAddress", "type": "companyLocation", "description": "Returns a CompanyLocation object by ID.", "not_nullable": false}, {"name": "billingAddress", "type": "companyLocations", "description": "Returns the list of company locations in the shop.", "not_nullable": false}, {"name": "billingAddress", "type": "companyLocationCreate", "description": "Creates a company location.", "not_nullable": false}, {"name": "billingAddress", "type": "companyLocationTaxSettingsUpdate", "description": "Sets the tax settings for a company location.", "not_nullable": false}, {"name": "billingAddress", "type": "companyLocationUpdate", "description": "Updates a company location.", "not_nullable": false}, {"name": "billingAddress", "type": "companyLocationAssignTaxExemptions", "description": "Assigns tax exemptions to the company location. Use companyLocationTaxSettingsUpdate instead.", "not_nullable": false}, {"name": "billingAddress", "type": "companyLocationCreateTaxRegistration", "description": "Creates a tax registration for a company location. Use companyLocationTaxSettingsUpdate instead.", "not_nullable": false}, {"name": "billingAddress", "type": "companyLocationRevokeTaxExemptions", "description": "Revokes tax exemptions from the company location. Use companyLocationTaxSettingsUpdate instead.", "not_nullable": false}, {"name": "billingAddress", "type": "companyLocationRevokeTaxRegistration", "description": "Revokes tax registration on a company location. Use companyLocationTaxSettingsUpdate instead.", "not_nullable": false}, {"name": "billingAddress", "type": "CommentEventSubject", "description": "The address used as billing address for the location.", "not_nullable": false}, {"name": "billingAddress", "type": "HasEvents", "description": "The address used as billing address for the location.", "not_nullable": false}, {"name": "billingAddress", "type": "HasMetafieldDefinitions", "description": "The address used as billing address for the location.", "not_nullable": false}, {"name": "billingAddress", "type": "HasMetafields", "description": "The address used as billing address for the location.", "not_nullable": false}, {"name": "billingAddress", "type": "Navigable", "description": "The address used as billing address for the location.", "not_nullable": false}, {"name": "billingAddress", "type": "Node", "description": "The address used as billing address for the location.", "not_nullable": false}], "examples": []}, {"name": "CompanyLocationsCondition", "description": "A condition checking the company location a visitor is purchasing for.", "fields_and_connections": [{"name": "applicationLevel", "type": "MarketConditionApplicationType", "description": "The application level for the condition.", "not_nullable": false}, {"name": "companyLocations", "type": "CompanyLocationConnection!", "description": "The company locations that comprise the market.", "not_nullable": true}], "examples": []}, {"name": "CompanyLocationStaffMemberAssignment", "description": "A representation of store's staff member who is assigned to a company location of the shop. The staff member's actions will be limited to objects associated with the assigned company location.", "fields_and_connections": [{"name": "companyLocation", "type": "companyLocationAssignStaffMembers", "description": "Creates one or more mappings between a staff member at a shop and a company location.", "not_nullable": false}, {"name": "companyLocation", "type": "Node", "description": "The company location the staff member is assigned to.", "not_nullable": false}], "examples": []}, {"name": "CompanyLocationTaxSettings", "description": "Represents the tax settings for a company location.", "fields_and_connections": [{"name": "taxExempt", "type": "Boolean!", "description": "Whether the location is exempt from taxes.", "not_nullable": true}, {"name": "taxExemptions", "type": "[TaxExemption!]!", "description": "The list of tax exemptions applied to the location.", "not_nullable": true}, {"name": "taxRegistrationId", "type": "String", "description": "The tax registration ID for the company location.", "not_nullable": false}], "examples": []}, {"name": "PurchasingCompany", "description": "Represents information about the purchasing company for the order or draft order.", "fields_and_connections": [{"name": "company", "type": "Company!", "description": "The company associated to the order or draft order.", "not_nullable": true}, {"name": "contact", "type": "CompanyContact", "description": "The company contact associated to the order or draft order.", "not_nullable": false}, {"name": "location", "type": "CompanyLocation!", "description": "The company location associated to the order or draft order.", "not_nullable": true}], "examples": []}]}, {"name": "Billing", "queries": [{"name": "shopBillingPreferences", "description": "The shop's billing preferences.", "arguments": [], "returns": [{"name": "ShopBillingPreferences", "type": "ShopBillingPreferences!", "description": "non-null"}, {"name": "ShopBillingPreferences", "type": "ShopBillingPreferences!", "description": "non-null"}], "examples": []}], "mutations": [{"name": "appPurchaseOneTimeCreate", "description": "Charges a shop for features or services one time.\nThis type of charge is recommended for apps that aren't billed on a recurring basis.\nTest and demo shops aren't charged.", "arguments": [{"name": "name", "type": "String!", "required": false, "description": "The name of the one-time purchase from the app."}, {"name": "price", "type": "MoneyInput!", "required": false, "description": "The amount to be charged to the store for the app one-time purchase."}, {"name": "returnUrl", "type": "URL!", "required": false, "description": "The URL where the merchant is redirected after approving the app one-time purchase."}, {"name": "test", "type": "Boolean", "required": false, "description": "Whether the app one-time purchase is a test transaction."}], "returns": [], "examples": [{"description": "Creates an application charge", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation AppPurchaseOneTimeCreate($name: String!, $price: MoneyInput!, $returnUrl: URL!) {\n      appPurchaseOneTimeCreate(name: $name, returnUrl: $returnUrl, price: $price) {\n        userErrors {\n          field\n          message\n        }\n        appPurchaseOneTime {\n          createdAt\n          id\n        }\n        confirmationUrl\n      }\n    }`,\n    \"variables\": {\n      \"name\": \"1000 imported orders.\",\n      \"returnUrl\": \"http://super-duper.shopifyapps.com/\",\n      \"price\": {\n        \"amount\": 10.0,\n        \"currencyCode\": \"USD\"\n      }\n    },\n  },\n});\n"}, {"description": "appPurchaseOneTimeCreate reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation AppPurchaseOneTimeCreate($name: String!, $price: MoneyInput!, $returnUrl: URL!) {\n      appPurchaseOneTimeCreate(name: $name, returnUrl: $returnUrl, price: $price) {\n        userErrors {\n          field\n          message\n        }\n        appPurchaseOneTime {\n          createdAt\n          id\n        }\n        confirmationUrl\n      }\n    }`,\n    \"variables\": {\n      \"name\": \"1000 imported orders.\",\n      \"returnUrl\": \"http://super-duper.shopifyapps.com/\",\n      \"price\": {\n        \"amount\": 10.0,\n        \"currencyCode\": \"USD\"\n      }\n    },\n  },\n});\n"}]}, {"name": "appSubscriptionCancel", "description": "Cancels an app subscription on a store.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of the app subscription to be cancelled."}, {"name": "prorate", "type": "Boolean", "required": false, "description": "Whether to issue prorated credits for the unused portion of the app subscription.  There will\nbe a corresponding deduction (based on revenue share) to your Partner account.\nFor example, if a $10.00 app subscription (with 0% revenue share) is cancelled and prorated half way\nthrough the billing cycle, then the merchant will be credited $5.00 and that amount will be deducted\nfrom your Partner account."}], "returns": [], "examples": [{"description": "Cancel an app subscription on a shop and issue prorated credits", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation AppSubscriptionCancel($id: ID!, $prorate: Boolean) {\n      appSubscriptionCancel(id: $id, prorate: $prorate) {\n        userErrors {\n          field\n          message\n        }\n        appSubscription {\n          id\n          status\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/AppSubscription/1029266957\",\n      \"prorate\": true\n    },\n  },\n});\n"}, {"description": "Cancels a recurring application charge", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation AppSubscriptionCancel($id: ID!) {\n      appSubscriptionCancel(id: $id) {\n        userErrors {\n          field\n          message\n        }\n        appSubscription {\n          id\n          status\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/AppSubscription/1029266958\"\n    },\n  },\n});\n"}, {"description": "appSubscriptionCancel reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation AppSubscriptionCancel($id: ID!, $prorate: Boolean) {\n      appSubscriptionCancel(id: $id, prorate: $prorate) {\n        userErrors {\n          field\n          message\n        }\n        appSubscription {\n          id\n          status\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/AppSubscription/1029266957\",\n      \"prorate\": true\n    },\n  },\n});\n"}]}, {"name": "appSubscriptionCreate", "description": "Allows an app to charge a store for features or services on a recurring basis.", "arguments": [{"name": "lineItems", "type": "[AppSubscriptionLineItemInput!]!", "required": false, "description": "Attaches one or more pricing plans to an app subscription. Only one pricing plan can be defined for each available type."}, {"name": "name", "type": "String!", "required": false, "description": "A descriptive name for the app subscription."}, {"name": "replacementBehavior", "type": "AppSubscriptionReplacementBehavior", "required": false, "description": "The replacement behavior when creating an app subscription for a merchant with an already existing app subscription."}, {"name": "returnUrl", "type": "URL!", "required": false, "description": "The URL pointing to the page where the merchant is redirected after approving the app subscription."}, {"name": "test", "type": "Boolean", "required": false, "description": "Whether the app subscription is a test transaction."}, {"name": "trialDays", "type": "Int", "required": false, "description": "The number of days of the free trial period, beginning on the day that the merchant approves the app charges."}], "returns": [], "examples": [{"description": "Create a subscription for an app on a recurring pricing plan only.", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation AppSubscriptionCreate($name: String!, $lineItems: [AppSubscriptionLineItemInput!]!, $returnUrl: URL!) {\n      appSubscriptionCreate(name: $name, returnUrl: $returnUrl, lineItems: $lineItems) {\n        userErrors {\n          field\n          message\n        }\n        appSubscription {\n          id\n        }\n        confirmationUrl\n      }\n    }`,\n    \"variables\": {\n      \"name\": \"Super Duper Recurring Plan\",\n      \"returnUrl\": \"http://super-duper.shopifyapps.com/\",\n      \"lineItems\": [\n        {\n          \"plan\": {\n            \"appRecurringPricingDetails\": {\n              \"price\": {\n                \"amount\": 10.0,\n                \"currencyCode\": \"USD\"\n              },\n              \"interval\": \"EVERY_30_DAYS\"\n            }\n          }\n        }\n      ]\n    },\n  },\n});\n"}, {"description": "Create a subscription for an app on a usage pricing plan only.", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation AppSubscriptionCreate($name: String!, $lineItems: [AppSubscriptionLineItemInput!]!, $returnUrl: URL!) {\n      appSubscriptionCreate(name: $name, returnUrl: $returnUrl, lineItems: $lineItems) {\n        userErrors {\n          field\n          message\n        }\n        appSubscription {\n          id\n        }\n        confirmationUrl\n      }\n    }`,\n    \"variables\": {\n      \"name\": \"Super Duper Recurring Plan\",\n      \"returnUrl\": \"http://super-duper.shopifyapps.com/\",\n      \"lineItems\": [\n        {\n          \"plan\": {\n            \"appRecurringPricingDetails\": {\n              \"price\": {\n                \"amount\": 10.0,\n                \"currencyCode\": \"USD\"\n              },\n              \"interval\": \"EVERY_30_DAYS\"\n            }\n          }\n        }\n      ]\n    },\n  },\n});\n"}, {"description": "Create a subscription for an app on an annual recurring pricing plan.", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation AppSubscriptionCreate($name: String!, $lineItems: [AppSubscriptionLineItemInput!]!, $returnUrl: URL!) {\n      appSubscriptionCreate(name: $name, returnUrl: $returnUrl, lineItems: $lineItems) {\n        userErrors {\n          field\n          message\n        }\n        appSubscription {\n          id\n        }\n        confirmationUrl\n      }\n    }`,\n    \"variables\": {\n      \"name\": \"Super Duper Recurring Plan\",\n      \"returnUrl\": \"http://super-duper.shopifyapps.com/\",\n      \"lineItems\": [\n        {\n          \"plan\": {\n            \"appRecurringPricingDetails\": {\n              \"price\": {\n                \"amount\": 10.0,\n                \"currencyCode\": \"USD\"\n              },\n              \"interval\": \"EVERY_30_DAYS\"\n            }\n          }\n        }\n      ]\n    },\n  },\n});\n"}, {"description": "Create a subscription for an app on both a recurring pricing plan and usage pricing plan.", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation AppSubscriptionCreate($name: String!, $lineItems: [AppSubscriptionLineItemInput!]!, $returnUrl: URL!) {\n      appSubscriptionCreate(name: $name, returnUrl: $returnUrl, lineItems: $lineItems) {\n        userErrors {\n          field\n          message\n        }\n        appSubscription {\n          id\n        }\n        confirmationUrl\n      }\n    }`,\n    \"variables\": {\n      \"name\": \"Super Duper Recurring Plan\",\n      \"returnUrl\": \"http://super-duper.shopifyapps.com/\",\n      \"lineItems\": [\n        {\n          \"plan\": {\n            \"appRecurringPricingDetails\": {\n              \"price\": {\n                \"amount\": 10.0,\n                \"currencyCode\": \"USD\"\n              },\n              \"interval\": \"EVERY_30_DAYS\"\n            }\n          }\n        }\n      ]\n    },\n  },\n});\n"}, {"description": "Create a subscription with a fixed amount discount", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation AppSubscriptionCreate($name: String!, $lineItems: [AppSubscriptionLineItemInput!]!, $returnUrl: URL!) {\n      appSubscriptionCreate(name: $name, returnUrl: $returnUrl, lineItems: $lineItems) {\n        userErrors {\n          field\n          message\n        }\n        confirmationUrl\n        appSubscription {\n          id\n        }\n      }\n    }`,\n    \"variables\": {\n      \"name\": \"30 Day Recurring Plan\",\n      \"returnUrl\": \"https://review-app.shopifyapps.com\",\n      \"lineItems\": [\n        {\n          \"plan\": {\n            \"appRecurringPricingDetails\": {\n              \"price\": {\n                \"amount\": 40.0,\n                \"currencyCode\": \"USD\"\n              },\n              \"discount\": {\n                \"value\": {\n                  \"amount\": 5.0\n                },\n                \"durationLimitInIntervals\": 2\n              },\n              \"interval\": \"EVERY_30_DAYS\"\n            }\n          }\n        }\n      ]\n    },\n  },\n});\n"}, {"description": "Create a subscription with a free trial.", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation AppSubscriptionCreate($name: String!, $lineItems: [AppSubscriptionLineItemInput!]!, $returnUrl: URL!) {\n      appSubscriptionCreate(name: $name, returnUrl: $returnUrl, lineItems: $lineItems) {\n        userErrors {\n          field\n          message\n        }\n        appSubscription {\n          id\n        }\n        confirmationUrl\n      }\n    }`,\n    \"variables\": {\n      \"name\": \"Super Duper Recurring Plan\",\n      \"returnUrl\": \"http://super-duper.shopifyapps.com/\",\n      \"lineItems\": [\n        {\n          \"plan\": {\n            \"appRecurringPricingDetails\": {\n              \"price\": {\n                \"amount\": 10.0,\n                \"currencyCode\": \"USD\"\n              },\n              \"interval\": \"EVERY_30_DAYS\"\n            }\n          }\n        }\n      ]\n    },\n  },\n});\n"}, {"description": "Create a subscription with a percentage value discount", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation AppSubscriptionCreate($name: String!, $lineItems: [AppSubscriptionLineItemInput!]!, $returnUrl: URL!) {\n      appSubscriptionCreate(name: $name, returnUrl: $returnUrl, lineItems: $lineItems) {\n        userErrors {\n          field\n          message\n        }\n        confirmationUrl\n        appSubscription {\n          id\n        }\n      }\n    }`,\n    \"variables\": {\n      \"name\": \"30 Day Recurring Plan\",\n      \"returnUrl\": \"https://review-app.shopifyapps.com\",\n      \"lineItems\": [\n        {\n          \"plan\": {\n            \"appRecurringPricingDetails\": {\n              \"price\": {\n                \"amount\": 40.0,\n                \"currencyCode\": \"USD\"\n              },\n              \"discount\": {\n                \"value\": {\n                  \"percentage\": 0.2\n                },\n                \"durationLimitInIntervals\": 10\n              },\n              \"interval\": \"EVERY_30_DAYS\"\n            }\n          }\n        }\n      ]\n    },\n  },\n});\n"}, {"description": "Create a subscription with add-on modules", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation AppSubscriptionCreate($name: String!, $lineItems: [AppSubscriptionLineItemInput!]!, $returnUrl: URL!) {\n      appSubscriptionCreate(name: $name, returnUrl: $returnUrl, lineItems: $lineItems) {\n        userErrors {\n          field\n          message\n        }\n        confirmationUrl\n        appSubscription {\n          id\n        }\n      }\n    }`,\n    \"variables\": {\n      \"name\": \"Subscription for Module A and Module B\",\n      \"returnUrl\": \"http://super-duper.shopifyapps.com\",\n      \"lineItems\": [\n        {\n          \"plan\": {\n            \"appUsagePricingDetails\": {\n              \"terms\": \"$1 for 100 emails for Module B\",\n              \"cappedAmount\": {\n                \"amount\": 20.0,\n                \"currencyCode\": \"USD\"\n              }\n            }\n          }\n        },\n        {\n          \"plan\": {\n            \"appRecurringPricingDetails\": {\n              \"price\": {\n                \"amount\": 35.0,\n                \"currencyCode\": \"USD\"\n              }\n            }\n          }\n        }\n      ]\n    },\n  },\n});\n"}, {"description": "Creates a recurring application charge", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation AppSubscriptionCreate($name: String!, $lineItems: [AppSubscriptionLineItemInput!]!, $returnUrl: URL!) {\n      appSubscriptionCreate(name: $name, returnUrl: $returnUrl, lineItems: $lineItems) {\n        userErrors {\n          field\n          message\n        }\n        confirmationUrl\n        appSubscription {\n          id\n        }\n      }\n    }`,\n    \"variables\": {\n      \"name\": \"Super Duper Recurring Plan\",\n      \"returnUrl\": \"http://super-duper.shopifyapps.com\",\n      \"lineItems\": [\n        {\n          \"plan\": {\n            \"appRecurringPricingDetails\": {\n              \"price\": {\n                \"amount\": 10.0,\n                \"currencyCode\": \"USD\"\n              },\n              \"interval\": \"EVERY_30_DAYS\"\n            }\n          }\n        }\n      ]\n    },\n  },\n});\n"}]}, {"name": "appSubscriptionLineItemUpdate", "description": "Updates the capped amount on the usage pricing plan of an app subscription line item.", "arguments": [{"name": "cappedAmount", "type": "MoneyInput!", "required": false, "description": "The new maximum amount of usage charges that can be incurred within a subscription billing interval."}, {"name": "id", "type": "ID!", "required": false, "description": "The ID of the app subscription line item to be updated."}], "returns": [], "examples": [{"description": "Updates the capped amount of a recurring application charge", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation appSubscriptionLineItemUpdate($cappedAmount: MoneyInput!, $id: ID!) {\n      appSubscriptionLineItemUpdate(cappedAmount: $cappedAmount, id: $id) {\n        userErrors {\n          field\n          message\n        }\n        confirmationUrl\n        appSubscription {\n          id\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/AppSubscriptionLineItem/1029266946?v=1&index=1\",\n      \"cappedAmount\": {\n        \"amount\": 100.0,\n        \"currencyCode\": \"USD\"\n      }\n    },\n  },\n});\n"}, {"description": "appSubscriptionLineItemUpdate reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation appSubscriptionLineItemUpdate($cappedAmount: MoneyInput!, $id: ID!) {\n      appSubscriptionLineItemUpdate(cappedAmount: $cappedAmount, id: $id) {\n        userErrors {\n          field\n          message\n        }\n        confirmationUrl\n        appSubscription {\n          id\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/AppSubscriptionLineItem/1029266946?v=1&index=1\",\n      \"cappedAmount\": {\n        \"amount\": 100.0,\n        \"currencyCode\": \"USD\"\n      }\n    },\n  },\n});\n"}]}, {"name": "appSubscriptionTrialExtend", "description": "Extends the trial of an app subscription.", "arguments": [{"name": "days", "type": "Int!", "required": false, "description": "The number of days to extend the trial. The value must be greater than 0 and less than or equal to 1000."}, {"name": "id", "type": "ID!", "required": false, "description": "The ID of the app subscription to extend the trial for."}], "returns": [], "examples": [{"description": "Extend an app subscription for a shop", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation AppSubscriptionTrialExtend($id: ID!, $days: Int!) {\n      appSubscriptionTrialExtend(id: $id, days: $days) {\n        userErrors {\n          field\n          message\n          code\n        }\n        appSubscription {\n          id\n          status\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/AppSubscription/443388186\",\n      \"days\": 10\n    },\n  },\n});\n"}, {"description": "appSubscriptionTrialExtend reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation AppSubscriptionTrialExtend($id: ID!, $days: Int!) {\n      appSubscriptionTrialExtend(id: $id, days: $days) {\n        userErrors {\n          field\n          message\n          code\n        }\n        appSubscription {\n          id\n          status\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/AppSubscription/443388186\",\n      \"days\": 10\n    },\n  },\n});\n"}]}, {"name": "appUsageRecordCreate", "description": "Enables an app to charge a store for features or services on a per-use basis.\nThe usage charge value is counted towards the cappedAmount limit that was specified in the appUsagePricingDetails field when the app subscription was created.\nIf you create an app usage charge that causes the total usage charges in a billing interval to exceed the capped amount, then a Total price exceeds balance remaining error is returned.", "arguments": [{"name": "description", "type": "String!", "required": false, "description": "The description of the app usage record."}, {"name": "idempotencyKey", "type": "String", "required": false, "description": "A unique key generated by the client to avoid duplicate charges. Maximum length of 255 characters."}, {"name": "price", "type": "MoneyInput!", "required": false, "description": "The price of the app usage record."}, {"name": "subscriptionLineItemId", "type": "ID!", "required": false, "description": "The ID of the app subscription line item to create the usage record under. This app subscription line item must have a usage pricing plan."}], "returns": [], "examples": [{"description": "Creates a usage charge", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation appUsageRecordCreate($description: String!, $price: MoneyInput!, $subscriptionLineItemId: ID!) {\n      appUsageRecordCreate(description: $description, price: $price, subscriptionLineItemId: $subscriptionLineItemId) {\n        userErrors {\n          field\n          message\n        }\n        appUsageRecord {\n          id\n        }\n      }\n    }`,\n    \"variables\": {\n      \"subscriptionLineItemId\": \"gid://shopify/AppSubscriptionLineItem/1029266946?v=1&index=1\",\n      \"price\": {\n        \"amount\": 1.0,\n        \"currencyCode\": \"USD\"\n      },\n      \"description\": \"Super Mega Plan 1000 emails\"\n    },\n  },\n});\n"}, {"description": "Creating a usage record above the capped amount returns an error", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation appUsageRecordCreate($description: String!, $price: MoneyInput!, $subscriptionLineItemId: ID!) {\n      appUsageRecordCreate(description: $description, price: $price, subscriptionLineItemId: $subscriptionLineItemId) {\n        userErrors {\n          field\n          message\n        }\n        appUsageRecord {\n          id\n        }\n      }\n    }`,\n    \"variables\": {\n      \"subscriptionLineItemId\": \"gid://shopify/AppSubscriptionLineItem/1029266946?v=1&index=1\",\n      \"price\": {\n        \"amount\": 100.0,\n        \"currencyCode\": \"USD\"\n      },\n      \"description\": \"Super Mega Plan 1000 emails\"\n    },\n  },\n});\n"}, {"description": "Creating usage record with idempotency key exceeding 255 characters results in an error.", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation appUsageRecordCreate($description: String!, $price: MoneyInput!, $subscriptionLineItemId: ID!) {\n      appUsageRecordCreate(description: $description, price: $price, subscriptionLineItemId: $subscriptionLineItemId) {\n        userErrors {\n          field\n          message\n        }\n        appUsageRecord {\n          id\n        }\n      }\n    }`,\n    \"variables\": {\n      \"subscriptionLineItemId\": \"gid://shopify/AppSubscriptionLineItem/1029266946?v=1&index=1\",\n      \"price\": {\n        \"amount\": 1.0,\n        \"currencyCode\": \"USD\"\n      },\n      \"description\": \"Super Mega Plan 1000 emails\"\n    },\n  },\n});\n"}, {"description": "appUsageRecordCreate reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation appUsageRecordCreate($description: String!, $price: MoneyInput!, $subscriptionLineItemId: ID!) {\n      appUsageRecordCreate(description: $description, price: $price, subscriptionLineItemId: $subscriptionLineItemId) {\n        userErrors {\n          field\n          message\n        }\n        appUsageRecord {\n          id\n        }\n      }\n    }`,\n    \"variables\": {\n      \"subscriptionLineItemId\": \"gid://shopify/AppSubscriptionLineItem/1029266946?v=1&index=1\",\n      \"price\": {\n        \"amount\": 1.0,\n        \"currencyCode\": \"USD\"\n      },\n      \"description\": \"Super Mega Plan 1000 emails\"\n    },\n  },\n});\n"}]}], "objects": [{"name": "AppCredit", "description": "App credits can be applied by the merchant towards future app purchases, subscriptions, or usage records in Shopify.", "fields_and_connections": [{"name": "amount", "type": "Node", "description": "The amount that can be used towards future app purchases in Shopify.", "not_nullable": false}], "examples": []}, {"name": "AppPlanV2", "description": "The app plan that the merchant is subscribed to.", "fields_and_connections": [{"name": "pricingDetails", "type": "AppPricingDetails!", "description": "The plan billed to a shop on a recurring basis.", "not_nullable": true}], "examples": []}, {"name": "AppPurchaseOneTime", "description": "Services and features purchased once by a store.", "fields_and_connections": [{"name": "createdAt", "type": "appPurchaseOneTimeCreate", "description": "Charges a shop for features or services one time.\nThis type of charge is recommended for apps that aren't billed on a recurring basis.\nTest and demo shops aren't charged.", "not_nullable": false}, {"name": "createdAt", "type": "AppPurchase", "description": "The date and time when the app purchase occurred.", "not_nullable": false}, {"name": "createdAt", "type": "Node", "description": "The date and time when the app purchase occurred.", "not_nullable": false}], "examples": []}, {"name": "AppRecurringPricing", "description": "The pricing information about a subscription app.\nThe object contains an interval (the frequency at which the shop is billed for an app subscription) and\na price (the amount to be charged to the subscribing shop at each interval).", "fields_and_connections": [{"name": "discount", "type": "AppSubscriptionDiscount", "description": "The discount applied to the subscription for a given number of billing intervals.", "not_nullable": false}, {"name": "interval", "type": "AppPricingInterval!", "description": "The frequency at which the subscribing shop is billed for an app subscription.", "not_nullable": true}, {"name": "planHandle", "type": "String", "description": "The app store pricing plan handle.", "not_nullable": false}, {"name": "price", "type": "MoneyV2!", "description": "The amount and currency to be charged to the subscribing shop every billing interval.", "not_nullable": true}], "examples": []}, {"name": "AppRevenueAttributionRecord", "description": "Represents app revenue that was captured externally by the partner.", "fields_and_connections": [{"name": "amount", "type": "Node", "description": "The financial amount captured in this attribution.", "not_nullable": false}], "examples": []}, {"name": "AppSubscription", "description": "Provides users access to services and/or features for a duration of time.", "fields_and_connections": [{"name": "createdAt", "type": "appSubscriptionCancel", "description": "Cancels an app subscription on a store.", "not_nullable": false}, {"name": "createdAt", "type": "appSubscriptionCreate", "description": "Allows an app to charge a store for features or services on a recurring basis.", "not_nullable": false}, {"name": "createdAt", "type": "appSubscriptionLineItemUpdate", "description": "Updates the capped amount on the usage pricing plan of an app subscription line item.", "not_nullable": false}, {"name": "createdAt", "type": "appSubscriptionTrialExtend", "description": "Extends the trial of an app subscription.", "not_nullable": false}, {"name": "createdAt", "type": "Node", "description": "The date and time when the app subscription was created.", "not_nullable": false}], "examples": []}, {"name": "AppSubscriptionDiscount", "description": "Discount applied to the recurring pricing portion of a subscription.", "fields_and_connections": [{"name": "durationLimitInIntervals", "type": "Int", "description": "The total number of billing intervals to which the discount will be applied.\nThe discount will be applied to an indefinite number of billing intervals if this value is blank.", "not_nullable": false}, {"name": "priceAfterDiscount", "type": "MoneyV2!", "description": "The price of the subscription after the discount is applied.", "not_nullable": true}, {"name": "remainingDurationInIntervals", "type": "Int", "description": "The remaining number of billing intervals to which the discount will be applied.", "not_nullable": false}, {"name": "value", "type": "AppSubscriptionDiscountValue!", "description": "The value of the discount applied every billing interval.", "not_nullable": true}], "examples": []}, {"name": "AppSubscriptionDiscountAmount", "description": "The fixed amount value of a discount.", "fields_and_connections": [{"name": "amount", "type": "MoneyV2!", "description": "The fixed amount value of a discount.", "not_nullable": true}], "examples": []}, {"name": "AppSubscriptionDiscountPercentage", "description": "The percentage value of a discount.", "fields_and_connections": [{"name": "percentage", "type": "Float!", "description": "The percentage value of a discount.", "not_nullable": true}], "examples": []}, {"name": "AppSubscriptionLineItem", "description": "The plan attached to an app subscription.", "fields_and_connections": [{"name": "id", "type": "ID!", "description": "A globally-unique ID.", "not_nullable": true}, {"name": "plan", "type": "AppPlanV2!", "description": "The pricing model for the app subscription.", "not_nullable": true}, {"name": "usageRecords", "type": "AppUsageRecordConnection!", "description": "A list of the store's usage records for a usage pricing plan.", "not_nullable": true}], "examples": []}, {"name": "AppUsagePricing", "description": "Defines a usage pricing model for the app subscription.\nThese charges are variable based on how much the merchant uses the app.", "fields_and_connections": [{"name": "balanceUsed", "type": "MoneyV2!", "description": "The total usage records for interval.", "not_nullable": true}, {"name": "cappedAmount", "type": "MoneyV2!", "description": "The capped amount prevents the merchant from being charged for any usage over that amount during a billing period.\nThis prevents billing from exceeding a maximum threshold over the duration of the billing period.\nFor the merchant to continue using the app after exceeding a capped amount, they would need to agree to a new usage charge.", "not_nullable": true}, {"name": "interval", "type": "AppPricingInterval!", "description": "The frequency with which the app usage records are billed.", "not_nullable": true}, {"name": "terms", "type": "String!", "description": "The terms and conditions for app usage pricing.\nMust be present in order to create usage charges.\nThe terms are presented to the merchant when they approve an app's usage charges.", "not_nullable": true}], "examples": []}, {"name": "AppUsageRecord", "description": "Store usage for app subscriptions with usage pricing.", "fields_and_connections": [{"name": "createdAt", "type": "appUsageRecordCreate", "description": "Enables an app to charge a store for features or services on a per-use basis.\nThe usage charge value is counted towards the cappedAmount limit that was specified in the appUsagePricingDetails field when the app subscription was created.\nIf you create an app usage charge that causes the total usage charges in a billing interval to exceed the capped amount, then a Total price exceeds balance remaining error is returned.", "not_nullable": false}, {"name": "createdAt", "type": "Node", "description": "The date and time when the usage record was created.", "not_nullable": false}], "examples": []}, {"name": "EntitlementsType", "description": "The shop's entitlements.", "fields_and_connections": [{"name": "markets", "type": "MarketsType!", "description": "Represents the markets for the shop.", "not_nullable": true}], "examples": []}, {"name": "MarketsType", "description": "Markets entitlement information.", "fields_and_connections": [{"name": "b2b", "type": "MarketsB2BEntitlement!", "description": "The entitlements for B2B markets.", "not_nullable": true}, {"name": "regions", "type": "MarketsRegionsEntitlement!", "description": "The entitlements for region markets.", "not_nullable": true}, {"name": "retail", "type": "MarketsRetailEntitlement!", "description": "The entitlements for retail markets.", "not_nullable": true}, {"name": "themes", "type": "MarketsThemesEntitlement!", "description": "The entitlements for themes.", "not_nullable": true}], "examples": []}, {"name": "ShopBillingPreferences", "description": "Billing preferences for the shop.", "fields_and_connections": [{"name": "currency", "type": "shopBillingPreferences", "description": "The shop's billing preferences.", "not_nullable": false}], "examples": []}]}, {"name": "Bulk operations", "queries": [{"name": "currentBulkOperation", "description": "Returns the current app's most recent BulkOperation. Apps can run one bulk query and one bulk mutation operation at a time, by shop.", "arguments": [{"name": "type", "type": "BulkOperationType", "required": false, "description": "The current bulk operation's type."}], "returns": [], "examples": []}], "mutations": [{"name": "bulkOperationCancel", "description": "Starts the cancelation process of a running bulk operation.\nThere may be a short delay from when a cancelation starts until the operation is actually canceled.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of the bulk operation to cancel."}], "returns": [], "examples": []}, {"name": "bulkOperationRunMutation", "description": "Creates and runs a bulk operation mutation.\nTo learn how to bulk import large volumes of data asynchronously, refer to the\nbulk import data guide.", "arguments": [{"name": "clientIdentifier", "type": "String", "required": false, "description": "An optional identifier which may be used for querying."}, {"name": "mutation", "type": "String!", "required": false, "description": "The mutation to be executed in bulk."}, {"name": "stagedUploadPath", "type": "String!", "required": false, "description": "The staged upload path of the file containing mutation variables."}], "returns": [], "examples": []}, {"name": "bulkOperationRunQuery", "description": "Creates and runs a bulk operation query.\nSee the bulk operations guide for more details.", "arguments": [{"name": "query", "type": "String!", "required": false, "description": "The query to be executed in bulk."}], "returns": [], "examples": []}], "objects": [{"name": "BulkOperation", "description": "An asynchronous long-running operation to fetch data in bulk or to bulk import data.\nBulk operations are created using the bulkOperationRunQuery or bulkOperationRunMutation mutation. After\nthey are created, clients should poll the status field for updates. When COMPLETED, the url field contains\na link to the data in JSONL format.\nRefer to the bulk operations guide for more details.", "fields_and_connections": [{"name": "completedAt", "type": "currentBulkOperation", "description": "Returns the current app's most recent BulkOperation. Apps can run one bulk query and one bulk mutation operation at a time, by shop.", "not_nullable": false}, {"name": "completedAt", "type": "bulkOperationCancel", "description": "Starts the cancelation process of a running bulk operation.\nThere may be a short delay from when a cancelation starts until the operation is actually canceled.", "not_nullable": false}, {"name": "completedAt", "type": "bulkOperationRunMutation", "description": "Creates and runs a bulk operation mutation.\nTo learn how to bulk import large volumes of data asynchronously, refer to the\nbulk import data guide.", "not_nullable": false}, {"name": "completedAt", "type": "bulkOperationRunQuery", "description": "Creates and runs a bulk operation query.\nSee the bulk operations guide for more details.", "not_nullable": false}, {"name": "completedAt", "type": "Node", "description": "When the bulk operation was successfully completed.", "not_nullable": false}], "examples": []}]}, {"name": "Cart", "queries": [{"name": "cartTransforms", "description": "List of Cart transform objects owned by the current API client.", "arguments": [{"name": "after", "type": "String", "required": false, "description": "The elements that come after the specified cursor."}, {"name": "before", "type": "String", "required": false, "description": "The elements that come before the specified cursor."}, {"name": "first", "type": "Int", "required": false, "description": "The first n elements from the paginated list."}, {"name": "last", "type": "Int", "required": false, "description": "The last n elements from the paginated list."}, {"name": "reverse", "type": "Boolean", "required": false, "description": "Reverse the order of the underlying list."}], "returns": [], "examples": []}], "mutations": [{"name": "cartTransformCreate", "description": "Create a CartTransform function to the Shop.", "arguments": [{"name": "blockOnFailure", "type": "Boolean", "required": false, "description": "Whether a run failure should block cart and checkout operations."}, {"name": "functionId", "type": "String!", "required": false, "description": "The identifier of the Function providing the cart transform."}, {"name": "metafields", "type": "[MetafieldInput!]", "required": false, "description": "Additional metafields to associate to the cart transform."}], "returns": [], "examples": []}, {"name": "cartTransformDelete", "description": "Destroy a cart transform function from the Shop.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "A globally-unique identifier for the cart transform."}], "returns": [], "examples": []}], "objects": [{"name": "CartTransform", "description": "A Cart Transform Function to create Customized Bundles..", "fields_and_connections": [{"name": "blockOnFailure", "type": "cartTransforms", "description": "List of Cart transform objects owned by the current API client.", "not_nullable": false}, {"name": "blockOnFailure", "type": "cartTransformCreate", "description": "Create a CartTransform function to the Shop.", "not_nullable": false}, {"name": "blockOnFailure", "type": "HasMetafields", "description": "Whether a run failure will block cart and checkout operations.", "not_nullable": false}, {"name": "blockOnFailure", "type": "Node", "description": "Whether a run failure will block cart and checkout operations.", "not_nullable": false}], "examples": []}]}, {"name": "Checkout branding", "queries": [{"name": "checkoutBranding", "description": "Returns the visual customizations for checkout for a given checkout profile.\nTo learn more about updating checkout branding settings, refer to the\ncheckoutBrandingUpsert\nmutation and the checkout branding tutorial.", "arguments": [{"name": "checkoutProfileId", "type": "ID!", "required": false, "description": "A globally-unique identifier."}], "returns": [], "examples": []}], "mutations": [{"name": "checkoutBrandingUpsert", "description": "Updates the checkout branding settings for a\ncheckout profile.\nIf the settings don't exist, then new settings are created. The checkout branding settings applied to a\npublished checkout profile will be immediately visible within the store's checkout. The checkout branding\nsettings applied to a draft checkout profile could be previewed within the admin checkout editor.\nTo learn more about updating checkout branding settings, refer to the checkout branding\ntutorial.", "arguments": [{"name": "checkoutBrandingInput", "type": "CheckoutBrandingInput", "required": false, "description": "The input fields to use to upsert the checkout branding settings (pass null to reset them to default)."}, {"name": "checkoutProfileId", "type": "ID!", "required": false, "description": "A globally-unique identifier."}], "returns": [], "examples": [{"description": "Apply section styles to main and order summary", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation ApplySectionStyles($checkoutProfileId: ID!, $input: CheckoutBrandingInput!) {\n      checkoutBrandingUpsert(checkoutProfileId: $checkoutProfileId, checkoutBrandingInput: $input) {\n        checkoutBranding {\n          customizations {\n            main {\n              section {\n                cornerRadius\n                colorScheme\n                shadow\n                padding\n              }\n            }\n            orderSummary {\n              section {\n                colorScheme\n                shadow\n                padding\n                border\n              }\n            }\n          }\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"checkoutProfileId\": \"gid://shopify/CheckoutProfile/235093654\",\n      \"input\": {\n        \"customizations\": {\n          \"main\": {\n            \"section\": {\n              \"cornerRadius\": \"LARGE\",\n              \"colorScheme\": \"COLOR_SCHEME2\",\n              \"shadow\": \"LARGE_200\",\n              \"padding\": \"LARGE_400\"\n            }\n          },\n          \"orderSummary\": {\n            \"section\": {\n              \"colorScheme\": \"COLOR_SCHEME1\",\n              \"shadow\": \"LARGE_200\",\n              \"padding\": \"LARGE_400\",\n              \"border\": \"FULL\"\n            }\n          }\n        }\n      }\n    },\n  },\n});\n"}, {"description": "Modify a color scheme", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation ChangeScheme2Colors($checkoutProfileId: ID!, $input: CheckoutBrandingInput!) {\n      checkoutBrandingUpsert(checkoutProfileId: $checkoutProfileId, checkoutBrandingInput: $input) {\n        checkoutBranding {\n          designSystem {\n            colors {\n              schemes {\n                scheme2 {\n                  base {\n                    background\n                    text\n                  }\n                }\n              }\n            }\n          }\n        }\n        userErrors {\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"checkoutProfileId\": \"gid://shopify/CheckoutProfile/235093654\",\n      \"input\": {\n        \"designSystem\": {\n          \"colors\": {\n            \"schemes\": {\n              \"scheme2\": {\n                \"base\": {\n                  \"background\": \"#cdf7f3\",\n                  \"text\": \"#1f2928\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n  },\n});\n"}, {"description": "Modify checkout font settings", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation SetShopifyFonts($checkoutProfileId: ID!, $input: CheckoutBrandingInput!) {\n      checkoutBrandingUpsert(checkoutProfileId: $checkoutProfileId, checkoutBrandingInput: $input) {\n        checkoutBranding {\n          designSystem {\n            typography {\n              size {\n                base\n                ratio\n              }\n              primary {\n                name\n                base {\n                  weight\n                }\n                bold {\n                  weight\n                }\n              }\n              secondary {\n                name\n                base {\n                  weight\n                }\n                bold {\n                  weight\n                }\n              }\n            }\n          }\n        }\n        userErrors {\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"checkoutProfileId\": \"gid://shopify/CheckoutProfile/235093654\",\n      \"input\": {\n        \"designSystem\": {\n          \"typography\": {\n            \"primary\": {\n              \"shopifyFontGroup\": {\n                \"name\": \"Univers Next\"\n              }\n            },\n            \"secondary\": {\n              \"shopifyFontGroup\": {\n                \"name\": \"Univers Next\"\n              }\n            }\n          }\n        }\n      }\n    },\n  },\n});\n"}, {"description": "Modify global colors", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation ChangeGlobalColors($checkoutProfileId: ID!, $input: CheckoutBrandingInput!) {\n      checkoutBrandingUpsert(checkoutProfileId: $checkoutProfileId, checkoutBrandingInput: $input) {\n        checkoutBranding {\n          designSystem {\n            colors {\n              global {\n                success\n                warning\n                critical\n                info\n                brand\n                accent\n                decorative\n              }\n            }\n          }\n        }\n        userErrors {\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"checkoutProfileId\": \"gid://shopify/CheckoutProfile/235093654\",\n      \"input\": {\n        \"designSystem\": {\n          \"colors\": {\n            \"global\": {\n              \"success\": \"#38e004\",\n              \"warning\": \"#e0e004\",\n              \"critical\": \"#e00404\",\n              \"info\": \"#04e0e0\",\n              \"brand\": \"#e004e0\",\n              \"accent\": \"#04e004\",\n              \"decorative\": \"#e0e0e0\"\n            }\n          }\n        }\n      }\n    },\n  },\n});\n"}, {"description": "Reset all styling to defaults", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation ChangeColorSchemeAndOrderSummary($checkoutBrandingInput: CheckoutBrandingInput, $checkoutProfileId: ID!) {\n      checkoutBrandingUpsert(checkoutBrandingInput: $checkoutBrandingInput, checkoutProfileId: $checkoutProfileId) {\n        checkoutBranding {\n          designSystem {\n            colors {\n              schemes {\n                scheme1 {\n                  base {\n                    background\n                    text\n                  }\n                }\n              }\n            }\n          }\n          customizations {\n            orderSummary {\n              colorScheme\n            }\n          }\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"checkoutProfileId\": \"gid://shopify/CheckoutProfile/235093654\",\n      \"checkoutBrandingInput\": null\n    },\n  },\n});\n"}, {"description": "Reset color schemes to the defaults", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation ChangeColorScheme1($checkoutBrandingInput: CheckoutBrandingInput!, $checkoutProfileId: ID!) {\n      checkoutBrandingUpsert(checkoutBrandingInput: $checkoutBrandingInput, checkoutProfileId: $checkoutProfileId) {\n        checkoutBranding {\n          designSystem {\n            colors {\n              schemes {\n                scheme1 {\n                  base {\n                    background\n                    text\n                  }\n                  control {\n                    background\n                    border\n                    selected {\n                      background\n                      border\n                    }\n                  }\n                  primaryButton {\n                    hover {\n                      background\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"checkoutProfileId\": \"gid://shopify/CheckoutProfile/235093654\",\n      \"checkoutBrandingInput\": {\n        \"designSystem\": {\n          \"colors\": {\n            \"schemes\": null\n          }\n        }\n      }\n    },\n  },\n});\n"}, {"description": "Set a checkout logo", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation SetLogo($checkoutProfileId: ID!, $input: CheckoutBrandingInput!) {\n      checkoutBrandingUpsert(checkoutProfileId: $checkoutProfileId, checkoutBrandingInput: $input) {\n        checkoutBranding {\n          customizations {\n            header {\n              logo {\n                image {\n                  url\n                }\n              }\n            }\n          }\n        }\n        userErrors {\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"checkoutProfileId\": \"gid://shopify/CheckoutProfile/235093654\",\n      \"input\": {\n        \"customizations\": {\n          \"header\": {\n            \"logo\": {\n              \"image\": {\n                \"mediaImageId\": null\n              }\n            }\n          }\n        }\n      }\n    },\n  },\n});\n"}, {"description": "checkoutBrandingUpsert reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation ApplySectionStyles($checkoutProfileId: ID!, $input: CheckoutBrandingInput!) {\n      checkoutBrandingUpsert(checkoutProfileId: $checkoutProfileId, checkoutBrandingInput: $input) {\n        checkoutBranding {\n          customizations {\n            main {\n              section {\n                cornerRadius\n                colorScheme\n                shadow\n                padding\n              }\n            }\n            orderSummary {\n              section {\n                colorScheme\n                shadow\n                padding\n                border\n              }\n            }\n          }\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"checkoutProfileId\": \"gid://shopify/CheckoutProfile/235093654\",\n      \"input\": {\n        \"customizations\": {\n          \"main\": {\n            \"section\": {\n              \"cornerRadius\": \"LARGE\",\n              \"colorScheme\": \"COLOR_SCHEME2\",\n              \"shadow\": \"LARGE_200\",\n              \"padding\": \"LARGE_400\"\n            }\n          },\n          \"orderSummary\": {\n            \"section\": {\n              \"colorScheme\": \"COLOR_SCHEME1\",\n              \"shadow\": \"LARGE_200\",\n              \"padding\": \"LARGE_400\",\n              \"border\": \"FULL\"\n            }\n          }\n        }\n      }\n    },\n  },\n});\n"}]}], "objects": [{"name": "CheckoutBranding", "description": "The settings of checkout visual customizations.\nTo learn more about updating checkout branding settings, refer to the\ncheckoutBrandingUpsert mutation.", "fields_and_connections": [{"name": "customizations", "type": "checkoutBranding", "description": "Returns the visual customizations for checkout for a given checkout profile.\nTo learn more about updating checkout branding settings, refer to the\ncheckoutBrandingUpsert\nmutation and the checkout branding tutorial.", "not_nullable": false}, {"name": "customizations", "type": "checkoutBrandingUpsert", "description": "Updates the checkout branding settings for a\ncheckout profile.\nIf the settings don't exist, then new settings are created. The checkout branding settings applied to a\npublished checkout profile will be immediately visible within the store's checkout. The checkout branding\nsettings applied to a draft checkout profile could be previewed within the admin checkout editor.\nTo learn more about updating checkout branding settings, refer to the checkout branding\ntutorial.", "not_nullable": false}], "examples": []}, {"name": "CheckoutBrandingControl", "description": "The form controls customizations.", "fields_and_connections": [{"name": "border", "type": "CheckoutBrandingSimpleBorder", "description": "The border used for form controls.", "not_nullable": false}, {"name": "color", "type": "CheckoutBrandingColorSelection", "description": "Set to TRANSPARENT to define transparent form controls. If null, form controls inherit colors from their scheme settings (for example, the main section inherits from design_system.colors.schemes.scheme1.control by default). Note that usage of the customizations.control.color setting to customize the form control color is deprecated.", "not_nullable": false}, {"name": "cornerRadius", "type": "CheckoutBrandingCornerRadius", "description": "The corner radius used for form controls.", "not_nullable": false}, {"name": "labelPosition", "type": "CheckoutBrandingLabelPosition", "description": "The label position used for form controls.", "not_nullable": false}], "examples": []}, {"name": "CheckoutBrandingCustomizations", "description": "The customizations that apply to specific components or areas of the user interface.", "fields_and_connections": [{"name": "buyerJourney", "type": "CheckoutBrandingBuyerJourney", "description": "The customizations for the breadcrumbs that represent a buyer's journey to the checkout.", "not_nullable": false}, {"name": "cartLink", "type": "CheckoutBrandingCartLink", "description": "The checkout cart link customizations. For example, by setting the visibility field to HIDDEN, you can hide the cart icon in the header for one-page checkout, and the cart link in breadcrumbs in three-page checkout.", "not_nullable": false}, {"name": "checkbox", "type": "CheckoutBrandingCheckbox", "description": "The checkboxes customizations.", "not_nullable": false}, {"name": "choiceList", "type": "CheckoutBrandingChoiceList", "description": "The choice list customizations.", "not_nullable": false}, {"name": "content", "type": "CheckoutBrandingContent", "description": "The content container customizations.", "not_nullable": false}, {"name": "control", "type": "CheckoutBrandingControl", "description": "The form controls customizations.", "not_nullable": false}, {"name": "divider", "type": "CheckoutBrandingDividerStyle", "description": "The customizations for the page, content, main, and order summary dividers. For example, by setting the borderStyle to DOTTED, you can make these dividers render as dotted lines.", "not_nullable": false}, {"name": "expressCheckout", "type": "CheckoutBrandingExpressCheckout", "description": "The express checkout customizations.", "not_nullable": false}, {"name": "favicon", "type": "CheckoutBrandingImage", "description": "The favicon image.", "not_nullable": false}, {"name": "footer", "type": "CheckoutBrandingFooter", "description": "The footer customizations.", "not_nullable": false}, {"name": "global", "type": "CheckoutBrandingGlobal", "description": "The global customizations.", "not_nullable": false}, {"name": "header", "type": "CheckoutBrandingHeader", "description": "The header customizations.", "not_nullable": false}, {"name": "headingLevel1", "type": "CheckoutBrandingHeadingLevel", "description": "The Heading Level 1 customizations.", "not_nullable": false}, {"name": "headingLevel2", "type": "CheckoutBrandingHeadingLevel", "description": "The Heading Level 2 customizations.", "not_nullable": false}, {"name": "headingLevel3", "type": "CheckoutBrandingHeadingLevel", "description": "The Heading Level 3 customizations.", "not_nullable": false}, {"name": "main", "type": "CheckoutBrandingMain", "description": "The main area customizations.", "not_nullable": false}, {"name": "merchandiseThumbnail", "type": "CheckoutBrandingMerchandiseThumbnail", "description": "The merchandise thumbnails customizations.", "not_nullable": false}, {"name": "orderSummary", "type": "CheckoutBrandingOrderSummary", "description": "The order summary customizations.", "not_nullable": false}, {"name": "primaryButton", "type": "CheckoutBrandingButton", "description": "The primary buttons customizations.", "not_nullable": false}, {"name": "secondaryButton", "type": "CheckoutBrandingButton", "description": "The secondary buttons customizations.", "not_nullable": false}, {"name": "select", "type": "CheckoutBrandingSelect", "description": "The selects customizations.", "not_nullable": false}, {"name": "textField", "type": "CheckoutBrandingTextField", "description": "The text fields customizations.", "not_nullable": false}], "examples": []}, {"name": "CheckoutBrandingDesignSystem", "description": "The design system allows you to set values that represent specific attributes\nof your brand like color and font. These attributes are used throughout the user\ninterface. This brings consistency and allows you to easily make broad design changes.", "fields_and_connections": [{"name": "colors", "type": "CheckoutBrandingColors", "description": "The color settings for global colors and color schemes.", "not_nullable": false}, {"name": "cornerRadius", "type": "CheckoutBrandingCornerRadiusVariables", "description": "The corner radius variables.", "not_nullable": false}, {"name": "typography", "type": "CheckoutBrandingTypography", "description": "The typography.", "not_nullable": false}], "examples": []}, {"name": "CheckoutBrandingFontGroup", "description": "A font group. To learn more about updating fonts, refer to the\ncheckoutBrandingUpsert\nmutation and the checkout branding tutorial.", "fields_and_connections": [{"name": "base", "type": "CheckoutBrandingFont", "description": "The base font.", "not_nullable": false}, {"name": "bold", "type": "CheckoutBrandingFont", "description": "The bold font.", "not_nullable": false}, {"name": "loadingStrategy", "type": "CheckoutBrandingFontLoadingStrategy", "description": "The font loading strategy.", "not_nullable": false}, {"name": "name", "type": "String", "description": "The font group name.", "not_nullable": false}], "examples": []}, {"name": "CheckoutBrandingFontSize", "description": "The font size.", "fields_and_connections": [{"name": "base", "type": "Float", "description": "The base font size.", "not_nullable": false}, {"name": "ratio", "type": "Float", "description": "The scale ratio used to derive all font sizes such as small and large.", "not_nullable": false}], "examples": []}, {"name": "CheckoutBrandingHeader", "description": "The header customizations.", "fields_and_connections": [{"name": "alignment", "type": "CheckoutBrandingHeaderAlignment", "description": "The header alignment.", "not_nullable": false}, {"name": "banner", "type": "CheckoutBrandingImage", "description": "The background image of the header.", "not_nullable": false}, {"name": "cartLink", "type": "CheckoutBrandingHeaderCartLink", "description": "The cart link customizations for 1-page checkout. This field allows to customize the cart icon that renders by default on 1-page checkout.", "not_nullable": false}, {"name": "colorScheme", "type": "CheckoutBrandingColorSchemeSelection", "description": "The selected color scheme of the header container.", "not_nullable": false}, {"name": "divided", "type": "Boolean", "description": "The divided setting.", "not_nullable": false}, {"name": "logo", "type": "CheckoutBrandingLogo", "description": "The store logo.", "not_nullable": false}, {"name": "padding", "type": "CheckoutBrandingSpacingKeyword", "description": "The padding of the header container.", "not_nullable": false}, {"name": "position", "type": "CheckoutBrandingHeaderPosition", "description": "The header position.", "not_nullable": false}], "examples": []}, {"name": "CheckoutBrandingImage", "description": "A checkout branding image.", "fields_and_connections": [{"name": "image", "type": "Image", "description": "The image details.", "not_nullable": false}], "examples": []}, {"name": "CheckoutBrandingLogo", "description": "The store logo customizations.", "fields_and_connections": [{"name": "image", "type": "Image", "description": "The logo image.", "not_nullable": false}, {"name": "maxWidth", "type": "Int", "description": "The maximum width of the logo.", "not_nullable": false}, {"name": "visibility", "type": "CheckoutBrandingVisibility", "description": "The visibility of the logo.", "not_nullable": false}], "examples": []}, {"name": "CheckoutBrandingMain", "description": "The main container customizations.", "fields_and_connections": [{"name": "backgroundImage", "type": "CheckoutBrandingImage", "description": "The background image of the main container.", "not_nullable": false}, {"name": "colorScheme", "type": "CheckoutBrandingColorSchemeSelection", "description": "The selected color scheme of the main container.", "not_nullable": false}, {"name": "divider", "type": "CheckoutBrandingContainerDivider", "description": "The main container's divider style and visibility.", "not_nullable": false}, {"name": "section", "type": "CheckoutBrandingMainSection", "description": "The settings for the main sections.", "not_nullable": false}], "examples": []}, {"name": "CheckoutBrandingOrderSummary", "description": "The order summary customizations.", "fields_and_connections": [{"name": "backgroundImage", "type": "CheckoutBrandingImage", "description": "The background image of the order summary container.", "not_nullable": false}, {"name": "colorScheme", "type": "CheckoutBrandingColorSchemeSelection", "description": "The selected color scheme of the order summary container.", "not_nullable": false}, {"name": "divider", "type": "CheckoutBrandingContainerDivider", "description": "The order summary container's divider style and visibility.", "not_nullable": false}, {"name": "section", "type": "CheckoutBrandingOrderSummarySection", "description": "The settings for the order summary sections.", "not_nullable": false}], "examples": []}, {"name": "CheckoutBrandingTypography", "description": "The typography settings used for checkout-related text. Use these settings to customize the\nfont family and size for primary and secondary text elements.\nRefer to the typography tutorial\nfor further information on typography customization.", "fields_and_connections": [{"name": "primary", "type": "CheckoutBrandingFontGroup", "description": "A font group used for most components such as text, buttons and form controls.", "not_nullable": false}, {"name": "secondary", "type": "CheckoutBrandingFontGroup", "description": "A font group used for heading components by default.", "not_nullable": false}, {"name": "size", "type": "CheckoutBrandingFontSize", "description": "The font size design system (base size in pixels and scaling between different sizes).", "not_nullable": false}], "examples": []}]}, {"name": "Common objects", "queries": [{"name": "abandonedCheckouts", "description": "List of abandoned checkouts. Includes checkouts that were recovered after being abandoned.", "arguments": [{"name": "after", "type": "String", "required": false, "description": "The elements that come after the specified cursor."}, {"name": "before", "type": "String", "required": false, "description": "The elements that come before the specified cursor."}, {"name": "first", "type": "Int", "required": false, "description": "The first n elements from the paginated list."}, {"name": "last", "type": "Int", "required": false, "description": "The last n elements from the paginated list."}, {"name": "query", "type": "String", "required": false, "description": "A filter made up of terms, connectives, modifiers, and comparators.\nYou can apply one or more filters to a query. Learn more about Shopify API search syntax."}, {"name": "reverse", "type": "Boolean", "required": false, "description": "Reverse the order of the underlying list."}, {"name": "savedSearchId", "type": "ID", "required": false, "description": "The ID of a saved search.\nThe search\u2019s query string is used as the query argument."}, {"name": "sortKey", "type": "AbandonedCheckoutSortKeys", "required": false, "description": "Sort the underlying list using a key. If your query is slow or returns an error, then try specifying a sort key that matches the field used in the search."}], "returns": [], "examples": []}, {"name": "abandonedCheckoutsCount", "description": "Returns the count of abandoned checkouts for the given shop. Limited to a maximum of 10000.", "arguments": [{"name": "limit", "type": "Int", "required": false, "description": "The upper bound on count value before returning a result."}, {"name": "query", "type": "String", "required": false, "description": "A filter made up of terms, connectives, modifiers, and comparators.\nYou can apply one or more filters to a query. Learn more about Shopify API search syntax."}, {"name": "savedSearchId", "type": "ID", "required": false, "description": "The ID of an existing saved search.\nThe search\u2019s query string is used as the query argument.\nRefer to the SavedSearch object."}], "returns": [], "examples": []}, {"name": "abandonmentByAbandonedCheckoutId", "description": "Returns an Abandonment by the Abandoned Checkout ID.", "arguments": [{"name": "abandonedCheckoutId", "type": "ID!", "required": false, "description": "The ID of the Abandoned Checkout ID to query by."}], "returns": [], "examples": []}, {"name": "articleTags", "description": "List of all article tags.", "arguments": [{"name": "limit", "type": "Int!", "required": false, "description": "The maximum number of tags to return."}, {"name": "sort", "type": "ArticleTagSort", "required": false, "description": "Type of sort order."}], "returns": [], "examples": []}, {"name": "checkoutProfile", "description": "A checkout profile on a shop.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of the checkout profile."}], "returns": [], "examples": []}, {"name": "checkoutProfiles", "description": "List of checkout profiles on a shop.", "arguments": [{"name": "after", "type": "String", "required": false, "description": "The elements that come after the specified cursor."}, {"name": "before", "type": "String", "required": false, "description": "The elements that come before the specified cursor."}, {"name": "first", "type": "Int", "required": false, "description": "The first n elements from the paginated list."}, {"name": "last", "type": "Int", "required": false, "description": "The last n elements from the paginated list."}, {"name": "query", "type": "String", "required": false, "description": "A filter made up of terms, connectives, modifiers, and comparators.\nYou can apply one or more filters to a query. Learn more about Shopify API search syntax."}, {"name": "reverse", "type": "Boolean", "required": false, "description": "Reverse the order of the underlying list."}, {"name": "sortKey", "type": "CheckoutProfileSortKeys", "required": false, "description": "Sort the underlying list using a key. If your query is slow or returns an error, then try specifying a sort key that matches the field used in the search."}], "returns": [], "examples": []}, {"name": "currentStaffMember", "description": "The staff member making the API request.", "arguments": [], "returns": [{"name": "StaffMember", "type": "StaffMember", "description": "non-null"}, {"name": "StaffMember", "type": "StaffMember", "description": ""}, {"name": "StaffMember", "type": "StaffMember", "description": "non-null"}, {"name": "StaffMember", "type": "StaffMember", "description": "non-null"}, {"name": "StaffMember", "type": "StaffMember", "description": "non-null"}, {"name": "StaffMember", "type": "StaffMember", "description": "non-null"}, {"name": "StaffMember", "type": "StaffMember", "description": ""}, {"name": "StaffMember", "type": "StaffMember", "description": "non-null"}, {"name": "StaffMember", "type": "StaffMember", "description": ""}, {"name": "StaffMember", "type": "StaffMember", "description": "non-null"}, {"name": "StaffMember", "type": "StaffMember", "description": ""}, {"name": "StaffMember", "type": "StaffMember", "description": "non-null"}, {"name": "StaffMember", "type": "StaffMember", "description": "non-null"}, {"name": "StaffMember", "type": "StaffMember", "description": ""}, {"name": "StaffMember", "type": "StaffMember", "description": "non-null"}], "examples": []}, {"name": "customerMergeJobStatus", "description": "Returns the status of a customer merge request job.", "arguments": [{"name": "jobId", "type": "ID!", "required": false, "description": "The ID of the job performing the customer merge request."}], "returns": [], "examples": []}, {"name": "customerPaymentMethod", "description": "Returns a CustomerPaymentMethod resource by its ID.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of the CustomerPaymentMethod to return."}, {"name": "showRevoked", "type": "Boolean", "required": false, "description": "Whether to show the customer's revoked payment method."}], "returns": [], "examples": []}, {"name": "domain", "description": "Lookup a Domain by ID.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of the Domain to return."}], "returns": [], "examples": [{"description": "Retrieve a domain by ID", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `query {\n    domain(id: \"gid://shopify/Domain/948873163\") {\n      host\n      url\n    }\n  }`,\n});\n"}]}, {"name": "financeAppAccessPolicy", "description": "Returns the access policy for a finance app .", "arguments": [], "returns": [{"name": "FinanceAppAccessPolicy", "type": "FinanceAppAccessPolicy!", "description": "non-null"}, {"name": "FinanceAppAccessPolicy", "type": "FinanceAppAccessPolicy!", "description": "non-null"}], "examples": []}, {"name": "fulfillmentConstraintRules", "description": "The fulfillment constraint rules that belong to a shop.", "arguments": [], "returns": [{"name": "FulfillmentConstraintRule", "type": "[FulfillmentConstraintRule!]!", "description": "non-null"}, {"name": "FulfillmentConstraintRule", "type": "[FulfillmentConstraintRule!]!", "description": "non-null"}, {"name": "FulfillmentConstraintRule", "type": "[FulfillmentConstraintRule!]!", "description": "non-null"}, {"name": "FulfillmentConstraintRule", "type": "[FulfillmentConstraintRule!]!", "description": "non-null"}, {"name": "FulfillmentConstraintRule", "type": "[FulfillmentConstraintRule!]!", "description": ""}, {"name": "FulfillmentConstraintRule", "type": "[FulfillmentConstraintRule!]!", "description": "non-null"}], "examples": []}, {"name": "giftCard", "description": "Returns a gift card resource by ID.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of the GiftCard to return."}], "returns": [], "examples": [{"description": "Receive a list of all Gift Card Adjustments", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `query GiftCardTransactionList($id: ID!, $firstTransactions: Int) {\n      giftCard(id: $id) {\n        id\n        balance {\n          amount\n          currencyCode\n        }\n        transactions(first: $firstTransactions) {\n          nodes {\n            amount {\n              amount\n              currencyCode\n            }\n          }\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/GiftCard/411106674\",\n      \"firstTransactions\": 5\n    },\n  },\n});\n"}, {"description": "Retrieves a single gift card", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `query {\n    giftCard(id: \"gid://shopify/GiftCard/411106674\") {\n      balance {\n        amount\n        currencyCode\n      }\n    }\n  }`,\n});\n"}]}, {"name": "giftCardConfiguration", "description": "The configuration for the shop's gift cards.", "arguments": [], "returns": [{"name": "GiftCardConfiguration", "type": "GiftCardConfiguration!", "description": "non-null"}, {"name": "GiftCardConfiguration", "type": "GiftCardConfiguration!", "description": "non-null"}, {"name": "GiftCardConfiguration", "type": "GiftCardConfiguration!", "description": "non-null"}], "examples": []}, {"name": "giftCards", "description": "Returns a list of gift cards.", "arguments": [{"name": "after", "type": "String", "required": false, "description": "The elements that come after the specified cursor."}, {"name": "before", "type": "String", "required": false, "description": "The elements that come before the specified cursor."}, {"name": "first", "type": "Int", "required": false, "description": "The first n elements from the paginated list."}, {"name": "last", "type": "Int", "required": false, "description": "The last n elements from the paginated list."}, {"name": "query", "type": "String", "required": false, "description": "A filter made up of terms, connectives, modifiers, and comparators.\nYou can apply one or more filters to a query. Learn more about Shopify API search syntax."}, {"name": "reverse", "type": "Boolean", "required": false, "description": "Reverse the order of the underlying list."}, {"name": "savedSearchId", "type": "ID", "required": false, "description": "The ID of a saved search.\nThe search\u2019s query string is used as the query argument."}, {"name": "sortKey", "type": "GiftCardSortKeys", "required": false, "description": "Sort the underlying list using a key. If your query is slow or returns an error, then try specifying a sort key that matches the field used in the search."}], "returns": [], "examples": [{"description": "Get the first 5 enabled gift cards", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `query {\n    giftCards(first: 5, query: \"status:enabled\") {\n      edges {\n        node {\n          id\n          enabled\n        }\n      }\n    }\n  }`,\n});\n"}, {"description": "Get up to 5 gift cards with the last characters \"1234\"", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `query {\n    giftCards(first: 5, query: \"status:enabled\") {\n      edges {\n        node {\n          id\n          enabled\n        }\n      }\n    }\n  }`,\n});\n"}, {"description": "Retrieves a list of gift cards", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `query {\n    giftCards(first: 10) {\n      edges {\n        node {\n          id\n        }\n      }\n    }\n  }`,\n});\n"}, {"description": "Searches for gift cards", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `query GiftCardList($first: Int, $query: String) {\n      giftCards(first: $first, query: $query) {\n        edges {\n          node {\n            id\n            balance {\n              amount\n              currencyCode\n            }\n          }\n        }\n      }\n    }`,\n    \"variables\": {\n      \"first\": 5,\n      \"query\": \"status:enabled\"\n    },\n  },\n});\n"}]}, {"name": "giftCardsCount", "description": "The total number of gift cards issued for the shop. Limited to a maximum of 10000.", "arguments": [{"name": "query", "type": "String", "required": false, "description": "A filter made up of terms, connectives, modifiers, and comparators.\nYou can apply one or more filters to a query. Learn more about Shopify API search syntax."}, {"name": "savedSearchId", "type": "ID", "required": false, "description": "The ID of an existing saved search.\nThe search\u2019s query string is used as the query argument.\nRefer to the SavedSearch object."}], "returns": [], "examples": [{"description": "Get the total number of enabled gift cards that are issued for the shop", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `query {\n    giftCardsCount(query: \"status:enabled\") {\n      count\n    }\n  }`,\n});\n"}, {"description": "Retrieves a count of gift cards", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `query {\n    giftCardsCount {\n      count\n    }\n  }`,\n});\n"}]}, {"name": "job", "description": "Returns a Job resource by ID. Used to check the status of internal jobs and any applicable changes.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "ID of the job to query."}], "returns": [], "examples": []}, {"name": "node", "description": "Returns a specific node (any object that implements the\nNode\ninterface) by ID, in accordance with the\nRelay specification.\nThis field is commonly used for refetching an object.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of the Node to return."}], "returns": [], "examples": []}, {"name": "nodes", "description": "Returns the list of nodes (any objects that implement the\nNode\ninterface) with the given IDs, in accordance with the\nRelay specification.", "arguments": [{"name": "ids", "type": "[ID!]!", "required": false, "description": "The IDs of the Nodes to return."}], "returns": [], "examples": []}, {"name": "orderPaymentStatus", "description": "Returns a payment status by payment reference ID. Used to check the status of a deferred payment.", "arguments": [{"name": "orderId", "type": "ID!", "required": false, "description": "ID of the order for which the payment was initiated."}, {"name": "paymentReferenceId", "type": "String!", "required": false, "description": "Unique identifier returned by orderCreatePayment."}], "returns": [], "examples": []}, {"name": "paymentCustomization", "description": "The payment customization.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of the payment customization."}], "returns": [], "examples": []}, {"name": "paymentCustomizations", "description": "The payment customizations.", "arguments": [{"name": "after", "type": "String", "required": false, "description": "The elements that come after the specified cursor."}, {"name": "before", "type": "String", "required": false, "description": "The elements that come before the specified cursor."}, {"name": "first", "type": "Int", "required": false, "description": "The first n elements from the paginated list."}, {"name": "last", "type": "Int", "required": false, "description": "The last n elements from the paginated list."}, {"name": "query", "type": "String", "required": false, "description": "A filter made up of terms, connectives, modifiers, and comparators.\nYou can apply one or more filters to a query. Learn more about Shopify API search syntax."}, {"name": "reverse", "type": "Boolean", "required": false, "description": "Reverse the order of the underlying list."}], "returns": [], "examples": []}, {"name": "paymentTermsTemplates", "description": "The list of payment terms templates eligible for all shops and users.", "arguments": [{"name": "paymentTermsType", "type": "PaymentTermsType", "required": false, "description": "The payment terms type to filter the payment terms templates list."}], "returns": [], "examples": []}, {"name": "publicApiVersions", "description": "The list of publicly-accessible Admin API versions, including supported versions, the release candidate, and unstable versions.", "arguments": [], "returns": [{"name": "ApiVersion", "type": "[ApiVersion!]!", "description": "non-null"}, {"name": "ApiVersion", "type": "[ApiVersion!]!", "description": "non-null"}, {"name": "ApiVersion", "type": "[ApiVersion!]!", "description": "non-null"}, {"name": "ApiVersion", "type": "[ApiVersion!]!", "description": "non-null"}], "examples": []}, {"name": "shopifyFunction", "description": "Returns a Shopify Function by its ID.\nFunctions\nenable you to customize Shopify's backend logic at defined parts of the commerce loop.", "arguments": [{"name": "id", "type": "String!", "required": false, "description": "The ID of the Shopify Function."}], "returns": [], "examples": []}, {"name": "shopifyFunctions", "description": "Returns the Shopify Functions owned by the querying API client installed on the shop.", "arguments": [{"name": "after", "type": "String", "required": false, "description": "The elements that come after the specified cursor."}, {"name": "apiType", "type": "String", "required": false, "description": "Filter the functions by the API type."}, {"name": "before", "type": "String", "required": false, "description": "The elements that come before the specified cursor."}, {"name": "first", "type": "Int", "required": false, "description": "The first n elements from the paginated list."}, {"name": "last", "type": "Int", "required": false, "description": "The last n elements from the paginated list."}, {"name": "reverse", "type": "Boolean", "required": false, "description": "Reverse the order of the underlying list."}, {"name": "useCreationUi", "type": "Boolean", "required": false, "description": "Filter the functions by whether or not the function uses the creation UI in the Admin."}], "returns": [], "examples": []}, {"name": "staffMember", "description": "The StaffMember resource, by ID.", "arguments": [{"name": "id", "type": "ID", "required": false, "description": "The ID of the staff member to return. If no ID is provided, then the staff member making the query (if any) is returned."}], "returns": [], "examples": [{"description": "Retrieves a single user", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `query StaffMember($id: ID!) {\n      staffMember(id: $id) {\n        active\n        avatar {\n          url\n        }\n        email\n        exists\n        firstName\n        id\n        initials\n        isShopOwner\n        lastName\n        locale\n        name\n        phone\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/StaffMember/902541635\"\n    },\n  },\n});\n"}, {"description": "Retrieves the currently logged-in user", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `query {\n    staffMember {\n      active\n      avatar {\n        url\n      }\n      email\n      exists\n      firstName\n      id\n      initials\n      isShopOwner\n      lastName\n      locale\n      name\n      phone\n      privateData {\n        accountSettingsUrl\n        createdAt\n      }\n    }\n  }`,\n});\n"}]}, {"name": "staffMembers", "description": "The shop staff members.", "arguments": [{"name": "after", "type": "String", "required": false, "description": "The elements that come after the specified cursor."}, {"name": "before", "type": "String", "required": false, "description": "The elements that come before the specified cursor."}, {"name": "first", "type": "Int", "required": false, "description": "The first n elements from the paginated list."}, {"name": "last", "type": "Int", "required": false, "description": "The last n elements from the paginated list."}, {"name": "query", "type": "String", "required": false, "description": "A filter made up of terms, connectives, modifiers, and comparators.\nYou can apply one or more filters to a query. Learn more about Shopify API search syntax."}, {"name": "reverse", "type": "Boolean", "required": false, "description": "Reverse the order of the underlying list."}, {"name": "sortKey", "type": "StaffMembersSortKeys", "required": false, "description": "Sort the underlying list using a key. If your query is slow or returns an error, then try specifying a sort key that matches the field used in the search."}], "returns": [], "examples": []}, {"name": "storeCreditAccount", "description": "Returns a store credit account resource by ID.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of the store credit account to return."}], "returns": [], "examples": [{"description": "Get a store credit account by account ID", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `query storeCreditAccount($accountId: ID!) {\n      storeCreditAccount(id: $accountId) {\n        id\n        balance {\n          amount\n          currencyCode\n        }\n      }\n    }`,\n    \"variables\": {\n      \"accountId\": \"gid://shopify/StoreCreditAccount/316863792\"\n    },\n  },\n});\n"}, {"description": "Get the first two expirable credit transactions of a store credit account", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `query storeCreditAccount($accountId: ID!, $first: Int!) {\n      storeCreditAccount(id: $accountId) {\n        id\n        transactions(first: $first, query: \"type:credit AND expires_at:*\") {\n          edges {\n            node {\n              amount {\n                amount\n                currencyCode\n              }\n              balanceAfterTransaction {\n                amount\n                currencyCode\n              }\n              createdAt\n              ... on StoreCreditAccountCreditTransaction {\n                id\n                expiresAt\n                remainingAmount {\n                  amount\n                  currencyCode\n                }\n              }\n            }\n          }\n        }\n      }\n    }`,\n    \"variables\": {\n      \"accountId\": \"gid://shopify/StoreCreditAccount/669614221\",\n      \"first\": 2\n    },\n  },\n});\n"}, {"description": "Get the four most recent transactions of a store credit account", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `query storeCreditAccount($accountId: ID!, $first: Int!) {\n      storeCreditAccount(id: $accountId) {\n        id\n        transactions(first: $first, sortKey: CREATED_AT, reverse: true) {\n          edges {\n            node {\n              amount {\n                amount\n                currencyCode\n              }\n              balanceAfterTransaction {\n                amount\n                currencyCode\n              }\n              createdAt\n              ... on StoreCreditAccountCreditTransaction {\n                id\n                expiresAt\n                remainingAmount {\n                  amount\n                  currencyCode\n                }\n              }\n              ... on StoreCreditAccountDebitTransaction {\n                id\n              }\n              ... on StoreCreditAccountDebitRevertTransaction {\n                id\n                debitTransaction {\n                  id\n                }\n              }\n              ... on StoreCreditAccountExpirationTransaction {\n                creditTransaction {\n                  id\n                }\n              }\n            }\n          }\n        }\n      }\n    }`,\n    \"variables\": {\n      \"accountId\": \"gid://shopify/StoreCreditAccount/669614221\",\n      \"first\": 4\n    },\n  },\n});\n"}]}, {"name": "validation", "description": "Validation available on the shop.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of the validation."}], "returns": [], "examples": []}, {"name": "validations", "description": "Validations available on the shop.", "arguments": [{"name": "after", "type": "String", "required": false, "description": "The elements that come after the specified cursor."}, {"name": "before", "type": "String", "required": false, "description": "The elements that come before the specified cursor."}, {"name": "first", "type": "Int", "required": false, "description": "The first n elements from the paginated list."}, {"name": "last", "type": "Int", "required": false, "description": "The last n elements from the paginated list."}, {"name": "reverse", "type": "Boolean", "required": false, "description": "Reverse the order of the underlying list."}, {"name": "sortKey", "type": "ValidationSortKeys", "required": false, "description": "Sort the underlying list using a key. If your query is slow or returns an error, then try specifying a sort key that matches the field used in the search."}], "returns": [], "examples": []}], "mutations": [{"name": "bulkProductResourceFeedbackCreate", "description": "Creates product feedback for multiple products.", "arguments": [{"name": "feedbackInput", "type": "[ProductResourceFeedbackInput!]!", "required": false, "description": "An array of inputs to create the feedback. Limited to 50."}], "returns": [], "examples": [{"description": "Create a feedback record indicating the product is usable by your app", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation($feedbackInput: [ProductResourceFeedbackInput!]!) {\n      bulkProductResourceFeedbackCreate(feedbackInput: $feedbackInput) {\n        userErrors {\n          field\n          message\n        }\n        feedback {\n          productId\n          state\n          feedbackGeneratedAt\n          productUpdatedAt\n          messages\n        }\n      }\n    }`,\n    \"variables\": {\n      \"feedbackInput\": {\n        \"productId\": \"gid://shopify/Product/172561227\",\n        \"state\": \"ACCEPTED\",\n        \"feedbackGeneratedAt\": \"2021-05-01T23:00:00Z\",\n        \"productUpdatedAt\": \"2021-04-28T16:00:00Z\",\n        \"messages\": []\n      }\n    },\n  },\n});\n"}, {"description": "Create a new Product ResourceFeedback", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation($feedbackInput: [ProductResourceFeedbackInput!]!) {\n      bulkProductResourceFeedbackCreate(feedbackInput: $feedbackInput) {\n        userErrors {\n          field\n          message\n        }\n        feedback {\n          productId\n          state\n          feedbackGeneratedAt\n          productUpdatedAt\n          messages\n        }\n      }\n    }`,\n    \"variables\": {\n      \"feedbackInput\": [\n        {\n          \"productId\": \"gid://shopify/Product/172561227\",\n          \"state\": \"REQUIRES_ACTION\",\n          \"feedbackGeneratedAt\": \"2021-05-01T23:00:00Z\",\n          \"productUpdatedAt\": \"2021-04-28T16:00:00Z\",\n          \"messages\": [\n            \"Needs a description.\"\n          ]\n        },\n        {\n          \"productId\": \"gid://shopify/Product/788638954\",\n          \"state\": \"REQUIRES_ACTION\",\n          \"feedbackGeneratedAt\": \"2021-05-01T23:00:00Z\",\n          \"productUpdatedAt\": \"2021-04-28T16:00:00Z\",\n          \"messages\": [\n            \"Needs an image.\"\n          ]\n        }\n      ]\n    },\n  },\n});\n"}, {"description": "Error response", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation($feedbackInput: [ProductResourceFeedbackInput!]!) {\n      bulkProductResourceFeedbackCreate(feedbackInput: $feedbackInput) {\n        userErrors {\n          field\n          message\n        }\n        feedback {\n          productId\n          state\n          messages\n        }\n      }\n    }`,\n    \"variables\": {\n      \"feedbackInput\": {\n        \"productId\": \"gid://shopify/Product/172561227\",\n        \"state\": \"REQUIRES_ACTION\",\n        \"feedbackGeneratedAt\": \"2021-05-01T23:00:00Z\",\n        \"productUpdatedAt\": \"2021-04-28T16:00:00Z\",\n        \"messages\": [\n          \"Needs a description.\"\n        ]\n      }\n    },\n  },\n});\n"}, {"description": "bulkProductResourceFeedbackCreate reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation($feedbackInput: [ProductResourceFeedbackInput!]!) {\n      bulkProductResourceFeedbackCreate(feedbackInput: $feedbackInput) {\n        userErrors {\n          field\n          message\n        }\n        feedback {\n          productId\n          state\n          feedbackGeneratedAt\n          productUpdatedAt\n          messages\n        }\n      }\n    }`,\n    \"variables\": {\n      \"feedbackInput\": {\n        \"productId\": \"gid://shopify/Product/172561227\",\n        \"state\": \"ACCEPTED\",\n        \"feedbackGeneratedAt\": \"2021-05-01T23:00:00Z\",\n        \"productUpdatedAt\": \"2021-04-28T16:00:00Z\",\n        \"messages\": []\n      }\n    },\n  },\n});\n"}]}, {"name": "carrierServiceDelete", "description": "Removes an existing carrier service.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The global ID of the carrier service to delete."}], "returns": [], "examples": [{"description": "Remove an existing CarrierService", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation CarrierServiceDelete($id: ID!) {\n      carrierServiceDelete(id: $id) {\n        deletedId\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/DeliveryCarrierService/1036895097\"\n    },\n  },\n});\n"}, {"description": "carrierServiceDelete reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation CarrierServiceDelete($id: ID!) {\n      carrierServiceDelete(id: $id) {\n        deletedId\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/DeliveryCarrierService/1036895097\"\n    },\n  },\n});\n"}]}, {"name": "customerPaymentMethodCreditCardCreate", "description": "Creates a credit card payment method for a customer using a session id.\nThese values are only obtained through card imports happening from a PCI compliant environment.\nPlease use customerPaymentMethodRemoteCreate if you are not managing credit cards directly.", "arguments": [{"name": "billingAddress", "type": "MailingAddressInput!", "required": false, "description": "The billing address."}, {"name": "customerId", "type": "ID!", "required": false, "description": "The ID of the customer."}, {"name": "sessionId", "type": "String!", "required": false, "description": "The Cardserver session ID. Obtained by storing card data with Shopify's Cardsink. Exchanging raw card data for a session ID must be done in a PCI complaint environment."}], "returns": [], "examples": []}, {"name": "customerPaymentMethodCreditCardUpdate", "description": "Updates the credit card payment method for a customer.", "arguments": [{"name": "billingAddress", "type": "MailingAddressInput!", "required": false, "description": "The billing address."}, {"name": "id", "type": "ID!", "required": false, "description": "The ID of the customer payment method."}, {"name": "sessionId", "type": "String!", "required": false, "description": "The Cardserver session ID."}], "returns": [], "examples": []}, {"name": "customerPaymentMethodGetUpdateUrl", "description": "Returns a URL that allows the customer to update a specific payment method.\nCurrently, customerPaymentMethodGetUpdateUrl only supports Shop Pay.", "arguments": [{"name": "customerPaymentMethodId", "type": "ID!", "required": false, "description": "The payment method to be updated."}], "returns": [], "examples": []}, {"name": "customerPaymentMethodPaypalBillingAgreementCreate", "description": "Creates a PayPal billing agreement for a customer.", "arguments": [{"name": "billingAddress", "type": "MailingAddressInput", "required": false, "description": "The billing address."}, {"name": "billingAgreementId", "type": "String!", "required": false, "description": "The billing agreement ID from PayPal that starts with 'B-' (for example, B-1234XXXXX)."}, {"name": "customerId", "type": "ID!", "required": false, "description": "The ID of the customer."}, {"name": "inactive", "type": "Boolean", "required": false, "description": "Whether the PayPal billing agreement is inactive."}], "returns": [], "examples": []}, {"name": "customerPaymentMethodPaypalBillingAgreementUpdate", "description": "Updates a PayPal billing agreement for a customer.", "arguments": [{"name": "billingAddress", "type": "MailingAddressInput!", "required": false, "description": "The billing address."}, {"name": "id", "type": "ID!", "required": false, "description": "The ID of the customer payment method."}], "returns": [], "examples": []}, {"name": "customerPaymentMethodRemoteCreate", "description": "Create a payment method from remote gateway identifiers. NOTE: This operation processes payment methods asynchronously. The returned payment method will initially have incomplete details. Developers must poll this payment method using customerPaymentMethod query until all payment method details are available, or the payment method is revoked (usually within seconds).", "arguments": [{"name": "customerId", "type": "ID!", "required": false, "description": "The ID of the customer."}, {"name": "remoteReference", "type": "CustomerPaymentMethodRemoteInput!", "required": false, "description": "Remote gateway payment method details."}], "returns": [], "examples": []}, {"name": "customerPaymentMethodRevoke", "description": "Revokes a customer's payment method.", "arguments": [{"name": "customerPaymentMethodId", "type": "ID!", "required": false, "description": "The ID of the customer payment method to be revoked."}], "returns": [], "examples": []}, {"name": "customerPaymentMethodSendUpdateEmail", "description": "Sends a link to the customer so they can update a specific payment method.", "arguments": [{"name": "customerPaymentMethodId", "type": "ID!", "required": false, "description": "The payment method to be updated."}, {"name": "email", "type": "EmailInput", "required": false, "description": "Specifies the payment method update email fields. Only the 'from' and 'bcc' fields are accepted for input."}], "returns": [], "examples": [{"description": "Send an email with only the customer payment method id", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation sendCustomerPaymentUpdateEmail($customerPaymentMethodId: ID!) {\n      customerPaymentMethodSendUpdateEmail(customerPaymentMethodId: $customerPaymentMethodId) {\n        customer {\n          id\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"customerPaymentMethodId\": \"gid://shopify/CustomerPaymentMethod/b7cc6e3267aace169e516ed48be72dff\"\n    },\n  },\n});\n"}, {"description": "customerPaymentMethodSendUpdateEmail reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation sendCustomerPaymentUpdateEmail($customerPaymentMethodId: ID!) {\n      customerPaymentMethodSendUpdateEmail(customerPaymentMethodId: $customerPaymentMethodId) {\n        customer {\n          id\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"customerPaymentMethodId\": \"gid://shopify/CustomerPaymentMethod/b7cc6e3267aace169e516ed48be72dff\"\n    },\n  },\n});\n"}]}, {"name": "fulfillmentConstraintRuleCreate", "description": "Creates a fulfillment constraint rule and its metafield.", "arguments": [{"name": "deliveryMethodTypes", "type": "[DeliveryMethodType!]!", "required": false, "description": "Associate the function with one or multiple delivery method types."}, {"name": "functionId", "type": "String!", "required": false, "description": "The identifier of the function providing the constraint rule."}, {"name": "metafields", "type": "[MetafieldInput!]", "required": false, "description": "Metafields to associate to the fulfillment constraint rule."}], "returns": [], "examples": []}, {"name": "fulfillmentConstraintRuleDelete", "description": "Deletes a fulfillment constraint rule and its metafields.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "A globally-unique identifier for the fulfillment constraint rule."}], "returns": [], "examples": []}, {"name": "fulfillmentConstraintRuleUpdate", "description": "Update a fulfillment constraint rule.", "arguments": [{"name": "deliveryMethodTypes", "type": "[DeliveryMethodType!]!", "required": false, "description": "Specifies the delivery method types to be updated.\nIf not provided or providing an empty list will associate the function with all delivery methods."}, {"name": "id", "type": "ID!", "required": false, "description": "A globally-unique identifier for the fulfillment constraint rule."}], "returns": [], "examples": []}, {"name": "giftCardCreate", "description": "Create a gift card.", "arguments": [{"name": "input", "type": "GiftCardCreateInput!", "required": false, "description": "The input fields to create a gift card."}], "returns": [], "examples": [{"description": "Create a gift card with a customer and a recipient", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation giftCardCreate($input: GiftCardCreateInput!) {\n      giftCardCreate(input: $input) {\n        giftCard {\n          id\n          initialValue {\n            amount\n          }\n          customer {\n            id\n          }\n          recipientAttributes {\n            recipient {\n              id\n            }\n            message\n            preferredName\n            sendNotificationAt\n          }\n        }\n        userErrors {\n          message\n          field\n          code\n        }\n      }\n    }`,\n    \"variables\": {\n      \"input\": {\n        \"initialValue\": \"100.0\",\n        \"customerId\": \"gid://shopify/Customer/331283560\",\n        \"recipientAttributes\": {\n          \"id\": \"gid://shopify/Customer/743592264\",\n          \"message\": \"Happy Birthday!\",\n          \"preferredName\": \"Dad\",\n          \"sendNotificationAt\": \"2024-10-01T12:00:00Z\"\n        }\n      }\n    },\n  },\n});\n"}, {"description": "Create a non-expiring gift card with a generated code for a customer", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation giftCardCreate($input: GiftCardCreateInput!) {\n      giftCardCreate(input: $input) {\n        userErrors {\n          message\n          field\n        }\n        giftCard {\n          id\n          expiresOn\n          note\n          initialValue {\n            amount\n          }\n          customer {\n            id\n          }\n        }\n        giftCardCode\n      }\n    }`,\n    \"variables\": {\n      \"input\": {\n        \"initialValue\": \"27.84\",\n        \"customerId\": \"gid://shopify/Customer/743592264\",\n        \"note\": \"Refund for Order #1\"\n      }\n    },\n  },\n});\n"}, {"description": "Creates a gift card", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation GiftCardCreate($input: GiftCardCreateInput!) {\n      giftCardCreate(input: $input) {\n        giftCard {\n          id\n          balance {\n            amount\n            currencyCode\n          }\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"input\": {\n        \"initialValue\": \"100.0\",\n        \"customerId\": \"gid://shopify/Customer/331283560\"\n      }\n    },\n  },\n});\n"}, {"description": "giftCardCreate reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation giftCardCreate($input: GiftCardCreateInput!) {\n      giftCardCreate(input: $input) {\n        giftCard {\n          id\n          initialValue {\n            amount\n          }\n          customer {\n            id\n          }\n          recipientAttributes {\n            recipient {\n              id\n            }\n            message\n            preferredName\n            sendNotificationAt\n          }\n        }\n        userErrors {\n          message\n          field\n          code\n        }\n      }\n    }`,\n    \"variables\": {\n      \"input\": {\n        \"initialValue\": \"100.0\",\n        \"customerId\": \"gid://shopify/Customer/331283560\",\n        \"recipientAttributes\": {\n          \"id\": \"gid://shopify/Customer/743592264\",\n          \"message\": \"Happy Birthday!\",\n          \"preferredName\": \"Dad\",\n          \"sendNotificationAt\": \"2024-10-01T12:00:00Z\"\n        }\n      }\n    },\n  },\n});\n"}]}, {"name": "giftCardCredit", "description": "Credit a gift card.", "arguments": [{"name": "creditInput", "type": "GiftCardCreditInput!", "required": false, "description": "The input fields to credit a gift card."}, {"name": "id", "type": "ID!", "required": false, "description": "The ID of the gift card to be credited."}], "returns": [], "examples": [{"description": "Create a new Gift Card Adjustment", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation giftCardCredit($id: ID!, $creditInput: GiftCardCreditInput!) {\n      giftCardCredit(id: $id, creditInput: $creditInput) {\n        giftCardCreditTransaction {\n          id\n          amount {\n            amount\n            currencyCode\n          }\n          processedAt\n          note\n          giftCard {\n            id\n            balance {\n              amount\n              currencyCode\n            }\n          }\n        }\n        userErrors {\n          message\n          field\n          code\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/GiftCard/411106674\",\n      \"creditInput\": {\n        \"creditAmount\": {\n          \"amount\": \"10\",\n          \"currencyCode\": \"USD\"\n        },\n        \"processedAt\": \"2024-09-09T12:48:33-04:00\",\n        \"note\": \"A note.\"\n      }\n    },\n  },\n});\n"}, {"description": "giftCardCredit reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation giftCardCredit($id: ID!, $creditInput: GiftCardCreditInput!) {\n      giftCardCredit(id: $id, creditInput: $creditInput) {\n        giftCardCreditTransaction {\n          id\n          amount {\n            amount\n            currencyCode\n          }\n          processedAt\n          note\n          giftCard {\n            id\n            balance {\n              amount\n              currencyCode\n            }\n          }\n        }\n        userErrors {\n          message\n          field\n          code\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/GiftCard/411106674\",\n      \"creditInput\": {\n        \"creditAmount\": {\n          \"amount\": \"10\",\n          \"currencyCode\": \"USD\"\n        },\n        \"processedAt\": \"2024-09-09T12:48:33-04:00\",\n        \"note\": \"A note.\"\n      }\n    },\n  },\n});\n"}]}, {"name": "giftCardDeactivate", "description": "Deactivate a gift card. A deactivated gift card cannot be used by a customer.\nA deactivated gift card cannot be re-enabled.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of the gift card to deactivate."}], "returns": [], "examples": [{"description": "Disables a gift card", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation giftCardDeactivate($id: ID!) {\n      giftCardDeactivate(id: $id) {\n        giftCard {\n          id\n          deactivatedAt\n        }\n        userErrors {\n          message\n          field\n          code\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/GiftCard/411106674\"\n    },\n  },\n});\n"}, {"description": "giftCardDeactivate reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation giftCardDeactivate($id: ID!) {\n      giftCardDeactivate(id: $id) {\n        giftCard {\n          id\n          deactivatedAt\n        }\n        userErrors {\n          message\n          field\n          code\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/GiftCard/411106674\"\n    },\n  },\n});\n"}]}, {"name": "giftCardDebit", "description": "Debit a gift card.", "arguments": [{"name": "debitInput", "type": "GiftCardDebitInput!", "required": false, "description": "The input fields to debit a gift card."}, {"name": "id", "type": "ID!", "required": false, "description": "The ID of the gift card to be debited."}], "returns": [], "examples": [{"description": "Debit a gift card by ID", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation giftCardDebit($id: ID!, $debitInput: GiftCardDebitInput!) {\n      giftCardDebit(id: $id, debitInput: $debitInput) {\n        giftCardDebitTransaction {\n          id\n          amount {\n            amount\n            currencyCode\n          }\n          processedAt\n          note\n          giftCard {\n            id\n            balance {\n              amount\n              currencyCode\n            }\n          }\n        }\n        userErrors {\n          message\n          field\n          code\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/GiftCard/411106674\",\n      \"debitInput\": {\n        \"debitAmount\": {\n          \"amount\": \"10\",\n          \"currencyCode\": \"USD\"\n        },\n        \"processedAt\": \"2024-09-09T12:48:33-04:00\",\n        \"note\": \"A note.\"\n      }\n    },\n  },\n});\n"}, {"description": "giftCardDebit reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation giftCardDebit($id: ID!, $debitInput: GiftCardDebitInput!) {\n      giftCardDebit(id: $id, debitInput: $debitInput) {\n        giftCardDebitTransaction {\n          id\n          amount {\n            amount\n            currencyCode\n          }\n          processedAt\n          note\n          giftCard {\n            id\n            balance {\n              amount\n              currencyCode\n            }\n          }\n        }\n        userErrors {\n          message\n          field\n          code\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/GiftCard/411106674\",\n      \"debitInput\": {\n        \"debitAmount\": {\n          \"amount\": \"10\",\n          \"currencyCode\": \"USD\"\n        },\n        \"processedAt\": \"2024-09-09T12:48:33-04:00\",\n        \"note\": \"A note.\"\n      }\n    },\n  },\n});\n"}]}, {"name": "giftCardSendNotificationToCustomer", "description": "Send notification to the customer of a gift card.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of the gift card to send."}], "returns": [], "examples": [{"description": "giftCardSendNotificationToCustomer reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation giftCardSendNotificationToCustomer($id: ID!) {\n      giftCardSendNotificationToCustomer(id: $id) {\n        giftCard {\n          id\n          customer {\n            id\n          }\n        }\n        userErrors {\n          message\n          field\n          code\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/GiftCard/698360200\"\n    },\n  },\n});\n"}]}, {"name": "giftCardSendNotificationToRecipient", "description": "Send notification to the recipient of a gift card.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of the gift card to send."}], "returns": [], "examples": [{"description": "giftCardSendNotificationToRecipient reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation giftCardSendNotificationToRecipient($id: ID!) {\n      giftCardSendNotificationToRecipient(id: $id) {\n        giftCard {\n          id\n          recipientAttributes {\n            recipient {\n              id\n            }\n          }\n        }\n        userErrors {\n          message\n          field\n          code\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/GiftCard/698360200\"\n    },\n  },\n});\n"}]}, {"name": "giftCardUpdate", "description": "Update a gift card.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of the gift card to be updated."}, {"name": "input", "type": "GiftCardUpdateInput!", "required": false, "description": "The input fields to update the gift card."}], "returns": [], "examples": [{"description": "Updates an existing gift card", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation GiftCardUpdate($id: ID!, $input: GiftCardUpdateInput!) {\n      giftCardUpdate(id: $id, input: $input) {\n        giftCard {\n          id\n          note\n        }\n        userErrors {\n          message\n          field\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/GiftCard/63396415\",\n      \"input\": {\n        \"note\": \"A note.\"\n      }\n    },\n  },\n});\n"}, {"description": "giftCardUpdate reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation giftCardUpdate($id: ID!, $input: GiftCardUpdateInput!) {\n      giftCardUpdate(id: $id, input: $input) {\n        userErrors {\n          message\n          field\n        }\n        giftCard {\n          id\n          customer {\n            id\n          }\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/GiftCard/63396415\",\n      \"input\": {\n        \"customerId\": \"gid://shopify/Customer/331283560\"\n      }\n    },\n  },\n});\n"}]}, {"name": "marketRegionsDelete", "description": "Deletes a list of market regions. Use marketUpdate instead.", "arguments": [{"name": "ids", "type": "[ID!]!", "required": false, "description": "A list of IDs of the market regions to delete."}], "returns": [], "examples": []}, {"name": "paymentCustomizationActivation", "description": "Activates and deactivates payment customizations.", "arguments": [{"name": "enabled", "type": "Boolean!", "required": false, "description": "The enabled status of the payment customizations."}, {"name": "ids", "type": "[ID!]!", "required": false, "description": "The global IDs of the payment customizations."}], "returns": [], "examples": []}, {"name": "paymentCustomizationCreate", "description": "Creates a payment customization.", "arguments": [{"name": "paymentCustomization", "type": "PaymentCustomizationInput!", "required": false, "description": "The input data used to create the payment customization."}], "returns": [], "examples": []}, {"name": "paymentCustomizationDelete", "description": "Deletes a payment customization.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The global ID of the payment customization."}], "returns": [], "examples": []}, {"name": "paymentCustomizationUpdate", "description": "Updates a payment customization.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The global ID of the payment customization."}, {"name": "paymentCustomization", "type": "PaymentCustomizationInput!", "required": false, "description": "The input data used to update the payment customization."}], "returns": [], "examples": []}, {"name": "paymentReminderSend", "description": "Sends an email payment reminder for a payment schedule.", "arguments": [{"name": "paymentScheduleId", "type": "ID!", "required": false, "description": "The payment schedule id associated with the reminder."}], "returns": [], "examples": [{"description": "Send a payment reminder", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation paymentReminderSend($paymentScheduleId: ID!) {\n      paymentReminderSend(paymentScheduleId: $paymentScheduleId) {\n        success\n        userErrors {\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"paymentScheduleId\": \"gid://shopify/PaymentSchedule/864539144\"\n    },\n  },\n});\n"}, {"description": "paymentReminderSend reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation paymentReminderSend($paymentScheduleId: ID!) {\n      paymentReminderSend(paymentScheduleId: $paymentScheduleId) {\n        success\n        userErrors {\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"paymentScheduleId\": \"gid://shopify/PaymentSchedule/864539144\"\n    },\n  },\n});\n"}]}, {"name": "paymentTermsCreate", "description": "Create payment terms on an order. To create payment terms on a draft order, use a draft order mutation and include the request with the DraftOrderInput.", "arguments": [{"name": "paymentTermsAttributes", "type": "PaymentTermsCreateInput!", "required": false, "description": "The attributes used to create the payment terms."}, {"name": "referenceId", "type": "ID!", "required": false, "description": "Specifies the reference orderId to add the payment terms for."}], "returns": [], "examples": [{"description": "Create due on receipt payment terms", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation PaymentTermsCreate($referenceId: ID!, $paymentTermsAttributes: PaymentTermsCreateInput!) {\n      paymentTermsCreate(referenceId: $referenceId, paymentTermsAttributes: $paymentTermsAttributes) {\n        paymentTerms {\n          id\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"referenceId\": \"gid://shopify/Order/922426937\",\n      \"paymentTermsAttributes\": {\n        \"paymentTermsTemplateId\": \"gid://shopify/PaymentTermsTemplate/1\"\n      }\n    },\n  },\n});\n"}, {"description": "Create fixed payment terms", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation PaymentTermsCreate($referenceId: ID!, $paymentTermsAttributes: PaymentTermsCreateInput!) {\n      paymentTermsCreate(referenceId: $referenceId, paymentTermsAttributes: $paymentTermsAttributes) {\n        paymentTerms {\n          id\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"referenceId\": \"gid://shopify/Order/922426937\",\n      \"paymentTermsAttributes\": {\n        \"paymentTermsTemplateId\": \"gid://shopify/PaymentTermsTemplate/7\",\n        \"paymentSchedules\": [\n          {\n            \"dueAt\": \"2022-06-13T22:35:23.311Z\"\n          }\n        ]\n      }\n    },\n  },\n});\n"}, {"description": "Create net payment terms", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation PaymentTermsCreate($referenceId: ID!, $paymentTermsAttributes: PaymentTermsCreateInput!) {\n      paymentTermsCreate(referenceId: $referenceId, paymentTermsAttributes: $paymentTermsAttributes) {\n        paymentTerms {\n          id\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"referenceId\": \"gid://shopify/Order/922426937\",\n      \"paymentTermsAttributes\": {\n        \"paymentTermsTemplateId\": \"gid://shopify/PaymentTermsTemplate/2\",\n        \"paymentSchedules\": [\n          {\n            \"issuedAt\": \"2022-06-13T22:30:18.019Z\"\n          }\n        ]\n      }\n    },\n  },\n});\n"}, {"description": "paymentTermsCreate reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation PaymentTermsCreate($referenceId: ID!, $paymentTermsAttributes: PaymentTermsCreateInput!) {\n      paymentTermsCreate(referenceId: $referenceId, paymentTermsAttributes: $paymentTermsAttributes) {\n        paymentTerms {\n          id\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"referenceId\": \"gid://shopify/Order/922426937\",\n      \"paymentTermsAttributes\": {\n        \"paymentTermsTemplateId\": \"gid://shopify/PaymentTermsTemplate/1\"\n      }\n    },\n  },\n});\n"}]}, {"name": "paymentTermsDelete", "description": "Delete payment terms for an order. To delete payment terms on a draft order, use a draft order mutation and include the request with the DraftOrderInput.", "arguments": [{"name": "input", "type": "PaymentTermsDeleteInput!", "required": false, "description": "The input fields used to delete the payment terms."}], "returns": [], "examples": [{"description": "Delete payment terms", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation PaymentTermsDelete($input: PaymentTermsDeleteInput!) {\n      paymentTermsDelete(input: $input) {\n        deletedId\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"input\": {\n        \"paymentTermsId\": \"gid://shopify/PaymentTerms/977822362\"\n      }\n    },\n  },\n});\n"}, {"description": "paymentTermsDelete reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation PaymentTermsDelete($input: PaymentTermsDeleteInput!) {\n      paymentTermsDelete(input: $input) {\n        deletedId\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"input\": {\n        \"paymentTermsId\": \"gid://shopify/PaymentTerms/977822362\"\n      }\n    },\n  },\n});\n"}]}, {"name": "paymentTermsUpdate", "description": "Update payment terms on an order. To update payment terms on a draft order, use a draft order mutation and include the request with the DraftOrderInput.", "arguments": [{"name": "input", "type": "PaymentTermsUpdateInput!", "required": false, "description": "The input fields used to update the payment terms."}], "returns": [], "examples": [{"description": "Update payment terms date", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation PaymentTermsUpdate($input: PaymentTermsUpdateInput!) {\n      paymentTermsUpdate(input: $input) {\n        paymentTerms {\n          id\n        }\n        userErrors {\n          code\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"input\": {\n        \"paymentTermsId\": \"gid://shopify/PaymentTerms/977822362\",\n        \"paymentTermsAttributes\": {\n          \"paymentTermsTemplateId\": \"gid://shopify/PaymentTermsTemplate/7\",\n          \"paymentSchedules\": [\n            {\n              \"dueAt\": \"2022-06-13T22:35:23.311Z\"\n            }\n          ]\n        }\n      }\n    },\n  },\n});\n"}, {"description": "Update payment terms type", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation PaymentTermsUpdate($input: PaymentTermsUpdateInput!) {\n      paymentTermsUpdate(input: $input) {\n        paymentTerms {\n          id\n        }\n        userErrors {\n          code\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"input\": {\n        \"paymentTermsId\": \"gid://shopify/PaymentTerms/977822362\",\n        \"paymentTermsAttributes\": {\n          \"paymentTermsTemplateId\": \"gid://shopify/PaymentTermsTemplate/2\",\n          \"paymentSchedules\": [\n            {\n              \"issuedAt\": \"2022-06-13T22:35:23.311Z\"\n            }\n          ]\n        }\n      }\n    },\n  },\n});\n"}, {"description": "paymentTermsUpdate reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation PaymentTermsUpdate($input: PaymentTermsUpdateInput!) {\n      paymentTermsUpdate(input: $input) {\n        paymentTerms {\n          id\n        }\n        userErrors {\n          code\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"input\": {\n        \"paymentTermsId\": \"gid://shopify/PaymentTerms/977822362\",\n        \"paymentTermsAttributes\": {\n          \"paymentTermsTemplateId\": \"gid://shopify/PaymentTermsTemplate/7\",\n          \"paymentSchedules\": [\n            {\n              \"dueAt\": \"2022-06-13T22:35:23.311Z\"\n            }\n          ]\n        }\n      }\n    },\n  },\n});\n"}]}, {"name": "savedSearchCreate", "description": "Creates a saved search.", "arguments": [{"name": "input", "type": "SavedSearchCreateInput!", "required": false, "description": "Specifies the input fields for a saved search."}], "returns": [], "examples": []}, {"name": "savedSearchDelete", "description": "Delete a saved search.", "arguments": [{"name": "input", "type": "SavedSearchDeleteInput!", "required": false, "description": "The input fields to delete a saved search."}], "returns": [], "examples": []}, {"name": "savedSearchUpdate", "description": "Updates a saved search.", "arguments": [{"name": "input", "type": "SavedSearchUpdateInput!", "required": false, "description": "The input fields to update a saved search."}], "returns": [], "examples": []}, {"name": "stagedUploadTargetGenerate", "description": "Generates the URL and signed paramaters needed to upload an asset to Shopify. Use stagedUploadsCreate instead.", "arguments": [{"name": "input", "type": "StagedUploadTargetGenerateInput!", "required": false, "description": "The input fields for generating a staged upload."}], "returns": [], "examples": []}, {"name": "stagedUploadTargetsGenerate", "description": "Uploads multiple images. Use stagedUploadsCreate instead.", "arguments": [{"name": "input", "type": "[StageImageInput!]!", "required": false, "description": "The input fields for generating staged uploads."}], "returns": [], "examples": []}, {"name": "storeCreditAccountCredit", "description": "Creates a credit transaction that increases the store credit account balance by the given amount.\nThis operation will create an account if one does not already exist.\nA store credit account owner can hold multiple accounts each with a different currency.\nUse the most appropriate currency for the given store credit account owner.", "arguments": [{"name": "creditInput", "type": "StoreCreditAccountCreditInput!", "required": false, "description": "The input fields for a store credit account credit transaction."}, {"name": "id", "type": "ID!", "required": false, "description": "The ID of the store credit account or the ID of the account owner."}], "returns": [], "examples": [{"description": "Credit an amount to a store credit account by customer ID", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation storeCreditAccountCredit($id: ID!, $creditInput: StoreCreditAccountCreditInput!) {\n      storeCreditAccountCredit(id: $id, creditInput: $creditInput) {\n        storeCreditAccountTransaction {\n          amount {\n            amount\n            currencyCode\n          }\n          account {\n            id\n            balance {\n              amount\n              currencyCode\n            }\n          }\n        }\n        userErrors {\n          message\n          field\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/Customer/544365967\",\n      \"creditInput\": {\n        \"creditAmount\": {\n          \"amount\": \"49.99\",\n          \"currencyCode\": \"USD\"\n        }\n      }\n    },\n  },\n});\n"}, {"description": "Credit an expiring amount to a store credit account by account ID", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation storeCreditAccountCredit($id: ID!, $creditInput: StoreCreditAccountCreditInput!) {\n      storeCreditAccountCredit(id: $id, creditInput: $creditInput) {\n        storeCreditAccountTransaction {\n          amount {\n            amount\n            currencyCode\n          }\n          account {\n            id\n            balance {\n              amount\n              currencyCode\n            }\n          }\n        }\n        userErrors {\n          message\n          field\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/StoreCreditAccount/316863792\",\n      \"creditInput\": {\n        \"expiresAt\": \"2028-10-26\",\n        \"creditAmount\": {\n          \"amount\": \"49.99\",\n          \"currencyCode\": \"USD\"\n        }\n      }\n    },\n  },\n});\n"}, {"description": "Crediting a negative amount returns an error", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation storeCreditAccountCredit($id: ID!, $creditInput: StoreCreditAccountCreditInput!) {\n      storeCreditAccountCredit(id: $id, creditInput: $creditInput) {\n        storeCreditAccountTransaction {\n          amount {\n            amount\n            currencyCode\n          }\n          account {\n            id\n            balance {\n              amount\n              currencyCode\n            }\n          }\n        }\n        userErrors {\n          message\n          field\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/Customer/1018520244\",\n      \"creditInput\": {\n        \"creditAmount\": {\n          \"amount\": \"-100.00\",\n          \"currencyCode\": \"USD\"\n        }\n      }\n    },\n  },\n});\n"}, {"description": "Crediting an amount that exceeds the account limit returns an error", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation storeCreditAccountCredit($id: ID!, $creditInput: StoreCreditAccountCreditInput!) {\n      storeCreditAccountCredit(id: $id, creditInput: $creditInput) {\n        storeCreditAccountTransaction {\n          amount {\n            amount\n            currencyCode\n          }\n          account {\n            id\n            balance {\n              amount\n              currencyCode\n            }\n          }\n        }\n        userErrors {\n          message\n          field\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/Customer/1018520244\",\n      \"creditInput\": {\n        \"creditAmount\": {\n          \"amount\": \"100000.00\",\n          \"currencyCode\": \"USD\"\n        }\n      }\n    },\n  },\n});\n"}, {"description": "storeCreditAccountCredit reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation storeCreditAccountCredit($id: ID!, $creditInput: StoreCreditAccountCreditInput!) {\n      storeCreditAccountCredit(id: $id, creditInput: $creditInput) {\n        storeCreditAccountTransaction {\n          amount {\n            amount\n            currencyCode\n          }\n          account {\n            id\n            balance {\n              amount\n              currencyCode\n            }\n          }\n        }\n        userErrors {\n          message\n          field\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/Customer/544365967\",\n      \"creditInput\": {\n        \"creditAmount\": {\n          \"amount\": \"49.99\",\n          \"currencyCode\": \"USD\"\n        }\n      }\n    },\n  },\n});\n"}]}, {"name": "storeCreditAccountDebit", "description": "Creates a debit transaction that decreases the store credit account balance by the given amount.", "arguments": [{"name": "debitInput", "type": "StoreCreditAccountDebitInput!", "required": false, "description": "The input fields for a store credit account debit transaction."}, {"name": "id", "type": "ID!", "required": false, "description": "The ID of the store credit account or the ID of the account owner."}], "returns": [], "examples": [{"description": "Debit a store credit account by account ID", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation storeCreditAccountDebit($id: ID!, $debitInput: StoreCreditAccountDebitInput!) {\n      storeCreditAccountDebit(id: $id, debitInput: $debitInput) {\n        storeCreditAccountTransaction {\n          amount {\n            amount\n            currencyCode\n          }\n          account {\n            id\n            balance {\n              amount\n              currencyCode\n            }\n          }\n        }\n        userErrors {\n          message\n          field\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/StoreCreditAccount/316863792\",\n      \"debitInput\": {\n        \"debitAmount\": {\n          \"amount\": \"9.99\",\n          \"currencyCode\": \"USD\"\n        }\n      }\n    },\n  },\n});\n"}, {"description": "Debit a store credit account by customer ID", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation storeCreditAccountDebit($id: ID!, $debitInput: StoreCreditAccountDebitInput!) {\n      storeCreditAccountDebit(id: $id, debitInput: $debitInput) {\n        storeCreditAccountTransaction {\n          amount {\n            amount\n            currencyCode\n          }\n          account {\n            id\n            balance {\n              amount\n              currencyCode\n            }\n          }\n        }\n        userErrors {\n          message\n          field\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/Customer/544365967\",\n      \"debitInput\": {\n        \"debitAmount\": {\n          \"amount\": \"9.99\",\n          \"currencyCode\": \"USD\"\n        }\n      }\n    },\n  },\n});\n"}, {"description": "Debiting an amount that exceeds the account balance returns an error", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation storeCreditAccountDebit($id: ID!, $debitInput: StoreCreditAccountDebitInput!) {\n      storeCreditAccountDebit(id: $id, debitInput: $debitInput) {\n        storeCreditAccountTransaction {\n          amount {\n            amount\n            currencyCode\n          }\n          account {\n            id\n            balance {\n              amount\n              currencyCode\n            }\n          }\n        }\n        userErrors {\n          message\n          field\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/StoreCreditAccount/316863792\",\n      \"debitInput\": {\n        \"debitAmount\": {\n          \"amount\": \"100.00\",\n          \"currencyCode\": \"USD\"\n        }\n      }\n    },\n  },\n});\n"}, {"description": "storeCreditAccountDebit reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation storeCreditAccountDebit($id: ID!, $debitInput: StoreCreditAccountDebitInput!) {\n      storeCreditAccountDebit(id: $id, debitInput: $debitInput) {\n        storeCreditAccountTransaction {\n          amount {\n            amount\n            currencyCode\n          }\n          account {\n            id\n            balance {\n              amount\n              currencyCode\n            }\n          }\n        }\n        userErrors {\n          message\n          field\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/StoreCreditAccount/316863792\",\n      \"debitInput\": {\n        \"debitAmount\": {\n          \"amount\": \"9.99\",\n          \"currencyCode\": \"USD\"\n        }\n      }\n    },\n  },\n});\n"}]}, {"name": "tagsAdd", "description": "Add tags to an order, a draft order, a customer, a product, or an online store article.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of a resource to add tags to."}, {"name": "tags", "type": "[String!]!", "required": false, "description": "A list of tags to add to the resource. Can be an array of strings or a single string composed of a comma-separated list of values. Example values: [\"tag1\", \"tag2\", \"tag3\"], \"tag1, tag2, tag3\"."}], "returns": [], "examples": [{"description": "Add tags to a customer", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation addTags($id: ID!, $tags: [String!]!) {\n      tagsAdd(id: $id, tags: $tags) {\n        node {\n          id\n        }\n        userErrors {\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/Customer/544365967\",\n      \"tags\": \"one, two, three\"\n    },\n  },\n});\n"}, {"description": "Add tags to a product", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation addTags($id: ID!, $tags: [String!]!) {\n      tagsAdd(id: $id, tags: $tags) {\n        node {\n          id\n        }\n        userErrors {\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/Product/20995642\",\n      \"tags\": \"one, two, three\"\n    },\n  },\n});\n"}, {"description": "Attempt to add tags to an product that does not exist", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation addTags($id: ID!, $tags: [String!]!) {\n      tagsAdd(id: $id, tags: $tags) {\n        node {\n          id\n        }\n        userErrors {\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/Product/12345\",\n      \"tags\": \"one, two, three\"\n    },\n  },\n});\n"}, {"description": "tagsAdd reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation addTags($id: ID!, $tags: [String!]!) {\n      tagsAdd(id: $id, tags: $tags) {\n        node {\n          id\n        }\n        userErrors {\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/Customer/544365967\",\n      \"tags\": \"one, two, three\"\n    },\n  },\n});\n"}]}, {"name": "tagsRemove", "description": "Remove tags from an order, a draft order, a customer, a product, or an online store article.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of the resource to remove tags from."}, {"name": "tags", "type": "[String!]!", "required": false, "description": "A list of tags to remove from the resource in the form of an array of strings. Example value: [\"tag1\", \"tag2\", \"tag3\"]."}], "returns": [], "examples": [{"description": "Remove tags from a customer", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation removeTags($id: ID!, $tags: [String!]!) {\n      tagsRemove(id: $id, tags: $tags) {\n        node {\n          id\n        }\n        userErrors {\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/Customer/544365967\",\n      \"tags\": [\n        \"Bob\"\n      ]\n    },\n  },\n});\n"}, {"description": "tagsRemove reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation removeTags($id: ID!, $tags: [String!]!) {\n      tagsRemove(id: $id, tags: $tags) {\n        node {\n          id\n        }\n        userErrors {\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/Customer/544365967\",\n      \"tags\": [\n        \"Bob\"\n      ]\n    },\n  },\n});\n"}]}, {"name": "validationCreate", "description": "Creates a validation.", "arguments": [{"name": "validation", "type": "ValidationCreateInput!", "required": false, "description": "The input fields for a new validation."}], "returns": [], "examples": []}, {"name": "validationDelete", "description": "Deletes a validation.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID representing the installed validation."}], "returns": [], "examples": []}, {"name": "validationUpdate", "description": "Update a validation.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID representing the validation to update."}, {"name": "validation", "type": "ValidationUpdateInput!", "required": false, "description": "The input fields to update a validation."}], "returns": [], "examples": []}], "objects": [{"name": "AbandonedCheckout", "description": "A checkout that was abandoned by the customer.", "fields_and_connections": [{"name": "abandonedCheckoutUrl", "type": "abandonedCheckouts", "description": "List of abandoned checkouts. Includes checkouts that were recovered after being abandoned.", "not_nullable": false}, {"name": "abandonedCheckoutUrl", "type": "Navigable", "description": "The URL for the buyer to recover their checkout.", "not_nullable": false}, {"name": "abandonedCheckoutUrl", "type": "Node", "description": "The URL for the buyer to recover their checkout.", "not_nullable": false}], "examples": []}, {"name": "AbandonedCheckoutLineItem", "description": "A single line item in an abandoned checkout.", "fields_and_connections": [{"name": "components", "type": "Node", "description": "A list of line item components for this line item.", "not_nullable": false}], "examples": []}, {"name": "AbandonedCheckoutLineItemComponent", "description": "The list of line item components that belong to a line item.", "fields_and_connections": [{"name": "id", "type": "ID!", "description": "A globally-unique ID.", "not_nullable": true}, {"name": "image", "type": "Image", "description": "The variant image associated with the line item component.\nNULL if the variant associated doesn't have an image.", "not_nullable": false}, {"name": "quantity", "type": "Int!", "description": "The quantity of the line item component.", "not_nullable": true}, {"name": "title", "type": "String!", "description": "Title of the line item component.", "not_nullable": true}, {"name": "variantTitle", "type": "String", "description": "The name of the variant.", "not_nullable": false}], "examples": []}, {"name": "ApiVersion", "description": "A version of the API, as defined by Shopify API versioning.\nVersions are commonly referred to by their handle (for example, 2021-10).", "fields_and_connections": [{"name": "displayName", "type": "publicApiVersions", "description": "The list of publicly-accessible Admin API versions, including supported versions, the release candidate, and unstable versions.", "not_nullable": false}], "examples": []}, {"name": "AppRevokeAccessScopesAppRevokeScopeError", "description": "Represents an error that happens while revoking a granted scope.", "fields_and_connections": [{"name": "code", "type": "appRevokeAccessScopes", "description": "Revokes access scopes previously granted for an app installation.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "BuyerExperienceConfiguration", "description": "Settings describing the behavior of checkout for a B2B buyer.", "fields_and_connections": [{"name": "checkoutToDraft", "type": "Boolean!", "description": "Whether to checkout to draft order for merchant review.", "not_nullable": true}, {"name": "deposit", "type": "DepositConfiguration", "description": "The portion required to be paid at checkout.", "not_nullable": false}, {"name": "editableShippingAddress", "type": "Boolean!", "description": "Whether to allow customers to use editable shipping addresses.", "not_nullable": true}, {"name": "paymentTermsTemplate", "type": "PaymentTermsTemplate", "description": "Represents the merchant configured payment terms.", "not_nullable": false}, {"name": "payNowOnly", "type": "Boolean!", "description": "Whether a buyer must pay at checkout or they can also choose to pay\nlater using net terms. Please use checkoutToDraft(must be false) and paymentTermsTemplate(must be nil) to derive this instead.", "not_nullable": true}], "examples": []}, {"name": "CheckoutBrandingButton", "description": "The buttons customizations.", "fields_and_connections": [{"name": "background", "type": "CheckoutBrandingBackgroundStyle", "description": "The background style used for buttons.", "not_nullable": false}, {"name": "blockPadding", "type": "CheckoutBrandingSpacing", "description": "The block padding used for buttons.", "not_nullable": false}, {"name": "border", "type": "CheckoutBrandingSimpleBorder", "description": "The border used for buttons.", "not_nullable": false}, {"name": "cornerRadius", "type": "CheckoutBrandingCornerRadius", "description": "The corner radius used for buttons.", "not_nullable": false}, {"name": "inlinePadding", "type": "CheckoutBrandingSpacing", "description": "The inline padding used for buttons.", "not_nullable": false}, {"name": "typography", "type": "CheckoutBrandingTypographyStyle", "description": "The typography used for buttons.", "not_nullable": false}], "examples": []}, {"name": "CheckoutBrandingButtonColorRoles", "description": "Colors for buttons.", "fields_and_connections": [{"name": "accent", "type": "String", "description": "The color of accented objects (links and focused state).", "not_nullable": false}, {"name": "background", "type": "String", "description": "The color of the background.", "not_nullable": false}, {"name": "border", "type": "String", "description": "The color of borders.", "not_nullable": false}, {"name": "decorative", "type": "String", "description": "The decorative color for highlighting specific parts of the user interface.", "not_nullable": false}, {"name": "hover", "type": "CheckoutBrandingColorRoles", "description": "The colors of the button on hover.", "not_nullable": false}, {"name": "icon", "type": "String", "description": "The color of icons.", "not_nullable": false}, {"name": "text", "type": "String", "description": "The color of text.", "not_nullable": false}], "examples": []}, {"name": "CheckoutBrandingBuyerJourney", "description": "The customizations for the breadcrumbs that represent a buyer's journey to the checkout.", "fields_and_connections": [{"name": "visibility", "type": "CheckoutBrandingVisibility", "description": "An option to display or hide the breadcrumbs that represent the buyer's journey on 3-page checkout.", "not_nullable": false}], "examples": []}, {"name": "CheckoutBrandingCartLink", "description": "The customizations that you can make to cart links at checkout.", "fields_and_connections": [{"name": "visibility", "type": "CheckoutBrandingVisibility", "description": "Whether the cart link is visible at checkout.", "not_nullable": false}], "examples": []}, {"name": "CheckoutBrandingCheckbox", "description": "The checkboxes customizations.", "fields_and_connections": [{"name": "cornerRadius", "type": "CheckoutBrandingCornerRadius", "description": "The corner radius used for checkboxes.", "not_nullable": false}], "examples": []}, {"name": "CheckoutBrandingChoiceList", "description": "The choice list customizations.", "fields_and_connections": [{"name": "group", "type": "CheckoutBrandingChoiceListGroup", "description": "The settings that apply to the 'group' variant of ChoiceList.", "not_nullable": false}], "examples": []}, {"name": "CheckoutBrandingChoiceListGroup", "description": "The settings that apply to the 'group' variant of ChoiceList.", "fields_and_connections": [{"name": "spacing", "type": "CheckoutBrandingSpacingKeyword", "description": "The spacing between UI elements in the list.", "not_nullable": false}], "examples": []}, {"name": "CheckoutBrandingColorGlobal", "description": "A set of colors for customizing the overall look and feel of the checkout.", "fields_and_connections": [{"name": "accent", "type": "String", "description": "A color used for interaction, like links and focus states.", "not_nullable": false}, {"name": "brand", "type": "String", "description": "A color that's strongly associated with the merchant. Currently used for\nprimary buttons, for example Pay now, and secondary buttons, for example Buy again.", "not_nullable": false}, {"name": "critical", "type": "String", "description": "A semantic color used for components that communicate critical content. For example, a blocking error such as the requirement to enter a valid credit card number.", "not_nullable": false}, {"name": "decorative", "type": "String", "description": "A color used to highlight certain areas of the user interface. For example, the Text component.", "not_nullable": false}, {"name": "info", "type": "String", "description": "A semantic color used for components that communicate general, informative content.", "not_nullable": false}, {"name": "success", "type": "String", "description": "A semantic color used for components that communicate successful actions or a positive state.", "not_nullable": false}, {"name": "warning", "type": "String", "description": "A semantic color used for components that display content that requires attention. For example, something that might be wrong, but not blocking.", "not_nullable": false}], "examples": []}, {"name": "CheckoutBrandingColorRoles", "description": "A group of colors used together on a surface.", "fields_and_connections": [{"name": "accent", "type": "String", "description": "The color of accented objects (links and focused state).", "not_nullable": false}, {"name": "background", "type": "String", "description": "The color of the background.", "not_nullable": false}, {"name": "border", "type": "String", "description": "The color of borders.", "not_nullable": false}, {"name": "decorative", "type": "String", "description": "The decorative color for highlighting specific parts of the user interface.", "not_nullable": false}, {"name": "icon", "type": "String", "description": "The color of icons.", "not_nullable": false}, {"name": "text", "type": "String", "description": "The color of text.", "not_nullable": false}], "examples": []}, {"name": "CheckoutBrandingColors", "description": "The color settings for global colors and color schemes.", "fields_and_connections": [{"name": "global", "type": "CheckoutBrandingColorGlobal", "description": "A group of global colors for customizing the overall look and feel of the user interface.", "not_nullable": false}, {"name": "schemes", "type": "CheckoutBrandingColorSchemes", "description": "A set of color schemes which apply to different areas of the user interface.", "not_nullable": false}], "examples": []}, {"name": "CheckoutBrandingColorScheme", "description": "A base set of color customizations that's applied to an area of Checkout, from which every component\npulls its colors.", "fields_and_connections": [{"name": "base", "type": "CheckoutBrandingColorRoles", "description": "The main colors of a scheme. Used for the surface background, text, links, and more.", "not_nullable": false}, {"name": "control", "type": "CheckoutBrandingControlColorRoles", "description": "The colors of form controls, such as the TextField and ChoiceList components.", "not_nullable": false}, {"name": "primaryButton", "type": "CheckoutBrandingButtonColorRoles", "description": "The colors of the primary button. For example, the main payment, or Pay now button.", "not_nullable": false}, {"name": "secondaryButton", "type": "CheckoutBrandingButtonColorRoles", "description": "The colors of the secondary button, which is used for secondary actions. For example, Buy again.", "not_nullable": false}], "examples": []}, {"name": "CheckoutBrandingColorSchemes", "description": "The color schemes.", "fields_and_connections": [{"name": "scheme1", "type": "CheckoutBrandingColorScheme", "description": "The primary scheme. By default, it\u2019s used for the main area of the interface.", "not_nullable": false}, {"name": "scheme2", "type": "CheckoutBrandingColorScheme", "description": "The secondary scheme. By default, it\u2019s used for secondary areas, like Checkout\u2019s Order Summary.", "not_nullable": false}, {"name": "scheme3", "type": "CheckoutBrandingColorScheme", "description": "An extra scheme available to customize more surfaces, components or specific states of the user interface.", "not_nullable": false}, {"name": "scheme4", "type": "CheckoutBrandingColorScheme", "description": "An extra scheme available to customize more surfaces, components or specific states of the user interface.", "not_nullable": false}], "examples": []}, {"name": "CheckoutBrandingContainerDivider", "description": "The container's divider customizations.", "fields_and_connections": [{"name": "borderStyle", "type": "CheckoutBrandingBorderStyle", "description": "The divider style.", "not_nullable": false}, {"name": "borderWidth", "type": "CheckoutBrandingBorderWidth", "description": "The divider width.", "not_nullable": false}, {"name": "visibility", "type": "CheckoutBrandingVisibility", "description": "The divider visibility.", "not_nullable": false}], "examples": []}, {"name": "CheckoutBrandingContent", "description": "The content container customizations.", "fields_and_connections": [{"name": "divider", "type": "CheckoutBrandingContainerDivider", "description": "The content container's divider style and visibility.", "not_nullable": false}], "examples": []}, {"name": "CheckoutBrandingControlColorRoles", "description": "Colors for form controls.", "fields_and_connections": [{"name": "accent", "type": "String", "description": "The color of accented objects (links and focused state).", "not_nullable": false}, {"name": "background", "type": "String", "description": "The color of the background.", "not_nullable": false}, {"name": "border", "type": "String", "description": "The color of borders.", "not_nullable": false}, {"name": "decorative", "type": "String", "description": "The decorative color for highlighting specific parts of the user interface.", "not_nullable": false}, {"name": "icon", "type": "String", "description": "The color of icons.", "not_nullable": false}, {"name": "selected", "type": "CheckoutBrandingColorRoles", "description": "The colors of selected controls.", "not_nullable": false}, {"name": "text", "type": "String", "description": "The color of text.", "not_nullable": false}], "examples": []}, {"name": "CheckoutBrandingCornerRadiusVariables", "description": "Define the pixel size of corner radius options.", "fields_and_connections": [{"name": "base", "type": "Int", "description": "The value in pixels for base corner radii. Example: 5.", "not_nullable": false}, {"name": "large", "type": "Int", "description": "The value in pixels for large corner radii. Example: 10.", "not_nullable": false}, {"name": "small", "type": "Int", "description": "The value in pixels for small corner radii. Example: 3.", "not_nullable": false}], "examples": []}, {"name": "CheckoutBrandingCustomFont", "description": "A custom font.", "fields_and_connections": [{"name": "genericFileId", "type": "CheckoutBrandingFont", "description": "Globally unique ID reference to the custom font file.", "not_nullable": false}], "examples": []}, {"name": "CheckoutBrandingDividerStyle", "description": "The customizations for the page, content, main, and order summary dividers.", "fields_and_connections": [{"name": "borderStyle", "type": "CheckoutBrandingBorderStyle", "description": "The border style for the divider.", "not_nullable": false}, {"name": "borderWidth", "type": "CheckoutBrandingBorderWidth", "description": "The border width for the divider.", "not_nullable": false}], "examples": []}, {"name": "CheckoutBrandingExpressCheckout", "description": "The Express Checkout customizations.", "fields_and_connections": [{"name": "button", "type": "CheckoutBrandingExpressCheckoutButton", "description": "The Express Checkout buttons customizations.", "not_nullable": false}], "examples": []}, {"name": "CheckoutBrandingExpressCheckoutButton", "description": "The Express Checkout button customizations.", "fields_and_connections": [{"name": "cornerRadius", "type": "CheckoutBrandingCornerRadius", "description": "The corner radius used for the Express Checkout buttons.", "not_nullable": false}], "examples": []}, {"name": "CheckoutBrandingFooter", "description": "A container for the footer section customizations.", "fields_and_connections": [{"name": "alignment", "type": "CheckoutBrandingFooterAlignment", "description": "The footer alignment.", "not_nullable": false}, {"name": "colorScheme", "type": "CheckoutBrandingColorSchemeSelection", "description": "The selected color scheme of the footer container.", "not_nullable": false}, {"name": "content", "type": "CheckoutBrandingFooterContent", "description": "The footer content settings.", "not_nullable": false}, {"name": "divided", "type": "Boolean", "description": "The divided setting.", "not_nullable": false}, {"name": "padding", "type": "CheckoutBrandingSpacingKeyword", "description": "The padding of the footer container.", "not_nullable": false}, {"name": "position", "type": "CheckoutBrandingFooterPosition", "description": "The footer position.", "not_nullable": false}], "examples": []}, {"name": "CheckoutBrandingFooterContent", "description": "The footer content customizations.", "fields_and_connections": [{"name": "visibility", "type": "CheckoutBrandingVisibility", "description": "The visibility settings for footer content.", "not_nullable": false}], "examples": []}, {"name": "CheckoutBrandingGlobal", "description": "The global customizations.", "fields_and_connections": [{"name": "cornerRadius", "type": "CheckoutBrandingGlobalCornerRadius", "description": "The global corner radius setting that overrides all other corner radius\ncustomizations.", "not_nullable": false}, {"name": "typography", "type": "CheckoutBrandingTypographyStyleGlobal", "description": "The global typography customizations.", "not_nullable": false}], "examples": []}, {"name": "CheckoutBrandingHeaderCartLink", "description": "The header cart link customizations.", "fields_and_connections": [{"name": "contentType", "type": "CheckoutBrandingCartLinkContentType", "description": "The content type for the header back to cart link in 1-page checkout. Setting this to image will render the custom image provided using the image field on the header cart_link object. If no image is provided, the default cart icon will be used.", "not_nullable": false}, {"name": "image", "type": "Image", "description": "The image that's used for the header back to cart link in 1-page checkout when the content type is set to image.", "not_nullable": false}], "examples": []}, {"name": "CheckoutBrandingHeadingLevel", "description": "The heading level customizations.", "fields_and_connections": [{"name": "typography", "type": "CheckoutBrandingTypographyStyle", "description": "The typography customizations used for headings.", "not_nullable": false}], "examples": []}, {"name": "CheckoutBrandingMainSection", "description": "The main sections customizations.", "fields_and_connections": [{"name": "background", "type": "CheckoutBrandingBackground", "description": "The background style of the main sections.", "not_nullable": false}, {"name": "border", "type": "CheckoutBrandingSimpleBorder", "description": "The border for the main sections.", "not_nullable": false}, {"name": "borderStyle", "type": "CheckoutBrandingBorderStyle", "description": "The border style of the main sections.", "not_nullable": false}, {"name": "borderWidth", "type": "CheckoutBrandingBorderWidth", "description": "The border width of the main sections.", "not_nullable": false}, {"name": "colorScheme", "type": "CheckoutBrandingColorSchemeSelection", "description": "The selected color scheme of the main sections.", "not_nullable": false}, {"name": "cornerRadius", "type": "CheckoutBrandingCornerRadius", "description": "The corner radius of the main sections.", "not_nullable": false}, {"name": "padding", "type": "CheckoutBrandingSpacingKeyword", "description": "The padding of the main sections.", "not_nullable": false}, {"name": "shadow", "type": "CheckoutBrandingShadow", "description": "The shadow of the main sections.", "not_nullable": false}], "examples": []}, {"name": "CheckoutBrandingMerchandiseThumbnail", "description": "The merchandise thumbnails customizations.", "fields_and_connections": [{"name": "badge", "type": "CheckoutBrandingMerchandiseThumbnailBadge", "description": "The settings for the merchandise thumbnail badge.", "not_nullable": false}, {"name": "border", "type": "CheckoutBrandingSimpleBorder", "description": "The border used for merchandise thumbnails.", "not_nullable": false}, {"name": "cornerRadius", "type": "CheckoutBrandingCornerRadius", "description": "The corner radius used for merchandise thumbnails.", "not_nullable": false}, {"name": "fit", "type": "CheckoutBrandingObjectFit", "description": "The property used to customize how the product image fits within merchandise thumbnails.", "not_nullable": false}], "examples": []}, {"name": "CheckoutBrandingMerchandiseThumbnailBadge", "description": "The merchandise thumbnail badges customizations.", "fields_and_connections": [{"name": "background", "type": "CheckoutBrandingMerchandiseThumbnailBadgeBackground", "description": "The background used for merchandise thumbnail badges.", "not_nullable": false}], "examples": []}, {"name": "CheckoutBrandingOrderSummarySection", "description": "The order summary sections customizations.", "fields_and_connections": [{"name": "background", "type": "CheckoutBrandingBackground", "description": "The background style of the order summary sections.", "not_nullable": false}, {"name": "border", "type": "CheckoutBrandingSimpleBorder", "description": "The border for the order summary sections.", "not_nullable": false}, {"name": "borderStyle", "type": "CheckoutBrandingBorderStyle", "description": "The border style of the order summary sections.", "not_nullable": false}, {"name": "borderWidth", "type": "CheckoutBrandingBorderWidth", "description": "The border width of the order summary sections.", "not_nullable": false}, {"name": "colorScheme", "type": "CheckoutBrandingColorSchemeSelection", "description": "The selected color scheme of the order summary sections.", "not_nullable": false}, {"name": "cornerRadius", "type": "CheckoutBrandingCornerRadius", "description": "The corner radius of the order summary sections.", "not_nullable": false}, {"name": "padding", "type": "CheckoutBrandingSpacingKeyword", "description": "The padding of the order summary sections.", "not_nullable": false}, {"name": "shadow", "type": "CheckoutBrandingShadow", "description": "The shadow of the order summary sections.", "not_nullable": false}], "examples": []}, {"name": "CheckoutBrandingSelect", "description": "The selects customizations.", "fields_and_connections": [{"name": "border", "type": "CheckoutBrandingBorder", "description": "The border used for selects.", "not_nullable": false}, {"name": "typography", "type": "CheckoutBrandingTypographyStyle", "description": "The typography customizations used for selects.", "not_nullable": false}], "examples": []}, {"name": "CheckoutBrandingShopifyFont", "description": "A Shopify font.", "fields_and_connections": [{"name": "sources", "type": "CheckoutBrandingFont", "description": "The font sources.", "not_nullable": false}], "examples": []}, {"name": "CheckoutBrandingTextField", "description": "The text fields customizations.", "fields_and_connections": [{"name": "border", "type": "CheckoutBrandingBorder", "description": "The border used for text fields.", "not_nullable": false}, {"name": "typography", "type": "CheckoutBrandingTypographyStyle", "description": "The typography customizations used for text fields.", "not_nullable": false}], "examples": []}, {"name": "CheckoutBrandingTypographyStyle", "description": "The typography customizations.", "fields_and_connections": [{"name": "font", "type": "CheckoutBrandingTypographyFont", "description": "The font.", "not_nullable": false}, {"name": "kerning", "type": "CheckoutBrandingTypographyKerning", "description": "The kerning.", "not_nullable": false}, {"name": "letterCase", "type": "CheckoutBrandingTypographyLetterCase", "description": "The letter case.", "not_nullable": false}, {"name": "size", "type": "CheckoutBrandingTypographySize", "description": "The font size.", "not_nullable": false}, {"name": "weight", "type": "CheckoutBrandingTypographyWeight", "description": "The font weight.", "not_nullable": false}], "examples": []}, {"name": "CheckoutBrandingTypographyStyleGlobal", "description": "The global typography customizations.", "fields_and_connections": [{"name": "kerning", "type": "CheckoutBrandingTypographyKerning", "description": "The kerning.", "not_nullable": false}, {"name": "letterCase", "type": "CheckoutBrandingTypographyLetterCase", "description": "The letter case.", "not_nullable": false}], "examples": []}, {"name": "CheckoutProfile", "description": "A checkout profile defines the branding settings and the UI extensions for a store's checkout. A checkout profile could be published or draft. A store might have at most one published checkout profile, which is used to render their live checkout. The store could also have multiple draft profiles that were created, previewed, and published using the admin checkout editor.", "fields_and_connections": [{"name": "createdAt", "type": "checkoutProfile", "description": "A checkout profile on a shop.", "not_nullable": false}, {"name": "createdAt", "type": "checkoutProfiles", "description": "List of checkout profiles on a shop.", "not_nullable": false}, {"name": "createdAt", "type": "Node", "description": "The date and time when the checkout profile was created.", "not_nullable": false}], "examples": []}, {"name": "Count", "description": "Details for count of elements.", "fields_and_connections": [{"name": "count", "type": "abandonedCheckoutsCount", "description": "Returns the count of abandoned checkouts for the given shop. Limited to a maximum of 10000.", "not_nullable": false}, {"name": "count", "type": "blogsCount", "description": "Count of blogs.", "not_nullable": false}, {"name": "count", "type": "catalogsCount", "description": "The count of catalogs belonging to the shop. Limited to a maximum of 10000.", "not_nullable": false}, {"name": "count", "type": "collectionsCount", "description": "Count of collections. Limited to a maximum of 10000.", "not_nullable": false}, {"name": "count", "type": "companiesCount", "description": "The number of companies for a shop.", "not_nullable": false}, {"name": "count", "type": "customersCount", "description": "The number of customers.", "not_nullable": false}, {"name": "count", "type": "discountCodesCount", "description": "The total number of discount codes for the shop.", "not_nullable": false}, {"name": "count", "type": "discountNodesCount", "description": "The total number of discounts for the shop. Limited to a maximum of 10000.", "not_nullable": false}, {"name": "count", "type": "eventsCount", "description": "Count of events. Limited to a maximum of 10000.", "not_nullable": false}, {"name": "count", "type": "giftCardsCount", "description": "The total number of gift cards issued for the shop. Limited to a maximum of 10000.", "not_nullable": false}, {"name": "count", "type": "locationsCount", "description": "Returns the count of locations for the given shop. Limited to a maximum of 10000.", "not_nullable": false}, {"name": "count", "type": "ordersCount", "description": "Returns the count of orders for the given shop. Limited to a maximum of 10000.", "not_nullable": false}, {"name": "count", "type": "pagesCount", "description": "Count of pages.", "not_nullable": false}, {"name": "count", "type": "pendingOrdersCount", "description": "The number of pendings orders. Limited to a maximum of 10000.", "not_nullable": false}, {"name": "count", "type": "productsCount", "description": "Count of products.", "not_nullable": false}, {"name": "count", "type": "productVariantsCount", "description": "Count of product variants.", "not_nullable": false}, {"name": "count", "type": "publicationsCount", "description": "Count of publications.", "not_nullable": false}, {"name": "count", "type": "publishedProductsCount", "description": "Returns a count of published products by publication ID.", "not_nullable": false}, {"name": "count", "type": "segmentsCount", "description": "The number of segments for a shop.", "not_nullable": false}, {"name": "count", "type": "urlRedirectsCount", "description": "Count of redirects. Limited to a maximum of 10000.", "not_nullable": false}, {"name": "count", "type": "webhookSubscriptionsCount", "description": "The count of webhook subscriptions.\nBuilding an app? If you only use app-specific webhooks, you won't need this. App-specific webhook subscriptions specified in your shopify.app.toml may be easier. They are automatically kept up to date by Shopify & require less maintenance. Please read About managing webhook subscriptions. Limited to a maximum of 10000.", "not_nullable": false}], "examples": []}, {"name": "CustomerCreditCard", "description": "Represents a card instrument for customer payment method.", "fields_and_connections": [{"name": "billingAddress", "type": "CustomerCreditCardBillingAddress", "description": "The billing address of the card.", "not_nullable": false}, {"name": "brand", "type": "String!", "description": "The brand of the card.", "not_nullable": true}, {"name": "expiresSoon", "type": "Boolean!", "description": "Whether the card is about to expire.", "not_nullable": true}, {"name": "expiryMonth", "type": "Int!", "description": "The expiry month of the card.", "not_nullable": true}, {"name": "expiryYear", "type": "Int!", "description": "The expiry year of the card.", "not_nullable": true}, {"name": "firstDigits", "type": "String", "description": "The card's BIN number.", "not_nullable": false}, {"name": "isRevocable", "type": "Boolean!", "description": "The payment method can be revoked if there are no active subscription contracts.", "not_nullable": true}, {"name": "lastDigits", "type": "String!", "description": "The last 4 digits of the card.", "not_nullable": true}, {"name": "maskedNumber", "type": "String!", "description": "The masked card number with only the last 4 digits displayed.", "not_nullable": true}, {"name": "name", "type": "String!", "description": "The name of the card holder.", "not_nullable": true}, {"name": "source", "type": "String", "description": "The source of the card if coming from a wallet such as Apple Pay.", "not_nullable": false}, {"name": "virtualLastDigits", "type": "String", "description": "The last 4 digits of the Device Account Number.", "not_nullable": false}], "examples": []}, {"name": "CustomerPaymentInstrumentBillingAddress", "description": "The billing address of a payment instrument.", "fields_and_connections": [{"name": "address1", "type": "String", "description": "The first line of the address. Typically the street address or PO Box number.", "not_nullable": false}, {"name": "city", "type": "String", "description": "The name of the city, district, village, or town.", "not_nullable": false}, {"name": "country", "type": "String", "description": "The name of the country.", "not_nullable": false}, {"name": "countryCode", "type": "CountryCode", "description": "The two-letter code for the country of the address.\nFor example, US.", "not_nullable": false}, {"name": "name", "type": "String", "description": "The name of the buyer of the address.", "not_nullable": false}, {"name": "province", "type": "String", "description": "The region of the address, such as the province, state, or district.", "not_nullable": false}, {"name": "provinceCode", "type": "String", "description": "The alphanumeric code for the region.\nFor example, ON.", "not_nullable": false}, {"name": "zip", "type": "String", "description": "The zip or postal code of the address.", "not_nullable": false}], "examples": []}, {"name": "CustomerPaymentMethod", "description": "A customer's payment method.", "fields_and_connections": [{"name": "customer", "type": "customerPaymentMethod", "description": "Returns a CustomerPaymentMethod resource by its ID.", "not_nullable": false}, {"name": "customer", "type": "customerPaymentMethodCreditCardCreate", "description": "Creates a credit card payment method for a customer using a session id.\nThese values are only obtained through card imports happening from a PCI compliant environment.\nPlease use customerPaymentMethodRemoteCreate if you are not managing credit cards directly.", "not_nullable": false}, {"name": "customer", "type": "customerPaymentMethodCreditCardUpdate", "description": "Updates the credit card payment method for a customer.", "not_nullable": false}, {"name": "customer", "type": "customerPaymentMethodPaypalBillingAgreementCreate", "description": "Creates a PayPal billing agreement for a customer.", "not_nullable": false}, {"name": "customer", "type": "customerPaymentMethodPaypalBillingAgreementUpdate", "description": "Updates a PayPal billing agreement for a customer.", "not_nullable": false}, {"name": "customer", "type": "customerPaymentMethodRemoteCreate", "description": "Create a payment method from remote gateway identifiers. NOTE: This operation processes payment methods asynchronously. The returned payment method will initially have incomplete details. Developers must poll this payment method using customerPaymentMethod query until all payment method details are available, or the payment method is revoked (usually within seconds).", "not_nullable": false}, {"name": "customer", "type": "Node", "description": "The customer to whom the payment method belongs.", "not_nullable": false}], "examples": []}, {"name": "CustomerPaypalBillingAgreement", "description": "Represents a PayPal instrument for customer payment method.", "fields_and_connections": [{"name": "billingAddress", "type": "CustomerPaymentInstrumentBillingAddress", "description": "The billing address of this payment method.", "not_nullable": false}, {"name": "inactive", "type": "Boolean!", "description": "Whether the PayPal billing agreement is inactive.", "not_nullable": true}, {"name": "isRevocable", "type": "Boolean!", "description": "Whether the payment method can be revoked.The payment method can be revoked if there are no active subscription contracts.", "not_nullable": true}, {"name": "paypalAccountEmail", "type": "String", "description": "The customers's PayPal account email address.", "not_nullable": false}], "examples": []}, {"name": "CustomerShopPayAgreement", "description": "Represents a Shop Pay card instrument for customer payment method.", "fields_and_connections": [{"name": "billingAddress", "type": "CustomerCreditCardBillingAddress", "description": "The billing address of the card.", "not_nullable": false}, {"name": "expiresSoon", "type": "Boolean!", "description": "Whether the card is about to expire.", "not_nullable": true}, {"name": "expiryMonth", "type": "Int!", "description": "The expiry month of the card.", "not_nullable": true}, {"name": "expiryYear", "type": "Int!", "description": "The expiry year of the card.", "not_nullable": true}, {"name": "inactive", "type": "Boolean!", "description": "Whether the Shop Pay billing agreement is inactive.", "not_nullable": true}, {"name": "isRevocable", "type": "Boolean!", "description": "The payment method can be revoked if there are no active subscription contracts.", "not_nullable": true}, {"name": "lastDigits", "type": "String!", "description": "The last 4 digits of the card.", "not_nullable": true}, {"name": "maskedNumber", "type": "String!", "description": "The masked card number with only the last 4 digits displayed.", "not_nullable": true}, {"name": "name", "type": "String!", "description": "The name of the card holder.", "not_nullable": true}], "examples": []}, {"name": "DepositPercentage", "description": "A percentage deposit.", "fields_and_connections": [{"name": "percentage", "type": "Float!", "description": "The percentage value of the deposit.", "not_nullable": true}], "examples": []}, {"name": "Domain", "description": "A unique string that represents the address of a Shopify store on the Internet.", "fields_and_connections": [{"name": "host", "type": "domain", "description": "Lookup a Domain by ID.", "not_nullable": false}, {"name": "host", "type": "Node", "description": "The host name of the domain. For example, example.com.", "not_nullable": false}], "examples": []}, {"name": "DomainLocalization", "description": "The country and language settings assigned to a domain.", "fields_and_connections": [{"name": "alternateLocales", "type": "[String!]!", "description": "The ISO codes for the domain\u2019s alternate locales. For example, [\"en\"].", "not_nullable": true}, {"name": "country", "type": "String", "description": "The ISO code for the country assigned to the domain. For example, \"CA\" or \"*\" for a domain set to \"Rest of world\".", "not_nullable": false}, {"name": "defaultLocale", "type": "String!", "description": "The ISO code for the domain\u2019s default locale. For example, \"en\".", "not_nullable": true}], "examples": []}, {"name": "FinanceAppAccessPolicy", "description": "Current user's access policy for a finance app.", "fields_and_connections": [{"name": "access", "type": "financeAppAccessPolicy", "description": "Returns the access policy for a finance app .", "not_nullable": false}], "examples": []}, {"name": "FulfillmentConstraintRule", "description": "A fulfillment constraint rule.", "fields_and_connections": [{"name": "deliveryMethodTypes", "type": "fulfillmentConstraintRules", "description": "The fulfillment constraint rules that belong to a shop.", "not_nullable": false}, {"name": "deliveryMethodTypes", "type": "fulfillmentConstraintRuleCreate", "description": "Creates a fulfillment constraint rule and its metafield.", "not_nullable": false}, {"name": "deliveryMethodTypes", "type": "fulfillmentConstraintRuleUpdate", "description": "Update a fulfillment constraint rule.", "not_nullable": false}, {"name": "deliveryMethodTypes", "type": "HasMetafields", "description": "Delivery method types that the function is associated with.", "not_nullable": false}, {"name": "deliveryMethodTypes", "type": "Node", "description": "Delivery method types that the function is associated with.", "not_nullable": false}], "examples": []}, {"name": "FunctionsAppBridge", "description": "The App Bridge information for a Shopify Function.", "fields_and_connections": [{"name": "createPath", "type": "String!", "description": "The relative path for creating a customization.", "not_nullable": true}, {"name": "detailsPath", "type": "String!", "description": "The relative path for viewing a customization.", "not_nullable": true}], "examples": []}, {"name": "FunctionsErrorHistory", "description": "The error history from running a Shopify Function.", "fields_and_connections": [{"name": "errorsFirstOccurredAt", "type": "DateTime!", "description": "The date and time that the first error occurred.", "not_nullable": true}, {"name": "firstOccurredAt", "type": "DateTime!", "description": "The date and time that the first error occurred.", "not_nullable": true}, {"name": "hasBeenSharedSinceLastError", "type": "Boolean!", "description": "Whether the merchant has shared all the recent errors with the developer.", "not_nullable": true}, {"name": "hasSharedRecentErrors", "type": "Boolean!", "description": "Whether the merchant has shared all the recent errors with the developer.", "not_nullable": true}], "examples": []}, {"name": "GiftCard", "description": "Represents an issued gift card.", "fields_and_connections": [{"name": "balance", "type": "giftCard", "description": "Returns a gift card resource by ID.", "not_nullable": false}, {"name": "balance", "type": "giftCards", "description": "Returns a list of gift cards.", "not_nullable": false}, {"name": "balance", "type": "giftCardCreate", "description": "Create a gift card.", "not_nullable": false}, {"name": "balance", "type": "giftCardDeactivate", "description": "Deactivate a gift card. A deactivated gift card cannot be used by a customer.\nA deactivated gift card cannot be re-enabled.", "not_nullable": false}, {"name": "balance", "type": "giftCardSendNotificationToCustomer", "description": "Send notification to the customer of a gift card.", "not_nullable": false}, {"name": "balance", "type": "giftCardSendNotificationToRecipient", "description": "Send notification to the recipient of a gift card.", "not_nullable": false}, {"name": "balance", "type": "giftCardUpdate", "description": "Update a gift card.", "not_nullable": false}, {"name": "balance", "type": "Node", "description": "The gift card's remaining balance.", "not_nullable": false}], "examples": []}, {"name": "GiftCardConfiguration", "description": "Represents information about the configuration of gift cards on the shop.", "fields_and_connections": [{"name": "issueLimit", "type": "giftCardConfiguration", "description": "The configuration for the shop's gift cards.", "not_nullable": false}], "examples": []}, {"name": "GiftCardCreditTransaction", "description": "A credit transaction which increases the gift card balance.", "fields_and_connections": [{"name": "amount", "type": "giftCardCredit", "description": "Credit a gift card.", "not_nullable": false}, {"name": "amount", "type": "GiftCardTransaction", "description": "The amount of the transaction.", "not_nullable": false}, {"name": "amount", "type": "HasMetafields", "description": "The amount of the transaction.", "not_nullable": false}, {"name": "amount", "type": "Node", "description": "The amount of the transaction.", "not_nullable": false}], "examples": []}, {"name": "GiftCardDebitTransaction", "description": "A debit transaction which decreases the gift card balance.", "fields_and_connections": [{"name": "amount", "type": "giftCardDebit", "description": "Debit a gift card.", "not_nullable": false}, {"name": "amount", "type": "GiftCardTransaction", "description": "The amount of the transaction.", "not_nullable": false}, {"name": "amount", "type": "HasMetafields", "description": "The amount of the transaction.", "not_nullable": false}, {"name": "amount", "type": "Node", "description": "The amount of the transaction.", "not_nullable": false}], "examples": []}, {"name": "GiftCardRecipient", "description": "Represents a recipient who will receive the issued gift card.", "fields_and_connections": [{"name": "message", "type": "String", "description": "The message sent with the gift card.", "not_nullable": false}, {"name": "preferredName", "type": "String", "description": "The preferred name of the recipient who will receive the gift card.", "not_nullable": false}, {"name": "recipient", "type": "Customer!", "description": "The recipient who will receive the gift card.", "not_nullable": true}, {"name": "sendNotificationAt", "type": "DateTime", "description": "The scheduled datetime on which the gift card will be sent to the recipient. The gift card will be sent within an hour of the specified datetime.", "not_nullable": false}], "examples": []}, {"name": "Image", "description": "Represents an image resource.", "fields_and_connections": [{"name": "altText", "type": "HasMetafields", "description": "A word or phrase to share the nature or contents of an image.", "not_nullable": false}], "examples": []}, {"name": "ImageUploadParameter", "description": "A parameter to upload an image.\nDeprecated in favor of\nStagedUploadParameter,\nwhich is used in\nStagedMediaUploadTarget\nand returned by the\nstagedUploadsCreate mutation.", "fields_and_connections": [{"name": "name", "type": "String!", "description": "The parameter name.", "not_nullable": true}, {"name": "value", "type": "String!", "description": "The parameter value.", "not_nullable": true}], "examples": []}, {"name": "Job", "description": "A job corresponds to some long running task that the client should poll for status.", "fields_and_connections": [{"name": "done", "type": "job", "description": "Returns a Job resource by ID. Used to check the status of internal jobs and any applicable changes.", "not_nullable": false}, {"name": "done", "type": "collectionAddProductsV2", "description": "Asynchronously adds a set of products to a given collection. It can take a long time to run. Instead of returning a collection, it returns a job which should be polled.", "not_nullable": false}, {"name": "done", "type": "collectionRemoveProducts", "description": "Removes a set of products from a given collection. The mutation can take a long time to run. Instead of returning an updated collection the mutation returns a job, which should be polled. For use with manual collections only.", "not_nullable": false}, {"name": "done", "type": "collectionReorderProducts", "description": "Asynchronously reorders a set of products within a specified collection. Instead of returning an updated collection, this mutation returns a job, which should be polled. The Collection.sortOrder must be MANUAL. Displaced products will have their position altered in a consistent manner, with no gaps.", "not_nullable": false}, {"name": "done", "type": "collectionUpdate", "description": "Updates a collection.", "not_nullable": false}, {"name": "done", "type": "customerMerge", "description": "Merges two customers.", "not_nullable": false}, {"name": "done", "type": "deliveryProfileRemove", "description": "Enqueue the removal of a delivery profile.", "not_nullable": false}, {"name": "done", "type": "discountAutomaticBulkDelete", "description": "Asynchronously delete automatic discounts in bulk if a search or saved_search_id argument is provided or if a\nmaximum discount threshold is reached (1,000). Otherwise, deletions will occur inline.\nWarning: All automatic discounts will be deleted if a blank search argument is provided.", "not_nullable": false}, {"name": "done", "type": "discountCodeBulkActivate", "description": "Activates multiple code discounts asynchronously using one of the following:\n\nA search query\nA saved search ID\nA list of discount code IDs\n\nFor example, you can activate discounts for all codes that match a search criteria, or activate a predefined set of discount codes.", "not_nullable": false}, {"name": "done", "type": "discountCodeBulkDeactivate", "description": "Deactivates multiple code-based discounts asynchronously using one of the following:\n\nA search query\nA saved search ID\nA list of discount code IDs\n\nFor example, you can deactivate discounts for all codes that match a search criteria, or deactivate a predefined set of discount codes.", "not_nullable": false}, {"name": "done", "type": "discountCodeBulkDelete", "description": "Deletes multiple code-based discounts asynchronously using one of the following:\n\nA search query\nA saved search ID\nA list of discount code IDs\n\nFor example, you can delete discounts for all codes that match a search criteria, or delete a predefined set of discount codes.", "not_nullable": false}, {"name": "done", "type": "discountCodeRedeemCodeBulkDelete", "description": "Asynchronously delete\ndiscount codes\nin bulk that customers can use to redeem a discount.", "not_nullable": false}, {"name": "done", "type": "draftOrderBulkAddTags", "description": "Adds tags to multiple draft orders.", "not_nullable": false}, {"name": "done", "type": "draftOrderBulkDelete", "description": "Deletes multiple draft orders.", "not_nullable": false}, {"name": "done", "type": "draftOrderBulkRemoveTags", "description": "Removes tags from multiple draft orders.", "not_nullable": false}, {"name": "done", "type": "marketingActivitiesDeleteAllExternal", "description": "Deletes all external marketing activities. Deletion is performed by a background job, as it may take a bit of time to complete if a large number of activities are to be deleted. Attempting to create or modify external activities before the job has completed will result in the create/update/upsert mutation returning an error.", "not_nullable": false}, {"name": "done", "type": "metafieldDefinitionUpdate", "description": "Updates a metafield definition.", "not_nullable": false}, {"name": "done", "type": "metaobjectBulkDelete", "description": "Asynchronously delete metaobjects and their associated metafields in bulk.", "not_nullable": false}, {"name": "done", "type": "orderCancel", "description": "Cancels an order.", "not_nullable": false}, {"name": "done", "type": "orderCreateMandatePayment", "description": "Creates a payment for an order by mandate.", "not_nullable": false}, {"name": "done", "type": "productDuplicate", "description": "Duplicates a product.\nIf you need to duplicate a large product, such as one that has many\nvariants\nthat are active at several\nlocations,\nyou might encounter timeout errors.\nTo avoid these timeout errors, you can instead duplicate the product asynchronously.\nIn API version 2024-10 and higher, include synchronous: false argument in this mutation to perform the duplication asynchronously.\nIn API version 2024-07 and lower, use the asynchronous ProductDuplicateAsyncV2.\nMetafield values are not duplicated if the unique values capability is enabled.", "not_nullable": false}, {"name": "done", "type": "productReorderMedia", "description": "Asynchronously reorders the media attached to a product.", "not_nullable": false}, {"name": "done", "type": "subscriptionBillingCycleBulkCharge", "description": "Asynchronously queries and charges all subscription billing cycles whose billingAttemptExpectedDate values fall within a specified date range and meet additional filtering criteria. The results of this action can be retrieved using the subscriptionBillingCycleBulkResults query.", "not_nullable": false}, {"name": "done", "type": "subscriptionBillingCycleBulkSearch", "description": "Asynchronously queries all subscription billing cycles whose billingAttemptExpectedDate values fall within a specified date range and meet additional filtering criteria. The results of this action can be retrieved using the subscriptionBillingCycleBulkResults query.", "not_nullable": false}, {"name": "done", "type": "themeFilesUpsert", "description": "Create or update theme files.", "not_nullable": false}, {"name": "done", "type": "urlRedirectBulkDeleteAll", "description": "Asynchronously delete URL redirects in bulk.", "not_nullable": false}, {"name": "done", "type": "urlRedirectBulkDeleteByIds", "description": "Asynchronously delete URLRedirect\nobjects in bulk by IDs.\nLearn more about URLRedirect\nobjects.", "not_nullable": false}, {"name": "done", "type": "urlRedirectBulkDeleteBySavedSearch", "description": "Asynchronously delete redirects in bulk.", "not_nullable": false}, {"name": "done", "type": "urlRedirectBulkDeleteBySearch", "description": "Asynchronously delete redirects in bulk.", "not_nullable": false}, {"name": "done", "type": "urlRedirectImportSubmit", "description": "Submits a UrlRedirectImport request to be processed.\nThe UrlRedirectImport request is first created with the urlRedirectImportCreate mutation.", "not_nullable": false}], "examples": []}, {"name": "LocalizedField", "description": "Represents the value captured by a localized field. Localized fields are additional fields required by certain countries on international orders. For example, some countries require additional fields for customs information or tax identification numbers.", "fields_and_connections": [{"name": "countryCode", "type": "CountryCode!", "description": "Country ISO 3166-1 alpha-2 code.", "not_nullable": true}, {"name": "key", "type": "LocalizedFieldKey!", "description": "The localized field keys that are allowed.", "not_nullable": true}, {"name": "purpose", "type": "LocalizedFieldPurpose!", "description": "The purpose of this localized field.", "not_nullable": true}, {"name": "title", "type": "String!", "description": "The localized field title.", "not_nullable": true}, {"name": "value", "type": "String!", "description": "The value of the field.", "not_nullable": true}], "examples": []}, {"name": "MailingAddress", "description": "Represents a customer mailing address.\nFor example, a customer's default address and an order's billing address are both mailling addresses.", "fields_and_connections": [{"name": "address1", "type": "customerAddressCreate", "description": "Create a new customer address.", "not_nullable": false}, {"name": "address1", "type": "customerAddressUpdate", "description": "Update a customer's address information.", "not_nullable": false}, {"name": "address1", "type": "Node", "description": "The first line of the address. Typically the street address or PO Box number.", "not_nullable": false}], "examples": []}, {"name": "MerchantApprovalSignals", "description": "Merchant approval for accelerated onboarding to channel integration apps.", "fields_and_connections": [{"name": "identityVerified", "type": "Boolean!", "description": "Whether the shop's Shopify Payments account identity is verified. Returns false if the identity is unverified or if the shop doesn't have a Shopify Payments account.", "not_nullable": true}, {"name": "verifiedByShopify", "type": "Boolean!", "description": "Whether Shopify has pre-verified the merchant's business for onboarding to channel integration apps. Returns false if the shop isn't marked for verification.", "not_nullable": true}, {"name": "verifiedByShopifyTier", "type": "String!", "description": "Which tier of the Shopify verification was determined for the merchant's business for onboarding to channel integration apps.", "not_nullable": true}], "examples": []}, {"name": "MetafieldAccess", "description": "Access permissions for the definition's metafields.", "fields_and_connections": [{"name": "admin", "type": "MetafieldAdminAccess", "description": "The access permitted on the Admin API.", "not_nullable": false}, {"name": "customerAccount", "type": "MetafieldCustomerAccountAccess!", "description": "The access permitted on the Customer Account API.", "not_nullable": true}, {"name": "storefront", "type": "MetafieldStorefrontAccess", "description": "The access permitted on the Storefront API.", "not_nullable": false}, {"name": "grants", "type": "[MetafieldAccessGrant!]!", "description": "The explicit grants for this metafield definition, superseding the default admin access\nfor the specified grantees. Explicit grants are deprecated.", "not_nullable": true}], "examples": []}, {"name": "MetafieldAccessGrant", "description": "An explicit access grant for the metafields under this definition.\nExplicit grants are deprecated.", "fields_and_connections": [{"name": "access", "type": "MetafieldGrantAccessLevel!", "description": "The level of access the grantee has.", "not_nullable": true}, {"name": "grantee", "type": "String!", "description": "The grantee being granted access.", "not_nullable": true}], "examples": []}, {"name": "MetafieldCapabilities", "description": "Provides the capabilities of a metafield definition.", "fields_and_connections": [{"name": "adminFilterable", "type": "MetafieldCapabilityAdminFilterable!", "description": "Indicate whether a metafield definition is configured for filtering.", "not_nullable": true}, {"name": "smartCollectionCondition", "type": "MetafieldCapabilitySmartCollectionCondition!", "description": "Indicate whether a metafield definition can be used as a smart collection condition.", "not_nullable": true}, {"name": "uniqueValues", "type": "MetafieldCapabilityUniqueValues!", "description": "Indicate whether the metafield values for a metafield definition are required to be unique.", "not_nullable": true}], "examples": []}, {"name": "MetafieldCapabilityAdminFilterable", "description": "Information about the admin filterable capability on a metafield definition.", "fields_and_connections": [{"name": "eligible", "type": "Boolean!", "description": "Indicates if the definition is eligible to have the capability.", "not_nullable": true}, {"name": "enabled", "type": "Boolean!", "description": "Indicates if the capability is enabled.", "not_nullable": true}, {"name": "status", "type": "MetafieldDefinitionAdminFilterStatus!", "description": "Determines the metafield definition's filter status for use in admin filtering.", "not_nullable": true}], "examples": []}, {"name": "MetafieldCapabilityUniqueValues", "description": "Information about the unique values capability on a metafield definition.", "fields_and_connections": [{"name": "eligible", "type": "Boolean!", "description": "Indicates if the definition is eligible to have the capability.", "not_nullable": true}, {"name": "enabled", "type": "Boolean!", "description": "Indicates if the capability is enabled.", "not_nullable": true}], "examples": []}, {"name": "MetafieldDefinitionConstraints", "description": "The constraints\nthat determine what subtypes of resources a metafield definition applies to.", "fields_and_connections": [{"name": "key", "type": "String", "description": "The category of resource subtypes that the definition applies to.", "not_nullable": false}, {"name": "values", "type": "MetafieldDefinitionConstraintValueConnection!", "description": "The specific constraint subtype values that the definition applies to.", "not_nullable": true}], "examples": []}, {"name": "MetafieldDefinitionConstraintValue", "description": "A constraint subtype value that the metafield definition applies to.", "fields_and_connections": [{"name": "value", "type": "String!", "description": "The subtype value of the constraint.", "not_nullable": true}], "examples": []}, {"name": "MetafieldDefinitionIdentifier", "description": "Identifies a metafield definition by its owner type, namespace, and key.", "fields_and_connections": [{"name": "key", "type": "metafieldDefinitionDelete", "description": "Delete a metafield definition.\nOptionally deletes all associated metafields asynchronously when specified.", "not_nullable": false}], "examples": []}, {"name": "MetafieldIdentifier", "description": "Identifies a metafield by its owner resource, namespace, and key.", "fields_and_connections": [{"name": "key", "type": "metafieldsDelete", "description": "Deletes multiple metafields in bulk.", "not_nullable": false}], "examples": []}, {"name": "MetafieldRelation", "description": "Defines a relation between two resources via a reference metafield.\nThe referencer owns the joining field with a given namespace and key,\nwhile the target is referenced by the field.", "fields_and_connections": [{"name": "key", "type": "String!", "description": "The key of the field making the reference.", "not_nullable": true}, {"name": "name", "type": "String!", "description": "The name of the field making the reference.", "not_nullable": true}, {"name": "namespace", "type": "String!", "description": "The namespace of the metafield making the reference, or type of the metaobject.", "not_nullable": true}, {"name": "referencer", "type": "MetafieldReferencer!", "description": "The resource making the reference.", "not_nullable": true}, {"name": "target", "type": "MetafieldReference!", "description": "The referenced resource.", "not_nullable": true}], "examples": []}, {"name": "MetaobjectThumbnail", "description": "Provides attributes for visual representation.", "fields_and_connections": [{"name": "file", "type": "File", "description": "The file to be used for visual representation of this metaobject.", "not_nullable": false}, {"name": "hex", "type": "String", "description": "The hexadecimal color code to be used for respresenting this metaobject.", "not_nullable": false}], "examples": []}, {"name": "MoneyBag", "description": "A collection of monetary values in their respective currencies. Typically used in the context of multi-currency pricing and transactions,\nwhen an amount in the shop's currency is converted to the customer's currency of choice (the presentment currency).", "fields_and_connections": [{"name": "presentmentMoney", "type": "MoneyV2!", "description": "Amount in presentment currency.", "not_nullable": true}, {"name": "shopMoney", "type": "MoneyV2!", "description": "Amount in shop currency.", "not_nullable": true}], "examples": []}, {"name": "MoneyV2", "description": "A monetary value with currency.", "fields_and_connections": [{"name": "amount", "type": "Decimal!", "description": "Decimal money amount.", "not_nullable": true}, {"name": "currencyCode", "type": "CurrencyCode!", "description": "Currency of the money.", "not_nullable": true}], "examples": []}, {"name": "MutationsStagedUploadTargetGenerateUploadParameter", "description": "A signed upload parameter for uploading an asset to Shopify.\nDeprecated in favor of\nStagedUploadParameter,\nwhich is used in\nStagedMediaUploadTarget\nand returned by the\nstagedUploadsCreate mutation.", "fields_and_connections": [{"name": "name", "type": "stagedUploadTargetGenerate", "description": "Generates the URL and signed paramaters needed to upload an asset to Shopify. Use stagedUploadsCreate instead.", "not_nullable": false}], "examples": []}, {"name": "OrderPaymentStatus", "description": "The status of a customer's payment for an order.", "fields_and_connections": [{"name": "errorMessage", "type": "orderPaymentStatus", "description": "Returns a payment status by payment reference ID. Used to check the status of a deferred payment.", "not_nullable": false}], "examples": []}, {"name": "PageInfo", "description": "Returns information about pagination in a connection, in accordance with the\nRelay specification.\nFor more information, please read our GraphQL Pagination Usage Guide.", "fields_and_connections": [{"name": "endCursor", "type": "String", "description": "The cursor corresponding to the last node in edges.", "not_nullable": false}, {"name": "hasNextPage", "type": "Boolean!", "description": "Whether there are more pages to fetch following the current page.", "not_nullable": true}, {"name": "hasPreviousPage", "type": "Boolean!", "description": "Whether there are any pages prior to the current page.", "not_nullable": true}, {"name": "startCursor", "type": "String", "description": "The cursor corresponding to the first node in edges.", "not_nullable": false}], "examples": []}, {"name": "PaymentCustomization", "description": "A payment customization.", "fields_and_connections": [{"name": "enabled", "type": "paymentCustomization", "description": "The payment customization.", "not_nullable": false}, {"name": "enabled", "type": "paymentCustomizations", "description": "The payment customizations.", "not_nullable": false}, {"name": "enabled", "type": "paymentCustomizationCreate", "description": "Creates a payment customization.", "not_nullable": false}, {"name": "enabled", "type": "paymentCustomizationUpdate", "description": "Updates a payment customization.", "not_nullable": false}, {"name": "enabled", "type": "HasMetafieldDefinitions", "description": "The enabled status of the payment customization.", "not_nullable": false}, {"name": "enabled", "type": "HasMetafields", "description": "The enabled status of the payment customization.", "not_nullable": false}, {"name": "enabled", "type": "Node", "description": "The enabled status of the payment customization.", "not_nullable": false}], "examples": []}, {"name": "PaymentCustomizationError", "description": "An error that occurs during the execution of a payment customization mutation.", "fields_and_connections": [{"name": "code", "type": "paymentCustomizationActivation", "description": "Activates and deactivates payment customizations.", "not_nullable": false}, {"name": "code", "type": "paymentCustomizationCreate", "description": "Creates a payment customization.", "not_nullable": false}, {"name": "code", "type": "paymentCustomizationDelete", "description": "Deletes a payment customization.", "not_nullable": false}, {"name": "code", "type": "paymentCustomizationUpdate", "description": "Updates a payment customization.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "PaymentMandate", "description": "A payment instrument and the permission\nthe owner of the instrument gives to the merchant to debit it.", "fields_and_connections": [{"name": "id", "type": "Node", "description": "The unique ID of a payment mandate.", "not_nullable": false}], "examples": []}, {"name": "PaymentSchedule", "description": "Represents the payment schedule for a single payment defined in the payment terms.", "fields_and_connections": [{"name": "completedAt", "type": "Node", "description": "Date and time when the payment schedule is paid or fulfilled.", "not_nullable": false}], "examples": []}, {"name": "PaymentTerms", "description": "Represents the payment terms for an order or draft order.", "fields_and_connections": [{"name": "draftOrder", "type": "paymentTermsCreate", "description": "Create payment terms on an order. To create payment terms on a draft order, use a draft order mutation and include the request with the DraftOrderInput.", "not_nullable": false}, {"name": "draftOrder", "type": "paymentTermsUpdate", "description": "Update payment terms on an order. To update payment terms on a draft order, use a draft order mutation and include the request with the DraftOrderInput.", "not_nullable": false}, {"name": "draftOrder", "type": "Node", "description": "The draft order associated with the payment terms.", "not_nullable": false}], "examples": []}, {"name": "PaymentTermsTemplate", "description": "Represents the payment terms template object.", "fields_and_connections": [{"name": "description", "type": "paymentTermsTemplates", "description": "The list of payment terms templates eligible for all shops and users.", "not_nullable": false}, {"name": "description", "type": "Node", "description": "The description of the payment terms template.", "not_nullable": false}], "examples": []}, {"name": "ProductResourceFeedback", "description": "Reports the status of product for a Sales Channel or Storefront API.\nThis might include why a product is not available in a Sales Channel\nand how a merchant might fix this.", "fields_and_connections": [{"name": "feedbackGeneratedAt", "type": "productResourceFeedback", "description": "Returns the product resource feedback for the currently authenticated app.", "not_nullable": false}, {"name": "feedbackGeneratedAt", "type": "bulkProductResourceFeedbackCreate", "description": "Creates product feedback for multiple products.", "not_nullable": false}], "examples": []}, {"name": "QueryRoot", "description": "The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start.", "fields_and_connections": [{"name": "abandonedCheckouts", "type": "AbandonedCheckoutConnection!", "description": "List of abandoned checkouts. Includes checkouts that were recovered after being abandoned.", "not_nullable": true}, {"name": "abandonedCheckoutsCount", "type": "Count", "description": "Returns the count of abandoned checkouts for the given shop. Limited to a maximum of 10000.", "not_nullable": false}, {"name": "abandonment", "type": "Abandonment", "description": "Returns an abandonment by ID.", "not_nullable": false}, {"name": "abandonmentByAbandonedCheckoutId", "type": "Abandonment", "description": "Returns an Abandonment by the Abandoned Checkout ID.", "not_nullable": false}, {"name": "app", "type": "App", "description": "Lookup an App by ID or return the currently authenticated App.", "not_nullable": false}, {"name": "appByHandle", "type": "App", "description": "Fetches app by handle.\nReturns null if the app doesn't exist.", "not_nullable": false}, {"name": "appByKey", "type": "App", "description": "Fetches an app by its client ID.\nReturns null if the app doesn't exist.", "not_nullable": false}, {"name": "appDiscountType", "type": "AppDiscountType", "description": "An app discount type.", "not_nullable": false}, {"name": "appDiscountTypes", "type": "[AppDiscountType!]!", "description": "A list of app discount types installed by apps.", "not_nullable": true}, {"name": "appDiscountTypesNodes", "type": "AppDiscountTypeConnection!", "description": "A list of app discount types installed by apps.", "not_nullable": true}, {"name": "appInstallation", "type": "AppInstallation", "description": "Lookup an AppInstallation by ID or return the AppInstallation for the currently authenticated App.", "not_nullable": false}, {"name": "appInstallations", "type": "AppInstallationConnection!", "description": "A list of app installations. To use this query, you need to contact Shopify Support to grant your custom app the read_apps access scope. Public apps can't be granted this access scope.", "not_nullable": true}, {"name": "article", "type": "Article", "description": "Returns an Article resource by ID.", "not_nullable": false}, {"name": "articleAuthors", "type": "ArticleAuthorConnection!", "description": "List of article authors for the shop.", "not_nullable": true}, {"name": "articles", "type": "ArticleConnection!", "description": "List of the shop's articles.", "not_nullable": true}, {"name": "articleTags", "type": "[String!]!", "description": "List of all article tags.", "not_nullable": true}, {"name": "assignedFulfillmentOrders", "type": "FulfillmentOrderConnection!", "description": "The paginated list of fulfillment orders assigned to the shop locations owned by the app.\nAssigned fulfillment orders are fulfillment orders that are set to be fulfilled from locations\nmanaged by\nfulfillment services\nthat are registered by the app.\nOne app (api_client) can host multiple fulfillment services on a shop.\nEach fulfillment service manages a dedicated location on a shop.\nAssigned fulfillment orders can have associated\nfulfillment requests,\nor might currently not be requested to be fulfilled.\nThe app must have the read_assigned_fulfillment_orders\naccess scope\nto be able to retrieve the fulfillment orders assigned to its locations.\nAll assigned fulfillment orders (except those with the CLOSED status) will be returned by default.\nPerform filtering with the assignmentStatus argument\nto receive only fulfillment orders that have been requested to be fulfilled.", "not_nullable": true}, {"name": "automaticDiscountNode", "type": "DiscountAutomaticNode", "description": "Returns an automatic discount resource by ID.", "not_nullable": false}, {"name": "automaticDiscountNodes", "type": "DiscountAutomaticNodeConnection!", "description": "Returns a list of automatic discounts.", "not_nullable": true}, {"name": "automaticDiscountSavedSearches", "type": "SavedSearchConnection!", "description": "List of the shop's automatic discount saved searches.", "not_nullable": true}, {"name": "availableBackupRegions", "type": "[MarketRegion!]!", "description": "The regions that can be used as the backup region of the shop.", "not_nullable": true}, {"name": "availableCarrierServices", "type": "[DeliveryCarrierServiceAndLocations!]!", "description": "Returns a list of activated carrier services and associated shop locations that support them.", "not_nullable": true}, {"name": "availableLocales", "type": "[Locale!]!", "description": "A list of available locales.", "not_nullable": true}, {"name": "backupRegion", "type": "MarketRegion!", "description": "The backup region of the shop.", "not_nullable": true}, {"name": "blog", "type": "Blog", "description": "Returns a Blog resource by ID.", "not_nullable": false}, {"name": "blogs", "type": "BlogConnection!", "description": "List of the shop's blogs.", "not_nullable": true}, {"name": "blogsCount", "type": "Count", "description": "Count of blogs.", "not_nullable": false}, {"name": "businessEntities", "type": "[BusinessEntity!]!", "description": "Returns a list of Business Entities associated with the shop.", "not_nullable": true}, {"name": "businessEntity", "type": "BusinessEntity", "description": "Returns a Business Entity by ID.", "not_nullable": false}, {"name": "carrierService", "type": "DeliveryCarrierService", "description": "Returns a DeliveryCarrierService object by ID.", "not_nullable": false}, {"name": "carrierServices", "type": "DeliveryCarrierServiceConnection!", "description": "Retrieve a list of CarrierServices.", "not_nullable": true}, {"name": "cartTransforms", "type": "CartTransformConnection!", "description": "List of Cart transform objects owned by the current API client.", "not_nullable": true}, {"name": "cashTrackingSession", "type": "CashTrackingSession", "description": "Lookup a cash tracking session by ID.", "not_nullable": false}, {"name": "cashTrackingSessions", "type": "CashTrackingSessionConnection!", "description": "Returns a shop's cash tracking sessions for locations with a POS Pro subscription.\nTip: To query for cash tracking sessions in bulk, you can\nperform a bulk operation.", "not_nullable": true}, {"name": "catalog", "type": "Catalog", "description": "Returns a Catalog resource by ID.", "not_nullable": false}, {"name": "catalogOperations", "type": "[ResourceOperation!]!", "description": "Returns the most recent catalog operations for the shop.", "not_nullable": true}, {"name": "catalogs", "type": "CatalogConnection!", "description": "The catalogs belonging to the shop.", "not_nullable": true}, {"name": "catalogsCount", "type": "Count", "description": "The count of catalogs belonging to the shop. Limited to a maximum of 10000.", "not_nullable": false}, {"name": "checkoutBranding", "type": "CheckoutBranding", "description": "Returns the visual customizations for checkout for a given checkout profile.\nTo learn more about updating checkout branding settings, refer to the\ncheckoutBrandingUpsert\nmutation and the checkout branding tutorial.", "not_nullable": false}, {"name": "checkoutProfile", "type": "CheckoutProfile", "description": "A checkout profile on a shop.", "not_nullable": false}, {"name": "checkoutProfiles", "type": "CheckoutProfileConnection!", "description": "List of checkout profiles on a shop.", "not_nullable": true}, {"name": "codeDiscountNode", "type": "DiscountCodeNode", "description": "Returns a code discount resource by ID.", "not_nullable": false}, {"name": "codeDiscountNodeByCode", "type": "DiscountCodeNode", "description": "Returns a code discount identified by its discount code.", "not_nullable": false}, {"name": "codeDiscountNodes", "type": "DiscountCodeNodeConnection!", "description": "Returns a list of code-based discounts.", "not_nullable": true}, {"name": "codeDiscountSavedSearches", "type": "SavedSearchConnection!", "description": "List of the shop's code discount saved searches.", "not_nullable": true}, {"name": "collection", "type": "Collection", "description": "Returns a Collection resource by ID.", "not_nullable": false}, {"name": "collectionByIdentifier", "type": "Collection", "description": "Return a collection by an identifier.", "not_nullable": false}, {"name": "collectionRulesConditions", "type": "[CollectionRuleConditions!]!", "description": "Lists all rules that can be used to create smart collections.", "not_nullable": true}, {"name": "collections", "type": "CollectionConnection!", "description": "Returns a list of collections.", "not_nullable": true}, {"name": "collectionSavedSearches", "type": "SavedSearchConnection!", "description": "Returns a list of the shop's collection saved searches.", "not_nullable": true}, {"name": "collectionsCount", "type": "Count", "description": "Count of collections. Limited to a maximum of 10000.", "not_nullable": false}, {"name": "comment", "type": "Comment", "description": "Returns a Comment resource by ID.", "not_nullable": false}, {"name": "comments", "type": "CommentConnection!", "description": "List of the shop's comments.", "not_nullable": true}, {"name": "companies", "type": "CompanyConnection!", "description": "Returns the list of companies in the shop.", "not_nullable": true}, {"name": "companiesCount", "type": "Count", "description": "The number of companies for a shop.", "not_nullable": false}, {"name": "company", "type": "Company", "description": "Returns a Company object by ID.", "not_nullable": false}, {"name": "companyContact", "type": "CompanyContact", "description": "Returns a CompanyContact object by ID.", "not_nullable": false}, {"name": "companyContactRole", "type": "CompanyContactRole", "description": "Returns a CompanyContactRole object by ID.", "not_nullable": false}, {"name": "companyLocation", "type": "CompanyLocation", "description": "Returns a CompanyLocation object by ID.", "not_nullable": false}, {"name": "companyLocations", "type": "CompanyLocationConnection!", "description": "Returns the list of company locations in the shop.", "not_nullable": true}, {"name": "consentPolicy", "type": "[ConsentPolicy!]!", "description": "Returns the customer privacy consent policies of a shop.", "not_nullable": true}, {"name": "consentPolicyRegions", "type": "[ConsentPolicyRegion!]!", "description": "List of countries and regions for which consent policies can be created or updated.", "not_nullable": true}, {"name": "currentAppInstallation", "type": "AppInstallation!", "description": "Return the AppInstallation for the currently authenticated App.", "not_nullable": true}, {"name": "currentBulkOperation", "type": "BulkOperation", "description": "Returns the current app's most recent BulkOperation. Apps can run one bulk query and one bulk mutation operation at a time, by shop.", "not_nullable": false}, {"name": "currentStaffMember", "type": "StaffMember", "description": "The staff member making the API request.", "not_nullable": false}, {"name": "customer", "type": "Customer", "description": "Returns a Customer resource by ID.", "not_nullable": false}, {"name": "customerAccountPage", "type": "CustomerAccountPage", "description": "Returns a customer account page.", "not_nullable": false}, {"name": "customerAccountPages", "type": "CustomerAccountPageConnection", "description": "List of the shop's customer account pages.", "not_nullable": false}, {"name": "customerByIdentifier", "type": "Customer", "description": "Return a customer by an identifier.", "not_nullable": false}, {"name": "customerMergeJobStatus", "type": "CustomerMergeRequest", "description": "Returns the status of a customer merge request job.", "not_nullable": false}, {"name": "customerMergePreview", "type": "CustomerMergePreview!", "description": "Returns a preview of a customer merge request.", "not_nullable": true}, {"name": "customerPaymentMethod", "type": "CustomerPaymentMethod", "description": "Returns a CustomerPaymentMethod resource by its ID.", "not_nullable": false}, {"name": "customers", "type": "CustomerConnection!", "description": "Returns a list of customers in your Shopify store, including key information such as name, email, location, and purchase history.\nUse this query to segment your audience, personalize marketing campaigns, or analyze customer behavior by applying filters based on location, order history, marketing preferences and tags.\nThe customers query supports pagination and sorting.", "not_nullable": true}, {"name": "customerSavedSearches", "type": "SavedSearchConnection!", "description": "List of the shop's customer saved searches.", "not_nullable": true}, {"name": "customersCount", "type": "Count", "description": "The number of customers.", "not_nullable": false}, {"name": "customerSegmentMembers", "type": "CustomerSegmentMemberConnection!", "description": "The list of members, such as customers, that's associated with an individual segment.\nThe maximum page size is 1000.", "not_nullable": true}, {"name": "customerSegmentMembership", "type": "SegmentMembershipResponse!", "description": "Whether a member, which is a customer, belongs to a segment.", "not_nullable": true}, {"name": "customerSegmentMembersQuery", "type": "CustomerSegmentMembersQuery", "description": "Returns a segment members query resource by ID.", "not_nullable": false}, {"name": "deliveryCustomization", "type": "DeliveryCustomization", "description": "The delivery customization.", "not_nullable": false}, {"name": "deliveryCustomizations", "type": "DeliveryCustomizationConnection!", "description": "The delivery customizations.", "not_nullable": true}, {"name": "deliveryProfile", "type": "DeliveryProfile", "description": "Returns a Delivery Profile resource by ID.", "not_nullable": false}, {"name": "deliveryProfiles", "type": "DeliveryProfileConnection!", "description": "Returns a list of saved delivery profiles.", "not_nullable": true}, {"name": "deliveryPromiseParticipants", "type": "DeliveryPromiseParticipantConnection", "description": "Returns delivery promise participants.", "not_nullable": false}, {"name": "deliveryPromiseProvider", "type": "DeliveryPromiseProvider", "description": "Lookup a delivery promise provider.", "not_nullable": false}, {"name": "deliveryPromiseSettings", "type": "DeliveryPromiseSetting!", "description": "Represents the delivery promise settings for a shop.", "not_nullable": true}, {"name": "deliverySettings", "type": "DeliverySetting", "description": "Returns the shop-wide shipping settings.", "not_nullable": false}, {"name": "discountCodesCount", "type": "Count", "description": "The total number of discount codes for the shop.", "not_nullable": false}, {"name": "discountNode", "type": "DiscountNode", "description": "Returns a discount resource by ID.", "not_nullable": false}, {"name": "discountNodes", "type": "DiscountNodeConnection!", "description": "Returns a list of discounts.", "not_nullable": true}, {"name": "discountNodesCount", "type": "Count", "description": "The total number of discounts for the shop. Limited to a maximum of 10000.", "not_nullable": false}, {"name": "discountRedeemCodeBulkCreation", "type": "DiscountRedeemCodeBulkCreation", "description": "Returns a bulk code creation resource by ID.", "not_nullable": false}, {"name": "discountRedeemCodeSavedSearches", "type": "SavedSearchConnection!", "description": "List of the shop's redeemed discount code saved searches.", "not_nullable": true}, {"name": "dispute", "type": "ShopifyPaymentsDispute", "description": "Returns dispute details based on ID.", "not_nullable": false}, {"name": "disputeEvidence", "type": "ShopifyPaymentsDisputeEvidence", "description": "Returns dispute evidence details based on ID.", "not_nullable": false}, {"name": "disputes", "type": "ShopifyPaymentsDisputeConnection!", "description": "All disputes related to the Shop.", "not_nullable": true}, {"name": "domain", "type": "Domain", "description": "Lookup a Domain by ID.", "not_nullable": false}, {"name": "draftOrder", "type": "DraftOrder", "description": "Returns a DraftOrder resource by ID.", "not_nullable": false}, {"name": "draftOrders", "type": "DraftOrderConnection!", "description": "List of saved draft orders.", "not_nullable": true}, {"name": "draftOrderSavedSearches", "type": "SavedSearchConnection!", "description": "List of the shop's draft order saved searches.", "not_nullable": true}, {"name": "draftOrderTag", "type": "DraftOrderTag", "description": "Returns a DraftOrderTag resource by ID.", "not_nullable": false}, {"name": "event", "type": "Event", "description": "Get a single event by its id.", "not_nullable": false}, {"name": "events", "type": "EventConnection", "description": "The paginated list of events associated with the store.", "not_nullable": false}, {"name": "eventsCount", "type": "Count", "description": "Count of events. Limited to a maximum of 10000.", "not_nullable": false}, {"name": "files", "type": "FileConnection!", "description": "Returns a paginated list of files that have been uploaded to Shopify.", "not_nullable": true}, {"name": "fileSavedSearches", "type": "SavedSearchConnection!", "description": "A list of the shop's file saved searches.", "not_nullable": true}, {"name": "financeAppAccessPolicy", "type": "FinanceAppAccessPolicy!", "description": "Returns the access policy for a finance app .", "not_nullable": true}, {"name": "financeKycInformation", "type": "FinanceKycInformation", "description": "Returns the KYC information for the shop's Shopify Payments account, used in embedded finance apps.", "not_nullable": false}, {"name": "fulfillment", "type": "Fulfillment", "description": "Returns a Fulfillment resource by ID.", "not_nullable": false}, {"name": "fulfillmentConstraintRules", "type": "[FulfillmentConstraintRule!]!", "description": "The fulfillment constraint rules that belong to a shop.", "not_nullable": true}, {"name": "fulfillmentOrder", "type": "FulfillmentOrder", "description": "Returns a Fulfillment order resource by ID.", "not_nullable": false}, {"name": "fulfillmentOrders", "type": "FulfillmentOrderConnection!", "description": "The paginated list of all fulfillment orders.\nThe returned fulfillment orders are filtered according to the\nfulfillment order access scopes\ngranted to the app.\nUse this query to retrieve fulfillment orders assigned to merchant-managed locations,\nthird-party fulfillment service locations, or all kinds of locations together.\nFor fetching only the fulfillment orders assigned to the app's locations, use the\nassignedFulfillmentOrders\nconnection.", "not_nullable": true}, {"name": "fulfillmentService", "type": "FulfillmentService", "description": "Returns a FulfillmentService resource by ID.", "not_nullable": false}, {"name": "giftCard", "type": "GiftCard", "description": "Returns a gift card resource by ID.", "not_nullable": false}, {"name": "giftCardConfiguration", "type": "GiftCardConfiguration!", "description": "The configuration for the shop's gift cards.", "not_nullable": true}, {"name": "giftCards", "type": "GiftCardConnection!", "description": "Returns a list of gift cards.", "not_nullable": true}, {"name": "giftCardsCount", "type": "Count", "description": "The total number of gift cards issued for the shop. Limited to a maximum of 10000.", "not_nullable": false}, {"name": "inventoryItem", "type": "InventoryItem", "description": "Returns an\nInventoryItem\nobject by ID.", "not_nullable": false}, {"name": "inventoryItems", "type": "InventoryItemConnection!", "description": "Returns a list of inventory items.", "not_nullable": true}, {"name": "inventoryLevel", "type": "InventoryLevel", "description": "Returns an\nInventoryLevel\nobject by ID.", "not_nullable": false}, {"name": "inventoryProperties", "type": "InventoryProperties!", "description": "General inventory properties for the shop.", "not_nullable": true}, {"name": "job", "type": "Job", "description": "Returns a Job resource by ID. Used to check the status of internal jobs and any applicable changes.", "not_nullable": false}, {"name": "location", "type": "Location", "description": "Returns an inventory Location resource by ID.", "not_nullable": false}, {"name": "locationByIdentifier", "type": "Location", "description": "Return a location by an identifier.", "not_nullable": false}, {"name": "locations", "type": "LocationConnection!", "description": "Returns a list of active inventory locations.", "not_nullable": true}, {"name": "locationsAvailableForDeliveryProfilesConnection", "type": "LocationConnection!", "description": "Returns a list of all origin locations available for a delivery profile.", "not_nullable": true}, {"name": "locationsCount", "type": "Count", "description": "Returns the count of locations for the given shop. Limited to a maximum of 10000.", "not_nullable": false}, {"name": "manualHoldsFulfillmentOrders", "type": "FulfillmentOrderConnection!", "description": "Returns a list of fulfillment orders that are on hold.", "not_nullable": true}, {"name": "market", "type": "Market", "description": "Returns a market resource by ID.", "not_nullable": false}, {"name": "marketingActivities", "type": "MarketingActivityConnection!", "description": "A list of marketing activities associated with the marketing app.", "not_nullable": true}, {"name": "marketingActivity", "type": "MarketingActivity", "description": "Returns a MarketingActivity resource by ID.", "not_nullable": false}, {"name": "marketingEvent", "type": "MarketingEvent", "description": "Returns a MarketingEvent resource by ID.", "not_nullable": false}, {"name": "marketingEvents", "type": "MarketingEventConnection!", "description": "A list of marketing events associated with the marketing app.", "not_nullable": true}, {"name": "marketLocalizableResource", "type": "MarketLocalizableResource", "description": "A resource that can have localized values for different markets.", "not_nullable": false}, {"name": "marketLocalizableResources", "type": "MarketLocalizableResourceConnection!", "description": "Resources that can have localized values for different markets.", "not_nullable": true}, {"name": "marketLocalizableResourcesByIds", "type": "MarketLocalizableResourceConnection!", "description": "Resources that can have localized values for different markets.", "not_nullable": true}, {"name": "markets", "type": "MarketConnection!", "description": "The markets configured for the shop.", "not_nullable": true}, {"name": "menu", "type": "Menu", "description": "Returns a Menu resource by ID.", "not_nullable": false}, {"name": "menus", "type": "MenuConnection!", "description": "The shop's menus.", "not_nullable": true}, {"name": "metafieldDefinition", "type": "MetafieldDefinition", "description": "Returns a metafield definition by identifier.", "not_nullable": false}, {"name": "metafieldDefinitions", "type": "MetafieldDefinitionConnection!", "description": "Returns a list of metafield definitions.", "not_nullable": true}, {"name": "metafieldDefinitionTypes", "type": "[MetafieldDefinitionType!]!", "description": "Each metafield definition has a type, which defines the type of information that it can store.\nThis type is enforced across every instance of the resource that owns the metafield definition.\nRefer to the list of supported metafield types.", "not_nullable": true}, {"name": "metaobject", "type": "Metaobject", "description": "Retrieves a metaobject by ID.", "not_nullable": false}, {"name": "metaobjectByHandle", "type": "Metaobject", "description": "Retrieves a metaobject by handle.", "not_nullable": false}, {"name": "metaobjectDefinition", "type": "MetaobjectDefinition", "description": "Retrieves a metaobject definition by ID.", "not_nullable": false}, {"name": "metaobjectDefinitionByType", "type": "MetaobjectDefinition", "description": "Finds a metaobject definition by type.", "not_nullable": false}, {"name": "metaobjectDefinitions", "type": "MetaobjectDefinitionConnection!", "description": "All metaobject definitions.", "not_nullable": true}, {"name": "metaobjects", "type": "MetaobjectConnection!", "description": "All metaobjects for the shop.", "not_nullable": true}, {"name": "mobilePlatformApplication", "type": "MobilePlatformApplication", "description": "Return a mobile platform application by its ID.", "not_nullable": false}, {"name": "mobilePlatformApplications", "type": "MobilePlatformApplicationConnection!", "description": "List the mobile platform applications.", "not_nullable": true}, {"name": "node", "type": "Node", "description": "Returns a specific node (any object that implements the\nNode\ninterface) by ID, in accordance with the\nRelay specification.\nThis field is commonly used for refetching an object.", "not_nullable": false}, {"name": "nodes", "type": "[Node]!", "description": "Returns the list of nodes (any objects that implement the\nNode\ninterface) with the given IDs, in accordance with the\nRelay specification.", "not_nullable": true}, {"name": "onlineStore", "type": "OnlineStore!", "description": "The shop's online store channel.", "not_nullable": true}, {"name": "order", "type": "Order", "description": "Returns an Order resource by ID.", "not_nullable": false}, {"name": "orderByIdentifier", "type": "Order", "description": "Return an order by an identifier.", "not_nullable": false}, {"name": "orderPaymentStatus", "type": "OrderPaymentStatus", "description": "Returns a payment status by payment reference ID. Used to check the status of a deferred payment.", "not_nullable": false}, {"name": "orders", "type": "OrderConnection!", "description": "Returns a list of orders placed in the store, including data such as order status, customer, and line item details.\nUse the orders query to build reports, analyze sales performance, or automate fulfillment workflows. The orders query supports pagination,\nsorting, and filtering.", "not_nullable": true}, {"name": "orderSavedSearches", "type": "SavedSearchConnection!", "description": "List of the shop's order saved searches.", "not_nullable": true}, {"name": "ordersCount", "type": "Count", "description": "Returns the count of orders for the given shop. Limited to a maximum of 10000.", "not_nullable": false}, {"name": "page", "type": "Page", "description": "Returns a Page resource by ID.", "not_nullable": false}, {"name": "pages", "type": "PageConnection!", "description": "List of the shop's pages.", "not_nullable": true}, {"name": "pagesCount", "type": "Count", "description": "Count of pages.", "not_nullable": false}, {"name": "paymentCustomization", "type": "PaymentCustomization", "description": "The payment customization.", "not_nullable": false}, {"name": "paymentCustomizations", "type": "PaymentCustomizationConnection!", "description": "The payment customizations.", "not_nullable": true}, {"name": "paymentTermsTemplates", "type": "[PaymentTermsTemplate!]!", "description": "The list of payment terms templates eligible for all shops and users.", "not_nullable": true}, {"name": "pendingOrdersCount", "type": "Count", "description": "The number of pendings orders. Limited to a maximum of 10000.", "not_nullable": false}, {"name": "priceList", "type": "PriceList", "description": "Returns a price list resource by ID.", "not_nullable": false}, {"name": "priceLists", "type": "PriceListConnection!", "description": "All price lists for a shop.", "not_nullable": true}, {"name": "privacySettings", "type": "PrivacySettings!", "description": "Privacy related settings for a shop.", "not_nullable": true}, {"name": "product", "type": "Product", "description": "Returns a Product resource by ID.", "not_nullable": false}, {"name": "productByIdentifier", "type": "Product", "description": "Return a product by an identifier.", "not_nullable": false}, {"name": "productDuplicateJob", "type": "ProductDuplicateJob!", "description": "Returns the product duplicate job.", "not_nullable": true}, {"name": "productFeed", "type": "ProductFeed", "description": "Returns a ProductFeed resource by ID.", "not_nullable": false}, {"name": "productFeeds", "type": "ProductFeedConnection!", "description": "The product feeds for the shop.", "not_nullable": true}, {"name": "productOperation", "type": "ProductOperation", "description": "Returns a ProductOperation resource by ID.\nThis can be used to query the\nProductSetOperation, using\nthe ID that was returned\nwhen the product was created or updated\nby the\nProductSet mutation.\nThe status field indicates whether the operation is CREATED, ACTIVE, or COMPLETE.\nThe product field provides the details of the created or updated product.\nFor the\nProductSetOperation, the\nuserErrors field provides mutation errors that occurred during the operation.", "not_nullable": false}, {"name": "productResourceFeedback", "type": "ProductResourceFeedback", "description": "Returns the product resource feedback for the currently authenticated app.", "not_nullable": false}, {"name": "products", "type": "ProductConnection!", "description": "Returns a list of products.", "not_nullable": true}, {"name": "productSavedSearches", "type": "SavedSearchConnection!", "description": "Returns a list of the shop's product saved searches.", "not_nullable": true}, {"name": "productsCount", "type": "Count", "description": "Count of products.", "not_nullable": false}, {"name": "productTags", "type": "StringConnection", "description": "A list of tags that have been added to products.\nThe maximum page size is 5000.", "not_nullable": false}, {"name": "productTypes", "type": "StringConnection", "description": "The list of types added to products.\nThe maximum page size is 1000.", "not_nullable": false}, {"name": "productVariant", "type": "ProductVariant", "description": "Returns a ProductVariant resource by ID.", "not_nullable": false}, {"name": "productVariantByIdentifier", "type": "ProductVariant", "description": "Return a product variant by an identifier.", "not_nullable": false}, {"name": "productVariants", "type": "ProductVariantConnection!", "description": "Returns a list of product variants.", "not_nullable": true}, {"name": "productVariantsCount", "type": "Count", "description": "Count of product variants.", "not_nullable": false}, {"name": "productVendors", "type": "StringConnection", "description": "The list of vendors added to products.\nThe maximum page size is 1000.", "not_nullable": false}, {"name": "publicApiVersions", "type": "[ApiVersion!]!", "description": "The list of publicly-accessible Admin API versions, including supported versions, the release candidate, and unstable versions.", "not_nullable": true}, {"name": "publication", "type": "Publication", "description": "Lookup a publication by ID.", "not_nullable": false}, {"name": "publications", "type": "PublicationConnection!", "description": "List of publications.", "not_nullable": true}, {"name": "publicationsCount", "type": "Count", "description": "Count of publications.", "not_nullable": false}, {"name": "publishedProductsCount", "type": "Count", "description": "Returns a count of published products by publication ID.", "not_nullable": false}, {"name": "refund", "type": "Refund", "description": "Returns a Refund resource by ID.", "not_nullable": false}, {"name": "return", "type": "Return", "description": "Returns a Return resource by ID.", "not_nullable": false}, {"name": "returnableFulfillment", "type": "ReturnableFulfillment", "description": "Lookup a returnable fulfillment by ID.", "not_nullable": false}, {"name": "returnableFulfillments", "type": "ReturnableFulfillmentConnection!", "description": "List of returnable fulfillments.", "not_nullable": true}, {"name": "returnCalculate", "type": "CalculatedReturn", "description": "The calculated monetary value to be exchanged due to the return.", "not_nullable": false}, {"name": "reverseDelivery", "type": "ReverseDelivery", "description": "Lookup a reverse delivery by ID.", "not_nullable": false}, {"name": "reverseFulfillmentOrder", "type": "ReverseFulfillmentOrder", "description": "Lookup a reverse fulfillment order by ID.", "not_nullable": false}, {"name": "scriptTag", "type": "ScriptTag", "description": "Theme app extensions\nYour app might not pass App Store review if it uses script tags instead of theme app extensions. All new apps, and apps that integrate with Online Store 2.0 themes, should use theme app extensions, such as app blocks or app embed blocks. Script tags are an alternative you can use with only vintage themes. Learn more.\n\nScript tag deprecation\nScript tags will be sunset for the Order status page on August 28, 2025. Upgrade to Checkout Extensibility before this date. Shopify Scripts will continue to work alongside Checkout Extensibility until August 28, 2025.\n\n\nLookup a script tag resource by ID.", "not_nullable": false}, {"name": "scriptTags", "type": "ScriptTagConnection!", "description": "Theme app extensions\nYour app might not pass App Store review if it uses script tags instead of theme app extensions. All new apps, and apps that integrate with Online Store 2.0 themes, should use theme app extensions, such as app blocks or app embed blocks. Script tags are an alternative you can use with only vintage themes. Learn more.\n\nScript tag deprecation\nScript tags will be sunset for the Order status page on August 28, 2025. Upgrade to Checkout Extensibility before this date. Shopify Scripts will continue to work alongside Checkout Extensibility until August 28, 2025.\n\n\nA list of script tags.", "not_nullable": true}, {"name": "segment", "type": "Segment", "description": "The Customer Segment.", "not_nullable": false}, {"name": "segmentFilters", "type": "SegmentFilterConnection!", "description": "A list of filters.", "not_nullable": true}, {"name": "segmentFilterSuggestions", "type": "SegmentFilterConnection!", "description": "A list of filter suggestions associated with a segment. A segment is a group of members (commonly customers) that meet specific criteria.", "not_nullable": true}, {"name": "segmentMigrations", "type": "SegmentMigrationConnection!", "description": "A list of a shop's segment migrations.", "not_nullable": true}, {"name": "segments", "type": "SegmentConnection!", "description": "A list of a shop's segments.", "not_nullable": true}, {"name": "segmentsCount", "type": "Count", "description": "The number of segments for a shop.", "not_nullable": false}, {"name": "segmentValueSuggestions", "type": "SegmentValueConnection!", "description": "The list of suggested values corresponding to a particular filter for a segment. A segment is a group of members, such as customers, that meet specific criteria.", "not_nullable": true}, {"name": "sellingPlanGroup", "type": "SellingPlanGroup", "description": "Returns a Selling Plan Group resource by ID.", "not_nullable": false}, {"name": "sellingPlanGroups", "type": "SellingPlanGroupConnection!", "description": "List Selling Plan Groups.", "not_nullable": true}, {"name": "serverPixel", "type": "ServerPixel", "description": "The server pixel configured by the app.", "not_nullable": false}, {"name": "shop", "type": "Shop!", "description": "Returns the Shop resource corresponding to the access token used in the request. The Shop resource contains\nbusiness and store management settings for the shop.", "not_nullable": true}, {"name": "shopBillingPreferences", "type": "ShopBillingPreferences!", "description": "The shop's billing preferences.", "not_nullable": true}, {"name": "shopifyFunction", "type": "ShopifyFunction", "description": "Returns a Shopify Function by its ID.\nFunctions\nenable you to customize Shopify's backend logic at defined parts of the commerce loop.", "not_nullable": false}, {"name": "shopifyFunctions", "type": "ShopifyFunctionConnection!", "description": "Returns the Shopify Functions owned by the querying API client installed on the shop.", "not_nullable": true}, {"name": "shopifyPaymentsAccount", "type": "ShopifyPaymentsAccount", "description": "Shopify Payments account information, including balances and payouts.", "not_nullable": false}, {"name": "shopLocales", "type": "[ShopLocale!]!", "description": "A list of locales available on a shop.", "not_nullable": true}, {"name": "staffMember", "type": "StaffMember", "description": "The StaffMember resource, by ID.", "not_nullable": false}, {"name": "staffMembers", "type": "StaffMemberConnection", "description": "The shop staff members.", "not_nullable": false}, {"name": "standardMetafieldDefinitionTemplates", "type": "StandardMetafieldDefinitionTemplateConnection!", "description": "Standard metafield definitions are intended for specific, common use cases. Their namespace and keys reflect these use cases and are reserved.\nRefer to all available Standard Metafield Definition Templates.", "not_nullable": true}, {"name": "storeCreditAccount", "type": "StoreCreditAccount", "description": "Returns a store credit account resource by ID.", "not_nullable": false}, {"name": "subscriptionBillingAttempt", "type": "SubscriptionBillingAttempt", "description": "Returns a SubscriptionBillingAttempt by ID.", "not_nullable": false}, {"name": "subscriptionBillingAttempts", "type": "SubscriptionBillingAttemptConnection!", "description": "Returns subscription billing attempts on a store.", "not_nullable": true}, {"name": "subscriptionBillingCycle", "type": "SubscriptionBillingCycle", "description": "Returns a subscription billing cycle found either by cycle index or date.", "not_nullable": false}, {"name": "subscriptionBillingCycleBulkResults", "type": "SubscriptionBillingCycleConnection!", "description": "Retrieves the results of the asynchronous job for the subscription billing cycle bulk action based on the specified job ID.\nThis query can be used to obtain the billing cycles that match the criteria defined in the subscriptionBillingCycleBulkSearch and subscriptionBillingCycleBulkCharge mutations.", "not_nullable": true}, {"name": "subscriptionBillingCycles", "type": "SubscriptionBillingCycleConnection!", "description": "Returns subscription billing cycles for a contract ID.", "not_nullable": true}, {"name": "subscriptionContract", "type": "SubscriptionContract", "description": "Returns a Subscription Contract resource by ID.", "not_nullable": false}, {"name": "subscriptionContracts", "type": "SubscriptionContractConnection!", "description": "List Subscription Contracts.", "not_nullable": true}, {"name": "subscriptionDraft", "type": "SubscriptionDraft", "description": "Returns a Subscription Draft resource by ID.", "not_nullable": false}, {"name": "taxonomy", "type": "Taxonomy", "description": "The Taxonomy resource lets you access the categories, attributes and values of the loaded taxonomy tree.", "not_nullable": false}, {"name": "tenderTransactions", "type": "TenderTransactionConnection!", "description": "Returns a list of TenderTransactions associated with the shop.", "not_nullable": true}, {"name": "theme", "type": "OnlineStoreTheme", "description": "Returns a particular theme for the shop.", "not_nullable": false}, {"name": "themes", "type": "OnlineStoreThemeConnection", "description": "Returns a paginated list of themes for the shop.", "not_nullable": false}, {"name": "translatableResource", "type": "TranslatableResource", "description": "A resource that can have localized values for different languages.", "not_nullable": false}, {"name": "translatableResources", "type": "TranslatableResourceConnection!", "description": "Resources that can have localized values for different languages.", "not_nullable": true}, {"name": "translatableResourcesByIds", "type": "TranslatableResourceConnection!", "description": "Resources that can have localized values for different languages.", "not_nullable": true}, {"name": "urlRedirect", "type": "UrlRedirect", "description": "Returns a redirect resource by ID.", "not_nullable": false}, {"name": "urlRedirectImport", "type": "UrlRedirectImport", "description": "Returns a redirect import resource by ID.", "not_nullable": false}, {"name": "urlRedirects", "type": "UrlRedirectConnection!", "description": "A list of redirects for a shop.", "not_nullable": true}, {"name": "urlRedirectSavedSearches", "type": "SavedSearchConnection!", "description": "A list of the shop's URL redirect saved searches.", "not_nullable": true}, {"name": "urlRedirectsCount", "type": "Count", "description": "Count of redirects. Limited to a maximum of 10000.", "not_nullable": false}, {"name": "validation", "type": "Validation", "description": "Validation available on the shop.", "not_nullable": false}, {"name": "validations", "type": "ValidationConnection!", "description": "Validations available on the shop.", "not_nullable": true}, {"name": "webhookSubscription", "type": "WebhookSubscription", "description": "Returns a webhook subscription by ID.\nBuilding an app? If you only use app-specific webhooks, you won't need this. App-specific webhook subscriptions specified in your shopify.app.toml may be easier. They are automatically kept up to date by Shopify & require less maintenance. Please read About managing webhook subscriptions.", "not_nullable": false}, {"name": "webhookSubscriptions", "type": "WebhookSubscriptionConnection!", "description": "Returns a list of webhook subscriptions.\nBuilding an app? If you only use app-specific webhooks, you won't need this. App-specific webhook subscriptions specified in your shopify.app.toml may be easier. They are automatically kept up to date by Shopify & require less maintenance. Please read About managing webhook subscriptions.", "not_nullable": true}, {"name": "webhookSubscriptionsCount", "type": "Count", "description": "The count of webhook subscriptions.\nBuilding an app? If you only use app-specific webhooks, you won't need this. App-specific webhook subscriptions specified in your shopify.app.toml may be easier. They are automatically kept up to date by Shopify & require less maintenance. Please read About managing webhook subscriptions. Limited to a maximum of 10000.", "not_nullable": false}, {"name": "webPixel", "type": "WebPixel", "description": "Returns a\nweb pixel\nby ID.", "not_nullable": false}, {"name": "webPresences", "type": "MarketWebPresenceConnection", "description": "The web presences for the shop.", "not_nullable": false}, {"name": "automaticDiscount", "type": "DiscountAutomatic", "description": "Returns an automatic discount resource by ID. Use automaticDiscountNode instead.", "not_nullable": false}, {"name": "automaticDiscounts", "type": "DiscountAutomaticConnection!", "description": "List of automatic discounts. Use automaticDiscountNodes instead.", "not_nullable": true}, {"name": "channel", "type": "Channel", "description": "Lookup a channel by ID. Use publication instead.", "not_nullable": false}, {"name": "channels", "type": "ChannelConnection!", "description": "List of the active sales channels. Use publications instead.", "not_nullable": true}, {"name": "collectionByHandle", "type": "Collection", "description": "Return a collection by its handle. Use collectionByIdentifier instead.", "not_nullable": false}, {"name": "deletionEvents", "type": "DeletionEventConnection!", "description": "The paginated list of deletion events. Use events instead.", "not_nullable": true}, {"name": "locationsAvailableForDeliveryProfiles", "type": "[Location!]", "description": "Returns a list of all origin locations available for a delivery profile. Use locationsAvailableForDeliveryProfilesConnection instead.", "not_nullable": false}, {"name": "marketByGeography", "type": "Market", "description": "Returns the applicable market for a customer based on where they are in the world. This market_by_geography field will be removed in a future version of the API.", "not_nullable": false}, {"name": "primaryMarket", "type": "Market!", "description": "The primary market of the shop. Use backupRegion instead.", "not_nullable": true}, {"name": "productByHandle", "type": "Product", "description": "Return a product by its handle. Use productByIdentifier instead.", "not_nullable": false}], "examples": []}, {"name": "SavedSearch", "description": "A saved search is a representation of a search query saved in the admin.", "fields_and_connections": [{"name": "filters", "type": "automaticDiscountSavedSearches", "description": "List of the shop's automatic discount saved searches.", "not_nullable": false}, {"name": "filters", "type": "codeDiscountSavedSearches", "description": "List of the shop's code discount saved searches.", "not_nullable": false}, {"name": "filters", "type": "collectionSavedSearches", "description": "Returns a list of the shop's collection saved searches.", "not_nullable": false}, {"name": "filters", "type": "customerSavedSearches", "description": "List of the shop's customer saved searches.", "not_nullable": false}, {"name": "filters", "type": "discountRedeemCodeSavedSearches", "description": "List of the shop's redeemed discount code saved searches.", "not_nullable": false}, {"name": "filters", "type": "draftOrderSavedSearches", "description": "List of the shop's draft order saved searches.", "not_nullable": false}, {"name": "filters", "type": "fileSavedSearches", "description": "A list of the shop's file saved searches.", "not_nullable": false}, {"name": "filters", "type": "orderSavedSearches", "description": "List of the shop's order saved searches.", "not_nullable": false}, {"name": "filters", "type": "productSavedSearches", "description": "Returns a list of the shop's product saved searches.", "not_nullable": false}, {"name": "filters", "type": "urlRedirectSavedSearches", "description": "A list of the shop's URL redirect saved searches.", "not_nullable": false}, {"name": "filters", "type": "savedSearchCreate", "description": "Creates a saved search.", "not_nullable": false}, {"name": "filters", "type": "savedSearchUpdate", "description": "Updates a saved search.", "not_nullable": false}, {"name": "filters", "type": "LegacyInteroperability", "description": "The filters of a saved search.", "not_nullable": false}, {"name": "filters", "type": "Node", "description": "The filters of a saved search.", "not_nullable": false}], "examples": []}, {"name": "SearchFilter", "description": "A filter in a search query represented by a key value pair.", "fields_and_connections": [{"name": "key", "type": "String!", "description": "The key of the search filter.", "not_nullable": true}, {"name": "value", "type": "String!", "description": "The value of the search filter.", "not_nullable": true}], "examples": []}, {"name": "SearchFilterOptions", "description": "A list of search filters along with their specific options in value and label pair for filtering.", "fields_and_connections": [{"name": "productAvailability", "type": "[FilterOption!]!", "description": "A list of options that can be use to filter product availability.", "not_nullable": true}], "examples": []}, {"name": "SearchResult", "description": "Represents an individual result returned from a search.", "fields_and_connections": [{"name": "description", "type": "String", "description": "Returns the search result description text.", "not_nullable": false}, {"name": "image", "type": "Image", "description": "Returns the Image resource presented to accompany a search result.", "not_nullable": false}, {"name": "reference", "type": "Node!", "description": "Returns the ID of the resource returned in the search result.", "not_nullable": true}, {"name": "title", "type": "String!", "description": "Returns the resource title.", "not_nullable": true}, {"name": "url", "type": "URL!", "description": "Returns the absolute URL to the resource in the search result.", "not_nullable": true}], "examples": []}, {"name": "ShopifyFunction", "description": "A Shopify Function.", "fields_and_connections": [{"name": "apiType", "type": "shopifyFunction", "description": "Returns a Shopify Function by its ID.\nFunctions\nenable you to customize Shopify's backend logic at defined parts of the commerce loop.", "not_nullable": false}, {"name": "apiType", "type": "shopifyFunctions", "description": "Returns the Shopify Functions owned by the querying API client installed on the shop.", "not_nullable": false}], "examples": []}, {"name": "StaffMember", "description": "Represents the data about a staff member's Shopify account. Merchants can use staff member data to get more information about the staff members in their store.", "fields_and_connections": [{"name": "accountType", "type": "currentStaffMember", "description": "The staff member making the API request.", "not_nullable": false}, {"name": "accountType", "type": "staffMember", "description": "The StaffMember resource, by ID.", "not_nullable": false}, {"name": "accountType", "type": "staffMembers", "description": "The shop staff members.", "not_nullable": false}, {"name": "accountType", "type": "Node", "description": "The type of account the staff member has.", "not_nullable": false}], "examples": []}, {"name": "StaffMemberPrivateData", "description": "Represents the data used to customize the Shopify admin experience for a logged-in staff member.", "fields_and_connections": [{"name": "accountSettingsUrl", "type": "URL!", "description": "The URL to the staff member's account settings page.", "not_nullable": true}, {"name": "createdAt", "type": "DateTime!", "description": "The date and time when the staff member was created.", "not_nullable": true}, {"name": "permissions", "type": "[StaffMemberPermission!]!", "description": "Access permissions for the staff member. There's no alternative field to use instead.", "not_nullable": true}], "examples": []}, {"name": "StagedUploadParameter", "description": "The parameters required to authenticate a file upload request using a\nStagedMediaUploadTarget's url field.\nFor more information on the upload process, refer to\nUpload media to Shopify.", "fields_and_connections": [{"name": "name", "type": "String!", "description": "The parameter's name.", "not_nullable": true}, {"name": "value", "type": "String!", "description": "The parameter's value.", "not_nullable": true}], "examples": []}, {"name": "StagedUploadTarget", "description": "Information about the staged target.\nDeprecated in favor of\nStagedMediaUploadTarget,\nwhich is returned by the\nstagedUploadsCreate mutation.", "fields_and_connections": [{"name": "parameters", "type": "stagedUploadTargetsGenerate", "description": "Uploads multiple images. Use stagedUploadsCreate instead.", "not_nullable": false}], "examples": []}, {"name": "StandardMetaobjectCapabilityTemplate", "description": "Describes a capability that is enabled on a Metaobject Definition.", "fields_and_connections": [{"name": "capabilityType", "type": "MetaobjectCapabilityType!", "description": "The type of capability that's enabled for the metaobject definition.", "not_nullable": true}], "examples": []}, {"name": "StandardMetaobjectDefinitionFieldTemplate", "description": "A preset field definition on a standard metaobject definition template.", "fields_and_connections": [{"name": "description", "type": "String", "description": "The administrative description.", "not_nullable": false}, {"name": "key", "type": "String!", "description": "The key owned by the definition after the definition has been enabled.", "not_nullable": true}, {"name": "name", "type": "String!", "description": "The human-readable name.", "not_nullable": true}, {"name": "required", "type": "Boolean!", "description": "The required status of the field within the object composition.", "not_nullable": true}, {"name": "type", "type": "MetafieldDefinitionType!", "description": "The associated metafield definition type that the metafield stores.", "not_nullable": true}, {"name": "validations", "type": "[MetafieldDefinitionValidation!]!", "description": "The configured validations for the standard metafield definition.", "not_nullable": true}, {"name": "visibleToStorefrontApi", "type": "Boolean!", "description": "Whether metafields for the definition are by default visible using the Storefront API.", "not_nullable": true}], "examples": []}, {"name": "StandardMetaobjectDefinitionTemplate", "description": "Standard metaobject definition templates provide preset configurations to create metaobject definitions.", "fields_and_connections": [{"name": "description", "type": "String", "description": "The administrative description.", "not_nullable": false}, {"name": "displayNameKey", "type": "String", "description": "The key of a field to reference as the display name for each object.", "not_nullable": false}, {"name": "enabledCapabilities", "type": "[StandardMetaobjectCapabilityTemplate!]!", "description": "The capabilities of the metaobject definition.", "not_nullable": true}, {"name": "fieldDefinitions", "type": "[StandardMetaobjectDefinitionFieldTemplate!]!", "description": "Templates for the associated field definitions.", "not_nullable": true}, {"name": "name", "type": "String!", "description": "The human-readable name.", "not_nullable": true}, {"name": "type", "type": "String!", "description": "The namespace owned by the definition after the definition has been enabled.", "not_nullable": true}], "examples": []}, {"name": "StoreCreditAccount", "description": "A store credit account contains a monetary balance that can be redeemed at checkout for purchases in the shop.\nThe account is held in the specified currency and has an owner that cannot be transferred.\nThe account balance is redeemable at checkout only when the owner is authenticated via new customer accounts authentication.", "fields_and_connections": [{"name": "balance", "type": "storeCreditAccount", "description": "Returns a store credit account resource by ID.", "not_nullable": false}, {"name": "balance", "type": "Node", "description": "The current balance of the store credit account.", "not_nullable": false}], "examples": []}, {"name": "StoreCreditAccountCreditTransaction", "description": "A credit transaction which increases the store credit account balance.", "fields_and_connections": [{"name": "account", "type": "storeCreditAccountCredit", "description": "Creates a credit transaction that increases the store credit account balance by the given amount.\nThis operation will create an account if one does not already exist.\nA store credit account owner can hold multiple accounts each with a different currency.\nUse the most appropriate currency for the given store credit account owner.", "not_nullable": false}, {"name": "account", "type": "Node", "description": "The store credit account that the transaction belongs to.", "not_nullable": false}, {"name": "account", "type": "StoreCreditAccountTransaction", "description": "The store credit account that the transaction belongs to.", "not_nullable": false}], "examples": []}, {"name": "StoreCreditAccountDebitRevertTransaction", "description": "A debit revert transaction which increases the store credit account balance.\nDebit revert transactions are created automatically when a store credit account debit transaction is reverted.\nStore credit account debit transactions are reverted when an order is cancelled, refunded or in the event of a payment failure at checkout.\nThe amount added to the balance is equal to the amount reverted on the original credit.", "fields_and_connections": [{"name": "account", "type": "Node", "description": "The store credit account that the transaction belongs to.", "not_nullable": false}, {"name": "account", "type": "StoreCreditAccountTransaction", "description": "The store credit account that the transaction belongs to.", "not_nullable": false}], "examples": []}, {"name": "StoreCreditAccountDebitTransaction", "description": "A debit transaction which decreases the store credit account balance.", "fields_and_connections": [{"name": "account", "type": "storeCreditAccountDebit", "description": "Creates a debit transaction that decreases the store credit account balance by the given amount.", "not_nullable": false}, {"name": "account", "type": "Node", "description": "The store credit account that the transaction belongs to.", "not_nullable": false}, {"name": "account", "type": "StoreCreditAccountTransaction", "description": "The store credit account that the transaction belongs to.", "not_nullable": false}], "examples": []}, {"name": "StoreCreditAccountExpirationTransaction", "description": "An expiration transaction which decreases the store credit account balance.\nExpiration transactions are created automatically when a store credit account credit transaction expires.\nThe amount subtracted from the balance is equal to the remaining amount of the credit transaction.", "fields_and_connections": [{"name": "account", "type": "StoreCreditAccountTransaction", "description": "The store credit account that the transaction belongs to.", "not_nullable": false}], "examples": []}, {"name": "TypedAttribute", "description": "Represents a typed custom attribute.", "fields_and_connections": [{"name": "key", "type": "String!", "description": "Key or name of the attribute.", "not_nullable": true}, {"name": "value", "type": "String!", "description": "Value of the attribute.", "not_nullable": true}], "examples": []}, {"name": "Validation", "description": "A checkout server side validation installed on the shop.", "fields_and_connections": [{"name": "blockOnFailure", "type": "validation", "description": "Validation available on the shop.", "not_nullable": false}, {"name": "blockOnFailure", "type": "validations", "description": "Validations available on the shop.", "not_nullable": false}, {"name": "blockOnFailure", "type": "validationCreate", "description": "Creates a validation.", "not_nullable": false}, {"name": "blockOnFailure", "type": "validationUpdate", "description": "Update a validation.", "not_nullable": false}, {"name": "blockOnFailure", "type": "HasMetafieldDefinitions", "description": "Whether the validation should block on failures other than expected violations.", "not_nullable": false}, {"name": "blockOnFailure", "type": "HasMetafields", "description": "Whether the validation should block on failures other than expected violations.", "not_nullable": false}, {"name": "blockOnFailure", "type": "Node", "description": "Whether the validation should block on failures other than expected violations.", "not_nullable": false}], "examples": []}, {"name": "VaultCreditCard", "description": "Represents a credit card payment instrument.", "fields_and_connections": [{"name": "billingAddress", "type": "CustomerCreditCardBillingAddress", "description": "The billing address of the card.", "not_nullable": false}, {"name": "brand", "type": "String!", "description": "The brand for the card.", "not_nullable": true}, {"name": "expired", "type": "Boolean!", "description": "Whether the card has been expired.", "not_nullable": true}, {"name": "expiryMonth", "type": "Int!", "description": "The expiry month of the card.", "not_nullable": true}, {"name": "expiryYear", "type": "Int!", "description": "The expiry year of the card.", "not_nullable": true}, {"name": "lastDigits", "type": "String!", "description": "The last four digits for the card.", "not_nullable": true}, {"name": "name", "type": "String!", "description": "The name of the card holder.", "not_nullable": true}], "examples": []}, {"name": "VaultPaypalBillingAgreement", "description": "Represents a paypal billing agreement payment instrument.", "fields_and_connections": [{"name": "inactive", "type": "Boolean!", "description": "Whether the paypal billing agreement is inactive.", "not_nullable": true}, {"name": "name", "type": "String!", "description": "The paypal account name.", "not_nullable": true}, {"name": "paypalAccountEmail", "type": "String!", "description": "The paypal account email address.", "not_nullable": true}], "examples": []}, {"name": "WebhookSubscriptionMetafieldIdentifier", "description": "Identifies metafields by their namespace, and key.", "fields_and_connections": [{"name": "key", "type": "String!", "description": "The unique identifier for the metafield definition within its namespace.", "not_nullable": true}, {"name": "namespace", "type": "String!", "description": "The container for a group of metafields that the metafield definition is associated with.", "not_nullable": true}], "examples": []}]}, {"name": "Customers", "queries": [{"name": "customer", "description": "Returns a Customer resource by ID.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of the Customer to return."}], "returns": [], "examples": [{"description": "Get a customer by ID", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `query {\n    customer(id: \"gid://shopify/Customer/544365967\") {\n      id\n      firstName\n      lastName\n      email\n      phone\n      numberOfOrders\n      amountSpent {\n        amount\n        currencyCode\n      }\n      createdAt\n      updatedAt\n      note\n      verifiedEmail\n      validEmailAddress\n      tags\n      lifetimeDuration\n      defaultAddress {\n        formattedArea\n        address1\n      }\n      addresses {\n        address1\n      }\n      image {\n        src\n      }\n      canDelete\n    }\n  }`,\n});\n"}, {"description": "Get a customer by ID", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `query {\n    customer(id: \"gid://shopify/Customer/544365967\") {\n      id\n      firstName\n      lastName\n      email\n      phone\n      numberOfOrders\n      amountSpent {\n        amount\n        currencyCode\n      }\n      createdAt\n      updatedAt\n      note\n      verifiedEmail\n      validEmailAddress\n      tags\n      lifetimeDuration\n      defaultAddress {\n        formattedArea\n        address1\n      }\n      addresses {\n        address1\n      }\n      image {\n        src\n      }\n      canDelete\n    }\n  }`,\n});\n"}, {"description": "Get a metafield attached to a customer", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `query CustomerMetafield($namespace: String!, $key: String!, $ownerId: ID!) {\n      customer(id: $ownerId) {\n        nickname: metafield(namespace: $namespace, key: $key) {\n          value\n        }\n      }\n    }`,\n    \"variables\": {\n      \"namespace\": \"my_fields\",\n      \"key\": \"nickname\",\n      \"ownerId\": \"gid://shopify/Customer/544365967\"\n    },\n  },\n});\n"}, {"description": "Get a metafield attached to a customer", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `query CustomerMetafield($namespace: String!, $key: String!, $ownerId: ID!) {\n      customer(id: $ownerId) {\n        nickname: metafield(namespace: $namespace, key: $key) {\n          value\n        }\n      }\n    }`,\n    \"variables\": {\n      \"namespace\": \"my_fields\",\n      \"key\": \"nickname\",\n      \"ownerId\": \"gid://shopify/Customer/544365967\"\n    },\n  },\n});\n"}, {"description": "Get metafields attached to a customer", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `query CustomerMetafields($ownerId: ID!) {\n      customer(id: $ownerId) {\n        metafields(first: 3) {\n          edges {\n            node {\n              namespace\n              key\n              value\n            }\n          }\n        }\n      }\n    }`,\n    \"variables\": {\n      \"ownerId\": \"gid://shopify/Customer/544365967\"\n    },\n  },\n});\n"}, {"description": "Get metafields attached to a customer", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `query CustomerMetafields($ownerId: ID!) {\n      customer(id: $ownerId) {\n        metafields(first: 3) {\n          edges {\n            node {\n              namespace\n              key\n              value\n            }\n          }\n        }\n      }\n    }`,\n    \"variables\": {\n      \"ownerId\": \"gid://shopify/Customer/544365967\"\n    },\n  },\n});\n"}, {"description": "Get pinned metafield definitions associated with a customer", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `query CustomerMetafieldDefinitions($ownerId: ID!, $first: Int, $pinnedStatus: MetafieldDefinitionPinnedStatus, $sortKey: MetafieldDefinitionSortKeys) {\n      customer(id: $ownerId) {\n        metafieldDefinitions(first: $first, pinnedStatus: $pinnedStatus, sortKey: $sortKey) {\n          edges {\n            node {\n              name\n              namespace\n              key\n              type {\n                name\n              }\n            }\n          }\n        }\n      }\n    }`,\n    \"variables\": {\n      \"pinnedStatus\": \"PINNED\",\n      \"ownerId\": \"gid://shopify/Customer/544365967\",\n      \"first\": 10,\n      \"sortKey\": \"PINNED_POSITION\"\n    },\n  },\n});\n"}, {"description": "Get pinned metafield definitions associated with a customer", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `query CustomerMetafieldDefinitions($ownerId: ID!, $first: Int, $pinnedStatus: MetafieldDefinitionPinnedStatus, $sortKey: MetafieldDefinitionSortKeys) {\n      customer(id: $ownerId) {\n        metafieldDefinitions(first: $first, pinnedStatus: $pinnedStatus, sortKey: $sortKey) {\n          edges {\n            node {\n              name\n              namespace\n              key\n              type {\n                name\n              }\n            }\n          }\n        }\n      }\n    }`,\n    \"variables\": {\n      \"pinnedStatus\": \"PINNED\",\n      \"ownerId\": \"gid://shopify/Customer/544365967\",\n      \"first\": 10,\n      \"sortKey\": \"PINNED_POSITION\"\n    },\n  },\n});\n"}, {"description": "Get the merge status of a customer", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `query {\n    customer(id: \"gid://shopify/Customer/105906728\") {\n      mergeable {\n        isMergeable\n        reason\n        errorFields\n        mergeInProgress {\n          jobId\n          status\n          resultingCustomerId\n          customerMergeErrors {\n            errorFields\n            message\n          }\n        }\n      }\n    }\n  }`,\n});\n"}, {"description": "Get the merge status of a customer", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `query {\n    customer(id: \"gid://shopify/Customer/105906728\") {\n      mergeable {\n        isMergeable\n        reason\n        errorFields\n        mergeInProgress {\n          jobId\n          status\n          resultingCustomerId\n          customerMergeErrors {\n            errorFields\n            message\n          }\n        }\n      }\n    }\n  }`,\n});\n"}, {"description": "Get two specific customers by their ID using aliases", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `query {\n    bob: customer(id: \"gid://shopify/Customer/544365967\") {\n      firstName\n      lastName\n      email\n    }\n    john: customer(id: \"gid://shopify/Customer/105906728\") {\n      firstName\n      lastName\n      email\n    }\n  }`,\n});\n"}, {"description": "Get two specific customers by their ID using aliases", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `query {\n    bob: customer(id: \"gid://shopify/Customer/544365967\") {\n      firstName\n      lastName\n      email\n    }\n    john: customer(id: \"gid://shopify/Customer/105906728\") {\n      firstName\n      lastName\n      email\n    }\n  }`,\n});\n"}, {"description": "Retrieve details for all addresses associated with a customer", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `query CustomerAddressShow($id: ID!) {\n      customer(id: $id) {\n        addressesV2(first: 250) {\n          edges {\n            node {\n              id\n              address1\n              city\n            }\n          }\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/Customer/544365967\"\n    },\n  },\n});\n"}, {"description": "Retrieves a list of addresses for a customer", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `query CustomerAddressList($id: ID!) {\n      customer(id: $id) {\n        defaultAddress {\n          address1\n          city\n        }\n        addressesV2(first: 10) {\n          edges {\n            node {\n              address1\n              city\n            }\n          }\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/Customer/544365967\"\n    },\n  },\n});\n"}, {"description": "Retrieves a list of addresses for a customer", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `query CustomerAddressList($id: ID!) {\n      customer(id: $id) {\n        defaultAddress {\n          address1\n          city\n        }\n        addressesV2(first: 10) {\n          edges {\n            node {\n              address1\n              city\n            }\n          }\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/Customer/544365967\"\n    },\n  },\n});\n"}, {"description": "Retrieves details for a single customer address", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `query CustomerAddressShow($id: ID!) {\n      customer(id: $id) {\n        addressesV2(first: 250) {\n          edges {\n            node {\n              id\n              address1\n              city\n            }\n          }\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/Customer/544365967\"\n    },\n  },\n});\n"}]}, {"name": "customerByIdentifier", "description": "Return a customer by an identifier.", "arguments": [{"name": "identifier", "type": "CustomerIdentifierInput!", "required": false, "description": "The identifier of the customer."}], "returns": [], "examples": [{"description": "Find a customer by custom id", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `query($identifier: CustomerIdentifierInput!) {\n      customer: customerByIdentifier(identifier: $identifier) {\n        id\n        amountSpent {\n          amount\n          currencyCode\n        }\n      }\n    }`,\n    \"variables\": {\n      \"identifier\": {\n        \"customId\": {\n          \"namespace\": \"custom\",\n          \"key\": \"id\",\n          \"value\": \"16a3a6dd\"\n        }\n      }\n    },\n  },\n});\n"}, {"description": "Find a customer by email address", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `query($identifier: CustomerIdentifierInput!) {\n      customer: customerByIdentifier(identifier: $identifier) {\n        id\n        amountSpent {\n          amount\n          currencyCode\n        }\n      }\n    }`,\n    \"variables\": {\n      \"identifier\": {\n        \"emailAddress\": \"bob@example.com\"\n      }\n    },\n  },\n});\n"}, {"description": "Find a customer by phone number", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `query($identifier: CustomerIdentifierInput!) {\n      customer: customerByIdentifier(identifier: $identifier) {\n        id\n        amountSpent {\n          amount\n          currencyCode\n        }\n      }\n    }`,\n    \"variables\": {\n      \"identifier\": {\n        \"phoneNumber\": \"+13125551212\"\n      }\n    },\n  },\n});\n"}]}, {"name": "customerMergePreview", "description": "Returns a preview of a customer merge request.", "arguments": [{"name": "customerOneId", "type": "ID!", "required": false, "description": "The ID of the first customer that will be merged."}, {"name": "customerTwoId", "type": "ID!", "required": false, "description": "The ID of the second customer that will be merged."}, {"name": "overrideFields", "type": "CustomerMergeOverrideFields", "required": false, "description": "The fields to override the default customer merge rules."}], "returns": [], "examples": []}, {"name": "customers", "description": "Returns a list of customers in your Shopify store, including key information such as name, email, location, and purchase history.\nUse this query to segment your audience, personalize marketing campaigns, or analyze customer behavior by applying filters based on location, order history, marketing preferences and tags.\nThe customers query supports pagination and sorting.", "arguments": [{"name": "after", "type": "String", "required": false, "description": "The elements that come after the specified cursor."}, {"name": "before", "type": "String", "required": false, "description": "The elements that come before the specified cursor."}, {"name": "first", "type": "Int", "required": false, "description": "The first n elements from the paginated list."}, {"name": "last", "type": "Int", "required": false, "description": "The last n elements from the paginated list."}, {"name": "query", "type": "String", "required": false, "description": "A filter made up of terms, connectives, modifiers, and comparators.\nYou can apply one or more filters to a query. Learn more about Shopify API search syntax."}, {"name": "reverse", "type": "Boolean", "required": false, "description": "Reverse the order of the underlying list."}, {"name": "sortKey", "type": "CustomerSortKeys", "required": false, "description": "Sort the underlying list using a key. If your query is slow or returns an error, then try specifying a sort key that matches the field used in the search."}], "returns": [], "examples": [{"description": "Retrieve detailed information for a list of customers", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `query CustomerList {\n    customers(first: 50) {\n      nodes {\n        id\n        firstName\n        lastName\n        defaultEmailAddress {\n          emailAddress\n          marketingState\n        }\n        defaultPhoneNumber {\n          phoneNumber\n          marketingState\n          marketingCollectedFrom\n        }\n        createdAt\n        updatedAt\n        numberOfOrders\n        state\n        amountSpent {\n          amount\n          currencyCode\n        }\n        verifiedEmail\n        taxExempt\n        tags\n        addresses {\n          id\n          firstName\n          lastName\n          address1\n          city\n          province\n          country\n          zip\n          phone\n          name\n          provinceCode\n          countryCodeV2\n        }\n        defaultAddress {\n          id\n          address1\n          city\n          province\n          country\n          zip\n          phone\n          provinceCode\n          countryCodeV2\n        }\n      }\n    }\n  }`,\n});\n"}, {"description": "Retrieve the first 10 customers using pagination", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `query {\n    customers(first: 10) {\n      edges {\n        cursor\n        node {\n          id\n          firstName\n          lastName\n          defaultEmailAddress {\n            emailAddress\n          }\n          defaultPhoneNumber {\n            phoneNumber\n          }\n          createdAt\n          updatedAt\n          numberOfOrders\n          state\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n    }\n  }`,\n});\n"}, {"description": "Retrieve the first 10 customers with an enabled customer account", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `query {\n    customers(first: 10, query: \"state:'ENABLED'\") {\n      edges {\n        node {\n          id\n          firstName\n          lastName\n          defaultEmailAddress {\n            emailAddress\n          }\n          state\n        }\n      }\n    }\n  }`,\n});\n"}, {"description": "Retrieve the first five customers in Canada", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `query {\n    customers(first: 5, query: \"country:canada\") {\n      edges {\n        node {\n          id\n          firstName\n          lastName\n        }\n      }\n    }\n  }`,\n});\n"}]}, {"name": "customerSavedSearches", "description": "List of the shop's customer saved searches.", "arguments": [{"name": "after", "type": "String", "required": false, "description": "The elements that come after the specified cursor."}, {"name": "before", "type": "String", "required": false, "description": "The elements that come before the specified cursor."}, {"name": "first", "type": "Int", "required": false, "description": "The first n elements from the paginated list."}, {"name": "last", "type": "Int", "required": false, "description": "The last n elements from the paginated list."}, {"name": "query", "type": "String", "required": false, "description": "A filter made up of terms, connectives, modifiers, and comparators.\nYou can apply one or more filters to a query. Learn more about Shopify API search syntax."}, {"name": "reverse", "type": "Boolean", "required": false, "description": "Reverse the order of the underlying list."}, {"name": "sortKey", "type": "CustomerSavedSearchSortKeys", "required": false, "description": "Sort the underlying list using a key. If your query is slow or returns an error, then try specifying a sort key that matches the field used in the search."}], "returns": [], "examples": []}, {"name": "customersCount", "description": "The number of customers.", "arguments": [{"name": "query", "type": "String", "required": false, "description": "A filter made up of terms, connectives, modifiers, and comparators.\nYou can apply one or more filters to a query. Learn more about Shopify API search syntax."}], "returns": [], "examples": []}, {"name": "customerSegmentMembers", "description": "The list of members, such as customers, that's associated with an individual segment.\nThe maximum page size is 1000.", "arguments": [{"name": "after", "type": "String", "required": false, "description": "The elements that come after the specified cursor."}, {"name": "before", "type": "String", "required": false, "description": "The elements that come before the specified cursor."}, {"name": "first", "type": "Int", "required": false, "description": "The first n elements from the paginated list."}, {"name": "last", "type": "Int", "required": false, "description": "The last n elements from the paginated list."}, {"name": "query", "type": "String", "required": false, "description": "The query that's used to filter the members. The query is composed of a combination of conditions on facts about customers such as email_subscription_status = 'SUBSCRIBED' with this syntax."}, {"name": "queryId", "type": "ID", "required": false, "description": "The ID of the segment members query."}, {"name": "reverse", "type": "Boolean", "required": false, "description": "Reverse the order of the list. The sorting behaviour defaults to ascending order."}, {"name": "segmentId", "type": "ID", "required": false, "description": "The ID of the segment."}, {"name": "sortKey", "type": "String", "required": false, "description": "Sort the list by a given key."}, {"name": "timezone", "type": "String", "required": false, "description": "The timezone that's used to interpret relative date arguments. The timezone defaults to UTC if the timezone isn't provided."}], "returns": [], "examples": []}, {"name": "customerSegmentMembership", "description": "Whether a member, which is a customer, belongs to a segment.", "arguments": [{"name": "customerId", "type": "ID!", "required": false, "description": "The ID of the customer that has the membership."}, {"name": "segmentIds", "type": "[ID!]!", "required": false, "description": "The segments to evaluate for the given customer."}], "returns": [], "examples": []}, {"name": "customerSegmentMembersQuery", "description": "Returns a segment members query resource by ID.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of the CustomerSegmentMembersQuery to return."}], "returns": [], "examples": []}, {"name": "segment", "description": "The Customer Segment.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "Find a segment by ID."}], "returns": [], "examples": []}, {"name": "segmentFilters", "description": "A list of filters.", "arguments": [{"name": "after", "type": "String", "required": false, "description": "The elements that come after the specified cursor."}, {"name": "before", "type": "String", "required": false, "description": "The elements that come before the specified cursor."}, {"name": "first", "type": "Int", "required": false, "description": "The first n elements from the paginated list."}, {"name": "last", "type": "Int", "required": false, "description": "The last n elements from the paginated list."}], "returns": [], "examples": []}, {"name": "segmentFilterSuggestions", "description": "A list of filter suggestions associated with a segment. A segment is a group of members (commonly customers) that meet specific criteria.", "arguments": [{"name": "after", "type": "String", "required": false, "description": "The elements that come after the specified cursor."}, {"name": "first", "type": "Int!", "required": false, "description": "The first n elements from the paginated list."}, {"name": "search", "type": "String!", "required": false, "description": "Returns the elements of a list by keyword or term."}], "returns": [], "examples": []}, {"name": "segmentMigrations", "description": "A list of a shop's segment migrations.", "arguments": [{"name": "after", "type": "String", "required": false, "description": "The elements that come after the specified cursor."}, {"name": "before", "type": "String", "required": false, "description": "The elements that come before the specified cursor."}, {"name": "first", "type": "Int", "required": false, "description": "The first n elements from the paginated list."}, {"name": "last", "type": "Int", "required": false, "description": "The last n elements from the paginated list."}, {"name": "savedSearchId", "type": "ID", "required": false, "description": "Search a segment migration by its saved search ID."}], "returns": [], "examples": []}, {"name": "segments", "description": "A list of a shop's segments.", "arguments": [{"name": "after", "type": "String", "required": false, "description": "The elements that come after the specified cursor."}, {"name": "before", "type": "String", "required": false, "description": "The elements that come before the specified cursor."}, {"name": "first", "type": "Int", "required": false, "description": "The first n elements from the paginated list."}, {"name": "last", "type": "Int", "required": false, "description": "The last n elements from the paginated list."}, {"name": "query", "type": "String", "required": false, "description": "A filter made up of terms, connectives, modifiers, and comparators.\nYou can apply one or more filters to a query. Learn more about Shopify API search syntax."}, {"name": "reverse", "type": "Boolean", "required": false, "description": "Reverse the order of the underlying list."}, {"name": "sortKey", "type": "SegmentSortKeys", "required": false, "description": "Sort the underlying list by the given key."}], "returns": [], "examples": []}, {"name": "segmentsCount", "description": "The number of segments for a shop.", "arguments": [], "returns": [{"name": "Count", "type": "Count", "description": "non-null"}, {"name": "Count", "type": "Count", "description": "non-null"}, {"name": "Count", "type": "Count", "description": "non-null"}], "examples": []}, {"name": "segmentValueSuggestions", "description": "The list of suggested values corresponding to a particular filter for a segment. A segment is a group of members, such as customers, that meet specific criteria.", "arguments": [{"name": "after", "type": "String", "required": false, "description": "The elements that come after the specified cursor."}, {"name": "before", "type": "String", "required": false, "description": "The elements that come before the specified cursor."}, {"name": "filterQueryName", "type": "String", "required": false, "description": "Returns the elements of a list by filter handle."}, {"name": "first", "type": "Int", "required": false, "description": "The first n elements from the paginated list."}, {"name": "functionParameterQueryName", "type": "String", "required": false, "description": "Returns the elements of a list by filter parameter name."}, {"name": "last", "type": "Int", "required": false, "description": "The last n elements from the paginated list."}, {"name": "search", "type": "String!", "required": false, "description": "Returns the elements of a list by keyword or term."}], "returns": [], "examples": []}], "mutations": [{"name": "customerAddressCreate", "description": "Create a new customer address.", "arguments": [{"name": "address", "type": "MailingAddressInput!", "required": false, "description": "Specifies the fields to use when creating the address."}, {"name": "customerId", "type": "ID!", "required": false, "description": "The ID of the customer."}, {"name": "setAsDefault", "type": "Boolean", "required": false, "description": "Whether to set the address as the customer's default address."}], "returns": [], "examples": []}, {"name": "customerAddressDelete", "description": "Deletes a customer's address.", "arguments": [{"name": "addressId", "type": "ID!", "required": false, "description": "The ID of the address to be deleted from the customer."}, {"name": "customerId", "type": "ID!", "required": false, "description": "The ID of the customer whose address is being deleted."}], "returns": [], "examples": []}, {"name": "customerAddressUpdate", "description": "Update a customer's address information.", "arguments": [{"name": "address", "type": "MailingAddressInput!", "required": false, "description": "Specifies the fields to use when updating the address."}, {"name": "addressId", "type": "ID!", "required": false, "description": "The ID of the address to update."}, {"name": "customerId", "type": "ID!", "required": false, "description": "The ID of the customer whose address is being updated."}, {"name": "setAsDefault", "type": "Boolean", "required": false, "description": "Whether to set the address as the customer's default address."}], "returns": [], "examples": []}, {"name": "customerAddTaxExemptions", "description": "Add tax exemptions for the customer.", "arguments": [{"name": "customerId", "type": "ID!", "required": false, "description": "The ID of the customer to update."}, {"name": "taxExemptions", "type": "[TaxExemption!]!", "required": false, "description": "The list of tax exemptions to add for the customer, in the format of an array or a comma-separated list. Example values: [\"CA_BC_RESELLER_EXEMPTION\", \"CA_STATUS_CARD_EXEMPTION\"], \"CA_BC_RESELLER_EXEMPTION, CA_STATUS_CARD_EXEMPTION\"."}], "returns": [], "examples": [{"description": "Add tax exemptions for a customer", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation customerAddTaxExemptions($customerId: ID!, $taxExemptions: [TaxExemption!]!) {\n      customerAddTaxExemptions(customerId: $customerId, taxExemptions: $taxExemptions) {\n        userErrors {\n          field\n          message\n        }\n        customer {\n          id\n        }\n      }\n    }`,\n    \"variables\": {\n      \"customerId\": \"gid://shopify/Customer/839649557\",\n      \"taxExemptions\": [\n        \"CA_BC_RESELLER_EXEMPTION\",\n        \"CA_STATUS_CARD_EXEMPTION\"\n      ]\n    },\n  },\n});\n"}, {"description": "customerAddTaxExemptions reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation customerAddTaxExemptions($customerId: ID!, $taxExemptions: [TaxExemption!]!) {\n      customerAddTaxExemptions(customerId: $customerId, taxExemptions: $taxExemptions) {\n        userErrors {\n          field\n          message\n        }\n        customer {\n          id\n        }\n      }\n    }`,\n    \"variables\": {\n      \"customerId\": \"gid://shopify/Customer/839649557\",\n      \"taxExemptions\": [\n        \"CA_BC_RESELLER_EXEMPTION\",\n        \"CA_STATUS_CARD_EXEMPTION\"\n      ]\n    },\n  },\n});\n"}]}, {"name": "customerCancelDataErasure", "description": "Cancels a pending erasure of a customer's data.\nTo request an erasure of a customer's data use the customerRequestDataErasure mutation.", "arguments": [{"name": "customerId", "type": "ID!", "required": false, "description": "The ID of the customer for whom to cancel a pending data erasure."}], "returns": [], "examples": []}, {"name": "customerCreate", "description": "Create a new customer. As of API version 2022-10, apps using protected customer data must meet the protected customer data requirements.", "arguments": [{"name": "input", "type": "CustomerInput!", "required": false, "description": "The input fields to create a customer."}], "returns": [], "examples": [{"description": "Create a customer subscribed to SMS marketing", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation customerCreate($input: CustomerInput!) {\n      customerCreate(input: $input) {\n        userErrors {\n          field\n          message\n        }\n        customer {\n          id\n          email\n          phone\n          taxExempt\n          firstName\n          lastName\n          amountSpent {\n            amount\n            currencyCode\n          }\n          smsMarketingConsent {\n            marketingState\n            marketingOptInLevel\n            consentUpdatedAt\n          }\n        }\n      }\n    }`,\n    \"variables\": {\n      \"input\": {\n        \"email\": \"steve.lastnameson@example.com\",\n        \"phone\": \"+16465555555\",\n        \"firstName\": \"Steve\",\n        \"smsMarketingConsent\": {\n          \"marketingState\": \"SUBSCRIBED\",\n          \"marketingOptInLevel\": \"SINGLE_OPT_IN\"\n        }\n      }\n    },\n  },\n});\n"}, {"description": "Create a customer without required attributes", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation customerCreate($input: CustomerInput!) {\n      customerCreate(input: $input) {\n        userErrors {\n          field\n          message\n        }\n        customer {\n          id\n          email\n          phone\n          taxExempt\n          emailMarketingConsent {\n            marketingState\n            marketingOptInLevel\n            consentUpdatedAt\n          }\n          firstName\n          lastName\n          amountSpent {\n            amount\n            currencyCode\n          }\n          smsMarketingConsent {\n            marketingState\n            marketingOptInLevel\n          }\n          addresses {\n            address1\n            city\n            countryCode\n            phone\n            zip\n          }\n        }\n      }\n    }`,\n    \"variables\": {\n      \"input\": {\n        \"email\": null,\n        \"phone\": null,\n        \"firstName\": null,\n        \"lastName\": null\n      }\n    },\n  },\n});\n"}, {"description": "Create a new metafield on a new customer", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation createCustomerMetafields($input: CustomerInput!) {\n      customerCreate(input: $input) {\n        customer {\n          id\n          metafields(first: 3) {\n            edges {\n              node {\n                id\n                namespace\n                key\n                value\n              }\n            }\n          }\n        }\n        userErrors {\n          message\n          field\n        }\n      }\n    }`,\n    \"variables\": {\n      \"input\": {\n        \"metafields\": [\n          {\n            \"namespace\": \"my_field\",\n            \"key\": \"nickname\",\n            \"type\": \"single_line_text_field\",\n            \"value\": \"rob\"\n          }\n        ],\n        \"email\": \"bob.norman@example.com\"\n      }\n    },\n  },\n});\n"}, {"description": "Creates a customer", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation customerCreate($input: CustomerInput!) {\n      customerCreate(input: $input) {\n        userErrors {\n          field\n          message\n        }\n        customer {\n          id\n          email\n          phone\n          taxExempt\n          emailMarketingConsent {\n            marketingState\n            marketingOptInLevel\n            consentUpdatedAt\n          }\n          firstName\n          lastName\n          amountSpent {\n            amount\n            currencyCode\n          }\n          smsMarketingConsent {\n            marketingState\n            marketingOptInLevel\n          }\n          addresses {\n            address1\n            city\n            country\n            phone\n            zip\n          }\n        }\n      }\n    }`,\n    \"variables\": {\n      \"input\": {\n        \"email\": \"steve.lastnameson@example.com\",\n        \"phone\": \"+16465555555\",\n        \"firstName\": \"Steve\",\n        \"lastName\": \"Lastname\",\n        \"emailMarketingConsent\": {\n          \"marketingOptInLevel\": \"CONFIRMED_OPT_IN\",\n          \"marketingState\": \"SUBSCRIBED\"\n        },\n        \"addresses\": [\n          {\n            \"address1\": \"412 fake st\",\n            \"city\": \"Ottawa\",\n            \"province\": \"ON\",\n            \"phone\": \"+16469999999\",\n            \"zip\": \"A1A 4A1\",\n            \"lastName\": \"Lastname\",\n            \"firstName\": \"Steve\",\n            \"countryCode\": \"CA\"\n          }\n        ]\n      }\n    },\n  },\n});\n"}, {"description": "customerCreate reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation customerCreate($input: CustomerInput!) {\n      customerCreate(input: $input) {\n        userErrors {\n          field\n          message\n        }\n        customer {\n          id\n          email\n          phone\n          taxExempt\n          firstName\n          lastName\n          amountSpent {\n            amount\n            currencyCode\n          }\n          smsMarketingConsent {\n            marketingState\n            marketingOptInLevel\n            consentUpdatedAt\n          }\n        }\n      }\n    }`,\n    \"variables\": {\n      \"input\": {\n        \"email\": \"steve.lastnameson@example.com\",\n        \"phone\": \"+16465555555\",\n        \"firstName\": \"Steve\",\n        \"smsMarketingConsent\": {\n          \"marketingState\": \"SUBSCRIBED\",\n          \"marketingOptInLevel\": \"SINGLE_OPT_IN\"\n        }\n      }\n    },\n  },\n});\n"}]}, {"name": "customerDelete", "description": "Delete a customer. As of API version 2022-10, apps using protected customer data must meet the protected customer data requirements.", "arguments": [{"name": "input", "type": "CustomerDeleteInput!", "required": false, "description": "Specifies the customer to delete."}], "returns": [], "examples": [{"description": "Deletes a customer", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation customerDelete($id: ID!) {\n      customerDelete(input: {id: $id}) {\n        shop {\n          id\n        }\n        userErrors {\n          field\n          message\n        }\n        deletedCustomerId\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/Customer/105906728\"\n    },\n  },\n});\n"}, {"description": "customerDelete reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation customerDelete($id: ID!) {\n      customerDelete(input: {id: $id}) {\n        shop {\n          id\n        }\n        userErrors {\n          field\n          message\n        }\n        deletedCustomerId\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/Customer/105906728\"\n    },\n  },\n});\n"}]}, {"name": "customerEmailMarketingConsentUpdate", "description": "Update a customer's email marketing information information.", "arguments": [{"name": "input", "type": "CustomerEmailMarketingConsentUpdateInput!", "required": false, "description": "Specifies the input fields to update a customer's email marketing consent information."}], "returns": [], "examples": []}, {"name": "customerGenerateAccountActivationUrl", "description": "Generate an account activation URL for a customer.", "arguments": [{"name": "customerId", "type": "ID!", "required": false, "description": "The ID of the customer that the URL is generated for."}], "returns": [], "examples": [{"description": "Creates an account activation URL for a customer", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation customerGenerateAccountActivationUrl($customerId: ID!) {\n      customerGenerateAccountActivationUrl(customerId: $customerId) {\n        accountActivationUrl\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"customerId\": \"gid://shopify/Customer/105906728\"\n    },\n  },\n});\n"}, {"description": "customerGenerateAccountActivationUrl reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation customerGenerateAccountActivationUrl($customerId: ID!) {\n      customerGenerateAccountActivationUrl(customerId: $customerId) {\n        accountActivationUrl\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"customerId\": \"gid://shopify/Customer/105906728\"\n    },\n  },\n});\n"}]}, {"name": "customerMerge", "description": "Merges two customers.", "arguments": [{"name": "customerOneId", "type": "ID!", "required": false, "description": "The ID of the first customer that will be merged."}, {"name": "customerTwoId", "type": "ID!", "required": false, "description": "The ID of the second customer that will be merged."}, {"name": "overrideFields", "type": "CustomerMergeOverrideFields", "required": false, "description": "The fields to override the default customer merge rules."}], "returns": [], "examples": [{"description": "Merge customers with override fields", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation CustomerMerge {\n      customerMerge(customerOneId: \"gid://shopify/Customer/544365967\", customerTwoId: \"gid://shopify/Customer/624407574\", overrideFields: {customerIdOfFirstNameToKeep: \"gid://shopify/Customer/544365967\", customerIdOfLastNameToKeep: \"gid://shopify/Customer/624407574\"}) {\n        resultingCustomerId\n        job {\n          id\n          done\n        }\n        userErrors {\n          code\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"customerOneId\": \"gid://shopify/Customer/544365967\",\n      \"customerTwoId\": \"gid://shopify/Customer/624407574\",\n      \"overrideFields\": {\n        \"customerIdOfFirstNameToKeep\": \"gid://shopify/Customer/544365967\",\n        \"customerIdOfLastNameToKeep\": \"gid://shopify/Customer/544365967\"\n      }\n    },\n  },\n});\n"}, {"description": "Merge two customers", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation CustomerMerge {\n      customerMerge(customerOneId: \"gid://shopify/Customer/544365967\", customerTwoId: \"gid://shopify/Customer/624407574\") {\n        resultingCustomerId\n        job {\n          id\n          done\n        }\n        userErrors {\n          code\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"customerOneId\": \"gid://shopify/Customer/544365967\",\n      \"customerTwoId\": \"gid://shopify/Customer/624407574\"\n    },\n  },\n});\n"}, {"description": "customerMerge reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation CustomerMerge {\n      customerMerge(customerOneId: \"gid://shopify/Customer/544365967\", customerTwoId: \"gid://shopify/Customer/624407574\", overrideFields: {customerIdOfFirstNameToKeep: \"gid://shopify/Customer/544365967\", customerIdOfLastNameToKeep: \"gid://shopify/Customer/624407574\"}) {\n        resultingCustomerId\n        job {\n          id\n          done\n        }\n        userErrors {\n          code\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"customerOneId\": \"gid://shopify/Customer/544365967\",\n      \"customerTwoId\": \"gid://shopify/Customer/624407574\",\n      \"overrideFields\": {\n        \"customerIdOfFirstNameToKeep\": \"gid://shopify/Customer/544365967\",\n        \"customerIdOfLastNameToKeep\": \"gid://shopify/Customer/544365967\"\n      }\n    },\n  },\n});\n"}]}, {"name": "customerRemoveTaxExemptions", "description": "Remove tax exemptions from a customer.", "arguments": [{"name": "customerId", "type": "ID!", "required": false, "description": "The ID of the customer to update."}, {"name": "taxExemptions", "type": "[TaxExemption!]!", "required": false, "description": "The list of tax exemptions to remove for the customer, in the format of an array or a comma-separated list. Example values: [\"CA_BC_RESELLER_EXEMPTION\", \"A_STATUS_CARD_EXEMPTION\"], \"CA_BC_RESELLER_EXEMPTION, CA_STATUS_CARD_EXEMPTION\"."}], "returns": [], "examples": [{"description": "Remove tax exemptions from a customer", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation customerRemoveTaxExemptions($customerId: ID!, $taxExemptions: [TaxExemption!]!) {\n      customerRemoveTaxExemptions(customerId: $customerId, taxExemptions: $taxExemptions) {\n        userErrors {\n          field\n          message\n        }\n        customer {\n          id\n          taxExemptions\n        }\n      }\n    }`,\n    \"variables\": {\n      \"customerId\": \"gid://shopify/Customer/554122808\",\n      \"taxExemptions\": [\n        \"CA_BC_RESELLER_EXEMPTION\",\n        \"CA_STATUS_CARD_EXEMPTION\"\n      ]\n    },\n  },\n});\n"}, {"description": "customerRemoveTaxExemptions reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation customerRemoveTaxExemptions($customerId: ID!, $taxExemptions: [TaxExemption!]!) {\n      customerRemoveTaxExemptions(customerId: $customerId, taxExemptions: $taxExemptions) {\n        userErrors {\n          field\n          message\n        }\n        customer {\n          id\n          taxExemptions\n        }\n      }\n    }`,\n    \"variables\": {\n      \"customerId\": \"gid://shopify/Customer/554122808\",\n      \"taxExemptions\": [\n        \"CA_BC_RESELLER_EXEMPTION\",\n        \"CA_STATUS_CARD_EXEMPTION\"\n      ]\n    },\n  },\n});\n"}]}, {"name": "customerReplaceTaxExemptions", "description": "Replace tax exemptions for a customer.", "arguments": [{"name": "customerId", "type": "ID!", "required": false, "description": "The ID of the customer to update."}, {"name": "taxExemptions", "type": "[TaxExemption!]!", "required": false, "description": "The list of tax exemptions that will replace the current exemptions for a customer. Can be an array or a comma-separated list.\nExample values: [\"CA_BC_RESELLER_EXEMPTION\", \"A_STATUS_CARD_EXEMPTION\"], \"CA_BC_RESELLER_EXEMPTION, CA_STATUS_CARD_EXEMPTION\"."}], "returns": [], "examples": [{"description": "Replace tax exemptions for a customer", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation customerReplaceTaxExemptions($customerId: ID!, $taxExemptions: [TaxExemption!]!) {\n      customerReplaceTaxExemptions(customerId: $customerId, taxExemptions: $taxExemptions) {\n        userErrors {\n          field\n          message\n        }\n        customer {\n          id\n          taxExemptions\n        }\n      }\n    }`,\n    \"variables\": {\n      \"customerId\": \"gid://shopify/Customer/554122808\",\n      \"taxExemptions\": [\n        \"CA_MB_COMMERCIAL_FISHERY_EXEMPTION\",\n        \"CA_ON_PURCHASE_EXEMPTION\"\n      ]\n    },\n  },\n});\n"}, {"description": "customerReplaceTaxExemptions reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation customerReplaceTaxExemptions($customerId: ID!, $taxExemptions: [TaxExemption!]!) {\n      customerReplaceTaxExemptions(customerId: $customerId, taxExemptions: $taxExemptions) {\n        userErrors {\n          field\n          message\n        }\n        customer {\n          id\n          taxExemptions\n        }\n      }\n    }`,\n    \"variables\": {\n      \"customerId\": \"gid://shopify/Customer/554122808\",\n      \"taxExemptions\": [\n        \"CA_MB_COMMERCIAL_FISHERY_EXEMPTION\",\n        \"CA_ON_PURCHASE_EXEMPTION\"\n      ]\n    },\n  },\n});\n"}]}, {"name": "customerRequestDataErasure", "description": "Enqueues a request to erase customer's data. Read more here.\nTo cancel the data erasure request use the customerCancelDataErasure mutation.", "arguments": [{"name": "customerId", "type": "ID!", "required": false, "description": "The ID of the customer to erase."}], "returns": [], "examples": []}, {"name": "customerSegmentMembersQueryCreate", "description": "Creates a customer segment members query.", "arguments": [{"name": "input", "type": "CustomerSegmentMembersQueryInput!", "required": false, "description": "The input fields to create a customer segment members query."}], "returns": [], "examples": []}, {"name": "customerSendAccountInviteEmail", "description": "Sends the customer an account invite email.", "arguments": [{"name": "customerId", "type": "ID!", "required": false, "description": "The ID of the customer to whom an account invite email is to be sent."}, {"name": "email", "type": "EmailInput", "required": false, "description": "Specifies the account invite email fields."}], "returns": [], "examples": [{"description": "Sends an account invite to a customer", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation CustomerSendAccountInviteEmail($customerId: ID!) {\n      customerSendAccountInviteEmail(customerId: $customerId) {\n        customer {\n          id\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"customerId\": \"gid://shopify/Customer/105906728\"\n    },\n  },\n});\n"}, {"description": "customerSendAccountInviteEmail reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation CustomerSendAccountInviteEmail($customerId: ID!) {\n      customerSendAccountInviteEmail(customerId: $customerId) {\n        customer {\n          id\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"customerId\": \"gid://shopify/Customer/105906728\"\n    },\n  },\n});\n"}]}, {"name": "customerSet", "description": "Creates or updates a customer in a single mutation.\nUse this mutation when syncing information from an external data source into Shopify.\nThis mutation can be used to create a new customer, update an existing customer by id, or\nupsert a customer by a unique key (email or phone).\nTo create a new customer omit the identifier argument.\nTo update an existing customer, include the identifier with the id of the customer to update.\nTo perform an 'upsert' by unique key (email or phone)\nuse the identifier argument to upsert a customer by a unique key (email or phone). If a customer\nwith the specified unique key exists, it will be updated. If not, a new customer will be created with\nthat unique key.\nAs of API version 2022-10, apps using protected customer data must meet the\nprotected customer data requirements\nAny list field (e.g.\naddresses,\nwill be updated so that all included entries are either created or updated, and all existing entries not\nincluded will be deleted.\nAll other fields will be updated to the value passed. Omitted fields will not be updated.", "arguments": [{"name": "identifier", "type": "CustomerSetIdentifiers", "required": false, "description": "Specifies the identifier that will be used to lookup the resource."}, {"name": "input", "type": "CustomerSetInput!", "required": false, "description": "The properties of the customer."}], "returns": [], "examples": []}, {"name": "customerSmsMarketingConsentUpdate", "description": "Update a customer's SMS marketing consent information.", "arguments": [{"name": "input", "type": "CustomerSmsMarketingConsentUpdateInput!", "required": false, "description": "Specifies the input fields to update a customer's SMS marketing consent information."}], "returns": [], "examples": [{"description": "Subscribe a customer to SMS marketing materials", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation customerSmsMarketingConsentUpdate($input: CustomerSmsMarketingConsentUpdateInput!) {\n      customerSmsMarketingConsentUpdate(input: $input) {\n        userErrors {\n          field\n          message\n        }\n        customer {\n          id\n          phone\n          smsMarketingConsent {\n            marketingState\n            marketingOptInLevel\n            consentUpdatedAt\n            consentCollectedFrom\n          }\n        }\n      }\n    }`,\n    \"variables\": {\n      \"input\": {\n        \"customerId\": \"gid://shopify/Customer/207119551\",\n        \"smsMarketingConsent\": {\n          \"marketingState\": \"SUBSCRIBED\",\n          \"marketingOptInLevel\": \"SINGLE_OPT_IN\"\n        }\n      }\n    },\n  },\n});\n"}, {"description": "Subscribe a customer to SMS marketing materials with the date at which the consent was collected", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation customerSmsMarketingConsentUpdate($input: CustomerSmsMarketingConsentUpdateInput!) {\n      customerSmsMarketingConsentUpdate(input: $input) {\n        userErrors {\n          field\n          message\n        }\n        customer {\n          id\n          phone\n          smsMarketingConsent {\n            marketingState\n            marketingOptInLevel\n            consentUpdatedAt\n            consentCollectedFrom\n          }\n        }\n      }\n    }`,\n    \"variables\": {\n      \"input\": {\n        \"customerId\": \"gid://shopify/Customer/207119551\",\n        \"smsMarketingConsent\": {\n          \"marketingState\": \"UNSUBSCRIBED\",\n          \"marketingOptInLevel\": \"SINGLE_OPT_IN\",\n          \"consentUpdatedAt\": \"2021-01-07T15:50:00Z\"\n        }\n      }\n    },\n  },\n});\n"}, {"description": "Unsubscribe a customer from SMS marketing materials", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation customerSmsMarketingConsentUpdate($input: CustomerSmsMarketingConsentUpdateInput!) {\n      customerSmsMarketingConsentUpdate(input: $input) {\n        userErrors {\n          field\n          message\n        }\n        customer {\n          id\n          phone\n          smsMarketingConsent {\n            marketingState\n            marketingOptInLevel\n            consentUpdatedAt\n            consentCollectedFrom\n          }\n        }\n      }\n    }`,\n    \"variables\": {\n      \"input\": {\n        \"customerId\": \"gid://shopify/Customer/207119551\",\n        \"smsMarketingConsent\": {\n          \"marketingState\": \"UNSUBSCRIBED\",\n          \"marketingOptInLevel\": \"SINGLE_OPT_IN\"\n        }\n      }\n    },\n  },\n});\n"}, {"description": "customerSmsMarketingConsentUpdate reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation customerSmsMarketingConsentUpdate($input: CustomerSmsMarketingConsentUpdateInput!) {\n      customerSmsMarketingConsentUpdate(input: $input) {\n        userErrors {\n          field\n          message\n        }\n        customer {\n          id\n          phone\n          smsMarketingConsent {\n            marketingState\n            marketingOptInLevel\n            consentUpdatedAt\n            consentCollectedFrom\n          }\n        }\n      }\n    }`,\n    \"variables\": {\n      \"input\": {\n        \"customerId\": \"gid://shopify/Customer/207119551\",\n        \"smsMarketingConsent\": {\n          \"marketingState\": \"SUBSCRIBED\",\n          \"marketingOptInLevel\": \"SINGLE_OPT_IN\"\n        }\n      }\n    },\n  },\n});\n"}]}, {"name": "customerUpdate", "description": "Update a customer's attributes. As of API version 2022-10, apps using protected customer data must meet the protected customer data requirements.", "arguments": [{"name": "input", "type": "CustomerInput!", "required": false, "description": "Provides updated fields for the customer. To set marketing consent, use the customerEmailMarketingConsentUpdate or customerSmsMarketingConsentUpdate mutations instead."}], "returns": [], "examples": [{"description": "Create a new metafield and update another on an existing customer", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation updateCustomerMetafields($input: CustomerInput!) {\n      customerUpdate(input: $input) {\n        customer {\n          id\n          metafields(first: 3) {\n            edges {\n              node {\n                id\n                namespace\n                key\n                value\n              }\n            }\n          }\n        }\n        userErrors {\n          message\n          field\n        }\n      }\n    }`,\n    \"variables\": {\n      \"input\": {\n        \"metafields\": [\n          {\n            \"namespace\": \"my_field\",\n            \"key\": \"nickname\",\n            \"type\": \"single_line_text_field\",\n            \"value\": \"rob\"\n          },\n          {\n            \"id\": \"gid://shopify/Metafield/1069230189\",\n            \"value\": \"they/them\"\n          }\n        ],\n        \"id\": \"gid://shopify/Customer/1018520244\"\n      }\n    },\n  },\n});\n"}, {"description": "Creates a new address for a customer", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation CustomerAddressCreate($customerId: ID!, $addresses: [MailingAddressInput!]) {\n      customerUpdate(input: {id: $customerId, addresses: $addresses}) {\n        customer {\n          id\n          addressesV2(first: 10) {\n            edges {\n              node {\n                id\n                address1\n                city\n              }\n            }\n          }\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"customerId\": \"gid://shopify/Customer/1018520244\",\n      \"addresses\": [\n        {\n          \"address1\": \"123 New Address\",\n          \"city\": \"New City\"\n        }\n      ]\n    },\n  },\n});\n"}, {"description": "Performs bulk operations for multiple customer addresses", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation CustomerAddressSet($customerId: ID!, $addresses: [MailingAddressInput!]) {\n      customerUpdate(input: {id: $customerId, addresses: $addresses}) {\n        customer {\n          id\n          addressesV2(first: 10) {\n            edges {\n              node {\n                id\n                address1\n                city\n              }\n            }\n          }\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"customerId\": \"gid://shopify/Customer/1018520244\",\n      \"addresses\": [\n        {\n          \"address1\": \"123 Main St\",\n          \"city\": \"Metropolis\"\n        },\n        {\n          \"address1\": \"456 Elm St\",\n          \"city\": \"Gotham\"\n        }\n      ]\n    },\n  },\n});\n"}, {"description": "Updates an existing customer address", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation CustomerAddressUpdate($customerId: ID!, $addresses: [MailingAddressInput!]) {\n      customerUpdate(input: {id: $customerId, addresses: $addresses}) {\n        customer {\n          id\n          addressesV2(first: 10) {\n            edges {\n              node {\n                id\n                address1\n                city\n              }\n            }\n          }\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"customerId\": \"gid://shopify/Customer/1018520244\",\n      \"addresses\": [\n        {\n          \"address1\": \"123 New Street\",\n          \"city\": \"New City\"\n        }\n      ]\n    },\n  },\n});\n"}, {"description": "customerUpdate reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation updateCustomerMetafields($input: CustomerInput!) {\n      customerUpdate(input: $input) {\n        customer {\n          id\n          metafields(first: 3) {\n            edges {\n              node {\n                id\n                namespace\n                key\n                value\n              }\n            }\n          }\n        }\n        userErrors {\n          message\n          field\n        }\n      }\n    }`,\n    \"variables\": {\n      \"input\": {\n        \"metafields\": [\n          {\n            \"namespace\": \"my_field\",\n            \"key\": \"nickname\",\n            \"type\": \"single_line_text_field\",\n            \"value\": \"rob\"\n          },\n          {\n            \"id\": \"gid://shopify/Metafield/1069230189\",\n            \"value\": \"they/them\"\n          }\n        ],\n        \"id\": \"gid://shopify/Customer/1018520244\"\n      }\n    },\n  },\n});\n"}]}, {"name": "customerUpdateDefaultAddress", "description": "Updates a customer's default address.", "arguments": [{"name": "addressId", "type": "ID!", "required": false, "description": "The ID of the customer's new default address."}, {"name": "customerId", "type": "ID!", "required": false, "description": "The ID of the customer whose default address is being updated."}], "returns": [], "examples": [{"description": "Sets the default address for a customer", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation CustomerAddressDefault($addressId: ID!, $customerId: ID!) {\n      customerUpdateDefaultAddress(addressId: $addressId, customerId: $customerId) {\n        customer {\n          id\n          defaultAddress {\n            id\n            address1\n            city\n          }\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"customerId\": \"gid://shopify/Customer/624407574\",\n      \"addressId\": \"gid://shopify/MailingAddress/624407574?model_name=CustomerAddress\"\n    },\n  },\n});\n"}, {"description": "Updates an existing customer address", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation customerUpdateDefaultAddress($addressId: ID!, $customerId: ID!) {\n      customerUpdateDefaultAddress(addressId: $addressId, customerId: $customerId) {\n        customer {\n          defaultAddress {\n            id\n          }\n        }\n        userErrors {\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"customerId\": \"gid://shopify/Customer/624407574\",\n      \"addressId\": \"gid://shopify/MailingAddress/1053318600?model_name=CustomerAddress\"\n    },\n  },\n});\n"}, {"description": "customerUpdateDefaultAddress reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation CustomerAddressDefault($addressId: ID!, $customerId: ID!) {\n      customerUpdateDefaultAddress(addressId: $addressId, customerId: $customerId) {\n        customer {\n          id\n          defaultAddress {\n            id\n            address1\n            city\n          }\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"customerId\": \"gid://shopify/Customer/624407574\",\n      \"addressId\": \"gid://shopify/MailingAddress/624407574?model_name=CustomerAddress\"\n    },\n  },\n});\n"}]}, {"name": "segmentCreate", "description": "Creates a segment.", "arguments": [{"name": "name", "type": "String!", "required": false, "description": "The name of the segment to be created. Segment names must be unique."}, {"name": "query", "type": "String!", "required": false, "description": "A precise definition of the segment. The definition is composed of a combination of conditions on facts about customers such as email_subscription_status = 'SUBSCRIBED' with this syntax."}], "returns": [], "examples": []}, {"name": "segmentDelete", "description": "Deletes a segment.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "Specifies the segment to delete."}], "returns": [], "examples": []}, {"name": "segmentUpdate", "description": "Updates a segment.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "Specifies the segment to be updated."}, {"name": "name", "type": "String", "required": false, "description": "The new name for the segment."}, {"name": "query", "type": "String", "required": false, "description": "A precise definition of the segment. The definition is composed of a combination of conditions on facts about customers such as email_subscription_status = 'SUBSCRIBED' with this syntax."}], "returns": [], "examples": []}, {"name": "taxAppConfigure", "description": "Allows tax app configurations for tax partners.", "arguments": [{"name": "ready", "type": "Boolean!", "required": false, "description": "Configures whether the tax app is correctly configured and ready to be used."}], "returns": [], "examples": []}], "objects": [{"name": "Customer", "description": "Represents information about a customer of the shop, such as the customer's contact details, their order\nhistory, and whether they've agreed to receive marketing material by email.\nCaution: Only use this data if it's required for your app's functionality. Shopify will restrict access to scopes for apps that don't have a legitimate use for the associated data.", "fields_and_connections": [{"name": "addresses", "type": "customer", "description": "Returns a Customer resource by ID.", "not_nullable": false}, {"name": "addresses", "type": "customerByIdentifier", "description": "Return a customer by an identifier.", "not_nullable": false}, {"name": "addresses", "type": "customers", "description": "Returns a list of customers in your Shopify store, including key information such as name, email, location, and purchase history.\nUse this query to segment your audience, personalize marketing campaigns, or analyze customer behavior by applying filters based on location, order history, marketing preferences and tags.\nThe customers query supports pagination and sorting.", "not_nullable": false}, {"name": "addresses", "type": "customerAddTaxExemptions", "description": "Add tax exemptions for the customer.", "not_nullable": false}, {"name": "addresses", "type": "customerCreate", "description": "Create a new customer. As of API version 2022-10, apps using protected customer data must meet the protected customer data requirements.", "not_nullable": false}, {"name": "addresses", "type": "customerEmailMarketingConsentUpdate", "description": "Update a customer's email marketing information information.", "not_nullable": false}, {"name": "addresses", "type": "customerPaymentMethodSendUpdateEmail", "description": "Sends a link to the customer so they can update a specific payment method.", "not_nullable": false}, {"name": "addresses", "type": "customerRemoveTaxExemptions", "description": "Remove tax exemptions from a customer.", "not_nullable": false}, {"name": "addresses", "type": "customerReplaceTaxExemptions", "description": "Replace tax exemptions for a customer.", "not_nullable": false}, {"name": "addresses", "type": "customerSendAccountInviteEmail", "description": "Sends the customer an account invite email.", "not_nullable": false}, {"name": "addresses", "type": "customerSet", "description": "Creates or updates a customer in a single mutation.\nUse this mutation when syncing information from an external data source into Shopify.\nThis mutation can be used to create a new customer, update an existing customer by id, or\nupsert a customer by a unique key (email or phone).\nTo create a new customer omit the identifier argument.\nTo update an existing customer, include the identifier with the id of the customer to update.\nTo perform an 'upsert' by unique key (email or phone)\nuse the identifier argument to upsert a customer by a unique key (email or phone). If a customer\nwith the specified unique key exists, it will be updated. If not, a new customer will be created with\nthat unique key.\nAs of API version 2022-10, apps using protected customer data must meet the\nprotected customer data requirements\nAny list field (e.g.\naddresses,\nwill be updated so that all included entries are either created or updated, and all existing entries not\nincluded will be deleted.\nAll other fields will be updated to the value passed. Omitted fields will not be updated.", "not_nullable": false}, {"name": "addresses", "type": "customerSmsMarketingConsentUpdate", "description": "Update a customer's SMS marketing consent information.", "not_nullable": false}, {"name": "addresses", "type": "customerUpdate", "description": "Update a customer's attributes. As of API version 2022-10, apps using protected customer data must meet the protected customer data requirements.", "not_nullable": false}, {"name": "addresses", "type": "customerUpdateDefaultAddress", "description": "Updates a customer's default address.", "not_nullable": false}, {"name": "addresses", "type": "CommentEventSubject", "description": "A list of addresses associated with the customer.", "not_nullable": false}, {"name": "addresses", "type": "HasEvents", "description": "A list of addresses associated with the customer.", "not_nullable": false}, {"name": "addresses", "type": "HasMetafieldDefinitions", "description": "A list of addresses associated with the customer.", "not_nullable": false}, {"name": "addresses", "type": "HasMetafields", "description": "A list of addresses associated with the customer.", "not_nullable": false}, {"name": "addresses", "type": "HasStoreCreditAccounts", "description": "A list of addresses associated with the customer.", "not_nullable": false}, {"name": "addresses", "type": "LegacyInteroperability", "description": "A list of addresses associated with the customer.", "not_nullable": false}, {"name": "addresses", "type": "Node", "description": "A list of addresses associated with the customer.", "not_nullable": false}], "examples": []}, {"name": "CustomerAccountsV2", "description": "Information about the shop's customer accounts.", "fields_and_connections": [{"name": "customerAccountsVersion", "type": "CustomerAccountsVersion!", "description": "Indicates which version of customer accounts the merchant is using in online store and checkout.", "not_nullable": true}, {"name": "loginLinksVisibleOnStorefrontAndCheckout", "type": "Boolean!", "description": "Login links are shown in online store and checkout.", "not_nullable": true}, {"name": "loginRequiredAtCheckout", "type": "Boolean!", "description": "Customers are required to log in to their account before checkout.", "not_nullable": true}, {"name": "url", "type": "URL", "description": "The root url for the customer accounts pages.", "not_nullable": false}], "examples": []}, {"name": "CustomerCreditCardBillingAddress", "description": "The billing address of a credit card payment instrument.", "fields_and_connections": [{"name": "address1", "type": "String", "description": "The first line of the address. Typically the street address or PO Box number.", "not_nullable": false}, {"name": "city", "type": "String", "description": "The name of the city, district, village, or town.", "not_nullable": false}, {"name": "country", "type": "String", "description": "The name of the country.", "not_nullable": false}, {"name": "countryCode", "type": "CountryCode", "description": "The two-letter code for the country of the address.\nFor example, US.", "not_nullable": false}, {"name": "firstName", "type": "String", "description": "The first name in the billing address.", "not_nullable": false}, {"name": "lastName", "type": "String", "description": "The last name in the billing address.", "not_nullable": false}, {"name": "province", "type": "String", "description": "The region of the address, such as the province, state, or district.", "not_nullable": false}, {"name": "provinceCode", "type": "String", "description": "The alphanumeric code for the region.\nFor example, ON.", "not_nullable": false}, {"name": "zip", "type": "String", "description": "The zip or postal code of the address.", "not_nullable": false}], "examples": []}, {"name": "CustomerEmailAddress", "description": "Represents an email address.", "fields_and_connections": [{"name": "emailAddress", "type": "String!", "description": "The customer's default email address.", "not_nullable": true}, {"name": "marketingOptInLevel", "type": "CustomerMarketingOptInLevel", "description": "The marketing subscription opt-in level, as described by the M3AAWG best practices guidelines,\nreceived when the marketing consent was updated.", "not_nullable": false}, {"name": "marketingState", "type": "CustomerEmailAddressMarketingState!", "description": "Whether the customer has subscribed to email marketing.", "not_nullable": true}, {"name": "marketingUnsubscribeUrl", "type": "URL!", "description": "The URL to unsubscribe a member from all mailing lists.", "not_nullable": true}, {"name": "marketingUpdatedAt", "type": "DateTime", "description": "The date and time at which the marketing consent was updated.\nNo date is provided if the email address never updated its marketing consent.", "not_nullable": false}, {"name": "openTrackingLevel", "type": "CustomerEmailAddressOpenTrackingLevel!", "description": "Whether the customer has opted in to having their opened emails tracked.", "not_nullable": true}, {"name": "openTrackingUrl", "type": "URL!", "description": "The URL that can be used to opt a customer in or out of email open tracking.", "not_nullable": true}, {"name": "sourceLocation", "type": "Location", "description": "The location where the customer consented to receive marketing material by email.", "not_nullable": false}, {"name": "validFormat", "type": "Boolean!", "description": "Whether the email address is formatted correctly.\nReturns true when the email is formatted correctly. This doesn't guarantee that the email address\nactually exists.", "not_nullable": true}], "examples": []}, {"name": "CustomerEmailMarketingConsentState", "description": "The record of when a customer consented to receive marketing material by email.", "fields_and_connections": [{"name": "consentUpdatedAt", "type": "DateTime", "description": "The date and time at which the customer consented to receive marketing material by email.\nThe customer's consent state reflects the consent record with the most recent consent_updated_at date.\nIf no date is provided, then the date and time at which the consent information was sent is used.", "not_nullable": false}, {"name": "marketingOptInLevel", "type": "CustomerMarketingOptInLevel", "description": "The marketing subscription opt-in level, as described by the M3AAWG best practices guidelines,\nthat the customer gave when they consented to receive marketing material by email.", "not_nullable": false}, {"name": "marketingState", "type": "CustomerEmailMarketingState!", "description": "The current email marketing state for the customer.", "not_nullable": true}, {"name": "sourceLocation", "type": "Location", "description": "The location where the customer consented to receive marketing material by email.", "not_nullable": false}], "examples": []}, {"name": "CustomerMergeable", "description": "An object that represents whether a customer can be merged with another customer.", "fields_and_connections": [{"name": "errorFields", "type": "[CustomerMergeErrorFieldType!]!", "description": "The list of fields preventing the customer from being merged.", "not_nullable": true}, {"name": "isMergeable", "type": "Boolean!", "description": "Whether the customer can be merged with another customer.", "not_nullable": true}, {"name": "mergeInProgress", "type": "CustomerMergeRequest", "description": "The merge request if one is currently in progress.", "not_nullable": false}, {"name": "reason", "type": "String", "description": "The reason why the customer can't be merged with another customer.", "not_nullable": false}], "examples": []}, {"name": "CustomerMergeError", "description": "The error blocking a customer merge.", "fields_and_connections": [{"name": "errorFields", "type": "[CustomerMergeErrorFieldType!]!", "description": "The list of fields preventing the customer from being merged.", "not_nullable": true}, {"name": "message", "type": "String!", "description": "The customer merge error message.", "not_nullable": true}], "examples": []}, {"name": "CustomerMergePreview", "description": "A preview of the results of a customer merge request.", "fields_and_connections": [{"name": "alternateFields", "type": "customerMergePreview", "description": "Returns a preview of a customer merge request.", "not_nullable": false}], "examples": []}, {"name": "CustomerMergePreviewAlternateFields", "description": "The fields that can be used to override the default fields.", "fields_and_connections": [{"name": "defaultAddress", "type": "MailingAddress", "description": "The default address of a customer.", "not_nullable": false}, {"name": "email", "type": "CustomerEmailAddress", "description": "The email state of a customer.", "not_nullable": false}, {"name": "firstName", "type": "String", "description": "The first name of a customer.", "not_nullable": false}, {"name": "lastName", "type": "String", "description": "The last name of a customer.", "not_nullable": false}, {"name": "phoneNumber", "type": "CustomerPhoneNumber", "description": "The phone number state of a customer.", "not_nullable": false}], "examples": []}, {"name": "CustomerMergePreviewBlockingFields", "description": "The blocking fields of a customer merge preview. These fields will block customer merge unless edited.", "fields_and_connections": [{"name": "note", "type": "String", "description": "The merged note resulting from a customer merge. The merged note is over the 5000 character limit and will block customer merge.", "not_nullable": false}, {"name": "tags", "type": "[String!]!", "description": "The merged tags resulting from a customer merge. The merged tags are over the 250 limit and will block customer merge.", "not_nullable": true}], "examples": []}, {"name": "CustomerMergePreviewDefaultFields", "description": "The fields that will be kept as part of a customer merge preview.", "fields_and_connections": [{"name": "addresses", "type": "MailingAddressConnection!", "description": "The merged addresses resulting from a customer merge.", "not_nullable": true}, {"name": "defaultAddress", "type": "MailingAddress", "description": "The default address resulting from a customer merge.", "not_nullable": false}, {"name": "discountNodeCount", "type": "UnsignedInt64!", "description": "The total number of customer-specific discounts resulting from a customer merge.", "not_nullable": true}, {"name": "discountNodes", "type": "DiscountNodeConnection!", "description": "The merged customer-specific discounts resulting from a customer merge.", "not_nullable": true}, {"name": "displayName", "type": "String!", "description": "The full name of the customer, based on the values for first_name and last_name. If first_name and last_name aren't available, then this field falls back to the customer's email address. If the customer's email isn't available, then this field falls back to the customer's phone number.", "not_nullable": true}, {"name": "draftOrderCount", "type": "UnsignedInt64!", "description": "The total number of merged draft orders.", "not_nullable": true}, {"name": "draftOrders", "type": "DraftOrderConnection!", "description": "The merged draft orders resulting from a customer merge.", "not_nullable": true}, {"name": "email", "type": "CustomerEmailAddress", "description": "The email state of a customer.", "not_nullable": false}, {"name": "firstName", "type": "String", "description": "The first name resulting from a customer merge.", "not_nullable": false}, {"name": "giftCardCount", "type": "UnsignedInt64!", "description": "The total number of merged gift cards.", "not_nullable": true}, {"name": "giftCards", "type": "GiftCardConnection!", "description": "The merged gift cards resulting from a customer merge.", "not_nullable": true}, {"name": "lastName", "type": "String", "description": "The last name resulting from a customer merge.", "not_nullable": false}, {"name": "metafieldCount", "type": "UnsignedInt64!", "description": "The total number of merged metafields.", "not_nullable": true}, {"name": "note", "type": "String", "description": "The merged note resulting from a customer merge.", "not_nullable": false}, {"name": "orderCount", "type": "UnsignedInt64!", "description": "The total number of merged orders.", "not_nullable": true}, {"name": "orders", "type": "OrderConnection!", "description": "The merged orders resulting from a customer merge.", "not_nullable": true}, {"name": "phoneNumber", "type": "CustomerPhoneNumber", "description": "The phone number state of a customer.", "not_nullable": false}, {"name": "tags", "type": "[String!]!", "description": "The merged tags resulting from a customer merge.", "not_nullable": true}], "examples": []}, {"name": "CustomerMergeRequest", "description": "A merge request for merging two customers.", "fields_and_connections": [{"name": "customerMergeErrors", "type": "customerMergeJobStatus", "description": "Returns the status of a customer merge request job.", "not_nullable": false}], "examples": []}, {"name": "CustomerPhoneNumber", "description": "A phone number.", "fields_and_connections": [{"name": "marketingCollectedFrom", "type": "CustomerConsentCollectedFrom", "description": "The source from which the SMS marketing information for the customer was collected.", "not_nullable": false}, {"name": "marketingOptInLevel", "type": "CustomerMarketingOptInLevel", "description": "The marketing subscription opt-in level, as described by the M3AAWG best practices guidelines,\nreceived when the marketing consent was updated.", "not_nullable": false}, {"name": "marketingState", "type": "CustomerSmsMarketingState!", "description": "Whether the customer has subscribed to SMS marketing material.", "not_nullable": true}, {"name": "marketingUpdatedAt", "type": "DateTime", "description": "The date and time at which the marketing consent was updated.\nNo date is provided if the email address never updated its marketing consent.", "not_nullable": false}, {"name": "phoneNumber", "type": "String!", "description": "A customer's phone number.", "not_nullable": true}, {"name": "sourceLocation", "type": "Location", "description": "The location where the customer consented to receive marketing material by SMS.", "not_nullable": false}], "examples": []}, {"name": "CustomerSegmentMember", "description": "The member of a segment.", "fields_and_connections": [{"name": "amountSpent", "type": "customerSegmentMembers", "description": "The list of members, such as customers, that's associated with an individual segment.\nThe maximum page size is 1000.", "not_nullable": false}, {"name": "amountSpent", "type": "HasMetafields", "description": "The total amount of money that the member has spent on orders.", "not_nullable": false}], "examples": []}, {"name": "CustomerSegmentMembersQuery", "description": "A job to determine a list of members, such as customers, that are associated with an individual segment.", "fields_and_connections": [{"name": "currentCount", "type": "customerSegmentMembersQuery", "description": "Returns a segment members query resource by ID.", "not_nullable": false}, {"name": "currentCount", "type": "customerSegmentMembersQueryCreate", "description": "Creates a customer segment members query.", "not_nullable": false}, {"name": "currentCount", "type": "JobResult", "description": "The current total number of members in a given segment.", "not_nullable": false}, {"name": "currentCount", "type": "Node", "description": "The current total number of members in a given segment.", "not_nullable": false}], "examples": []}, {"name": "CustomerSmsMarketingConsentError", "description": "An error that occurs during execution of an SMS marketing consent mutation.", "fields_and_connections": [{"name": "code", "type": "customerSmsMarketingConsentUpdate", "description": "Update a customer's SMS marketing consent information.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "CustomerSmsMarketingConsentState", "description": "The record of when a customer consented to receive marketing material by SMS.\nThe customer's consent state reflects the record with the most recent date when consent was updated.", "fields_and_connections": [{"name": "consentCollectedFrom", "type": "CustomerConsentCollectedFrom", "description": "The source from which the SMS marketing information for the customer was collected.", "not_nullable": false}, {"name": "consentUpdatedAt", "type": "DateTime", "description": "The date and time when the customer consented to receive marketing material by SMS.\nIf no date is provided, then the date and time when the consent information was sent is used.", "not_nullable": false}, {"name": "marketingOptInLevel", "type": "CustomerMarketingOptInLevel!", "description": "The marketing subscription opt-in level that was set when the customer consented to receive marketing information.", "not_nullable": true}, {"name": "marketingState", "type": "CustomerSmsMarketingState!", "description": "The current SMS marketing state for the customer.", "not_nullable": true}, {"name": "sourceLocation", "type": "Location", "description": "The location where the customer consented to receive marketing material by SMS.", "not_nullable": false}], "examples": []}, {"name": "CustomerStatistics", "description": "A customer's computed statistics.", "fields_and_connections": [{"name": "predictedSpendTier", "type": "CustomerPredictedSpendTier", "description": "The predicted spend tier of a customer with a shop.", "not_nullable": false}, {"name": "rfmGroup", "type": "CustomerRfmGroup", "description": "The RFM (Recency, Frequency, Monetary) group of the customer.", "not_nullable": false}], "examples": []}, {"name": "MarketPriceInclusions", "description": "The inclusive pricing strategy for a market.", "fields_and_connections": [{"name": "inclusiveDutiesPricingStrategy", "type": "InclusiveDutiesPricingStrategy!", "description": "The inclusive duties pricing strategy of the market. This determines if prices include duties.", "not_nullable": true}, {"name": "inclusiveTaxPricingStrategy", "type": "InclusiveTaxPricingStrategy!", "description": "The inclusive tax pricing strategy of the market. This determines if prices include taxes.", "not_nullable": true}], "examples": []}, {"name": "Segment", "description": "A dynamic collection of customers based on specific criteria.", "fields_and_connections": [{"name": "creationDate", "type": "segment", "description": "The Customer Segment.", "not_nullable": false}, {"name": "creationDate", "type": "segments", "description": "A list of a shop's segments.", "not_nullable": false}, {"name": "creationDate", "type": "segmentCreate", "description": "Creates a segment.", "not_nullable": false}, {"name": "creationDate", "type": "segmentUpdate", "description": "Updates a segment.", "not_nullable": false}, {"name": "creationDate", "type": "Node", "description": "The date and time when the segment was added to the store.", "not_nullable": false}], "examples": []}, {"name": "SegmentAssociationFilter", "description": "A filter that takes a value that's associated with an object. For example, the tags field is associated with the Customer object.", "fields_and_connections": [{"name": "localizedName", "type": "SegmentFilter", "description": "The localized name of the filter.", "not_nullable": false}], "examples": []}, {"name": "SegmentAttributeStatistics", "description": "The statistics of a given attribute.", "fields_and_connections": [{"name": "average", "type": "Float!", "description": "The average of a given attribute.", "not_nullable": true}, {"name": "sum", "type": "Float!", "description": "The sum of a given attribute.", "not_nullable": true}], "examples": []}, {"name": "SegmentBooleanFilter", "description": "A filter with a Boolean value that's been added to a segment query.", "fields_and_connections": [{"name": "localizedName", "type": "SegmentFilter", "description": "The localized name of the filter.", "not_nullable": false}], "examples": []}, {"name": "SegmentDateFilter", "description": "A filter with a date value that's been added to a segment query.", "fields_and_connections": [{"name": "localizedName", "type": "SegmentFilter", "description": "The localized name of the filter.", "not_nullable": false}], "examples": []}, {"name": "SegmentEnumFilter", "description": "A filter with a set of possible values that's been added to a segment query.", "fields_and_connections": [{"name": "localizedName", "type": "SegmentFilter", "description": "The localized name of the filter.", "not_nullable": false}], "examples": []}, {"name": "SegmentEventFilter", "description": "A filter that's used to segment customers based on the date that an event occured. For example, the product_bought event filter allows you to segment customers based on what products they've bought.", "fields_and_connections": [{"name": "localizedName", "type": "SegmentFilter", "description": "The localized name of the filter.", "not_nullable": false}], "examples": []}, {"name": "SegmentEventFilterParameter", "description": "The parameters for an event segment filter.", "fields_and_connections": [{"name": "acceptsMultipleValues", "type": "Boolean!", "description": "Whether the parameter accepts a list of values.", "not_nullable": true}, {"name": "localizedDescription", "type": "String!", "description": "The localized description of the parameter.", "not_nullable": true}, {"name": "localizedName", "type": "String!", "description": "The localized name of the parameter.", "not_nullable": true}, {"name": "optional", "type": "Boolean!", "description": "Whether the parameter is optional.", "not_nullable": true}, {"name": "parameterType", "type": "String!", "description": "The type of the parameter.", "not_nullable": true}, {"name": "queryName", "type": "String!", "description": "The query name of the parameter.", "not_nullable": true}], "examples": []}, {"name": "SegmentFloatFilter", "description": "A filter with a double-precision, floating-point value that's been added to a segment query.", "fields_and_connections": [{"name": "localizedName", "type": "SegmentFilter", "description": "The localized name of the filter.", "not_nullable": false}], "examples": []}, {"name": "SegmentIntegerFilter", "description": "A filter with an integer that's been added to a segment query.", "fields_and_connections": [{"name": "localizedName", "type": "SegmentFilter", "description": "The localized name of the filter.", "not_nullable": false}], "examples": []}, {"name": "SegmentMembership", "description": "The response type for the segmentMembership object.", "fields_and_connections": [{"name": "isMember", "type": "Boolean!", "description": "A Boolean that indicates whether or not the customer in the query is a member of the segment, which is identified using the segmentId.", "not_nullable": true}, {"name": "segmentId", "type": "ID!", "description": "A segmentId that's used for testing membership.", "not_nullable": true}], "examples": []}, {"name": "SegmentMembershipResponse", "description": "A list of maps that contain segmentId IDs and isMember Booleans. The maps represent segment memberships.", "fields_and_connections": [{"name": "memberships", "type": "customerSegmentMembership", "description": "Whether a member, which is a customer, belongs to a segment.", "not_nullable": false}], "examples": []}, {"name": "SegmentMigration", "description": "A segment and its corresponding saved search. \nFor example, you can use SegmentMigration to retrieve the segment ID that corresponds to a saved search ID.", "fields_and_connections": [{"name": "id", "type": "segmentMigrations", "description": "A list of a shop's segment migrations.", "not_nullable": false}], "examples": []}, {"name": "SegmentStatistics", "description": "The statistics of a given segment.", "fields_and_connections": [{"name": "attributeStatistics", "type": "SegmentAttributeStatistics!", "description": "The statistics of a given attribute.", "not_nullable": true}], "examples": []}, {"name": "SegmentStringFilter", "description": "A filter with a string that's been added to a segment query.", "fields_and_connections": [{"name": "localizedName", "type": "SegmentFilter", "description": "The localized name of the filter.", "not_nullable": false}], "examples": []}, {"name": "SegmentValue", "description": "A list of suggested values associated with an individual segment. A\nsegment is a group of members, such as customers, that meet specific\ncriteria.", "fields_and_connections": [{"name": "localizedValue", "type": "segmentValueSuggestions", "description": "The list of suggested values corresponding to a particular filter for a segment. A segment is a group of members, such as customers, that meet specific criteria.", "not_nullable": false}], "examples": []}, {"name": "TaxAppConfiguration", "description": "Tax app configuration of a merchant.", "fields_and_connections": [{"name": "state", "type": "taxAppConfigure", "description": "Allows tax app configurations for tax partners.", "not_nullable": false}], "examples": []}]}, {"name": "Discounts and marketing", "queries": [{"name": "abandonment", "description": "Returns an abandonment by ID.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of the Abandonment to return."}], "returns": [], "examples": []}, {"name": "appDiscountType", "description": "An app discount type.", "arguments": [{"name": "functionId", "type": "String!", "required": false, "description": "The ID for the function providing the app discount type."}], "returns": [], "examples": []}, {"name": "appDiscountTypes", "description": "A list of app discount types installed by apps.", "arguments": [], "returns": [{"name": "AppDiscountType", "type": "[AppDiscountType!]!", "description": "non-null"}, {"name": "AppDiscountType", "type": "[AppDiscountType!]!", "description": "non-null"}, {"name": "AppDiscountType", "type": "[AppDiscountType!]!", "description": "non-null"}, {"name": "AppDiscountType", "type": "[AppDiscountType!]!", "description": "non-null"}, {"name": "AppDiscountType", "type": "[AppDiscountType!]!", "description": ""}, {"name": "AppDiscountType", "type": "[AppDiscountType!]!", "description": "non-null"}, {"name": "AppDiscountType", "type": "[AppDiscountType!]!", "description": "non-null"}, {"name": "AppDiscountType", "type": "[AppDiscountType!]!", "description": "non-null"}, {"name": "AppDiscountType", "type": "[AppDiscountType!]!", "description": "non-null"}, {"name": "AppDiscountType", "type": "[AppDiscountType!]!", "description": "non-null"}], "examples": []}, {"name": "appDiscountTypesNodes", "description": "A list of app discount types installed by apps.", "arguments": [{"name": "after", "type": "String", "required": false, "description": "The elements that come after the specified cursor."}, {"name": "before", "type": "String", "required": false, "description": "The elements that come before the specified cursor."}, {"name": "first", "type": "Int", "required": false, "description": "The first n elements from the paginated list."}, {"name": "last", "type": "Int", "required": false, "description": "The last n elements from the paginated list."}, {"name": "reverse", "type": "Boolean", "required": false, "description": "Reverse the order of the underlying list."}], "returns": [], "examples": []}, {"name": "automaticDiscount", "description": "Returns an automatic discount resource by ID. Use automaticDiscountNode instead.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of the DiscountAutomatic to return."}], "returns": [], "examples": []}, {"name": "automaticDiscountNode", "description": "Returns an automatic discount resource by ID.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of the DiscountAutomaticNode to return."}], "returns": [], "examples": [{"description": "Retrieve a buy X get Y automatic discount by its ID", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `query {\n    automaticDiscountNode(id: \"gid://shopify/DiscountAutomaticNode/1057371284\") {\n      id\n      automaticDiscount {\n        ... on DiscountAutomaticBxgy {\n          title\n          status\n        }\n      }\n    }\n  }`,\n});\n"}, {"description": "Retrieve an automatic discount by its ID", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `query {\n    automaticDiscountNode(id: \"gid://shopify/DiscountAutomaticNode/1057371285\") {\n      id\n      automaticDiscount {\n        ... on DiscountAutomaticApp {\n          title\n          status\n        }\n      }\n    }\n  }`,\n});\n"}]}, {"name": "automaticDiscountNodes", "description": "Returns a list of automatic discounts.", "arguments": [{"name": "after", "type": "String", "required": false, "description": "The elements that come after the specified cursor."}, {"name": "before", "type": "String", "required": false, "description": "The elements that come before the specified cursor."}, {"name": "first", "type": "Int", "required": false, "description": "The first n elements from the paginated list."}, {"name": "last", "type": "Int", "required": false, "description": "The last n elements from the paginated list."}, {"name": "query", "type": "String", "required": false, "description": "A filter made up of terms, connectives, modifiers, and comparators.\nYou can apply one or more filters to a query. Learn more about Shopify API search syntax."}, {"name": "reverse", "type": "Boolean", "required": false, "description": "Reverse the order of the underlying list."}, {"name": "savedSearchId", "type": "ID", "required": false, "description": "The ID of a saved search.\nThe search\u2019s query string is used as the query argument."}, {"name": "sortKey", "type": "AutomaticDiscountSortKeys", "required": false, "description": "Sort the underlying list using a key. If your query is slow or returns an error, then try specifying a sort key that matches the field used in the search."}], "returns": [], "examples": [{"description": "Query a list of automatic discounts", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `query {\n    automaticDiscountNodes(first: 2) {\n      edges {\n        node {\n          id\n          automaticDiscount {\n            ... on DiscountAutomaticBasic {\n              title\n              status\n            }\n            ... on DiscountAutomaticBxgy {\n              title\n              status\n            }\n          }\n        }\n      }\n    }\n  }`,\n});\n"}, {"description": "Query automatic discounts with pagination and filtering", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `query {\n    automaticDiscountNodes(first: 1, query: \"status:active\") {\n      nodes {\n        id\n        automaticDiscount {\n          ... on DiscountAutomaticBxgy {\n            title\n            status\n          }\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n    }\n  }`,\n});\n"}]}, {"name": "automaticDiscounts", "description": "List of automatic discounts. Use automaticDiscountNodes instead.", "arguments": [{"name": "after", "type": "String", "required": false, "description": "The elements that come after the specified cursor."}, {"name": "before", "type": "String", "required": false, "description": "The elements that come before the specified cursor."}, {"name": "first", "type": "Int", "required": false, "description": "The first n elements from the paginated list."}, {"name": "last", "type": "Int", "required": false, "description": "The last n elements from the paginated list."}, {"name": "query", "type": "String", "required": false, "description": "A filter made up of terms, connectives, modifiers, and comparators.\nYou can apply one or more filters to a query. Learn more about Shopify API search syntax."}, {"name": "reverse", "type": "Boolean", "required": false, "description": "Reverse the order of the underlying list."}, {"name": "savedSearchId", "type": "ID", "required": false, "description": "The ID of a saved search.\nThe search\u2019s query string is used as the query argument."}, {"name": "sortKey", "type": "AutomaticDiscountSortKeys", "required": false, "description": "Sort the underlying list using a key. If your query is slow or returns an error, then try specifying a sort key that matches the field used in the search."}], "returns": [], "examples": []}, {"name": "automaticDiscountSavedSearches", "description": "List of the shop's automatic discount saved searches.", "arguments": [{"name": "after", "type": "String", "required": false, "description": "The elements that come after the specified cursor."}, {"name": "before", "type": "String", "required": false, "description": "The elements that come before the specified cursor."}, {"name": "first", "type": "Int", "required": false, "description": "The first n elements from the paginated list."}, {"name": "last", "type": "Int", "required": false, "description": "The last n elements from the paginated list."}, {"name": "reverse", "type": "Boolean", "required": false, "description": "Reverse the order of the underlying list."}], "returns": [], "examples": []}, {"name": "codeDiscountNode", "description": "Returns a code discount resource by ID.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of the DiscountCodeNode to return."}], "returns": [], "examples": [{"description": "Query a code discount by its ID", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `query {\n    codeDiscountNode(id: \"gid://shopify/DiscountCodeNode/206265824\") {\n      id\n      codeDiscount {\n        ... on DiscountCodeBasic {\n          title\n          summary\n          codes(first: 1) {\n            nodes {\n              code\n              id\n            }\n          }\n        }\n      }\n    }\n  }`,\n});\n"}, {"description": "Querying a non-existent code discount returns null", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `query {\n    codeDiscountNode(id: \"gid://shopify/DiscountCodeNode/999999\") {\n      id\n      codeDiscount {\n        ... on DiscountCodeBasic {\n          title\n        }\n      }\n    }\n  }`,\n});\n"}]}, {"name": "codeDiscountNodeByCode", "description": "Returns a code discount identified by its discount code.", "arguments": [{"name": "code", "type": "String!", "required": false, "description": "The case-insensitive code of the DiscountCodeNode to return."}], "returns": [], "examples": []}, {"name": "codeDiscountNodes", "description": "Returns a list of code-based discounts.", "arguments": [{"name": "after", "type": "String", "required": false, "description": "The elements that come after the specified cursor."}, {"name": "before", "type": "String", "required": false, "description": "The elements that come before the specified cursor."}, {"name": "first", "type": "Int", "required": false, "description": "The first n elements from the paginated list."}, {"name": "last", "type": "Int", "required": false, "description": "The last n elements from the paginated list."}, {"name": "query", "type": "String", "required": false, "description": "A filter made up of terms, connectives, modifiers, and comparators.\nYou can apply one or more filters to a query. Learn more about Shopify API search syntax."}, {"name": "reverse", "type": "Boolean", "required": false, "description": "Reverse the order of the underlying list."}, {"name": "savedSearchId", "type": "ID", "required": false, "description": "The ID of a saved search.\nThe search\u2019s query string is used as the query argument."}, {"name": "sortKey", "type": "CodeDiscountSortKeys", "required": false, "description": "Sort the underlying list using a key. If your query is slow or returns an error, then try specifying a sort key that matches the field used in the search."}], "returns": [], "examples": [{"description": "Retrieve a list of code discounts", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `query {\n    codeDiscountNodes(first: 3) {\n      nodes {\n        id\n        codeDiscount {\n          ... on DiscountCodeBasic {\n            title\n            summary\n          }\n          ... on DiscountCodeBxgy {\n            title\n            codesCount {\n              count\n            }\n          }\n        }\n      }\n    }\n  }`,\n});\n"}, {"description": "Retrieve code discounts by discount type", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `query {\n    codeDiscountNodes(first: 1, query: \"value_type:fixed_amount\") {\n      nodes {\n        id\n        codeDiscount {\n          ... on DiscountCodeBasic {\n            title\n            codes(first: 1) {\n              nodes {\n                code\n              }\n            }\n          }\n        }\n      }\n    }\n  }`,\n});\n"}]}, {"name": "codeDiscountSavedSearches", "description": "List of the shop's code discount saved searches.", "arguments": [{"name": "after", "type": "String", "required": false, "description": "The elements that come after the specified cursor."}, {"name": "before", "type": "String", "required": false, "description": "The elements that come before the specified cursor."}, {"name": "first", "type": "Int", "required": false, "description": "The first n elements from the paginated list."}, {"name": "last", "type": "Int", "required": false, "description": "The last n elements from the paginated list."}, {"name": "reverse", "type": "Boolean", "required": false, "description": "Reverse the order of the underlying list."}], "returns": [], "examples": []}, {"name": "discountCodesCount", "description": "The total number of discount codes for the shop.", "arguments": [{"name": "query", "type": "String", "required": false, "description": "A filter made up of terms, connectives, modifiers, and comparators.\nYou can apply one or more filters to a query. Learn more about Shopify API search syntax."}], "returns": [], "examples": [{"description": "Retrieve the number of discount codes used more than once", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `query discountCodesCount($query: String!) {\n      discountCodesCount(query: $query) {\n        count\n      }\n    }`,\n    \"variables\": {\n      \"query\": \"times_used:>1\"\n    },\n  },\n});\n"}, {"description": "Retrieve the number of discount codes used within a range", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `query discountCodesCount($query: String!) {\n      discountCodesCount(query: $query) {\n        count\n      }\n    }`,\n    \"variables\": {\n      \"query\": \"times_used:>1 AND times_used:<4\"\n    },\n  },\n});\n"}, {"description": "Retrieve the number of unused discount codes", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `query discountCodesCount($query: String!) {\n      discountCodesCount(query: $query) {\n        count\n      }\n    }`,\n    \"variables\": {\n      \"query\": \"times_used:0\"\n    },\n  },\n});\n"}, {"description": "Retrieve the total number of discount codes", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `query discountCodesCount {\n    discountCodesCount {\n      count\n    }\n  }`,\n});\n"}, {"description": "Retrieves a count of discount codes for a shop", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `query DiscountRedeemCodeCount {\n    discountCodesCount {\n      count\n    }\n  }`,\n});\n"}]}, {"name": "discountNode", "description": "Returns a discount resource by ID.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of the DiscountNode to return."}], "returns": [], "examples": [{"description": "Querying a non-existent discount returns null", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `query {\n    discountNode(id: \"gid://shopify/DiscountNode/999999999\") {\n      id\n    }\n  }`,\n});\n"}, {"description": "Retrieve a discount by its ID", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `query {\n    discountNode(id: \"gid://shopify/DiscountAutomaticNode/299501151\") {\n      id\n      discount {\n        ... on DiscountCodeBasic {\n          title\n          summary\n          status\n          codes(first: 1) {\n            nodes {\n              code\n            }\n          }\n        }\n        ... on DiscountAutomaticBasic {\n          title\n          summary\n          status\n        }\n        ... on DiscountCodeBxgy {\n          title\n          summary\n          status\n          codes(first: 1) {\n            nodes {\n              code\n            }\n          }\n        }\n        ... on DiscountAutomaticBxgy {\n          title\n          summary\n          status\n        }\n        ... on DiscountCodeFreeShipping {\n          title\n          summary\n          status\n          codes(first: 1) {\n            nodes {\n              code\n            }\n          }\n        }\n        ... on DiscountCodeApp {\n          title\n          status\n          appDiscountType {\n            title\n          }\n          codes(first: 1) {\n            nodes {\n              code\n            }\n          }\n        }\n        ... on DiscountAutomaticApp {\n          title\n          status\n          appDiscountType {\n            title\n          }\n        }\n      }\n    }\n  }`,\n});\n"}]}, {"name": "discountNodes", "description": "Returns a list of discounts.", "arguments": [{"name": "after", "type": "String", "required": false, "description": "The elements that come after the specified cursor."}, {"name": "before", "type": "String", "required": false, "description": "The elements that come before the specified cursor."}, {"name": "first", "type": "Int", "required": false, "description": "The first n elements from the paginated list."}, {"name": "last", "type": "Int", "required": false, "description": "The last n elements from the paginated list."}, {"name": "query", "type": "String", "required": false, "description": "A filter made up of terms, connectives, modifiers, and comparators.\nYou can apply one or more filters to a query. Learn more about Shopify API search syntax."}, {"name": "reverse", "type": "Boolean", "required": false, "description": "Reverse the order of the underlying list."}, {"name": "savedSearchId", "type": "ID", "required": false, "description": "The ID of a saved search.\nThe search\u2019s query string is used as the query argument."}, {"name": "sortKey", "type": "DiscountSortKeys", "required": false, "description": "Sort the underlying list using a key. If your query is slow or returns an error, then try specifying a sort key that matches the field used in the search."}], "returns": [], "examples": [{"description": "Retrieve a list of discounts", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `query {\n    discountNodes(first: 5) {\n      edges {\n        node {\n          id\n          __typename\n          discount {\n            ... on DiscountCodeBasic {\n              title\n              summary\n              status\n            }\n            ... on DiscountAutomaticBasic {\n              title\n              summary\n              status\n            }\n            ... on DiscountCodeBxgy {\n              title\n              summary\n              status\n            }\n            ... on DiscountAutomaticBxgy {\n              title\n              summary\n              status\n            }\n            ... on DiscountCodeFreeShipping {\n              title\n              summary\n              status\n            }\n            ... on DiscountAutomaticApp {\n              title\n              status\n              appDiscountType {\n                functionId\n              }\n            }\n          }\n        }\n      }\n    }\n  }`,\n});\n"}]}, {"name": "discountNodesCount", "description": "The total number of discounts for the shop. Limited to a maximum of 10000.", "arguments": [{"name": "query", "type": "String", "required": false, "description": "A filter made up of terms, connectives, modifiers, and comparators.\nYou can apply one or more filters to a query. Learn more about Shopify API search syntax."}, {"name": "savedSearchId", "type": "ID", "required": false, "description": "The ID of an existing saved search.\nThe search\u2019s query string is used as the query argument.\nRefer to the SavedSearch object."}], "returns": [], "examples": [{"description": "Retrieve the number of discounts used more than once", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `query discountNodesCount($query: String!) {\n      discountNodesCount(query: $query) {\n        count\n        precision\n      }\n    }`,\n    \"variables\": {\n      \"query\": \"times_used:>1\"\n    },\n  },\n});\n"}, {"description": "Retrieve the number of discounts used within a range", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `query discountNodesCount($query: String!) {\n      discountNodesCount(query: $query) {\n        count\n        precision\n      }\n    }`,\n    \"variables\": {\n      \"query\": \"times_used:>1 AND times_used:<4\"\n    },\n  },\n});\n"}, {"description": "Retrieve the number of unused discounts", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `query discountNodesCount($query: String!) {\n      discountNodesCount(query: $query) {\n        count\n        precision\n      }\n    }`,\n    \"variables\": {\n      \"query\": \"times_used:0\"\n    },\n  },\n});\n"}, {"description": "Retrieve the total number of discounts", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `query discountNodesCount {\n    discountNodesCount {\n      count\n      precision\n    }\n  }`,\n});\n"}, {"description": "Retrieves a count of all price rules", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `query DiscountCount {\n    discountNodesCount {\n      count\n      precision\n    }\n  }`,\n});\n"}]}, {"name": "discountRedeemCodeBulkCreation", "description": "Returns a bulk code creation resource by ID.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of the DiscountRedeemCodeBulkCreation to return."}], "returns": [], "examples": [{"description": "Retrieves a discount code creation job", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `query DiscountRedeemCodeBulkShow($id: ID!) {\n      discountRedeemCodeBulkCreation(id: $id) {\n        id\n        createdAt\n        discountCode {\n          id\n        }\n        done\n        codesCount\n        importedCount\n        failedCount\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/DiscountRedeemCodeBulkCreation/989355202\"\n    },\n  },\n});\n"}, {"description": "Retrieves a list of discount codes for a discount code creation job", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `query DiscountRedeemCodeBulkShow($id: ID!) {\n      discountRedeemCodeBulkCreation(id: $id) {\n        id\n        createdAt\n        discountCode {\n          id\n        }\n        codes(first: 10) {\n          nodes {\n            discountRedeemCode {\n              code\n            }\n            errors {\n              message\n              field\n              extraInfo\n              code\n            }\n          }\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/DiscountRedeemCodeBulkCreation/989355205\"\n    },\n  },\n});\n"}]}, {"name": "discountRedeemCodeSavedSearches", "description": "List of the shop's redeemed discount code saved searches.", "arguments": [{"name": "after", "type": "String", "required": false, "description": "The elements that come after the specified cursor."}, {"name": "before", "type": "String", "required": false, "description": "The elements that come before the specified cursor."}, {"name": "first", "type": "Int", "required": false, "description": "The first n elements from the paginated list."}, {"name": "last", "type": "Int", "required": false, "description": "The last n elements from the paginated list."}, {"name": "query", "type": "String", "required": false, "description": "A filter made up of terms, connectives, modifiers, and comparators.\nYou can apply one or more filters to a query. Learn more about Shopify API search syntax."}, {"name": "reverse", "type": "Boolean", "required": false, "description": "Reverse the order of the underlying list."}, {"name": "sortKey", "type": "DiscountCodeSortKeys", "required": false, "description": "Sort the underlying list using a key. If your query is slow or returns an error, then try specifying a sort key that matches the field used in the search."}], "returns": [], "examples": []}, {"name": "marketingActivities", "description": "A list of marketing activities associated with the marketing app.", "arguments": [{"name": "after", "type": "String", "required": false, "description": "The elements that come after the specified cursor."}, {"name": "before", "type": "String", "required": false, "description": "The elements that come before the specified cursor."}, {"name": "first", "type": "Int", "required": false, "description": "The first n elements from the paginated list."}, {"name": "last", "type": "Int", "required": false, "description": "The last n elements from the paginated list."}, {"name": "marketingActivityIds", "type": "[ID!]", "required": false, "description": "The list of marketing activity IDs to filter by."}, {"name": "query", "type": "String", "required": false, "description": "A filter made up of terms, connectives, modifiers, and comparators.\nYou can apply one or more filters to a query. Learn more about Shopify API search syntax."}, {"name": "remoteIds", "type": "[String!]", "required": false, "description": "The list of remote IDs associated with marketing activities to filter by."}, {"name": "reverse", "type": "Boolean", "required": false, "description": "Reverse the order of the underlying list."}, {"name": "savedSearchId", "type": "ID", "required": false, "description": "The ID of a saved search.\nThe search\u2019s query string is used as the query argument."}, {"name": "sortKey", "type": "MarketingActivitySortKeys", "required": false, "description": "Sort the underlying list using a key. If your query is slow or returns an error, then try specifying a sort key that matches the field used in the search."}, {"name": "utm", "type": "UTMInput", "required": false, "description": "The UTM parameters associated with marketing activities to filter by."}], "returns": [], "examples": []}, {"name": "marketingActivity", "description": "Returns a MarketingActivity resource by ID.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of the MarketingActivity to return."}], "returns": [], "examples": []}, {"name": "marketingEvent", "description": "Returns a MarketingEvent resource by ID.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of the MarketingEvent to return."}], "returns": [], "examples": []}, {"name": "marketingEvents", "description": "A list of marketing events associated with the marketing app.", "arguments": [{"name": "after", "type": "String", "required": false, "description": "The elements that come after the specified cursor."}, {"name": "before", "type": "String", "required": false, "description": "The elements that come before the specified cursor."}, {"name": "first", "type": "Int", "required": false, "description": "The first n elements from the paginated list."}, {"name": "last", "type": "Int", "required": false, "description": "The last n elements from the paginated list."}, {"name": "query", "type": "String", "required": false, "description": "A filter made up of terms, connectives, modifiers, and comparators.\nYou can apply one or more filters to a query. Learn more about Shopify API search syntax."}, {"name": "reverse", "type": "Boolean", "required": false, "description": "Reverse the order of the underlying list."}, {"name": "sortKey", "type": "MarketingEventSortKeys", "required": false, "description": "Sort the underlying list using a key. If your query is slow or returns an error, then try specifying a sort key that matches the field used in the search."}], "returns": [], "examples": []}, {"name": "serverPixel", "description": "The server pixel configured by the app.", "arguments": [], "returns": [{"name": "ServerPixel", "type": "ServerPixel", "description": "non-null"}, {"name": "ServerPixel", "type": "ServerPixel", "description": "non-null"}, {"name": "ServerPixel", "type": "ServerPixel", "description": ""}, {"name": "ServerPixel", "type": "ServerPixel", "description": ""}], "examples": []}, {"name": "webPixel", "description": "Returns a\nweb pixel\nby ID.", "arguments": [{"name": "id", "type": "ID", "required": false, "description": "The ID of the WebPixel object to return."}], "returns": [], "examples": [{"description": "Query a web pixel", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `query {\n    webPixel {\n      id\n      settings\n    }\n  }`,\n});\n"}, {"description": "Query a web pixel by its ID", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `query {\n    webPixel(id: \"gid://shopify/WebPixel/845285844\") {\n      id\n      settings\n    }\n  }`,\n});\n"}]}], "mutations": [{"name": "abandonmentEmailStateUpdate", "description": "Updates the email state value for an abandonment. Use abandonmentUpdateActivitiesDeliveryStatuses instead.", "arguments": [{"name": "emailSentAt", "type": "DateTime", "required": false, "description": "The date and time for when the email was sent, if that is the case."}, {"name": "emailState", "type": "AbandonmentEmailState!", "required": false, "description": "The new email state of the abandonment."}, {"name": "emailStateChangeReason", "type": "String", "required": false, "description": "The reason why the email was or was not sent."}, {"name": "id", "type": "ID!", "required": false, "description": "The ID of the abandonment that needs to be updated."}], "returns": [], "examples": []}, {"name": "abandonmentUpdateActivitiesDeliveryStatuses", "description": "Updates the marketing activities delivery statuses for an abandonment.", "arguments": [{"name": "abandonmentId", "type": "ID!", "required": false, "description": "The ID of the abandonment that needs to be updated."}, {"name": "deliveredAt", "type": "DateTime", "required": false, "description": "The delivery timestamp if the activity delivered."}, {"name": "deliveryStatus", "type": "AbandonmentDeliveryState!", "required": false, "description": "The new delivery status of the marketing activity for this abandonment."}, {"name": "deliveryStatusChangeReason", "type": "String", "required": false, "description": "The reason why the activity was or was not delivered."}, {"name": "marketingActivityId", "type": "ID!", "required": false, "description": "The ID of the marketing activity that needs to be updated."}], "returns": [], "examples": []}, {"name": "discountAutomaticActivate", "description": "Activates an automatic discount.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of the automatic discount to activate."}], "returns": [], "examples": [{"description": "Activate an automatic discount set to start in the future", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation discountAutomaticActivate($id: ID!) {\n      discountAutomaticActivate(id: $id) {\n        automaticDiscountNode {\n          automaticDiscount {\n            ... on DiscountAutomaticBxgy {\n              status\n              startsAt\n              endsAt\n            }\n          }\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/DiscountAutomaticNode/198286294\"\n    },\n  },\n});\n"}, {"description": "Activate an expired automatic discount", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation discountAutomaticActivate($id: ID!) {\n      discountAutomaticActivate(id: $id) {\n        automaticDiscountNode {\n          automaticDiscount {\n            ... on DiscountAutomaticBxgy {\n              status\n              startsAt\n              endsAt\n            }\n          }\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/DiscountAutomaticNode/198286294\"\n    },\n  },\n});\n"}, {"description": "discountAutomaticActivate reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation discountAutomaticActivate($id: ID!) {\n      discountAutomaticActivate(id: $id) {\n        automaticDiscountNode {\n          automaticDiscount {\n            ... on DiscountAutomaticBxgy {\n              status\n              startsAt\n              endsAt\n            }\n          }\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/DiscountAutomaticNode/198286294\"\n    },\n  },\n});\n"}]}, {"name": "discountAutomaticAppCreate", "description": "Creates an automatic discount that's managed by an app.\nUse this mutation with Shopify Functions\nwhen you need advanced, custom, or dynamic discount capabilities that aren't supported by\nShopify's native discount types.\nFor example, use this mutation to create an automatic discount using an app's\n\"Volume\" discount type that applies a percentage\noff when customers purchase more than the minimum quantity of a product. For an example implementation,\nrefer to our tutorial.\nNoteTo create code discounts with custom logic, use the\ndiscountCodeAppCreate\nmutation.", "arguments": [{"name": "automaticAppDiscount", "type": "DiscountAutomaticAppInput!", "required": false, "description": "The input data used to create the automatic discount."}], "returns": [], "examples": [{"description": "discountAutomaticAppCreate reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation discountAutomaticAppCreate($automaticAppDiscount: DiscountAutomaticAppInput!) {\n      discountAutomaticAppCreate(automaticAppDiscount: $automaticAppDiscount) {\n        userErrors {\n          field\n          message\n        }\n        automaticAppDiscount {\n          discountId\n          title\n          startsAt\n          endsAt\n          status\n          appDiscountType {\n            appKey\n            functionId\n          }\n          combinesWith {\n            orderDiscounts\n            productDiscounts\n            shippingDiscounts\n          }\n        }\n      }\n    }`,\n    \"variables\": {\n      \"automaticAppDiscount\": {\n        \"title\": \"$5 discount\",\n        \"functionId\": \"de7a6b74-5ac7-432f-8d5b-98dd14fb8af5\",\n        \"startsAt\": \"2025-02-02T17:09:21Z\",\n        \"endsAt\": \"2025-02-02T17:09:21Z\",\n        \"combinesWith\": {\n          \"orderDiscounts\": false,\n          \"productDiscounts\": false,\n          \"shippingDiscounts\": false\n        },\n        \"metafields\": [\n          {\n            \"namespace\": \"default\",\n            \"key\": \"function-configuration\",\n            \"type\": \"json\",\n            \"value\": \"{\\n  \\\"discounts\\\": [{\\n    \\\"value\\\": {\\\"fixedAmount\\\": {\\\"amount\\\": 5}},\\n    \\\"targets\\\": [{\\\"orderSubtotal\\\": {\\\"excludedVariantIds\\\": []}}]\\n  }],\\n  \\\"discountApplicationStrategy\\\": \\\"FIRST\\\"\\n}\"\n          }\n        ]\n      }\n    },\n  },\n});\n"}]}, {"name": "discountAutomaticAppUpdate", "description": "Updates an existing automatic discount that's managed by an app using\nShopify Functions.\nUse this mutation when you need advanced, custom, or\ndynamic discount capabilities that aren't supported by\nShopify's native discount types.\nFor example, use this mutation to update a new \"Volume\" discount type that applies a percentage\noff when customers purchase more than the minimum quantity of a product. For an example implementation,\nrefer to our tutorial.\nNoteTo update code discounts with custom logic, use the\ndiscountCodeAppUpdate\nmutation instead.", "arguments": [{"name": "automaticAppDiscount", "type": "DiscountAutomaticAppInput!", "required": false, "description": "The input fields required to update the automatic discount."}, {"name": "id", "type": "ID!", "required": false, "description": "The ID of the automatic discount to update."}], "returns": [], "examples": [{"description": "Update an app-managed automatic discount title", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation discountAutomaticAppUpdate($automaticAppDiscount: DiscountAutomaticAppInput!, $id: ID!) {\n      discountAutomaticAppUpdate(automaticAppDiscount: $automaticAppDiscount, id: $id) {\n        automaticAppDiscount {\n          title\n          status\n          appDiscountType {\n            appKey\n            functionId\n          }\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/DiscountAutomaticNode/159339796\",\n      \"automaticAppDiscount\": {\n        \"title\": \"$5 discount\"\n      }\n    },\n  },\n});\n"}, {"description": "Update the date range of an app-managed automatic discount", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation discountAutomaticAppUpdate($automaticAppDiscount: DiscountAutomaticAppInput!, $id: ID!) {\n      discountAutomaticAppUpdate(automaticAppDiscount: $automaticAppDiscount, id: $id) {\n        automaticAppDiscount {\n          title\n          startsAt\n          endsAt\n          status\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/DiscountAutomaticNode/159339796\",\n      \"automaticAppDiscount\": {\n        \"startsAt\": \"2025-01-01T00:00:00Z\",\n        \"endsAt\": \"2025-09-30T23:59:59Z\"\n      }\n    },\n  },\n});\n"}, {"description": "discountAutomaticAppUpdate reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation discountAutomaticAppUpdate($automaticAppDiscount: DiscountAutomaticAppInput!, $id: ID!) {\n      discountAutomaticAppUpdate(automaticAppDiscount: $automaticAppDiscount, id: $id) {\n        automaticAppDiscount {\n          title\n          status\n          appDiscountType {\n            appKey\n            functionId\n          }\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/DiscountAutomaticNode/159339796\",\n      \"automaticAppDiscount\": {\n        \"title\": \"$5 discount\"\n      }\n    },\n  },\n});\n"}]}, {"name": "discountAutomaticBasicCreate", "description": "Creates an\namount off discount\nthat's automatically applied on a cart and at checkout.\nNoteTo create code discounts, use the\ndiscountCodeBasicCreate\nmutation.", "arguments": [{"name": "automaticBasicDiscount", "type": "DiscountAutomaticBasicInput!", "required": false, "description": "The input data used to create the automatic amount off discount."}], "returns": [], "examples": [{"description": "Create a combinable automatic discount", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation discountAutomaticBasicCreate($automaticBasicDiscount: DiscountAutomaticBasicInput!) {\n      discountAutomaticBasicCreate(automaticBasicDiscount: $automaticBasicDiscount) {\n        automaticDiscountNode {\n          id\n          automaticDiscount {\n            ... on DiscountAutomaticBasic {\n              title\n              startsAt\n              combinesWith {\n                productDiscounts\n                shippingDiscounts\n                orderDiscounts\n              }\n              minimumRequirement {\n                ... on DiscountMinimumSubtotal {\n                  greaterThanOrEqualToSubtotal {\n                    amount\n                    currencyCode\n                  }\n                }\n              }\n              customerGets {\n                value {\n                  ... on DiscountAmount {\n                    amount {\n                      amount\n                      currencyCode\n                    }\n                  }\n                }\n                items {\n                  ... on AllDiscountItems {\n                    allItems\n                  }\n                }\n              }\n            }\n          }\n        }\n        userErrors {\n          field\n          code\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"automaticBasicDiscount\": {\n        \"title\": \"$10 off orders over $100 (combinable with shipping discounts)\",\n        \"startsAt\": \"2025-01-07T01:28:55-05:00\",\n        \"minimumRequirement\": {\n          \"subtotal\": {\n            \"greaterThanOrEqualToSubtotal\": \"100.00\"\n          }\n        },\n        \"customerGets\": {\n          \"value\": {\n            \"discountAmount\": {\n              \"amount\": \"10.00\",\n              \"appliesOnEachItem\": false\n            }\n          },\n          \"items\": {\n            \"all\": true\n          }\n        },\n        \"combinesWith\": {\n          \"productDiscounts\": false,\n          \"shippingDiscounts\": true,\n          \"orderDiscounts\": false\n        }\n      }\n    },\n  },\n});\n"}, {"description": "Create a fixed amount off discount", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation discountAutomaticBasicCreate($automaticBasicDiscount: DiscountAutomaticBasicInput!) {\n      discountAutomaticBasicCreate(automaticBasicDiscount: $automaticBasicDiscount) {\n        automaticDiscountNode {\n          id\n          automaticDiscount {\n            ... on DiscountAutomaticBasic {\n              startsAt\n              endsAt\n              minimumRequirement {\n                ... on DiscountMinimumSubtotal {\n                  greaterThanOrEqualToSubtotal {\n                    amount\n                    currencyCode\n                  }\n                }\n              }\n              customerGets {\n                value {\n                  ... on DiscountAmount {\n                    amount {\n                      amount\n                      currencyCode\n                    }\n                    appliesOnEachItem\n                  }\n                }\n                items {\n                  ... on AllDiscountItems {\n                    allItems\n                  }\n                }\n              }\n            }\n          }\n        }\n        userErrors {\n          field\n          code\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"automaticBasicDiscount\": {\n        \"title\": \"$50 off all orders over $200 (June - September 2025)\",\n        \"startsAt\": \"2025-06-01T00:00:00Z\",\n        \"endsAt\": \"2025-09-30T00:00:00Z\",\n        \"minimumRequirement\": {\n          \"subtotal\": {\n            \"greaterThanOrEqualToSubtotal\": \"200.00\"\n          }\n        },\n        \"customerGets\": {\n          \"value\": {\n            \"discountAmount\": {\n              \"amount\": \"50.00\",\n              \"appliesOnEachItem\": false\n            }\n          },\n          \"items\": {\n            \"all\": true\n          }\n        }\n      }\n    },\n  },\n});\n"}, {"description": "Create a percentage off discount with a minimum purchase", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation discountAutomaticBasicCreate($automaticBasicDiscount: DiscountAutomaticBasicInput!) {\n      discountAutomaticBasicCreate(automaticBasicDiscount: $automaticBasicDiscount) {\n        automaticDiscountNode {\n          id\n          automaticDiscount {\n            ... on DiscountAutomaticBasic {\n              title\n              startsAt\n              minimumRequirement {\n                ... on DiscountMinimumSubtotal {\n                  greaterThanOrEqualToSubtotal {\n                    amount\n                    currencyCode\n                  }\n                }\n              }\n              customerGets {\n                value {\n                  ... on DiscountPercentage {\n                    percentage\n                  }\n                }\n                items {\n                  ... on AllDiscountItems {\n                    allItems\n                  }\n                }\n              }\n            }\n          }\n        }\n        userErrors {\n          field\n          code\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"automaticBasicDiscount\": {\n        \"title\": \"15% off orders over $50\",\n        \"startsAt\": \"2024-01-01T00:00:00Z\",\n        \"minimumRequirement\": {\n          \"subtotal\": {\n            \"greaterThanOrEqualToSubtotal\": \"50.00\"\n          }\n        },\n        \"customerGets\": {\n          \"value\": {\n            \"percentage\": 0.15\n          },\n          \"items\": {\n            \"all\": true\n          }\n        }\n      }\n    },\n  },\n});\n"}, {"description": "discountAutomaticBasicCreate reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation discountAutomaticBasicCreate($automaticBasicDiscount: DiscountAutomaticBasicInput!) {\n      discountAutomaticBasicCreate(automaticBasicDiscount: $automaticBasicDiscount) {\n        automaticDiscountNode {\n          id\n          automaticDiscount {\n            ... on DiscountAutomaticBasic {\n              title\n              startsAt\n              combinesWith {\n                productDiscounts\n                shippingDiscounts\n                orderDiscounts\n              }\n              minimumRequirement {\n                ... on DiscountMinimumSubtotal {\n                  greaterThanOrEqualToSubtotal {\n                    amount\n                    currencyCode\n                  }\n                }\n              }\n              customerGets {\n                value {\n                  ... on DiscountAmount {\n                    amount {\n                      amount\n                      currencyCode\n                    }\n                  }\n                }\n                items {\n                  ... on AllDiscountItems {\n                    allItems\n                  }\n                }\n              }\n            }\n          }\n        }\n        userErrors {\n          field\n          code\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"automaticBasicDiscount\": {\n        \"title\": \"$10 off orders over $100 (combinable with shipping discounts)\",\n        \"startsAt\": \"2025-01-07T01:28:55-05:00\",\n        \"minimumRequirement\": {\n          \"subtotal\": {\n            \"greaterThanOrEqualToSubtotal\": \"100.00\"\n          }\n        },\n        \"customerGets\": {\n          \"value\": {\n            \"discountAmount\": {\n              \"amount\": \"10.00\",\n              \"appliesOnEachItem\": false\n            }\n          },\n          \"items\": {\n            \"all\": true\n          }\n        },\n        \"combinesWith\": {\n          \"productDiscounts\": false,\n          \"shippingDiscounts\": true,\n          \"orderDiscounts\": false\n        }\n      }\n    },\n  },\n});\n"}]}, {"name": "discountAutomaticBasicUpdate", "description": "Updates an existing\namount off discount\nthat's automatically applied on a cart and at checkout.\nNoteTo update code discounts, use the\ndiscountCodeBasicUpdate\nmutation instead.", "arguments": [{"name": "automaticBasicDiscount", "type": "DiscountAutomaticBasicInput!", "required": false, "description": "The input data used to update the automatic amount off discount."}, {"name": "id", "type": "ID!", "required": false, "description": "The ID of the automatic amount off discount to update."}], "returns": [], "examples": []}, {"name": "discountAutomaticBulkDelete", "description": "Asynchronously delete automatic discounts in bulk if a search or saved_search_id argument is provided or if a\nmaximum discount threshold is reached (1,000). Otherwise, deletions will occur inline.\nWarning: All automatic discounts will be deleted if a blank search argument is provided.", "arguments": [{"name": "ids", "type": "[ID!]", "required": false, "description": "The IDs of the automatic discounts to delete."}, {"name": "savedSearchId", "type": "ID", "required": false, "description": "The ID of the saved search to use for filtering automatic discounts to delete."}, {"name": "search", "type": "String", "required": false, "description": "The search query for filtering automatic discounts to delete.\nFor more information on the list of supported fields and search syntax, refer to the AutomaticDiscountNodes query section."}], "returns": [], "examples": [{"description": "Asynchronously delete automatic discounts in bulk using a search filter", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation discountAutomaticBulkDelete($search: String) {\n      discountAutomaticBulkDelete(search: $search) {\n        job {\n          id\n        }\n        userErrors {\n          code\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"search\": \"type:percentage status:expired\"\n    },\n  },\n});\n"}, {"description": "Using more than one targeting argument returns an error", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation discountAutomaticBulkDelete($search: String, $ids: [ID!]) {\n      discountAutomaticBulkDelete(search: $search, ids: $ids) {\n        job {\n          id\n        }\n        userErrors {\n          code\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"ids\": [\n        \"gid://shopify/DiscountAutomaticNode/1\"\n      ],\n      \"search\": \"type:bxgy\"\n    },\n  },\n});\n"}, {"description": "discountAutomaticBulkDelete reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation discountAutomaticBulkDelete($search: String) {\n      discountAutomaticBulkDelete(search: $search) {\n        job {\n          id\n        }\n        userErrors {\n          code\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"search\": \"type:percentage status:expired\"\n    },\n  },\n});\n"}]}, {"name": "discountAutomaticBxgyCreate", "description": "Creates a\nbuy X get Y discount (BXGY)\nthat's automatically applied on a cart and at checkout.\nNoteTo create code discounts, use the\ndiscountCodeBxgyCreate\nmutation.", "arguments": [{"name": "automaticBxgyDiscount", "type": "DiscountAutomaticBxgyInput!", "required": false, "description": "The input data used to create the automatic BXGY discount."}], "returns": [], "examples": [{"description": "Create an automatic buy X get Y (BXGY) discount for different products", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation CreateBxgyDiscount($automaticBxgyDiscount: DiscountAutomaticBxgyInput!) {\n      discountAutomaticBxgyCreate(automaticBxgyDiscount: $automaticBxgyDiscount) {\n        automaticDiscountNode {\n          id\n          automaticDiscount {\n            ... on DiscountAutomaticBxgy {\n              title\n              startsAt\n              endsAt\n            }\n          }\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"automaticBxgyDiscount\": {\n        \"title\": \"Buy first product, get second product free\",\n        \"startsAt\": \"2025-01-01T00:00:00Z\",\n        \"endsAt\": \"2025-12-31T23:59:59Z\",\n        \"customerBuys\": {\n          \"items\": {\n            \"products\": {\n              \"productsToAdd\": [\n                \"gid://shopify/Product/108828309\"\n              ]\n            }\n          },\n          \"value\": {\n            \"quantity\": \"1\"\n          }\n        },\n        \"customerGets\": {\n          \"items\": {\n            \"products\": {\n              \"productsToAdd\": [\n                \"gid://shopify/Product/20995642\"\n              ]\n            }\n          },\n          \"value\": {\n            \"discountOnQuantity\": {\n              \"quantity\": \"1\",\n              \"effect\": {\n                \"percentage\": 1.0\n              }\n            }\n          }\n        },\n        \"usesPerOrderLimit\": \"1\"\n      }\n    },\n  },\n});\n"}, {"description": "Create an automatic buy X get Y (BXGY) discount for the same product", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation CreateBxgyDiscount($automaticBxgyDiscount: DiscountAutomaticBxgyInput!) {\n      discountAutomaticBxgyCreate(automaticBxgyDiscount: $automaticBxgyDiscount) {\n        automaticDiscountNode {\n          id\n          automaticDiscount {\n            ... on DiscountAutomaticBxgy {\n              title\n              startsAt\n              endsAt\n            }\n          }\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"automaticBxgyDiscount\": {\n        \"title\": \"Buy first product, get second product free\",\n        \"startsAt\": \"2025-01-01T00:00:00Z\",\n        \"endsAt\": \"2025-12-31T23:59:59Z\",\n        \"customerBuys\": {\n          \"items\": {\n            \"products\": {\n              \"productsToAdd\": [\n                \"gid://shopify/Product/108828309\"\n              ]\n            }\n          },\n          \"value\": {\n            \"quantity\": \"1\"\n          }\n        },\n        \"customerGets\": {\n          \"items\": {\n            \"products\": {\n              \"productsToAdd\": [\n                \"gid://shopify/Product/20995642\"\n              ]\n            }\n          },\n          \"value\": {\n            \"discountOnQuantity\": {\n              \"quantity\": \"1\",\n              \"effect\": {\n                \"percentage\": 1.0\n              }\n            }\n          }\n        },\n        \"usesPerOrderLimit\": \"1\"\n      }\n    },\n  },\n});\n"}, {"description": "discountAutomaticBxgyCreate reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation CreateBxgyDiscount($automaticBxgyDiscount: DiscountAutomaticBxgyInput!) {\n      discountAutomaticBxgyCreate(automaticBxgyDiscount: $automaticBxgyDiscount) {\n        automaticDiscountNode {\n          id\n          automaticDiscount {\n            ... on DiscountAutomaticBxgy {\n              title\n              startsAt\n              endsAt\n            }\n          }\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"automaticBxgyDiscount\": {\n        \"title\": \"Buy first product, get second product free\",\n        \"startsAt\": \"2025-01-01T00:00:00Z\",\n        \"endsAt\": \"2025-12-31T23:59:59Z\",\n        \"customerBuys\": {\n          \"items\": {\n            \"products\": {\n              \"productsToAdd\": [\n                \"gid://shopify/Product/108828309\"\n              ]\n            }\n          },\n          \"value\": {\n            \"quantity\": \"1\"\n          }\n        },\n        \"customerGets\": {\n          \"items\": {\n            \"products\": {\n              \"productsToAdd\": [\n                \"gid://shopify/Product/20995642\"\n              ]\n            }\n          },\n          \"value\": {\n            \"discountOnQuantity\": {\n              \"quantity\": \"1\",\n              \"effect\": {\n                \"percentage\": 1.0\n              }\n            }\n          }\n        },\n        \"usesPerOrderLimit\": \"1\"\n      }\n    },\n  },\n});\n"}]}, {"name": "discountAutomaticBxgyUpdate", "description": "Updates an existing\nbuy X get Y discount (BXGY)\nthat's automatically applied on a cart and at checkout.\nNoteTo update code discounts, use the\ndiscountCodeBxgyUpdate\nmutation instead.", "arguments": [{"name": "automaticBxgyDiscount", "type": "DiscountAutomaticBxgyInput!", "required": false, "description": "The input data used to update the automatic BXGY discount."}, {"name": "id", "type": "ID!", "required": false, "description": "The ID of the automatic BXGY discount to update."}], "returns": [], "examples": [{"description": "Update an automatic buy X get Y (BXGY) discount", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation UpdateBxgyDiscount($id: ID!, $automaticBxgyDiscount: DiscountAutomaticBxgyInput!) {\n      discountAutomaticBxgyUpdate(id: $id, automaticBxgyDiscount: $automaticBxgyDiscount) {\n        automaticDiscountNode {\n          id\n          automaticDiscount {\n            ... on DiscountAutomaticBxgy {\n              title\n              startsAt\n              endsAt\n            }\n          }\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/DiscountAutomaticBxgy/198286294\",\n      \"automaticBxgyDiscount\": {\n        \"title\": \"Buy first product, get second product free\",\n        \"startsAt\": \"2025-01-01T00:00:00Z\",\n        \"endsAt\": \"2025-12-31T23:59:59Z\",\n        \"customerBuys\": {\n          \"items\": {\n            \"products\": {\n              \"productsToAdd\": [\n                \"gid://shopify/Product/108828309\"\n              ]\n            }\n          },\n          \"value\": {\n            \"quantity\": \"1\"\n          }\n        },\n        \"customerGets\": {\n          \"items\": {\n            \"products\": {\n              \"productsToAdd\": [\n                \"gid://shopify/Product/20995642\"\n              ]\n            }\n          },\n          \"value\": {\n            \"discountOnQuantity\": {\n              \"quantity\": \"1\",\n              \"effect\": {\n                \"percentage\": 1.0\n              }\n            }\n          }\n        },\n        \"usesPerOrderLimit\": \"1\"\n      }\n    },\n  },\n});\n"}, {"description": "Updating a BXGY discount with invalid input returns an error", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation discountAutomaticBxgyUpdate($id: ID!, $automaticBxgyDiscount: DiscountAutomaticBxgyInput!) {\n      discountAutomaticBxgyUpdate(id: $id, automaticBxgyDiscount: $automaticBxgyDiscount) {\n        automaticDiscountNode {\n          id\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/DiscountAutomaticBxgy/198286294\",\n      \"automaticBxgyDiscount\": {\n        \"title\": \"Invalid discount percentage\",\n        \"customerGets\": {\n          \"value\": {\n            \"discountOnQuantity\": {\n              \"quantity\": \"1\",\n              \"effect\": {\n                \"percentage\": 1.5\n              }\n            }\n          }\n        }\n      }\n    },\n  },\n});\n"}, {"description": "discountAutomaticBxgyUpdate reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation UpdateBxgyDiscount($id: ID!, $automaticBxgyDiscount: DiscountAutomaticBxgyInput!) {\n      discountAutomaticBxgyUpdate(id: $id, automaticBxgyDiscount: $automaticBxgyDiscount) {\n        automaticDiscountNode {\n          id\n          automaticDiscount {\n            ... on DiscountAutomaticBxgy {\n              title\n              startsAt\n              endsAt\n            }\n          }\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/DiscountAutomaticBxgy/198286294\",\n      \"automaticBxgyDiscount\": {\n        \"title\": \"Buy first product, get second product free\",\n        \"startsAt\": \"2025-01-01T00:00:00Z\",\n        \"endsAt\": \"2025-12-31T23:59:59Z\",\n        \"customerBuys\": {\n          \"items\": {\n            \"products\": {\n              \"productsToAdd\": [\n                \"gid://shopify/Product/108828309\"\n              ]\n            }\n          },\n          \"value\": {\n            \"quantity\": \"1\"\n          }\n        },\n        \"customerGets\": {\n          \"items\": {\n            \"products\": {\n              \"productsToAdd\": [\n                \"gid://shopify/Product/20995642\"\n              ]\n            }\n          },\n          \"value\": {\n            \"discountOnQuantity\": {\n              \"quantity\": \"1\",\n              \"effect\": {\n                \"percentage\": 1.0\n              }\n            }\n          }\n        },\n        \"usesPerOrderLimit\": \"1\"\n      }\n    },\n  },\n});\n"}]}, {"name": "discountAutomaticDeactivate", "description": "Deactivates an automatic discount.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of the automatic discount to deactivate."}], "returns": [], "examples": [{"description": "Deactivate an active automatic discount", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation discountAutomaticDeactivate($id: ID!) {\n      discountAutomaticDeactivate(id: $id) {\n        automaticDiscountNode {\n          automaticDiscount {\n            ... on DiscountAutomaticBxgy {\n              status\n              startsAt\n              endsAt\n            }\n          }\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/DiscountAutomaticNode/198286294\"\n    },\n  },\n});\n"}, {"description": "Deactivate an automatic discount set to start in the future", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation discountAutomaticDeactivate($id: ID!) {\n      discountAutomaticDeactivate(id: $id) {\n        automaticDiscountNode {\n          automaticDiscount {\n            ... on DiscountAutomaticBxgy {\n              status\n              startsAt\n              endsAt\n            }\n          }\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/DiscountAutomaticNode/198286294\"\n    },\n  },\n});\n"}, {"description": "discountAutomaticDeactivate reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation discountAutomaticDeactivate($id: ID!) {\n      discountAutomaticDeactivate(id: $id) {\n        automaticDiscountNode {\n          automaticDiscount {\n            ... on DiscountAutomaticBxgy {\n              status\n              startsAt\n              endsAt\n            }\n          }\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/DiscountAutomaticNode/198286294\"\n    },\n  },\n});\n"}]}, {"name": "discountAutomaticDelete", "description": "Deletes an\nautomatic discount.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of the automatic discount to delete."}], "returns": [], "examples": [{"description": "Delete an automatic discount", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation discountAutomaticDelete($id: ID!) {\n      discountAutomaticDelete(id: $id) {\n        deletedAutomaticDiscountId\n        userErrors {\n          field\n          code\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/DiscountAutomaticNode/198286294\"\n    },\n  },\n});\n"}, {"description": "Remove an existing PriceRule", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation discountAutomaticDelete($id: ID!) {\n      discountAutomaticDelete(id: $id) {\n        deletedAutomaticDiscountId\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/DiscountAutomaticNode/198286294\"\n    },\n  },\n});\n"}, {"description": "discountAutomaticDelete reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation discountAutomaticDelete($id: ID!) {\n      discountAutomaticDelete(id: $id) {\n        deletedAutomaticDiscountId\n        userErrors {\n          field\n          code\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/DiscountAutomaticNode/198286294\"\n    },\n  },\n});\n"}]}, {"name": "discountAutomaticFreeShippingCreate", "description": "Creates a\nfree shipping discount\nthat's automatically applied on a cart and at checkout.\nNoteTo create code discounts, use the\ndiscountCodeFreeShippingCreate\nmutation.", "arguments": [{"name": "freeShippingAutomaticDiscount", "type": "DiscountAutomaticFreeShippingInput!", "required": false, "description": "The input data used to create the automatic free shipping discount."}], "returns": [], "examples": [{"description": "Create a free shipping discount for 5+ items", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation CreateFreeShippingDiscount($input: DiscountAutomaticFreeShippingInput!) {\n      discountAutomaticFreeShippingCreate(freeShippingAutomaticDiscount: $input) {\n        automaticDiscountNode {\n          id\n          automaticDiscount {\n            ... on DiscountAutomaticFreeShipping {\n              title\n              startsAt\n              endsAt\n              minimumRequirement {\n                ... on DiscountMinimumQuantity {\n                  greaterThanOrEqualToQuantity\n                }\n              }\n              destinationSelection {\n                ... on DiscountCountryAll {\n                  allCountries\n                }\n              }\n            }\n          }\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"input\": {\n        \"title\": \"FREESHIP5PLUS\",\n        \"startsAt\": \"2025-01-01T00:00:00Z\",\n        \"endsAt\": \"2025-12-31T23:59:59Z\",\n        \"minimumRequirement\": {\n          \"quantity\": {\n            \"greaterThanOrEqualToQuantity\": \"5\"\n          }\n        },\n        \"destination\": {\n          \"all\": true\n        }\n      }\n    },\n  },\n});\n"}, {"description": "Create a subtotal-based shipping discount", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation M($freeShippingAutomaticDiscount: DiscountAutomaticFreeShippingInput!) {\n      discountAutomaticFreeShippingCreate(freeShippingAutomaticDiscount: $freeShippingAutomaticDiscount) {\n        automaticDiscountNode {\n          id\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"freeShippingAutomaticDiscount\": {\n        \"title\": \"FREESHIPPING50\",\n        \"startsAt\": \"2025-01-11T22:30:47Z\",\n        \"endsAt\": \"2025-12-31T23:59:59Z\",\n        \"destination\": {\n          \"countries\": {\n            \"add\": [\n              \"CA\",\n              \"US\"\n            ]\n          }\n        },\n        \"appliesOnOneTimePurchase\": true,\n        \"maximumShippingPrice\": \"200\",\n        \"minimumRequirement\": {\n          \"subtotal\": {\n            \"greaterThanOrEqualToSubtotal\": \"50\"\n          }\n        },\n        \"combinesWith\": {\n          \"orderDiscounts\": true,\n          \"productDiscounts\": true\n        }\n      }\n    },\n  },\n});\n"}]}, {"name": "discountAutomaticFreeShippingUpdate", "description": "Updates an existing\nfree shipping discount\nthat's automatically applied on a cart and at checkout.\nNoteTo update code discounts, use the\ndiscountCodeFreeShippingUpdate\nmutation instead.", "arguments": [{"name": "freeShippingAutomaticDiscount", "type": "DiscountAutomaticFreeShippingInput!", "required": false, "description": "The input data used to update the automatic free shipping discount."}, {"name": "id", "type": "ID!", "required": false, "description": "The ID of the automatic free shipping discount to update."}], "returns": [], "examples": [{"description": "Update an automatic free shipping discount", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation M($id: ID!, $freeShippingAutomaticDiscount: DiscountAutomaticFreeShippingInput!) {\n      discountAutomaticFreeShippingUpdate(id: $id, freeShippingAutomaticDiscount: $freeShippingAutomaticDiscount) {\n        automaticDiscountNode {\n          automaticDiscount {\n            ... on DiscountAutomaticFreeShipping {\n              title\n            }\n          }\n        }\n        userErrors {\n          message\n          field\n          code\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/DiscountAutomaticNode/1057371302\",\n      \"freeShippingAutomaticDiscount\": {\n        \"title\": \"A new title\"\n      }\n    },\n  },\n});\n"}, {"description": "Updates an existing a price rule", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation discountAutomaticFreeShippingUpdate($id: ID!, $automaticFreeShippingDiscount: DiscountAutomaticFreeShippingInput!) {\n      discountAutomaticFreeShippingUpdate(id: $id, freeShippingAutomaticDiscount: $automaticFreeShippingDiscount) {\n        automaticDiscountNode {\n          id\n          automaticDiscount {\n            ... on DiscountAutomaticFreeShipping {\n              title\n              startsAt\n              endsAt\n              minimumRequirement {\n                ... on DiscountMinimumQuantity {\n                  greaterThanOrEqualToQuantity\n                }\n              }\n              destinationSelection {\n                ... on DiscountCountryAll {\n                  allCountries\n                }\n              }\n            }\n          }\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/DiscountAutomaticNode/1057371315\",\n      \"automaticFreeShippingDiscount\": {\n        \"title\": \"Updated Title\",\n        \"startsAt\": \"2024-10-01T00:00:00Z\",\n        \"endsAt\": \"2024-12-31T23:59:59Z\",\n        \"minimumRequirement\": {\n          \"quantity\": {\n            \"greaterThanOrEqualToQuantity\": \"50\"\n          }\n        },\n        \"destination\": {\n          \"all\": true\n        }\n      }\n    },\n  },\n});\n"}, {"description": "discountAutomaticFreeShippingUpdate reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation M($id: ID!, $freeShippingAutomaticDiscount: DiscountAutomaticFreeShippingInput!) {\n      discountAutomaticFreeShippingUpdate(id: $id, freeShippingAutomaticDiscount: $freeShippingAutomaticDiscount) {\n        automaticDiscountNode {\n          automaticDiscount {\n            ... on DiscountAutomaticFreeShipping {\n              title\n            }\n          }\n        }\n        userErrors {\n          message\n          field\n          code\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/DiscountAutomaticNode/1057371302\",\n      \"freeShippingAutomaticDiscount\": {\n        \"title\": \"A new title\"\n      }\n    },\n  },\n});\n"}]}, {"name": "discountCodeActivate", "description": "Activates a code discount.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of the code discount to activate."}], "returns": [], "examples": [{"description": "Activate a code discount set to start in the future", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation discountCodeActivate($id: ID!) {\n      discountCodeActivate(id: $id) {\n        codeDiscountNode {\n          codeDiscount {\n            ... on DiscountCodeBasic {\n              title\n              status\n              startsAt\n              endsAt\n            }\n          }\n        }\n        userErrors {\n          field\n          code\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/DiscountCodeNode/206265824\"\n    },\n  },\n});\n"}, {"description": "Activate an expired code discount", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation discountCodeActivate($id: ID!) {\n      discountCodeActivate(id: $id) {\n        codeDiscountNode {\n          codeDiscount {\n            ... on DiscountCodeBasic {\n              title\n              status\n              startsAt\n              endsAt\n            }\n          }\n        }\n        userErrors {\n          field\n          code\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/DiscountCodeNode/424668491\"\n    },\n  },\n});\n"}, {"description": "discountCodeActivate reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation discountCodeActivate($id: ID!) {\n      discountCodeActivate(id: $id) {\n        codeDiscountNode {\n          codeDiscount {\n            ... on DiscountCodeBasic {\n              title\n              status\n              startsAt\n              endsAt\n            }\n          }\n        }\n        userErrors {\n          field\n          code\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/DiscountCodeNode/206265824\"\n    },\n  },\n});\n"}]}, {"name": "discountCodeAppCreate", "description": "Creates a code discount. The discount type must be provided by an app extension that uses Shopify Functions. Functions can implement order, product, or shipping discount functions. Use this mutation with Shopify Functions when you need custom logic beyond Shopify's native discount types.\nFor example, use this mutation to create a code discount using an app's \"Volume\" discount type that applies a percentage off when customers purchase more than the minimum quantity\nof a product. For an example implementation, refer to our tutorial.\nNoteTo create automatic discounts with custom logic, use discountAutomaticAppCreate.", "arguments": [{"name": "codeAppDiscount", "type": "DiscountCodeAppInput!", "required": false, "description": "The input data used to create the discount."}], "returns": [], "examples": [{"description": "discountCodeAppCreate reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation discountCodeAppCreate($codeAppDiscount: DiscountCodeAppInput!) {\n      discountCodeAppCreate(codeAppDiscount: $codeAppDiscount) {\n        codeAppDiscount {\n          discountId\n          title\n          appDiscountType {\n            description\n            functionId\n          }\n          combinesWith {\n            orderDiscounts\n            productDiscounts\n            shippingDiscounts\n          }\n          codes(first: 100) {\n            nodes {\n              code\n            }\n          }\n          status\n          usageLimit\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"codeAppDiscount\": {\n        \"code\": \"APP_DISCOUNT\",\n        \"title\": \"Take 5$ from order discount\",\n        \"functionId\": \"241d1090-ce51-4c0e-8b87-a6fa14fe580a\",\n        \"appliesOncePerCustomer\": true,\n        \"combinesWith\": {\n          \"orderDiscounts\": true,\n          \"productDiscounts\": true,\n          \"shippingDiscounts\": true\n        },\n        \"startsAt\": \"2021-02-02T17:09:21Z\",\n        \"endsAt\": \"2022-02-02T17:09:21Z\",\n        \"usageLimit\": 1,\n        \"metafields\": [\n          {\n            \"namespace\": \"default\",\n            \"key\": \"function-configuration\",\n            \"type\": \"json\",\n            \"value\": \"{\\\"discounts\\\":[{\\\"value\\\":{\\\"fixedAmount\\\":{\\\"amount\\\":5}},\\\"targets\\\":\\n                      [{\\\"orderSubtotal\\\":{\\\"excludedVariantIds\\\":[]}}]}],\\\"discountApplicationStrategy\\\":\\\"FIRST\\\"}\"\n          }\n        ]\n      }\n    },\n  },\n});\n"}]}, {"name": "discountCodeAppUpdate", "description": "Updates a code discount, where the discount type is provided by an app extension that uses Shopify Functions. Use this mutation when you need advanced, custom, or dynamic discount capabilities that aren't supported by Shopify's native discount types.\nNoteTo update automatic discounts, use discountAutomaticAppUpdate.", "arguments": [{"name": "codeAppDiscount", "type": "DiscountCodeAppInput!", "required": false, "description": "The input fields required to update the discount."}, {"name": "id", "type": "ID!", "required": false, "description": "The ID of the discount to update."}], "returns": [], "examples": [{"description": "Update an app code discount", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation discountCodeAppUpdate($codeAppDiscount: DiscountCodeAppInput!, $id: ID!) {\n      discountCodeAppUpdate(codeAppDiscount: $codeAppDiscount, id: $id) {\n        codeAppDiscount {\n          discountId\n          title\n          endsAt\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/DiscountCodeNode/549381256\",\n      \"codeAppDiscount\": {\n        \"title\": \"Take 5$ from order discount\",\n        \"endsAt\": \"2020-08-07T00:00:00Z\"\n      }\n    },\n  },\n});\n"}, {"description": "discountCodeAppUpdate reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation discountCodeAppUpdate($codeAppDiscount: DiscountCodeAppInput!, $id: ID!) {\n      discountCodeAppUpdate(codeAppDiscount: $codeAppDiscount, id: $id) {\n        codeAppDiscount {\n          discountId\n          title\n          endsAt\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/DiscountCodeNode/549381256\",\n      \"codeAppDiscount\": {\n        \"title\": \"Take 5$ from order discount\",\n        \"endsAt\": \"2020-08-07T00:00:00Z\"\n      }\n    },\n  },\n});\n"}]}, {"name": "discountCodeBasicCreate", "description": "Creates an amount off discount that's applied on a cart and at checkout when a customer enters a code. Amount off discounts can be a percentage off or a fixed amount off.\nNoteTo create discounts that are automatically applied on a cart and at checkout, use the discountAutomaticBasicCreate mutation.", "arguments": [{"name": "basicCodeDiscount", "type": "DiscountCodeBasicInput!", "required": false, "description": "The input data used to create the discount code."}], "returns": [], "examples": [{"description": "Create a discount with a minimum purchase", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation CreateDiscountCode($basicCodeDiscount: DiscountCodeBasicInput!) {\n      discountCodeBasicCreate(basicCodeDiscount: $basicCodeDiscount) {\n        codeDiscountNode {\n          id\n          codeDiscount {\n            ... on DiscountCodeBasic {\n              title\n              startsAt\n              endsAt\n              customerSelection {\n                ... on DiscountCustomers {\n                  customers {\n                    id\n                  }\n                }\n              }\n              customerGets {\n                value {\n                  ... on DiscountPercentage {\n                    percentage\n                  }\n                }\n              }\n            }\n          }\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"basicCodeDiscount\": {\n        \"title\": \"10% off selected items\",\n        \"code\": \"10FORYOU\",\n        \"startsAt\": \"2025-01-01T00:00:00Z\",\n        \"endsAt\": \"2025-12-31T23:59:59Z\",\n        \"customerSelection\": {\n          \"customers\": {\n            \"add\": [\n              \"gid://shopify/Customer/624407574\"\n            ]\n          }\n        },\n        \"customerGets\": {\n          \"value\": {\n            \"percentage\": 0.1\n          },\n          \"items\": {\n            \"all\": true\n          }\n        },\n        \"minimumRequirement\": {\n          \"subtotal\": {\n            \"greaterThanOrEqualToSubtotal\": \"50.0\"\n          }\n        },\n        \"usageLimit\": 100,\n        \"appliesOncePerCustomer\": true\n      }\n    },\n  },\n});\n"}, {"description": "Create a limited time discount", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation CreateSummerDiscount($input: DiscountCodeBasicInput!) {\n      discountCodeBasicCreate(basicCodeDiscount: $input) {\n        codeDiscountNode {\n          id\n          codeDiscount {\n            ... on DiscountCodeBasic {\n              title\n              codes(first: 10) {\n                nodes {\n                  code\n                }\n              }\n              startsAt\n              endsAt\n            }\n          }\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"input\": {\n        \"title\": \"Limited time discount off all items\",\n        \"code\": \"BUYNOW20\",\n        \"startsAt\": \"2024-06-21T00:00:00Z\",\n        \"endsAt\": \"2024-09-21T00:00:00Z\",\n        \"customerSelection\": {\n          \"all\": true\n        },\n        \"customerGets\": {\n          \"value\": {\n            \"percentage\": 0.2\n          },\n          \"items\": {\n            \"all\": true\n          }\n        },\n        \"appliesOncePerCustomer\": true\n      }\n    },\n  },\n});\n"}, {"description": "discountCodeBasicCreate reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation CreateDiscountCode($basicCodeDiscount: DiscountCodeBasicInput!) {\n      discountCodeBasicCreate(basicCodeDiscount: $basicCodeDiscount) {\n        codeDiscountNode {\n          id\n          codeDiscount {\n            ... on DiscountCodeBasic {\n              title\n              startsAt\n              endsAt\n              customerSelection {\n                ... on DiscountCustomers {\n                  customers {\n                    id\n                  }\n                }\n              }\n              customerGets {\n                value {\n                  ... on DiscountPercentage {\n                    percentage\n                  }\n                }\n              }\n            }\n          }\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"basicCodeDiscount\": {\n        \"title\": \"10% off selected items\",\n        \"code\": \"10FORYOU\",\n        \"startsAt\": \"2025-01-01T00:00:00Z\",\n        \"endsAt\": \"2025-12-31T23:59:59Z\",\n        \"customerSelection\": {\n          \"customers\": {\n            \"add\": [\n              \"gid://shopify/Customer/624407574\"\n            ]\n          }\n        },\n        \"customerGets\": {\n          \"value\": {\n            \"percentage\": 0.1\n          },\n          \"items\": {\n            \"all\": true\n          }\n        },\n        \"minimumRequirement\": {\n          \"subtotal\": {\n            \"greaterThanOrEqualToSubtotal\": \"50.0\"\n          }\n        },\n        \"usageLimit\": 100,\n        \"appliesOncePerCustomer\": true\n      }\n    },\n  },\n});\n"}]}, {"name": "discountCodeBasicUpdate", "description": "Updates an amount off discount that's applied on a cart and at checkout when a customer enters a code. Amount off discounts can be a percentage off or a fixed amount off.\nNoteTo update discounts that are automatically applied on a cart and at checkout, use the discountAutomaticBasicUpdate mutation.", "arguments": [{"name": "basicCodeDiscount", "type": "DiscountCodeBasicInput!", "required": false, "description": "The input data used to update the discount code."}, {"name": "id", "type": "ID!", "required": false, "description": "The ID of the discount code to update."}], "returns": [], "examples": [{"description": "Update a basic code discount", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation discountCodeBasicUpdate($id: ID!, $basicCodeDiscount: DiscountCodeBasicInput!) {\n      discountCodeBasicUpdate(id: $id, basicCodeDiscount: $basicCodeDiscount) {\n        codeDiscountNode {\n          id\n        }\n        userErrors {\n          field\n          code\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/DiscountCodeNode/206265824\",\n      \"basicCodeDiscount\": {\n        \"endsAt\": null,\n        \"code\": \"NEW_CODE\",\n        \"appliesOncePerCustomer\": true,\n        \"customerGets\": {\n          \"value\": {\n            \"percentage\": 0.4\n          }\n        }\n      }\n    },\n  },\n});\n"}, {"description": "Update a discount code to apply to specific products", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation discountCodeBasicUpdate($id: ID!, $basicCodeDiscount: DiscountCodeBasicInput!) {\n      discountCodeBasicUpdate(id: $id, basicCodeDiscount: $basicCodeDiscount) {\n        codeDiscountNode {\n          id\n        }\n        userErrors {\n          field\n          code\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/DiscountCodeNode/139986317\",\n      \"basicCodeDiscount\": {\n        \"endsAt\": \"2025-12-31T23:59:59Z\",\n        \"usageLimit\": 100,\n        \"appliesOncePerCustomer\": true,\n        \"customerGets\": {\n          \"items\": {\n            \"products\": {\n              \"productsToAdd\": [\n                \"gid://shopify/Product/121709582\",\n                \"gid://shopify/Product/108828309\"\n              ]\n            }\n          },\n          \"value\": {\n            \"percentage\": 0.1\n          }\n        }\n      }\n    },\n  },\n});\n"}, {"description": "discountCodeBasicUpdate reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation discountCodeBasicUpdate($id: ID!, $basicCodeDiscount: DiscountCodeBasicInput!) {\n      discountCodeBasicUpdate(id: $id, basicCodeDiscount: $basicCodeDiscount) {\n        codeDiscountNode {\n          id\n        }\n        userErrors {\n          field\n          code\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/DiscountCodeNode/206265824\",\n      \"basicCodeDiscount\": {\n        \"endsAt\": null,\n        \"code\": \"NEW_CODE\",\n        \"appliesOncePerCustomer\": true,\n        \"customerGets\": {\n          \"value\": {\n            \"percentage\": 0.4\n          }\n        }\n      }\n    },\n  },\n});\n"}]}, {"name": "discountCodeBulkActivate", "description": "Activates multiple code discounts asynchronously using one of the following:\n\nA search query\nA saved search ID\nA list of discount code IDs\n\nFor example, you can activate discounts for all codes that match a search criteria, or activate a predefined set of discount codes.", "arguments": [{"name": "ids", "type": "[ID!]", "required": false, "description": "The IDs of the discounts to activate."}, {"name": "savedSearchId", "type": "ID", "required": false, "description": "The ID of the saved search for filtering discounts to activate. Saved searches represent customer segments that merchants have built in the Shopify admin."}, {"name": "search", "type": "String", "required": false, "description": "The search query for filtering discounts.\n\nFor more information on the list of supported fields and search syntax, refer to the codeDiscountNodes query."}], "returns": [], "examples": [{"description": "Asynchronously activate code discounts in bulk using a search filter", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation discountCodeBulkActivate($search: String) {\n      discountCodeBulkActivate(search: $search) {\n        job {\n          id\n        }\n        userErrors {\n          code\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"search\": \"discount_type:percentage starts_at:past_week\"\n    },\n  },\n});\n"}, {"description": "Using more than one targeting argument returns an error", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation discountCodeBulkActivate($search: String, $ids: [ID!]) {\n      discountCodeBulkActivate(search: $search, ids: $ids) {\n        job {\n          id\n        }\n        userErrors {\n          code\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"ids\": [\n        \"gid://shopify/DiscountCodeNode/1\"\n      ],\n      \"search\": \"discount_type:bxgy\"\n    },\n  },\n});\n"}, {"description": "discountCodeBulkActivate reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation discountCodeBulkActivate($search: String) {\n      discountCodeBulkActivate(search: $search) {\n        job {\n          id\n        }\n        userErrors {\n          code\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"search\": \"discount_type:percentage starts_at:past_week\"\n    },\n  },\n});\n"}]}, {"name": "discountCodeBulkDeactivate", "description": "", "arguments": [{"name": "ids", "type": "[ID!]", "required": false, "description": "The IDs of the discounts to deactivate."}, {"name": "savedSearchId", "type": "ID", "required": false, "description": "The ID of the saved search for filtering discounts to deactivate. Saved searches represent customer segments that merchants have built in the Shopify admin."}, {"name": "search", "type": "String", "required": false, "description": "The search query for filtering discounts.\n\nFor more information on the list of supported fields and search syntax, refer to the codeDiscountNodes query."}], "returns": [], "examples": [{"description": "Asynchronously deactivate code discounts in bulk using a search filter", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation discountCodeBulkDeactivate($search: String) {\n      discountCodeBulkDeactivate(search: $search) {\n        job {\n          id\n        }\n        userErrors {\n          code\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"search\": \"discount_type:percentage ends_at:past_week\"\n    },\n  },\n});\n"}, {"description": "Using more than one argument returns an error", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation discountCodeBulkDeactivate($search: String, $ids: [ID!]) {\n      discountCodeBulkDeactivate(search: $search, ids: $ids) {\n        job {\n          id\n        }\n        userErrors {\n          code\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"ids\": [\n        \"gid://shopify/DiscountCodeNode/1\"\n      ],\n      \"search\": \"discount_type:bxgy\"\n    },\n  },\n});\n"}, {"description": "discountCodeBulkDeactivate reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation discountCodeBulkDeactivate($search: String) {\n      discountCodeBulkDeactivate(search: $search) {\n        job {\n          id\n        }\n        userErrors {\n          code\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"search\": \"discount_type:percentage ends_at:past_week\"\n    },\n  },\n});\n"}]}, {"name": "discountCodeBulkDelete", "description": "Deletes multiple code-based discounts asynchronously using one of the following:\n\nA search query\nA saved search ID\nA list of discount code IDs\n\nFor example, you can delete discounts for all codes that match a search criteria, or delete a predefined set of discount codes.", "arguments": [{"name": "ids", "type": "[ID!]", "required": false, "description": "The IDs of the discounts to delete."}, {"name": "savedSearchId", "type": "ID", "required": false, "description": "The ID of the saved search for filtering discounts to delete. Saved searches represent customer segments that merchants have built in the Shopify admin."}, {"name": "search", "type": "String", "required": false, "description": "The search query for filtering discounts.\n\nFor more information on the list of supported fields and search syntax, refer to the codeDiscountNodes query."}], "returns": [], "examples": [{"description": "Asynchronously delete code discounts in bulk using a search filter", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation discountCodeBulkDelete($search: String) {\n      discountCodeBulkDelete(search: $search) {\n        job {\n          id\n        }\n        userErrors {\n          code\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"search\": \"discount_type:percentage ends_at:past_week status:expired\"\n    },\n  },\n});\n"}, {"description": "Using more than one targeting argument returns an error", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation discountCodeBulkDelete($search: String, $ids: [ID!]) {\n      discountCodeBulkDelete(search: $search, ids: $ids) {\n        job {\n          id\n        }\n        userErrors {\n          code\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"ids\": [\n        \"gid://shopify/DiscountCodeNode/1\"\n      ],\n      \"search\": \"discount_type:bxgy\"\n    },\n  },\n});\n"}, {"description": "discountCodeBulkDelete reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation discountCodeBulkDelete($search: String) {\n      discountCodeBulkDelete(search: $search) {\n        job {\n          id\n        }\n        userErrors {\n          code\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"search\": \"discount_type:percentage ends_at:past_week status:expired\"\n    },\n  },\n});\n"}]}, {"name": "discountCodeBxgyCreate", "description": "Creates a\nbuy X get Y discount (BXGY)\nthat's applied on a cart and at checkout when a customer enters a code.\nNoteTo create discounts that are automatically applied on a cart and at checkout, use the\ndiscountAutomaticBxgyCreate\nmutation.", "arguments": [{"name": "bxgyCodeDiscount", "type": "DiscountCodeBxgyInput!", "required": false, "description": "The input data used to create the BXGY code discount."}], "returns": [], "examples": [{"description": "Create a basic Buy X get Y (BXGY) discount", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation discountCodeBxgyCreate($bxgyCodeDiscount: DiscountCodeBxgyInput!) {\n      discountCodeBxgyCreate(bxgyCodeDiscount: $bxgyCodeDiscount) {\n        codeDiscountNode {\n          codeDiscount {\n            ... on DiscountCodeBxgy {\n              title\n              codes(first: 10) {\n                nodes {\n                  code\n                }\n              }\n              startsAt\n              endsAt\n              customerBuys {\n                items {\n                  ...collectionsFragment\n                }\n                value {\n                  ... on DiscountQuantity {\n                    quantity\n                  }\n                }\n              }\n              customerGets {\n                appliesOnOneTimePurchase\n                appliesOnSubscription\n                value {\n                  ... on DiscountOnQuantity {\n                    effect {\n                      ... on DiscountPercentage {\n                        percentage\n                      }\n                    }\n                    quantity {\n                      quantity\n                    }\n                  }\n                }\n                items {\n                  ...collectionsFragment\n                }\n              }\n              customerSelection {\n                ... on DiscountCustomerAll {\n                  allCustomers\n                }\n              }\n              appliesOncePerCustomer\n              usesPerOrderLimit\n            }\n          }\n        }\n        userErrors {\n          field\n          code\n          message\n        }\n      }\n    }\n    \n    fragment collectionsFragment on DiscountCollections {\n      collections(first: 10) {\n        nodes {\n          id\n          title\n        }\n      }\n    }`,\n    \"variables\": {\n      \"bxgyCodeDiscount\": {\n        \"code\": \"SUMMERSALE\",\n        \"customerBuys\": {\n          \"items\": {\n            \"collections\": {\n              \"add\": [\n                \"gid://shopify/Collection/1007901140\"\n              ]\n            }\n          },\n          \"value\": {\n            \"quantity\": \"3\"\n          }\n        },\n        \"customerGets\": {\n          \"items\": {\n            \"collections\": {\n              \"add\": [\n                \"gid://shopify/Collection/711838235\"\n              ]\n            }\n          },\n          \"value\": {\n            \"discountOnQuantity\": {\n              \"effect\": {\n                \"percentage\": 0.2\n              },\n              \"quantity\": \"2\"\n            }\n          }\n        },\n        \"customerSelection\": {\n          \"all\": true\n        },\n        \"endsAt\": \"2022-09-21T00:00:00Z\",\n        \"startsAt\": \"2022-06-21T00:00:00Z\",\n        \"title\": \"20% off up to two snowboards that are on sale for every three featured snowboards you buy.\",\n        \"usesPerOrderLimit\": 3\n      }\n    },\n  },\n});\n"}, {"description": "discountCodeBxgyCreate reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation discountCodeBxgyCreate($bxgyCodeDiscount: DiscountCodeBxgyInput!) {\n      discountCodeBxgyCreate(bxgyCodeDiscount: $bxgyCodeDiscount) {\n        codeDiscountNode {\n          codeDiscount {\n            ... on DiscountCodeBxgy {\n              title\n              codes(first: 10) {\n                nodes {\n                  code\n                }\n              }\n              startsAt\n              endsAt\n              customerBuys {\n                items {\n                  ...collectionsFragment\n                }\n                value {\n                  ... on DiscountQuantity {\n                    quantity\n                  }\n                }\n              }\n              customerGets {\n                appliesOnOneTimePurchase\n                appliesOnSubscription\n                value {\n                  ... on DiscountOnQuantity {\n                    effect {\n                      ... on DiscountPercentage {\n                        percentage\n                      }\n                    }\n                    quantity {\n                      quantity\n                    }\n                  }\n                }\n                items {\n                  ...collectionsFragment\n                }\n              }\n              customerSelection {\n                ... on DiscountCustomerAll {\n                  allCustomers\n                }\n              }\n              appliesOncePerCustomer\n              usesPerOrderLimit\n            }\n          }\n        }\n        userErrors {\n          field\n          code\n          message\n        }\n      }\n    }\n    \n    fragment collectionsFragment on DiscountCollections {\n      collections(first: 10) {\n        nodes {\n          id\n          title\n        }\n      }\n    }`,\n    \"variables\": {\n      \"bxgyCodeDiscount\": {\n        \"code\": \"SUMMERSALE\",\n        \"customerBuys\": {\n          \"items\": {\n            \"collections\": {\n              \"add\": [\n                \"gid://shopify/Collection/1007901140\"\n              ]\n            }\n          },\n          \"value\": {\n            \"quantity\": \"3\"\n          }\n        },\n        \"customerGets\": {\n          \"items\": {\n            \"collections\": {\n              \"add\": [\n                \"gid://shopify/Collection/711838235\"\n              ]\n            }\n          },\n          \"value\": {\n            \"discountOnQuantity\": {\n              \"effect\": {\n                \"percentage\": 0.2\n              },\n              \"quantity\": \"2\"\n            }\n          }\n        },\n        \"customerSelection\": {\n          \"all\": true\n        },\n        \"endsAt\": \"2022-09-21T00:00:00Z\",\n        \"startsAt\": \"2022-06-21T00:00:00Z\",\n        \"title\": \"20% off up to two snowboards that are on sale for every three featured snowboards you buy.\",\n        \"usesPerOrderLimit\": 3\n      }\n    },\n  },\n});\n"}]}, {"name": "discountCodeBxgyUpdate", "description": "Updates a\nbuy X get Y discount (BXGY)\nthat's applied on a cart and at checkout when a customer enters a code.\nNoteTo update discounts that are automatically applied on a cart and at checkout, use the\ndiscountAutomaticBxgyUpdate\nmutation.", "arguments": [{"name": "bxgyCodeDiscount", "type": "DiscountCodeBxgyInput!", "required": false, "description": "The input data used to update the BXGY code discount."}, {"name": "id", "type": "ID!", "required": false, "description": "The ID of the BXGY code discount to update."}], "returns": [], "examples": [{"description": "discountCodeBxgyUpdate reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation discountCodeBxgyUpdate($id: ID!, $bxgyCodeDiscount: DiscountCodeBxgyInput!) {\n      discountCodeBxgyUpdate(id: $id, bxgyCodeDiscount: $bxgyCodeDiscount) {\n        codeDiscountNode {\n          codeDiscount {\n            ... on DiscountCodeBxgy {\n              title\n              codes(first: 10) {\n                nodes {\n                  code\n                }\n              }\n              endsAt\n            }\n          }\n        }\n        userErrors {\n          field\n          code\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/DiscountCodeNode/732991387\",\n      \"bxgyCodeDiscount\": {\n        \"endsAt\": \"2022-12-25T00:00:00Z\"\n      }\n    },\n  },\n});\n"}]}, {"name": "discountCodeDeactivate", "description": "Deactivates a code discount.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of the code discount to deactivate."}], "returns": [], "examples": [{"description": "Deactivate a code discount set to start in the future", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation discountCodeDeactivate($id: ID!) {\n      discountCodeDeactivate(id: $id) {\n        codeDiscountNode {\n          codeDiscount {\n            ... on DiscountCodeBasic {\n              title\n              status\n              startsAt\n              endsAt\n            }\n          }\n        }\n        userErrors {\n          field\n          code\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/DiscountCodeNode/206265824\"\n    },\n  },\n});\n"}, {"description": "Deactivate an active code discount", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation discountCodeDeactivate($id: ID!) {\n      discountCodeDeactivate(id: $id) {\n        codeDiscountNode {\n          codeDiscount {\n            ... on DiscountCodeBasic {\n              title\n              status\n              startsAt\n              endsAt\n            }\n          }\n        }\n        userErrors {\n          field\n          code\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/DiscountCodeNode/206265824\"\n    },\n  },\n});\n"}, {"description": "discountCodeDeactivate reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation discountCodeDeactivate($id: ID!) {\n      discountCodeDeactivate(id: $id) {\n        codeDiscountNode {\n          codeDiscount {\n            ... on DiscountCodeBasic {\n              title\n              status\n              startsAt\n              endsAt\n            }\n          }\n        }\n        userErrors {\n          field\n          code\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/DiscountCodeNode/206265824\"\n    },\n  },\n});\n"}]}, {"name": "discountCodeDelete", "description": "Deletes a\ncode discount.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of the code discount to delete."}], "returns": [], "examples": [{"description": "Delete an amount off discount", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `mutation {\n    discountCodeDelete(id: \"gid://shopify/DiscountCodeNode/206265824\") {\n      deletedCodeDiscountId\n      userErrors {\n        field\n        code\n        message\n      }\n    }\n  }`,\n});\n"}, {"description": "discountCodeDelete reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `mutation {\n    discountCodeDelete(id: \"gid://shopify/DiscountCodeNode/206265824\") {\n      deletedCodeDiscountId\n      userErrors {\n        field\n        code\n        message\n      }\n    }\n  }`,\n});\n"}]}, {"name": "discountCodeFreeShippingCreate", "description": "Creates an free shipping discount that's applied on a cart and at checkout when a customer enters a code.\nNoteTo create discounts that are automatically applied on a cart and at checkout, use the discountAutomaticFreeShippingCreate mutation.", "arguments": [{"name": "freeShippingCodeDiscount", "type": "DiscountCodeFreeShippingInput!", "required": false, "description": "The input data used to create the discount code."}], "returns": [], "examples": [{"description": "Create a discount code for free shipping", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation discountCodeFreeShippingCreate($freeShippingCodeDiscount: DiscountCodeFreeShippingInput!) {\n      discountCodeFreeShippingCreate(freeShippingCodeDiscount: $freeShippingCodeDiscount) {\n        codeDiscountNode {\n          id\n          codeDiscount {\n            ... on DiscountCodeFreeShipping {\n              title\n              startsAt\n              endsAt\n              maximumShippingPrice {\n                amount\n              }\n              customerSelection {\n                ... on DiscountCustomerAll {\n                  allCustomers\n                }\n              }\n              destinationSelection {\n                ... on DiscountCountryAll {\n                  allCountries\n                }\n              }\n              minimumRequirement {\n                ... on DiscountMinimumSubtotal {\n                  greaterThanOrEqualToSubtotal {\n                    amount\n                  }\n                }\n              }\n              codes(first: 2) {\n                nodes {\n                  code\n                }\n              }\n            }\n          }\n        }\n        userErrors {\n          field\n          code\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"freeShippingCodeDiscount\": {\n        \"startsAt\": \"2022-06-22T21:12:07.000Z\",\n        \"appliesOncePerCustomer\": false,\n        \"title\": \"FreeShipping\",\n        \"code\": \"FreeShipping\",\n        \"minimumRequirement\": {\n          \"subtotal\": {\n            \"greaterThanOrEqualToSubtotal\": 20.0\n          }\n        },\n        \"customerSelection\": {\n          \"all\": true\n        },\n        \"destination\": {\n          \"all\": true\n        }\n      }\n    },\n  },\n});\n"}]}, {"name": "discountCodeFreeShippingUpdate", "description": "Updates a free shipping discount that's applied on a cart and at checkout when a customer enters a code.\nNoteTo update a free shipping discount that's automatically applied on a cart and at checkout, use the discountAutomaticFreeShippingUpdate mutation.", "arguments": [{"name": "freeShippingCodeDiscount", "type": "DiscountCodeFreeShippingInput!", "required": false, "description": "The input data used to update the discount code."}, {"name": "id", "type": "ID!", "required": false, "description": "The ID of the discount code to update."}], "returns": [], "examples": [{"description": "Update a free shipping discount code", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation discountCodeFreeShippingUpdate($freeShippingCodeDiscount: DiscountCodeFreeShippingInput!, $id: ID!) {\n      discountCodeFreeShippingUpdate(freeShippingCodeDiscount: $freeShippingCodeDiscount, id: $id) {\n        codeDiscountNode {\n          id\n          codeDiscount {\n            ... on DiscountCodeFreeShipping {\n              title\n              startsAt\n              endsAt\n              minimumRequirement {\n                ... on DiscountMinimumSubtotal {\n                  greaterThanOrEqualToSubtotal {\n                    amount\n                    currencyCode\n                  }\n                }\n              }\n              codes(first: 2) {\n                nodes {\n                  code\n                }\n              }\n            }\n          }\n        }\n        userErrors {\n          field\n          code\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"freeShippingCodeDiscount\": {\n        \"code\": \"FRSHP25\",\n        \"minimumRequirement\": {\n          \"subtotal\": {\n            \"greaterThanOrEqualToSubtotal\": 25.0\n          }\n        },\n        \"startsAt\": \"2022-08-01\",\n        \"endsAt\": \"2022-08-08\",\n        \"title\": \"Free shipping for orders above $25\"\n      },\n      \"id\": \"gid://shopify/DiscountCodeFreeShipping/445378512\"\n    },\n  },\n});\n"}, {"description": "discountCodeFreeShippingUpdate reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation discountCodeFreeShippingUpdate($freeShippingCodeDiscount: DiscountCodeFreeShippingInput!, $id: ID!) {\n      discountCodeFreeShippingUpdate(freeShippingCodeDiscount: $freeShippingCodeDiscount, id: $id) {\n        codeDiscountNode {\n          id\n          codeDiscount {\n            ... on DiscountCodeFreeShipping {\n              title\n              startsAt\n              endsAt\n              minimumRequirement {\n                ... on DiscountMinimumSubtotal {\n                  greaterThanOrEqualToSubtotal {\n                    amount\n                    currencyCode\n                  }\n                }\n              }\n              codes(first: 2) {\n                nodes {\n                  code\n                }\n              }\n            }\n          }\n        }\n        userErrors {\n          field\n          code\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"freeShippingCodeDiscount\": {\n        \"code\": \"FRSHP25\",\n        \"minimumRequirement\": {\n          \"subtotal\": {\n            \"greaterThanOrEqualToSubtotal\": 25.0\n          }\n        },\n        \"startsAt\": \"2022-08-01\",\n        \"endsAt\": \"2022-08-08\",\n        \"title\": \"Free shipping for orders above $25\"\n      },\n      \"id\": \"gid://shopify/DiscountCodeFreeShipping/445378512\"\n    },\n  },\n});\n"}]}, {"name": "discountCodeRedeemCodeBulkDelete", "description": "Asynchronously delete\ndiscount codes\nin bulk that customers can use to redeem a discount.", "arguments": [{"name": "discountId", "type": "ID!", "required": false, "description": "The ID of the\nDiscountCodeNode\nobject that the codes will be removed from. For example, gid://shopify/DiscountCodeNode/123.\nYou can use the\ncodeDiscountNodes query\nto retrieve the ID."}, {"name": "ids", "type": "[ID!]", "required": false, "description": "The IDs of the\nDiscountRedeemCode\nobjects to delete.\nFor example, gid://shopify/DiscountRedeemCode/123.\nYou can use the\ncodeDiscountNodes query\nto retrieve the ID."}, {"name": "savedSearchId", "type": "ID", "required": false, "description": "The ID of a\nsaved search."}, {"name": "search", "type": "String", "required": false, "description": "A filter made up of terms, connectives, modifiers, and comparators that you can use to\nsearch for code discounts. You can apply one or more filters to a query. Learn more about\nShopify API search syntax.\nFor a list of accepted values for the search field, refer to the\nquery argument on the codeDiscountNodes query."}], "returns": [], "examples": [{"description": "Asynchronously delete discount redeem codes in bulk using a search filter", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation discountCodeRedeemCodeBulkDelete($discountId: ID!, $search: String) {\n      discountCodeRedeemCodeBulkDelete(discountId: $discountId, search: $search) {\n        job {\n          id\n        }\n        userErrors {\n          code\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"discountId\": \"gid://shopify/DiscountCodeNode/2429471\",\n      \"search\": \"times_used:0\"\n    },\n  },\n});\n"}, {"description": "Deletes a discount code", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation DiscountRedeemCodeBulkDelete($discountId: ID!, $ids: [ID!]) {\n      discountCodeRedeemCodeBulkDelete(discountId: $discountId, ids: $ids) {\n        job {\n          id\n        }\n        userErrors {\n          code\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"discountId\": \"gid://shopify/DiscountCodeNode/2429471\",\n      \"ids\": [\n        \"gid://shopify/DiscountRedeemCode/1\"\n      ]\n    },\n  },\n});\n"}, {"description": "discountCodeRedeemCodeBulkDelete reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation discountCodeRedeemCodeBulkDelete($discountId: ID!, $search: String) {\n      discountCodeRedeemCodeBulkDelete(discountId: $discountId, search: $search) {\n        job {\n          id\n        }\n        userErrors {\n          code\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"discountId\": \"gid://shopify/DiscountCodeNode/2429471\",\n      \"search\": \"times_used:0\"\n    },\n  },\n});\n"}]}, {"name": "discountRedeemCodeBulkAdd", "description": "Asynchronously add\ndiscount codes\nin bulk that customers can use to redeem a discount. You can use the discountRedeemCodeBulkAdd mutation\nto automate the distribution of discount codes through emails or other\nmarketing channels.", "arguments": [{"name": "codes", "type": "[DiscountRedeemCodeInput!]!", "required": false, "description": "The list of codes to associate with the\ncode discount.\nMaximum: 100 codes."}, {"name": "discountId", "type": "ID!", "required": false, "description": "The ID of the\nDiscountCodeNode\nobject that the codes will be added to. For example, gid://shopify/DiscountCodeNode/123.\nYou can use the\ncodeDiscountNodes query\nto retrieve the ID."}], "returns": [], "examples": [{"description": "Asynchronously add redeem codes to a code discount", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation discountRedeemCodeBulkAdd($discountId: ID!, $codes: [DiscountRedeemCodeInput!]!) {\n      discountRedeemCodeBulkAdd(discountId: $discountId, codes: $codes) {\n        bulkCreation {\n          id\n        }\n        userErrors {\n          code\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"discountId\": \"gid://shopify/DiscountCodeNode/2429471\",\n      \"codes\": [\n        {\n          \"code\": \"DISCOUNT_1\"\n        },\n        {\n          \"code\": \"DISCOUNT_2\"\n        },\n        {\n          \"code\": \"DISCOUNT_3\"\n        }\n      ]\n    },\n  },\n});\n"}, {"description": "Creates a discount code", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation DiscountRedeemCodeBulkAdd($discountId: ID!, $codes: [DiscountRedeemCodeInput!]!) {\n      discountRedeemCodeBulkAdd(discountId: $discountId, codes: $codes) {\n        bulkCreation {\n          id\n          createdAt\n          discountCode {\n            id\n          }\n          done\n          codesCount\n          importedCount\n          failedCount\n        }\n        userErrors {\n          code\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"discountId\": \"gid://shopify/DiscountCodeNode/2429471\",\n      \"codes\": [\n        {\n          \"code\": \"DISCOUNT_1\"\n        },\n        {\n          \"code\": \"DISCOUNT_2\"\n        },\n        {\n          \"code\": \"DISCOUNT_3\"\n        }\n      ]\n    },\n  },\n});\n"}, {"description": "Creates a discount code creation job", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation DiscountRedeemCodeBulkAdd($discountId: ID!, $codes: [DiscountRedeemCodeInput!]!) {\n      discountRedeemCodeBulkAdd(discountId: $discountId, codes: $codes) {\n        bulkCreation {\n          id\n          createdAt\n          discountCode {\n            id\n          }\n          done\n          codesCount\n          importedCount\n          failedCount\n        }\n        userErrors {\n          code\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"discountId\": \"gid://shopify/DiscountCodeNode/2429471\",\n      \"codes\": [\n        {\n          \"code\": \"DISCOUNT_1\"\n        },\n        {\n          \"code\": \"DISCOUNT_2\"\n        },\n        {\n          \"code\": \"DISCOUNT_3\"\n        }\n      ]\n    },\n  },\n});\n"}, {"description": "discountRedeemCodeBulkAdd reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation discountRedeemCodeBulkAdd($discountId: ID!, $codes: [DiscountRedeemCodeInput!]!) {\n      discountRedeemCodeBulkAdd(discountId: $discountId, codes: $codes) {\n        bulkCreation {\n          id\n        }\n        userErrors {\n          code\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"discountId\": \"gid://shopify/DiscountCodeNode/2429471\",\n      \"codes\": [\n        {\n          \"code\": \"DISCOUNT_1\"\n        },\n        {\n          \"code\": \"DISCOUNT_2\"\n        },\n        {\n          \"code\": \"DISCOUNT_3\"\n        }\n      ]\n    },\n  },\n});\n"}]}, {"name": "eventBridgeServerPixelUpdate", "description": "Updates the server pixel to connect to an EventBridge endpoint.\nRunning this mutation deletes any previous subscriptions for the server pixel.", "arguments": [{"name": "arn", "type": "ARN!", "required": false, "description": "The ARN for the EventBridge endpoint to which customer events are to be sent."}], "returns": [], "examples": []}, {"name": "marketingActivitiesDeleteAllExternal", "description": "Deletes all external marketing activities. Deletion is performed by a background job, as it may take a bit of time to complete if a large number of activities are to be deleted. Attempting to create or modify external activities before the job has completed will result in the create/update/upsert mutation returning an error.", "arguments": [], "returns": [], "examples": [{"description": "Enqueues a job to delete all external activities", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `mutation marketingActivitiesDeleteAllExternal {\n    marketingActivitiesDeleteAllExternal {\n      job {\n        id\n      }\n    }\n  }`,\n});\n"}]}, {"name": "marketingActivityCreate", "description": "Create new marketing activity.", "arguments": [{"name": "input", "type": "MarketingActivityCreateInput!", "required": false, "description": "The Input of marketing activity create."}], "returns": [], "examples": [{"description": "Create a DRAFT marketing activity for a specific marketing activity extension", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation marketingActivityCreate($marketingActivityTitle: String!, $marketingActivityExtensionId: ID!, $context: String!, $status: MarketingActivityStatus!) {\n      marketingActivityCreate(input: {marketingActivityTitle: $marketingActivityTitle, marketingActivityExtensionId: $marketingActivityExtensionId, status: $status, context: $context}) {\n        marketingActivity {\n          id\n          title\n          status\n        }\n      }\n    }`,\n    \"variables\": {\n      \"marketingActivityTitle\": \"Draft Marketing Activity\",\n      \"marketingActivityExtensionId\": \"gid://shopify/MarketingActivityExtension/666dcce8-6389-425f-bcf0-6c9469b6716f\",\n      \"context\": \"eyJtYXJrZXRpbmdfY2FtcGFpZ25faWQiOiI2NDYzMzc3NDMifQ==\",\n      \"status\": \"DRAFT\"\n    },\n  },\n});\n"}, {"description": "marketingActivityCreate reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation marketingActivityCreate($marketingActivityTitle: String!, $marketingActivityExtensionId: ID!, $context: String!, $status: MarketingActivityStatus!) {\n      marketingActivityCreate(input: {marketingActivityTitle: $marketingActivityTitle, marketingActivityExtensionId: $marketingActivityExtensionId, status: $status, context: $context}) {\n        marketingActivity {\n          id\n          title\n          status\n        }\n      }\n    }`,\n    \"variables\": {\n      \"marketingActivityTitle\": \"Draft Marketing Activity\",\n      \"marketingActivityExtensionId\": \"gid://shopify/MarketingActivityExtension/666dcce8-6389-425f-bcf0-6c9469b6716f\",\n      \"context\": \"eyJtYXJrZXRpbmdfY2FtcGFpZ25faWQiOiI2NDYzMzc3NDMifQ==\",\n      \"status\": \"DRAFT\"\n    },\n  },\n});\n"}]}, {"name": "marketingActivityCreateExternal", "description": "Creates a new external marketing activity.", "arguments": [{"name": "input", "type": "MarketingActivityCreateExternalInput!", "required": false, "description": "The input field for creating an external marketing activity."}], "returns": [], "examples": [{"description": "Create an external marketing activity with a status", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation marketingActivityCreateExternal($createInput: MarketingActivityCreateExternalInput!) {\n      marketingActivityCreateExternal(input: $createInput) {\n        marketingActivity {\n          id\n        }\n      }\n    }`,\n    \"variables\": {\n      \"createInput\": {\n        \"remoteId\": \"fake_id\",\n        \"title\": \"New Title\",\n        \"remoteUrl\": \"https://example.com\",\n        \"remotePreviewImageUrl\": \"https://example.com\",\n        \"status\": \"ACTIVE\",\n        \"utm\": {\n          \"source\": \"email\",\n          \"medium\": \"newsletter\",\n          \"campaign\": \"external-campaign\"\n        },\n        \"tactic\": \"NEWSLETTER\",\n        \"marketingChannelType\": \"EMAIL\"\n      }\n    },\n  },\n});\n"}, {"description": "Creates a marketing event", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation MarketingCreateEvent($input: MarketingActivityCreateExternalInput!) {\n      marketingActivityCreateExternal(input: $input) {\n        marketingActivity {\n          id\n          marketingEvent {\n            id\n            type\n            startedAt\n            utmCampaign\n            utmMedium\n            utmSource\n            marketingChannelType\n          }\n        }\n      }\n    }`,\n    \"variables\": {\n      \"input\": {\n        \"remoteId\": \"fake_id\",\n        \"title\": \"New Marketing Event\",\n        \"remoteUrl\": \"https://example.com\",\n        \"remotePreviewImageUrl\": \"https://example.com\",\n        \"utm\": {\n          \"source\": \"source\",\n          \"medium\": \"medium\",\n          \"campaign\": \"campaign\"\n        },\n        \"marketingChannelType\": \"SOCIAL\",\n        \"tactic\": \"POST\"\n      }\n    },\n  },\n});\n"}, {"description": "marketingActivityCreateExternal reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation marketingActivityCreateExternal($createInput: MarketingActivityCreateExternalInput!) {\n      marketingActivityCreateExternal(input: $createInput) {\n        marketingActivity {\n          id\n        }\n      }\n    }`,\n    \"variables\": {\n      \"createInput\": {\n        \"remoteId\": \"fake_id\",\n        \"title\": \"New Title\",\n        \"remoteUrl\": \"https://example.com\",\n        \"remotePreviewImageUrl\": \"https://example.com\",\n        \"status\": \"ACTIVE\",\n        \"utm\": {\n          \"source\": \"email\",\n          \"medium\": \"newsletter\",\n          \"campaign\": \"external-campaign\"\n        },\n        \"tactic\": \"NEWSLETTER\",\n        \"marketingChannelType\": \"EMAIL\"\n      }\n    },\n  },\n});\n"}]}, {"name": "marketingActivityDeleteExternal", "description": "Deletes an external marketing activity.", "arguments": [{"name": "marketingActivityId", "type": "ID", "required": false, "description": "The ID of the marketing activity. A marketing activity ID or remote ID must be provided."}, {"name": "remoteId", "type": "String", "required": false, "description": "A custom unique identifier for the marketing activity, which can be used to manage the activity and send engagement metrics without having to store our marketing activity ID in your systems. A marketing activity ID or remote ID must be provided."}], "returns": [], "examples": [{"description": "Delete an external marketing activity using the remote ID", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation marketingActivityUpdateExternal($remoteId: String!) {\n      marketingActivityDeleteExternal(remoteId: $remoteId) {\n        deletedMarketingActivityId\n      }\n    }`,\n    \"variables\": {\n      \"remoteId\": \"abcdefg\"\n    },\n  },\n});\n"}, {"description": "Deletes a marketing event", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation marketingActivityDeleteExternal($marketingActivityId: ID!) {\n      marketingActivityDeleteExternal(marketingActivityId: $marketingActivityId) {\n        deletedMarketingActivityId\n      }\n    }`,\n    \"variables\": {\n      \"marketingActivityId\": \"gid://shopify/MarketingActivity/36187062\"\n    },\n  },\n});\n"}, {"description": "marketingActivityDeleteExternal reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation marketingActivityUpdateExternal($remoteId: String!) {\n      marketingActivityDeleteExternal(remoteId: $remoteId) {\n        deletedMarketingActivityId\n      }\n    }`,\n    \"variables\": {\n      \"remoteId\": \"abcdefg\"\n    },\n  },\n});\n"}]}, {"name": "marketingActivityUpdate", "description": "Updates a marketing activity with the latest information.", "arguments": [{"name": "input", "type": "MarketingActivityUpdateInput!", "required": false, "description": "The Input of the marketing activity."}], "returns": [], "examples": [{"description": "Sets the budget for the marketing activity", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation marketingActivityUpdate($id: ID!, $budgetType: MarketingBudgetBudgetType!, $amount: Decimal!, $currencyCode: CurrencyCode!) {\n      marketingActivityUpdate(input: {id: $id, budget: {budgetType: $budgetType, total: {amount: $amount, currencyCode: $currencyCode}}}) {\n        marketingActivity {\n          budget {\n            budgetType\n            total {\n              amount\n              currencyCode\n            }\n          }\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/MarketingActivity/794355127\",\n      \"budgetType\": \"LIFETIME\",\n      \"amount\": 100,\n      \"currencyCode\": \"CAD\"\n    },\n  },\n});\n"}, {"description": "Updates a marketing activity into ACTIVE state", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation marketingActivityUpdate($id: ID!, $status: MarketingActivityStatus!) {\n      marketingActivityUpdate(input: {id: $id, status: $status}) {\n        marketingActivity {\n          id\n          title\n          status\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/MarketingActivity/794355127\",\n      \"status\": \"ACTIVE\"\n    },\n  },\n});\n"}, {"description": "marketingActivityUpdate reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation marketingActivityUpdate($id: ID!, $budgetType: MarketingBudgetBudgetType!, $amount: Decimal!, $currencyCode: CurrencyCode!) {\n      marketingActivityUpdate(input: {id: $id, budget: {budgetType: $budgetType, total: {amount: $amount, currencyCode: $currencyCode}}}) {\n        marketingActivity {\n          budget {\n            budgetType\n            total {\n              amount\n              currencyCode\n            }\n          }\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/MarketingActivity/794355127\",\n      \"budgetType\": \"LIFETIME\",\n      \"amount\": 100,\n      \"currencyCode\": \"CAD\"\n    },\n  },\n});\n"}]}, {"name": "marketingActivityUpdateExternal", "description": "Update an external marketing activity.", "arguments": [{"name": "input", "type": "MarketingActivityUpdateExternalInput!", "required": false, "description": "The input field for updating an external marketing activity."}, {"name": "marketingActivityId", "type": "ID", "required": false, "description": "The ID of the marketing activity. Specify either the marketing activity ID, remote ID, or UTM to update the marketing activity."}, {"name": "remoteId", "type": "String", "required": false, "description": "A custom unique identifier for the marketing activity, which can be used to manage the activity and send engagement metrics without having to store our marketing activity ID in your systems. Specify either the marketing activity ID, remote ID, or UTM to update the marketing activity."}, {"name": "utm", "type": "UTMInput", "required": false, "description": "Specifies the Urchin Traffic Module (UTM) parameters that are associated with a related marketing campaign. Specify either the marketing activity ID, remote ID, or UTM to update the marketing activity."}], "returns": [], "examples": [{"description": "Update an external marketing activity and its status", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation marketingActivityUpdateExternal($remoteId: String!, $updateInput: MarketingActivityUpdateExternalInput!) {\n      marketingActivityUpdateExternal(remoteId: $remoteId, input: $updateInput) {\n        marketingActivity {\n          id\n          title\n          marketingEvent {\n            manageUrl\n            previewUrl\n          }\n        }\n      }\n    }`,\n    \"variables\": {\n      \"remoteId\": \"abcdefg\",\n      \"updateInput\": {\n        \"title\": \"New Title\",\n        \"remoteUrl\": \"https://example.com\",\n        \"remotePreviewImageUrl\": \"https://example.com\",\n        \"status\": \"PAUSED\"\n      }\n    },\n  },\n});\n"}, {"description": "Update an external marketing activity using the remote id", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation marketingActivityUpdateExternal($remoteId: String!, $updateInput: MarketingActivityUpdateExternalInput!) {\n      marketingActivityUpdateExternal(remoteId: $remoteId, input: $updateInput) {\n        marketingActivity {\n          id\n          title\n          marketingEvent {\n            manageUrl\n            previewUrl\n          }\n        }\n      }\n    }`,\n    \"variables\": {\n      \"remoteId\": \"abcdefg\",\n      \"updateInput\": {\n        \"title\": \"New Title\",\n        \"remoteUrl\": \"https://example.com\",\n        \"remotePreviewImageUrl\": \"https://example.com\"\n      }\n    },\n  },\n});\n"}, {"description": "Update an external marketing activity using the utm parameters", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation marketingActivityUpdateExternal($utm: UTMInput!, $updateInput: MarketingActivityUpdateExternalInput!) {\n      marketingActivityUpdateExternal(utm: $utm, input: $updateInput) {\n        marketingActivity {\n          id\n          title\n          marketingEvent {\n            manageUrl\n            previewUrl\n          }\n        }\n      }\n    }`,\n    \"variables\": {\n      \"utm\": {\n        \"source\": \"email\",\n        \"medium\": \"newsletter\",\n        \"campaign\": \"external-event-campaign\"\n      },\n      \"updateInput\": {\n        \"title\": \"New Title\",\n        \"remoteUrl\": \"https://example.com\",\n        \"remotePreviewImageUrl\": \"https://example.com\"\n      }\n    },\n  },\n});\n"}, {"description": "Updates a marketing event", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation marketingActivityUpdateExternal($marketingActivityId: ID!, $updateInput: MarketingActivityUpdateExternalInput!) {\n      marketingActivityUpdateExternal(marketingActivityId: $marketingActivityId, input: $updateInput) {\n        marketingActivity {\n          id\n          title\n          marketingEvent {\n            manageUrl\n            previewUrl\n          }\n        }\n      }\n    }`,\n    \"variables\": {\n      \"marketingActivityId\": \"gid://shopify/MarketingActivity/36187062\",\n      \"updateInput\": {\n        \"title\": \"New Title\",\n        \"remoteUrl\": \"https://example.com\",\n        \"remotePreviewImageUrl\": \"https://example.com\"\n      }\n    },\n  },\n});\n"}, {"description": "marketingActivityUpdateExternal reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation marketingActivityUpdateExternal($remoteId: String!, $updateInput: MarketingActivityUpdateExternalInput!) {\n      marketingActivityUpdateExternal(remoteId: $remoteId, input: $updateInput) {\n        marketingActivity {\n          id\n          title\n          marketingEvent {\n            manageUrl\n            previewUrl\n          }\n        }\n      }\n    }`,\n    \"variables\": {\n      \"remoteId\": \"abcdefg\",\n      \"updateInput\": {\n        \"title\": \"New Title\",\n        \"remoteUrl\": \"https://example.com\",\n        \"remotePreviewImageUrl\": \"https://example.com\",\n        \"status\": \"PAUSED\"\n      }\n    },\n  },\n});\n"}]}, {"name": "marketingActivityUpsertExternal", "description": "Creates a new external marketing activity or updates an existing one. When optional fields are absent or null, associated information will be removed from an existing marketing activity.", "arguments": [{"name": "input", "type": "MarketingActivityUpsertExternalInput!", "required": false, "description": "The input field for creating or updating an external marketing activity."}], "returns": [], "examples": [{"description": "Upsert (create or update) an external marketing activity", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation marketingActivityUpsertExternal($input: MarketingActivityUpsertExternalInput!) {\n      marketingActivityUpsertExternal(input: $input) {\n        marketingActivity {\n          id\n        }\n      }\n    }`,\n    \"variables\": {\n      \"input\": {\n        \"remoteId\": \"A unique identifier\",\n        \"title\": \"New Title\",\n        \"remoteUrl\": \"https://example.com\",\n        \"status\": \"ACTIVE\",\n        \"utm\": {\n          \"source\": \"email\",\n          \"medium\": \"newsletter\",\n          \"campaign\": \"external-campaign\"\n        },\n        \"tactic\": \"NEWSLETTER\",\n        \"marketingChannelType\": \"EMAIL\"\n      }\n    },\n  },\n});\n"}, {"description": "marketingActivityUpsertExternal reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation marketingActivityUpsertExternal($input: MarketingActivityUpsertExternalInput!) {\n      marketingActivityUpsertExternal(input: $input) {\n        marketingActivity {\n          id\n        }\n      }\n    }`,\n    \"variables\": {\n      \"input\": {\n        \"remoteId\": \"A unique identifier\",\n        \"title\": \"New Title\",\n        \"remoteUrl\": \"https://example.com\",\n        \"status\": \"ACTIVE\",\n        \"utm\": {\n          \"source\": \"email\",\n          \"medium\": \"newsletter\",\n          \"campaign\": \"external-campaign\"\n        },\n        \"tactic\": \"NEWSLETTER\",\n        \"marketingChannelType\": \"EMAIL\"\n      }\n    },\n  },\n});\n"}]}, {"name": "marketingEngagementCreate", "description": "Creates a new marketing engagement for a marketing activity or a marketing channel.", "arguments": [{"name": "channelHandle", "type": "String", "required": false, "description": "The unique string identifier of the channel to which the engagement metrics are being provided. This should be set when and only when providing channel-level engagements. This should be nil when providing activity-level engagements. For the correct handle for your channel, contact your partner manager."}, {"name": "marketingActivityId", "type": "ID", "required": false, "description": "The identifier of the marketing activity for which the engagement metrics are being provided. This or the remoteId should be set when and only when providing activity-level engagements. This should be nil when providing channel-level engagements."}, {"name": "marketingEngagement", "type": "MarketingEngagementInput!", "required": false, "description": "The marketing engagement's attributes."}, {"name": "remoteId", "type": "String", "required": false, "description": "A custom unique identifier for the marketing activity, which can be used to manage the activity and send engagement metrics without having to store our marketing activity ID in your systems. This or the marketingActivityId should be set when and only when providing activity-level engagements. This should be nil when providing channel-level engagements."}], "returns": [], "examples": [{"description": "Create activity-level engagement for a marketing activity ID", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation M($marketingEngagement: MarketingEngagementInput!, $marketingActivityId: ID, $channelHandle: String, $remoteId: String) {\n      marketingEngagementCreate(marketingEngagement: $marketingEngagement, marketingActivityId: $marketingActivityId, channelHandle: $channelHandle, remoteId: $remoteId) {\n        marketingEngagement {\n          occurredOn\n          utcOffset\n          isCumulative\n          adSpend {\n            amount\n            currencyCode\n          }\n          clicksCount\n          impressionsCount\n          commentsCount\n          favoritesCount\n          unsubscribesCount\n          complaintsCount\n          failsCount\n          sendsCount\n          uniqueViewsCount\n          uniqueClicksCount\n          sharesCount\n          viewsCount\n          sessionsCount\n          sales {\n            amount\n            currencyCode\n          }\n          orders\n          firstTimeCustomers\n          returningCustomers\n          marketingActivity {\n            id\n          }\n          channelHandle\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"marketingEngagement\": {\n        \"occurredOn\": \"2018-06-29\",\n        \"utcOffset\": \"-07:00\",\n        \"isCumulative\": false,\n        \"adSpend\": {\n          \"currencyCode\": \"CAD\",\n          \"amount\": \"19.90\"\n        },\n        \"impressionsCount\": 100,\n        \"clicksCount\": 40,\n        \"commentsCount\": 1,\n        \"unsubscribesCount\": 1,\n        \"complaintsCount\": 1,\n        \"failsCount\": 1,\n        \"sendsCount\": 1,\n        \"uniqueViewsCount\": 1,\n        \"uniqueClicksCount\": 1,\n        \"sharesCount\": 5,\n        \"viewsCount\": 10,\n        \"favoritesCount\": 0,\n        \"sessionsCount\": 40,\n        \"sales\": {\n          \"amount\": \"304.50\",\n          \"currencyCode\": \"CAD\"\n        },\n        \"orders\": 8,\n        \"firstTimeCustomers\": 5.0,\n        \"returningCustomers\": 3.0\n      },\n      \"marketingActivityId\": \"gid://shopify/MarketingActivity/794355127\",\n      \"channelHandle\": null,\n      \"remoteId\": null\n    },\n  },\n});\n"}, {"description": "Create activity-level engagement with a remote ID", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation M($marketingEngagement: MarketingEngagementInput!, $marketingActivityId: ID, $channelHandle: String, $remoteId: String) {\n      marketingEngagementCreate(marketingEngagement: $marketingEngagement, marketingActivityId: $marketingActivityId, channelHandle: $channelHandle, remoteId: $remoteId) {\n        marketingEngagement {\n          occurredOn\n          utcOffset\n          isCumulative\n          adSpend {\n            amount\n            currencyCode\n          }\n          clicksCount\n          impressionsCount\n          commentsCount\n          favoritesCount\n          unsubscribesCount\n          complaintsCount\n          failsCount\n          sendsCount\n          uniqueViewsCount\n          uniqueClicksCount\n          sharesCount\n          viewsCount\n          sessionsCount\n          sales {\n            amount\n            currencyCode\n          }\n          orders\n          firstTimeCustomers\n          returningCustomers\n          marketingActivity {\n            id\n          }\n          channelHandle\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"marketingEngagement\": {\n        \"occurredOn\": \"2018-06-29\",\n        \"utcOffset\": \"-07:00\",\n        \"isCumulative\": false,\n        \"adSpend\": {\n          \"currencyCode\": \"CAD\",\n          \"amount\": \"19.90\"\n        },\n        \"impressionsCount\": 100,\n        \"clicksCount\": 40,\n        \"commentsCount\": 1,\n        \"unsubscribesCount\": 1,\n        \"complaintsCount\": 1,\n        \"failsCount\": 1,\n        \"sendsCount\": 1,\n        \"uniqueViewsCount\": 1,\n        \"uniqueClicksCount\": 1,\n        \"sharesCount\": 5,\n        \"viewsCount\": 10,\n        \"favoritesCount\": 0,\n        \"sessionsCount\": 40,\n        \"sales\": {\n          \"amount\": \"304.50\",\n          \"currencyCode\": \"CAD\"\n        },\n        \"orders\": 8,\n        \"firstTimeCustomers\": 5.0,\n        \"returningCustomers\": 3.0\n      },\n      \"marketingActivityId\": null,\n      \"channelHandle\": null,\n      \"remoteId\": \"1234:5678\"\n    },\n  },\n});\n"}, {"description": "Create channel-level engagement for a channel handle", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation M($marketingEngagement: MarketingEngagementInput!, $marketingActivityId: ID, $channelHandle: String, $remoteId: String) {\n      marketingEngagementCreate(marketingEngagement: $marketingEngagement, marketingActivityId: $marketingActivityId, channelHandle: $channelHandle, remoteId: $remoteId) {\n        marketingEngagement {\n          occurredOn\n          utcOffset\n          isCumulative\n          adSpend {\n            amount\n            currencyCode\n          }\n          clicksCount\n          impressionsCount\n          commentsCount\n          favoritesCount\n          unsubscribesCount\n          complaintsCount\n          failsCount\n          sendsCount\n          uniqueViewsCount\n          uniqueClicksCount\n          sharesCount\n          viewsCount\n          sessionsCount\n          sales {\n            amount\n            currencyCode\n          }\n          orders\n          firstTimeCustomers\n          returningCustomers\n          marketingActivity {\n            id\n          }\n          channelHandle\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"marketingEngagement\": {\n        \"occurredOn\": \"2018-06-29\",\n        \"utcOffset\": \"-07:00\",\n        \"isCumulative\": false,\n        \"adSpend\": {\n          \"currencyCode\": \"CAD\",\n          \"amount\": \"19.90\"\n        },\n        \"impressionsCount\": 100,\n        \"clicksCount\": 40,\n        \"commentsCount\": 1,\n        \"unsubscribesCount\": 1,\n        \"complaintsCount\": 1,\n        \"failsCount\": 1,\n        \"sendsCount\": 1,\n        \"uniqueViewsCount\": 1,\n        \"uniqueClicksCount\": 1,\n        \"sharesCount\": 5,\n        \"viewsCount\": 10,\n        \"favoritesCount\": 0,\n        \"sessionsCount\": 40,\n        \"sales\": {\n          \"amount\": \"304.50\",\n          \"currencyCode\": \"CAD\"\n        },\n        \"orders\": 8,\n        \"firstTimeCustomers\": 5.0,\n        \"returningCustomers\": 3.0\n      },\n      \"marketingActivityId\": null,\n      \"channelHandle\": \"my-channel-handle\",\n      \"remoteId\": null\n    },\n  },\n});\n"}, {"description": "Creates marketing engagements on a marketing event", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation M($marketingEngagement: MarketingEngagementInput!, $marketingActivityId: ID!) {\n      marketingEngagementCreate(marketingEngagement: $marketingEngagement, marketingActivityId: $marketingActivityId) {\n        marketingEngagement {\n          occurredOn\n          clicksCount\n          commentsCount\n          favoritesCount\n          impressionsCount\n          unsubscribesCount\n          complaintsCount\n          failsCount\n          sendsCount\n          uniqueViewsCount\n          uniqueClicksCount\n          isCumulative\n          utcOffset\n          adSpend {\n            amount\n            currencyCode\n          }\n          marketingActivity {\n            id\n          }\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"marketingEngagement\": {\n        \"occurredOn\": \"2018-06-29\",\n        \"adSpend\": {\n          \"currencyCode\": \"CAD\",\n          \"amount\": \"19.90\"\n        },\n        \"utcOffset\": \"-07:00\",\n        \"impressionsCount\": 100,\n        \"clicksCount\": 40,\n        \"commentsCount\": 1,\n        \"unsubscribesCount\": 1,\n        \"complaintsCount\": 1,\n        \"failsCount\": 1,\n        \"sendsCount\": 1,\n        \"uniqueViewsCount\": 1,\n        \"uniqueClicksCount\": 1,\n        \"isCumulative\": true,\n        \"favoritesCount\": 0\n      },\n      \"marketingActivityId\": \"gid://shopify/MarketingActivity/794355127\"\n    },\n  },\n});\n"}, {"description": "marketingEngagementCreate reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation M($marketingEngagement: MarketingEngagementInput!, $marketingActivityId: ID, $channelHandle: String, $remoteId: String) {\n      marketingEngagementCreate(marketingEngagement: $marketingEngagement, marketingActivityId: $marketingActivityId, channelHandle: $channelHandle, remoteId: $remoteId) {\n        marketingEngagement {\n          occurredOn\n          utcOffset\n          isCumulative\n          adSpend {\n            amount\n            currencyCode\n          }\n          clicksCount\n          impressionsCount\n          commentsCount\n          favoritesCount\n          unsubscribesCount\n          complaintsCount\n          failsCount\n          sendsCount\n          uniqueViewsCount\n          uniqueClicksCount\n          sharesCount\n          viewsCount\n          sessionsCount\n          sales {\n            amount\n            currencyCode\n          }\n          orders\n          firstTimeCustomers\n          returningCustomers\n          marketingActivity {\n            id\n          }\n          channelHandle\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"marketingEngagement\": {\n        \"occurredOn\": \"2018-06-29\",\n        \"utcOffset\": \"-07:00\",\n        \"isCumulative\": false,\n        \"adSpend\": {\n          \"currencyCode\": \"CAD\",\n          \"amount\": \"19.90\"\n        },\n        \"impressionsCount\": 100,\n        \"clicksCount\": 40,\n        \"commentsCount\": 1,\n        \"unsubscribesCount\": 1,\n        \"complaintsCount\": 1,\n        \"failsCount\": 1,\n        \"sendsCount\": 1,\n        \"uniqueViewsCount\": 1,\n        \"uniqueClicksCount\": 1,\n        \"sharesCount\": 5,\n        \"viewsCount\": 10,\n        \"favoritesCount\": 0,\n        \"sessionsCount\": 40,\n        \"sales\": {\n          \"amount\": \"304.50\",\n          \"currencyCode\": \"CAD\"\n        },\n        \"orders\": 8,\n        \"firstTimeCustomers\": 5.0,\n        \"returningCustomers\": 3.0\n      },\n      \"marketingActivityId\": \"gid://shopify/MarketingActivity/794355127\",\n      \"channelHandle\": null,\n      \"remoteId\": null\n    },\n  },\n});\n"}]}, {"name": "marketingEngagementsDelete", "description": "Marks channel-level engagement data such that it no longer appears in reports.\n          Activity-level data cannot be deleted directly, instead the MarketingActivity itself should be deleted to\n          hide it from reports.", "arguments": [{"name": "channelHandle", "type": "String", "required": false, "description": "The handle of the channel for which engagement data should be deleted."}, {"name": "deleteEngagementsForAllChannels", "type": "Boolean", "required": false, "description": "When true, engagements for all channels that belong to the api client will be deleted."}], "returns": [], "examples": [{"description": "Mark all channel level engagement data associated to the api client for deletion", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `mutation M($channelHandle: String, $deleteEngagementsForAllChannels: Boolean) {\n    marketingEngagementsDelete(channelHandle: $channelHandle, deleteEngagementsForAllChannels: $deleteEngagementsForAllChannels) {\n      result\n      userErrors {\n        field\n        message\n      }\n    }\n  }`,\n});\n"}, {"description": "Mark engagement data associated to a specific channel for deletion", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `mutation M($channelHandle: String, $deleteEngagementsForAllChannels: Boolean) {\n    marketingEngagementsDelete(channelHandle: $channelHandle, deleteEngagementsForAllChannels: $deleteEngagementsForAllChannels) {\n      result\n      userErrors {\n        field\n        message\n      }\n    }\n  }`,\n});\n"}, {"description": "marketingEngagementsDelete reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `mutation M($channelHandle: String, $deleteEngagementsForAllChannels: Boolean) {\n    marketingEngagementsDelete(channelHandle: $channelHandle, deleteEngagementsForAllChannels: $deleteEngagementsForAllChannels) {\n      result\n      userErrors {\n        field\n        message\n      }\n    }\n  }`,\n});\n"}]}, {"name": "pubSubServerPixelUpdate", "description": "Updates the server pixel to connect to a Google PubSub endpoint.\nRunning this mutation deletes any previous subscriptions for the server pixel.", "arguments": [{"name": "pubSubProject", "type": "String!", "required": false, "description": "The Google PubSub project ID."}, {"name": "pubSubTopic", "type": "String!", "required": false, "description": "The Google PubSub topic ID."}], "returns": [], "examples": []}, {"name": "serverPixelCreate", "description": "Creates a new unconfigured server pixel. A single server pixel can exist for an app and shop combination. If you call this mutation when a server pixel already exists, then an error will return.", "arguments": [], "returns": [], "examples": []}, {"name": "serverPixelDelete", "description": "Deletes the Server Pixel associated with the current app & shop.", "arguments": [], "returns": [], "examples": []}, {"name": "webPixelCreate", "description": "Activate a web pixel extension\nby creating a web pixel record on the store where you installed your app.\nWhen you run the webPixelCreate mutation, Shopify validates it\nagainst the settings definition in shopify.extension.toml. If the settings input field doesn't match\nthe schema that you defined, then the mutation fails. Learn how to\ndefine web pixel settings.", "arguments": [{"name": "webPixel", "type": "WebPixelInput!", "required": false, "description": "The web pixel settings in JSON format."}], "returns": [], "examples": [{"description": "Create a web pixel", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation webPixelCreate($webPixel: WebPixelInput!) {\n      webPixelCreate(webPixel: $webPixel) {\n        userErrors {\n          field\n          message\n          code\n        }\n        webPixel {\n          id\n          settings\n        }\n      }\n    }`,\n    \"variables\": {\n      \"webPixel\": {\n        \"settings\": {\n          \"trackingId\": \"GA-TRACKING-ID-123\"\n        }\n      }\n    },\n  },\n});\n"}, {"description": "Creating a web pixel with invalid settings returns an error", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation webPixelCreate($webPixel: WebPixelInput!) {\n      webPixelCreate(webPixel: $webPixel) {\n        userErrors {\n          field\n          message\n          code\n        }\n        webPixel {\n          id\n          settings\n        }\n      }\n    }`,\n    \"variables\": {\n      \"webPixel\": {\n        \"settings\": {}\n      }\n    },\n  },\n});\n"}, {"description": "webPixelCreate reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation webPixelCreate($webPixel: WebPixelInput!) {\n      webPixelCreate(webPixel: $webPixel) {\n        userErrors {\n          field\n          message\n          code\n        }\n        webPixel {\n          id\n          settings\n        }\n      }\n    }`,\n    \"variables\": {\n      \"webPixel\": {\n        \"settings\": {\n          \"trackingId\": \"GA-TRACKING-ID-123\"\n        }\n      }\n    },\n  },\n});\n"}]}, {"name": "webPixelDelete", "description": "Deletes the web pixel shop settings.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of the web pixel to delete."}], "returns": [], "examples": []}, {"name": "webPixelUpdate", "description": "Activate a web pixel extension\nby updating a web pixel record on the store where you installed your app.\nWhen you run the webPixelUpdate mutation, Shopify validates it\nagainst the settings definition in shopify.extension.toml. If the settings input field doesn't match\nthe schema that you defined, then the mutation fails. Learn how to\ndefine web pixel settings.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of the web pixel to update."}, {"name": "webPixel", "type": "WebPixelInput!", "required": false, "description": "The web pixel settings in JSON format."}], "returns": [], "examples": []}], "objects": [{"name": "Abandonment", "description": "A browse, cart, or checkout that was abandoned by a customer.", "fields_and_connections": [{"name": "abandonedCheckoutPayload", "type": "abandonment", "description": "Returns an abandonment by ID.", "not_nullable": false}, {"name": "abandonedCheckoutPayload", "type": "abandonmentByAbandonedCheckoutId", "description": "Returns an Abandonment by the Abandoned Checkout ID.", "not_nullable": false}, {"name": "abandonedCheckoutPayload", "type": "abandonmentUpdateActivitiesDeliveryStatuses", "description": "Updates the marketing activities delivery statuses for an abandonment.", "not_nullable": false}, {"name": "abandonedCheckoutPayload", "type": "abandonmentEmailStateUpdate", "description": "Updates the email state value for an abandonment. Use abandonmentUpdateActivitiesDeliveryStatuses instead.", "not_nullable": false}, {"name": "abandonedCheckoutPayload", "type": "Node", "description": "The abandonment payload for the abandoned checkout.", "not_nullable": false}], "examples": []}, {"name": "AllDiscountItems", "description": "Targets all items the cart for a specified discount.", "fields_and_connections": [{"name": "allItems", "type": "Boolean!", "description": "Whether all items are eligible for the discount. This value always returns true.", "not_nullable": true}], "examples": []}, {"name": "AppDiscountType", "description": "The details about the app extension that's providing the\ndiscount type.\nThis information includes the app extension's name and\nclient ID,\nApp Bridge configuration,\ndiscount class,\nfunction ID,\nand other metadata about the discount type, including the discount type's name and description.", "fields_and_connections": [{"name": "app", "type": "appDiscountType", "description": "An app discount type.", "not_nullable": false}, {"name": "app", "type": "appDiscountTypes", "description": "A list of app discount types installed by apps.", "not_nullable": false}, {"name": "app", "type": "appDiscountTypesNodes", "description": "A list of app discount types installed by apps.", "not_nullable": false}], "examples": []}, {"name": "CustomerJourney", "description": "Represents a customer's visiting activities on a shop's online store.", "fields_and_connections": [{"name": "customerOrderIndex", "type": "Int!", "description": "The position of the current order within the customer's order history.", "not_nullable": true}, {"name": "daysToConversion", "type": "Int!", "description": "The amount of days between first session and order creation date. First session represents first session since the last order, or first session within the 30 day attribution window, if more than 30 days has passed since the last order.", "not_nullable": true}, {"name": "firstVisit", "type": "CustomerVisit!", "description": "The customer's first session going into the shop.", "not_nullable": true}, {"name": "lastVisit", "type": "CustomerVisit", "description": "The last session before an order is made.", "not_nullable": false}, {"name": "moments", "type": "[CustomerMoment!]!", "description": "Events preceding a customer order, such as shop sessions.", "not_nullable": true}], "examples": []}, {"name": "CustomerJourneySummary", "description": "Represents a customer's visiting activities on a shop's online store.", "fields_and_connections": [{"name": "customerOrderIndex", "type": "Int", "description": "The position of the current order within the customer's order history. Test orders aren't included.", "not_nullable": false}, {"name": "daysToConversion", "type": "Int", "description": "The number of days between the first session and the order creation date. The first session represents the first session since the last order, or the first session within the 30 day attribution window, if more than 30 days have passed since the last order.", "not_nullable": false}, {"name": "firstVisit", "type": "CustomerVisit", "description": "The customer's first session going into the shop.", "not_nullable": false}, {"name": "lastVisit", "type": "CustomerVisit", "description": "The last session before an order is made.", "not_nullable": false}, {"name": "moments", "type": "CustomerMomentConnection", "description": "The events preceding a customer's order, such as shop sessions.", "not_nullable": false}, {"name": "momentsCount", "type": "Count", "description": "The total number of customer moments associated with this order. Returns null if the order is still in the process of being attributed.", "not_nullable": false}, {"name": "ready", "type": "Boolean!", "description": "Whether the attributed sessions for the order have been created yet.", "not_nullable": true}], "examples": []}, {"name": "CustomerVisit", "description": "Represents a customer's session visiting a shop's online store, including information about the marketing activity attributed to starting the session.", "fields_and_connections": [{"name": "id", "type": "CustomerMoment", "description": "A globally-unique ID.", "not_nullable": false}, {"name": "id", "type": "Node", "description": "A globally-unique ID.", "not_nullable": false}], "examples": []}, {"name": "CustomerVisitProductInfo", "description": "This type returns the information about the product and product variant from a customer visit.", "fields_and_connections": [{"name": "product", "type": "Product", "description": "The product information. If null, then the product was deleted from the store.", "not_nullable": false}, {"name": "quantity", "type": "Int!", "description": "The quantity of the product that the customer requested.", "not_nullable": true}, {"name": "variant", "type": "ProductVariant", "description": "The product variant information, if the product variant exists.", "not_nullable": false}], "examples": []}, {"name": "DiscountAmount", "description": "The fixed amount value of a discount, and whether the amount is applied to each entitled item or spread evenly across the entitled items.", "fields_and_connections": [{"name": "amount", "type": "MoneyV2!", "description": "The value of the discount.", "not_nullable": true}, {"name": "appliesOnEachItem", "type": "Boolean!", "description": "If true, then the discount is applied to each of the entitled items. If false, then the amount is split across all of the entitled items.", "not_nullable": true}], "examples": []}, {"name": "DiscountAutomaticApp", "description": "The DiscountAutomaticApp object stores information about automatic discounts\nthat are managed by an app using\nShopify Functions.\nUse DiscountAutomaticAppwhen you need advanced, custom, or\ndynamic discount capabilities that aren't supported by\nShopify's native discount types.\nLearn more about creating\ncustom discount functionality.\nNoteThe DiscountCodeApp\nobject has similar functionality to the DiscountAutomaticApp object, with the exception that DiscountCodeApp\nstores information about discount codes that are managed by an app using Shopify Functions.", "fields_and_connections": [{"name": "appDiscountType", "type": "discountAutomaticAppCreate", "description": "Creates an automatic discount that's managed by an app.\nUse this mutation with Shopify Functions\nwhen you need advanced, custom, or dynamic discount capabilities that aren't supported by\nShopify's native discount types.\nFor example, use this mutation to create an automatic discount using an app's\n\"Volume\" discount type that applies a percentage\noff when customers purchase more than the minimum quantity of a product. For an example implementation,\nrefer to our tutorial.\nNoteTo create code discounts with custom logic, use the\ndiscountCodeAppCreate\nmutation.", "not_nullable": false}, {"name": "appDiscountType", "type": "discountAutomaticAppUpdate", "description": "Updates an existing automatic discount that's managed by an app using\nShopify Functions.\nUse this mutation when you need advanced, custom, or\ndynamic discount capabilities that aren't supported by\nShopify's native discount types.\nFor example, use this mutation to update a new \"Volume\" discount type that applies a percentage\noff when customers purchase more than the minimum quantity of a product. For an example implementation,\nrefer to our tutorial.\nNoteTo update code discounts with custom logic, use the\ndiscountCodeAppUpdate\nmutation instead.", "not_nullable": false}], "examples": []}, {"name": "DiscountAutomaticBasic", "description": "The DiscountAutomaticBasic object lets you manage\namount off discounts\nthat are automatically applied on a cart and at checkout. Amount off discounts give customers a\nfixed value or a percentage off the products in an order, but don't apply to shipping costs.\nThe DiscountAutomaticBasic object stores information about automatic amount off discounts that apply to\nspecific products and variants,\ncollections,\nor all items in a cart.\nLearn more about working with Shopify's discount model,\nincluding limitations and considerations.\nNoteThe DiscountCodeBasic\nobject has similar functionality to the DiscountAutomaticBasic object, but customers need to enter a code to\nreceive a discount.", "fields_and_connections": [{"name": "asyncUsageCount", "type": "Int!", "description": "The number of times that the discount has been used.\nFor example, if a \"Buy 3, Get 1 Free\" t-shirt discount\nis automatically applied in 200 transactions, then the\ndiscount has been used 200 times.\nThis value is updated asynchronously. As a result,\nit might be lower than the actual usage count until the\nasynchronous process is completed.", "not_nullable": true}, {"name": "combinesWith", "type": "DiscountCombinesWith!", "description": "The\ndiscount classes\nthat you can use in combination with\nShopify discount types.", "not_nullable": true}, {"name": "createdAt", "type": "DateTime!", "description": "The date and time when the discount was created.", "not_nullable": true}, {"name": "customerGets", "type": "DiscountCustomerGets!", "description": "The items in the order that qualify for the discount, their quantities, and the total value of the discount.", "not_nullable": true}, {"name": "discountClasses", "type": "[DiscountClass!]!", "description": "The classes of the discount.", "not_nullable": true}, {"name": "endsAt", "type": "DateTime", "description": "The date and time when the discount expires and is no longer available to customers.\nFor discounts without a fixed expiration date, specify null.", "not_nullable": false}, {"name": "minimumRequirement", "type": "DiscountMinimumRequirement", "description": "The minimum subtotal or quantity of items that are required for the discount to be applied.", "not_nullable": false}, {"name": "recurringCycleLimit", "type": "Int!", "description": "The number of billing cycles for which the discount can be applied,\nwhich is useful for subscription-based discounts. For example, if you set this field\nto 3, then the discount only applies to the first three billing cycles of a\nsubscription. If you specify 0, then the discount applies indefinitely.", "not_nullable": true}, {"name": "shortSummary", "type": "String!", "description": "An abbreviated version of the discount\nsummary\nfield.", "not_nullable": true}, {"name": "startsAt", "type": "DateTime!", "description": "The date and time when the discount becomes active and is available to customers.", "not_nullable": true}, {"name": "status", "type": "DiscountStatus!", "description": "The status of the discount that describes its availability,\nexpiration, or pending activation.", "not_nullable": true}, {"name": "summary", "type": "String!", "description": "A detailed explanation of what the discount is,\nwho can use it, when and where it applies, and any associated\nrules or limitations.", "not_nullable": true}, {"name": "title", "type": "String!", "description": "The discount's name that displays to merchants in the Shopify admin and to customers.", "not_nullable": true}, {"name": "updatedAt", "type": "DateTime!", "description": "The date and time when the discount was updated.", "not_nullable": true}, {"name": "discountClass", "type": "MerchandiseDiscountClass!", "description": "The discount class\nthat's used to control how discounts can be combined. Use discountClasses instead.", "not_nullable": true}, {"name": "usageCount", "type": "Int!", "description": "The number of times that the discount has been used. Use asyncUsageCount instead.", "not_nullable": true}], "examples": []}, {"name": "DiscountAutomaticBxgy", "description": "The DiscountAutomaticBxgy object lets you manage\nbuy X get Y discounts (BXGY)\nthat are automatically applied on a cart and at checkout. BXGY discounts incentivize customers by offering\nthem additional items at a discounted price or for free when they purchase a specified quantity of items.\nThe DiscountAutomaticBxgy object stores information about automatic BXGY discounts that apply to\nspecific products and variants,\ncollections,\nor all items in a cart.\nLearn more about working with Shopify's discount model,\nincluding limitations and considerations.\nNoteThe DiscountCodeBxgy\nobject has similar functionality to the DiscountAutomaticBxgy object, but customers need to enter a code to\nreceive a discount.", "fields_and_connections": [{"name": "asyncUsageCount", "type": "HasEvents", "description": "The number of times that the discount has been used.\nFor example, if a \"Buy 3, Get 1 Free\" t-shirt discount\nis automatically applied in 200 transactions, then the\ndiscount has been used 200 times.\nThis value is updated asynchronously. As a result,\nit might be lower than the actual usage count until the\nasynchronous process is completed.", "not_nullable": false}, {"name": "asyncUsageCount", "type": "Node", "description": "The number of times that the discount has been used.\nFor example, if a \"Buy 3, Get 1 Free\" t-shirt discount\nis automatically applied in 200 transactions, then the\ndiscount has been used 200 times.\nThis value is updated asynchronously. As a result,\nit might be lower than the actual usage count until the\nasynchronous process is completed.", "not_nullable": false}], "examples": []}, {"name": "DiscountAutomaticFreeShipping", "description": "The DiscountAutomaticFreeShipping object lets you manage\nfree shipping discounts\nthat are automatically applied on a cart and at checkout. Free shipping discounts are promotional deals that\nmerchants offer to customers to waive shipping costs and encourage online purchases.\nThe DiscountAutomaticFreeShipping object stores information about automatic free shipping discounts that apply to\nspecific products and variants,\ncollections,\nor all items in a cart.\nLearn more about working with Shopify's discount model,\nincluding limitations and considerations.\nNoteThe DiscountCodeFreeShipping\nobject has similar functionality to the DiscountAutomaticFreeShipping object, but customers need to enter a code to\nreceive a discount.", "fields_and_connections": [{"name": "appliesOnOneTimePurchase", "type": "Boolean!", "description": "Whether the discount applies on one-time purchases.\nA one-time purchase is a transaction where you pay a\nsingle time for a product, without any ongoing\ncommitments or recurring charges.", "not_nullable": true}, {"name": "appliesOnSubscription", "type": "Boolean!", "description": "Whether the discount applies on subscription items.\nSubscriptions\nenable customers to purchase products\non a recurring basis.", "not_nullable": true}, {"name": "asyncUsageCount", "type": "Int!", "description": "The number of times that the discount has been used.\nFor example, if a \"Buy 3, Get 1 Free\" t-shirt discount\nis automatically applied in 200 transactions, then the\ndiscount has been used 200 times.\nThis value is updated asynchronously. As a result,\nit might be lower than the actual usage count until the\nasynchronous process is completed.", "not_nullable": true}, {"name": "combinesWith", "type": "DiscountCombinesWith!", "description": "The\ndiscount classes\nthat you can use in combination with\nShopify discount types.", "not_nullable": true}, {"name": "createdAt", "type": "DateTime!", "description": "The date and time when the discount was created.", "not_nullable": true}, {"name": "destinationSelection", "type": "DiscountShippingDestinationSelection!", "description": "The countries that qualify for the discount.\nYou can define\na list of countries\nor specify all countries\nto be eligible for the discount.", "not_nullable": true}, {"name": "discountClasses", "type": "[DiscountClass!]!", "description": "The classes of the discount.", "not_nullable": true}, {"name": "endsAt", "type": "DateTime", "description": "The date and time when the discount expires and is no longer available to customers.\nFor discounts without a fixed expiration date, specify null.", "not_nullable": false}, {"name": "hasTimelineComment", "type": "Boolean!", "description": "Whether there are\ntimeline comments\nassociated with the discount.", "not_nullable": true}, {"name": "maximumShippingPrice", "type": "MoneyV2", "description": "The maximum shipping price amount accepted to qualify for the discount.", "not_nullable": false}, {"name": "minimumRequirement", "type": "DiscountMinimumRequirement", "description": "The minimum subtotal or quantity of items that are required for the discount to be applied.", "not_nullable": false}, {"name": "recurringCycleLimit", "type": "Int!", "description": "The number of billing cycles for which the discount can be applied,\nwhich is useful for subscription-based discounts. For example, if you set this field\nto 3, then the discount only applies to the first three billing cycles of a\nsubscription. If you specify 0, then the discount applies indefinitely.", "not_nullable": true}, {"name": "shortSummary", "type": "String!", "description": "An abbreviated version of the discount\nsummary\nfield.", "not_nullable": true}, {"name": "startsAt", "type": "DateTime!", "description": "The date and time when the discount becomes active and is available to customers.", "not_nullable": true}, {"name": "status", "type": "DiscountStatus!", "description": "The status of the discount that describes its availability,\nexpiration, or pending activation.", "not_nullable": true}, {"name": "summary", "type": "String!", "description": "A detailed explanation of what the discount is,\nwho can use it, when and where it applies, and any associated\nrules or limitations.", "not_nullable": true}, {"name": "title", "type": "String!", "description": "The discount's name that displays to merchants in the Shopify admin and to customers.", "not_nullable": true}, {"name": "totalSales", "type": "MoneyV2", "description": "The total sales from orders where the discount was used.", "not_nullable": false}, {"name": "updatedAt", "type": "DateTime!", "description": "The date and time when the discount was updated.", "not_nullable": true}, {"name": "discountClass", "type": "ShippingDiscountClass!", "description": "The discount class\nthat's used to control how discounts can be combined. Use discountClasses instead.", "not_nullable": true}], "examples": []}, {"name": "DiscountAutomaticNode", "description": "The DiscountAutomaticNode object enables you to manage automatic discounts that are applied when an order meets specific criteria. You can create amount off, free shipping, or buy X get Y automatic discounts. For example, you can offer customers a free shipping discount that applies when conditions are met. Or you can offer customers a buy X get Y discount that's automatically applied when customers spend a specified amount of money, or a specified quantity of products.\nLearn more about working with Shopify's discount model,\nincluding related queries, mutations, limitations, and considerations.", "fields_and_connections": [{"name": "automaticDiscount", "type": "automaticDiscountNode", "description": "Returns an automatic discount resource by ID.", "not_nullable": false}, {"name": "automaticDiscount", "type": "automaticDiscountNodes", "description": "Returns a list of automatic discounts.", "not_nullable": false}, {"name": "automaticDiscount", "type": "discountAutomaticActivate", "description": "Activates an automatic discount.", "not_nullable": false}, {"name": "automaticDiscount", "type": "discountAutomaticBasicCreate", "description": "Creates an\namount off discount\nthat's automatically applied on a cart and at checkout.\nNoteTo create code discounts, use the\ndiscountCodeBasicCreate\nmutation.", "not_nullable": false}, {"name": "automaticDiscount", "type": "discountAutomaticBasicUpdate", "description": "Updates an existing\namount off discount\nthat's automatically applied on a cart and at checkout.\nNoteTo update code discounts, use the\ndiscountCodeBasicUpdate\nmutation instead.", "not_nullable": false}, {"name": "automaticDiscount", "type": "discountAutomaticBxgyCreate", "description": "Creates a\nbuy X get Y discount (BXGY)\nthat's automatically applied on a cart and at checkout.\nNoteTo create code discounts, use the\ndiscountCodeBxgyCreate\nmutation.", "not_nullable": false}, {"name": "automaticDiscount", "type": "discountAutomaticBxgyUpdate", "description": "Updates an existing\nbuy X get Y discount (BXGY)\nthat's automatically applied on a cart and at checkout.\nNoteTo update code discounts, use the\ndiscountCodeBxgyUpdate\nmutation instead.", "not_nullable": false}, {"name": "automaticDiscount", "type": "discountAutomaticDeactivate", "description": "Deactivates an automatic discount.", "not_nullable": false}, {"name": "automaticDiscount", "type": "discountAutomaticFreeShippingCreate", "description": "Creates a\nfree shipping discount\nthat's automatically applied on a cart and at checkout.\nNoteTo create code discounts, use the\ndiscountCodeFreeShippingCreate\nmutation.", "not_nullable": false}, {"name": "automaticDiscount", "type": "discountAutomaticFreeShippingUpdate", "description": "Updates an existing\nfree shipping discount\nthat's automatically applied on a cart and at checkout.\nNoteTo update code discounts, use the\ndiscountCodeFreeShippingUpdate\nmutation instead.", "not_nullable": false}, {"name": "automaticDiscount", "type": "HasEvents", "description": "A discount that's applied automatically when an order meets specific criteria. Learn more about automatic discounts.", "not_nullable": false}, {"name": "automaticDiscount", "type": "HasMetafieldDefinitions", "description": "A discount that's applied automatically when an order meets specific criteria. Learn more about automatic discounts.", "not_nullable": false}, {"name": "automaticDiscount", "type": "HasMetafields", "description": "A discount that's applied automatically when an order meets specific criteria. Learn more about automatic discounts.", "not_nullable": false}, {"name": "automaticDiscount", "type": "Node", "description": "A discount that's applied automatically when an order meets specific criteria. Learn more about automatic discounts.", "not_nullable": false}], "examples": []}, {"name": "DiscountCodeApp", "description": "The DiscountCodeApp object stores information about code discounts\nthat are managed by an app using\nShopify Functions.\nUse DiscountCodeApp when you need advanced, custom, or\ndynamic discount capabilities that aren't supported by\nShopify's native discount types.\nLearn more about creating\ncustom discount functionality.\nNoteThe DiscountAutomaticApp\nobject has similar functionality to the DiscountCodeApp object, with the exception that DiscountAutomaticApp\nstores information about automatic discounts that are managed by an app using Shopify Functions.", "fields_and_connections": [{"name": "appDiscountType", "type": "discountCodeAppCreate", "description": "Creates a code discount. The discount type must be provided by an app extension that uses Shopify Functions. Functions can implement order, product, or shipping discount functions. Use this mutation with Shopify Functions when you need custom logic beyond Shopify's native discount types.\nFor example, use this mutation to create a code discount using an app's \"Volume\" discount type that applies a percentage off when customers purchase more than the minimum quantity\nof a product. For an example implementation, refer to our tutorial.\nNoteTo create automatic discounts with custom logic, use discountAutomaticAppCreate.", "not_nullable": false}, {"name": "appDiscountType", "type": "discountCodeAppUpdate", "description": "Updates a code discount, where the discount type is provided by an app extension that uses Shopify Functions. Use this mutation when you need advanced, custom, or dynamic discount capabilities that aren't supported by Shopify's native discount types.\nNoteTo update automatic discounts, use discountAutomaticAppUpdate.", "not_nullable": false}], "examples": []}, {"name": "DiscountCodeBasic", "description": "The DiscountCodeBasic object lets you manage\namount off discounts\nthat are applied on a cart and at checkout when a customer enters a code. Amount off discounts give customers a\nfixed value or a percentage off the products in an order, but don't apply to shipping costs.\nThe DiscountCodeBasic object stores information about amount off code discounts that apply to\nspecific products and variants,\ncollections,\nor all items in a cart.\nLearn more about working with Shopify's discount model,\nincluding limitations and considerations.\nNoteThe DiscountAutomaticBasic\nobject has similar functionality to the DiscountCodeBasic object, but discounts are automatically applied,\nwithout the need for customers to enter a code.", "fields_and_connections": [{"name": "appliesOncePerCustomer", "type": "Boolean!", "description": "Whether a customer can only use the discount once.", "not_nullable": true}, {"name": "asyncUsageCount", "type": "Int!", "description": "The number of times that the discount has been used.\nFor example, if a \"Buy 3, Get 1 Free\" t-shirt discount\nis automatically applied in 200 transactions, then the\ndiscount has been used 200 times.\nThis value is updated asynchronously. As a result,\nit might be lower than the actual usage count until the\nasynchronous process is completed.", "not_nullable": true}, {"name": "codes", "type": "DiscountRedeemCodeConnection!", "description": "A list codes that customers can use to redeem the discount.", "not_nullable": true}, {"name": "codesCount", "type": "Count", "description": "The number of codes that a customer can use to redeem the discount.", "not_nullable": false}, {"name": "combinesWith", "type": "DiscountCombinesWith!", "description": "The\ndiscount classes\nthat you can use in combination with\nShopify discount types.", "not_nullable": true}, {"name": "createdAt", "type": "DateTime!", "description": "The date and time when the discount was created.", "not_nullable": true}, {"name": "customerGets", "type": "DiscountCustomerGets!", "description": "The items in the order that qualify for the discount, their quantities, and the total value of the discount.", "not_nullable": true}, {"name": "customerSelection", "type": "DiscountCustomerSelection!", "description": "The customers that can use the discount.", "not_nullable": true}, {"name": "discountClasses", "type": "[DiscountClass!]!", "description": "The classes of the discount.", "not_nullable": true}, {"name": "endsAt", "type": "DateTime", "description": "The date and time when the discount expires and is no longer available to customers.\nFor discounts without a fixed expiration date, specify null.", "not_nullable": false}, {"name": "hasTimelineComment", "type": "Boolean!", "description": "Whether there are\ntimeline comments\nassociated with the discount.", "not_nullable": true}, {"name": "minimumRequirement", "type": "DiscountMinimumRequirement", "description": "The minimum subtotal or quantity of items that are required for the discount to be applied.", "not_nullable": false}, {"name": "recurringCycleLimit", "type": "Int", "description": "The number of billing cycles for which the discount can be applied,\nwhich is useful for subscription-based discounts. For example, if you set this field\nto 3, then the discount only applies to the first three billing cycles of a\nsubscription. If you specify 0, then the discount applies indefinitely.", "not_nullable": false}, {"name": "shareableUrls", "type": "[DiscountShareableUrl!]!", "description": "A list of URLs that the app can use to share the discount.", "not_nullable": true}, {"name": "shortSummary", "type": "String!", "description": "An abbreviated version of the discount\nsummary\nfield.", "not_nullable": true}, {"name": "startsAt", "type": "DateTime!", "description": "The date and time when the discount becomes active and is available to customers.", "not_nullable": true}, {"name": "status", "type": "DiscountStatus!", "description": "The status of the discount that describes its availability,\nexpiration, or pending activation.", "not_nullable": true}, {"name": "summary", "type": "String!", "description": "A detailed explanation of what the discount is,\nwho can use it, when and where it applies, and any associated\nrules or limitations.", "not_nullable": true}, {"name": "title", "type": "String!", "description": "The discount's name that displays to merchants in the Shopify admin and to customers.", "not_nullable": true}, {"name": "totalSales", "type": "MoneyV2", "description": "The total sales from orders where the discount was used.", "not_nullable": false}, {"name": "updatedAt", "type": "DateTime!", "description": "The date and time when the discount was updated.", "not_nullable": true}, {"name": "usageLimit", "type": "Int", "description": "The maximum number of times that a customer can use the discount.\nFor discounts with unlimited usage, specify null.", "not_nullable": false}, {"name": "discountClass", "type": "MerchandiseDiscountClass!", "description": "The discount class\nthat's used to control how discounts can be combined. Use discountClasses instead.", "not_nullable": true}], "examples": []}, {"name": "DiscountCodeBxgy", "description": "The DiscountCodeBxgy object lets you manage\nbuy X get Y discounts (BXGY)\nthat are applied on a cart and at checkout when a customer enters a code. BXGY discounts incentivize customers\nby offering them additional items at a discounted price or for free when they purchase a specified quantity\nof items.\nThe DiscountCodeBxgy object stores information about BXGY code discounts that apply to\nspecific products and variants,\ncollections,\nor all items in a cart.\nLearn more about working with Shopify's discount model,\nincluding limitations and considerations.\nNoteThe DiscountAutomaticBxgy\nobject has similar functionality to the DiscountCodeBxgy object, but discounts are automatically applied,\nwithout the need for customers to enter a code.", "fields_and_connections": [{"name": "appliesOncePerCustomer", "type": "Boolean!", "description": "Whether a customer can only use the discount once.", "not_nullable": true}, {"name": "asyncUsageCount", "type": "Int!", "description": "The number of times that the discount has been used.\nFor example, if a \"Buy 3, Get 1 Free\" t-shirt discount\nis automatically applied in 200 transactions, then the\ndiscount has been used 200 times.\nThis value is updated asynchronously. As a result,\nit might be lower than the actual usage count until the\nasynchronous process is completed.", "not_nullable": true}, {"name": "codes", "type": "DiscountRedeemCodeConnection!", "description": "A list codes that customers can use to redeem the discount.", "not_nullable": true}, {"name": "codesCount", "type": "Count", "description": "The number of codes that a customer can use to redeem the discount.", "not_nullable": false}, {"name": "combinesWith", "type": "DiscountCombinesWith!", "description": "The\ndiscount classes\nthat you can use in combination with\nShopify discount types.", "not_nullable": true}, {"name": "createdAt", "type": "DateTime!", "description": "The date and time when the discount was created.", "not_nullable": true}, {"name": "customerBuys", "type": "DiscountCustomerBuys!", "description": "The items eligible for the discount and the required quantity of each to receive the discount.", "not_nullable": true}, {"name": "customerGets", "type": "DiscountCustomerGets!", "description": "The items in the order that qualify for the discount, their quantities, and the total value of the discount.", "not_nullable": true}, {"name": "customerSelection", "type": "DiscountCustomerSelection!", "description": "The customers that can use the discount.", "not_nullable": true}, {"name": "discountClasses", "type": "[DiscountClass!]!", "description": "The classes of the discount.", "not_nullable": true}, {"name": "endsAt", "type": "DateTime", "description": "The date and time when the discount expires and is no longer available to customers.\nFor discounts without a fixed expiration date, specify null.", "not_nullable": false}, {"name": "hasTimelineComment", "type": "Boolean!", "description": "Whether there are\ntimeline comments\nassociated with the discount.", "not_nullable": true}, {"name": "shareableUrls", "type": "[DiscountShareableUrl!]!", "description": "A list of URLs that the app can use to share the discount.", "not_nullable": true}, {"name": "startsAt", "type": "DateTime!", "description": "The date and time when the discount becomes active and is available to customers.", "not_nullable": true}, {"name": "status", "type": "DiscountStatus!", "description": "The status of the discount that describes its availability,\nexpiration, or pending activation.", "not_nullable": true}, {"name": "summary", "type": "String!", "description": "A detailed explanation of what the discount is,\nwho can use it, when and where it applies, and any associated\nrules or limitations.", "not_nullable": true}, {"name": "title", "type": "String!", "description": "The discount's name that displays to merchants in the Shopify admin and to customers.", "not_nullable": true}, {"name": "totalSales", "type": "MoneyV2", "description": "The total sales from orders where the discount was used.", "not_nullable": false}, {"name": "updatedAt", "type": "DateTime!", "description": "The date and time when the discount was updated.", "not_nullable": true}, {"name": "usageLimit", "type": "Int", "description": "The maximum number of times that a customer can use the discount.\nFor discounts with unlimited usage, specify null.", "not_nullable": false}, {"name": "usesPerOrderLimit", "type": "Int", "description": "The maximum number of times that the discount can be applied to an order.", "not_nullable": false}, {"name": "discountClass", "type": "MerchandiseDiscountClass!", "description": "The discount class\nthat's used to control how discounts can be combined. Use discountClasses instead.", "not_nullable": true}], "examples": []}, {"name": "DiscountCodeFreeShipping", "description": "The DiscountCodeFreeShipping object lets you manage\nfree shipping discounts\nthat are applied on a cart and at checkout when a customer enters a code. Free shipping discounts are\npromotional deals that merchants offer to customers to waive shipping costs and encourage online purchases.\nThe DiscountCodeFreeShipping object stores information about free shipping code discounts that apply to\nspecific products and variants,\ncollections,\nor all items in a cart.\nLearn more about working with Shopify's discount model,\nincluding limitations and considerations.\nNoteThe\nDiscountAutomaticFreeShipping\nobject has similar functionality to the DiscountCodeFreeShipping object, but discounts are automatically applied,\nwithout the need for customers to enter a code.", "fields_and_connections": [{"name": "appliesOncePerCustomer", "type": "Boolean!", "description": "Whether a customer can only use the discount once.", "not_nullable": true}, {"name": "appliesOnOneTimePurchase", "type": "Boolean!", "description": "Whether the discount applies on one-time purchases.\nA one-time purchase is a transaction where you pay a\nsingle time for a product, without any ongoing\ncommitments or recurring charges.", "not_nullable": true}, {"name": "appliesOnSubscription", "type": "Boolean!", "description": "Whether the discount applies on subscription items.\nSubscriptions\nenable customers to purchase products\non a recurring basis.", "not_nullable": true}, {"name": "asyncUsageCount", "type": "Int!", "description": "The number of times that the discount has been used.\nFor example, if a \"Buy 3, Get 1 Free\" t-shirt discount\nis automatically applied in 200 transactions, then the\ndiscount has been used 200 times.\nThis value is updated asynchronously. As a result,\nit might be lower than the actual usage count until the\nasynchronous process is completed.", "not_nullable": true}, {"name": "codes", "type": "DiscountRedeemCodeConnection!", "description": "A list codes that customers can use to redeem the discount.", "not_nullable": true}, {"name": "codesCount", "type": "Count", "description": "The number of codes that a customer can use to redeem the discount.", "not_nullable": false}, {"name": "combinesWith", "type": "DiscountCombinesWith!", "description": "The\ndiscount classes\nthat you can use in combination with\nShopify discount types.", "not_nullable": true}, {"name": "createdAt", "type": "DateTime!", "description": "The date and time when the discount was created.", "not_nullable": true}, {"name": "customerSelection", "type": "DiscountCustomerSelection!", "description": "The customers that can use the discount.", "not_nullable": true}, {"name": "destinationSelection", "type": "DiscountShippingDestinationSelection!", "description": "The countries that qualify for the discount.\nYou can define\na list of countries\nor specify all countries\nto be eligible for the discount.", "not_nullable": true}, {"name": "discountClasses", "type": "[DiscountClass!]!", "description": "The classes of the discount.", "not_nullable": true}, {"name": "endsAt", "type": "DateTime", "description": "The date and time when the discount expires and is no longer available to customers.\nFor discounts without a fixed expiration date, specify null.", "not_nullable": false}, {"name": "hasTimelineComment", "type": "Boolean!", "description": "Whether there are\ntimeline comments\nassociated with the discount.", "not_nullable": true}, {"name": "maximumShippingPrice", "type": "MoneyV2", "description": "The maximum shipping price amount accepted to qualify for the discount.", "not_nullable": false}, {"name": "minimumRequirement", "type": "DiscountMinimumRequirement", "description": "The minimum subtotal or quantity of items that are required for the discount to be applied.", "not_nullable": false}, {"name": "recurringCycleLimit", "type": "Int", "description": "The number of billing cycles for which the discount can be applied,\nwhich is useful for subscription-based discounts. For example, if you set this field\nto 3, then the discount only applies to the first three billing cycles of a\nsubscription. If you specify 0, then the discount applies indefinitely.", "not_nullable": false}, {"name": "shareableUrls", "type": "[DiscountShareableUrl!]!", "description": "A list of URLs that the app can use to share the discount.", "not_nullable": true}, {"name": "shortSummary", "type": "String!", "description": "An abbreviated version of the discount\nsummary\nfield.", "not_nullable": true}, {"name": "startsAt", "type": "DateTime!", "description": "The date and time when the discount becomes active and is available to customers.", "not_nullable": true}, {"name": "status", "type": "DiscountStatus!", "description": "The status of the discount that describes its availability,\nexpiration, or pending activation.", "not_nullable": true}, {"name": "summary", "type": "String!", "description": "A detailed explanation of what the discount is,\nwho can use it, when and where it applies, and any associated\nrules or limitations.", "not_nullable": true}, {"name": "title", "type": "String!", "description": "The discount's name that displays to merchants in the Shopify admin and to customers.", "not_nullable": true}, {"name": "totalSales", "type": "MoneyV2", "description": "The total sales from orders where the discount was used.", "not_nullable": false}, {"name": "updatedAt", "type": "DateTime!", "description": "The date and time when the discount was updated.", "not_nullable": true}, {"name": "usageLimit", "type": "Int", "description": "The maximum number of times that a customer can use the discount.\nFor discounts with unlimited usage, specify null.", "not_nullable": false}, {"name": "discountClass", "type": "ShippingDiscountClass!", "description": "The discount class\nthat's used to control how discounts can be combined. Use discountClasses instead.", "not_nullable": true}], "examples": []}, {"name": "DiscountCodeNode", "description": "The DiscountCodeNode object enables you to manage code discounts that are applied when customers enter a code at checkout. For example, you can offer discounts where customers have to enter a code to redeem an amount off discount on products, variants, or collections in a store. Or, you can offer discounts where customers have to enter a code to get free shipping. Merchants can create and share discount codes individually with customers.\nLearn more about working with Shopify's discount model,\nincluding related queries, mutations, limitations, and considerations.", "fields_and_connections": [{"name": "codeDiscount", "type": "codeDiscountNode", "description": "Returns a code discount resource by ID.", "not_nullable": false}, {"name": "codeDiscount", "type": "codeDiscountNodeByCode", "description": "Returns a code discount identified by its discount code.", "not_nullable": false}, {"name": "codeDiscount", "type": "codeDiscountNodes", "description": "Returns a list of code-based discounts.", "not_nullable": false}, {"name": "codeDiscount", "type": "discountCodeActivate", "description": "Activates a code discount.", "not_nullable": false}, {"name": "codeDiscount", "type": "discountCodeBasicCreate", "description": "Creates an amount off discount that's applied on a cart and at checkout when a customer enters a code. Amount off discounts can be a percentage off or a fixed amount off.\nNoteTo create discounts that are automatically applied on a cart and at checkout, use the discountAutomaticBasicCreate mutation.", "not_nullable": false}, {"name": "codeDiscount", "type": "discountCodeBasicUpdate", "description": "Updates an amount off discount that's applied on a cart and at checkout when a customer enters a code. Amount off discounts can be a percentage off or a fixed amount off.\nNoteTo update discounts that are automatically applied on a cart and at checkout, use the discountAutomaticBasicUpdate mutation.", "not_nullable": false}, {"name": "codeDiscount", "type": "discountCodeBxgyCreate", "description": "Creates a\nbuy X get Y discount (BXGY)\nthat's applied on a cart and at checkout when a customer enters a code.\nNoteTo create discounts that are automatically applied on a cart and at checkout, use the\ndiscountAutomaticBxgyCreate\nmutation.", "not_nullable": false}, {"name": "codeDiscount", "type": "discountCodeBxgyUpdate", "description": "Updates a\nbuy X get Y discount (BXGY)\nthat's applied on a cart and at checkout when a customer enters a code.\nNoteTo update discounts that are automatically applied on a cart and at checkout, use the\ndiscountAutomaticBxgyUpdate\nmutation.", "not_nullable": false}, {"name": "codeDiscount", "type": "discountCodeDeactivate", "description": "Deactivates a code discount.", "not_nullable": false}, {"name": "codeDiscount", "type": "discountCodeFreeShippingCreate", "description": "Creates an free shipping discount that's applied on a cart and at checkout when a customer enters a code.\nNoteTo create discounts that are automatically applied on a cart and at checkout, use the discountAutomaticFreeShippingCreate mutation.", "not_nullable": false}, {"name": "codeDiscount", "type": "discountCodeFreeShippingUpdate", "description": "Updates a free shipping discount that's applied on a cart and at checkout when a customer enters a code.\nNoteTo update a free shipping discount that's automatically applied on a cart and at checkout, use the discountAutomaticFreeShippingUpdate mutation.", "not_nullable": false}, {"name": "codeDiscount", "type": "HasEvents", "description": "The underlying code discount object.", "not_nullable": false}, {"name": "codeDiscount", "type": "HasMetafieldDefinitions", "description": "The underlying code discount object.", "not_nullable": false}, {"name": "codeDiscount", "type": "HasMetafields", "description": "The underlying code discount object.", "not_nullable": false}, {"name": "codeDiscount", "type": "Node", "description": "The underlying code discount object.", "not_nullable": false}], "examples": []}, {"name": "DiscountCollections", "description": "A list of collections that the discount can have as a prerequisite or a list of collections to which the discount can be applied.", "fields_and_connections": [], "examples": []}, {"name": "DiscountCombinesWith", "description": "The discount classes\nthat you can use in combination with\nShopify discount types.", "fields_and_connections": [{"name": "orderDiscounts", "type": "Boolean!", "description": "Whether the discount combines with the\norder discount\nclass.", "not_nullable": true}, {"name": "productDiscounts", "type": "Boolean!", "description": "Whether the discount combines with the\nproduct discount\nclass.", "not_nullable": true}, {"name": "shippingDiscounts", "type": "Boolean!", "description": "Whether the discount combines with the\nshipping discount\nclass.", "not_nullable": true}], "examples": []}, {"name": "DiscountCountries", "description": "The shipping destinations where the discount can be applied.", "fields_and_connections": [{"name": "countries", "type": "[CountryCode!]!", "description": "The codes for the countries where the discount can be applied.", "not_nullable": true}, {"name": "includeRestOfWorld", "type": "Boolean!", "description": "Whether the discount is applicable to countries that haven't been defined in the shop's shipping zones.", "not_nullable": true}], "examples": []}, {"name": "DiscountCountryAll", "description": "The DiscountCountryAll object lets you target all countries as shipping destination for discount eligibility.", "fields_and_connections": [{"name": "allCountries", "type": "Boolean!", "description": "Whether the discount can be applied to all countries as shipping destination. This value is always true.", "not_nullable": true}], "examples": []}, {"name": "DiscountCustomerAll", "description": "The DiscountCustomerAll object lets you target all customers for discount eligibility.", "fields_and_connections": [{"name": "allCustomers", "type": "Boolean!", "description": "Whether the discount can be applied by all customers. This value is always true.", "not_nullable": true}], "examples": []}, {"name": "DiscountCustomerBuys", "description": "The prerequisite items and prerequisite value that a customer must have on the order for the discount to be applicable.", "fields_and_connections": [{"name": "isOneTimePurchase", "type": "Boolean!", "description": "If the discount is applicable when a customer buys a one-time purchase.", "not_nullable": true}, {"name": "isSubscription", "type": "Boolean!", "description": "If the discount is applicable when a customer buys a subscription purchase.", "not_nullable": true}, {"name": "items", "type": "DiscountItems!", "description": "The items required for the discount to be applicable.", "not_nullable": true}, {"name": "value", "type": "DiscountCustomerBuysValue!", "description": "The prerequisite value.", "not_nullable": true}], "examples": []}, {"name": "DiscountCustomerGets", "description": "The items in the order that qualify for the discount, their quantities, and the total value of the discount.", "fields_and_connections": [{"name": "appliesOnOneTimePurchase", "type": "Boolean!", "description": "Whether the discount applies on regular one-time-purchase items.", "not_nullable": true}, {"name": "appliesOnSubscription", "type": "Boolean!", "description": "Whether the discount applies on subscription items.\nSubscriptions\nenable customers to purchase products\non a recurring basis.", "not_nullable": true}, {"name": "items", "type": "DiscountItems!", "description": "The items to which the discount applies.", "not_nullable": true}, {"name": "value", "type": "DiscountCustomerGetsValue!", "description": "Entitled quantity and the discount value.", "not_nullable": true}], "examples": []}, {"name": "DiscountCustomers", "description": "A list of individual customers eligible for the discount.", "fields_and_connections": [{"name": "customers", "type": "[Customer!]!", "description": "The list of individual customers eligible for the discount.", "not_nullable": true}], "examples": []}, {"name": "DiscountCustomerSegments", "description": "A list of customer segments who are eligible for the discount.", "fields_and_connections": [{"name": "segments", "type": "[Segment!]!", "description": "The list of customer segments who are eligible for the discount.", "not_nullable": true}], "examples": []}, {"name": "DiscountMinimumQuantity", "description": "The minimum quantity of items required for the discount to apply.", "fields_and_connections": [{"name": "greaterThanOrEqualToQuantity", "type": "UnsignedInt64!", "description": "The minimum quantity of items that's required for the discount to be applied.", "not_nullable": true}], "examples": []}, {"name": "DiscountMinimumSubtotal", "description": "The minimum subtotal required for the discount to apply.", "fields_and_connections": [{"name": "greaterThanOrEqualToSubtotal", "type": "MoneyV2!", "description": "The minimum subtotal that's required for the discount to be applied.", "not_nullable": true}], "examples": []}, {"name": "DiscountNode", "description": "The DiscountNode object enables you to manage discounts, which are applied at checkout or on a cart.\nDiscounts are a way for merchants to promote sales and special offers, or as customer loyalty rewards. Discounts can apply to orders, products, or shipping, and can be either automatic or code-based. For example, you can offer customers a buy X get Y discount that's automatically applied when purchases meet specific criteria. Or, you can offer discounts where customers have to enter a code to redeem an amount off discount on products, variants, or collections in a store.\nLearn more about working with Shopify's discount model,\nincluding related mutations, limitations, and considerations.", "fields_and_connections": [{"name": "discount", "type": "discountNode", "description": "Returns a discount resource by ID.", "not_nullable": false}, {"name": "discount", "type": "discountNodes", "description": "Returns a list of discounts.", "not_nullable": false}, {"name": "discount", "type": "HasEvents", "description": "A discount that's applied at checkout or on cart.\nDiscounts can be automatic or code-based.", "not_nullable": false}, {"name": "discount", "type": "HasMetafieldDefinitions", "description": "A discount that's applied at checkout or on cart.\nDiscounts can be automatic or code-based.", "not_nullable": false}, {"name": "discount", "type": "HasMetafields", "description": "A discount that's applied at checkout or on cart.\nDiscounts can be automatic or code-based.", "not_nullable": false}, {"name": "discount", "type": "Node", "description": "A discount that's applied at checkout or on cart.\nDiscounts can be automatic or code-based.", "not_nullable": false}], "examples": []}, {"name": "DiscountOnQuantity", "description": "The quantity of items discounted, the discount value, and how the discount will be applied.", "fields_and_connections": [{"name": "effect", "type": "DiscountEffect!", "description": "The discount's effect on qualifying items.", "not_nullable": true}, {"name": "quantity", "type": "DiscountQuantity!", "description": "The number of items being discounted. The customer must have at least this many items of specified products or product variants in their order to be eligible for the discount.", "not_nullable": true}], "examples": []}, {"name": "DiscountPercentage", "description": "A discount effect that gives customers a percentage off of specified items on their order.", "fields_and_connections": [{"name": "percentage", "type": "Float!", "description": "The percentage value of the discount.", "not_nullable": true}], "examples": []}, {"name": "DiscountProducts", "description": "A list of products and product variants that the discount can have as a prerequisite or a list of products and product variants to which the discount can be applied.", "fields_and_connections": [], "examples": []}, {"name": "DiscountPurchaseAmount", "description": "A purchase amount in the context of a discount. This object can be used to define the minimum purchase amount required for a discount to be applicable.", "fields_and_connections": [{"name": "amount", "type": "Decimal!", "description": "The purchase amount in decimal format.", "not_nullable": true}], "examples": []}, {"name": "DiscountQuantity", "description": "A quantity of items in the context of a discount. This object can be used to define the minimum quantity of items required to apply a discount. Alternatively, it can be used to define the quantity of items that can be discounted.", "fields_and_connections": [{"name": "quantity", "type": "UnsignedInt64!", "description": "The quantity of items.", "not_nullable": true}], "examples": []}, {"name": "DiscountRedeemCode", "description": "A code that a customer can use at checkout to receive a discount. For example, a customer can use the redeem code 'SUMMER20' at checkout to receive a 20% discount on their entire order.", "fields_and_connections": [{"name": "asyncUsageCount", "type": "Int!", "description": "The number of times that the discount redeem code has been used. This value is updated asynchronously and can be different than the actual usage count.", "not_nullable": true}, {"name": "code", "type": "String!", "description": "The code that a customer can use at checkout to receive a discount.", "not_nullable": true}, {"name": "createdBy", "type": "App", "description": "The application that created the discount redeem code.", "not_nullable": false}, {"name": "id", "type": "ID!", "description": "A globally-unique ID of the discount redeem code.", "not_nullable": true}], "examples": []}, {"name": "DiscountRedeemCodeBulkCreation", "description": "The properties and status of a bulk discount redeem code creation operation.", "fields_and_connections": [{"name": "codes", "type": "discountRedeemCodeBulkCreation", "description": "Returns a bulk code creation resource by ID.", "not_nullable": false}, {"name": "codes", "type": "discountRedeemCodeBulkAdd", "description": "Asynchronously add\ndiscount codes\nin bulk that customers can use to redeem a discount. You can use the discountRedeemCodeBulkAdd mutation\nto automate the distribution of discount codes through emails or other\nmarketing channels.", "not_nullable": false}, {"name": "codes", "type": "Node", "description": "The result of each code creation operation associated with the bulk creation operation including any errors that might have occurred during the operation.", "not_nullable": false}], "examples": []}, {"name": "DiscountRedeemCodeBulkCreationCode", "description": "A result of a discount redeem code creation operation created by a bulk creation.", "fields_and_connections": [{"name": "code", "type": "String!", "description": "The code to use in the discount redeem code creation operation.", "not_nullable": true}, {"name": "discountRedeemCode", "type": "DiscountRedeemCode", "description": "The successfully created discount redeem code.\nIf the discount redeem code couldn't be created, then this field is `null``.", "not_nullable": false}, {"name": "errors", "type": "[DiscountUserError!]!", "description": "A list of errors that occurred during the creation operation of the discount redeem code.", "not_nullable": true}], "examples": []}, {"name": "DiscountShareableUrl", "description": "A shareable URL for a discount code.", "fields_and_connections": [{"name": "targetItemImage", "type": "Image", "description": "The image URL of the item (product or collection) to which the discount applies.", "not_nullable": false}, {"name": "targetType", "type": "DiscountShareableUrlTargetType!", "description": "The type of page that's associated with the URL.", "not_nullable": true}, {"name": "title", "type": "String!", "description": "The title of the page that's associated with the URL.", "not_nullable": true}, {"name": "url", "type": "URL!", "description": "The URL for the discount code.", "not_nullable": true}], "examples": []}, {"name": "MarketingActivity", "description": "The marketing activity resource represents marketing that a\n        merchant created through an app.", "fields_and_connections": [{"name": "activityListUrl", "type": "marketingActivities", "description": "A list of marketing activities associated with the marketing app.", "not_nullable": false}, {"name": "activityListUrl", "type": "marketingActivity", "description": "Returns a MarketingActivity resource by ID.", "not_nullable": false}, {"name": "activityListUrl", "type": "marketingActivityCreate", "description": "Create new marketing activity.", "not_nullable": false}, {"name": "activityListUrl", "type": "marketingActivityCreateExternal", "description": "Creates a new external marketing activity.", "not_nullable": false}, {"name": "activityListUrl", "type": "marketingActivityUpdate", "description": "Updates a marketing activity with the latest information.", "not_nullable": false}, {"name": "activityListUrl", "type": "marketingActivityUpdateExternal", "description": "Update an external marketing activity.", "not_nullable": false}, {"name": "activityListUrl", "type": "marketingActivityUpsertExternal", "description": "Creates a new external marketing activity or updates an existing one. When optional fields are absent or null, associated information will be removed from an existing marketing activity.", "not_nullable": false}, {"name": "activityListUrl", "type": "Node", "description": "The URL of the marketing activity listing page in the marketing section.", "not_nullable": false}], "examples": []}, {"name": "MarketingActivityExtensionAppErrors", "description": "Represents errors returned from apps when using the marketing activity extension.", "fields_and_connections": [{"name": "code", "type": "MarketingActivityExtensionAppErrorCode!", "description": "The app error type.", "not_nullable": true}, {"name": "userErrors", "type": "[UserError!]!", "description": "The list of errors returned by the app.", "not_nullable": true}], "examples": []}, {"name": "MarketingBudget", "description": "This type combines budget amount and its marketing budget type.", "fields_and_connections": [{"name": "budgetType", "type": "MarketingBudgetBudgetType!", "description": "The budget type for a marketing activity.", "not_nullable": true}, {"name": "total", "type": "MoneyV2!", "description": "The amount of budget for marketing activity.", "not_nullable": true}], "examples": []}, {"name": "MarketingEngagement", "description": "Marketing engagement represents customer activity taken on a marketing activity or a marketing channel.", "fields_and_connections": [{"name": "adSpend", "type": "marketingEngagementCreate", "description": "Creates a new marketing engagement for a marketing activity or a marketing channel.", "not_nullable": false}], "examples": []}, {"name": "MarketingEvent", "description": "Represents actions that market a merchant's store or products.", "fields_and_connections": [{"name": "app", "type": "marketingEvent", "description": "Returns a MarketingEvent resource by ID.", "not_nullable": false}, {"name": "app", "type": "marketingEvents", "description": "A list of marketing events associated with the marketing app.", "not_nullable": false}, {"name": "app", "type": "LegacyInteroperability", "description": "The app that the marketing event is attributed to.", "not_nullable": false}, {"name": "app", "type": "Node", "description": "The app that the marketing event is attributed to.", "not_nullable": false}], "examples": []}, {"name": "PriceRule", "description": "Price rules are a set of conditions, including entitlements and prerequisites, that must be met in order for a discount code to apply.\nWe recommend using the types and queries detailed at Getting started with discounts instead. These will replace the GraphQL PriceRule object and REST Admin PriceRule and DiscountCode resources.", "fields_and_connections": [{"name": "allocationLimit", "type": "CommentEventSubject", "description": "The maximum number of times that the price rule can be allocated onto an order.", "not_nullable": false}, {"name": "allocationLimit", "type": "HasEvents", "description": "The maximum number of times that the price rule can be allocated onto an order.", "not_nullable": false}, {"name": "allocationLimit", "type": "LegacyInteroperability", "description": "The maximum number of times that the price rule can be allocated onto an order.", "not_nullable": false}, {"name": "allocationLimit", "type": "Node", "description": "The maximum number of times that the price rule can be allocated onto an order.", "not_nullable": false}], "examples": []}, {"name": "PriceRuleCustomerSelection", "description": "A selection of customers for whom the price rule applies.", "fields_and_connections": [{"name": "customers", "type": "CustomerConnection!", "description": "List of customers to whom the price rule applies.", "not_nullable": true}, {"name": "forAllCustomers", "type": "Boolean!", "description": "Whether the price rule applies to all customers.", "not_nullable": true}, {"name": "segments", "type": "[Segment!]!", "description": "A list of customer segments that contain the customers who can use the price rule.", "not_nullable": true}], "examples": []}, {"name": "PriceRuleDiscountCode", "description": "A discount code of a price rule.", "fields_and_connections": [{"name": "app", "type": "Node", "description": "The application that created the discount code.", "not_nullable": false}], "examples": []}, {"name": "PriceRuleEntitlementToPrerequisiteQuantityRatio", "description": "Quantity of prerequisite items required for the price rule to be applicable, compared to quantity of entitled items.", "fields_and_connections": [{"name": "entitlementQuantity", "type": "Int!", "description": "The quantity of entitled items in the ratio.", "not_nullable": true}, {"name": "prerequisiteQuantity", "type": "Int!", "description": "The quantity of prerequisite items in the ratio.", "not_nullable": true}], "examples": []}, {"name": "PriceRuleFixedAmountValue", "description": "The value of a fixed amount price rule.", "fields_and_connections": [{"name": "amount", "type": "Money!", "description": "The monetary value of the price rule.", "not_nullable": true}], "examples": []}, {"name": "PriceRuleItemEntitlements", "description": "The items to which this price rule applies. This may be multiple products, product variants, collections or combinations of the aforementioned.", "fields_and_connections": [{"name": "collections", "type": "CollectionConnection!", "description": "The collections to which the price rule applies.", "not_nullable": true}, {"name": "products", "type": "ProductConnection!", "description": "The products to which the price rule applies.", "not_nullable": true}, {"name": "productVariants", "type": "ProductVariantConnection!", "description": "The product variants to which the price rule applies.", "not_nullable": true}, {"name": "targetAllLineItems", "type": "Boolean!", "description": "Whether the price rule applies to all line items.", "not_nullable": true}], "examples": []}, {"name": "PriceRuleLineItemPrerequisites", "description": "Single or multiple line item products, product variants or collections required for the price rule to be applicable, can also be provided in combination.", "fields_and_connections": [], "examples": []}, {"name": "PriceRuleMoneyRange", "description": "A money range within which the price rule is applicable.", "fields_and_connections": [{"name": "greaterThan", "type": "Money", "description": "The lower bound of the money range.", "not_nullable": false}, {"name": "greaterThanOrEqualTo", "type": "Money", "description": "The lower bound or equal of the money range.", "not_nullable": false}, {"name": "lessThan", "type": "Money", "description": "The upper bound of the money range.", "not_nullable": false}, {"name": "lessThanOrEqualTo", "type": "Money", "description": "The upper bound or equal of the money range.", "not_nullable": false}], "examples": []}, {"name": "PriceRulePercentValue", "description": "The value of a percent price rule.", "fields_and_connections": [{"name": "percentage", "type": "Float!", "description": "The percent value of the price rule.", "not_nullable": true}], "examples": []}, {"name": "PriceRulePrerequisiteToEntitlementQuantityRatio", "description": "Quantity of prerequisite items required for the price rule to be applicable, compared to quantity of entitled items.", "fields_and_connections": [{"name": "entitlementQuantity", "type": "Int!", "description": "The quantity of entitled items in the ratio.", "not_nullable": true}, {"name": "prerequisiteQuantity", "type": "Int!", "description": "The quantity of prerequisite items in the ratio.", "not_nullable": true}], "examples": []}, {"name": "PriceRuleQuantityRange", "description": "A quantity range within which the price rule is applicable.", "fields_and_connections": [{"name": "greaterThan", "type": "Int", "description": "The lower bound of the quantity range.", "not_nullable": false}, {"name": "greaterThanOrEqualTo", "type": "Int", "description": "The lower bound or equal of the quantity range.", "not_nullable": false}, {"name": "lessThan", "type": "Int", "description": "The upper bound of the quantity range.", "not_nullable": false}, {"name": "lessThanOrEqualTo", "type": "Int", "description": "The upper bound or equal of the quantity range.", "not_nullable": false}], "examples": []}, {"name": "PriceRuleShareableUrl", "description": "Shareable URL for the discount code associated with the price rule.", "fields_and_connections": [{"name": "targetItemImage", "type": "Image", "description": "The image URL of the item (product or collection) to which the discount applies.", "not_nullable": false}, {"name": "targetType", "type": "PriceRuleShareableUrlTargetType!", "description": "The type of page that's associated with the URL.", "not_nullable": true}, {"name": "title", "type": "String!", "description": "The title of the page that's associated with the URL.", "not_nullable": true}, {"name": "url", "type": "URL!", "description": "The URL for the discount code.", "not_nullable": true}], "examples": []}, {"name": "PriceRuleShippingLineEntitlements", "description": "The shipping lines to which the price rule applies to.", "fields_and_connections": [{"name": "countryCodes", "type": "[CountryCode!]!", "description": "The codes for the countries to which the price rule applies to.", "not_nullable": true}, {"name": "includeRestOfWorld", "type": "Boolean!", "description": "Whether the price rule is applicable to countries that haven't been defined in the shop's shipping zones.", "not_nullable": true}, {"name": "targetAllShippingLines", "type": "Boolean!", "description": "Whether the price rule applies to all shipping lines.", "not_nullable": true}], "examples": []}, {"name": "PriceRuleValidityPeriod", "description": "A time period during which a price rule is applicable.", "fields_and_connections": [{"name": "end", "type": "DateTime", "description": "The time after which the price rule becomes invalid.", "not_nullable": false}, {"name": "start", "type": "DateTime!", "description": "The time after which the price rule is valid.", "not_nullable": true}], "examples": []}, {"name": "PricingPercentageValue", "description": "One type of value given to a customer when a discount is applied to an order.\nThe application of a discount with this value gives the customer the specified percentage off a specified item.", "fields_and_connections": [{"name": "percentage", "type": "Float!", "description": "The percentage value of the object. This is a number between -100 (free) and 0 (no discount).", "not_nullable": true}], "examples": []}, {"name": "ServerPixel", "description": "A server pixel stores configuration for streaming customer interactions to an EventBridge or PubSub endpoint.", "fields_and_connections": [{"name": "id", "type": "serverPixel", "description": "The server pixel configured by the app.", "not_nullable": false}, {"name": "id", "type": "eventBridgeServerPixelUpdate", "description": "Updates the server pixel to connect to an EventBridge endpoint.\nRunning this mutation deletes any previous subscriptions for the server pixel.", "not_nullable": false}, {"name": "id", "type": "pubSubServerPixelUpdate", "description": "Updates the server pixel to connect to a Google PubSub endpoint.\nRunning this mutation deletes any previous subscriptions for the server pixel.", "not_nullable": false}, {"name": "id", "type": "serverPixelCreate", "description": "Creates a new unconfigured server pixel. A single server pixel can exist for an app and shop combination. If you call this mutation when a server pixel already exists, then an error will return.", "not_nullable": false}, {"name": "id", "type": "Node", "description": "A globally-unique ID.", "not_nullable": false}], "examples": []}, {"name": "UTMParameters", "description": "Represents a set of UTM parameters.", "fields_and_connections": [{"name": "campaign", "type": "String", "description": "The name of a marketing campaign.", "not_nullable": false}, {"name": "content", "type": "String", "description": "Identifies specific content in a marketing campaign. Used to differentiate between similar content or links in a marketing campaign to determine which is the most effective.", "not_nullable": false}, {"name": "medium", "type": "String", "description": "The medium of a marketing campaign, such as a banner or email newsletter.", "not_nullable": false}, {"name": "source", "type": "String", "description": "The source of traffic to the merchant's store, such as Google or an email newsletter.", "not_nullable": false}, {"name": "term", "type": "String", "description": "Paid search terms used by a marketing campaign.", "not_nullable": false}], "examples": []}, {"name": "WebPixel", "description": "The WebPixel object enables you to manage JavaScript code snippets\nthat run on an online store and collect\nbehavioral data\nfor marketing campaign optimization and analytics.\nLearn how to create a\nweb pixel extension\nto subscribe your app to events that are emitted by Shopify.", "fields_and_connections": [{"name": "id", "type": "webPixel", "description": "Returns a\nweb pixel\nby ID.", "not_nullable": false}, {"name": "id", "type": "webPixelCreate", "description": "Activate a web pixel extension\nby creating a web pixel record on the store where you installed your app.\nWhen you run the webPixelCreate mutation, Shopify validates it\nagainst the settings definition in shopify.extension.toml. If the settings input field doesn't match\nthe schema that you defined, then the mutation fails. Learn how to\ndefine web pixel settings.", "not_nullable": false}, {"name": "id", "type": "webPixelUpdate", "description": "Activate a web pixel extension\nby updating a web pixel record on the store where you installed your app.\nWhen you run the webPixelUpdate mutation, Shopify validates it\nagainst the settings definition in shopify.extension.toml. If the settings input field doesn't match\nthe schema that you defined, then the mutation fails. Learn how to\ndefine web pixel settings.", "not_nullable": false}, {"name": "id", "type": "Node", "description": "A globally-unique ID.", "not_nullable": false}], "examples": []}]}, {"name": "Events", "queries": [{"name": "deletionEvents", "description": "The paginated list of deletion events. Use events instead.", "arguments": [{"name": "after", "type": "String", "required": false, "description": "The elements that come after the specified cursor."}, {"name": "before", "type": "String", "required": false, "description": "The elements that come before the specified cursor."}, {"name": "first", "type": "Int", "required": false, "description": "The first n elements from the paginated list."}, {"name": "last", "type": "Int", "required": false, "description": "The last n elements from the paginated list."}, {"name": "query", "type": "String", "required": false, "description": "A filter made up of terms, connectives, modifiers, and comparators.\nYou can apply one or more filters to a query. Learn more about Shopify API search syntax."}, {"name": "reverse", "type": "Boolean", "required": false, "description": "Reverse the order of the underlying list."}, {"name": "sortKey", "type": "DeletionEventSortKeys", "required": false, "description": "Sort the underlying list using a key. If your query is slow or returns an error, then try specifying a sort key that matches the field used in the search."}, {"name": "subjectTypes", "type": "[DeletionEventSubjectType!]", "required": false, "description": "List of subject types to filter by."}], "returns": [], "examples": []}, {"name": "event", "description": "Get a single event by its id.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of the event."}], "returns": [], "examples": [{"description": "Retrieve the first basic-event", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `query {\n    event(id: \"gid://shopify/BasicEvent/422690323\") {\n      id\n      message\n      ... on BasicEvent {\n        action\n        subjectType\n        subject {\n          __typename\n        }\n      }\n    }\n  }`,\n});\n"}, {"description": "Retrieves a single event", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `query EventShow($id: ID!) {\n      event(id: $id) {\n        id\n        action\n        createdAt\n        message\n        ... on BasicEvent {\n          arguments\n          subjectId\n          subjectType\n          additionalContent\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/BasicEvent/267851118\"\n    },\n  },\n});\n"}]}, {"name": "events", "description": "The paginated list of events associated with the store.", "arguments": [{"name": "after", "type": "String", "required": false, "description": "The elements that come after the specified cursor."}, {"name": "before", "type": "String", "required": false, "description": "The elements that come before the specified cursor."}, {"name": "first", "type": "Int", "required": false, "description": "The first n elements from the paginated list."}, {"name": "last", "type": "Int", "required": false, "description": "The last n elements from the paginated list."}, {"name": "query", "type": "String", "required": false, "description": "A filter made up of terms, connectives, modifiers, and comparators.\nYou can apply one or more filters to a query. Learn more about Shopify API search syntax."}, {"name": "reverse", "type": "Boolean", "required": false, "description": "Reverse the order of the underlying list."}, {"name": "sortKey", "type": "EventSortKeys", "required": false, "description": "Sort the underlying list using a key. If your query is slow or returns an error, then try specifying a sort key that matches the field used in the search."}], "returns": [], "examples": [{"description": "Retrieve the first 10 destroy events for products", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `query {\n    events(query: \"action:'destroy' AND subject_type:'PRODUCT'\", first: 10) {\n      edges {\n        node {\n          id\n          message\n          ... on BasicEvent {\n            action\n            subjectType\n            subject {\n              __typename\n            }\n          }\n        }\n      }\n    }\n  }`,\n});\n"}, {"description": "Retrieve the first 10 events after a given time", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `query {\n    events(query: \"created_at:>=2024-01-01\", first: 10) {\n      edges {\n        node {\n          id\n          message\n          createdAt\n        }\n      }\n    }\n  }`,\n});\n"}, {"description": "Retrieve the first 10 events for products including comment events", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `query {\n    events(query: \"comments:1 AND subject_type:'PRODUCT'\", first: 10) {\n      edges {\n        node {\n          id\n          message\n          ... on CommentEvent {\n            rawMessage\n          }\n          ... on BasicEvent {\n            action\n            subjectType\n            subject {\n              __typename\n            }\n          }\n        }\n      }\n    }\n  }`,\n});\n"}, {"description": "Retrieves a list of events", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `query EventList {\n    events(first: 5) {\n      nodes {\n        id\n        action\n        createdAt\n        message\n        ... on BasicEvent {\n          arguments\n          subjectId\n          subjectType\n          additionalContent\n        }\n      }\n    }\n  }`,\n});\n"}]}, {"name": "eventsCount", "description": "Count of events. Limited to a maximum of 10000.", "arguments": [{"name": "query", "type": "String", "required": false, "description": "A filter made up of terms, connectives, modifiers, and comparators.\nYou can apply one or more filters to a query. Learn more about Shopify API search syntax."}], "returns": [], "examples": [{"description": "Retrieve the amount of events after a given time", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `query {\n    eventsCount(query: \"created_at:>=2024-01-01\") {\n      count\n      precision\n    }\n  }`,\n});\n"}, {"description": "Retrieves a count of events", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `query EventCount {\n    eventsCount {\n      count\n    }\n  }`,\n});\n"}]}], "mutations": [{"name": "flowTriggerReceive", "description": "Triggers any workflows that begin with the trigger specified in the request body. To learn more, refer to Create Shopify Flow triggers.", "arguments": [{"name": "handle", "type": "String", "required": false, "description": "The handle of the trigger."}, {"name": "payload", "type": "JSON", "required": false, "description": "The payload needed to run the Trigger."}, {"name": "body", "type": "String", "required": false, "description": "The payload needed to run the Trigger. Use payload and handle to execute your Flow trigger."}], "returns": [], "examples": [{"description": "Trigger workflows defined in Shopify Flow", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation flowTriggerReceive($handle: String, $payload: JSON) {\n      flowTriggerReceive(handle: $handle, payload: $payload) {\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"handle\": \"handle\",\n      \"payload\": {\n        \"key\": \"Some value\"\n      }\n    },\n  },\n});\n"}, {"description": "flowTriggerReceive reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation flowTriggerReceive($handle: String, $payload: JSON) {\n      flowTriggerReceive(handle: $handle, payload: $payload) {\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"handle\": \"handle\",\n      \"payload\": {\n        \"key\": \"Some value\"\n      }\n    },\n  },\n});\n"}]}], "objects": [{"name": "BasicEvent", "description": "Basic events chronicle resource activities such as the creation of an article, the fulfillment of an order, or\nthe addition of a product.\nGeneral events\nActionDescriptioncreateThe item was created.destroyThe item was destroyed.publishedThe item was published.unpublishedThe item was unpublished.updateThe item was updated.Order events\nOrder events can be divided into the following categories:\n\nAuthorization: Includes whether the authorization succeeded, failed, or is pending.\nCapture: Includes whether the capture succeeded, failed, or is pending.\nEmail: Includes confirmation or cancellation of the order, as well as shipping.\nFulfillment: Includes whether the fulfillment succeeded, failed, or is pending. Also includes cancellation, restocking, and fulfillment updates.\nOrder: Includess the placement, confirmation, closing, re-opening, and cancellation of the order.\nRefund: Includes whether the refund succeeded, failed, or is pending.\nSale: Includes whether the sale succeeded, failed, or is pending.\nVoid: Includes whether the void succeeded, failed, or is pending.\n\nActionMessageDescriptionauthorization_failureThe customer, unsuccessfully, tried to authorize: {money_amount}.Authorization failed. The funds cannot be captured.authorization_pendingAuthorization for {money_amount} is pending.Authorization pending.authorization_successThe customer successfully authorized us to capture: {money_amount}.Authorization was successful and the funds are available for capture.cancelledOrder was cancelled by {shop_staff_name}.The order was cancelled.capture_failureWe failed to capture: {money_amount}.The capture failed. The funds cannot be transferred to the shop.capture_pendingCapture for {money_amount} is pending.The capture is in process. The funds are not yet available to the shop.capture_successWe successfully captured: {money_amount}The capture was successful and the funds are now available to the shop.closedOrder was closed.The order was closed.confirmedReceived a new order: {order_number} by {customer_name}.The order was confirmed.fulfillment_cancelledWe cancelled {number_of_line_items} from being fulfilled by the third party fulfillment service.Fulfillment for one or more of the line_items failed.fulfillment_pendingWe submitted {number_of_line_items} to the third party service.One or more of the line_items has been assigned to a third party service for fulfillment.fulfillment_successWe successfully fulfilled line_items.Fulfillment was successful for one or more line_items.mail_sent{message_type} email was sent to the customer.An email was sent to the customer.placedOrder was placed.An order was placed by the customer.re_openedOrder was re-opened.An order was re-opened.refund_failureWe failed to refund {money_amount}.The refund failed. The funds are still with the shop.refund_pendingRefund of {money_amount} is still pending.The refund is in process. The funds are still with shop.refund_successWe successfully refunded {money_amount}.The refund was successful. The funds have been transferred to the customer.restock_line_itemsWe restocked {number_of_line_items}.One or more of the order's line items have been restocked.sale_failureThe customer failed to pay {money_amount}.The sale failed. The funds are not available to the shop.sale_pendingThe {money_amount} is pending.The sale is in process. The funds are not yet available to the shop.sale_successWe successfully captured {money_amount}.The sale was successful. The funds are now with the shop.update{order_number} was updated.The order was updated.void_failureWe failed to void the authorization.Voiding the authorization failed. The authorization is still valid.void_pendingAuthorization void is pending.Voiding the authorization is in process. The authorization is still valid.void_successWe successfully voided the authorization.Voiding the authorization was successful. The authorization is no longer valid.", "fields_and_connections": [{"name": "action", "type": "Event", "description": "The action that occured.", "not_nullable": false}, {"name": "action", "type": "Node", "description": "The action that occured.", "not_nullable": false}], "examples": []}, {"name": "CommentEvent", "description": "Comment events are generated by staff members of a shop.\nThey are created when a staff member adds a comment to the timeline of an order, draft order, customer, or transfer.", "fields_and_connections": [{"name": "action", "type": "Event", "description": "The action that occured.", "not_nullable": false}, {"name": "action", "type": "Node", "description": "The action that occured.", "not_nullable": false}], "examples": []}, {"name": "CommentEventAttachment", "description": "A file attachment associated to a comment event.", "fields_and_connections": [{"name": "fileExtension", "type": "String", "description": "The file extension of the comment event attachment, indicating the file format.", "not_nullable": false}, {"name": "id", "type": "ID!", "description": "A globally-unique ID.", "not_nullable": true}, {"name": "image", "type": "Image", "description": "The image attached to the comment event.", "not_nullable": false}, {"name": "name", "type": "String!", "description": "The filename of the comment event attachment.", "not_nullable": true}, {"name": "size", "type": "Int!", "description": "The size of the attachment.", "not_nullable": true}, {"name": "url", "type": "URL!", "description": "The URL of the attachment.", "not_nullable": true}], "examples": []}, {"name": "DeletionEvent", "description": "Deletion events chronicle the destruction of resources (e.g. products and collections).\nOnce deleted, the deletion event is the only trace of the original's existence,\nas the resource itself has been removed and can no longer be accessed.", "fields_and_connections": [{"name": "occurredAt", "type": "deletionEvents", "description": "The paginated list of deletion events. Use events instead.", "not_nullable": false}], "examples": []}, {"name": "ResourceAlert", "description": "An alert message that appears in the Shopify admin about a problem with a store resource, with 1 or more actions to take. For example, you could use an alert to indicate that you're not charging taxes on some product variants.\nThey can optionally have a specific icon and be dismissed by merchants.", "fields_and_connections": [{"name": "actions", "type": "[ResourceAlertAction!]!", "description": "Buttons in the alert that link to related information.\nFor example, Edit variants.", "not_nullable": true}, {"name": "content", "type": "HTML!", "description": "The secondary text in the alert that includes further information or instructions about how to solve a problem.", "not_nullable": true}, {"name": "dismissibleHandle", "type": "String", "description": "Unique identifier that appears when an alert is manually closed by the merchant.\nMost alerts can't be manually closed.", "not_nullable": false}, {"name": "icon", "type": "ResourceAlertIcon", "description": "An icon that's optionally displayed with the alert.", "not_nullable": false}, {"name": "severity", "type": "ResourceAlertSeverity!", "description": "Indication of how important the alert is.", "not_nullable": true}, {"name": "title", "type": "String!", "description": "The primary text in the alert that includes information or describes the problem.", "not_nullable": true}], "examples": []}, {"name": "ResourceAlertAction", "description": "An action associated to a resource alert, such as editing variants.", "fields_and_connections": [{"name": "primary", "type": "Boolean!", "description": "Whether the action appears as a button or as a link.", "not_nullable": true}, {"name": "show", "type": "String", "description": "Resource for the action to show.", "not_nullable": false}, {"name": "title", "type": "String!", "description": "The text for the button in the alert. For example, Edit variants.", "not_nullable": true}, {"name": "url", "type": "URL!", "description": "The target URL that the button links to.", "not_nullable": true}], "examples": []}, {"name": "ShopAlert", "description": "An alert message that appears in the Shopify admin about a problem with a store setting, with an action to take. For example, you could show an alert to ask the merchant to enter their billing information to activate Shopify Plus.", "fields_and_connections": [{"name": "action", "type": "ShopAlertAction!", "description": "The text for the button in the alert that links to related information. For example, Add credit card.", "not_nullable": true}, {"name": "description", "type": "String!", "description": "A description of the alert and further information, such as whether the merchant will be charged.", "not_nullable": true}], "examples": []}, {"name": "ShopAlertAction", "description": "An action associated to a shop alert, such as adding a credit card.", "fields_and_connections": [{"name": "title", "type": "String!", "description": "The text for the button in the alert. For example, Add credit card.", "not_nullable": true}, {"name": "url", "type": "URL!", "description": "The target URL that the button links to.", "not_nullable": true}], "examples": []}]}, {"name": "Inventory", "queries": [{"name": "inventoryItem", "description": "Returns an\nInventoryItem\nobject by ID.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of the InventoryItem to return."}], "returns": [], "examples": [{"description": "Get details about a specified inventory item", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `query inventoryItem {\n    inventoryItem(id: \"gid://shopify/InventoryItem/30322695\") {\n      id\n      tracked\n      sku\n    }\n  }`,\n});\n"}, {"description": "Get inventory item levels and product/variant information", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `query inventoryItem {\n    inventoryItem(id: \"gid://shopify/InventoryItem/30322695\") {\n      id\n      tracked\n      sku\n    }\n  }`,\n});\n"}]}, {"name": "inventoryItems", "description": "Returns a list of inventory items.", "arguments": [{"name": "after", "type": "String", "required": false, "description": "The elements that come after the specified cursor."}, {"name": "before", "type": "String", "required": false, "description": "The elements that come before the specified cursor."}, {"name": "first", "type": "Int", "required": false, "description": "The first n elements from the paginated list."}, {"name": "last", "type": "Int", "required": false, "description": "The last n elements from the paginated list."}, {"name": "query", "type": "String", "required": false, "description": "A filter made up of terms, connectives, modifiers, and comparators.\nYou can apply one or more filters to a query. Learn more about Shopify API search syntax."}, {"name": "reverse", "type": "Boolean", "required": false, "description": "Reverse the order of the underlying list."}], "returns": [], "examples": [{"description": "Get details about the first 2 inventory items", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `query inventoryItems {\n    inventoryItems(first: 2) {\n      edges {\n        node {\n          id\n          tracked\n          sku\n        }\n      }\n    }\n  }`,\n});\n"}, {"description": "Get details about the first inventory item matching an SKU", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `query inventoryItems {\n    inventoryItems(first: 1, query: \"sku:'element-151'\") {\n      edges {\n        node {\n          id\n          tracked\n          sku\n        }\n      }\n    }\n  }`,\n});\n"}, {"description": "Get details about the first two inventory item with created_at or matching sku", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `query inventoryItems {\n    inventoryItems(first: 2, query: \"(created_at:>2023-10-10) OR (sku:'element-151')\") {\n      edges {\n        node {\n          id\n          tracked\n          sku\n        }\n      }\n    }\n  }`,\n});\n"}, {"description": "Retrieves a detailed list for inventory items by IDs", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `query InventoryItemList {\n    inventoryItems(first: 20, query: \"id:>=30322695\") {\n      nodes {\n        id\n        createdAt\n        countryCodeOfOrigin\n        harmonizedSystemCode\n        provinceCodeOfOrigin\n        requiresShipping\n        sku\n        tracked\n        unitCost {\n          currencyCode\n          amount\n        }\n        updatedAt\n        countryHarmonizedSystemCodes(first: 250) {\n          nodes {\n            harmonizedSystemCode\n            countryCode\n          }\n        }\n      }\n    }\n  }`,\n});\n"}]}, {"name": "inventoryLevel", "description": "Returns an\nInventoryLevel\nobject by ID.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of the InventoryLevel to return."}], "returns": [], "examples": []}, {"name": "inventoryProperties", "description": "General inventory properties for the shop.", "arguments": [], "returns": [{"name": "InventoryProperties", "type": "InventoryProperties!", "description": "non-null"}, {"name": "InventoryProperties", "type": "InventoryProperties!", "description": "non-null"}], "examples": [{"description": "Get inventory properties for a shop", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `query inventoryProperties {\n    inventoryProperties {\n      quantityNames {\n        belongsTo\n        comprises\n        displayName\n        isInUse\n        name\n      }\n    }\n  }`,\n});\n"}, {"description": "Get inventory quantity names to be used with inventory queries and mutations", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `query inventoryProperties {\n    inventoryProperties {\n      quantityNames {\n        name\n        isInUse\n      }\n    }\n  }`,\n});\n"}]}], "mutations": [{"name": "inventoryActivate", "description": "Activate an inventory item at a location.", "arguments": [{"name": "available", "type": "Int", "required": false, "description": "The initial available quantity of the inventory item being activated at the location."}, {"name": "inventoryItemId", "type": "ID!", "required": false, "description": "The ID of the inventory item to activate."}, {"name": "locationId", "type": "ID!", "required": false, "description": "The ID of the location of the inventory item being activated."}, {"name": "onHand", "type": "Int", "required": false, "description": "The initial on_hand quantity of the inventory item being activated at the location."}, {"name": "stockAtLegacyLocation", "type": "Boolean", "required": false, "description": "Allow activation at or away from fulfillment service location with sku sharing off. This will deactivate inventory at all other locations."}], "returns": [], "examples": [{"description": "Activate an inventory item at a location with an initial available quantity", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation ActivateInventoryItem($inventoryItemId: ID!, $locationId: ID!, $available: Int) {\n      inventoryActivate(inventoryItemId: $inventoryItemId, locationId: $locationId, available: $available) {\n        inventoryLevel {\n          id\n          quantities(names: [\"available\"]) {\n            name\n            quantity\n          }\n          item {\n            id\n          }\n          location {\n            id\n          }\n        }\n      }\n    }`,\n    \"variables\": {\n      \"inventoryItemId\": \"gid://shopify/InventoryItem/43729076\",\n      \"locationId\": \"gid://shopify/Location/346779380\",\n      \"available\": 42\n    },\n  },\n});\n"}, {"description": "Activate an inventory item at a location without setting an available quantity", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation ActivateInventoryItem($inventoryItemId: ID!, $locationId: ID!) {\n      inventoryActivate(inventoryItemId: $inventoryItemId, locationId: $locationId) {\n        inventoryLevel {\n          id\n          quantities(names: [\"available\"]) {\n            name\n            quantity\n          }\n          item {\n            id\n          }\n          location {\n            id\n          }\n        }\n      }\n    }`,\n    \"variables\": {\n      \"inventoryItemId\": \"gid://shopify/InventoryItem/43729076\",\n      \"locationId\": \"gid://shopify/Location/346779380\"\n    },\n  },\n});\n"}, {"description": "Connects an inventory item to a location", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation InventoryActivate($inventoryItemId: ID!, $locationId: ID!) {\n      inventoryActivate(inventoryItemId: $inventoryItemId, locationId: $locationId) {\n        inventoryLevel {\n          id\n          canDeactivate\n          createdAt\n          item {\n            id\n          }\n          location {\n            id\n          }\n          quantities(names: [\"available\"]) {\n            name\n            quantity\n          }\n          updatedAt\n        }\n      }\n    }`,\n    \"variables\": {\n      \"inventoryItemId\": \"gid://shopify/InventoryItem/43729076\",\n      \"locationId\": \"gid://shopify/Location/346779380\"\n    },\n  },\n});\n"}, {"description": "inventoryActivate reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation ActivateInventoryItem($inventoryItemId: ID!, $locationId: ID!, $available: Int) {\n      inventoryActivate(inventoryItemId: $inventoryItemId, locationId: $locationId, available: $available) {\n        inventoryLevel {\n          id\n          quantities(names: [\"available\"]) {\n            name\n            quantity\n          }\n          item {\n            id\n          }\n          location {\n            id\n          }\n        }\n      }\n    }`,\n    \"variables\": {\n      \"inventoryItemId\": \"gid://shopify/InventoryItem/43729076\",\n      \"locationId\": \"gid://shopify/Location/346779380\",\n      \"available\": 42\n    },\n  },\n});\n"}]}, {"name": "inventoryAdjustQuantities", "description": "Apply changes to inventory quantities.", "arguments": [{"name": "input", "type": "InventoryAdjustQuantitiesInput!", "required": false, "description": "The information required to adjust inventory quantities."}], "returns": [], "examples": [{"description": "Adjusts the inventory level of an inventory item at a location", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation inventoryAdjustQuantities($input: InventoryAdjustQuantitiesInput!) {\n      inventoryAdjustQuantities(input: $input) {\n        userErrors {\n          field\n          message\n        }\n        inventoryAdjustmentGroup {\n          createdAt\n          reason\n          referenceDocumentUri\n          changes {\n            name\n            delta\n          }\n        }\n      }\n    }`,\n    \"variables\": {\n      \"input\": {\n        \"reason\": \"correction\",\n        \"name\": \"available\",\n        \"referenceDocumentUri\": \"logistics://some.warehouse/take/2023-01/13\",\n        \"changes\": [\n          {\n            \"delta\": -4,\n            \"inventoryItemId\": \"gid://shopify/InventoryItem/30322695\",\n            \"locationId\": \"gid://shopify/Location/124656943\"\n          }\n        ]\n      }\n    },\n  },\n});\n"}, {"description": "inventoryAdjustQuantities reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation inventoryAdjustQuantities($input: InventoryAdjustQuantitiesInput!) {\n      inventoryAdjustQuantities(input: $input) {\n        userErrors {\n          field\n          message\n        }\n        inventoryAdjustmentGroup {\n          createdAt\n          reason\n          referenceDocumentUri\n          changes {\n            name\n            delta\n          }\n        }\n      }\n    }`,\n    \"variables\": {\n      \"input\": {\n        \"reason\": \"correction\",\n        \"name\": \"available\",\n        \"referenceDocumentUri\": \"logistics://some.warehouse/take/2023-01/13\",\n        \"changes\": [\n          {\n            \"delta\": -4,\n            \"inventoryItemId\": \"gid://shopify/InventoryItem/30322695\",\n            \"locationId\": \"gid://shopify/Location/124656943\"\n          }\n        ]\n      }\n    },\n  },\n});\n"}]}, {"name": "inventoryBulkToggleActivation", "description": "Modify the activation status of an inventory item at locations. Activating an inventory item at a particular location allows that location to stock that inventory item. Deactivating an inventory item at a location removes the inventory item's quantities and turns off the inventory item from that location.", "arguments": [{"name": "inventoryItemId", "type": "ID!", "required": false, "description": "The ID of the inventory item to modify the activation status locations for."}, {"name": "inventoryItemUpdates", "type": "[InventoryBulkToggleActivationInput!]!", "required": false, "description": "A list of pairs of locations and activate status to update for the specified inventory item."}], "returns": [], "examples": [{"description": "Activate an inventory item at a location", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation inventoryBulkToggleActivation($inventoryItemId: ID!, $inventoryItemUpdates: [InventoryBulkToggleActivationInput!]!) {\n      inventoryBulkToggleActivation(inventoryItemId: $inventoryItemId, inventoryItemUpdates: $inventoryItemUpdates) {\n        inventoryItem {\n          id\n        }\n        inventoryLevels {\n          id\n          quantities(names: [\"available\"]) {\n            name\n            quantity\n          }\n          location {\n            id\n          }\n        }\n        userErrors {\n          field\n          message\n          code\n        }\n      }\n    }`,\n    \"variables\": {\n      \"inventoryItemId\": \"gid://shopify/InventoryItem/30322695\",\n      \"inventoryItemUpdates\": [\n        {\n          \"locationId\": \"gid://shopify/Location/648019273\",\n          \"activate\": true\n        }\n      ]\n    },\n  },\n});\n"}, {"description": "Deactivate an inventory item at a location", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation inventoryBulkToggleActivation($inventoryItemId: ID!, $inventoryItemUpdates: [InventoryBulkToggleActivationInput!]!) {\n      inventoryBulkToggleActivation(inventoryItemId: $inventoryItemId, inventoryItemUpdates: $inventoryItemUpdates) {\n        inventoryItem {\n          id\n        }\n        inventoryLevels {\n          id\n        }\n        userErrors {\n          field\n          message\n          code\n        }\n      }\n    }`,\n    \"variables\": {\n      \"inventoryItemId\": \"gid://shopify/InventoryItem/30322695\",\n      \"inventoryItemUpdates\": [\n        {\n          \"locationId\": \"gid://shopify/Location/124656943\",\n          \"activate\": false\n        }\n      ]\n    },\n  },\n});\n"}, {"description": "inventoryBulkToggleActivation reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation inventoryBulkToggleActivation($inventoryItemId: ID!, $inventoryItemUpdates: [InventoryBulkToggleActivationInput!]!) {\n      inventoryBulkToggleActivation(inventoryItemId: $inventoryItemId, inventoryItemUpdates: $inventoryItemUpdates) {\n        inventoryItem {\n          id\n        }\n        inventoryLevels {\n          id\n          quantities(names: [\"available\"]) {\n            name\n            quantity\n          }\n          location {\n            id\n          }\n        }\n        userErrors {\n          field\n          message\n          code\n        }\n      }\n    }`,\n    \"variables\": {\n      \"inventoryItemId\": \"gid://shopify/InventoryItem/30322695\",\n      \"inventoryItemUpdates\": [\n        {\n          \"locationId\": \"gid://shopify/Location/648019273\",\n          \"activate\": true\n        }\n      ]\n    },\n  },\n});\n"}]}, {"name": "inventoryDeactivate", "description": "Removes an inventory item's quantities from a location, and turns off inventory at the location.", "arguments": [{"name": "inventoryLevelId", "type": "ID!", "required": false, "description": "The ID of the inventory level to deactivate."}], "returns": [], "examples": [{"description": "Deletes an inventory level from a location", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation inventoryDeactivate($inventoryLevelId: ID!) {\n      inventoryDeactivate(inventoryLevelId: $inventoryLevelId) {\n        userErrors {\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"inventoryLevelId\": \"gid://shopify/InventoryLevel/820859520?inventory_item_id=826867926\"\n    },\n  },\n});\n"}, {"description": "inventoryDeactivate reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation inventoryDeactivate($inventoryLevelId: ID!) {\n      inventoryDeactivate(inventoryLevelId: $inventoryLevelId) {\n        userErrors {\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"inventoryLevelId\": \"gid://shopify/InventoryLevel/820859520?inventory_item_id=826867926\"\n    },\n  },\n});\n"}]}, {"name": "inventoryItemUpdate", "description": "Updates an inventory item.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of the inventory item to update."}, {"name": "input", "type": "InventoryItemInput!", "required": false, "description": "The input fields that update an\ninventoryItem."}], "returns": [], "examples": [{"description": "Updates an existing inventory item", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation inventoryItemUpdate($id: ID!, $input: InventoryItemInput!) {\n      inventoryItemUpdate(id: $id, input: $input) {\n        inventoryItem {\n          id\n          unitCost {\n            amount\n          }\n          tracked\n          countryCodeOfOrigin\n          provinceCodeOfOrigin\n          harmonizedSystemCode\n          countryHarmonizedSystemCodes(first: 1) {\n            edges {\n              node {\n                harmonizedSystemCode\n                countryCode\n              }\n            }\n          }\n        }\n        userErrors {\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/InventoryItem/43729076\",\n      \"input\": {\n        \"cost\": 145.89,\n        \"tracked\": false,\n        \"countryCodeOfOrigin\": \"US\",\n        \"provinceCodeOfOrigin\": \"OR\",\n        \"harmonizedSystemCode\": \"621710\",\n        \"countryHarmonizedSystemCodes\": [\n          {\n            \"harmonizedSystemCode\": \"6217109510\",\n            \"countryCode\": \"CA\"\n          }\n        ]\n      }\n    },\n  },\n});\n"}, {"description": "inventoryItemUpdate reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation inventoryItemUpdate($id: ID!, $input: InventoryItemInput!) {\n      inventoryItemUpdate(id: $id, input: $input) {\n        inventoryItem {\n          id\n          unitCost {\n            amount\n          }\n          tracked\n          countryCodeOfOrigin\n          provinceCodeOfOrigin\n          harmonizedSystemCode\n          countryHarmonizedSystemCodes(first: 1) {\n            edges {\n              node {\n                harmonizedSystemCode\n                countryCode\n              }\n            }\n          }\n        }\n        userErrors {\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/InventoryItem/43729076\",\n      \"input\": {\n        \"cost\": 145.89,\n        \"tracked\": false,\n        \"countryCodeOfOrigin\": \"US\",\n        \"provinceCodeOfOrigin\": \"OR\",\n        \"harmonizedSystemCode\": \"621710\",\n        \"countryHarmonizedSystemCodes\": [\n          {\n            \"harmonizedSystemCode\": \"6217109510\",\n            \"countryCode\": \"CA\"\n          }\n        ]\n      }\n    },\n  },\n});\n"}]}, {"name": "inventoryMoveQuantities", "description": "Moves inventory between inventory quantity names at a single location.", "arguments": [{"name": "input", "type": "InventoryMoveQuantitiesInput!", "required": false, "description": "The information required to move inventory quantities."}], "returns": [], "examples": [{"description": "inventoryMoveQuantities reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation inventoryMoveQuantities($input: InventoryMoveQuantitiesInput!, $quantityNames: [String!]) {\n      inventoryMoveQuantities(input: $input) {\n        userErrors {\n          field\n          message\n          code\n        }\n        inventoryAdjustmentGroup {\n          createdAt\n          reason\n          referenceDocumentUri\n          changes(quantityNames: $quantityNames) {\n            name\n            delta\n          }\n        }\n      }\n    }`,\n    \"variables\": {\n      \"input\": {\n        \"reason\": \"damaged\",\n        \"referenceDocumentUri\": \"logistics://some.warehouse/take/2023-01-23T13:14:15Z\",\n        \"changes\": [\n          {\n            \"quantity\": 10,\n            \"inventoryItemId\": \"gid://shopify/InventoryItem/30322695\",\n            \"from\": {\n              \"locationId\": \"gid://shopify/Location/124656943\",\n              \"name\": \"available\",\n              \"ledgerDocumentUri\": null\n            },\n            \"to\": {\n              \"locationId\": \"gid://shopify/Location/124656943\",\n              \"name\": \"reserved\",\n              \"ledgerDocumentUri\": \"logistics://toronto.warehouse/work-orders/2023-01-04/2\"\n            }\n          }\n        ]\n      },\n      \"quantityNames\": [\n        \"committed\",\n        \"reserved\",\n        \"safety_stock\",\n        \"quality_control\",\n        \"damaged\",\n        \"available\",\n        \"on_hand\",\n        \"incoming\"\n      ]\n    },\n  },\n});\n"}]}, {"name": "inventorySetOnHandQuantities", "description": "Set inventory on-hand quantities using absolute values. Use inventorySetQuantities to set on_hand or available quantites instead.", "arguments": [{"name": "input", "type": "InventorySetOnHandQuantitiesInput!", "required": false, "description": "The information required to set inventory on hand quantities."}], "returns": [], "examples": [{"description": "inventorySetOnHandQuantities reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation inventorySetOnHandQuantities($input: InventorySetOnHandQuantitiesInput!) {\n      inventorySetOnHandQuantities(input: $input) {\n        userErrors {\n          field\n          message\n        }\n        inventoryAdjustmentGroup {\n          createdAt\n          reason\n          referenceDocumentUri\n          changes {\n            name\n            delta\n          }\n        }\n      }\n    }`,\n    \"variables\": {\n      \"input\": {\n        \"reason\": \"correction\",\n        \"referenceDocumentUri\": \"logistics://some.warehouse/take/2023-01-23T13:14:15Z\",\n        \"setQuantities\": [\n          {\n            \"inventoryItemId\": \"gid://shopify/InventoryItem/30322695\",\n            \"locationId\": \"gid://shopify/Location/124656943\",\n            \"quantity\": 42\n          },\n          {\n            \"inventoryItemId\": \"gid://shopify/InventoryItem/113711323\",\n            \"locationId\": \"gid://shopify/Location/124656943\",\n            \"quantity\": 13\n          }\n        ]\n      }\n    },\n  },\n});\n"}]}, {"name": "inventorySetQuantities", "description": "Set quantities of specified name using absolute values. This mutation supports compare-and-set functionality to handle\nconcurrent requests properly. If ignoreCompareQuantity is not set to true,\nthe mutation will only update the quantity if the persisted quantity matches the compareQuantity value.\nIf the compareQuantity value does not match the persisted value, the mutation will return an error. In order to opt out\nof the compareQuantity check, the ignoreCompareQuantity argument can be set to true.\nNoteOnly use this mutation if calling on behalf of a system that acts as the source of truth for inventory quantities,\notherwise please consider using the inventoryAdjustQuantities mutation.\nOpting out of the compareQuantity check can lead to inaccurate inventory quantities if multiple requests are made concurrently.\nIt is recommended to always include the compareQuantity value to ensure the accuracy of the inventory quantities and to opt out\nof the check using ignoreCompareQuantity only when necessary.", "arguments": [{"name": "input", "type": "InventorySetQuantitiesInput!", "required": false, "description": "The information required to set inventory quantities."}], "returns": [], "examples": [{"description": "Sets the inventory level for an inventory item at a location", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation InventorySet($input: InventorySetQuantitiesInput!) {\n      inventorySetQuantities(input: $input) {\n        inventoryAdjustmentGroup {\n          createdAt\n          reason\n          referenceDocumentUri\n          changes {\n            name\n            delta\n          }\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"input\": {\n        \"name\": \"available\",\n        \"reason\": \"correction\",\n        \"referenceDocumentUri\": \"logistics://some.warehouse/take/2023-01-23T13:14:15Z\",\n        \"quantities\": [\n          {\n            \"inventoryItemId\": \"gid://shopify/InventoryItem/30322695\",\n            \"locationId\": \"gid://shopify/Location/124656943\",\n            \"quantity\": 11,\n            \"compareQuantity\": 1\n          }\n        ]\n      }\n    },\n  },\n});\n"}, {"description": "Setting available quantity at a location with compare-and-swap (CAS) enabled", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation InventorySet($input: InventorySetQuantitiesInput!) {\n      inventorySetQuantities(input: $input) {\n        inventoryAdjustmentGroup {\n          createdAt\n          reason\n          referenceDocumentUri\n          changes {\n            name\n            delta\n          }\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"input\": {\n        \"name\": \"available\",\n        \"reason\": \"correction\",\n        \"referenceDocumentUri\": \"logistics://some.warehouse/take/2023-01-23T13:14:15Z\",\n        \"quantities\": [\n          {\n            \"inventoryItemId\": \"gid://shopify/InventoryItem/30322695\",\n            \"locationId\": \"gid://shopify/Location/124656943\",\n            \"quantity\": 11,\n            \"compareQuantity\": 1\n          }\n        ]\n      }\n    },\n  },\n});\n"}, {"description": "Setting available quantity at a location without compare-and-swap (CAS) enabled", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation InventorySet($input: InventorySetQuantitiesInput!) {\n      inventorySetQuantities(input: $input) {\n        inventoryAdjustmentGroup {\n          createdAt\n          reason\n          referenceDocumentUri\n          changes {\n            name\n            delta\n          }\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"input\": {\n        \"name\": \"available\",\n        \"reason\": \"correction\",\n        \"referenceDocumentUri\": \"logistics://some.warehouse/take/2023-01-23T13:14:15Z\",\n        \"quantities\": [\n          {\n            \"inventoryItemId\": \"gid://shopify/InventoryItem/30322695\",\n            \"locationId\": \"gid://shopify/Location/124656943\",\n            \"quantity\": 11,\n            \"compareQuantity\": 1\n          }\n        ]\n      }\n    },\n  },\n});\n"}]}, {"name": "inventorySetScheduledChanges", "description": "Set up scheduled changes of inventory items.", "arguments": [{"name": "input", "type": "InventorySetScheduledChangesInput!", "required": false, "description": "The input fields for setting up scheduled changes of inventory items."}], "returns": [], "examples": []}], "objects": [{"name": "CountryHarmonizedSystemCode", "description": "The country-specific harmonized system code and ISO country code for an inventory item.", "fields_and_connections": [{"name": "countryCode", "type": "CountryCode!", "description": "The ISO 3166-1 alpha-2 country code for the country that issued the specified harmonized system code.", "not_nullable": true}, {"name": "harmonizedSystemCode", "type": "String!", "description": "The country-specific harmonized system code. These are usually longer than 6 digits.", "not_nullable": true}], "examples": []}, {"name": "InventoryAdjustmentGroup", "description": "Represents a group of adjustments made as part of the same operation.", "fields_and_connections": [{"name": "app", "type": "inventoryAdjustQuantities", "description": "Apply changes to inventory quantities.", "not_nullable": false}, {"name": "app", "type": "inventoryMoveQuantities", "description": "Moves inventory between inventory quantity names at a single location.", "not_nullable": false}, {"name": "app", "type": "inventorySetQuantities", "description": "Set quantities of specified name using absolute values. This mutation supports compare-and-set functionality to handle\nconcurrent requests properly. If ignoreCompareQuantity is not set to true,\nthe mutation will only update the quantity if the persisted quantity matches the compareQuantity value.\nIf the compareQuantity value does not match the persisted value, the mutation will return an error. In order to opt out\nof the compareQuantity check, the ignoreCompareQuantity argument can be set to true.\nNoteOnly use this mutation if calling on behalf of a system that acts as the source of truth for inventory quantities,\notherwise please consider using the inventoryAdjustQuantities mutation.\nOpting out of the compareQuantity check can lead to inaccurate inventory quantities if multiple requests are made concurrently.\nIt is recommended to always include the compareQuantity value to ensure the accuracy of the inventory quantities and to opt out\nof the check using ignoreCompareQuantity only when necessary.", "not_nullable": false}, {"name": "app", "type": "inventorySetOnHandQuantities", "description": "Set inventory on-hand quantities using absolute values. Use inventorySetQuantities to set on_hand or available quantites instead.", "not_nullable": false}, {"name": "app", "type": "Node", "description": "The app that triggered the inventory event, if one exists.", "not_nullable": false}], "examples": []}, {"name": "InventoryChange", "description": "Represents a change in an inventory quantity of an inventory item at a location.", "fields_and_connections": [{"name": "delta", "type": "Int!", "description": "The amount by which the inventory quantity was changed.", "not_nullable": true}, {"name": "item", "type": "InventoryItem", "description": "The inventory item associated with this inventory change.", "not_nullable": false}, {"name": "ledgerDocumentUri", "type": "String", "description": "A URI that represents what the inventory quantity change was applied to.", "not_nullable": false}, {"name": "location", "type": "Location", "description": "The location associated with this inventory change.", "not_nullable": false}, {"name": "name", "type": "String!", "description": "The name\nof the inventory quantity that was changed.", "not_nullable": true}, {"name": "quantityAfterChange", "type": "Int", "description": "The quantity of named inventory after the change.", "not_nullable": false}], "examples": []}, {"name": "InventoryItem", "description": "Represents the goods available to be shipped to a customer.\nIt holds essential information about the goods, including SKU and whether it is tracked.\nLearn more about the relationships between inventory objects.", "fields_and_connections": [{"name": "countryCodeOfOrigin", "type": "inventoryItem", "description": "Returns an\nInventoryItem\nobject by ID.", "not_nullable": false}, {"name": "countryCodeOfOrigin", "type": "inventoryItems", "description": "Returns a list of inventory items.", "not_nullable": false}, {"name": "countryCodeOfOrigin", "type": "inventoryBulkToggleActivation", "description": "Modify the activation status of an inventory item at locations. Activating an inventory item at a particular location allows that location to stock that inventory item. Deactivating an inventory item at a location removes the inventory item's quantities and turns off the inventory item from that location.", "not_nullable": false}, {"name": "countryCodeOfOrigin", "type": "inventoryItemUpdate", "description": "Updates an inventory item.", "not_nullable": false}, {"name": "countryCodeOfOrigin", "type": "LegacyInteroperability", "description": "The ISO 3166-1 alpha-2 country code of where the item originated from.", "not_nullable": false}, {"name": "countryCodeOfOrigin", "type": "Node", "description": "The ISO 3166-1 alpha-2 country code of where the item originated from.", "not_nullable": false}], "examples": []}, {"name": "InventoryItemMeasurement", "description": "Represents the packaged dimension for an inventory item.", "fields_and_connections": [{"name": "id", "type": "Node", "description": "A globally-unique ID.", "not_nullable": false}], "examples": []}, {"name": "InventoryLevel", "description": "The quantities of an inventory item that are related to a specific location.\nLearn more about the relationships between inventory objects.", "fields_and_connections": [{"name": "canDeactivate", "type": "inventoryLevel", "description": "Returns an\nInventoryLevel\nobject by ID.", "not_nullable": false}, {"name": "canDeactivate", "type": "inventoryActivate", "description": "Activate an inventory item at a location.", "not_nullable": false}, {"name": "canDeactivate", "type": "inventoryBulkToggleActivation", "description": "Modify the activation status of an inventory item at locations. Activating an inventory item at a particular location allows that location to stock that inventory item. Deactivating an inventory item at a location removes the inventory item's quantities and turns off the inventory item from that location.", "not_nullable": false}, {"name": "canDeactivate", "type": "Node", "description": "Whether the inventory items associated with the inventory level can be deactivated.", "not_nullable": false}], "examples": []}, {"name": "InventoryProperties", "description": "General inventory properties for the shop.", "fields_and_connections": [{"name": "quantityNames", "type": "inventoryProperties", "description": "General inventory properties for the shop.", "not_nullable": false}], "examples": []}, {"name": "InventoryQuantity", "description": "Represents a quantity of an inventory item at a specific location, for a specific name.", "fields_and_connections": [{"name": "id", "type": "Node", "description": "A globally-unique ID.", "not_nullable": false}], "examples": []}, {"name": "InventoryQuantityName", "description": "Details about an individual quantity name.", "fields_and_connections": [{"name": "belongsTo", "type": "[String!]!", "description": "List of quantity names that this quantity name belongs to.", "not_nullable": true}, {"name": "comprises", "type": "[String!]!", "description": "List of quantity names that comprise this quantity name.", "not_nullable": true}, {"name": "displayName", "type": "String", "description": "The display name for quantity names translated into applicable language.", "not_nullable": false}, {"name": "isInUse", "type": "Boolean!", "description": "Whether the quantity name has been used by the merchant.", "not_nullable": true}, {"name": "name", "type": "String!", "description": "The name of\nthe inventory quantity. Used by\ninventory queries and mutations.", "not_nullable": true}], "examples": []}, {"name": "InventoryScheduledChange", "description": "Returns the scheduled changes to inventory states related to the ledger document.", "fields_and_connections": [{"name": "expectedAt", "type": "inventorySetScheduledChanges", "description": "Set up scheduled changes of inventory items.", "not_nullable": false}], "examples": []}]}, {"name": "Localizations", "queries": [{"name": "availableLocales", "description": "A list of available locales.", "arguments": [], "returns": [{"name": "Locale", "type": "[Locale!]!", "description": "non-null"}, {"name": "Locale", "type": "[Locale!]!", "description": "non-null"}, {"name": "Locale", "type": "[Locale!]!", "description": "non-null"}], "examples": []}, {"name": "marketLocalizableResource", "description": "A resource that can have localized values for different markets.", "arguments": [{"name": "resourceId", "type": "ID!", "required": false, "description": "Find a market localizable resource by ID."}], "returns": [], "examples": []}, {"name": "marketLocalizableResources", "description": "Resources that can have localized values for different markets.", "arguments": [{"name": "after", "type": "String", "required": false, "description": "The elements that come after the specified cursor."}, {"name": "before", "type": "String", "required": false, "description": "The elements that come before the specified cursor."}, {"name": "first", "type": "Int", "required": false, "description": "The first n elements from the paginated list."}, {"name": "last", "type": "Int", "required": false, "description": "The last n elements from the paginated list."}, {"name": "resourceType", "type": "MarketLocalizableResourceType!", "required": false, "description": "Return only resources of a type."}, {"name": "reverse", "type": "Boolean", "required": false, "description": "Reverse the order of the underlying list."}], "returns": [], "examples": []}, {"name": "marketLocalizableResourcesByIds", "description": "Resources that can have localized values for different markets.", "arguments": [{"name": "after", "type": "String", "required": false, "description": "The elements that come after the specified cursor."}, {"name": "before", "type": "String", "required": false, "description": "The elements that come before the specified cursor."}, {"name": "first", "type": "Int", "required": false, "description": "The first n elements from the paginated list."}, {"name": "last", "type": "Int", "required": false, "description": "The last n elements from the paginated list."}, {"name": "resourceIds", "type": "[ID!]!", "required": false, "description": "Return only resources for given IDs."}, {"name": "reverse", "type": "Boolean", "required": false, "description": "Reverse the order of the underlying list."}], "returns": [], "examples": []}, {"name": "shopLocales", "description": "A list of locales available on a shop.", "arguments": [{"name": "published", "type": "Boolean", "required": false, "description": "Return only published locales."}], "returns": [], "examples": []}, {"name": "translatableResource", "description": "A resource that can have localized values for different languages.", "arguments": [{"name": "resourceId", "type": "ID!", "required": false, "description": "Find a translatable resource by ID."}], "returns": [], "examples": [{"description": "Retrieve existing French translations on a collection", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `query {\n    translatableResource(resourceId: \"gid://shopify/Collection/1007901140\") {\n      resourceId\n      translations(locale: \"fr\") {\n        key\n        value\n      }\n    }\n  }`,\n});\n"}, {"description": "Retrieve existing French translations specific to a market on a collection", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `query {\n    translatableResource(resourceId: \"gid://shopify/Collection/1007901140\") {\n      resourceId\n      translations(locale: \"fr\", marketId: \"gid://shopify/Market/128989799\") {\n        key\n        value\n        market {\n          id\n          name\n        }\n      }\n    }\n  }`,\n});\n"}, {"description": "Retrieve translatable content for a collection", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `query {\n    translatableResource(resourceId: \"gid://shopify/Collection/1007901140\") {\n      resourceId\n      translatableContent {\n        key\n        value\n        digest\n        locale\n      }\n    }\n  }`,\n});\n"}]}, {"name": "translatableResources", "description": "Resources that can have localized values for different languages.", "arguments": [{"name": "after", "type": "String", "required": false, "description": "The elements that come after the specified cursor."}, {"name": "before", "type": "String", "required": false, "description": "The elements that come before the specified cursor."}, {"name": "first", "type": "Int", "required": false, "description": "The first n elements from the paginated list."}, {"name": "last", "type": "Int", "required": false, "description": "The last n elements from the paginated list."}, {"name": "resourceType", "type": "TranslatableResourceType!", "required": false, "description": "Return only resources of a type."}, {"name": "reverse", "type": "Boolean", "required": false, "description": "Reverse the order of the underlying list."}], "returns": [], "examples": []}, {"name": "translatableResourcesByIds", "description": "Resources that can have localized values for different languages.", "arguments": [{"name": "after", "type": "String", "required": false, "description": "The elements that come after the specified cursor."}, {"name": "before", "type": "String", "required": false, "description": "The elements that come before the specified cursor."}, {"name": "first", "type": "Int", "required": false, "description": "The first n elements from the paginated list."}, {"name": "last", "type": "Int", "required": false, "description": "The last n elements from the paginated list."}, {"name": "resourceIds", "type": "[ID!]!", "required": false, "description": "Return only resources for given IDs."}, {"name": "reverse", "type": "Boolean", "required": false, "description": "Reverse the order of the underlying list."}], "returns": [], "examples": []}], "mutations": [{"name": "marketLocalizationsRegister", "description": "Creates or updates market localizations.", "arguments": [{"name": "marketLocalizations", "type": "[MarketLocalizationRegisterInput!]!", "required": false, "description": "The input fields for a market localization."}, {"name": "resourceId", "type": "ID!", "required": false, "description": "The ID of the resource that is being localized within the context of a market."}], "returns": [], "examples": []}, {"name": "marketLocalizationsRemove", "description": "Deletes market localizations.", "arguments": [{"name": "marketIds", "type": "[ID!]!", "required": false, "description": "The list of market IDs."}, {"name": "marketLocalizationKeys", "type": "[String!]!", "required": false, "description": "The list of market localization keys."}, {"name": "resourceId", "type": "ID!", "required": false, "description": "The ID of the resource for which market localizations are being deleted."}], "returns": [], "examples": []}, {"name": "shopLocaleDisable", "description": "Deletes a locale for a shop. This also deletes all translations of this locale.", "arguments": [{"name": "locale", "type": "String!", "required": false, "description": "ISO code of the locale to delete."}], "returns": [], "examples": [{"description": "Delete the Korean locale from a shop", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation disableLocale($locale: String!) {\n      shopLocaleDisable(locale: $locale) {\n        userErrors {\n          message\n          field\n        }\n        locale\n      }\n    }`,\n    \"variables\": {\n      \"locale\": \"ko\"\n    },\n  },\n});\n"}, {"description": "shopLocaleDisable reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation disableLocale($locale: String!) {\n      shopLocaleDisable(locale: $locale) {\n        userErrors {\n          message\n          field\n        }\n        locale\n      }\n    }`,\n    \"variables\": {\n      \"locale\": \"ko\"\n    },\n  },\n});\n"}]}, {"name": "shopLocaleEnable", "description": "Adds a locale for a shop. The newly added locale is in the unpublished state.", "arguments": [{"name": "locale", "type": "String!", "required": false, "description": "ISO code of the locale to enable."}, {"name": "marketWebPresenceIds", "type": "[ID!]", "required": false, "description": "The list of markets web presences to add the locale to."}], "returns": [], "examples": [{"description": "Enable a locale", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation enableLocale($locale: String!) {\n      shopLocaleEnable(locale: $locale) {\n        userErrors {\n          message\n          field\n        }\n        shopLocale {\n          locale\n          name\n          primary\n          published\n        }\n      }\n    }`,\n    \"variables\": {\n      \"locale\": \"ko\"\n    },\n  },\n});\n"}, {"description": "shopLocaleEnable reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation enableLocale($locale: String!) {\n      shopLocaleEnable(locale: $locale) {\n        userErrors {\n          message\n          field\n        }\n        shopLocale {\n          locale\n          name\n          primary\n          published\n        }\n      }\n    }`,\n    \"variables\": {\n      \"locale\": \"ko\"\n    },\n  },\n});\n"}]}, {"name": "shopLocaleUpdate", "description": "Updates a locale for a shop.", "arguments": [{"name": "locale", "type": "String!", "required": false, "description": "ISO code of the locale to update."}, {"name": "shopLocale", "type": "ShopLocaleInput!", "required": false, "description": "Specifies the input fields for a shop locale."}], "returns": [], "examples": [{"description": "Publish a locale", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation updateLocale($locale: String!, $shopLocale: ShopLocaleInput!) {\n      shopLocaleUpdate(locale: $locale, shopLocale: $shopLocale) {\n        userErrors {\n          message\n          field\n        }\n        shopLocale {\n          name\n          locale\n          primary\n          published\n        }\n      }\n    }`,\n    \"variables\": {\n      \"locale\": \"ko\",\n      \"shopLocale\": {\n        \"published\": true\n      }\n    },\n  },\n});\n"}, {"description": "Unpublish a locale", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation updateLocale($locale: String!, $shopLocale: ShopLocaleInput!) {\n      shopLocaleUpdate(locale: $locale, shopLocale: $shopLocale) {\n        userErrors {\n          message\n          field\n        }\n        shopLocale {\n          name\n          locale\n          primary\n          published\n        }\n      }\n    }`,\n    \"variables\": {\n      \"locale\": \"ko\",\n      \"shopLocale\": {\n        \"published\": false\n      }\n    },\n  },\n});\n"}, {"description": "shopLocaleUpdate reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation updateLocale($locale: String!, $shopLocale: ShopLocaleInput!) {\n      shopLocaleUpdate(locale: $locale, shopLocale: $shopLocale) {\n        userErrors {\n          message\n          field\n        }\n        shopLocale {\n          name\n          locale\n          primary\n          published\n        }\n      }\n    }`,\n    \"variables\": {\n      \"locale\": \"ko\",\n      \"shopLocale\": {\n        \"published\": true\n      }\n    },\n  },\n});\n"}]}, {"name": "translationsRegister", "description": "Creates or updates translations.", "arguments": [{"name": "resourceId", "type": "ID!", "required": false, "description": "ID of the resource that is being translated."}, {"name": "translations", "type": "[TranslationInput!]!", "required": false, "description": "Specifies the input fields for a translation."}], "returns": [], "examples": [{"description": "Register a French product title", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation translationsRegister($resourceId: ID!, $translations: [TranslationInput!]!) {\n      translationsRegister(resourceId: $resourceId, translations: $translations) {\n        userErrors {\n          message\n          field\n        }\n        translations {\n          key\n          value\n        }\n      }\n    }`,\n    \"variables\": {\n      \"resourceId\": \"gid://shopify/Product/20995642\",\n      \"translations\": [\n        {\n          \"locale\": \"fr\",\n          \"key\": \"title\",\n          \"value\": \"L'\u00e9l\u00e9ment\",\n          \"translatableContentDigest\": \"4e5b548d6d61f0006840aca106f7464a4b59e5a854317d5b57861b8423901bf6\"\n        }\n      ]\n    },\n  },\n});\n"}, {"description": "Register a French product title specific to a market", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation translationsRegister($resourceId: ID!, $translations: [TranslationInput!]!) {\n      translationsRegister(resourceId: $resourceId, translations: $translations) {\n        userErrors {\n          message\n          field\n        }\n        translations {\n          key\n          value\n          market {\n            id\n            name\n          }\n        }\n      }\n    }`,\n    \"variables\": {\n      \"resourceId\": \"gid://shopify/Product/20995642\",\n      \"translations\": [\n        {\n          \"locale\": \"fr\",\n          \"key\": \"title\",\n          \"value\": \"L'\u00e9l\u00e9ment canadien\",\n          \"translatableContentDigest\": \"4e5b548d6d61f0006840aca106f7464a4b59e5a854317d5b57861b8423901bf6\",\n          \"marketId\": \"gid://shopify/Market/128989799\"\n        }\n      ]\n    },\n  },\n});\n"}, {"description": "Register a product title in the shop default language specific to a market", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation translationsRegister($resourceId: ID!, $translations: [TranslationInput!]!) {\n      translationsRegister(resourceId: $resourceId, translations: $translations) {\n        userErrors {\n          message\n          field\n        }\n        translations {\n          key\n          value\n          market {\n            id\n            name\n          }\n        }\n      }\n    }`,\n    \"variables\": {\n      \"resourceId\": \"gid://shopify/Product/20995642\",\n      \"translations\": [\n        {\n          \"locale\": \"en\",\n          \"key\": \"title\",\n          \"value\": \"Canadian element\",\n          \"translatableContentDigest\": \"4e5b548d6d61f0006840aca106f7464a4b59e5a854317d5b57861b8423901bf6\",\n          \"marketId\": \"gid://shopify/Market/128989799\"\n        }\n      ]\n    },\n  },\n});\n"}, {"description": "translationsRegister reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation translationsRegister($resourceId: ID!, $translations: [TranslationInput!]!) {\n      translationsRegister(resourceId: $resourceId, translations: $translations) {\n        userErrors {\n          message\n          field\n        }\n        translations {\n          key\n          value\n        }\n      }\n    }`,\n    \"variables\": {\n      \"resourceId\": \"gid://shopify/Product/20995642\",\n      \"translations\": [\n        {\n          \"locale\": \"fr\",\n          \"key\": \"title\",\n          \"value\": \"L'\u00e9l\u00e9ment\",\n          \"translatableContentDigest\": \"4e5b548d6d61f0006840aca106f7464a4b59e5a854317d5b57861b8423901bf6\"\n        }\n      ]\n    },\n  },\n});\n"}]}, {"name": "translationsRemove", "description": "Deletes translations.", "arguments": [{"name": "locales", "type": "[String!]!", "required": false, "description": "The list of translation locales. Only locales returned in shopLocales are valid."}, {"name": "marketIds", "type": "[ID!]", "required": false, "description": "The list of market IDs."}, {"name": "resourceId", "type": "ID!", "required": false, "description": "ID of the translatable resource for which translations are being deleted."}, {"name": "translationKeys", "type": "[String!]!", "required": false, "description": "The list of translation keys."}], "returns": [], "examples": [{"description": "Remove a French product title translation", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation translationsRemove($resourceId: ID!, $translationKeys: [String!]!, $locales: [String!]!) {\n      translationsRemove(resourceId: $resourceId, translationKeys: $translationKeys, locales: $locales) {\n        userErrors {\n          message\n          field\n        }\n        translations {\n          key\n          value\n        }\n      }\n    }`,\n    \"variables\": {\n      \"resourceId\": \"gid://shopify/Product/20995642\",\n      \"locales\": [\n        \"fr\"\n      ],\n      \"translationKeys\": [\n        \"title\"\n      ]\n    },\n  },\n});\n"}, {"description": "Remove a French product title translation specific to a market", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation translationsRemove($resourceId: ID!, $translationKeys: [String!]!, $locales: [String!]!, $marketIds: [ID!]) {\n      translationsRemove(resourceId: $resourceId, translationKeys: $translationKeys, locales: $locales, marketIds: $marketIds) {\n        userErrors {\n          message\n          field\n        }\n        translations {\n          key\n          value\n          market {\n            id\n          }\n        }\n      }\n    }`,\n    \"variables\": {\n      \"resourceId\": \"gid://shopify/Product/20995642\",\n      \"locales\": [\n        \"fr\"\n      ],\n      \"translationKeys\": [\n        \"title\"\n      ],\n      \"marketIds\": [\n        \"gid://shopify/Market/128989799\"\n      ]\n    },\n  },\n});\n"}, {"description": "translationsRemove reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation translationsRemove($resourceId: ID!, $translationKeys: [String!]!, $locales: [String!]!) {\n      translationsRemove(resourceId: $resourceId, translationKeys: $translationKeys, locales: $locales) {\n        userErrors {\n          message\n          field\n        }\n        translations {\n          key\n          value\n        }\n      }\n    }`,\n    \"variables\": {\n      \"resourceId\": \"gid://shopify/Product/20995642\",\n      \"locales\": [\n        \"fr\"\n      ],\n      \"translationKeys\": [\n        \"title\"\n      ]\n    },\n  },\n});\n"}]}], "objects": [{"name": "Locale", "description": "A locale.", "fields_and_connections": [{"name": "isoCode", "type": "availableLocales", "description": "A list of available locales.", "not_nullable": false}], "examples": []}, {"name": "LocalizationExtension", "description": "Represents the value captured by a localization extension. Localization extensions are additional fields required by certain countries on international orders. For example, some countries require additional fields for customs information or tax identification numbers.", "fields_and_connections": [{"name": "countryCode", "type": "CountryCode!", "description": "Country ISO 3166-1 alpha-2 code.", "not_nullable": true}, {"name": "key", "type": "LocalizationExtensionKey!", "description": "The localized extension keys that are allowed.", "not_nullable": true}, {"name": "purpose", "type": "LocalizationExtensionPurpose!", "description": "The purpose of this localization extension.", "not_nullable": true}, {"name": "title", "type": "String!", "description": "The localized extension title.", "not_nullable": true}, {"name": "value", "type": "String!", "description": "The value of the field.", "not_nullable": true}], "examples": []}, {"name": "MarketLocalizableContent", "description": "The market localizable content of a resource's field.", "fields_and_connections": [{"name": "digest", "type": "String", "description": "The hash digest representation of the content value.", "not_nullable": false}, {"name": "key", "type": "String!", "description": "The resource field that's being localized.", "not_nullable": true}, {"name": "value", "type": "String", "description": "The content value.", "not_nullable": false}], "examples": []}, {"name": "MarketLocalizableResource", "description": "A resource that has market localizable fields.", "fields_and_connections": [{"name": "marketLocalizableContent", "type": "marketLocalizableResource", "description": "A resource that can have localized values for different markets.", "not_nullable": false}, {"name": "marketLocalizableContent", "type": "marketLocalizableResources", "description": "Resources that can have localized values for different markets.", "not_nullable": false}, {"name": "marketLocalizableContent", "type": "marketLocalizableResourcesByIds", "description": "Resources that can have localized values for different markets.", "not_nullable": false}], "examples": []}, {"name": "MarketLocalization", "description": "The market localization of a field within a resource, which is determined by the market ID.", "fields_and_connections": [{"name": "key", "type": "marketLocalizationsRegister", "description": "Creates or updates market localizations.", "not_nullable": false}, {"name": "key", "type": "marketLocalizationsRemove", "description": "Deletes market localizations.", "not_nullable": false}], "examples": []}, {"name": "ShopLocale", "description": "A locale that's been enabled on a shop.", "fields_and_connections": [{"name": "locale", "type": "shopLocales", "description": "A list of locales available on a shop.", "not_nullable": false}, {"name": "locale", "type": "shopLocaleEnable", "description": "Adds a locale for a shop. The newly added locale is in the unpublished state.", "not_nullable": false}, {"name": "locale", "type": "shopLocaleUpdate", "description": "Updates a locale for a shop.", "not_nullable": false}], "examples": []}, {"name": "TranslatableContent", "description": "Translatable content of a resource's field.", "fields_and_connections": [{"name": "digest", "type": "String", "description": "Hash digest representation of the content value.", "not_nullable": false}, {"name": "key", "type": "String!", "description": "The resource field that's being translated.", "not_nullable": true}, {"name": "locale", "type": "String!", "description": "Locale of the content.", "not_nullable": true}, {"name": "type", "type": "LocalizableContentType!", "description": "Type of the translatable content.", "not_nullable": true}, {"name": "value", "type": "String", "description": "Content value.", "not_nullable": false}], "examples": []}, {"name": "TranslatableResource", "description": "A resource that has translatable fields.", "fields_and_connections": [{"name": "nestedTranslatableResources", "type": "translatableResource", "description": "A resource that can have localized values for different languages.", "not_nullable": false}, {"name": "nestedTranslatableResources", "type": "translatableResources", "description": "Resources that can have localized values for different languages.", "not_nullable": false}, {"name": "nestedTranslatableResources", "type": "translatableResourcesByIds", "description": "Resources that can have localized values for different languages.", "not_nullable": false}], "examples": []}, {"name": "Translation", "description": "Translation of a field of a resource.", "fields_and_connections": [{"name": "key", "type": "translationsRegister", "description": "Creates or updates translations.", "not_nullable": false}, {"name": "key", "type": "translationsRemove", "description": "Deletes translations.", "not_nullable": false}], "examples": []}]}, {"name": "Marketplaces", "queries": [{"name": "productFeed", "description": "Returns a ProductFeed resource by ID.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of the ProductFeed to return."}], "returns": [], "examples": []}, {"name": "productFeeds", "description": "The product feeds for the shop.", "arguments": [{"name": "after", "type": "String", "required": false, "description": "The elements that come after the specified cursor."}, {"name": "before", "type": "String", "required": false, "description": "The elements that come before the specified cursor."}, {"name": "first", "type": "Int", "required": false, "description": "The first n elements from the paginated list."}, {"name": "last", "type": "Int", "required": false, "description": "The last n elements from the paginated list."}, {"name": "reverse", "type": "Boolean", "required": false, "description": "Reverse the order of the underlying list."}], "returns": [], "examples": []}], "mutations": [{"name": "productFeedCreate", "description": "Creates a product feed for a specific publication.", "arguments": [{"name": "input", "type": "ProductFeedInput", "required": false, "description": "The properties of the new product feed."}], "returns": [], "examples": []}, {"name": "productFeedDelete", "description": "Deletes a product feed for a specific publication.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of the product feed to be deleted."}], "returns": [], "examples": []}, {"name": "productFullSync", "description": "Runs the full product sync for a given shop.", "arguments": [{"name": "beforeUpdatedAt", "type": "DateTime", "required": false, "description": "Syncs only products that haven't changed since the specified timestamp."}, {"name": "id", "type": "ID!", "required": false, "description": "The product feed which needs syncing."}, {"name": "updatedAtSince", "type": "DateTime", "required": false, "description": "Syncs only products that have changed since the specified timestamp."}], "returns": [], "examples": []}], "objects": [{"name": "AvailableChannelDefinitionsByChannel", "description": "Represents an object containing all information for channels available to a shop.", "fields_and_connections": [{"name": "channelDefinitions", "type": "[ChannelDefinition!]!", "description": "The channel definitions for channels installed on a shop.", "not_nullable": true}, {"name": "channelName", "type": "String!", "description": "The name of the channel.", "not_nullable": true}], "examples": []}, {"name": "ChannelDefinition", "description": "A channel definition represents channels surfaces on the platform.\nA channel definition can be a platform or a subsegment of it such as Facebook Home, Instagram Live, Instagram Shops, or WhatsApp chat.", "fields_and_connections": [{"name": "channelName", "type": "Node", "description": "Name of the channel that this sub channel belongs to.", "not_nullable": false}], "examples": []}, {"name": "ChannelInformation", "description": "Contains the information for a given sales channel.", "fields_and_connections": [{"name": "app", "type": "Node", "description": "The app associated with the channel.", "not_nullable": false}], "examples": []}, {"name": "ProductFeed", "description": "A product feed.", "fields_and_connections": [{"name": "country", "type": "productFeed", "description": "Returns a ProductFeed resource by ID.", "not_nullable": false}, {"name": "country", "type": "productFeeds", "description": "The product feeds for the shop.", "not_nullable": false}, {"name": "country", "type": "productFeedCreate", "description": "Creates a product feed for a specific publication.", "not_nullable": false}, {"name": "country", "type": "Node", "description": "The country of the product feed.", "not_nullable": false}], "examples": []}]}, {"name": "Metafields", "queries": [{"name": "metafieldDefinition", "description": "Returns a metafield definition by identifier.", "arguments": [{"name": "identifier", "type": "MetafieldDefinitionIdentifierInput", "required": false, "description": "The identifier of the MetafieldDefinition to return."}, {"name": "id", "type": "ID", "required": false, "description": "The ID of the MetafieldDefinition to return. This field will be removed in a future version. Use the identifier input instead."}], "returns": [], "examples": [{"description": "Retrieve metafield definition", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `query {\n    metafieldDefinition(id: \"gid://shopify/MetafieldDefinition/1071456163\") {\n      name\n    }\n  }`,\n});\n"}]}, {"name": "metafieldDefinitions", "description": "Returns a list of metafield definitions.", "arguments": [{"name": "after", "type": "String", "required": false, "description": "The elements that come after the specified cursor."}, {"name": "before", "type": "String", "required": false, "description": "The elements that come before the specified cursor."}, {"name": "constraintStatus", "type": "MetafieldDefinitionConstraintStatus", "required": false, "description": "Filter metafield definitions based on whether they are constrained."}, {"name": "constraintSubtype", "type": "MetafieldDefinitionConstraintSubtypeIdentifier", "required": false, "description": "Filter metafield definitions based on whether they apply to a given resource subtype."}, {"name": "first", "type": "Int", "required": false, "description": "The first n elements from the paginated list."}, {"name": "key", "type": "String", "required": false, "description": "Filter metafield definition by key."}, {"name": "last", "type": "Int", "required": false, "description": "The last n elements from the paginated list."}, {"name": "namespace", "type": "String", "required": false, "description": "Filter metafield definition by namespace."}, {"name": "ownerType", "type": "MetafieldOwnerType!", "required": false, "description": "Filter the metafield definition by the specific owner type."}, {"name": "pinnedStatus", "type": "MetafieldDefinitionPinnedStatus", "required": false, "description": "Filter the metafield definition by the pinned status."}, {"name": "query", "type": "String", "required": false, "description": "A filter made up of terms, connectives, modifiers, and comparators.\nYou can apply one or more filters to a query. Learn more about Shopify API search syntax."}, {"name": "reverse", "type": "Boolean", "required": false, "description": "Reverse the order of the underlying list."}, {"name": "sortKey", "type": "MetafieldDefinitionSortKeys", "required": false, "description": "Sort the underlying list using a key. If your query is slow or returns an error, then try specifying a sort key that matches the field used in the search."}], "returns": [], "examples": []}, {"name": "metafieldDefinitionTypes", "description": "Each metafield definition has a type, which defines the type of information that it can store.\nThis type is enforced across every instance of the resource that owns the metafield definition.\nRefer to the list of supported metafield types.", "arguments": [], "returns": [{"name": "MetafieldDefinitionType", "type": "[MetafieldDefinitionType!]!", "description": "non-null"}, {"name": "MetafieldDefinitionType", "type": "[MetafieldDefinitionType!]!", "description": "non-null"}, {"name": "MetafieldDefinitionType", "type": "[MetafieldDefinitionType!]!", "description": "non-null"}, {"name": "MetafieldDefinitionType", "type": "[MetafieldDefinitionType!]!", "description": "non-null"}, {"name": "MetafieldDefinitionType", "type": "[MetafieldDefinitionType!]!", "description": "non-null"}, {"name": "MetafieldDefinitionType", "type": "[MetafieldDefinitionType!]!", "description": "non-null"}], "examples": []}, {"name": "standardMetafieldDefinitionTemplates", "description": "Standard metafield definitions are intended for specific, common use cases. Their namespace and keys reflect these use cases and are reserved.\nRefer to all available Standard Metafield Definition Templates.", "arguments": [{"name": "after", "type": "String", "required": false, "description": "The elements that come after the specified cursor."}, {"name": "before", "type": "String", "required": false, "description": "The elements that come before the specified cursor."}, {"name": "constraintStatus", "type": "MetafieldDefinitionConstraintStatus", "required": false, "description": "Filter standard metafield definitions based on whether they are constrained."}, {"name": "constraintSubtype", "type": "MetafieldDefinitionConstraintSubtypeIdentifier", "required": false, "description": "Filter standard metafield definitions based on whether they apply to a given resource subtype."}, {"name": "excludeActivated", "type": "Boolean", "required": false, "description": "Filter standard metafield definitions that have already been activated."}, {"name": "first", "type": "Int", "required": false, "description": "The first n elements from the paginated list."}, {"name": "last", "type": "Int", "required": false, "description": "The last n elements from the paginated list."}, {"name": "reverse", "type": "Boolean", "required": false, "description": "Reverse the order of the underlying list."}], "returns": [], "examples": []}], "mutations": [{"name": "metafieldDefinitionCreate", "description": "Creates a metafield definition. Any metafields existing under the same owner type, namespace, and key will be\nchecked against this definition and will have their type updated accordingly. For metafields that are not\nvalid, they will remain unchanged but any attempts to update them must align with this definition.", "arguments": [{"name": "definition", "type": "MetafieldDefinitionInput!", "required": false, "description": "Specifies the input fields for a metafield definition."}], "returns": [], "examples": [{"description": "Create a metafield definition", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation CreateMetafieldDefinition($definition: MetafieldDefinitionInput!) {\n      metafieldDefinitionCreate(definition: $definition) {\n        createdDefinition {\n          id\n          name\n        }\n        userErrors {\n          field\n          message\n          code\n        }\n      }\n    }`,\n    \"variables\": {\n      \"definition\": {\n        \"name\": \"Ingredients\",\n        \"namespace\": \"bakery\",\n        \"key\": \"ingredients\",\n        \"description\": \"A list of ingredients used to make the product.\",\n        \"type\": \"multi_line_text_field\",\n        \"ownerType\": \"PRODUCT\"\n      }\n    },\n  },\n});\n"}, {"description": "Create a metafield definition to be used with automated collections", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation CreateMetafieldDefinition($definition: MetafieldDefinitionInput!) {\n      metafieldDefinitionCreate(definition: $definition) {\n        createdDefinition {\n          id\n          name\n          useAsCollectionCondition\n        }\n        userErrors {\n          field\n          message\n          code\n        }\n      }\n    }`,\n    \"variables\": {\n      \"definition\": {\n        \"name\": \"Material\",\n        \"namespace\": \"custom\",\n        \"key\": \"material\",\n        \"description\": \"A list of materials used to make the product.\",\n        \"type\": \"list.single_line_text_field\",\n        \"ownerType\": \"PRODUCT\",\n        \"useAsCollectionCondition\": true\n      }\n    },\n  },\n});\n"}, {"description": "Create a metafield definition with access controls", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation CreateMetafieldDefinition($definition: MetafieldDefinitionInput!) {\n      metafieldDefinitionCreate(definition: $definition) {\n        createdDefinition {\n          id\n          namespace\n          access {\n            admin\n          }\n        }\n        userErrors {\n          field\n          message\n          code\n        }\n      }\n    }`,\n    \"variables\": {\n      \"definition\": {\n        \"name\": \"Pizza size\",\n        \"namespace\": \"$app:bakery\",\n        \"key\": \"pizza_size\",\n        \"type\": \"dimension\",\n        \"description\": \"The size (diameter) of the pizza in inches.\",\n        \"ownerType\": \"PRODUCT\",\n        \"access\": {\n          \"admin\": \"MERCHANT_READ\"\n        }\n      }\n    },\n  },\n});\n"}, {"description": "Create a metafield definition with validations", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation CreateMetafieldDefinition($definition: MetafieldDefinitionInput!) {\n      metafieldDefinitionCreate(definition: $definition) {\n        createdDefinition {\n          id\n          name\n        }\n        userErrors {\n          field\n          message\n          code\n        }\n      }\n    }`,\n    \"variables\": {\n      \"definition\": {\n        \"name\": \"Pizza size\",\n        \"namespace\": \"bakery\",\n        \"key\": \"pizza_size\",\n        \"type\": \"dimension\",\n        \"description\": \"The size (diameter) of the pizza in inches.\",\n        \"validations\": [\n          {\n            \"name\": \"min\",\n            \"value\": \"{\\\"unit\\\": \\\"INCHES\\\", \\\"value\\\": \\\"9\\\"}\"\n          },\n          {\n            \"name\": \"max\",\n            \"value\": \"{\\\"unit\\\": \\\"INCHES\\\", \\\"value\\\": \\\"15\\\"}\"\n          }\n        ],\n        \"ownerType\": \"PRODUCT\"\n      }\n    },\n  },\n});\n"}, {"description": "metafieldDefinitionCreate reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation CreateMetafieldDefinition($definition: MetafieldDefinitionInput!) {\n      metafieldDefinitionCreate(definition: $definition) {\n        createdDefinition {\n          id\n          name\n        }\n        userErrors {\n          field\n          message\n          code\n        }\n      }\n    }`,\n    \"variables\": {\n      \"definition\": {\n        \"name\": \"Ingredients\",\n        \"namespace\": \"bakery\",\n        \"key\": \"ingredients\",\n        \"description\": \"A list of ingredients used to make the product.\",\n        \"type\": \"multi_line_text_field\",\n        \"ownerType\": \"PRODUCT\"\n      }\n    },\n  },\n});\n"}]}, {"name": "metafieldDefinitionDelete", "description": "Delete a metafield definition.\nOptionally deletes all associated metafields asynchronously when specified.", "arguments": [{"name": "deleteAllAssociatedMetafields", "type": "Boolean", "required": false, "description": "Whether to delete all associated metafields."}, {"name": "id", "type": "ID", "required": false, "description": "The id of the metafield definition to delete. Using identifier is preferred."}, {"name": "identifier", "type": "MetafieldDefinitionIdentifierInput", "required": false, "description": "The identifier of the metafield definition to delete."}], "returns": [], "examples": [{"description": "Delete a metafield definition", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation DeleteMetafieldDefinition($id: ID!, $deleteAllAssociatedMetafields: Boolean!) {\n      metafieldDefinitionDelete(id: $id, deleteAllAssociatedMetafields: $deleteAllAssociatedMetafields) {\n        deletedDefinitionId\n        userErrors {\n          field\n          message\n          code\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/MetafieldDefinition/1071456130\",\n      \"deleteAllAssociatedMetafields\": true\n    },\n  },\n});\n"}, {"description": "metafieldDefinitionDelete reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation DeleteMetafieldDefinition($id: ID!, $deleteAllAssociatedMetafields: Boolean!) {\n      metafieldDefinitionDelete(id: $id, deleteAllAssociatedMetafields: $deleteAllAssociatedMetafields) {\n        deletedDefinitionId\n        userErrors {\n          field\n          message\n          code\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/MetafieldDefinition/1071456130\",\n      \"deleteAllAssociatedMetafields\": true\n    },\n  },\n});\n"}]}, {"name": "metafieldDefinitionPin", "description": "You can organize your metafields in your Shopify admin by pinning/unpinning metafield definitions.\nThe order of your pinned metafield definitions determines the order in which your metafields are displayed\non the corresponding pages in your Shopify admin. By default, only pinned metafields are automatically displayed.", "arguments": [{"name": "definitionId", "type": "ID", "required": false, "description": "The id of the metafield definition to pin. Using identifier is preferred."}, {"name": "identifier", "type": "MetafieldDefinitionIdentifierInput", "required": false, "description": "The identifier of the metafield definition to pin."}], "returns": [], "examples": [{"description": "Pin a metafield definition", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation metafieldDefinitionPin($definitionId: ID!) {\n      metafieldDefinitionPin(definitionId: $definitionId) {\n        pinnedDefinition {\n          name\n          key\n          namespace\n          pinnedPosition\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"definitionId\": \"gid://shopify/MetafieldDefinition/1071456171\"\n    },\n  },\n});\n"}, {"description": "metafieldDefinitionPin reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation metafieldDefinitionPin($definitionId: ID!) {\n      metafieldDefinitionPin(definitionId: $definitionId) {\n        pinnedDefinition {\n          name\n          key\n          namespace\n          pinnedPosition\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"definitionId\": \"gid://shopify/MetafieldDefinition/1071456171\"\n    },\n  },\n});\n"}]}, {"name": "metafieldDefinitionUnpin", "description": "", "arguments": [], "returns": [], "examples": []}, {"name": "metafieldDefinitionUpdate", "description": "Updates a metafield definition.", "arguments": [{"name": "definition", "type": "MetafieldDefinitionUpdateInput!", "required": false, "description": "The input fields for the metafield definition update."}], "returns": [], "examples": [{"description": "Update a metafield definition", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation UpdateMetafieldDefinition($definition: MetafieldDefinitionUpdateInput!) {\n      metafieldDefinitionUpdate(definition: $definition) {\n        updatedDefinition {\n          id\n          name\n        }\n        userErrors {\n          field\n          message\n          code\n        }\n      }\n    }`,\n    \"variables\": {\n      \"definition\": {\n        \"name\": \"Pizza size (inches)\",\n        \"namespace\": \"bakery\",\n        \"key\": \"pizza_size\",\n        \"ownerType\": \"PRODUCT\"\n      }\n    },\n  },\n});\n"}, {"description": "Update a metafield definition with access controls", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation UpdateMetafieldDefinition($definition: MetafieldDefinitionUpdateInput!) {\n      metafieldDefinitionUpdate(definition: $definition) {\n        updatedDefinition {\n          id\n          name\n          access {\n            admin\n          }\n        }\n        userErrors {\n          field\n          message\n          code\n        }\n      }\n    }`,\n    \"variables\": {\n      \"definition\": {\n        \"name\": \"Pizza size (inches)\",\n        \"namespace\": \"$app:bakery\",\n        \"key\": \"pizza_size\",\n        \"ownerType\": \"PRODUCT\",\n        \"access\": {\n          \"admin\": \"PRIVATE\"\n        }\n      }\n    },\n  },\n});\n"}]}, {"name": "metafieldsDelete", "description": "Deletes multiple metafields in bulk.", "arguments": [{"name": "metafields", "type": "[MetafieldIdentifierInput!]!", "required": false, "description": "A list of identifiers specifying metafields to delete. At least one identifier must be specified."}], "returns": [], "examples": [{"description": "Deletes a metafield by its ID", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation MetafieldsDelete($metafields: [MetafieldIdentifierInput!]!) {\n      metafieldsDelete(metafields: $metafields) {\n        deletedMetafields {\n          key\n          namespace\n          ownerId\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"metafields\": [\n        {\n          \"ownerId\": \"gid://shopify/Product/20995642\",\n          \"namespace\": \"inventory\",\n          \"key\": \"today\"\n        }\n      ]\n    },\n  },\n});\n"}, {"description": "metafieldsDelete reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation MetafieldsDelete($metafields: [MetafieldIdentifierInput!]!) {\n      metafieldsDelete(metafields: $metafields) {\n        deletedMetafields {\n          key\n          namespace\n          ownerId\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"metafields\": [\n        {\n          \"ownerId\": \"gid://shopify/Product/20995642\",\n          \"namespace\": \"inventory\",\n          \"key\": \"today\"\n        }\n      ]\n    },\n  },\n});\n"}]}, {"name": "metafieldsSet", "description": "Sets metafield values. Metafield values will be set regardless if they were previously created or not.\nAllows a maximum of 25 metafields to be set at a time.\nThis operation is atomic, meaning no changes are persisted if an error is encountered.\nAs of 2024-07, this operation supports compare-and-set functionality to better handle concurrent requests.\nIf compareDigest is set for any metafield, the mutation will only set that metafield if the persisted metafield value matches the digest used on compareDigest.\nIf the metafield doesn't exist yet, but you want to guarantee that the operation will run in a safe manner, set compareDigest to null.\nThe compareDigest value can be acquired by querying the metafield object and selecting compareDigest as a field.\nIf the compareDigest value does not match the digest for the persisted value, the mutation will return an error.\nYou can opt out of write guarantees by not sending compareDigest in the request.", "arguments": [{"name": "metafields", "type": "[MetafieldsSetInput!]!", "required": false, "description": "The list of metafield values to set. Maximum of 25."}], "returns": [], "examples": [{"description": "Create a metafield", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation MetafieldsSet($metafields: [MetafieldsSetInput!]!) {\n      metafieldsSet(metafields: $metafields) {\n        metafields {\n          key\n          namespace\n          value\n          createdAt\n          updatedAt\n        }\n        userErrors {\n          field\n          message\n          code\n        }\n      }\n    }`,\n    \"variables\": {\n      \"metafields\": [\n        {\n          \"key\": \"example_key\",\n          \"namespace\": \"example_namespace\",\n          \"ownerId\": \"gid://shopify/Product/20995642\",\n          \"type\": \"single_line_text_field\",\n          \"value\": \"Example Value\"\n        }\n      ]\n    },\n  },\n});\n"}, {"description": "Creating and updating metafields", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation MetafieldsSet($metafields: [MetafieldsSetInput!]!) {\n      metafieldsSet(metafields: $metafields) {\n        metafields {\n          key\n          namespace\n          value\n          createdAt\n          updatedAt\n        }\n        userErrors {\n          field\n          message\n          code\n        }\n      }\n    }`,\n    \"variables\": {\n      \"metafields\": [\n        {\n          \"key\": \"materials\",\n          \"namespace\": \"my_fields\",\n          \"ownerId\": \"gid://shopify/Product/20995642\",\n          \"type\": \"multi_line_text_field\",\n          \"value\": \"95% Cotton\\n5% Spandex\"\n        },\n        {\n          \"key\": \"manufactured\",\n          \"namespace\": \"my_fields\",\n          \"ownerId\": \"gid://shopify/Product/20995642\",\n          \"type\": \"single_line_text_field\",\n          \"value\": \"Made in Canada\"\n        },\n        {\n          \"key\": \"product_description\",\n          \"namespace\": \"custom\",\n          \"ownerId\": \"gid://shopify/Product/20995642\",\n          \"type\": \"rich_text_field\",\n          \"value\": \"{\\\"type\\\":\\\"root\\\",\\\"children\\\":[{\\\"type\\\":\\\"paragraph\\\",\\\"children\\\":[{\\\"type\\\":\\\"text\\\",\\\"value\\\":\\\"This is italicized text and \\\",\\\"italic\\\":true},{\\\"url\\\":\\\"https:\\\\/\\\\/example.com\\\",\\\"title\\\":\\\"Link to example.com\\\",\\\"type\\\":\\\"link\\\",\\\"children\\\":[{\\\"type\\\":\\\"text\\\",\\\"value\\\":\\\"a bolded hyperlink\\\",\\\"bold\\\":true}]}]}]}\"\n        }\n      ]\n    },\n  },\n});\n"}, {"description": "Creating and updating metafields using compare-and-swap (CAS)", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation MetafieldsSet($metafields: [MetafieldsSetInput!]!) {\n      metafieldsSet(metafields: $metafields) {\n        metafields {\n          key\n          namespace\n          value\n          createdAt\n          updatedAt\n        }\n        userErrors {\n          field\n          message\n          code\n        }\n      }\n    }`,\n    \"variables\": {\n      \"metafields\": [\n        {\n          \"key\": \"example_key\",\n          \"namespace\": \"example_namespace\",\n          \"ownerId\": \"gid://shopify/Product/20995642\",\n          \"type\": \"single_line_text_field\",\n          \"value\": \"Example Value\"\n        }\n      ]\n    },\n  },\n});\n"}, {"description": "Updates a metafield", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation MetafieldsSet($metafields: [MetafieldsSetInput!]!) {\n      metafieldsSet(metafields: $metafields) {\n        metafields {\n          key\n          namespace\n          value\n          createdAt\n          updatedAt\n        }\n        userErrors {\n          field\n          message\n          code\n        }\n      }\n    }`,\n    \"variables\": {\n      \"metafields\": [\n        {\n          \"key\": \"materials\",\n          \"namespace\": \"my_fields\",\n          \"ownerId\": \"gid://shopify/Product/20995642\",\n          \"type\": \"multi_line_text_field\",\n          \"value\": \"95% Cotton\\n5% Spandex\"\n        }\n      ]\n    },\n  },\n});\n"}, {"description": "metafieldsSet reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation MetafieldsSet($metafields: [MetafieldsSetInput!]!) {\n      metafieldsSet(metafields: $metafields) {\n        metafields {\n          key\n          namespace\n          value\n          createdAt\n          updatedAt\n        }\n        userErrors {\n          field\n          message\n          code\n        }\n      }\n    }`,\n    \"variables\": {\n      \"metafields\": [\n        {\n          \"key\": \"example_key\",\n          \"namespace\": \"example_namespace\",\n          \"ownerId\": \"gid://shopify/Product/20995642\",\n          \"type\": \"single_line_text_field\",\n          \"value\": \"Example Value\"\n        }\n      ]\n    },\n  },\n});\n"}]}, {"name": "standardMetafieldDefinitionEnable", "description": "Activates the specified standard metafield definition from its template.\nRefer to the list of standard metafield definition templates.", "arguments": [{"name": "access", "type": "StandardMetafieldDefinitionAccessInput", "required": false, "description": "The access settings that apply to each of the metafields that belong to the metafield definition."}, {"name": "capabilities", "type": "MetafieldCapabilityCreateInput", "required": false, "description": "The capabilities of the metafield definition."}, {"name": "id", "type": "ID", "required": false, "description": "The ID of the standard metafield definition template to enable."}, {"name": "key", "type": "String", "required": false, "description": "The key of the standard metafield to enable. Used in combination with namespace."}, {"name": "namespace", "type": "String", "required": false, "description": "The namespace of the standard metafield to enable. Used in combination with key."}, {"name": "ownerType", "type": "MetafieldOwnerType!", "required": false, "description": "The resource type that the metafield definition is scoped to."}, {"name": "pin", "type": "Boolean!", "required": false, "description": "Whether to pin the metafield definition."}, {"name": "useAsCollectionCondition", "type": "Boolean", "required": false, "description": "Whether the metafield definition can be used as a collection condition. Use capabilities.smartCollectionCondition instead."}, {"name": "visibleToStorefrontApi", "type": "Boolean", "required": false, "description": "Whether metafields for the definition are visible using the Storefront API. Use access.storefront instead."}], "returns": [], "examples": [{"description": "Creates a metafield definition from an existing template", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation standardMetafieldDefinitionEnable($id: ID!, $ownerType: MetafieldOwnerType!, $pin: Boolean!, $visibleToStorefrontApi: Boolean!) {\n      standardMetafieldDefinitionEnable(id: $id, ownerType: $ownerType, pin: $pin, visibleToStorefrontApi: $visibleToStorefrontApi) {\n        createdDefinition {\n          name\n          key\n          namespace\n          description\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/StandardMetafieldDefinitionTemplate/2\",\n      \"ownerType\": \"PRODUCT\",\n      \"pin\": false,\n      \"visibleToStorefrontApi\": true\n    },\n  },\n});\n"}, {"description": "standardMetafieldDefinitionEnable reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation standardMetafieldDefinitionEnable($id: ID!, $ownerType: MetafieldOwnerType!, $pin: Boolean!, $visibleToStorefrontApi: Boolean!) {\n      standardMetafieldDefinitionEnable(id: $id, ownerType: $ownerType, pin: $pin, visibleToStorefrontApi: $visibleToStorefrontApi) {\n        createdDefinition {\n          name\n          key\n          namespace\n          description\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/StandardMetafieldDefinitionTemplate/2\",\n      \"ownerType\": \"PRODUCT\",\n      \"pin\": false,\n      \"visibleToStorefrontApi\": true\n    },\n  },\n});\n"}]}], "objects": [{"name": "Metafield", "description": "Metafields enable you to attach additional information to a Shopify resource, such as a Product or a Collection.\nFor more information about where you can attach metafields refer to HasMetafields.\nSome examples of the data that metafields enable you to store are specifications, size charts, downloadable documents, release dates, images, or part numbers.\nMetafields are identified by an owner resource, namespace, and key. and store a value along with type information for that value.", "fields_and_connections": [{"name": "compareDigest", "type": "metafieldsSet", "description": "Sets metafield values. Metafield values will be set regardless if they were previously created or not.\nAllows a maximum of 25 metafields to be set at a time.\nThis operation is atomic, meaning no changes are persisted if an error is encountered.\nAs of 2024-07, this operation supports compare-and-set functionality to better handle concurrent requests.\nIf compareDigest is set for any metafield, the mutation will only set that metafield if the persisted metafield value matches the digest used on compareDigest.\nIf the metafield doesn't exist yet, but you want to guarantee that the operation will run in a safe manner, set compareDigest to null.\nThe compareDigest value can be acquired by querying the metafield object and selecting compareDigest as a field.\nIf the compareDigest value does not match the digest for the persisted value, the mutation will return an error.\nYou can opt out of write guarantees by not sending compareDigest in the request.", "not_nullable": false}, {"name": "compareDigest", "type": "HasCompareDigest", "description": "The data stored in the resource, represented as a digest.", "not_nullable": false}, {"name": "compareDigest", "type": "LegacyInteroperability", "description": "The data stored in the resource, represented as a digest.", "not_nullable": false}, {"name": "compareDigest", "type": "Node", "description": "The data stored in the resource, represented as a digest.", "not_nullable": false}], "examples": []}, {"name": "MetafieldDefinition", "description": "Metafield definitions enable you to define additional validation constraints for metafields, and enable the\nmerchant to edit metafield values in context.", "fields_and_connections": [{"name": "access", "type": "metafieldDefinition", "description": "Returns a metafield definition by identifier.", "not_nullable": false}, {"name": "access", "type": "metafieldDefinitions", "description": "Returns a list of metafield definitions.", "not_nullable": false}, {"name": "access", "type": "metafieldDefinitionCreate", "description": "Creates a metafield definition. Any metafields existing under the same owner type, namespace, and key will be\nchecked against this definition and will have their type updated accordingly. For metafields that are not\nvalid, they will remain unchanged but any attempts to update them must align with this definition.", "not_nullable": false}, {"name": "access", "type": "metafieldDefinitionPin", "description": "You can organize your metafields in your Shopify admin by pinning/unpinning metafield definitions.\nThe order of your pinned metafield definitions determines the order in which your metafields are displayed\non the corresponding pages in your Shopify admin. By default, only pinned metafields are automatically displayed.", "not_nullable": false}, {"name": "access", "type": "metafieldDefinitionUnpin", "description": "You can organize your metafields in your Shopify admin by pinning/unpinning metafield definitions.\nThe order of your pinned metafield definitions determines the order in which your metafields are displayed\non the corresponding pages in your Shopify admin. By default, only pinned metafields are automatically displayed.", "not_nullable": false}, {"name": "access", "type": "metafieldDefinitionUpdate", "description": "Updates a metafield definition.", "not_nullable": false}, {"name": "access", "type": "standardMetafieldDefinitionEnable", "description": "Activates the specified standard metafield definition from its template.\nRefer to the list of standard metafield definition templates.", "not_nullable": false}, {"name": "access", "type": "Node", "description": "The access settings associated with the metafield definition.", "not_nullable": false}], "examples": []}, {"name": "MetafieldDefinitionSupportedValidation", "description": "The type and name for the optional validation configuration of a metafield.\nFor example, a supported validation might consist of a max name and a number_integer type.\nThis validation can then be used to enforce a maximum character length for a single_line_text_field metafield.", "fields_and_connections": [{"name": "name", "type": "String!", "description": "The name of the metafield definition validation.", "not_nullable": true}, {"name": "type", "type": "String!", "description": "The type of input for the validation.", "not_nullable": true}], "examples": []}, {"name": "MetafieldDefinitionType", "description": "A metafield definition type provides basic foundation and validation for a metafield.", "fields_and_connections": [{"name": "category", "type": "metafieldDefinitionTypes", "description": "Each metafield definition has a type, which defines the type of information that it can store.\nThis type is enforced across every instance of the resource that owns the metafield definition.\nRefer to the list of supported metafield types.", "not_nullable": false}], "examples": []}, {"name": "MetafieldDefinitionValidation", "description": "A configured metafield definition validation.\nFor example, for a metafield definition of number_integer type, you can set a validation with the name max\nand a value of 15. This validation will ensure that the value of the metafield is a number less than or equal to 15.\nRefer to the list of supported validations.", "fields_and_connections": [{"name": "name", "type": "String!", "description": "The validation name.", "not_nullable": true}, {"name": "type", "type": "String!", "description": "The name for the metafield type of this validation.", "not_nullable": true}, {"name": "value", "type": "String", "description": "The validation value.", "not_nullable": false}], "examples": []}, {"name": "StandardMetafieldDefinitionTemplate", "description": "Standard metafield definition templates provide preset configurations to create metafield definitions.\nEach template has a specific namespace and key that we've reserved to have specific meanings for common use cases.\nRefer to the list of standard metafield definitions.", "fields_and_connections": [{"name": "description", "type": "standardMetafieldDefinitionTemplates", "description": "Standard metafield definitions are intended for specific, common use cases. Their namespace and keys reflect these use cases and are reserved.\nRefer to all available Standard Metafield Definition Templates.", "not_nullable": false}, {"name": "description", "type": "Node", "description": "The description of the standard metafield definition.", "not_nullable": false}], "examples": []}]}, {"name": "Metaobjects", "queries": [{"name": "metaobject", "description": "Retrieves a metaobject by ID.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of the metaobject to return."}], "returns": [], "examples": []}, {"name": "metaobjectByHandle", "description": "Retrieves a metaobject by handle.", "arguments": [{"name": "handle", "type": "MetaobjectHandleInput!", "required": false, "description": "The identifier of the metaobject to return."}], "returns": [], "examples": []}, {"name": "metaobjectDefinition", "description": "Retrieves a metaobject definition by ID.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of the metaobject to return."}], "returns": [], "examples": []}, {"name": "metaobjectDefinitionByType", "description": "Finds a metaobject definition by type.", "arguments": [{"name": "type", "type": "String!", "required": false, "description": "The type of the metaobject definition to return."}], "returns": [], "examples": []}, {"name": "metaobjectDefinitions", "description": "All metaobject definitions.", "arguments": [{"name": "after", "type": "String", "required": false, "description": "The elements that come after the specified cursor."}, {"name": "before", "type": "String", "required": false, "description": "The elements that come before the specified cursor."}, {"name": "first", "type": "Int", "required": false, "description": "The first n elements from the paginated list."}, {"name": "last", "type": "Int", "required": false, "description": "The last n elements from the paginated list."}, {"name": "reverse", "type": "Boolean", "required": false, "description": "Reverse the order of the underlying list."}], "returns": [], "examples": []}, {"name": "metaobjects", "description": "All metaobjects for the shop.", "arguments": [{"name": "after", "type": "String", "required": false, "description": "The elements that come after the specified cursor."}, {"name": "before", "type": "String", "required": false, "description": "The elements that come before the specified cursor."}, {"name": "first", "type": "Int", "required": false, "description": "The first n elements from the paginated list."}, {"name": "last", "type": "Int", "required": false, "description": "The last n elements from the paginated list."}, {"name": "query", "type": "String", "required": false, "description": "A filter made up of terms, connectives, modifiers, and comparators.\nYou can apply one or more filters to a query. Learn more about Shopify API search syntax."}, {"name": "reverse", "type": "Boolean", "required": false, "description": "Reverse the order of the underlying list."}, {"name": "sortKey", "type": "String", "required": false, "description": "The key of a field to sort with. Supports \"id\", \"type\", \"updated_at\", and \"display_name\"."}, {"name": "type", "type": "String!", "required": false, "description": "The type of the metaobjects to query."}], "returns": [], "examples": []}], "mutations": [{"name": "metaobjectBulkDelete", "description": "Asynchronously delete metaobjects and their associated metafields in bulk.", "arguments": [{"name": "where", "type": "MetaobjectBulkDeleteWhereCondition!", "required": false, "description": "Specifies the condition by which metaobjects are deleted.\nExactly one field of input is required."}], "returns": [], "examples": [{"description": "Delete metaobjects and their associated fields in bulk by IDs", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation DeleteMetaobjects($where: MetaobjectBulkDeleteWhereCondition!) {\n      metaobjectBulkDelete(where: $where) {\n        job {\n          id\n          done\n        }\n      }\n    }`,\n    \"variables\": {\n      \"where\": {\n        \"ids\": [\n          \"gid://shopify/Metaobject/515107504\",\n          \"gid://shopify/Metaobject/129678104\"\n        ]\n      }\n    },\n  },\n});\n"}, {"description": "Delete metaobjects and their associated fields in bulk by type", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation DeleteMetaobjects($where: MetaobjectBulkDeleteWhereCondition!) {\n      metaobjectBulkDelete(where: $where) {\n        job {\n          id\n          done\n        }\n      }\n    }`,\n    \"variables\": {\n      \"where\": {\n        \"type\": \"lookbook\"\n      }\n    },\n  },\n});\n"}, {"description": "metaobjectBulkDelete reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation DeleteMetaobjects($where: MetaobjectBulkDeleteWhereCondition!) {\n      metaobjectBulkDelete(where: $where) {\n        job {\n          id\n          done\n        }\n      }\n    }`,\n    \"variables\": {\n      \"where\": {\n        \"ids\": [\n          \"gid://shopify/Metaobject/515107504\",\n          \"gid://shopify/Metaobject/129678104\"\n        ]\n      }\n    },\n  },\n});\n"}]}, {"name": "metaobjectCreate", "description": "Creates a new metaobject.", "arguments": [{"name": "metaobject", "type": "MetaobjectCreateInput!", "required": false, "description": "The parameters for the metaobject to create."}], "returns": [], "examples": [{"description": "Create a metaobject", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation CreateMetaobject($metaobject: MetaobjectCreateInput!) {\n      metaobjectCreate(metaobject: $metaobject) {\n        metaobject {\n          handle\n          season: field(key: \"season\") {\n            value\n          }\n        }\n        userErrors {\n          field\n          message\n          code\n        }\n      }\n    }`,\n    \"variables\": {\n      \"metaobject\": {\n        \"type\": \"lookbook\",\n        \"handle\": \"winter-2023\",\n        \"fields\": [\n          {\n            \"key\": \"season\",\n            \"value\": \"winter\"\n          }\n        ]\n      }\n    },\n  },\n});\n"}, {"description": "metaobjectCreate reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation CreateMetaobject($metaobject: MetaobjectCreateInput!) {\n      metaobjectCreate(metaobject: $metaobject) {\n        metaobject {\n          handle\n          season: field(key: \"season\") {\n            value\n          }\n        }\n        userErrors {\n          field\n          message\n          code\n        }\n      }\n    }`,\n    \"variables\": {\n      \"metaobject\": {\n        \"type\": \"lookbook\",\n        \"handle\": \"winter-2023\",\n        \"fields\": [\n          {\n            \"key\": \"season\",\n            \"value\": \"winter\"\n          }\n        ]\n      }\n    },\n  },\n});\n"}]}, {"name": "metaobjectDefinitionCreate", "description": "Creates a new metaobject definition.", "arguments": [{"name": "definition", "type": "MetaobjectDefinitionCreateInput!", "required": false, "description": "The input fields for creating a metaobject definition."}], "returns": [], "examples": [{"description": "Create a metaobject definition with custom access controls", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation CreateMetaobjectDefinition($definition: MetaobjectDefinitionCreateInput!) {\n      metaobjectDefinitionCreate(definition: $definition) {\n        metaobjectDefinition {\n          name\n          type\n          access {\n            admin\n            storefront\n          }\n          fieldDefinitions {\n            name\n            key\n          }\n        }\n        userErrors {\n          field\n          message\n          code\n        }\n      }\n    }`,\n    \"variables\": {\n      \"definition\": {\n        \"name\": \"FAQ\",\n        \"type\": \"$app:faq\",\n        \"access\": {\n          \"admin\": \"MERCHANT_READ_WRITE\",\n          \"storefront\": \"PUBLIC_READ\"\n        },\n        \"fieldDefinitions\": [\n          {\n            \"name\": \"Question\",\n            \"key\": \"question\",\n            \"type\": \"single_line_text_field\",\n            \"validations\": [\n              {\n                \"name\": \"max\",\n                \"value\": \"100\"\n              }\n            ]\n          },\n          {\n            \"name\": \"Answer\",\n            \"key\": \"answer\",\n            \"type\": \"multi_line_text_field\",\n            \"validations\": [\n              {\n                \"name\": \"max\",\n                \"value\": \"250\"\n              }\n            ]\n          }\n        ]\n      }\n    },\n  },\n});\n"}, {"description": "Create a metaobject definition with the publishable capability enabled", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation CreateMetaobjectDefinition($definition: MetaobjectDefinitionCreateInput!) {\n      metaobjectDefinitionCreate(definition: $definition) {\n        metaobjectDefinition {\n          name\n          type\n          capabilities {\n            publishable {\n              enabled\n            }\n          }\n          fieldDefinitions {\n            name\n            key\n          }\n        }\n        userErrors {\n          field\n          message\n          code\n        }\n      }\n    }`,\n    \"variables\": {\n      \"definition\": {\n        \"name\": \"Custom Page\",\n        \"type\": \"$app:custom-page\",\n        \"capabilities\": {\n          \"publishable\": {\n            \"enabled\": true\n          }\n        },\n        \"fieldDefinitions\": [\n          {\n            \"name\": \"Title\",\n            \"key\": \"title\",\n            \"type\": \"single_line_text_field\",\n            \"validations\": [\n              {\n                \"name\": \"max\",\n                \"value\": \"100\"\n              }\n            ]\n          },\n          {\n            \"name\": \"Author\",\n            \"key\": \"author\",\n            \"type\": \"single_line_text_field\",\n            \"validations\": [\n              {\n                \"name\": \"max\",\n                \"value\": \"32\"\n              }\n            ]\n          }\n        ]\n      }\n    },\n  },\n});\n"}, {"description": "metaobjectDefinitionCreate reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation CreateMetaobjectDefinition($definition: MetaobjectDefinitionCreateInput!) {\n      metaobjectDefinitionCreate(definition: $definition) {\n        metaobjectDefinition {\n          name\n          type\n          fieldDefinitions {\n            name\n            key\n          }\n        }\n        userErrors {\n          field\n          message\n          code\n        }\n      }\n    }`,\n    \"variables\": {\n      \"definition\": {\n        \"name\": \"Color swatch\",\n        \"type\": \"color-swatch\",\n        \"fieldDefinitions\": [\n          {\n            \"name\": \"Hex\",\n            \"key\": \"hex\",\n            \"type\": \"single_line_text_field\",\n            \"validations\": [\n              {\n                \"name\": \"regex\",\n                \"value\": \"^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$\"\n              }\n            ]\n          }\n        ]\n      }\n    },\n  },\n});\n"}]}, {"name": "metaobjectDefinitionDelete", "description": "Deletes the specified metaobject definition.\nAlso deletes all related metafield definitions, metaobjects, and metafields asynchronously.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of the metaobjects definition to delete."}], "returns": [], "examples": [{"description": "Delete a metaobject definition", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation DeleteMetaobjectDefinition($id: ID!) {\n      metaobjectDefinitionDelete(id: $id) {\n        deletedId\n        userErrors {\n          field\n          message\n          code\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/MetaobjectDefinition/578408816\"\n    },\n  },\n});\n"}, {"description": "metaobjectDefinitionDelete reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation DeleteMetaobjectDefinition($id: ID!) {\n      metaobjectDefinitionDelete(id: $id) {\n        deletedId\n        userErrors {\n          field\n          message\n          code\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/MetaobjectDefinition/578408816\"\n    },\n  },\n});\n"}]}, {"name": "metaobjectDefinitionUpdate", "description": "Updates a metaobject definition with new settings and metafield definitions.", "arguments": [{"name": "definition", "type": "MetaobjectDefinitionUpdateInput!", "required": false, "description": "The input fields for updating a metaobject definition."}, {"name": "id", "type": "ID!", "required": false, "description": "The ID of the metaobject definition to update."}], "returns": [], "examples": [{"description": "Create additional field definitions on an existing metaobject definition", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation UpdateMetaobjectDefinition($id: ID!, $definition: MetaobjectDefinitionUpdateInput!) {\n      metaobjectDefinitionUpdate(id: $id, definition: $definition) {\n        metaobjectDefinition {\n          id\n          name\n          displayNameKey\n          fieldDefinitions {\n            name\n            key\n            type {\n              name\n            }\n          }\n        }\n        userErrors {\n          field\n          message\n          code\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/MetaobjectDefinition/578408816\",\n      \"definition\": {\n        \"displayNameKey\": \"description\",\n        \"fieldDefinitions\": [\n          {\n            \"create\": {\n              \"key\": \"description\",\n              \"name\": \"Description\",\n              \"type\": \"single_line_text_field\"\n            }\n          }\n        ]\n      }\n    },\n  },\n});\n"}, {"description": "Delete a field definition from a metaobject definition", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation UpdateMetaobjectDefinition($id: ID!, $definition: MetaobjectDefinitionUpdateInput!) {\n      metaobjectDefinitionUpdate(id: $id, definition: $definition) {\n        metaobjectDefinition {\n          id\n          name\n          fieldDefinitions {\n            name\n            key\n          }\n        }\n        userErrors {\n          field\n          message\n          code\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/MetaobjectDefinition/578408816\",\n      \"definition\": {\n        \"fieldDefinitions\": [\n          {\n            \"delete\": {\n              \"key\": \"season\"\n            }\n          }\n        ]\n      }\n    },\n  },\n});\n"}, {"description": "Update an existing field definition on a metaobject definition", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation UpdateMetaobjectDefinition($id: ID!, $definition: MetaobjectDefinitionUpdateInput!) {\n      metaobjectDefinitionUpdate(id: $id, definition: $definition) {\n        metaobjectDefinition {\n          name\n          fieldDefinitions {\n            name\n            key\n          }\n        }\n        userErrors {\n          field\n          message\n          code\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/MetaobjectDefinition/578408816\",\n      \"definition\": {\n        \"fieldDefinitions\": [\n          {\n            \"update\": {\n              \"key\": \"season\",\n              \"name\": \"Edition\"\n            }\n          }\n        ]\n      }\n    },\n  },\n});\n"}, {"description": "Update base attributes of a metaobject definition", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation UpdateMetaobjectDefinition($id: ID!, $definition: MetaobjectDefinitionUpdateInput!) {\n      metaobjectDefinitionUpdate(id: $id, definition: $definition) {\n        metaobjectDefinition {\n          id\n          name\n          displayNameKey\n        }\n        userErrors {\n          field\n          message\n          code\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/MetaobjectDefinition/578408816\",\n      \"definition\": {\n        \"name\": \"StyleBook\",\n        \"displayNameKey\": \"season\"\n      }\n    },\n  },\n});\n"}, {"description": "Update ordering of fields on an existing metaobject definition", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation UpdateMetaobjectDefinition($id: ID!, $definition: MetaobjectDefinitionUpdateInput!) {\n      metaobjectDefinitionUpdate(id: $id, definition: $definition) {\n        metaobjectDefinition {\n          id\n          name\n          fieldDefinitions {\n            name\n            key\n          }\n        }\n        userErrors {\n          field\n          message\n          code\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/MetaobjectDefinition/228758553\",\n      \"definition\": {\n        \"resetFieldOrder\": true,\n        \"fieldDefinitions\": [\n          {\n            \"update\": {\n              \"key\": \"hex\"\n            }\n          },\n          {\n            \"update\": {\n              \"key\": \"name\"\n            }\n          },\n          {\n            \"update\": {\n              \"key\": \"accent_color\"\n            }\n          }\n        ]\n      }\n    },\n  },\n});\n"}, {"description": "metaobjectDefinitionUpdate reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation UpdateMetaobjectDefinition($id: ID!, $definition: MetaobjectDefinitionUpdateInput!) {\n      metaobjectDefinitionUpdate(id: $id, definition: $definition) {\n        metaobjectDefinition {\n          id\n          name\n          displayNameKey\n          fieldDefinitions {\n            name\n            key\n            type {\n              name\n            }\n          }\n        }\n        userErrors {\n          field\n          message\n          code\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/MetaobjectDefinition/578408816\",\n      \"definition\": {\n        \"displayNameKey\": \"description\",\n        \"fieldDefinitions\": [\n          {\n            \"create\": {\n              \"key\": \"description\",\n              \"name\": \"Description\",\n              \"type\": \"single_line_text_field\"\n            }\n          }\n        ]\n      }\n    },\n  },\n});\n"}]}, {"name": "metaobjectDelete", "description": "Deletes the specified metaobject and its associated metafields.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of the metaobject to delete."}], "returns": [], "examples": [{"description": "Deletes a metaobject", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation DeleteMetaobject($id: ID!) {\n      metaobjectDelete(id: $id) {\n        deletedId\n        userErrors {\n          field\n          message\n          code\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/Metaobject/515107504\"\n    },\n  },\n});\n"}, {"description": "metaobjectDelete reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation DeleteMetaobject($id: ID!) {\n      metaobjectDelete(id: $id) {\n        deletedId\n        userErrors {\n          field\n          message\n          code\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/Metaobject/515107504\"\n    },\n  },\n});\n"}]}, {"name": "metaobjectUpdate", "description": "Updates an existing metaobject.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of the metaobject to update."}, {"name": "metaobject", "type": "MetaobjectUpdateInput!", "required": false, "description": "Specifies parameters to update on the metaobject."}], "returns": [], "examples": [{"description": "Update a metaobject", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation UpdateMetaobject($id: ID!, $metaobject: MetaobjectUpdateInput!) {\n      metaobjectUpdate(id: $id, metaobject: $metaobject) {\n        metaobject {\n          handle\n          season: field(key: \"season\") {\n            value\n          }\n        }\n        userErrors {\n          field\n          message\n          code\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/Metaobject/515107504\",\n      \"metaobject\": {\n        \"fields\": [\n          {\n            \"key\": \"season\",\n            \"value\": \"winter\"\n          }\n        ]\n      }\n    },\n  },\n});\n"}, {"description": "metaobjectUpdate reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation UpdateMetaobject($id: ID!, $metaobject: MetaobjectUpdateInput!) {\n      metaobjectUpdate(id: $id, metaobject: $metaobject) {\n        metaobject {\n          handle\n          season: field(key: \"season\") {\n            value\n          }\n        }\n        userErrors {\n          field\n          message\n          code\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/Metaobject/515107504\",\n      \"metaobject\": {\n        \"fields\": [\n          {\n            \"key\": \"season\",\n            \"value\": \"winter\"\n          }\n        ]\n      }\n    },\n  },\n});\n"}]}, {"name": "metaobjectUpsert", "description": "Retrieves a metaobject by handle, then updates it with the provided input values.\nIf no matching metaobject is found, a new metaobject is created with the provided input values.", "arguments": [{"name": "handle", "type": "MetaobjectHandleInput!", "required": false, "description": "The identifier of the metaobject to upsert."}, {"name": "metaobject", "type": "MetaobjectUpsertInput!", "required": false, "description": "The parameters to upsert the metaobject."}], "returns": [], "examples": [{"description": "Upsert a metaobject", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation UpsertMetaobject($handle: MetaobjectHandleInput!, $metaobject: MetaobjectUpsertInput!) {\n      metaobjectUpsert(handle: $handle, metaobject: $metaobject) {\n        metaobject {\n          handle\n          hex: field(key: \"hex\") {\n            value\n          }\n        }\n        userErrors {\n          field\n          message\n          code\n        }\n      }\n    }`,\n    \"variables\": {\n      \"handle\": {\n        \"type\": \"color\",\n        \"handle\": \"indigo-swatch\"\n      },\n      \"metaobject\": {\n        \"fields\": [\n          {\n            \"key\": \"hex\",\n            \"value\": \"#4B0082\"\n          }\n        ]\n      }\n    },\n  },\n});\n"}, {"description": "metaobjectUpsert reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation UpsertMetaobject($handle: MetaobjectHandleInput!, $metaobject: MetaobjectUpsertInput!) {\n      metaobjectUpsert(handle: $handle, metaobject: $metaobject) {\n        metaobject {\n          handle\n          hex: field(key: \"hex\") {\n            value\n          }\n        }\n        userErrors {\n          field\n          message\n          code\n        }\n      }\n    }`,\n    \"variables\": {\n      \"handle\": {\n        \"type\": \"color\",\n        \"handle\": \"indigo-swatch\"\n      },\n      \"metaobject\": {\n        \"fields\": [\n          {\n            \"key\": \"hex\",\n            \"value\": \"#4B0082\"\n          }\n        ]\n      }\n    },\n  },\n});\n"}]}, {"name": "standardMetaobjectDefinitionEnable", "description": "Enables the specified standard metaobject definition from its template.", "arguments": [{"name": "type", "type": "String!", "required": false, "description": "The type of the metaobject definition to enable."}], "returns": [], "examples": []}], "objects": [{"name": "Metaobject", "description": "Provides an object instance represented by a MetaobjectDefinition.", "fields_and_connections": [{"name": "capabilities", "type": "metaobject", "description": "Retrieves a metaobject by ID.", "not_nullable": false}, {"name": "capabilities", "type": "metaobjectByHandle", "description": "Retrieves a metaobject by handle.", "not_nullable": false}, {"name": "capabilities", "type": "metaobjects", "description": "All metaobjects for the shop.", "not_nullable": false}, {"name": "capabilities", "type": "metaobjectCreate", "description": "Creates a new metaobject.", "not_nullable": false}, {"name": "capabilities", "type": "metaobjectUpdate", "description": "Updates an existing metaobject.", "not_nullable": false}, {"name": "capabilities", "type": "metaobjectUpsert", "description": "Retrieves a metaobject by handle, then updates it with the provided input values.\nIf no matching metaobject is found, a new metaobject is created with the provided input values.", "not_nullable": false}, {"name": "capabilities", "type": "Node", "description": "Metaobject capabilities for this Metaobject.", "not_nullable": false}], "examples": []}, {"name": "MetaobjectAccess", "description": "Access permissions for the definition's metaobjects.", "fields_and_connections": [{"name": "admin", "type": "MetaobjectAdminAccess!", "description": "The access permitted on the Admin API.", "not_nullable": true}, {"name": "storefront", "type": "MetaobjectStorefrontAccess!", "description": "The access permitted on the Storefront API.", "not_nullable": true}], "examples": []}, {"name": "MetaobjectCapabilities", "description": "Provides the capabilities of a metaobject definition.", "fields_and_connections": [{"name": "onlineStore", "type": "MetaobjectCapabilitiesOnlineStore", "description": "Indicates whether a metaobject definition can be displayed as a page on the Online Store.", "not_nullable": false}, {"name": "publishable", "type": "MetaobjectCapabilitiesPublishable!", "description": "Indicate whether a metaobject definition is publishable.", "not_nullable": true}, {"name": "renderable", "type": "MetaobjectCapabilitiesRenderable", "description": "Indicate whether a metaobject definition is renderable and exposes SEO data.", "not_nullable": false}, {"name": "translatable", "type": "MetaobjectCapabilitiesTranslatable!", "description": "Indicate whether a metaobject definition is translatable.", "not_nullable": true}], "examples": []}, {"name": "MetaobjectCapabilitiesOnlineStore", "description": "The Online Store capability of a metaobject definition.", "fields_and_connections": [{"name": "data", "type": "MetaobjectCapabilityDefinitionDataOnlineStore", "description": "The data associated with the Online Store capability.", "not_nullable": false}, {"name": "enabled", "type": "Boolean!", "description": "Indicates if the capability is enabled.", "not_nullable": true}], "examples": []}, {"name": "MetaobjectCapabilitiesPublishable", "description": "The publishable capability of a metaobject definition.", "fields_and_connections": [{"name": "enabled", "type": "Boolean!", "description": "Indicates if the capability is enabled.", "not_nullable": true}], "examples": []}, {"name": "MetaobjectCapabilitiesRenderable", "description": "The renderable capability of a metaobject definition.", "fields_and_connections": [{"name": "data", "type": "MetaobjectCapabilityDefinitionDataRenderable", "description": "The data associated with the renderable capability.", "not_nullable": false}, {"name": "enabled", "type": "Boolean!", "description": "Indicates if the capability is enabled.", "not_nullable": true}], "examples": []}, {"name": "MetaobjectCapabilitiesTranslatable", "description": "The translatable capability of a metaobject definition.", "fields_and_connections": [{"name": "enabled", "type": "Boolean!", "description": "Indicates if the capability is enabled.", "not_nullable": true}], "examples": []}, {"name": "MetaobjectCapabilityData", "description": "Provides the capabilities of a metaobject.", "fields_and_connections": [{"name": "onlineStore", "type": "MetaobjectCapabilityDataOnlineStore", "description": "The Online Store capability for this metaobject.", "not_nullable": false}, {"name": "publishable", "type": "MetaobjectCapabilityDataPublishable", "description": "The publishable capability for this metaobject.", "not_nullable": false}], "examples": []}, {"name": "MetaobjectCapabilityDataOnlineStore", "description": "The Online Store capability for the parent metaobject.", "fields_and_connections": [{"name": "templateSuffix", "type": "String", "description": "The theme template used when viewing the metaobject in a store.", "not_nullable": false}], "examples": []}, {"name": "MetaobjectCapabilityDataPublishable", "description": "The publishable capability for the parent metaobject.", "fields_and_connections": [{"name": "status", "type": "MetaobjectStatus!", "description": "The visibility status of this metaobject across all channels.", "not_nullable": true}], "examples": []}, {"name": "MetaobjectCapabilityDefinitionDataOnlineStore", "description": "The Online Store capability data for the metaobject definition.", "fields_and_connections": [{"name": "canCreateRedirects", "type": "Boolean!", "description": "Flag indicating if a sufficient number of redirects are available to redirect all published entries.", "not_nullable": true}, {"name": "urlHandle", "type": "String!", "description": "The URL handle for accessing pages of this metaobject type in the Online Store.", "not_nullable": true}], "examples": []}, {"name": "MetaobjectCapabilityDefinitionDataRenderable", "description": "The renderable capability data for the metaobject definition.", "fields_and_connections": [{"name": "metaDescriptionKey", "type": "String", "description": "The metaobject field used as an alias for the SEO page description.", "not_nullable": false}, {"name": "metaTitleKey", "type": "String", "description": "The metaobject field used as an alias for the SEO page title.", "not_nullable": false}], "examples": []}, {"name": "MetaobjectDefinition", "description": "Provides the definition of a generic object structure composed of metafields.", "fields_and_connections": [{"name": "access", "type": "metaobjectDefinition", "description": "Retrieves a metaobject definition by ID.", "not_nullable": false}, {"name": "access", "type": "metaobjectDefinitionByType", "description": "Finds a metaobject definition by type.", "not_nullable": false}, {"name": "access", "type": "metaobjectDefinitions", "description": "All metaobject definitions.", "not_nullable": false}, {"name": "access", "type": "metaobjectDefinitionCreate", "description": "Creates a new metaobject definition.", "not_nullable": false}, {"name": "access", "type": "metaobjectDefinitionUpdate", "description": "Updates a metaobject definition with new settings and metafield definitions.", "not_nullable": false}, {"name": "access", "type": "standardMetaobjectDefinitionEnable", "description": "Enables the specified standard metaobject definition from its template.", "not_nullable": false}, {"name": "access", "type": "Node", "description": "Access configuration for the metaobject definition.", "not_nullable": false}], "examples": []}, {"name": "MetaobjectField", "description": "Provides a field definition and the data value assigned to it.", "fields_and_connections": [{"name": "definition", "type": "MetaobjectFieldDefinition!", "description": "The field definition for this object key.", "not_nullable": true}, {"name": "jsonValue", "type": "JSON", "description": "The assigned field value in JSON format.", "not_nullable": false}, {"name": "key", "type": "String!", "description": "The object key of this field.", "not_nullable": true}, {"name": "reference", "type": "MetafieldReference", "description": "For resource reference fields, provides the referenced object.", "not_nullable": false}, {"name": "references", "type": "MetafieldReferenceConnection", "description": "For resource reference list fields, provides the list of referenced objects.", "not_nullable": false}, {"name": "thumbnail", "type": "MetaobjectThumbnail", "description": "For file reference or color fields, provides visual attributes for this field.", "not_nullable": false}, {"name": "type", "type": "String!", "description": "The type of the field.", "not_nullable": true}, {"name": "value", "type": "String", "description": "The assigned field value, always stored as a string regardless of the field type.", "not_nullable": false}], "examples": []}, {"name": "MetaobjectFieldDefinition", "description": "Defines a field for a MetaobjectDefinition with properties\nsuch as the field's data type and validations.", "fields_and_connections": [{"name": "description", "type": "String", "description": "The administrative description.", "not_nullable": false}, {"name": "key", "type": "String!", "description": "A key name used to identify the field within the metaobject composition.", "not_nullable": true}, {"name": "name", "type": "String!", "description": "The human-readable name.", "not_nullable": true}, {"name": "required", "type": "Boolean!", "description": "Required status of the field within the metaobject composition.", "not_nullable": true}, {"name": "type", "type": "MetafieldDefinitionType!", "description": "The type of data that the field stores.", "not_nullable": true}, {"name": "validations", "type": "[MetafieldDefinitionValidation!]!", "description": "A list of validation options for\nthe field. For example, a field with the type date can set a minimum date requirement.", "not_nullable": true}], "examples": []}]}, {"name": "Online store", "queries": [{"name": "article", "description": "Returns an Article resource by ID.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of the Article to return."}], "returns": [], "examples": []}, {"name": "articleAuthors", "description": "List of article authors for the shop.", "arguments": [{"name": "after", "type": "String", "required": false, "description": "The elements that come after the specified cursor."}, {"name": "before", "type": "String", "required": false, "description": "The elements that come before the specified cursor."}, {"name": "first", "type": "Int", "required": false, "description": "The first n elements from the paginated list."}, {"name": "last", "type": "Int", "required": false, "description": "The last n elements from the paginated list."}, {"name": "reverse", "type": "Boolean", "required": false, "description": "Reverse the order of the underlying list."}], "returns": [], "examples": []}, {"name": "articles", "description": "List of the shop's articles.", "arguments": [{"name": "after", "type": "String", "required": false, "description": "The elements that come after the specified cursor."}, {"name": "before", "type": "String", "required": false, "description": "The elements that come before the specified cursor."}, {"name": "first", "type": "Int", "required": false, "description": "The first n elements from the paginated list."}, {"name": "last", "type": "Int", "required": false, "description": "The last n elements from the paginated list."}, {"name": "query", "type": "String", "required": false, "description": "A filter made up of terms, connectives, modifiers, and comparators.\nYou can apply one or more filters to a query. Learn more about Shopify API search syntax."}, {"name": "reverse", "type": "Boolean", "required": false, "description": "Reverse the order of the underlying list."}, {"name": "sortKey", "type": "ArticleSortKeys", "required": false, "description": "Sort the underlying list using a key. If your query is slow or returns an error, then try specifying a sort key that matches the field used in the search."}], "returns": [], "examples": []}, {"name": "blog", "description": "Returns a Blog resource by ID.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of the Blog to return."}], "returns": [], "examples": [{"description": "Receive a single Blog", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `query BlogShow($id: ID!) {\n      blog(id: $id) {\n        id\n        title\n        handle\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/Blog/397675442\"\n    },\n  },\n});\n"}, {"description": "Retrieves a count of all articles from a blog", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `query BlogArticleCount($id: ID!) {\n      blog(id: $id) {\n        articlesCount {\n          count\n          precision\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/Blog/397675442\"\n    },\n  },\n});\n"}, {"description": "Retrieves a list of all articles from a blog", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `query BlogArticleList($id: ID!) {\n      blog(id: $id) {\n        id\n        articles(first: 10) {\n          nodes {\n            id\n            handle\n            author {\n              firstName\n              lastName\n            }\n            body\n          }\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/Blog/397675442\"\n    },\n  },\n});\n"}]}, {"name": "blogs", "description": "List of the shop's blogs.", "arguments": [{"name": "after", "type": "String", "required": false, "description": "The elements that come after the specified cursor."}, {"name": "before", "type": "String", "required": false, "description": "The elements that come before the specified cursor."}, {"name": "first", "type": "Int", "required": false, "description": "The first n elements from the paginated list."}, {"name": "last", "type": "Int", "required": false, "description": "The last n elements from the paginated list."}, {"name": "query", "type": "String", "required": false, "description": "A filter made up of terms, connectives, modifiers, and comparators.\nYou can apply one or more filters to a query. Learn more about Shopify API search syntax."}, {"name": "reverse", "type": "Boolean", "required": false, "description": "Reverse the order of the underlying list."}, {"name": "sortKey", "type": "BlogSortKeys", "required": false, "description": "Sort the underlying list using a key. If your query is slow or returns an error, then try specifying a sort key that matches the field used in the search."}], "returns": [], "examples": []}, {"name": "blogsCount", "description": "Count of blogs.", "arguments": [{"name": "query", "type": "String", "required": false, "description": "A filter made up of terms, connectives, modifiers, and comparators.\nYou can apply one or more filters to a query. Learn more about Shopify API search syntax."}], "returns": [], "examples": []}, {"name": "comment", "description": "Returns a Comment resource by ID.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of the Comment to return."}], "returns": [], "examples": []}, {"name": "comments", "description": "List of the shop's comments.", "arguments": [{"name": "after", "type": "String", "required": false, "description": "The elements that come after the specified cursor."}, {"name": "before", "type": "String", "required": false, "description": "The elements that come before the specified cursor."}, {"name": "first", "type": "Int", "required": false, "description": "The first n elements from the paginated list."}, {"name": "last", "type": "Int", "required": false, "description": "The last n elements from the paginated list."}, {"name": "query", "type": "String", "required": false, "description": "A filter made up of terms, connectives, modifiers, and comparators.\nYou can apply one or more filters to a query. Learn more about Shopify API search syntax."}, {"name": "reverse", "type": "Boolean", "required": false, "description": "Reverse the order of the underlying list."}, {"name": "sortKey", "type": "CommentSortKeys", "required": false, "description": "Sort the underlying list using a key. If your query is slow or returns an error, then try specifying a sort key that matches the field used in the search."}], "returns": [], "examples": []}, {"name": "customerAccountPage", "description": "Returns a customer account page.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of the CustomerAccountPage to return."}], "returns": [], "examples": []}, {"name": "customerAccountPages", "description": "List of the shop's customer account pages.", "arguments": [{"name": "after", "type": "String", "required": false, "description": "The elements that come after the specified cursor."}, {"name": "before", "type": "String", "required": false, "description": "The elements that come before the specified cursor."}, {"name": "first", "type": "Int", "required": false, "description": "The first n elements from the paginated list."}, {"name": "last", "type": "Int", "required": false, "description": "The last n elements from the paginated list."}, {"name": "reverse", "type": "Boolean", "required": false, "description": "Reverse the order of the underlying list."}], "returns": [], "examples": []}, {"name": "menu", "description": "Returns a Menu resource by ID.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of the Menu to return."}], "returns": [], "examples": []}, {"name": "menus", "description": "The shop's menus.", "arguments": [{"name": "after", "type": "String", "required": false, "description": "The elements that come after the specified cursor."}, {"name": "before", "type": "String", "required": false, "description": "The elements that come before the specified cursor."}, {"name": "first", "type": "Int", "required": false, "description": "The first n elements from the paginated list."}, {"name": "last", "type": "Int", "required": false, "description": "The last n elements from the paginated list."}, {"name": "query", "type": "String", "required": false, "description": "A filter made up of terms, connectives, modifiers, and comparators.\nYou can apply one or more filters to a query. Learn more about Shopify API search syntax."}, {"name": "reverse", "type": "Boolean", "required": false, "description": "Reverse the order of the underlying list."}, {"name": "sortKey", "type": "MenuSortKeys", "required": false, "description": "Sort the underlying list using a key. If your query is slow or returns an error, then try specifying a sort key that matches the field used in the search."}], "returns": [], "examples": []}, {"name": "onlineStore", "description": "The shop's online store channel.", "arguments": [], "returns": [{"name": "OnlineStore", "type": "OnlineStore!", "description": "non-null"}, {"name": "OnlineStore", "type": "OnlineStore!", "description": "non-null"}], "examples": []}, {"name": "page", "description": "Returns a Page resource by ID.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of the Page to return."}], "returns": [], "examples": []}, {"name": "pages", "description": "List of the shop's pages.", "arguments": [{"name": "after", "type": "String", "required": false, "description": "The elements that come after the specified cursor."}, {"name": "before", "type": "String", "required": false, "description": "The elements that come before the specified cursor."}, {"name": "first", "type": "Int", "required": false, "description": "The first n elements from the paginated list."}, {"name": "last", "type": "Int", "required": false, "description": "The last n elements from the paginated list."}, {"name": "query", "type": "String", "required": false, "description": "A filter made up of terms, connectives, modifiers, and comparators.\nYou can apply one or more filters to a query. Learn more about Shopify API search syntax."}, {"name": "reverse", "type": "Boolean", "required": false, "description": "Reverse the order of the underlying list."}, {"name": "savedSearchId", "type": "ID", "required": false, "description": "The ID of a saved search.\nThe search\u2019s query string is used as the query argument."}, {"name": "sortKey", "type": "PageSortKeys", "required": false, "description": "Sort the underlying list using a key. If your query is slow or returns an error, then try specifying a sort key that matches the field used in the search."}], "returns": [], "examples": []}, {"name": "pagesCount", "description": "Count of pages.", "arguments": [], "returns": [{"name": "Count", "type": "Count", "description": "non-null"}, {"name": "Count", "type": "Count", "description": "non-null"}, {"name": "Count", "type": "Count", "description": "non-null"}], "examples": []}, {"name": "scriptTag", "description": "Theme app extensions\n  Your app might not pass App Store review if it uses script tags instead of theme app extensions. All new apps, and apps that integrate with Online Store 2.0 themes, should use theme app extensions, such as app blocks or app embed blocks. Script tags are an alternative you can use with only vintage themes. Learn more.\n\nScript tag deprecation\n  Script tags will be sunset for the Order status page on August 28, 2025. Upgrade to Checkout Extensibility before this date. Shopify Scripts will continue to work alongside Checkout Extensibility until August 28, 2025.\n\n\nLookup a script tag resource by ID.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of the ScriptTag to return."}], "returns": [], "examples": []}, {"name": "scriptTags", "description": "Theme app extensions\n  Your app might not pass App Store review if it uses script tags instead of theme app extensions. All new apps, and apps that integrate with Online Store 2.0 themes, should use theme app extensions, such as app blocks or app embed blocks. Script tags are an alternative you can use with only vintage themes. Learn more.\n\nScript tag deprecation\n  Script tags will be sunset for the Order status page on August 28, 2025. Upgrade to Checkout Extensibility before this date. Shopify Scripts will continue to work alongside Checkout Extensibility until August 28, 2025.\n\n\nA list of script tags.", "arguments": [{"name": "after", "type": "String", "required": false, "description": "The elements that come after the specified cursor."}, {"name": "before", "type": "String", "required": false, "description": "The elements that come before the specified cursor."}, {"name": "first", "type": "Int", "required": false, "description": "The first n elements from the paginated list."}, {"name": "last", "type": "Int", "required": false, "description": "The last n elements from the paginated list."}, {"name": "query", "type": "String", "required": false, "description": "A filter made up of terms, connectives, modifiers, and comparators.\nYou can apply one or more filters to a query. Learn more about Shopify API search syntax."}, {"name": "reverse", "type": "Boolean", "required": false, "description": "Reverse the order of the underlying list."}, {"name": "src", "type": "URL", "required": false, "description": "The source URL of the script tag to filter by."}], "returns": [], "examples": [{"description": "Get the first five script tags", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `query {\n    scriptTags(first: 5) {\n      edges {\n        node {\n          id\n        }\n      }\n    }\n  }`,\n});\n"}, {"description": "Get the first script tag with a specific source URL", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `query {\n    scriptTags(first: 1, src: \"https://js.example.org/foo.js\") {\n      edges {\n        node {\n          id\n        }\n      }\n    }\n  }`,\n});\n"}, {"description": "Retrieves a list of all script tags", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `query GetScriptTags($first: Int!, $cursor: String) {\n      scriptTags(first: $first, after: $cursor) {\n        nodes {\n          id\n          cache\n          createdAt\n          displayScope\n          src\n          updatedAt\n        }\n        pageInfo {\n          startCursor\n          endCursor\n        }\n      }\n    }`,\n    \"variables\": {\n      \"first\": 5,\n      \"cursor\": null\n    },\n  },\n});\n"}]}, {"name": "theme", "description": "Returns a particular theme for the shop.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of the theme."}], "returns": [], "examples": [{"description": "Get file content by theme id and filename", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `query {\n    theme(id: \"gid://shopify/OnlineStoreTheme/225007463\") {\n      id\n      name\n      role\n      files(filenames: [\"assets/index.js\"], first: 1) {\n        nodes {\n          body {\n            ... on OnlineStoreThemeFileBodyText {\n              content\n            }\n          }\n        }\n      }\n    }\n  }`,\n});\n"}, {"description": "Get theme by id", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `query {\n    theme(id: \"gid://shopify/OnlineStoreTheme/529529152\") {\n      id\n      name\n      role\n    }\n  }`,\n});\n"}, {"description": "Get theme files by theme id", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `query {\n    theme(id: \"gid://shopify/OnlineStoreTheme/225007463\") {\n      id\n      name\n      role\n      files {\n        edges {\n          node {\n            filename\n            body {\n              ... on OnlineStoreThemeFileBodyText {\n                content\n              }\n            }\n          }\n        }\n      }\n    }\n  }`,\n});\n"}, {"description": "Retrieves a list of assets for a theme", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `query ThemeFilesPaginated($themeId: ID!) {\n      theme(id: $themeId) {\n        files(first: 50) {\n          edges {\n            node {\n              body {\n                ... on OnlineStoreThemeFileBodyBase64 {\n                  contentBase64\n                }\n                ... on OnlineStoreThemeFileBodyText {\n                  content\n                }\n                ... on OnlineStoreThemeFileBodyUrl {\n                  url\n                }\n              }\n              checksumMd5\n              contentType\n              createdAt\n              filename\n              size\n              updatedAt\n            }\n            cursor\n          }\n          pageInfo {\n            endCursor\n            hasNextPage\n            hasPreviousPage\n            startCursor\n          }\n          userErrors {\n            code\n            filename\n          }\n        }\n      }\n    }`,\n    \"variables\": {\n      \"themeId\": \"gid://shopify/OnlineStoreTheme/225007463\"\n    },\n  },\n});\n"}, {"description": "Retrieves a single asset for a theme", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `query ThemeFiles($themeId: ID!, $filenames: [String!]!) {\n      theme(id: $themeId) {\n        files(filenames: $filenames) {\n          nodes {\n            body {\n              ... on OnlineStoreThemeFileBodyBase64 {\n                contentBase64\n              }\n              ... on OnlineStoreThemeFileBodyText {\n                content\n              }\n              ... on OnlineStoreThemeFileBodyUrl {\n                url\n              }\n            }\n            checksumMd5\n            contentType\n            createdAt\n            filename\n            size\n            updatedAt\n          }\n          userErrors {\n            code\n            filename\n          }\n        }\n      }\n    }`,\n    \"variables\": {\n      \"themeId\": \"gid://shopify/OnlineStoreTheme/225007463\",\n      \"filenames\": [\n        \"assets/index.js\"\n      ]\n    },\n  },\n});\n"}, {"description": "Retrieves a single theme by its ID", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `query Theme($id: ID!) {\n      theme(id: $id) {\n        createdAt\n        id\n        name\n        prefix\n        processing\n        processingFailed\n        role\n        themeStoreId\n        updatedAt\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/OnlineStoreTheme/529529152\"\n    },\n  },\n});\n"}]}, {"name": "themes", "description": "Returns a paginated list of themes for the shop.", "arguments": [{"name": "after", "type": "String", "required": false, "description": "The elements that come after the specified cursor."}, {"name": "before", "type": "String", "required": false, "description": "The elements that come before the specified cursor."}, {"name": "first", "type": "Int", "required": false, "description": "The first n elements from the paginated list."}, {"name": "last", "type": "Int", "required": false, "description": "The last n elements from the paginated list."}, {"name": "names", "type": "[String!]", "required": false, "description": "The theme names to filter by. Use '*' to match zero or more characters."}, {"name": "reverse", "type": "Boolean", "required": false, "description": "Reverse the order of the underlying list."}, {"name": "roles", "type": "[ThemeRole!]", "required": false, "description": "The theme roles to filter by."}], "returns": [], "examples": [{"description": "Get first theme", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `query {\n    themes(first: 1) {\n      edges {\n        node {\n          name\n          id\n          role\n        }\n      }\n    }\n  }`,\n});\n"}, {"description": "Get themes by name", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `query {\n    themes(first: 10, names: [\"Com*\", \"Development\"]) {\n      nodes {\n        id\n        name\n        role\n      }\n    }\n  }`,\n});\n"}, {"description": "Retrieves a list of themes", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `query ThemeList {\n    themes(first: 10) {\n      edges {\n        node {\n          createdAt\n          id\n          name\n          prefix\n          processing\n          processingFailed\n          role\n          themeStoreId\n          updatedAt\n        }\n        cursor\n      }\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n      }\n    }\n  }`,\n});\n"}]}, {"name": "urlRedirect", "description": "Returns a redirect resource by ID.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of the UrlRedirect to return."}], "returns": [], "examples": []}, {"name": "urlRedirectImport", "description": "Returns a redirect import resource by ID.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of the UrlRedirectImport to return."}], "returns": [], "examples": []}, {"name": "urlRedirects", "description": "A list of redirects for a shop.", "arguments": [{"name": "after", "type": "String", "required": false, "description": "The elements that come after the specified cursor."}, {"name": "before", "type": "String", "required": false, "description": "The elements that come before the specified cursor."}, {"name": "first", "type": "Int", "required": false, "description": "The first n elements from the paginated list."}, {"name": "last", "type": "Int", "required": false, "description": "The last n elements from the paginated list."}, {"name": "query", "type": "String", "required": false, "description": "A filter made up of terms, connectives, modifiers, and comparators.\nYou can apply one or more filters to a query. Learn more about Shopify API search syntax."}, {"name": "reverse", "type": "Boolean", "required": false, "description": "Reverse the order of the underlying list."}, {"name": "savedSearchId", "type": "ID", "required": false, "description": "The ID of a saved search.\nThe search\u2019s query string is used as the query argument."}, {"name": "sortKey", "type": "UrlRedirectSortKeys", "required": false, "description": "Sort the underlying list using a key. If your query is slow or returns an error, then try specifying a sort key that matches the field used in the search."}], "returns": [], "examples": []}, {"name": "urlRedirectSavedSearches", "description": "A list of the shop's URL redirect saved searches.", "arguments": [{"name": "after", "type": "String", "required": false, "description": "The elements that come after the specified cursor."}, {"name": "before", "type": "String", "required": false, "description": "The elements that come before the specified cursor."}, {"name": "first", "type": "Int", "required": false, "description": "The first n elements from the paginated list."}, {"name": "last", "type": "Int", "required": false, "description": "The last n elements from the paginated list."}, {"name": "reverse", "type": "Boolean", "required": false, "description": "Reverse the order of the underlying list."}], "returns": [], "examples": []}, {"name": "urlRedirectsCount", "description": "Count of redirects. Limited to a maximum of 10000.", "arguments": [{"name": "query", "type": "String", "required": false, "description": "A filter made up of terms, connectives, modifiers, and comparators.\nYou can apply one or more filters to a query. Learn more about Shopify API search syntax."}, {"name": "savedSearchId", "type": "ID", "required": false, "description": "The ID of an existing saved search.\nThe search\u2019s query string is used as the query argument.\nRefer to the SavedSearch object."}], "returns": [], "examples": []}], "mutations": [{"name": "articleCreate", "description": "Creates an article.", "arguments": [{"name": "article", "type": "ArticleCreateInput!", "required": false, "description": "The properties of the new article."}, {"name": "blog", "type": "ArticleBlogInput", "required": false, "description": "The properties of the new blog."}], "returns": [], "examples": [{"description": "Creates an article for a blog", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation CreateArticle($article: ArticleCreateInput!) {\n      articleCreate(article: $article) {\n        article {\n          id\n          title\n          author {\n            name\n          }\n          handle\n          body\n          summary\n          tags\n          image {\n            altText\n            originalSrc\n          }\n        }\n        userErrors {\n          code\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"article\": {\n        \"blogId\": \"gid://shopify/Blog/389767568\",\n        \"title\": \"New Article Title\",\n        \"author\": {\n          \"name\": \"Test User\"\n        },\n        \"handle\": \"new-article-title\",\n        \"body\": \"This is the content of the article.\",\n        \"summary\": \"This is a summary of the article.\",\n        \"isPublished\": true,\n        \"publishDate\": \"2023-01-01T12:00:00Z\",\n        \"tags\": [\n          \"Tag1\",\n          \"Tag2\"\n        ],\n        \"image\": {\n          \"altText\": \"Alt text for the image\",\n          \"url\": \"http://example.com/fake_image.jpg\"\n        }\n      }\n    },\n  },\n});\n"}, {"description": "articleCreate reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation CreateArticle($article: ArticleCreateInput!) {\n      articleCreate(article: $article) {\n        article {\n          id\n          title\n          author {\n            name\n          }\n          handle\n          body\n          summary\n          tags\n          image {\n            altText\n            originalSrc\n          }\n        }\n        userErrors {\n          code\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"article\": {\n        \"blogId\": \"gid://shopify/Blog/389767568\",\n        \"title\": \"New Article Title\",\n        \"author\": {\n          \"name\": \"Test User\"\n        },\n        \"handle\": \"new-article-title\",\n        \"body\": \"This is the content of the article.\",\n        \"summary\": \"This is a summary of the article.\",\n        \"isPublished\": true,\n        \"publishDate\": \"2023-01-01T12:00:00Z\",\n        \"tags\": [\n          \"Tag1\",\n          \"Tag2\"\n        ],\n        \"image\": {\n          \"altText\": \"Alt text for the image\",\n          \"url\": \"http://example.com/fake_image.jpg\"\n        }\n      }\n    },\n  },\n});\n"}]}, {"name": "articleDelete", "description": "Deletes an article.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of the article to be deleted."}], "returns": [], "examples": [{"description": "Deletes an article", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation DeleteArticle($id: ID!) {\n      articleDelete(id: $id) {\n        deletedArticleId\n        userErrors {\n          code\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/Article/959752435\"\n    },\n  },\n});\n"}, {"description": "articleDelete reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation DeleteArticle($id: ID!) {\n      articleDelete(id: $id) {\n        deletedArticleId\n        userErrors {\n          code\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/Article/959752435\"\n    },\n  },\n});\n"}]}, {"name": "articleUpdate", "description": "Updates an article.", "arguments": [{"name": "article", "type": "ArticleUpdateInput!", "required": false, "description": "The properties of the article to be updated."}, {"name": "blog", "type": "ArticleBlogInput", "required": false, "description": "The properties of the blog to be created."}, {"name": "id", "type": "ID!", "required": false, "description": "The ID of the article to be updated."}], "returns": [], "examples": [{"description": "Updates an article", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation UpdateArticle($id: ID!, $article: ArticleUpdateInput!) {\n      articleUpdate(id: $id, article: $article) {\n        article {\n          id\n          title\n          handle\n          body\n          summary\n          tags\n          image {\n            altText\n            originalSrc\n          }\n        }\n        userErrors {\n          code\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/Article/959752435\",\n      \"article\": {\n        \"title\": \"Updated Article Title\",\n        \"handle\": \"updated-article-title\",\n        \"body\": \"This is the updated content of the article.\",\n        \"summary\": \"This is an updated summary of the article.\",\n        \"tags\": [\n          \"UpdatedTag1\",\n          \"UpdatedTag2\"\n        ],\n        \"image\": {\n          \"altText\": \"Updated alt text for the image\",\n          \"url\": \"http://example.com/fake_image.jpg\"\n        }\n      }\n    },\n  },\n});\n"}, {"description": "articleUpdate reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation UpdateArticle($id: ID!, $article: ArticleUpdateInput!) {\n      articleUpdate(id: $id, article: $article) {\n        article {\n          id\n          title\n          handle\n          body\n          summary\n          tags\n          image {\n            altText\n            originalSrc\n          }\n        }\n        userErrors {\n          code\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/Article/959752435\",\n      \"article\": {\n        \"title\": \"Updated Article Title\",\n        \"handle\": \"updated-article-title\",\n        \"body\": \"This is the updated content of the article.\",\n        \"summary\": \"This is an updated summary of the article.\",\n        \"tags\": [\n          \"UpdatedTag1\",\n          \"UpdatedTag2\"\n        ],\n        \"image\": {\n          \"altText\": \"Updated alt text for the image\",\n          \"url\": \"http://example.com/fake_image.jpg\"\n        }\n      }\n    },\n  },\n});\n"}]}, {"name": "blogCreate", "description": "Creates a blog.", "arguments": [{"name": "blog", "type": "BlogCreateInput!", "required": false, "description": "The properties of the new blog."}], "returns": [], "examples": [{"description": "Create a new Blog", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation CreateBlog($blog: BlogCreateInput!) {\n      blogCreate(blog: $blog) {\n        blog {\n          id\n          title\n          handle\n          templateSuffix\n          commentPolicy\n        }\n        userErrors {\n          code\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"blog\": {\n        \"title\": \"New Blog Title\",\n        \"handle\": \"new-blog-title\",\n        \"templateSuffix\": \"standard\",\n        \"commentPolicy\": \"MODERATED\"\n      }\n    },\n  },\n});\n"}, {"description": "blogCreate reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation CreateBlog($blog: BlogCreateInput!) {\n      blogCreate(blog: $blog) {\n        blog {\n          id\n          title\n          handle\n          templateSuffix\n          commentPolicy\n        }\n        userErrors {\n          code\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"blog\": {\n        \"title\": \"New Blog Title\",\n        \"handle\": \"new-blog-title\",\n        \"templateSuffix\": \"standard\",\n        \"commentPolicy\": \"MODERATED\"\n      }\n    },\n  },\n});\n"}]}, {"name": "blogDelete", "description": "Deletes a blog.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of the blog to be deleted."}], "returns": [], "examples": [{"description": "Remove an existing Blog", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation DeleteBlog($id: ID!) {\n      blogDelete(id: $id) {\n        deletedBlogId\n        userErrors {\n          code\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/Blog/389767568\"\n    },\n  },\n});\n"}, {"description": "blogDelete reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation DeleteBlog($id: ID!) {\n      blogDelete(id: $id) {\n        deletedBlogId\n        userErrors {\n          code\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/Blog/389767568\"\n    },\n  },\n});\n"}]}, {"name": "blogUpdate", "description": "Updates a blog.", "arguments": [{"name": "blog", "type": "BlogUpdateInput!", "required": false, "description": "The properties of the blog to be updated."}, {"name": "id", "type": "ID!", "required": false, "description": "The ID of the blog to be updated."}], "returns": [], "examples": [{"description": "Modify an existing Blog", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation UpdateBlog($id: ID!, $blog: BlogUpdateInput!) {\n      blogUpdate(id: $id, blog: $blog) {\n        blog {\n          id\n          title\n          handle\n          templateSuffix\n          commentPolicy\n        }\n        userErrors {\n          code\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/Blog/389767568\",\n      \"blog\": {\n        \"title\": \"Updated Blog Title\",\n        \"handle\": \"updated-blog-title\",\n        \"templateSuffix\": \"updated_template\",\n        \"commentPolicy\": \"MODERATED\"\n      }\n    },\n  },\n});\n"}, {"description": "blogUpdate reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation UpdateBlog($id: ID!, $blog: BlogUpdateInput!) {\n      blogUpdate(id: $id, blog: $blog) {\n        blog {\n          id\n          title\n          handle\n          templateSuffix\n          commentPolicy\n        }\n        userErrors {\n          code\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/Blog/389767568\",\n      \"blog\": {\n        \"title\": \"Updated Blog Title\",\n        \"handle\": \"updated-blog-title\",\n        \"templateSuffix\": \"updated_template\",\n        \"commentPolicy\": \"MODERATED\"\n      }\n    },\n  },\n});\n"}]}, {"name": "commentApprove", "description": "Approves a comment.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of the comment to be approved."}], "returns": [], "examples": [{"description": "Approves a comment", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation ApproveComment($id: ID!) {\n      commentApprove(id: $id) {\n        comment {\n          id\n          status\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/Comment/757536350\"\n    },\n  },\n});\n"}, {"description": "commentApprove reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation ApproveComment($id: ID!) {\n      commentApprove(id: $id) {\n        comment {\n          id\n          status\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/Comment/757536350\"\n    },\n  },\n});\n"}]}, {"name": "commentDelete", "description": "Deletes a comment.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of the comment to be deleted."}], "returns": [], "examples": [{"description": "Removes a comment", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation CommentDelete($id: ID!) {\n      commentDelete(id: $id) {\n        deletedCommentId\n        userErrors {\n          code\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/Comment/757536350\"\n    },\n  },\n});\n"}, {"description": "commentDelete reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation CommentDelete($id: ID!) {\n      commentDelete(id: $id) {\n        deletedCommentId\n        userErrors {\n          code\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/Comment/757536350\"\n    },\n  },\n});\n"}]}, {"name": "commentNotSpam", "description": "Marks a comment as not spam.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of the comment to be marked as not spam."}], "returns": [], "examples": [{"description": "Marks a comment as not spam", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation CommentNotSpam($id: ID!) {\n      commentNotSpam(id: $id) {\n        comment {\n          id\n        }\n        userErrors {\n          code\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/Comment/9450891\"\n    },\n  },\n});\n"}, {"description": "commentNotSpam reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation CommentNotSpam($id: ID!) {\n      commentNotSpam(id: $id) {\n        comment {\n          id\n        }\n        userErrors {\n          code\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/Comment/9450891\"\n    },\n  },\n});\n"}]}, {"name": "commentSpam", "description": "Marks a comment as spam.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of the comment to be marked as spam."}], "returns": [], "examples": [{"description": "Marks a comment as spam", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation MarkCommentAsSpam($id: ID!) {\n      commentSpam(id: $id) {\n        comment {\n          id\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/Comment/757536350\"\n    },\n  },\n});\n"}, {"description": "commentSpam reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation MarkCommentAsSpam($id: ID!) {\n      commentSpam(id: $id) {\n        comment {\n          id\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/Comment/757536350\"\n    },\n  },\n});\n"}]}, {"name": "menuCreate", "description": "Creates a menu.", "arguments": [{"name": "handle", "type": "String!", "required": false, "description": "The menu's handle."}, {"name": "items", "type": "[MenuItemCreateInput!]!", "required": false, "description": "List of the menu's items."}, {"name": "title", "type": "String!", "required": false, "description": "The menu's title."}], "returns": [], "examples": [{"description": "Create a menu", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation CreateMenu($title: String!, $handle: String!, $items: [MenuItemCreateInput!]!) {\n      menuCreate(title: $title, handle: $handle, items: $items) {\n        menu {\n          id\n          handle\n          items {\n            id\n            title\n            items {\n              id\n              title\n            }\n          }\n        }\n      }\n    }`,\n    \"variables\": {\n      \"title\": \"Sidebar\",\n      \"handle\": \"sidebar\",\n      \"items\": [\n        {\n          \"title\": \"Collections\",\n          \"type\": \"COLLECTION\",\n          \"url\": \"/collection\",\n          \"items\": [\n            {\n              \"title\": \"Bestsellers\",\n              \"type\": \"COLLECTION\",\n              \"resourceId\": \"gid://shopify/Collection/1007901140\",\n              \"url\": \"/collection/bestsellers/new\",\n              \"tags\": [\n                \"new\"\n              ],\n              \"items\": []\n            }\n          ]\n        },\n        {\n          \"title\": \"Products\",\n          \"type\": \"CATALOG\",\n          \"url\": \"/collections/all\",\n          \"items\": []\n        },\n        {\n          \"title\": \"About us\",\n          \"type\": \"PAGE\",\n          \"resourceId\": \"gid://shopify/Page/905192165\",\n          \"url\": \"/pages/about-us\",\n          \"items\": []\n        }\n      ]\n    },\n  },\n});\n"}, {"description": "menuCreate reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation CreateMenu($title: String!, $handle: String!, $items: [MenuItemCreateInput!]!) {\n      menuCreate(title: $title, handle: $handle, items: $items) {\n        menu {\n          id\n          handle\n          items {\n            id\n            title\n            items {\n              id\n              title\n            }\n          }\n        }\n      }\n    }`,\n    \"variables\": {\n      \"title\": \"Sidebar\",\n      \"handle\": \"sidebar\",\n      \"items\": [\n        {\n          \"title\": \"Collections\",\n          \"type\": \"COLLECTION\",\n          \"url\": \"/collection\",\n          \"items\": [\n            {\n              \"title\": \"Bestsellers\",\n              \"type\": \"COLLECTION\",\n              \"resourceId\": \"gid://shopify/Collection/1007901140\",\n              \"url\": \"/collection/bestsellers/new\",\n              \"tags\": [\n                \"new\"\n              ],\n              \"items\": []\n            }\n          ]\n        },\n        {\n          \"title\": \"Products\",\n          \"type\": \"CATALOG\",\n          \"url\": \"/collections/all\",\n          \"items\": []\n        },\n        {\n          \"title\": \"About us\",\n          \"type\": \"PAGE\",\n          \"resourceId\": \"gid://shopify/Page/905192165\",\n          \"url\": \"/pages/about-us\",\n          \"items\": []\n        }\n      ]\n    },\n  },\n});\n"}]}, {"name": "menuDelete", "description": "Deletes a menu.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of the menu to be deleted."}], "returns": [], "examples": [{"description": "Failing to delete the main menu", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation DeleteMenu($id: ID!) {\n      menuDelete(id: $id) {\n        deletedMenuId\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/Menu/166235728\"\n    },\n  },\n});\n"}, {"description": "Successfully deleting a menu", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation DeleteMenu($id: ID!) {\n      menuDelete(id: $id) {\n        deletedMenuId\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/Menu/166235728\"\n    },\n  },\n});\n"}, {"description": "menuDelete reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation DeleteMenu($id: ID!) {\n      menuDelete(id: $id) {\n        deletedMenuId\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/Menu/166235728\"\n    },\n  },\n});\n"}]}, {"name": "menuUpdate", "description": "Updates a menu.", "arguments": [{"name": "handle", "type": "String", "required": false, "description": "The menu's handle."}, {"name": "id", "type": "ID!", "required": false, "description": "ID of the menu to be updated."}, {"name": "items", "type": "[MenuItemUpdateInput!]!", "required": false, "description": "List of the menu's items."}, {"name": "title", "type": "String!", "required": false, "description": "The menu's title."}], "returns": [], "examples": [{"description": "menuUpdate reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation UpdateMenu($id: ID!, $title: String!, $handle: String!, $items: [MenuItemUpdateInput!]!) {\n      menuUpdate(id: $id, title: $title, handle: $handle, items: $items) {\n        menu {\n          id\n          handle\n          items {\n            id\n            title\n            items {\n              id\n              title\n            }\n          }\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/Menu/442047006\",\n      \"title\": \"updated menu\",\n      \"handle\": \"danielstuff-main-menu\",\n      \"items\": [\n        {\n          \"id\": \"gid://shopify/MenuItem/398712010\",\n          \"title\": \"Electronics\",\n          \"url\": \"collection/tables\",\n          \"resourceId\": \"gid://shopify/Collection/71762467\",\n          \"type\": \"COLLECTION\",\n          \"items\": []\n        },\n        {\n          \"id\": \"gid://shopify/MenuItem/643685044\",\n          \"title\": \"Furniture\",\n          \"url\": \"/collections/furniture\",\n          \"resourceId\": \"gid://shopify/Collection/643685044\",\n          \"type\": \"COLLECTION\",\n          \"items\": [\n            {\n              \"id\": \"gid://shopify/MenuItem/927352226\",\n              \"title\": \"Updated Living Room\",\n              \"url\": \"/collections/living-room\",\n              \"resourceId\": \"gid://shopify/Collection/927352226\",\n              \"type\": \"COLLECTION\",\n              \"items\": [\n                {\n                  \"id\": \"gid://shopify/MenuItem/307741084\",\n                  \"title\": \"Sofa\",\n                  \"url\": \"/collections/sofa\",\n                  \"resourceId\": \"gid://shopify/Collection/307741084\",\n                  \"type\": \"COLLECTION\",\n                  \"items\": []\n                },\n                {\n                  \"id\": \"gid://shopify/MenuItem/375350346\",\n                  \"title\": \"Sound System\",\n                  \"url\": \"/collections/sound-system\",\n                  \"resourceId\": \"gid://shopify/Collection/375350346\",\n                  \"type\": \"COLLECTION\",\n                  \"items\": []\n                },\n                {\n                  \"id\": \"gid://shopify/MenuItem/837241978\",\n                  \"title\": \"Massage Chairs\",\n                  \"url\": \"/collections/massage%20chairs\",\n                  \"resourceId\": \"gid://shopify/Collection/837241978\",\n                  \"type\": \"COLLECTION\",\n                  \"items\": []\n                },\n                {\n                  \"id\": \"gid://shopify/MenuItem/960081962\",\n                  \"title\": \"Living Room Rugs\",\n                  \"url\": \"/collections/living%20room%20rugs\",\n                  \"resourceId\": \"gid://shopify/Collection/960081962\",\n                  \"type\": \"COLLECTION\",\n                  \"items\": []\n                }\n              ]\n            },\n            {\n              \"id\": \"gid://shopify/MenuItem/715378231\",\n              \"title\": \"Kitchen\",\n              \"url\": \"/collections/kitchen\",\n              \"resourceId\": \"gid://shopify/Collection/715378231\",\n              \"type\": \"COLLECTION\",\n              \"items\": [\n                {\n                  \"id\": \"gid://shopify/MenuItem/108641250\",\n                  \"title\": \"Chairs\",\n                  \"url\": \"/collections/chairs\",\n                  \"resourceId\": \"gid://shopify/Collection/108641250\",\n                  \"type\": \"COLLECTION\",\n                  \"items\": []\n                },\n                {\n                  \"id\": \"gid://shopify/MenuItem/71762467\",\n                  \"title\": \"Tables\",\n                  \"url\": \"/collections/tables\",\n                  \"resourceId\": \"gid://shopify/Collection/71762467\",\n                  \"type\": \"COLLECTION\",\n                  \"items\": []\n                },\n                {\n                  \"id\": \"gid://shopify/MenuItem/826396515\",\n                  \"title\": \"Kitchen Rugs\",\n                  \"url\": \"/collections/kitchen%20rugs\",\n                  \"resourceId\": \"gid://shopify/Collection/826396515\",\n                  \"type\": \"COLLECTION\",\n                  \"items\": []\n                }\n              ]\n            }\n          ]\n        },\n        {\n          \"id\": \"gid://shopify/MenuItem/698896745\",\n          \"title\": \"Mega Sofa Sale\",\n          \"url\": \"/collections/mega%20sale\",\n          \"resourceId\": \"gid://shopify/Collection/307741084\",\n          \"type\": \"COLLECTION\",\n          \"items\": []\n        }\n      ]\n    },\n  },\n});\n"}]}, {"name": "pageCreate", "description": "Creates a page.", "arguments": [{"name": "page", "type": "PageCreateInput!", "required": false, "description": "The properties of the new page."}], "returns": [], "examples": [{"description": "Creates a page", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation CreatePage($page: PageCreateInput!) {\n      pageCreate(page: $page) {\n        page {\n          id\n          title\n          handle\n        }\n        userErrors {\n          code\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"page\": {\n        \"title\": \"New Page Title\",\n        \"handle\": \"new-page-title\",\n        \"body\": \"This is the content of the page.\",\n        \"isPublished\": true,\n        \"templateSuffix\": \"custom\"\n      }\n    },\n  },\n});\n"}, {"description": "pageCreate reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation CreatePage($page: PageCreateInput!) {\n      pageCreate(page: $page) {\n        page {\n          id\n          title\n          handle\n        }\n        userErrors {\n          code\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"page\": {\n        \"title\": \"New Page Title\",\n        \"handle\": \"new-page-title\",\n        \"body\": \"This is the content of the page.\",\n        \"isPublished\": true,\n        \"templateSuffix\": \"custom\"\n      }\n    },\n  },\n});\n"}]}, {"name": "pageDelete", "description": "Deletes a page.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of the page to be deleted."}], "returns": [], "examples": [{"description": "Deletes a page", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation DeletePage($id: ID!) {\n      pageDelete(id: $id) {\n        deletedPageId\n        userErrors {\n          code\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/Page/602767277\"\n    },\n  },\n});\n"}, {"description": "pageDelete reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation DeletePage($id: ID!) {\n      pageDelete(id: $id) {\n        deletedPageId\n        userErrors {\n          code\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/Page/602767277\"\n    },\n  },\n});\n"}]}, {"name": "pageUpdate", "description": "Updates a page.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of the page to be updated."}, {"name": "page", "type": "PageUpdateInput!", "required": false, "description": "The properties of the page to be updated."}], "returns": [], "examples": [{"description": "Updates a page", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation UpdatePage($id: ID!, $page: PageUpdateInput!) {\n      pageUpdate(id: $id, page: $page) {\n        page {\n          id\n          title\n          handle\n        }\n        userErrors {\n          code\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/Page/602767277\",\n      \"page\": {\n        \"title\": \"This is the Title\",\n        \"handle\": \"this-is-the-handle\"\n      }\n    },\n  },\n});\n"}, {"description": "pageUpdate reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation UpdatePage($id: ID!, $page: PageUpdateInput!) {\n      pageUpdate(id: $id, page: $page) {\n        page {\n          id\n          title\n          handle\n        }\n        userErrors {\n          code\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/Page/602767277\",\n      \"page\": {\n        \"title\": \"This is the Title\",\n        \"handle\": \"this-is-the-handle\"\n      }\n    },\n  },\n});\n"}]}, {"name": "scriptTagCreate", "description": "Theme app extensions\n  Your app might not pass App Store review if it uses script tags instead of theme app extensions. All new apps, and apps that integrate with Online Store 2.0 themes, should use theme app extensions, such as app blocks or app embed blocks. Script tags are an alternative you can use with only vintage themes. Learn more.\n\nScript tag deprecation\n  Script tags will be sunset for the Order status page on August 28, 2025. Upgrade to Checkout Extensibility before this date. Shopify Scripts will continue to work alongside Checkout Extensibility until August 28, 2025.\n\n\nCreates a new script tag.", "arguments": [{"name": "input", "type": "ScriptTagInput!", "required": false, "description": "The input fields for a script tag."}], "returns": [], "examples": [{"description": "scriptTagCreate reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation ScriptTagCreate($input: ScriptTagInput!) {\n      scriptTagCreate(input: $input) {\n        scriptTag {\n          id\n          cache\n          createdAt\n          displayScope\n          src\n          updatedAt\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"input\": {\n        \"src\": \"https://js.example.org/bar.js\",\n        \"displayScope\": \"ONLINE_STORE\",\n        \"cache\": true\n      }\n    },\n  },\n});\n"}]}, {"name": "scriptTagDelete", "description": "Theme app extensions\n  Your app might not pass App Store review if it uses script tags instead of theme app extensions. All new apps, and apps that integrate with Online Store 2.0 themes, should use theme app extensions, such as app blocks or app embed blocks. Script tags are an alternative you can use with only vintage themes. Learn more.\n\nScript tag deprecation\n  Script tags will be sunset for the Order status page on August 28, 2025. Upgrade to Checkout Extensibility before this date. Shopify Scripts will continue to work alongside Checkout Extensibility until August 28, 2025.\n\n\nDeletes a script tag.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of the script tag to delete."}], "returns": [], "examples": [{"description": "Deletes a script tag", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation ScriptTagDelete($id: ID!) {\n      scriptTagDelete(id: $id) {\n        deletedScriptTagId\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/ScriptTag/421379493\"\n    },\n  },\n});\n"}, {"description": "scriptTagDelete reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation ScriptTagDelete($id: ID!) {\n      scriptTagDelete(id: $id) {\n        deletedScriptTagId\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/ScriptTag/421379493\"\n    },\n  },\n});\n"}]}, {"name": "scriptTagUpdate", "description": "Theme app extensions\n  Your app might not pass App Store review if it uses script tags instead of theme app extensions. All new apps, and apps that integrate with Online Store 2.0 themes, should use theme app extensions, such as app blocks or app embed blocks. Script tags are an alternative you can use with only vintage themes. Learn more.\n\nScript tag deprecation\n  Script tags will be sunset for the Order status page on August 28, 2025. Upgrade to Checkout Extensibility before this date. Shopify Scripts will continue to work alongside Checkout Extensibility until August 28, 2025.\n\n\nUpdates a script tag.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of the script tag to update."}, {"name": "input", "type": "ScriptTagInput!", "required": false, "description": "Specifies the input fields for a script tag."}], "returns": [], "examples": [{"description": "Updates a script tag", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation ScriptTagUpdate($id: ID!, $input: ScriptTagInput!) {\n      scriptTagUpdate(id: $id, input: $input) {\n        scriptTag {\n          id\n          cache\n          createdAt\n          displayScope\n          src\n          updatedAt\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/ScriptTag/421379493\",\n      \"input\": {\n        \"src\": \"https://js.example.org/updated.js\",\n        \"displayScope\": \"ONLINE_STORE\"\n      }\n    },\n  },\n});\n"}, {"description": "scriptTagUpdate reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation ScriptTagUpdate($id: ID!, $input: ScriptTagInput!) {\n      scriptTagUpdate(id: $id, input: $input) {\n        scriptTag {\n          id\n          cache\n          createdAt\n          displayScope\n          src\n          updatedAt\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/ScriptTag/421379493\",\n      \"input\": {\n        \"src\": \"https://js.example.org/updated.js\",\n        \"displayScope\": \"ONLINE_STORE\"\n      }\n    },\n  },\n});\n"}]}, {"name": "themeCreate", "description": "Creates a theme using an external URL or for files that were previously uploaded using the\nstagedUploadsCreate mutation.\nThese themes are added to the Themes page in Shopify admin.", "arguments": [{"name": "name", "type": "String", "required": false, "description": "The name of the theme to be created."}, {"name": "role", "type": "ThemeRole", "required": false, "description": "The role of the theme to be created. Only UNPUBLISHED and DEVELOPMENT roles are permitted."}, {"name": "source", "type": "URL!", "required": false, "description": "An external URL or a\nstaged upload URL\nof the theme to import."}], "returns": [], "examples": [{"description": "Create a new theme from an url with a custom name", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation themeCreate($source: URL!, $name: String!) {\n      themeCreate(source: $source, name: $name) {\n        theme {\n          name\n          role\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"source\": \"http://www.example.com/dawn.zip\",\n      \"name\": \"Dawn\"\n    },\n  },\n});\n"}, {"description": "Creates a theme", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation ThemeCreate($name: String, $source: URL!) {\n      themeCreate(name: $name, source: $source) {\n        theme {\n          id\n        }\n        userErrors {\n          code\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"name\": \"New Theme\",\n      \"source\": \"http://someurl.com/lemongrass.zip\"\n    },\n  },\n});\n"}, {"description": "themeCreate reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation themeCreate($source: URL!, $name: String!) {\n      themeCreate(source: $source, name: $name) {\n        theme {\n          name\n          role\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"source\": \"http://www.example.com/dawn.zip\",\n      \"name\": \"Dawn\"\n    },\n  },\n});\n"}]}, {"name": "themeDelete", "description": "Deletes a theme.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of the theme to be deleted."}], "returns": [], "examples": [{"description": "Delete a theme by its ID", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation themeDelete($id: ID!) {\n      themeDelete(id: $id) {\n        deletedThemeId\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/OnlineStoreTheme/908009861\"\n    },\n  },\n});\n"}, {"description": "Remove an existing Theme", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation ThemeUpdate($id: ID!) {\n      themeDelete(id: $id) {\n        deletedThemeId\n        userErrors {\n          code\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/OnlineStoreTheme/908009861\"\n    },\n  },\n});\n"}, {"description": "themeDelete reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation themeDelete($id: ID!) {\n      themeDelete(id: $id) {\n        deletedThemeId\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/OnlineStoreTheme/908009861\"\n    },\n  },\n});\n"}]}, {"name": "themeFilesCopy", "description": "Copy theme files. Copying to existing theme files will overwrite them.", "arguments": [{"name": "files", "type": "[ThemeFilesCopyFileInput!]!", "required": false, "description": "The files to update."}, {"name": "themeId", "type": "ID!", "required": false, "description": "The theme to update."}], "returns": [], "examples": [{"description": "Copy the content of a file into another file", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation themeFilesCopy($files: [ThemeFilesCopyFileInput!]!, $themeId: ID!) {\n      themeFilesCopy(files: $files, themeId: $themeId) {\n        copiedThemeFiles {\n          filename\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"themeId\": \"gid://shopify/OnlineStoreTheme/529529152\",\n      \"files\": [\n        {\n          \"dstFilename\": \"templates/index.alt.json\",\n          \"srcFilename\": \"templates/index.json\"\n        }\n      ]\n    },\n  },\n});\n"}, {"description": "Creates or updates an asset for a theme", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation ThemeFilesCopy($files: [ThemeFilesCopyFileInput!]!, $themeId: ID!) {\n      themeFilesCopy(files: $files, themeId: $themeId) {\n        copiedThemeFiles {\n          filename\n        }\n        userErrors {\n          code\n          field\n          filename\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"themeId\": \"gid://shopify/OnlineStoreTheme/529529152\",\n      \"files\": [\n        {\n          \"dstFilename\": \"templates/index.alt.liquid\",\n          \"srcFilename\": \"templates/index.liquid\"\n        }\n      ]\n    },\n  },\n});\n"}, {"description": "themeFilesCopy reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation themeFilesCopy($files: [ThemeFilesCopyFileInput!]!, $themeId: ID!) {\n      themeFilesCopy(files: $files, themeId: $themeId) {\n        copiedThemeFiles {\n          filename\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"themeId\": \"gid://shopify/OnlineStoreTheme/529529152\",\n      \"files\": [\n        {\n          \"dstFilename\": \"templates/index.alt.json\",\n          \"srcFilename\": \"templates/index.json\"\n        }\n      ]\n    },\n  },\n});\n"}]}, {"name": "themeFilesDelete", "description": "Deletes a theme's files.", "arguments": [{"name": "files", "type": "[String!]!", "required": false, "description": "The files to delete."}, {"name": "themeId", "type": "ID!", "required": false, "description": "Specifies the theme to deleted."}], "returns": [], "examples": [{"description": "Delete a theme file", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation themeFilesDelete($themeId: ID!, $files: [String!]!) {\n      themeFilesDelete(themeId: $themeId, files: $files) {\n        deletedThemeFiles {\n          filename\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"themeId\": \"gid://shopify/OnlineStoreTheme/529529152\",\n      \"files\": [\n        \"templates/index.json\"\n      ]\n    },\n  },\n});\n"}, {"description": "Deletes an asset from a theme", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation ThemeFilesDelete($files: [String!]!, $themeId: ID!) {\n      themeFilesDelete(files: $files, themeId: $themeId) {\n        deletedThemeFiles {\n          filename\n        }\n        userErrors {\n          code\n          field\n          filename\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"themeId\": \"gid://shopify/OnlineStoreTheme/529529152\",\n      \"files\": [\n        \"sections/content_section.liquid\"\n      ]\n    },\n  },\n});\n"}, {"description": "themeFilesDelete reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation themeFilesDelete($themeId: ID!, $files: [String!]!) {\n      themeFilesDelete(themeId: $themeId, files: $files) {\n        deletedThemeFiles {\n          filename\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"themeId\": \"gid://shopify/OnlineStoreTheme/529529152\",\n      \"files\": [\n        \"templates/index.json\"\n      ]\n    },\n  },\n});\n"}]}, {"name": "themeFilesUpsert", "description": "Create or update theme files.", "arguments": [{"name": "files", "type": "[OnlineStoreThemeFilesUpsertFileInput!]!", "required": false, "description": "The files to update."}, {"name": "themeId", "type": "ID!", "required": false, "description": "The theme to update."}], "returns": [], "examples": [{"description": "Create or update a theme file", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation themeFilesUpsert($files: [OnlineStoreThemeFilesUpsertFileInput!]!, $themeId: ID!) {\n      themeFilesUpsert(files: $files, themeId: $themeId) {\n        upsertedThemeFiles {\n          filename\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"themeId\": \"gid://shopify/OnlineStoreTheme/529529152\",\n      \"files\": [\n        {\n          \"filename\": \"templates/index.json\",\n          \"body\": {\n            \"type\": \"TEXT\",\n            \"value\": \"{ \\\"sections\\\": {}, \\\"order\\\": [] }\"\n          }\n        }\n      ]\n    },\n  },\n});\n"}, {"description": "Create or update theme files in bulk", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation themeFilesUpsert($files: [OnlineStoreThemeFilesUpsertFileInput!]!, $themeId: ID!) {\n      themeFilesUpsert(files: $files, themeId: $themeId) {\n        upsertedThemeFiles {\n          filename\n        }\n        job {\n          id\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"themeId\": \"gid://shopify/OnlineStoreTheme/529529152\",\n      \"files\": [\n        {\n          \"filename\": \"templates/index.json\",\n          \"body\": {\n            \"type\": \"TEXT\",\n            \"value\": \"{ \\\"sections\\\": {}, \\\"order\\\": [] }\"\n          }\n        },\n        {\n          \"filename\": \"assets/custom-content.txt\",\n          \"body\": {\n            \"type\": \"BASE64\",\n            \"value\": \"Y3VzdG9tIGNvbnRlbnQ=\"\n          }\n        },\n        {\n          \"filename\": \"assets/large-dog-image.jpg\",\n          \"body\": {\n            \"type\": \"URL\",\n            \"value\": \"https://www.example.com/large-dog-image.jpg\"\n          }\n        }\n      ]\n    },\n  },\n});\n"}, {"description": "themeFilesUpsert reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation themeFilesUpsert($files: [OnlineStoreThemeFilesUpsertFileInput!]!, $themeId: ID!) {\n      themeFilesUpsert(files: $files, themeId: $themeId) {\n        upsertedThemeFiles {\n          filename\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"themeId\": \"gid://shopify/OnlineStoreTheme/529529152\",\n      \"files\": [\n        {\n          \"filename\": \"templates/index.json\",\n          \"body\": {\n            \"type\": \"TEXT\",\n            \"value\": \"{ \\\"sections\\\": {}, \\\"order\\\": [] }\"\n          }\n        }\n      ]\n    },\n  },\n});\n"}]}, {"name": "themePublish", "description": "Publishes a theme.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "ID of the theme to be published."}], "returns": [], "examples": [{"description": "Modify an existing Theme", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation themePublish($id: ID!) {\n      themePublish(id: $id) {\n        theme {\n          id\n        }\n        userErrors {\n          code\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/OnlineStoreTheme/908009861\"\n    },\n  },\n});\n"}, {"description": "Publish a theme", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation themePublish($id: ID!) {\n      themePublish(id: $id) {\n        theme {\n          id\n          name\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/OnlineStoreTheme/908009861\"\n    },\n  },\n});\n"}, {"description": "themePublish reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation themePublish($id: ID!) {\n      themePublish(id: $id) {\n        theme {\n          id\n        }\n        userErrors {\n          code\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/OnlineStoreTheme/908009861\"\n    },\n  },\n});\n"}]}, {"name": "themeUpdate", "description": "Updates a theme.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of the theme to be updated."}, {"name": "input", "type": "OnlineStoreThemeInput!", "required": false, "description": "The attributes of the theme to be updated."}], "returns": [], "examples": [{"description": "Update the name of a theme", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation themeUpdate($id: ID!, $input: OnlineStoreThemeInput!) {\n      themeUpdate(id: $id, input: $input) {\n        theme {\n          id\n          name\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/OnlineStoreTheme/908009861\",\n      \"input\": {\n        \"name\": \"Dawn - Summer Sale\"\n      }\n    },\n  },\n});\n"}, {"description": "themeUpdate reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation themeUpdate($id: ID!, $input: OnlineStoreThemeInput!) {\n      themeUpdate(id: $id, input: $input) {\n        theme {\n          id\n          name\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/OnlineStoreTheme/908009861\",\n      \"input\": {\n        \"name\": \"Dawn - Summer Sale\"\n      }\n    },\n  },\n});\n"}]}, {"name": "urlRedirectBulkDeleteAll", "description": "Asynchronously delete URL redirects in bulk.", "arguments": [], "returns": [], "examples": []}, {"name": "urlRedirectBulkDeleteByIds", "description": "Asynchronously delete URLRedirect \nobjects in bulk by IDs.\nLearn more about URLRedirect \nobjects.", "arguments": [{"name": "ids", "type": "[ID!]!", "required": false, "description": "A list of URLRedirect object IDs to delete."}], "returns": [], "examples": []}, {"name": "urlRedirectBulkDeleteBySavedSearch", "description": "Asynchronously delete redirects in bulk.", "arguments": [{"name": "savedSearchId", "type": "ID!", "required": false, "description": "The ID of the URL redirect saved search for filtering."}], "returns": [], "examples": []}, {"name": "urlRedirectBulkDeleteBySearch", "description": "Asynchronously delete redirects in bulk.", "arguments": [{"name": "search", "type": "String!", "required": false, "description": "Search query for filtering redirects on (both Redirect from and Redirect to fields)."}], "returns": [], "examples": []}, {"name": "urlRedirectCreate", "description": "Creates a UrlRedirect object.", "arguments": [{"name": "urlRedirect", "type": "UrlRedirectInput!", "required": false, "description": "The fields to use when creating the redirect."}], "returns": [], "examples": [{"description": "Creates a redirect", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation UrlRedirectCreate($urlRedirect: UrlRedirectInput!) {\n      urlRedirectCreate(urlRedirect: $urlRedirect) {\n        urlRedirect {\n          id\n          path\n          target\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"urlRedirect\": {\n        \"path\": \"/thepath\",\n        \"target\": \"/thetarget\"\n      }\n    },\n  },\n});\n"}, {"description": "urlRedirectCreate reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation UrlRedirectCreate($urlRedirect: UrlRedirectInput!) {\n      urlRedirectCreate(urlRedirect: $urlRedirect) {\n        urlRedirect {\n          id\n          path\n          target\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"urlRedirect\": {\n        \"path\": \"/thepath\",\n        \"target\": \"/thetarget\"\n      }\n    },\n  },\n});\n"}]}, {"name": "urlRedirectDelete", "description": "Deletes a UrlRedirect object.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of the redirect to delete."}], "returns": [], "examples": [{"description": "Deletes a redirect", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation UrlRedirectDelete($id: ID!) {\n      urlRedirectDelete(id: $id) {\n        deletedUrlRedirectId\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/UrlRedirect/905192165\"\n    },\n  },\n});\n"}, {"description": "urlRedirectDelete reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation UrlRedirectDelete($id: ID!) {\n      urlRedirectDelete(id: $id) {\n        deletedUrlRedirectId\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/UrlRedirect/905192165\"\n    },\n  },\n});\n"}]}, {"name": "urlRedirectImportCreate", "description": "Creates a UrlRedirectImport object.\nAfter creating the UrlRedirectImport object, the UrlRedirectImport request can be performed using the urlRedirectImportSubmit mutation.", "arguments": [{"name": "url", "type": "URL!", "required": false, "description": "The staged upload URL of the CSV file.\nYou can download a sample URL redirect CSV file."}], "returns": [], "examples": []}, {"name": "urlRedirectImportSubmit", "description": "Submits a UrlRedirectImport request to be processed.\nThe UrlRedirectImport request is first created with the urlRedirectImportCreate mutation.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of the UrlRedirectImport object."}], "returns": [], "examples": []}, {"name": "urlRedirectUpdate", "description": "Updates a URL redirect.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of the URL redirect to update."}, {"name": "urlRedirect", "type": "UrlRedirectInput!", "required": false, "description": "The input fields required to update the URL redirect."}], "returns": [], "examples": [{"description": "Updates an existing redirect", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation UrlRedirectUpdate($id: ID!, $urlRedirect: UrlRedirectInput!) {\n      urlRedirectUpdate(id: $id, urlRedirect: $urlRedirect) {\n        urlRedirect {\n          id\n          path\n          target\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/UrlRedirect/905192165\",\n      \"urlRedirect\": {\n        \"path\": \"/thepath\",\n        \"target\": \"/thetarget\"\n      }\n    },\n  },\n});\n"}, {"description": "urlRedirectUpdate reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation UrlRedirectUpdate($id: ID!, $urlRedirect: UrlRedirectInput!) {\n      urlRedirectUpdate(id: $id, urlRedirect: $urlRedirect) {\n        urlRedirect {\n          id\n          path\n          target\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/UrlRedirect/905192165\",\n      \"urlRedirect\": {\n        \"path\": \"/thepath\",\n        \"target\": \"/thetarget\"\n      }\n    },\n  },\n});\n"}]}], "objects": [{"name": "Article", "description": "An article in the blogging system.", "fields_and_connections": [{"name": "author", "type": "article", "description": "Returns an Article resource by ID.", "not_nullable": false}, {"name": "author", "type": "articles", "description": "List of the shop's articles.", "not_nullable": false}, {"name": "author", "type": "articleCreate", "description": "Creates an article.", "not_nullable": false}, {"name": "author", "type": "articleUpdate", "description": "Updates an article.", "not_nullable": false}, {"name": "author", "type": "HasEvents", "description": "The name of the author of the article.", "not_nullable": false}, {"name": "author", "type": "HasMetafieldDefinitions", "description": "The name of the author of the article.", "not_nullable": false}, {"name": "author", "type": "HasMetafields", "description": "The name of the author of the article.", "not_nullable": false}, {"name": "author", "type": "HasPublishedTranslations", "description": "The name of the author of the article.", "not_nullable": false}, {"name": "author", "type": "Navigable", "description": "The name of the author of the article.", "not_nullable": false}, {"name": "author", "type": "Node", "description": "The name of the author of the article.", "not_nullable": false}], "examples": []}, {"name": "ArticleAuthor", "description": "Represents an article author in an Article.", "fields_and_connections": [{"name": "name", "type": "articleAuthors", "description": "List of article authors for the shop.", "not_nullable": false}], "examples": []}, {"name": "Blog", "description": "Shopify stores come with a built-in blogging engine, allowing a shop to have one or more blogs.  Blogs are meant\nto be used as a type of magazine or newsletter for the shop, with content that changes over time.", "fields_and_connections": [{"name": "articles", "type": "blog", "description": "Returns a Blog resource by ID.", "not_nullable": false}, {"name": "articles", "type": "blogs", "description": "List of the shop's blogs.", "not_nullable": false}, {"name": "articles", "type": "blogCreate", "description": "Creates a blog.", "not_nullable": false}, {"name": "articles", "type": "blogUpdate", "description": "Updates a blog.", "not_nullable": false}, {"name": "articles", "type": "HasEvents", "description": "List of the blog's articles.", "not_nullable": false}, {"name": "articles", "type": "HasMetafieldDefinitions", "description": "List of the blog's articles.", "not_nullable": false}, {"name": "articles", "type": "HasMetafields", "description": "List of the blog's articles.", "not_nullable": false}, {"name": "articles", "type": "HasPublishedTranslations", "description": "List of the blog's articles.", "not_nullable": false}, {"name": "articles", "type": "Node", "description": "List of the blog's articles.", "not_nullable": false}], "examples": []}, {"name": "BlogFeed", "description": "FeedBurner provider details. Any blogs that aren't already integrated with FeedBurner can't use the service.", "fields_and_connections": [{"name": "location", "type": "URL!", "description": "Blog feed provider url.", "not_nullable": true}, {"name": "path", "type": "String!", "description": "Blog feed provider path.", "not_nullable": true}], "examples": []}, {"name": "Comment", "description": "A comment on an article.", "fields_and_connections": [{"name": "article", "type": "comment", "description": "Returns a Comment resource by ID.", "not_nullable": false}, {"name": "article", "type": "comments", "description": "List of the shop's comments.", "not_nullable": false}, {"name": "article", "type": "commentApprove", "description": "Approves a comment.", "not_nullable": false}, {"name": "article", "type": "commentNotSpam", "description": "Marks a comment as not spam.", "not_nullable": false}, {"name": "article", "type": "commentSpam", "description": "Marks a comment as spam.", "not_nullable": false}, {"name": "article", "type": "HasEvents", "description": "The article associated with the comment.", "not_nullable": false}, {"name": "article", "type": "Node", "description": "The article associated with the comment.", "not_nullable": false}], "examples": []}, {"name": "CommentAuthor", "description": "The author of a comment.", "fields_and_connections": [{"name": "email", "type": "String!", "description": "The author's email.", "not_nullable": true}, {"name": "name", "type": "String!", "description": "The author\u2019s name.", "not_nullable": true}], "examples": []}, {"name": "CustomerAccountAppExtensionPage", "description": "An app extension page for the customer account navigation menu.", "fields_and_connections": [{"name": "appExtensionUuid", "type": "CustomerAccountPage", "description": "The UUID of the app extension.", "not_nullable": false}, {"name": "appExtensionUuid", "type": "Navigable", "description": "The UUID of the app extension.", "not_nullable": false}, {"name": "appExtensionUuid", "type": "Node", "description": "The UUID of the app extension.", "not_nullable": false}], "examples": []}, {"name": "CustomerAccountNativePage", "description": "A native page for the customer account navigation menu.", "fields_and_connections": [{"name": "defaultCursor", "type": "CustomerAccountPage", "description": "A default cursor that returns the single next record, sorted ascending by ID.", "not_nullable": false}, {"name": "defaultCursor", "type": "Navigable", "description": "A default cursor that returns the single next record, sorted ascending by ID.", "not_nullable": false}, {"name": "defaultCursor", "type": "Node", "description": "A default cursor that returns the single next record, sorted ascending by ID.", "not_nullable": false}], "examples": []}, {"name": "MarketsThemesEntitlement", "description": "The entitlements for themes.", "fields_and_connections": [{"name": "enabled", "type": "Boolean!", "description": "Whether themes are enabled.", "not_nullable": true}], "examples": []}, {"name": "Menu", "description": "A menu for display on the storefront.", "fields_and_connections": [{"name": "handle", "type": "menu", "description": "Returns a Menu resource by ID.", "not_nullable": false}, {"name": "handle", "type": "menus", "description": "The shop's menus.", "not_nullable": false}, {"name": "handle", "type": "menuCreate", "description": "Creates a menu.", "not_nullable": false}, {"name": "handle", "type": "menuUpdate", "description": "Updates a menu.", "not_nullable": false}, {"name": "handle", "type": "HasPublishedTranslations", "description": "The menu's handle.", "not_nullable": false}, {"name": "handle", "type": "Node", "description": "The menu's handle.", "not_nullable": false}], "examples": []}, {"name": "MenuItem", "description": "A menu item for display on the storefront.", "fields_and_connections": [{"name": "id", "type": "ID!", "description": "A globally-unique ID of the navigation menu item.", "not_nullable": true}, {"name": "items", "type": "[MenuItem!]!", "description": "List of the menu items nested under this item sorted by position.", "not_nullable": true}, {"name": "resourceId", "type": "ID", "description": "The ID of the resource to link to.", "not_nullable": false}, {"name": "tags", "type": "[String!]!", "description": "The menu item's tags to filter a collection.", "not_nullable": true}, {"name": "title", "type": "String!", "description": "The menu item's title.", "not_nullable": true}, {"name": "type", "type": "MenuItemType!", "description": "The menu item's type.", "not_nullable": true}, {"name": "url", "type": "String", "description": "The menu item's url.", "not_nullable": false}], "examples": []}, {"name": "OnlineStore", "description": "The shop's online store channel.", "fields_and_connections": [{"name": "passwordProtection", "type": "onlineStore", "description": "The shop's online store channel.", "not_nullable": false}], "examples": []}, {"name": "OnlineStorePasswordProtection", "description": "Storefront password information.", "fields_and_connections": [{"name": "enabled", "type": "Boolean!", "description": "Whether the storefront password is enabled.", "not_nullable": true}], "examples": []}, {"name": "OnlineStoreTheme", "description": "A theme for display on the storefront.", "fields_and_connections": [{"name": "createdAt", "type": "theme", "description": "Returns a particular theme for the shop.", "not_nullable": false}, {"name": "createdAt", "type": "themes", "description": "Returns a paginated list of themes for the shop.", "not_nullable": false}, {"name": "createdAt", "type": "themeCreate", "description": "Creates a theme using an external URL or for files that were previously uploaded using the\nstagedUploadsCreate mutation.\nThese themes are added to the Themes page in Shopify admin.", "not_nullable": false}, {"name": "createdAt", "type": "themePublish", "description": "Publishes a theme.", "not_nullable": false}, {"name": "createdAt", "type": "themeUpdate", "description": "Updates a theme.", "not_nullable": false}, {"name": "createdAt", "type": "HasPublishedTranslations", "description": "The date and time when the theme was created.", "not_nullable": false}, {"name": "createdAt", "type": "Node", "description": "The date and time when the theme was created.", "not_nullable": false}], "examples": []}, {"name": "OnlineStoreThemeFile", "description": "Represents a theme file.", "fields_and_connections": [{"name": "body", "type": "OnlineStoreThemeFileBody!", "description": "The body of the theme file.", "not_nullable": true}, {"name": "checksumMd5", "type": "String", "description": "The md5 digest of the theme file for data integrity.", "not_nullable": false}, {"name": "contentType", "type": "String!", "description": "The content type of the theme file.", "not_nullable": true}, {"name": "createdAt", "type": "DateTime!", "description": "The date and time when the theme file was created.", "not_nullable": true}, {"name": "filename", "type": "String!", "description": "The unique identifier of the theme file.", "not_nullable": true}, {"name": "size", "type": "UnsignedInt64!", "description": "The size of the theme file in bytes.", "not_nullable": true}, {"name": "updatedAt", "type": "DateTime!", "description": "The date and time when the theme file was last updated.", "not_nullable": true}], "examples": []}, {"name": "OnlineStoreThemeFileBodyBase64", "description": "Represents the base64 encoded body of a theme file.", "fields_and_connections": [{"name": "contentBase64", "type": "String!", "description": "The body of the theme file, base64 encoded.", "not_nullable": true}], "examples": []}, {"name": "OnlineStoreThemeFileBodyText", "description": "Represents the body of a theme file.", "fields_and_connections": [{"name": "content", "type": "String!", "description": "The body of the theme file.", "not_nullable": true}], "examples": []}, {"name": "OnlineStoreThemeFileBodyUrl", "description": "Represents the url of the body of a theme file.", "fields_and_connections": [{"name": "url", "type": "URL!", "description": "The short lived url for the body of the theme file.", "not_nullable": true}], "examples": []}, {"name": "OnlineStoreThemeFileOperationResult", "description": "Represents the result of a copy, delete, or write operation performed on a theme file.", "fields_and_connections": [{"name": "checksumMd5", "type": "themeFilesCopy", "description": "Copy theme files. Copying to existing theme files will overwrite them.", "not_nullable": false}, {"name": "checksumMd5", "type": "themeFilesDelete", "description": "Deletes a theme's files.", "not_nullable": false}, {"name": "checksumMd5", "type": "themeFilesUpsert", "description": "Create or update theme files.", "not_nullable": false}], "examples": []}, {"name": "OnlineStoreThemeFileReadResult", "description": "Represents the result of a read operation performed on a theme asset.", "fields_and_connections": [{"name": "code", "type": "OnlineStoreThemeFileResultType!", "description": "Type that indicates the result of the operation.", "not_nullable": true}, {"name": "filename", "type": "String!", "description": "Unique identifier associated with the operation and the theme file.", "not_nullable": true}], "examples": []}, {"name": "OnlineStoreThemeFilesUserErrors", "description": "User errors for theme file operations.", "fields_and_connections": [{"name": "code", "type": "themeFilesCopy", "description": "Copy theme files. Copying to existing theme files will overwrite them.", "not_nullable": false}, {"name": "code", "type": "themeFilesDelete", "description": "Deletes a theme's files.", "not_nullable": false}, {"name": "code", "type": "themeFilesUpsert", "description": "Create or update theme files.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "Page", "description": "A page on the Online Store.", "fields_and_connections": [{"name": "body", "type": "page", "description": "Returns a Page resource by ID.", "not_nullable": false}, {"name": "body", "type": "pages", "description": "List of the shop's pages.", "not_nullable": false}, {"name": "body", "type": "pageCreate", "description": "Creates a page.", "not_nullable": false}, {"name": "body", "type": "pageUpdate", "description": "Updates a page.", "not_nullable": false}, {"name": "body", "type": "HasEvents", "description": "The text content of the page, complete with HTML markup.", "not_nullable": false}, {"name": "body", "type": "HasMetafieldDefinitions", "description": "The text content of the page, complete with HTML markup.", "not_nullable": false}, {"name": "body", "type": "HasMetafields", "description": "The text content of the page, complete with HTML markup.", "not_nullable": false}, {"name": "body", "type": "HasPublishedTranslations", "description": "The text content of the page, complete with HTML markup.", "not_nullable": false}, {"name": "body", "type": "Navigable", "description": "The text content of the page, complete with HTML markup.", "not_nullable": false}, {"name": "body", "type": "Node", "description": "The text content of the page, complete with HTML markup.", "not_nullable": false}], "examples": []}, {"name": "ScriptTag", "description": "Theme app extensions\n  Your app might not pass App Store review if it uses script tags instead of theme app extensions. All new apps, and apps that integrate with Online Store 2.0 themes, should use theme app extensions, such as app blocks or app embed blocks. Script tags are an alternative you can use with only vintage themes. Learn more.\n\nScript tag deprecation\n  Script tags will be sunset for the Order status page on August 28, 2025. Upgrade to Checkout Extensibility before this date. Shopify Scripts will continue to work alongside Checkout Extensibility until August 28, 2025.\n\n\nA script tag represents remote JavaScript code that is loaded into the pages of a shop's storefront or the Order status page of checkout.", "fields_and_connections": [{"name": "cache", "type": "scriptTag", "description": "Theme app extensions\nYour app might not pass App Store review if it uses script tags instead of theme app extensions. All new apps, and apps that integrate with Online Store 2.0 themes, should use theme app extensions, such as app blocks or app embed blocks. Script tags are an alternative you can use with only vintage themes. Learn more.\n\nScript tag deprecation\nScript tags will be sunset for the Order status page on August 28, 2025. Upgrade to Checkout Extensibility before this date. Shopify Scripts will continue to work alongside Checkout Extensibility until August 28, 2025.\n\n\nLookup a script tag resource by ID.", "not_nullable": false}, {"name": "cache", "type": "scriptTags", "description": "Theme app extensions\nYour app might not pass App Store review if it uses script tags instead of theme app extensions. All new apps, and apps that integrate with Online Store 2.0 themes, should use theme app extensions, such as app blocks or app embed blocks. Script tags are an alternative you can use with only vintage themes. Learn more.\n\nScript tag deprecation\nScript tags will be sunset for the Order status page on August 28, 2025. Upgrade to Checkout Extensibility before this date. Shopify Scripts will continue to work alongside Checkout Extensibility until August 28, 2025.\n\n\nA list of script tags.", "not_nullable": false}, {"name": "cache", "type": "scriptTagCreate", "description": "Theme app extensions\nYour app might not pass App Store review if it uses script tags instead of theme app extensions. All new apps, and apps that integrate with Online Store 2.0 themes, should use theme app extensions, such as app blocks or app embed blocks. Script tags are an alternative you can use with only vintage themes. Learn more.\n\nScript tag deprecation\nScript tags will be sunset for the Order status page on August 28, 2025. Upgrade to Checkout Extensibility before this date. Shopify Scripts will continue to work alongside Checkout Extensibility until August 28, 2025.\n\n\nCreates a new script tag.", "not_nullable": false}, {"name": "cache", "type": "scriptTagUpdate", "description": "Theme app extensions\nYour app might not pass App Store review if it uses script tags instead of theme app extensions. All new apps, and apps that integrate with Online Store 2.0 themes, should use theme app extensions, such as app blocks or app embed blocks. Script tags are an alternative you can use with only vintage themes. Learn more.\n\nScript tag deprecation\nScript tags will be sunset for the Order status page on August 28, 2025. Upgrade to Checkout Extensibility before this date. Shopify Scripts will continue to work alongside Checkout Extensibility until August 28, 2025.\n\n\nUpdates a script tag.", "not_nullable": false}, {"name": "cache", "type": "LegacyInteroperability", "description": "Whether the Shopify CDN can cache and serve the script tag.\nIf true, then the script will be cached and served by the CDN.\nThe cache expires 15 minutes after the script tag is successfully returned.\nIf false, then the script will be served as is.", "not_nullable": false}, {"name": "cache", "type": "Node", "description": "Whether the Shopify CDN can cache and serve the script tag.\nIf true, then the script will be cached and served by the CDN.\nThe cache expires 15 minutes after the script tag is successfully returned.\nIf false, then the script will be served as is.", "not_nullable": false}], "examples": []}, {"name": "SEO", "description": "SEO information.", "fields_and_connections": [{"name": "description", "type": "String", "description": "SEO Description.", "not_nullable": false}, {"name": "title", "type": "String", "description": "SEO Title.", "not_nullable": false}], "examples": []}, {"name": "UrlRedirect", "description": "The URL redirect for the online store.", "fields_and_connections": [{"name": "id", "type": "urlRedirect", "description": "Returns a redirect resource by ID.", "not_nullable": false}, {"name": "id", "type": "urlRedirects", "description": "A list of redirects for a shop.", "not_nullable": false}, {"name": "id", "type": "urlRedirectCreate", "description": "Creates a UrlRedirect object.", "not_nullable": false}, {"name": "id", "type": "urlRedirectUpdate", "description": "Updates a URL redirect.", "not_nullable": false}, {"name": "id", "type": "Node", "description": "The ID of the URL redirect.", "not_nullable": false}], "examples": []}, {"name": "UrlRedirectImport", "description": "A request to import a URLRedirect object\ninto the Online Store channel. Apps can use this to query the state of an UrlRedirectImport request.\nFor more information, see url-redirects.", "fields_and_connections": [{"name": "count", "type": "urlRedirectImport", "description": "Returns a redirect import resource by ID.", "not_nullable": false}, {"name": "count", "type": "urlRedirectImportCreate", "description": "Creates a UrlRedirectImport object.\nAfter creating the UrlRedirectImport object, the UrlRedirectImport request can be performed using the urlRedirectImportSubmit mutation.", "not_nullable": false}, {"name": "count", "type": "Node", "description": "The number of rows in the file.", "not_nullable": false}], "examples": []}, {"name": "UrlRedirectImportPreview", "description": "A preview of a URL redirect import row.", "fields_and_connections": [{"name": "path", "type": "String!", "description": "The old path to be redirected from. When the user visits this path, they will be redirected to the target location.", "not_nullable": true}, {"name": "target", "type": "String!", "description": "The target location where the user will be redirected to.", "not_nullable": true}], "examples": []}]}, {"name": "Orders", "queries": [{"name": "availableBackupRegions", "description": "The regions that can be used as the backup region of the shop.", "arguments": [], "returns": [{"name": "MarketRegion", "type": "[MarketRegion!]!", "description": "non-null"}, {"name": "MarketRegion", "type": "[MarketRegion!]!", "description": "non-null"}, {"name": "MarketRegion", "type": "[MarketRegion!]!", "description": "non-null"}], "examples": []}, {"name": "disputes", "description": "All disputes related to the Shop.", "arguments": [{"name": "after", "type": "String", "required": false, "description": "The elements that come after the specified cursor."}, {"name": "before", "type": "String", "required": false, "description": "The elements that come before the specified cursor."}, {"name": "first", "type": "Int", "required": false, "description": "The first n elements from the paginated list."}, {"name": "last", "type": "Int", "required": false, "description": "The last n elements from the paginated list."}, {"name": "query", "type": "String", "required": false, "description": "A filter made up of terms, connectives, modifiers, and comparators.\nYou can apply one or more filters to a query. Learn more about Shopify API search syntax."}, {"name": "reverse", "type": "Boolean", "required": false, "description": "Reverse the order of the underlying list."}], "returns": [], "examples": []}, {"name": "draftOrder", "description": "Returns a DraftOrder resource by ID.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of the DraftOrder to return."}], "returns": [], "examples": [{"description": "Get a draft order by ID", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `query {\n    draftOrder(id: \"gid://shopify/DraftOrder/276395349\") {\n      name\n    }\n  }`,\n});\n"}, {"description": "Get a list of draft orders by ID and GraphQL alias", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `query {\n    draftOrder1: draftOrder(id: \"gid://shopify/DraftOrder/276395349\") {\n      name\n    }\n    draftOrder2: draftOrder(id: \"gid://shopify/DraftOrder/221448317\") {\n      name\n    }\n  }`,\n});\n"}, {"description": "Get a list of line item names for a draft order", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `query {\n    draftOrder(id: \"gid://shopify/DraftOrder/276395349\") {\n      lineItems(first: 5) {\n        edges {\n          node {\n            name\n          }\n        }\n      }\n    }\n  }`,\n});\n"}, {"description": "Get a metafield attached to a draft order", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `query DraftOrderMetafield($namespace: String!, $key: String!, $ownerId: ID!) {\n      draftOrder(id: $ownerId) {\n        purchaseOrder: metafield(namespace: $namespace, key: $key) {\n          value\n        }\n      }\n    }`,\n    \"variables\": {\n      \"namespace\": \"my_fields\",\n      \"key\": \"purchase_order\",\n      \"ownerId\": \"gid://shopify/DraftOrder/276395349\"\n    },\n  },\n});\n"}, {"description": "Get metafields attached to a draft order", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `query DraftOrderMetafields($ownerId: ID!) {\n      draftOrder(id: $ownerId) {\n        metafields(first: 3) {\n          edges {\n            node {\n              namespace\n              key\n              value\n            }\n          }\n        }\n      }\n    }`,\n    \"variables\": {\n      \"ownerId\": \"gid://shopify/DraftOrder/276395349\"\n    },\n  },\n});\n"}, {"description": "Receive a single DraftOrder", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `query DraftOrder($id: ID!) {\n      draftOrder(id: $id) {\n        id\n        note2\n        email\n        taxesIncluded\n        currencyCode\n        invoiceSentAt\n        createdAt\n        updatedAt\n        taxExempt\n        completedAt\n        name\n        status\n        lineItems(first: 10) {\n          edges {\n            node {\n              id\n              variant {\n                id\n                title\n              }\n              product {\n                id\n              }\n              name\n              sku\n              vendor\n              quantity\n              requiresShipping\n              taxable\n              isGiftCard\n              fulfillmentService {\n                type\n              }\n              weight {\n                unit\n                value\n              }\n              taxLines {\n                title\n                source\n                rate\n                ratePercentage\n                priceSet {\n                  presentmentMoney {\n                    amount\n                    currencyCode\n                  }\n                  shopMoney {\n                    amount\n                    currencyCode\n                  }\n                }\n              }\n              appliedDiscount {\n                title\n                value\n                valueType\n              }\n              name\n              custom\n              id\n            }\n          }\n        }\n        shippingAddress {\n          firstName\n          address1\n          phone\n          city\n          zip\n          province\n          country\n          lastName\n          address2\n          company\n          latitude\n          longitude\n          name\n          country\n          countryCodeV2\n          provinceCode\n        }\n        billingAddress {\n          firstName\n          address1\n          phone\n          city\n          zip\n          province\n          country\n          lastName\n          address2\n          company\n          latitude\n          longitude\n          name\n          country\n          countryCodeV2\n          provinceCode\n        }\n        invoiceUrl\n        appliedDiscount {\n          title\n          value\n          valueType\n        }\n        order {\n          id\n          customAttributes {\n            key\n            value\n          }\n        }\n        shippingLine {\n          id\n          title\n          carrierIdentifier\n          custom\n          code\n          deliveryCategory\n          source\n          discountedPriceSet {\n            presentmentMoney {\n              amount\n              currencyCode\n            }\n            shopMoney {\n              amount\n              currencyCode\n            }\n          }\n        }\n        taxLines {\n          channelLiable\n          priceSet {\n            presentmentMoney {\n              amount\n              currencyCode\n            }\n            shopMoney {\n              amount\n              currencyCode\n            }\n          }\n          rate\n          ratePercentage\n          source\n          title\n        }\n        tags\n        customer {\n          id\n          email\n          smsMarketingConsent {\n            consentCollectedFrom\n            consentUpdatedAt\n            marketingOptInLevel\n            marketingState\n          }\n          emailMarketingConsent {\n            consentUpdatedAt\n            marketingOptInLevel\n            marketingState\n          }\n          createdAt\n          updatedAt\n          firstName\n          lastName\n          state\n          amountSpent {\n            amount\n            currencyCode\n          }\n          lastOrder {\n            id\n            name\n            currencyCode\n          }\n          note\n          verifiedEmail\n          multipassIdentifier\n          taxExempt\n          tags\n          phone\n          taxExemptions\n          defaultAddress {\n            id\n            firstName\n            lastName\n            company\n            address1\n            address2\n            city\n            province\n            country\n            zip\n            phone\n            name\n            provinceCode\n            countryCodeV2\n          }\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/DraftOrder/221448317\"\n    },\n  },\n});\n"}]}, {"name": "draftOrders", "description": "List of saved draft orders.", "arguments": [{"name": "after", "type": "String", "required": false, "description": "The elements that come after the specified cursor."}, {"name": "before", "type": "String", "required": false, "description": "The elements that come before the specified cursor."}, {"name": "first", "type": "Int", "required": false, "description": "The first n elements from the paginated list."}, {"name": "last", "type": "Int", "required": false, "description": "The last n elements from the paginated list."}, {"name": "query", "type": "String", "required": false, "description": "A filter made up of terms, connectives, modifiers, and comparators.\nYou can apply one or more filters to a query. Learn more about Shopify API search syntax."}, {"name": "reverse", "type": "Boolean", "required": false, "description": "Reverse the order of the underlying list."}, {"name": "savedSearchId", "type": "ID", "required": false, "description": "The ID of a saved search.\nThe search\u2019s query string is used as the query argument."}, {"name": "sortKey", "type": "DraftOrderSortKeys", "required": false, "description": "Sort the underlying list using a key. If your query is slow or returns an error, then try specifying a sort key that matches the field used in the search."}], "returns": [], "examples": [{"description": "Get the first 10 draft orders", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `query {\n    draftOrders(first: 10) {\n      edges {\n        node {\n          id\n        }\n      }\n    }\n  }`,\n});\n"}, {"description": "Get the first 10 draft orders with a status of 'OPEN'", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `query {\n    draftOrders(first: 10) {\n      edges {\n        node {\n          id\n        }\n      }\n    }\n  }`,\n});\n"}, {"description": "Get the first draft order for a given customer", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `query {\n    draftOrders(first: 1, query: \"customerId:544365967\") {\n      edges {\n        node {\n          id\n          status\n          customer {\n            firstName\n          }\n        }\n      }\n    }\n  }`,\n});\n"}, {"description": "Retrieves a list of draft orders", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `query DraftOrders {\n    draftOrders(first: 10) {\n      edges {\n        node {\n          id\n          note2\n          email\n          taxesIncluded\n          currencyCode\n          invoiceSentAt\n          createdAt\n          updatedAt\n          taxExempt\n          completedAt\n          name\n          status\n          lineItems(first: 10) {\n            edges {\n              node {\n                id\n                variant {\n                  id\n                  title\n                }\n                product {\n                  id\n                }\n                name\n                sku\n                vendor\n                quantity\n                requiresShipping\n                taxable\n                isGiftCard\n                fulfillmentService {\n                  type\n                }\n                weight {\n                  unit\n                  value\n                }\n                taxLines {\n                  title\n                  source\n                  rate\n                  ratePercentage\n                  priceSet {\n                    presentmentMoney {\n                      amount\n                      currencyCode\n                    }\n                    shopMoney {\n                      amount\n                      currencyCode\n                    }\n                  }\n                }\n                appliedDiscount {\n                  title\n                  value\n                  valueType\n                }\n                name\n                custom\n                id\n              }\n            }\n          }\n          shippingAddress {\n            firstName\n            address1\n            phone\n            city\n            zip\n            province\n            country\n            lastName\n            address2\n            company\n            latitude\n            longitude\n            name\n            country\n            countryCodeV2\n            provinceCode\n          }\n          billingAddress {\n            firstName\n            address1\n            phone\n            city\n            zip\n            province\n            country\n            lastName\n            address2\n            company\n            latitude\n            longitude\n            name\n            country\n            countryCodeV2\n            provinceCode\n          }\n          invoiceUrl\n          appliedDiscount {\n            title\n            value\n            valueType\n          }\n          order {\n            id\n            customAttributes {\n              key\n              value\n            }\n          }\n          shippingLine {\n            id\n            title\n            carrierIdentifier\n            custom\n            code\n            deliveryCategory\n            source\n            discountedPriceSet {\n              presentmentMoney {\n                amount\n                currencyCode\n              }\n              shopMoney {\n                amount\n                currencyCode\n              }\n            }\n          }\n          taxLines {\n            channelLiable\n            priceSet {\n              presentmentMoney {\n                amount\n                currencyCode\n              }\n              shopMoney {\n                amount\n                currencyCode\n              }\n            }\n            rate\n            ratePercentage\n            source\n            title\n          }\n          tags\n          totalPrice\n          subtotalPrice\n          totalTax\n          customer {\n            id\n            email\n            smsMarketingConsent {\n              consentCollectedFrom\n              consentUpdatedAt\n              marketingOptInLevel\n              marketingState\n            }\n            emailMarketingConsent {\n              consentUpdatedAt\n              marketingOptInLevel\n              marketingState\n            }\n            createdAt\n            updatedAt\n            firstName\n            lastName\n            state\n            amountSpent {\n              amount\n              currencyCode\n            }\n            lastOrder {\n              id\n              name\n              currencyCode\n            }\n            note\n            verifiedEmail\n            multipassIdentifier\n            taxExempt\n            tags\n            phone\n            taxExemptions\n            defaultAddress {\n              id\n              firstName\n              lastName\n              company\n              address1\n              address2\n              city\n              province\n              country\n              zip\n              phone\n              name\n              provinceCode\n              countryCodeV2\n            }\n          }\n        }\n      }\n    }\n  }`,\n});\n"}]}, {"name": "draftOrderSavedSearches", "description": "List of the shop's draft order saved searches.", "arguments": [{"name": "after", "type": "String", "required": false, "description": "The elements that come after the specified cursor."}, {"name": "before", "type": "String", "required": false, "description": "The elements that come before the specified cursor."}, {"name": "first", "type": "Int", "required": false, "description": "The first n elements from the paginated list."}, {"name": "last", "type": "Int", "required": false, "description": "The last n elements from the paginated list."}, {"name": "reverse", "type": "Boolean", "required": false, "description": "Reverse the order of the underlying list."}], "returns": [], "examples": []}, {"name": "draftOrderTag", "description": "Returns a DraftOrderTag resource by ID.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of the DraftOrderTag to return."}], "returns": [], "examples": []}, {"name": "order", "description": "Returns an Order resource by ID.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of the Order to return."}], "returns": [], "examples": [{"description": "Calculates a refund", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `query SuggestedRefund($id: ID!, $refundLineItems: [RefundLineItemInput!]) {\n      order(id: $id) {\n        id\n        suggestedRefund(refundLineItems: $refundLineItems) {\n          subtotalSet {\n            shopMoney {\n              amount\n              currencyCode\n            }\n            presentmentMoney {\n              amount\n              currencyCode\n            }\n          }\n          refundLineItems {\n            lineItem {\n              id\n            }\n            quantity\n          }\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/Order/469306983\",\n      \"refundLineItems\": [\n        {\n          \"lineItemId\": \"gid://shopify/LineItem/983004162\",\n          \"quantity\": 1\n        }\n      ]\n    },\n  },\n});\n"}, {"description": "Get a list of orders using their IDs and GraphQL aliases", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `query {\n    order1: order(id: \"gid://shopify/Order/148977776\") {\n      name\n    }\n    order2: order(id: \"gid://shopify/Order/1073459961\") {\n      name\n    }\n  }`,\n});\n"}, {"description": "Get a metafield attached to an order", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `query OrderMetafield($namespace: String!, $key: String!, $ownerId: ID!) {\n      order(id: $ownerId) {\n        purchaseOrder: metafield(namespace: $namespace, key: $key) {\n          value\n        }\n      }\n    }`,\n    \"variables\": {\n      \"namespace\": \"my_fields\",\n      \"key\": \"purchase_order\",\n      \"ownerId\": \"gid://shopify/Order/148977776\"\n    },\n  },\n});\n"}, {"description": "Get an order using the QueryRoot.node field and a GraphQL fragment", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `query SuggestedRefund($id: ID!, $refundLineItems: [RefundLineItemInput!]) {\n      order(id: $id) {\n        id\n        suggestedRefund(refundLineItems: $refundLineItems) {\n          subtotalSet {\n            shopMoney {\n              amount\n              currencyCode\n            }\n            presentmentMoney {\n              amount\n              currencyCode\n            }\n          }\n          refundLineItems {\n            lineItem {\n              id\n            }\n            quantity\n          }\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/Order/469306983\",\n      \"refundLineItems\": [\n        {\n          \"lineItemId\": \"gid://shopify/LineItem/983004162\",\n          \"quantity\": 1\n        }\n      ]\n    },\n  },\n});\n"}, {"description": "Get metafields attached to an order", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `query OrderMetafields($ownerId: ID!) {\n      order(id: $ownerId) {\n        metafields(first: 3) {\n          edges {\n            node {\n              namespace\n              key\n              value\n            }\n          }\n        }\n      }\n    }`,\n    \"variables\": {\n      \"ownerId\": \"gid://shopify/Order/148977776\"\n    },\n  },\n});\n"}, {"description": "Get pinned metafield definitions associated with an order", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `query OrderMetafieldDefinitions($ownerId: ID!, $first: Int, $pinnedStatus: MetafieldDefinitionPinnedStatus, $sortKey: MetafieldDefinitionSortKeys) {\n      order(id: $ownerId) {\n        metafieldDefinitions(first: $first, pinnedStatus: $pinnedStatus, sortKey: $sortKey) {\n          edges {\n            node {\n              name\n              namespace\n              key\n              type {\n                name\n              }\n            }\n          }\n        }\n      }\n    }`,\n    \"variables\": {\n      \"pinnedStatus\": \"PINNED\",\n      \"ownerId\": \"gid://shopify/Order/148977776\",\n      \"first\": 10,\n      \"sortKey\": \"PINNED_POSITION\"\n    },\n  },\n});\n"}, {"description": "Get sales agreements for an order", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `query {\n    order(id: \"gid://shopify/Order/816964372\") {\n      agreements(first: 10) {\n        edges {\n          node {\n            id\n            happenedAt\n            sales(first: 10) {\n              edges {\n                node {\n                  actionType\n                  lineType\n                  quantity\n                  totalAmount {\n                    shopMoney {\n                      amount\n                    }\n                  }\n                  ... on ProductSale {\n                    lineItem {\n                      id\n                      name\n                    }\n                  }\n                  ... on ShippingLineSale {\n                    shippingLine {\n                      id\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }`,\n});\n"}, {"description": "Get sales agreements for order edits", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `query {\n    order(id: \"gid://shopify/Order/116757651\") {\n      agreements(first: 10) {\n        edges {\n          node {\n            id\n            happenedAt\n            sales(first: 10) {\n              edges {\n                node {\n                  actionType\n                  lineType\n                  quantity\n                  totalAmount {\n                    shopMoney {\n                      amount\n                    }\n                  }\n                  ... on ProductSale {\n                    lineItem {\n                      id\n                      name\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }`,\n});\n"}, {"description": "Get shipping lines for an order", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `query shippingLinesByOrder($id: ID!) {\n      order(id: $id) {\n        shippingLines(first: 10, includeRemovals: true) {\n          edges {\n            node {\n              id\n              title\n              isRemoved\n            }\n          }\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/Order/816964372\"\n    },\n  },\n});\n"}, {"description": "Preview a full duty refund", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `query suggestedRefund {\n    order(id: \"gid://shopify/Order/469306983\") {\n      suggestedRefund(refundDuties: [{dutyId: \"gid://shopify/Duty/1064114503\", refundType: FULL}]) {\n        refundDuties {\n          amountSet {\n            shopMoney {\n              amount\n              currencyCode\n            }\n          }\n          originalDuty {\n            id\n          }\n        }\n        totalDutiesSet {\n          shopMoney {\n            amount\n            currencyCode\n          }\n        }\n      }\n    }\n  }`,\n});\n"}, {"description": "Retrieve a specific order", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `query {\n    order(id: \"gid://shopify/Order/148977776\") {\n      id\n      name\n      totalPriceSet {\n        presentmentMoney {\n          amount\n        }\n      }\n      lineItems(first: 10) {\n        nodes {\n          id\n          name\n        }\n      }\n    }\n  }`,\n});\n"}, {"description": "Retrieve duties applied to an order", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `query {\n    order(id: \"gid://shopify/Order/469306983\") {\n      currentTotalDutiesSet {\n        shopMoney {\n          amount\n        }\n      }\n      lineItems(first: 10) {\n        edges {\n          node {\n            id\n            name\n            refundableQuantity\n            duties {\n              id\n              harmonizedSystemCode\n              price {\n                shopMoney {\n                  amount\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }`,\n});\n"}, {"description": "Retrieves a count of fulfillments associated with a specific order", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `query FulfillmentsCount($orderId: ID!) {\n      order(id: $orderId) {\n        fulfillmentsCount {\n          count\n        }\n      }\n    }`,\n    \"variables\": {\n      \"orderId\": \"gid://shopify/Order/148977776\"\n    },\n  },\n});\n"}, {"description": "Retrieves a list of all order risks for an order", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `query OrderRiskAssessmentsList($orderId: ID!) {\n      order(id: $orderId) {\n        risk {\n          assessments {\n            riskLevel\n            provider {\n              title\n            }\n            facts {\n              description\n              sentiment\n            }\n          }\n          recommendation\n        }\n      }\n    }`,\n    \"variables\": {\n      \"orderId\": \"gid://shopify/Order/647667644\"\n    },\n  },\n});\n"}, {"description": "Retrieves a list of refunds for an order", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `query RefundList($orderId: ID!) {\n      order(id: $orderId) {\n        refunds(first: 10) {\n          id\n          note\n          totalRefundedSet {\n            presentmentMoney {\n              amount\n              currencyCode\n            }\n          }\n        }\n      }\n    }`,\n    \"variables\": {\n      \"orderId\": \"gid://shopify/Order/647667644\"\n    },\n  },\n});\n"}, {"description": "Retrieves a list of transactions", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `query TransactionsForOrder($orderId: ID!) {\n      order(id: $orderId) {\n        transactions(first: 10) {\n          accountNumber\n          amountSet {\n            presentmentMoney {\n              amount\n              currencyCode\n            }\n            shopMoney {\n              amount\n              currencyCode\n            }\n          }\n          authorizationCode\n          authorizationExpiresAt\n          createdAt\n          errorCode\n          fees {\n            amount {\n              amount\n              currencyCode\n            }\n          }\n          formattedGateway\n          gateway\n          id\n          kind\n          manuallyCapturable\n          maximumRefundableV2 {\n            amount\n            currencyCode\n          }\n          multiCapturable\n          order {\n            id\n          }\n          parentTransaction {\n            id\n          }\n          paymentDetails {\n            ... on CardPaymentDetails {\n              paymentMethodName\n            }\n            ... on ShopPayInstallmentsPaymentDetails {\n              paymentMethodName\n            }\n          }\n          paymentIcon {\n            url\n          }\n          paymentId\n          processedAt\n          receiptJson\n          settlementCurrency\n          shopifyPaymentsSet {\n            refundSet {\n              acquirerReferenceNumber\n            }\n          }\n          status\n          test\n          totalUnsettledSet {\n            presentmentMoney {\n              amount\n              currencyCode\n            }\n            shopMoney {\n              amount\n              currencyCode\n            }\n          }\n          user {\n            id\n          }\n        }\n      }\n    }`,\n    \"variables\": {\n      \"orderId\": \"gid://shopify/Order/148977776\"\n    },\n  },\n});\n"}, {"description": "Retrieves fulfillments associated with an order", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `query FulfillmentList($orderId: ID!) {\n      order(id: $orderId) {\n        fulfillments(first: 10) {\n          fulfillmentLineItems(first: 10) {\n            edges {\n              node {\n                id\n                lineItem {\n                  title\n                  variant {\n                    id\n                  }\n                }\n                quantity\n                originalTotalSet {\n                  shopMoney {\n                    amount\n                    currencyCode\n                  }\n                }\n              }\n            }\n          }\n          status\n          estimatedDeliveryAt\n          location {\n            id\n            legacyResourceId\n          }\n          service {\n            handle\n          }\n          trackingInfo(first: 10) {\n            company\n            number\n            url\n          }\n          originAddress {\n            address1\n            address2\n            city\n            countryCode\n            provinceCode\n            zip\n          }\n        }\n      }\n    }`,\n    \"variables\": {\n      \"orderId\": \"gid://shopify/Order/148977776\"\n    },\n  },\n});\n"}, {"description": "Retrieves tax related information for a given order", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `query {\n    order(id: \"gid://shopify/Order/53613399\") {\n      id\n      createdAt\n      currencyCode\n      currentSubtotalPriceSet {\n        shopMoney {\n          amount\n          currencyCode\n        }\n      }\n      currentTotalPriceSet {\n        shopMoney {\n          amount\n          currencyCode\n        }\n      }\n      currentTotalTaxSet {\n        shopMoney {\n          amount\n          currencyCode\n        }\n      }\n      name\n      subtotalPriceSet {\n        shopMoney {\n          amount\n          currencyCode\n        }\n      }\n      taxExempt\n      taxLines {\n        rate\n        title\n        priceSet {\n          shopMoney {\n            amount\n            currencyCode\n          }\n        }\n      }\n      taxesIncluded\n      subtotalPriceSet {\n        shopMoney {\n          amount\n          currencyCode\n        }\n      }\n      totalPriceSet {\n        shopMoney {\n          amount\n          currencyCode\n        }\n      }\n      totalShippingPriceSet {\n        shopMoney {\n          amount\n          currencyCode\n        }\n      }\n      totalTaxSet {\n        shopMoney {\n          amount\n          currencyCode\n        }\n      }\n      updatedAt\n      lineItems(first: 250) {\n        nodes {\n          unfulfilledQuantity\n          fulfillmentService {\n            serviceName\n          }\n          fulfillmentStatus\n          variant {\n            id\n            title\n          }\n          id\n          originalUnitPriceSet {\n            shopMoney {\n              amount\n              currencyCode\n            }\n          }\n          quantity\n          requiresShipping\n          sku\n          title\n          name\n          vendor\n          customAttributes {\n            key\n            value\n          }\n          taxable\n          taxLines {\n            rate\n            title\n            channelLiable\n            priceSet {\n              shopMoney {\n                amount\n                currencyCode\n              }\n            }\n          }\n        }\n      }\n      shippingAddress {\n        address1\n        address2\n        city\n        country\n        phone\n        province\n        zip\n        provinceCode\n        countryCodeV2\n      }\n      shippingLines(first: 50) {\n        nodes {\n          code\n          originalPriceSet {\n            shopMoney {\n              amount\n              currencyCode\n            }\n          }\n          taxLines {\n            rate\n            title\n            priceSet {\n              shopMoney {\n                amount\n                currencyCode\n              }\n            }\n          }\n        }\n      }\n    }\n  }`,\n});\n"}]}, {"name": "orderByIdentifier", "description": "Return an order by an identifier.", "arguments": [{"name": "identifier", "type": "OrderIdentifierInput!", "required": false, "description": "The identifier of the order."}], "returns": [], "examples": []}, {"name": "orders", "description": "Returns a list of orders placed in the store, including data such as order status, customer, and line item details.\nUse the orders query to build reports, analyze sales performance, or automate fulfillment workflows. The orders query supports pagination,\nsorting, and filtering.", "arguments": [{"name": "after", "type": "String", "required": false, "description": "The elements that come after the specified cursor."}, {"name": "before", "type": "String", "required": false, "description": "The elements that come before the specified cursor."}, {"name": "first", "type": "Int", "required": false, "description": "The first n elements from the paginated list."}, {"name": "last", "type": "Int", "required": false, "description": "The last n elements from the paginated list."}, {"name": "query", "type": "String", "required": false, "description": "A filter made up of terms, connectives, modifiers, and comparators.\nYou can apply one or more filters to a query. Learn more about Shopify API search syntax."}, {"name": "reverse", "type": "Boolean", "required": false, "description": "Reverse the order of the underlying list."}, {"name": "savedSearchId", "type": "ID", "required": false, "description": "The ID of a saved search.\nThe search\u2019s query string is used as the query argument."}, {"name": "sortKey", "type": "OrderSortKeys", "required": false, "description": "Sort the underlying list using a key. If your query is slow or returns an error, then try specifying a sort key that matches the field used in the search."}], "returns": [], "examples": [{"description": "Retrieve a list of orders", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `query {\n    orders(first: 10) {\n      edges {\n        cursor\n        node {\n          id\n        }\n      }\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n    }\n  }`,\n});\n"}, {"description": "Retrieve a list of orders using their IDs and GraphQL aliases", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `query {\n    order1: order(id: \"gid://shopify/Order/148977776\") {\n      name\n    }\n    order2: order(id: \"gid://shopify/Order/1073459961\") {\n      name\n    }\n  }`,\n});\n"}, {"description": "Retrieve specific order details", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `query {\n    orders(first: 5) {\n      edges {\n        node {\n          id\n          name\n          createdAt\n          displayFinancialStatus\n          displayFulfillmentStatus\n          totalPriceSet {\n            shopMoney {\n              amount\n              currencyCode\n            }\n          }\n          subtotalPriceSet {\n            shopMoney {\n              amount\n              currencyCode\n            }\n          }\n          email\n          shippingAddress {\n            address1\n            city\n            provinceCode\n            zip\n          }\n          lineItems(first: 5) {\n            edges {\n              node {\n                name\n                quantity\n                sku\n                variant {\n                  id\n                  title\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }`,\n});\n"}, {"description": "Retrieve the first 10 orders with authorized payments", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `query {\n    orders(first: 10, query: \"financial_status:authorized\") {\n      edges {\n        node {\n          id\n          displayFinancialStatus\n        }\n      }\n    }\n  }`,\n});\n"}]}, {"name": "orderSavedSearches", "description": "List of the shop's order saved searches.", "arguments": [{"name": "after", "type": "String", "required": false, "description": "The elements that come after the specified cursor."}, {"name": "before", "type": "String", "required": false, "description": "The elements that come before the specified cursor."}, {"name": "first", "type": "Int", "required": false, "description": "The first n elements from the paginated list."}, {"name": "last", "type": "Int", "required": false, "description": "The last n elements from the paginated list."}, {"name": "reverse", "type": "Boolean", "required": false, "description": "Reverse the order of the underlying list."}], "returns": [], "examples": []}, {"name": "ordersCount", "description": "Returns the count of orders for the given shop. Limited to a maximum of 10000.", "arguments": [{"name": "limit", "type": "Int", "required": false, "description": "The upper bound on count value before returning a result."}, {"name": "query", "type": "String", "required": false, "description": "A filter made up of terms, connectives, modifiers, and comparators.\nYou can apply one or more filters to a query. Learn more about Shopify API search syntax."}, {"name": "savedSearchId", "type": "ID", "required": false, "description": "The ID of an existing saved search.\nThe search\u2019s query string is used as the query argument.\nRefer to the SavedSearch object."}], "returns": [], "examples": []}, {"name": "pendingOrdersCount", "description": "The number of pendings orders. Limited to a maximum of 10000.", "arguments": [], "returns": [{"name": "Count", "type": "Count", "description": "non-null"}, {"name": "Count", "type": "Count", "description": "non-null"}, {"name": "Count", "type": "Count", "description": "non-null"}], "examples": []}, {"name": "productTags", "description": "A list of tags that have been added to products.\nThe maximum page size is 5000.", "arguments": [{"name": "after", "type": "String", "required": false, "description": "The elements that come after the specified cursor."}, {"name": "before", "type": "String", "required": false, "description": "The elements that come before the specified cursor."}, {"name": "first", "type": "Int", "required": false, "description": "The first n elements from the paginated list."}, {"name": "last", "type": "Int", "required": false, "description": "The last n elements from the paginated list."}, {"name": "reverse", "type": "Boolean", "required": false, "description": "Reverse the order of the underlying list."}], "returns": [], "examples": []}, {"name": "productTypes", "description": "The list of types added to products.\nThe maximum page size is 1000.", "arguments": [{"name": "after", "type": "String", "required": false, "description": "The elements that come after the specified cursor."}, {"name": "before", "type": "String", "required": false, "description": "The elements that come before the specified cursor."}, {"name": "first", "type": "Int", "required": false, "description": "The first n elements from the paginated list."}, {"name": "last", "type": "Int", "required": false, "description": "The last n elements from the paginated list."}, {"name": "reverse", "type": "Boolean", "required": false, "description": "Reverse the order of the underlying list."}], "returns": [], "examples": []}, {"name": "productVendors", "description": "The list of vendors added to products.\nThe maximum page size is 1000.", "arguments": [{"name": "after", "type": "String", "required": false, "description": "The elements that come after the specified cursor."}, {"name": "before", "type": "String", "required": false, "description": "The elements that come before the specified cursor."}, {"name": "first", "type": "Int", "required": false, "description": "The first n elements from the paginated list."}, {"name": "last", "type": "Int", "required": false, "description": "The last n elements from the paginated list."}, {"name": "reverse", "type": "Boolean", "required": false, "description": "Reverse the order of the underlying list."}], "returns": [], "examples": []}, {"name": "publishedProductsCount", "description": "Returns a count of published products by publication ID.", "arguments": [{"name": "publicationId", "type": "ID!", "required": false, "description": "The ID of the publication that the products are published to."}], "returns": [], "examples": []}, {"name": "refund", "description": "Returns a Refund resource by ID.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of the Refund to return."}], "returns": [], "examples": [{"description": "Get refund duties", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `query refund($input: ID!) {\n      refund(id: $input) {\n        duties {\n          originalDuty {\n            countryCodeOfOrigin\n          }\n          amountSet {\n            shopMoney {\n              amount\n            }\n          }\n        }\n      }\n    }`,\n    \"variables\": {\n      \"input\": \"gid://shopify/Refund/850600470\"\n    },\n  },\n});\n"}, {"description": "Get the total refunded amount", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `query refund($input: ID!) {\n      refund(id: $input) {\n        totalRefundedSet {\n          shopMoney {\n            amount\n            currencyCode\n          }\n        }\n      }\n    }`,\n    \"variables\": {\n      \"input\": \"gid://shopify/Refund/196417871\"\n    },\n  },\n});\n"}, {"description": "Retrieves a specific refund", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `query RefundShow($id: ID!) {\n      refund(id: $id) {\n        id\n        note\n        totalRefundedSet {\n          presentmentMoney {\n            amount\n            currencyCode\n          }\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/Refund/196417871\"\n    },\n  },\n});\n"}]}, {"name": "return", "description": "Returns a Return resource by ID.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of the Return to return."}], "returns": [], "examples": [{"description": "Get status and return line items for a return", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `query {\n    return(id: \"gid://shopify/Return/945000954\") {\n      status\n      name\n      order {\n        id\n      }\n      returnLineItems(first: 10) {\n        edges {\n          node {\n            ... on ReturnLineItem {\n              fulfillmentLineItem {\n                lineItem {\n                  name\n                }\n              }\n              totalWeight {\n                value\n              }\n            }\n            quantity\n            returnReason\n            returnReasonNote\n          }\n        }\n      }\n    }\n  }`,\n});\n"}]}, {"name": "returnableFulfillment", "description": "Lookup a returnable fulfillment by ID.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of the ReturnableFulfillment to return."}], "returns": [], "examples": []}, {"name": "returnableFulfillments", "description": "List of returnable fulfillments.", "arguments": [{"name": "after", "type": "String", "required": false, "description": "The elements that come after the specified cursor."}, {"name": "before", "type": "String", "required": false, "description": "The elements that come before the specified cursor."}, {"name": "first", "type": "Int", "required": false, "description": "The first n elements from the paginated list."}, {"name": "last", "type": "Int", "required": false, "description": "The last n elements from the paginated list."}, {"name": "orderId", "type": "ID!", "required": false, "description": "Order ID that will scope all returnable fulfillments."}, {"name": "reverse", "type": "Boolean", "required": false, "description": "Reverse the order of the underlying list."}], "returns": [], "examples": []}, {"name": "returnCalculate", "description": "The calculated monetary value to be exchanged due to the return.", "arguments": [{"name": "input", "type": "CalculateReturnInput!", "required": false, "description": "The input fields for calculating a return."}], "returns": [], "examples": []}, {"name": "reverseDelivery", "description": "Lookup a reverse delivery by ID.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of the ReverseDelivery to return."}], "returns": [], "examples": []}, {"name": "reverseFulfillmentOrder", "description": "Lookup a reverse fulfillment order by ID.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of the reverse fulfillment order to return."}], "returns": [], "examples": []}, {"name": "subscriptionBillingAttempt", "description": "Returns a SubscriptionBillingAttempt by ID.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of the SubscriptionBillingAttempt to return."}], "returns": [], "examples": [{"description": "Query for a billing attempt with a processing error", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `query findBillingAttempt($subscriptionBillingAttempt: ID!) {\n      subscriptionBillingAttempt(id: $subscriptionBillingAttempt) {\n        id\n        nextActionUrl\n        idempotencyKey\n        ready\n        order {\n          id\n        }\n        subscriptionContract {\n          id\n        }\n        processingError {\n          __typename\n          code\n          message\n          ... on SubscriptionBillingAttemptInsufficientStockProductVariantsError {\n            insufficientStockProductVariants(first: 3) {\n              edges {\n                node {\n                  id\n                  title\n                }\n              }\n            }\n          }\n        }\n      }\n    }`,\n    \"variables\": {\n      \"subscriptionBillingAttempt\": \"gid://shopify/SubscriptionBillingAttempt/693432113\"\n    },\n  },\n});\n"}, {"description": "Query for a subscription billing attempt", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `query findBillingAttempt($subscriptionBillingAttempt: ID!) {\n      subscriptionBillingAttempt(id: $subscriptionBillingAttempt) {\n        id\n        nextActionUrl\n        idempotencyKey\n        ready\n        order {\n          id\n        }\n        subscriptionContract {\n          id\n        }\n        errorMessage\n        errorCode\n      }\n    }`,\n    \"variables\": {\n      \"subscriptionBillingAttempt\": \"gid://shopify/SubscriptionBillingAttempt/693432112\"\n    },\n  },\n});\n"}]}, {"name": "subscriptionBillingAttempts", "description": "Returns subscription billing attempts on a store.", "arguments": [{"name": "after", "type": "String", "required": false, "description": "The elements that come after the specified cursor."}, {"name": "before", "type": "String", "required": false, "description": "The elements that come before the specified cursor."}, {"name": "first", "type": "Int", "required": false, "description": "The first n elements from the paginated list."}, {"name": "last", "type": "Int", "required": false, "description": "The last n elements from the paginated list."}, {"name": "query", "type": "String", "required": false, "description": "A filter made up of terms, connectives, modifiers, and comparators.\nYou can apply one or more filters to a query. Learn more about Shopify API search syntax."}, {"name": "reverse", "type": "Boolean", "required": false, "description": "Reverse the order of the underlying list."}, {"name": "sortKey", "type": "SubscriptionBillingAttemptsSortKeys", "required": false, "description": "Sort the underlying list using a key. If your query is slow or returns an error, then try specifying a sort key that matches the field used in the search."}], "returns": [], "examples": []}, {"name": "subscriptionBillingCycle", "description": "Returns a subscription billing cycle found either by cycle index or date.", "arguments": [{"name": "billingCycleInput", "type": "SubscriptionBillingCycleInput!", "required": false, "description": "Input object used to select and use billing cycles."}], "returns": [], "examples": [{"description": "Get a billing cycle by cycle index", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `query subscriptionBillingCycle($contractId: ID!, $index: Int!) {\n      subscriptionBillingCycle(billingCycleInput: {contractId: $contractId, selector: {index: $index}}) {\n        billingAttemptExpectedDate\n      }\n    }`,\n    \"variables\": {\n      \"contractId\": \"gid://shopify/SubscriptionContract/593791907\",\n      \"index\": 1\n    },\n  },\n});\n"}, {"description": "Get a billing cycle by date", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `query subscriptionBillingCycle($contractId: ID!, $date: DateTime!) {\n      subscriptionBillingCycle(billingCycleInput: {contractId: $contractId, selector: {date: $date}}) {\n        billingAttemptExpectedDate\n      }\n    }`,\n    \"variables\": {\n      \"contractId\": \"gid://shopify/SubscriptionContract/593791907\",\n      \"date\": \"2022-12-01T00:00:00Z\"\n    },\n  },\n});\n"}]}, {"name": "subscriptionBillingCycleBulkResults", "description": "Retrieves the results of the asynchronous job for the subscription billing cycle bulk action based on the specified job ID.\nThis query can be used to obtain the billing cycles that match the criteria defined in the subscriptionBillingCycleBulkSearch and subscriptionBillingCycleBulkCharge mutations.", "arguments": [{"name": "after", "type": "String", "required": false, "description": "The elements that come after the specified cursor."}, {"name": "before", "type": "String", "required": false, "description": "The elements that come before the specified cursor."}, {"name": "first", "type": "Int", "required": false, "description": "The first n elements from the paginated list."}, {"name": "jobId", "type": "ID!", "required": false, "description": "The ID of the billing cycle bulk operation job."}, {"name": "last", "type": "Int", "required": false, "description": "The last n elements from the paginated list."}, {"name": "reverse", "type": "Boolean", "required": false, "description": "Reverse the order of the underlying list."}], "returns": [], "examples": []}, {"name": "subscriptionBillingCycles", "description": "Returns subscription billing cycles for a contract ID.", "arguments": [{"name": "after", "type": "String", "required": false, "description": "The elements that come after the specified cursor."}, {"name": "before", "type": "String", "required": false, "description": "The elements that come before the specified cursor."}, {"name": "billingCyclesDateRangeSelector", "type": "SubscriptionBillingCyclesDateRangeSelector", "required": false, "description": "Select subscription billing cycles within a date range."}, {"name": "billingCyclesIndexRangeSelector", "type": "SubscriptionBillingCyclesIndexRangeSelector", "required": false, "description": "Select subscription billing cycles within an index range."}, {"name": "contractId", "type": "ID!", "required": false, "description": "The ID of the subscription contract to retrieve billing cycles for."}, {"name": "first", "type": "Int", "required": false, "description": "The first n elements from the paginated list."}, {"name": "last", "type": "Int", "required": false, "description": "The last n elements from the paginated list."}, {"name": "reverse", "type": "Boolean", "required": false, "description": "Reverse the order of the underlying list."}, {"name": "sortKey", "type": "SubscriptionBillingCyclesSortKeys", "required": false, "description": "Sort the underlying list using a key. If your query is slow or returns an error, then try specifying a sort key that matches the field used in the search."}], "returns": [], "examples": [{"description": "Get the billing cycles between specific dates", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `query subscriptionBillingCycles($contractId: ID!) {\n      subscriptionBillingCycles(first: 10, contractId: $contractId, billingCyclesDateRangeSelector: {startDate: \"2022-12-15T00:00:00Z\", endDate: \"2023-02-15T00:00:00Z\"}) {\n        edges {\n          node {\n            billingAttemptExpectedDate\n          }\n        }\n      }\n    }`,\n    \"variables\": {\n      \"contractId\": \"gid://shopify/SubscriptionContract/593791907\"\n    },\n  },\n});\n"}, {"description": "Get the billing cycles between specific indexes", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `query subscriptionBillingCycles($contractId: ID!) {\n      subscriptionBillingCycles(first: 10, contractId: $contractId, billingCyclesIndexRangeSelector: {startIndex: 1, endIndex: 3}) {\n        edges {\n          node {\n            billingAttemptExpectedDate\n          }\n        }\n      }\n    }`,\n    \"variables\": {\n      \"contractId\": \"gid://shopify/SubscriptionContract/593791907\"\n    },\n  },\n});\n"}]}, {"name": "subscriptionContract", "description": "Returns a Subscription Contract resource by ID.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of the Subscription Contract to return."}], "returns": [], "examples": []}, {"name": "subscriptionContracts", "description": "List Subscription Contracts.", "arguments": [{"name": "after", "type": "String", "required": false, "description": "The elements that come after the specified cursor."}, {"name": "before", "type": "String", "required": false, "description": "The elements that come before the specified cursor."}, {"name": "first", "type": "Int", "required": false, "description": "The first n elements from the paginated list."}, {"name": "last", "type": "Int", "required": false, "description": "The last n elements from the paginated list."}, {"name": "query", "type": "String", "required": false, "description": "A filter made up of terms, connectives, modifiers, and comparators.\nYou can apply one or more filters to a query. Learn more about Shopify API search syntax."}, {"name": "reverse", "type": "Boolean", "required": false, "description": "Reverse the order of the underlying list."}, {"name": "sortKey", "type": "SubscriptionContractsSortKeys", "required": false, "description": "Sort the underlying list using a key. If your query is slow or returns an error, then try specifying a sort key that matches the field used in the search."}], "returns": [], "examples": []}, {"name": "subscriptionDraft", "description": "Returns a Subscription Draft resource by ID.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of the Subscription Draft to return."}], "returns": [], "examples": []}, {"name": "tenderTransactions", "description": "Returns a list of TenderTransactions associated with the shop.", "arguments": [{"name": "after", "type": "String", "required": false, "description": "The elements that come after the specified cursor."}, {"name": "before", "type": "String", "required": false, "description": "The elements that come before the specified cursor."}, {"name": "first", "type": "Int", "required": false, "description": "The first n elements from the paginated list."}, {"name": "last", "type": "Int", "required": false, "description": "The last n elements from the paginated list."}, {"name": "query", "type": "String", "required": false, "description": "A filter made up of terms, connectives, modifiers, and comparators.\nYou can apply one or more filters to a query. Learn more about Shopify API search syntax."}, {"name": "reverse", "type": "Boolean", "required": false, "description": "Reverse the order of the underlying list."}], "returns": [], "examples": []}], "mutations": [{"name": "delegateAccessTokenDestroy", "description": "Destroys a delegate access token.", "arguments": [{"name": "accessToken", "type": "String!", "required": false, "description": "Provides the delegate access token to destroy."}], "returns": [], "examples": []}, {"name": "deliveryProfileRemove", "description": "Enqueue the removal of a delivery profile.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of the delivery profile to remove."}], "returns": [], "examples": []}, {"name": "deliveryShippingOriginAssign", "description": "Assigns a location as the shipping origin while using legacy compatibility mode for multi-location delivery profiles.", "arguments": [{"name": "locationId", "type": "ID!", "required": false, "description": "The ID of the location to assign as the shipping origin."}], "returns": [], "examples": []}, {"name": "draftOrderBulkAddTags", "description": "Adds tags to multiple draft orders.", "arguments": [{"name": "ids", "type": "[ID!]", "required": false, "description": "The IDs of the draft orders to add tags to."}, {"name": "savedSearchId", "type": "ID", "required": false, "description": "The ID of the draft order saved search for filtering draft orders on."}, {"name": "search", "type": "String", "required": false, "description": "The conditions for filtering draft orders on.\nSee the detailed search syntax."}, {"name": "tags", "type": "[String!]!", "required": false, "description": "List of tags to be added."}], "returns": [], "examples": []}, {"name": "draftOrderBulkDelete", "description": "Deletes multiple draft orders.", "arguments": [{"name": "ids", "type": "[ID!]", "required": false, "description": "The IDs of the draft orders to delete."}, {"name": "savedSearchId", "type": "ID", "required": false, "description": "The ID of the draft order saved search for filtering draft orders on."}, {"name": "search", "type": "String", "required": false, "description": "The conditions for filtering draft orders on.\nSee the detailed search syntax."}], "returns": [], "examples": []}, {"name": "draftOrderBulkRemoveTags", "description": "Removes tags from multiple draft orders.", "arguments": [{"name": "ids", "type": "[ID!]", "required": false, "description": "The IDs of the draft orders to remove tags from."}, {"name": "savedSearchId", "type": "ID", "required": false, "description": "The ID of the draft order saved search for filtering draft orders on."}, {"name": "search", "type": "String", "required": false, "description": "The conditions for filtering draft orders on.\nSee the detailed search syntax."}, {"name": "tags", "type": "[String!]!", "required": false, "description": "List of tags to be removed."}], "returns": [], "examples": []}, {"name": "draftOrderCalculate", "description": "Calculates the properties of a draft order. Useful for determining information\nsuch as total taxes or price without actually creating a draft order.", "arguments": [{"name": "input", "type": "DraftOrderInput!", "required": false, "description": "The fields for the draft order."}], "returns": [], "examples": [{"description": "Calculate properties of a draft order", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation CalculateDraftOrder($input: DraftOrderInput!) {\n      draftOrderCalculate(input: $input) {\n        calculatedDraftOrder {\n          customer {\n            id\n            email\n            firstName\n            numberOfOrders\n            defaultAddress {\n              id\n              firstName\n              lastName\n              address1\n              address2\n              city\n              provinceCode\n              zip\n              countryCodeV2\n            }\n            taxExempt\n          }\n          billingAddressMatchesShippingAddress\n          totalPriceSet {\n            presentmentMoney {\n              amount\n              currencyCode\n            }\n            shopMoney {\n              amount\n              currencyCode\n            }\n          }\n          lineItems {\n            appliedDiscount {\n              amountSet {\n                presentmentMoney {\n                  amount\n                  currencyCode\n                }\n                shopMoney {\n                  amount\n                  currencyCode\n                }\n              }\n              value\n              valueType\n              description\n            }\n            discountedTotalSet {\n              presentmentMoney {\n                amount\n                currencyCode\n              }\n              shopMoney {\n                amount\n                currencyCode\n              }\n            }\n            product {\n              id\n              title\n            }\n            quantity\n            requiresShipping\n            sku\n            taxable\n            title\n            variantTitle\n            variant {\n              id\n            }\n            weight {\n              value\n              unit\n            }\n          }\n          totalTaxSet {\n            presentmentMoney {\n              amount\n              currencyCode\n            }\n            shopMoney {\n              amount\n              currencyCode\n            }\n          }\n          totalDiscountsSet {\n            presentmentMoney {\n              amount\n              currencyCode\n            }\n            shopMoney {\n              amount\n              currencyCode\n            }\n          }\n          shippingLine {\n            id\n            custom\n            shippingRateHandle\n            title\n            originalPriceSet {\n              presentmentMoney {\n                amount\n                currencyCode\n              }\n              shopMoney {\n                amount\n                currencyCode\n              }\n            }\n          }\n          presentmentCurrencyCode\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"input\": {\n        \"appliedDiscount\": {\n          \"description\": \"Loyalty\",\n          \"value\": 5,\n          \"valueType\": \"FIXED_AMOUNT\"\n        },\n        \"billingAddress\": {\n          \"address1\": \"123 Amoebobacterieae St\",\n          \"address2\": \"\",\n          \"city\": \"Ottawa\",\n          \"company\": \"\",\n          \"countryCode\": \"CA\",\n          \"firstName\": \"Bob\",\n          \"lastName\": \"Bobsen\",\n          \"phone\": \"\",\n          \"provinceCode\": \"ON\",\n          \"zip\": \"K2P0V6\"\n        },\n        \"customerId\": \"gid://shopify/Customer/544365967\",\n        \"lineItems\": [\n          {\n            \"appliedDiscount\": {\n              \"description\": \"Promo\",\n              \"value\": 5,\n              \"valueType\": \"FIXED_AMOUNT\"\n            },\n            \"customAttributes\": [],\n            \"originalUnitPrice\": 10,\n            \"quantity\": 1,\n            \"requiresShipping\": true,\n            \"sku\": \"draft-151\",\n            \"taxable\": true,\n            \"title\": \"151cm\",\n            \"variantId\": \"gid://shopify/ProductVariant/43729076\",\n            \"weight\": {\n              \"unit\": \"KILOGRAMS\",\n              \"value\": 1\n            }\n          },\n          {\n            \"appliedDiscount\": null,\n            \"customAttributes\": [],\n            \"originalUnitPrice\": \"10.0\",\n            \"quantity\": 2,\n            \"requiresShipping\": true,\n            \"sku\": null,\n            \"taxable\": true,\n            \"title\": \"Spring Promo Item\",\n            \"variantId\": null,\n            \"weight\": {\n              \"unit\": \"KILOGRAMS\",\n              \"value\": 1.2\n            }\n          }\n        ],\n        \"presentmentCurrencyCode\": \"CAD\",\n        \"shippingAddress\": {\n          \"address1\": \"\",\n          \"address2\": \"\",\n          \"city\": \"\",\n          \"company\": \"\",\n          \"countryCode\": \"CA\",\n          \"firstName\": \"Bob\",\n          \"lastName\": \"Smith\",\n          \"phone\": \"\",\n          \"provinceCode\": \"AB\",\n          \"zip\": \"\"\n        },\n        \"shippingLine\": {\n          \"price\": \"0.0\",\n          \"title\": \"Free shipping\"\n        },\n        \"taxExempt\": false\n      }\n    },\n  },\n});\n"}, {"description": "Calculate properties of a draft order with markets context", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation CalculateDraftOrder($input: DraftOrderInput!) {\n      draftOrderCalculate(input: $input) {\n        calculatedDraftOrder {\n          purchasingEntity {\n            ... on Customer {\n              firstName\n            }\n          }\n          totalPriceSet {\n            presentmentMoney {\n              amount\n              currencyCode\n            }\n            shopMoney {\n              amount\n              currencyCode\n            }\n          }\n          lineItems {\n            appliedDiscount {\n              amountSet {\n                presentmentMoney {\n                  amount\n                  currencyCode\n                }\n                shopMoney {\n                  amount\n                  currencyCode\n                }\n              }\n              value\n              valueType\n              description\n            }\n            discountedTotalSet {\n              presentmentMoney {\n                amount\n                currencyCode\n              }\n              shopMoney {\n                amount\n                currencyCode\n              }\n            }\n            product {\n              id\n              title\n            }\n            quantity\n            requiresShipping\n            sku\n            taxable\n            title\n            variantTitle\n            variant {\n              id\n            }\n            weight {\n              value\n              unit\n            }\n          }\n          totalTaxSet {\n            presentmentMoney {\n              amount\n              currencyCode\n            }\n            shopMoney {\n              amount\n              currencyCode\n            }\n          }\n          totalDiscountsSet {\n            presentmentMoney {\n              amount\n              currencyCode\n            }\n            shopMoney {\n              amount\n              currencyCode\n            }\n          }\n          presentmentCurrencyCode\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"input\": {\n        \"presentmentCurrencyCode\": \"CAD\",\n        \"appliedDiscount\": {\n          \"description\": \"Loyalty\",\n          \"value\": 5,\n          \"valueType\": \"FIXED_AMOUNT\"\n        },\n        \"billingAddress\": {\n          \"address1\": \"123 Amoebobacterieae St\",\n          \"address2\": \"\",\n          \"city\": \"Ottawa\",\n          \"company\": \"\",\n          \"countryCode\": \"CA\",\n          \"firstName\": \"Bob\",\n          \"lastName\": \"Bobsen\",\n          \"phone\": \"\",\n          \"provinceCode\": \"ON\",\n          \"zip\": \"K2P0V6\"\n        },\n        \"customerId\": \"gid://shopify/Customer/544365967\",\n        \"lineItems\": [\n          {\n            \"appliedDiscount\": {\n              \"description\": \"Promo\",\n              \"value\": 5,\n              \"valueType\": \"FIXED_AMOUNT\"\n            },\n            \"customAttributes\": [],\n            \"quantity\": 1,\n            \"requiresShipping\": true,\n            \"sku\": \"draft-151\",\n            \"taxable\": true,\n            \"title\": \"151cm\",\n            \"variantId\": \"gid://shopify/ProductVariant/43729076\",\n            \"weight\": {\n              \"unit\": \"KILOGRAMS\",\n              \"value\": 1\n            }\n          },\n          {\n            \"appliedDiscount\": null,\n            \"customAttributes\": [],\n            \"originalUnitPrice\": \"10.0\",\n            \"quantity\": 2,\n            \"requiresShipping\": true,\n            \"sku\": null,\n            \"taxable\": true,\n            \"title\": \"Spring Promo Item\",\n            \"variantId\": null,\n            \"weight\": {\n              \"unit\": \"KILOGRAMS\",\n              \"value\": 1.2\n            }\n          }\n        ],\n        \"shippingAddress\": {\n          \"address1\": \"\",\n          \"address2\": \"\",\n          \"city\": \"\",\n          \"company\": \"\",\n          \"countryCode\": \"CA\",\n          \"firstName\": \"Bob\",\n          \"lastName\": \"Smith\",\n          \"phone\": \"\",\n          \"provinceCode\": \"AB\",\n          \"zip\": \"\"\n        },\n        \"shippingLine\": {\n          \"price\": \"0.0\",\n          \"title\": \"Free shipping\"\n        },\n        \"taxExempt\": false\n      }\n    },\n  },\n});\n"}, {"description": "Calculating a draft order with no line items", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation CalculateDraftOrder($input: DraftOrderInput!) {\n      draftOrderCalculate(input: $input) {\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"input\": {\n        \"appliedDiscount\": {\n          \"description\": \"Loyalty\",\n          \"value\": 5,\n          \"valueType\": \"FIXED_AMOUNT\"\n        },\n        \"billingAddress\": {\n          \"address1\": \"\",\n          \"address2\": \"\",\n          \"city\": \"\",\n          \"company\": \"\",\n          \"countryCode\": \"CA\",\n          \"firstName\": \"Bob\",\n          \"lastName\": \"Smith\",\n          \"phone\": \"\",\n          \"provinceCode\": \"AB\",\n          \"zip\": \"\"\n        },\n        \"lineItems\": [],\n        \"presentmentCurrencyCode\": \"CAD\",\n        \"shippingAddress\": {\n          \"address1\": \"\",\n          \"address2\": \"\",\n          \"city\": \"\",\n          \"company\": \"\",\n          \"countryCode\": \"CA\",\n          \"firstName\": \"Bob\",\n          \"lastName\": \"Smith\",\n          \"phone\": \"\",\n          \"provinceCode\": \"AB\",\n          \"zip\": \"\"\n        },\n        \"shippingLine\": {\n          \"price\": \"0.0\",\n          \"title\": \"Free shipping\"\n        },\n        \"taxExempt\": false\n      }\n    },\n  },\n});\n"}, {"description": "draftOrderCalculate reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation CalculateDraftOrder($input: DraftOrderInput!) {\n      draftOrderCalculate(input: $input) {\n        calculatedDraftOrder {\n          customer {\n            id\n            email\n            firstName\n            numberOfOrders\n            defaultAddress {\n              id\n              firstName\n              lastName\n              address1\n              address2\n              city\n              provinceCode\n              zip\n              countryCodeV2\n            }\n            taxExempt\n          }\n          billingAddressMatchesShippingAddress\n          totalPriceSet {\n            presentmentMoney {\n              amount\n              currencyCode\n            }\n            shopMoney {\n              amount\n              currencyCode\n            }\n          }\n          lineItems {\n            appliedDiscount {\n              amountSet {\n                presentmentMoney {\n                  amount\n                  currencyCode\n                }\n                shopMoney {\n                  amount\n                  currencyCode\n                }\n              }\n              value\n              valueType\n              description\n            }\n            discountedTotalSet {\n              presentmentMoney {\n                amount\n                currencyCode\n              }\n              shopMoney {\n                amount\n                currencyCode\n              }\n            }\n            product {\n              id\n              title\n            }\n            quantity\n            requiresShipping\n            sku\n            taxable\n            title\n            variantTitle\n            variant {\n              id\n            }\n            weight {\n              value\n              unit\n            }\n          }\n          totalTaxSet {\n            presentmentMoney {\n              amount\n              currencyCode\n            }\n            shopMoney {\n              amount\n              currencyCode\n            }\n          }\n          totalDiscountsSet {\n            presentmentMoney {\n              amount\n              currencyCode\n            }\n            shopMoney {\n              amount\n              currencyCode\n            }\n          }\n          shippingLine {\n            id\n            custom\n            shippingRateHandle\n            title\n            originalPriceSet {\n              presentmentMoney {\n                amount\n                currencyCode\n              }\n              shopMoney {\n                amount\n                currencyCode\n              }\n            }\n          }\n          presentmentCurrencyCode\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"input\": {\n        \"appliedDiscount\": {\n          \"description\": \"Loyalty\",\n          \"value\": 5,\n          \"valueType\": \"FIXED_AMOUNT\"\n        },\n        \"billingAddress\": {\n          \"address1\": \"123 Amoebobacterieae St\",\n          \"address2\": \"\",\n          \"city\": \"Ottawa\",\n          \"company\": \"\",\n          \"countryCode\": \"CA\",\n          \"firstName\": \"Bob\",\n          \"lastName\": \"Bobsen\",\n          \"phone\": \"\",\n          \"provinceCode\": \"ON\",\n          \"zip\": \"K2P0V6\"\n        },\n        \"customerId\": \"gid://shopify/Customer/544365967\",\n        \"lineItems\": [\n          {\n            \"appliedDiscount\": {\n              \"description\": \"Promo\",\n              \"value\": 5,\n              \"valueType\": \"FIXED_AMOUNT\"\n            },\n            \"customAttributes\": [],\n            \"originalUnitPrice\": 10,\n            \"quantity\": 1,\n            \"requiresShipping\": true,\n            \"sku\": \"draft-151\",\n            \"taxable\": true,\n            \"title\": \"151cm\",\n            \"variantId\": \"gid://shopify/ProductVariant/43729076\",\n            \"weight\": {\n              \"unit\": \"KILOGRAMS\",\n              \"value\": 1\n            }\n          },\n          {\n            \"appliedDiscount\": null,\n            \"customAttributes\": [],\n            \"originalUnitPrice\": \"10.0\",\n            \"quantity\": 2,\n            \"requiresShipping\": true,\n            \"sku\": null,\n            \"taxable\": true,\n            \"title\": \"Spring Promo Item\",\n            \"variantId\": null,\n            \"weight\": {\n              \"unit\": \"KILOGRAMS\",\n              \"value\": 1.2\n            }\n          }\n        ],\n        \"presentmentCurrencyCode\": \"CAD\",\n        \"shippingAddress\": {\n          \"address1\": \"\",\n          \"address2\": \"\",\n          \"city\": \"\",\n          \"company\": \"\",\n          \"countryCode\": \"CA\",\n          \"firstName\": \"Bob\",\n          \"lastName\": \"Smith\",\n          \"phone\": \"\",\n          \"provinceCode\": \"AB\",\n          \"zip\": \"\"\n        },\n        \"shippingLine\": {\n          \"price\": \"0.0\",\n          \"title\": \"Free shipping\"\n        },\n        \"taxExempt\": false\n      }\n    },\n  },\n});\n"}]}, {"name": "draftOrderComplete", "description": "Completes a draft order and creates an order.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The draft order to complete."}, {"name": "paymentGatewayId", "type": "ID", "required": false, "description": "The gateway for the completed draft order."}, {"name": "sourceName", "type": "String", "required": false, "description": "A channel definition handle used for sales channel attribution."}, {"name": "paymentPending", "type": "Boolean", "required": false, "description": "Whether the payment is pending. Create a draft with payment terms rather than marking the draft as pending."}], "returns": [], "examples": [{"description": "Complete a draft order", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation draftOrderComplete($id: ID!) {\n      draftOrderComplete(id: $id) {\n        draftOrder {\n          id\n          order {\n            id\n          }\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/DraftOrder/276395349\"\n    },\n  },\n});\n"}, {"description": "Complete a draft order with payment pending", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation draftOrderComplete($id: ID!, $paymentPending: Boolean) {\n      draftOrderComplete(id: $id, paymentPending: $paymentPending) {\n        draftOrder {\n          id\n          order {\n            id\n          }\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/DraftOrder/276395349\",\n      \"paymentPending\": true\n    },\n  },\n});\n"}, {"description": "Completing a draft order with an invalid payment gateway returns a user error", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation draftOrderComplete($id: ID!, $paymentGatewayId: ID) {\n      draftOrderComplete(id: $id, paymentGatewayId: $paymentGatewayId) {\n        userErrors {\n          message\n          field\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/DraftOrder/276395349\",\n      \"paymentGatewayId\": \"gid://shopify/PaymentGateway/12121213\"\n    },\n  },\n});\n"}, {"description": "draftOrderComplete reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation draftOrderComplete($id: ID!) {\n      draftOrderComplete(id: $id) {\n        draftOrder {\n          id\n          order {\n            id\n          }\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/DraftOrder/276395349\"\n    },\n  },\n});\n"}]}, {"name": "draftOrderCreate", "description": "Creates a draft order.", "arguments": [{"name": "input", "type": "DraftOrderInput!", "required": false, "description": "The fields used to create the draft order."}], "returns": [], "examples": [{"description": "Create a draft order", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation draftOrderCreate($input: DraftOrderInput!) {\n      draftOrderCreate(input: $input) {\n        draftOrder {\n          id\n        }\n      }\n    }`,\n    \"variables\": {\n      \"input\": {\n        \"customerId\": \"gid://shopify/Customer/544365967\",\n        \"note\": \"Test draft order\",\n        \"email\": \"test.user@shopify.com\",\n        \"taxExempt\": true,\n        \"tags\": [\n          \"foo\",\n          \"bar\"\n        ],\n        \"shippingLine\": {\n          \"title\": \"Custom Shipping\",\n          \"price\": 4.55\n        },\n        \"shippingAddress\": {\n          \"address1\": \"123 Main St\",\n          \"city\": \"Waterloo\",\n          \"province\": \"Ontario\",\n          \"country\": \"Canada\",\n          \"zip\": \"A1A 1A1\"\n        },\n        \"billingAddress\": {\n          \"address1\": \"456 Main St\",\n          \"city\": \"Toronto\",\n          \"province\": \"Ontario\",\n          \"country\": \"Canada\",\n          \"zip\": \"Z9Z 9Z9\"\n        },\n        \"appliedDiscount\": {\n          \"description\": \"damaged\",\n          \"value\": 5.0,\n          \"amount\": 5.0,\n          \"valueType\": \"FIXED_AMOUNT\",\n          \"title\": \"Custom\"\n        },\n        \"lineItems\": [\n          {\n            \"title\": \"Custom product\",\n            \"originalUnitPrice\": 14.99,\n            \"quantity\": 5,\n            \"appliedDiscount\": {\n              \"description\": \"wholesale\",\n              \"value\": 5.0,\n              \"amount\": 3.74,\n              \"valueType\": \"PERCENTAGE\",\n              \"title\": \"Fancy\"\n            },\n            \"weight\": {\n              \"value\": 1,\n              \"unit\": \"KILOGRAMS\"\n            },\n            \"customAttributes\": [\n              {\n                \"key\": \"color\",\n                \"value\": \"Gold\"\n              },\n              {\n                \"key\": \"material\",\n                \"value\": \"Plastic\"\n              }\n            ]\n          },\n          {\n            \"variantId\": \"gid://shopify/ProductVariant/43729076\",\n            \"quantity\": 2\n          }\n        ],\n        \"customAttributes\": [\n          {\n            \"key\": \"name\",\n            \"value\": \"Achilles\"\n          },\n          {\n            \"key\": \"city\",\n            \"value\": \"Troy\"\n          }\n        ]\n      }\n    },\n  },\n});\n"}, {"description": "Create a draft order with markets context", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation draftOrderCreate($input: DraftOrderInput!) {\n      draftOrderCreate(input: $input) {\n        draftOrder {\n          id\n          presentmentCurrencyCode\n          totalPriceSet {\n            shopMoney {\n              amount\n              currencyCode\n            }\n            presentmentMoney {\n              amount\n              currencyCode\n            }\n          }\n        }\n      }\n    }`,\n    \"variables\": {\n      \"input\": {\n        \"customerId\": \"gid://shopify/Customer/544365967\",\n        \"note\": \"Test draft order\",\n        \"email\": \"test.user@shopify.com\",\n        \"taxExempt\": true,\n        \"tags\": [\n          \"foo\",\n          \"bar\"\n        ],\n        \"shippingLine\": {\n          \"title\": \"Custom Shipping\",\n          \"price\": 4.55\n        },\n        \"shippingAddress\": {\n          \"address1\": \"123 Main St\",\n          \"city\": \"Waterloo\",\n          \"province\": \"Ontario\",\n          \"country\": \"Canada\",\n          \"zip\": \"A1A 1A1\"\n        },\n        \"billingAddress\": {\n          \"address1\": \"456 Main St\",\n          \"city\": \"Toronto\",\n          \"province\": \"Ontario\",\n          \"country\": \"Canada\",\n          \"zip\": \"Z9Z 9Z9\"\n        },\n        \"appliedDiscount\": {\n          \"description\": \"damaged\",\n          \"value\": 5.0,\n          \"amount\": 5.0,\n          \"valueType\": \"FIXED_AMOUNT\",\n          \"title\": \"Custom\"\n        },\n        \"lineItems\": [\n          {\n            \"title\": \"Custom product\",\n            \"originalUnitPrice\": 14.99,\n            \"quantity\": 5,\n            \"appliedDiscount\": {\n              \"description\": \"wholesale\",\n              \"value\": 5.0,\n              \"amount\": 3.74,\n              \"valueType\": \"PERCENTAGE\",\n              \"title\": \"Fancy\"\n            },\n            \"weight\": {\n              \"value\": 1,\n              \"unit\": \"KILOGRAMS\"\n            },\n            \"customAttributes\": [\n              {\n                \"key\": \"color\",\n                \"value\": \"Gold\"\n              },\n              {\n                \"key\": \"material\",\n                \"value\": \"Plastic\"\n              }\n            ]\n          },\n          {\n            \"variantId\": \"gid://shopify/ProductVariant/43729076\",\n            \"quantity\": 2\n          }\n        ],\n        \"presentmentCurrencyCode\": \"CAD\",\n        \"customAttributes\": [\n          {\n            \"key\": \"name\",\n            \"value\": \"Achilles\"\n          },\n          {\n            \"key\": \"city\",\n            \"value\": \"Troy\"\n          }\n        ]\n      }\n    },\n  },\n});\n"}, {"description": "Create a new metafield on a new draft order", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation createDraftOrderMetafields($input: DraftOrderInput!) {\n      draftOrderCreate(input: $input) {\n        draftOrder {\n          id\n          metafields(first: 3) {\n            edges {\n              node {\n                id\n                namespace\n                key\n                value\n              }\n            }\n          }\n        }\n        userErrors {\n          message\n          field\n        }\n      }\n    }`,\n    \"variables\": {\n      \"input\": {\n        \"metafields\": [\n          {\n            \"namespace\": \"my_field\",\n            \"key\": \"delivery_instructions\",\n            \"type\": \"single_line_text_field\",\n            \"value\": \"leave on back porch\"\n          }\n        ],\n        \"lineItems\": [\n          {\n            \"title\": \"small wheel\",\n            \"quantity\": 1,\n            \"originalUnitPrice\": \"10\"\n          }\n        ]\n      }\n    },\n  },\n});\n"}, {"description": "Creating a draft order with invalid input returns an error", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation draftOrderCreate($input: DraftOrderInput!) {\n      draftOrderCreate(input: $input) {\n        draftOrder {\n          id\n        }\n        userErrors {\n          message\n          field\n        }\n      }\n    }`,\n    \"variables\": {\n      \"input\": {\n        \"lineItems\": []\n      }\n    },\n  },\n});\n"}, {"description": "draftOrderCreate reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation draftOrderCreate($input: DraftOrderInput!) {\n      draftOrderCreate(input: $input) {\n        draftOrder {\n          id\n        }\n      }\n    }`,\n    \"variables\": {\n      \"input\": {\n        \"customerId\": \"gid://shopify/Customer/544365967\",\n        \"note\": \"Test draft order\",\n        \"email\": \"test.user@shopify.com\",\n        \"taxExempt\": true,\n        \"tags\": [\n          \"foo\",\n          \"bar\"\n        ],\n        \"shippingLine\": {\n          \"title\": \"Custom Shipping\",\n          \"price\": 4.55\n        },\n        \"shippingAddress\": {\n          \"address1\": \"123 Main St\",\n          \"city\": \"Waterloo\",\n          \"province\": \"Ontario\",\n          \"country\": \"Canada\",\n          \"zip\": \"A1A 1A1\"\n        },\n        \"billingAddress\": {\n          \"address1\": \"456 Main St\",\n          \"city\": \"Toronto\",\n          \"province\": \"Ontario\",\n          \"country\": \"Canada\",\n          \"zip\": \"Z9Z 9Z9\"\n        },\n        \"appliedDiscount\": {\n          \"description\": \"damaged\",\n          \"value\": 5.0,\n          \"amount\": 5.0,\n          \"valueType\": \"FIXED_AMOUNT\",\n          \"title\": \"Custom\"\n        },\n        \"lineItems\": [\n          {\n            \"title\": \"Custom product\",\n            \"originalUnitPrice\": 14.99,\n            \"quantity\": 5,\n            \"appliedDiscount\": {\n              \"description\": \"wholesale\",\n              \"value\": 5.0,\n              \"amount\": 3.74,\n              \"valueType\": \"PERCENTAGE\",\n              \"title\": \"Fancy\"\n            },\n            \"weight\": {\n              \"value\": 1,\n              \"unit\": \"KILOGRAMS\"\n            },\n            \"customAttributes\": [\n              {\n                \"key\": \"color\",\n                \"value\": \"Gold\"\n              },\n              {\n                \"key\": \"material\",\n                \"value\": \"Plastic\"\n              }\n            ]\n          },\n          {\n            \"variantId\": \"gid://shopify/ProductVariant/43729076\",\n            \"quantity\": 2\n          }\n        ],\n        \"customAttributes\": [\n          {\n            \"key\": \"name\",\n            \"value\": \"Achilles\"\n          },\n          {\n            \"key\": \"city\",\n            \"value\": \"Troy\"\n          }\n        ]\n      }\n    },\n  },\n});\n"}]}, {"name": "draftOrderCreateFromOrder", "description": "Creates a draft order from order.", "arguments": [{"name": "orderId", "type": "ID!", "required": false, "description": "Specifies the order's id that we create the draft order from."}], "returns": [], "examples": [{"description": "Create a draft order from order", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation DraftOrderCreateFromOrder($orderId: ID!) {\n      draftOrderCreateFromOrder(orderId: $orderId) {\n        draftOrder {\n          id\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"orderId\": \"gid://shopify/Order/148977776\"\n    },\n  },\n});\n"}, {"description": "draftOrderCreateFromOrder reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation DraftOrderCreateFromOrder($orderId: ID!) {\n      draftOrderCreateFromOrder(orderId: $orderId) {\n        draftOrder {\n          id\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"orderId\": \"gid://shopify/Order/148977776\"\n    },\n  },\n});\n"}]}, {"name": "draftOrderCreateMerchantCheckout", "description": "Creates a merchant checkout for the given draft order. This mutation is no longer supported.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "Specifies the Draft order's id that we create the checkout for."}], "returns": [], "examples": []}, {"name": "draftOrderDelete", "description": "Deletes a draft order.", "arguments": [{"name": "input", "type": "DraftOrderDeleteInput!", "required": false, "description": "Specify the draft order to delete by its ID."}], "returns": [], "examples": [{"description": "Delete a draft order by ID and return the deleted ID", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation draftOrderDelete($input: DraftOrderDeleteInput!) {\n      draftOrderDelete(input: $input) {\n        deletedId\n      }\n    }`,\n    \"variables\": {\n      \"input\": {\n        \"id\": \"gid://shopify/DraftOrder/276395349\"\n      }\n    },\n  },\n});\n"}, {"description": "Remove an existing DraftOrder", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation draftOrderDelete($input: DraftOrderDeleteInput!) {\n      draftOrderDelete(input: $input) {\n        deletedId\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"input\": {\n        \"id\": \"gid://shopify/DraftOrder/276395349\"\n      }\n    },\n  },\n});\n"}, {"description": "draftOrderDelete reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation draftOrderDelete($input: DraftOrderDeleteInput!) {\n      draftOrderDelete(input: $input) {\n        deletedId\n      }\n    }`,\n    \"variables\": {\n      \"input\": {\n        \"id\": \"gid://shopify/DraftOrder/276395349\"\n      }\n    },\n  },\n});\n"}]}, {"name": "draftOrderDuplicate", "description": "Duplicates a draft order.", "arguments": [{"name": "id", "type": "ID", "required": false, "description": "The ID of the draft order to duplicate."}, {"name": "draftOrderId", "type": "ID", "required": false, "description": "The ID of the draft order to duplicate. Use id instead."}], "returns": [], "examples": []}, {"name": "draftOrderInvoicePreview", "description": "Previews a draft order invoice email.", "arguments": [{"name": "email", "type": "EmailInput", "required": false, "description": "Specifies the draft order invoice email fields."}, {"name": "id", "type": "ID!", "required": false, "description": "Specifies the draft order invoice email to preview."}], "returns": [], "examples": [{"description": "Preview a draft order invoice by draft order ID", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation draftOrderInvoicePreview($id: ID!) {\n      draftOrderInvoicePreview(id: $id) {\n        previewHtml\n        previewSubject\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/DraftOrder/276395349\"\n    },\n  },\n});\n"}, {"description": "Preview a draft order invoice with custom email input", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation draftOrderInvoicePreview($id: ID!, $email: EmailInput) {\n      draftOrderInvoicePreview(id: $id, email: $email) {\n        previewHtml\n        previewSubject\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/DraftOrder/276395349\",\n      \"email\": {\n        \"to\": \"test@example.com\",\n        \"subject\": \"Custom subject\",\n        \"customMessage\": \"Hi,\\nThis is a custom message for the customer.\"\n      }\n    },\n  },\n});\n"}, {"description": "Previewing a completed draft order returns an error", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation draftOrderInvoicePreview($id: ID!) {\n      draftOrderInvoicePreview(id: $id) {\n        previewHtml\n        userErrors {\n          message\n          field\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/DraftOrder/989355118\"\n    },\n  },\n});\n"}, {"description": "draftOrderInvoicePreview reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation draftOrderInvoicePreview($id: ID!) {\n      draftOrderInvoicePreview(id: $id) {\n        previewHtml\n        previewSubject\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/DraftOrder/276395349\"\n    },\n  },\n});\n"}]}, {"name": "draftOrderInvoiceSend", "description": "Sends an email invoice for a draft order.", "arguments": [{"name": "email", "type": "EmailInput", "required": false, "description": "Specifies the draft order invoice email fields."}, {"name": "id", "type": "ID!", "required": false, "description": "Specifies the draft order to send the invoice for."}], "returns": [], "examples": [{"description": "Send a draft order invoice by draft order ID", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation draftOrderInvoiceSend($id: ID!) {\n      draftOrderInvoiceSend(id: $id) {\n        draftOrder {\n          id\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/DraftOrder/276395349\"\n    },\n  },\n});\n"}, {"description": "Send an invoice", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation draftOrderInvoiceSend($id: ID!) {\n      draftOrderInvoiceSend(id: $id) {\n        draftOrder {\n          id\n          note2\n          email\n          taxesIncluded\n          currencyCode\n          invoiceSentAt\n          createdAt\n          updatedAt\n          taxExempt\n          completedAt\n          name\n          status\n          lineItems(first: 10) {\n            edges {\n              node {\n                id\n                variant {\n                  id\n                  title\n                }\n                product {\n                  id\n                }\n                name\n                sku\n                vendor\n                quantity\n                requiresShipping\n                taxable\n                isGiftCard\n                fulfillmentService {\n                  type\n                }\n                weight {\n                  unit\n                  value\n                }\n                taxLines {\n                  title\n                  source\n                  rate\n                  ratePercentage\n                  priceSet {\n                    presentmentMoney {\n                      amount\n                      currencyCode\n                    }\n                    shopMoney {\n                      amount\n                      currencyCode\n                    }\n                  }\n                }\n                appliedDiscount {\n                  title\n                  value\n                  valueType\n                }\n                name\n                custom\n                id\n              }\n            }\n          }\n          shippingAddress {\n            firstName\n            address1\n            phone\n            city\n            zip\n            province\n            country\n            lastName\n            address2\n            company\n            latitude\n            longitude\n            name\n            country\n            countryCodeV2\n            provinceCode\n          }\n          billingAddress {\n            firstName\n            address1\n            phone\n            city\n            zip\n            province\n            country\n            lastName\n            address2\n            company\n            latitude\n            longitude\n            name\n            country\n            countryCodeV2\n            provinceCode\n          }\n          invoiceUrl\n          appliedDiscount {\n            title\n            value\n            valueType\n          }\n          order {\n            id\n            customAttributes {\n              key\n              value\n            }\n          }\n          shippingLine {\n            id\n            title\n            carrierIdentifier\n            custom\n            code\n            deliveryCategory\n            source\n            discountedPriceSet {\n              presentmentMoney {\n                amount\n                currencyCode\n              }\n              shopMoney {\n                amount\n                currencyCode\n              }\n            }\n          }\n          taxLines {\n            channelLiable\n            priceSet {\n              presentmentMoney {\n                amount\n                currencyCode\n              }\n              shopMoney {\n                amount\n                currencyCode\n              }\n            }\n            rate\n            ratePercentage\n            source\n            title\n          }\n          tags\n          customer {\n            id\n            email\n            smsMarketingConsent {\n              consentCollectedFrom\n              consentUpdatedAt\n              marketingOptInLevel\n              marketingState\n            }\n            emailMarketingConsent {\n              consentUpdatedAt\n              marketingOptInLevel\n              marketingState\n            }\n            createdAt\n            updatedAt\n            firstName\n            lastName\n            state\n            amountSpent {\n              amount\n              currencyCode\n            }\n            lastOrder {\n              id\n              name\n              currencyCode\n            }\n            note\n            verifiedEmail\n            multipassIdentifier\n            taxExempt\n            tags\n            phone\n            taxExemptions\n            defaultAddress {\n              id\n              firstName\n              lastName\n              company\n              address1\n              address2\n              city\n              province\n              country\n              zip\n              phone\n              name\n              provinceCode\n              countryCodeV2\n            }\n          }\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/DraftOrder/276395349\"\n    },\n  },\n});\n"}, {"description": "Sending an invoice with invalid arguments returns an error", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation draftOrderInvoiceSend($id: ID!, $email: EmailInput) {\n      draftOrderInvoiceSend(id: $id, email: $email) {\n        draftOrder {\n          id\n        }\n        userErrors {\n          message\n          field\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/DraftOrder/276395349\",\n      \"email\": {\n        \"subject\": \"valid subject\",\n        \"to\": \"invalid recipient\"\n      }\n    },\n  },\n});\n"}, {"description": "draftOrderInvoiceSend reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation draftOrderInvoiceSend($id: ID!) {\n      draftOrderInvoiceSend(id: $id) {\n        draftOrder {\n          id\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/DraftOrder/276395349\"\n    },\n  },\n});\n"}]}, {"name": "draftOrderUpdate", "description": "Updates a draft order.\nIf a checkout has been started for a draft order, any update to the draft will unlink the checkout. Checkouts\nare created but not immediately completed when opening the merchant credit card modal in the admin, and when a\nbuyer opens the invoice URL. This is usually fine, but there is an edge case where a checkout is in progress\nand the draft is updated before the checkout completes. This will not interfere with the checkout and order\ncreation, but if the link from draft to checkout is broken the draft will remain open even after the order is\ncreated.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "Specifies the draft order to update."}, {"name": "input", "type": "DraftOrderInput!", "required": false, "description": "The draft order properties to update."}], "returns": [], "examples": [{"description": "Create a new metafield and update another on an existing draft order", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation updateDraftOrderMetafields($input: DraftOrderInput!, $ownerId: ID!) {\n      draftOrderUpdate(input: $input, id: $ownerId) {\n        draftOrder {\n          id\n          metafields(first: 3) {\n            edges {\n              node {\n                id\n                namespace\n                key\n                value\n              }\n            }\n          }\n        }\n        userErrors {\n          message\n          field\n        }\n      }\n    }`,\n    \"variables\": {\n      \"input\": {\n        \"metafields\": [\n          {\n            \"namespace\": \"my_field\",\n            \"key\": \"delivery_instructions\",\n            \"type\": \"single_line_text_field\",\n            \"value\": \"leave on back porch\"\n          },\n          {\n            \"id\": \"gid://shopify/Metafield/1069229059\",\n            \"value\": \"123\"\n          }\n        ]\n      },\n      \"ownerId\": \"gid://shopify/DraftOrder/276395349\"\n    },\n  },\n});\n"}, {"description": "Modify an existing DraftOrder", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation draftOrderUpdate($id: ID!, $input: DraftOrderInput!) {\n      draftOrderUpdate(id: $id, input: $input) {\n        draftOrder {\n          id\n          note2\n          email\n          taxesIncluded\n          currencyCode\n          invoiceSentAt\n          createdAt\n          updatedAt\n          taxExempt\n          completedAt\n          name\n          status\n          marketRegionCountryCode\n          presentmentCurrencyCode\n          shippingAddress {\n            firstName\n            address1\n            phone\n            city\n            zip\n            province\n            country\n            lastName\n            address2\n            company\n            latitude\n            longitude\n            name\n            country\n            countryCodeV2\n            provinceCode\n          }\n          billingAddress {\n            firstName\n            address1\n            phone\n            city\n            zip\n            province\n            country\n            lastName\n            address2\n            company\n            latitude\n            longitude\n            name\n            country\n            countryCodeV2\n            provinceCode\n          }\n          invoiceUrl\n          appliedDiscount {\n            title\n            value\n            valueType\n          }\n          order {\n            id\n            customAttributes {\n              key\n              value\n            }\n          }\n          shippingLine {\n            id\n            title\n            carrierIdentifier\n            custom\n            code\n            deliveryCategory\n            source\n            discountedPriceSet {\n              presentmentMoney {\n                amount\n                currencyCode\n              }\n              shopMoney {\n                amount\n                currencyCode\n              }\n            }\n          }\n          taxLines {\n            channelLiable\n            priceSet {\n              presentmentMoney {\n                amount\n                currencyCode\n              }\n              shopMoney {\n                amount\n                currencyCode\n              }\n            }\n            rate\n            ratePercentage\n            source\n            title\n          }\n          tags\n          customer {\n            id\n            email\n            smsMarketingConsent {\n              consentCollectedFrom\n              consentUpdatedAt\n              marketingOptInLevel\n              marketingState\n            }\n            emailMarketingConsent {\n              consentUpdatedAt\n              marketingOptInLevel\n              marketingState\n            }\n            createdAt\n            updatedAt\n            firstName\n            lastName\n            state\n            amountSpent {\n              amount\n              currencyCode\n            }\n            lastOrder {\n              id\n              name\n              currencyCode\n            }\n            note\n            verifiedEmail\n            multipassIdentifier\n            taxExempt\n            tags\n            phone\n            taxExemptions\n            defaultAddress {\n              id\n              firstName\n              lastName\n              company\n              address1\n              address2\n              city\n              province\n              country\n              zip\n              phone\n              name\n              provinceCode\n              countryCodeV2\n            }\n          }\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/DraftOrder/276395349\",\n      \"input\": {\n        \"shippingAddress\": {\n          \"address1\": \"123 shipping ave\",\n          \"city\": \"Ottawa\",\n          \"provinceCode\": \"ON\",\n          \"zip\": \"K1L 2J3\",\n          \"country\": \"Canada\"\n        },\n        \"marketRegionCountryCode\": \"CA\",\n        \"presentmentCurrencyCode\": \"CAD\"\n      }\n    },\n  },\n});\n"}, {"description": "Update the draft order shipping address", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation draftOrderUpdate($id: ID!, $input: DraftOrderInput!) {\n      draftOrderUpdate(id: $id, input: $input) {\n        draftOrder {\n          shippingAddress {\n            id\n          }\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/DraftOrder/276395349\",\n      \"input\": {\n        \"shippingAddress\": {\n          \"address1\": \"123 shipping ave\",\n          \"city\": \"Ottawa\",\n          \"provinceCode\": \"ON\",\n          \"zip\": \"K1L 2J3\",\n          \"country\": \"Canada\"\n        }\n      }\n    },\n  },\n});\n"}, {"description": "draftOrderUpdate reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation updateDraftOrderMetafields($input: DraftOrderInput!, $ownerId: ID!) {\n      draftOrderUpdate(input: $input, id: $ownerId) {\n        draftOrder {\n          id\n          metafields(first: 3) {\n            edges {\n              node {\n                id\n                namespace\n                key\n                value\n              }\n            }\n          }\n        }\n        userErrors {\n          message\n          field\n        }\n      }\n    }`,\n    \"variables\": {\n      \"input\": {\n        \"metafields\": [\n          {\n            \"namespace\": \"my_field\",\n            \"key\": \"delivery_instructions\",\n            \"type\": \"single_line_text_field\",\n            \"value\": \"leave on back porch\"\n          },\n          {\n            \"id\": \"gid://shopify/Metafield/1069229059\",\n            \"value\": \"123\"\n          }\n        ]\n      },\n      \"ownerId\": \"gid://shopify/DraftOrder/276395349\"\n    },\n  },\n});\n"}]}, {"name": "orderCancel", "description": "Cancels an order.", "arguments": [{"name": "notifyCustomer", "type": "Boolean", "required": false, "description": "Whether to send a notification to the customer about the order cancellation."}, {"name": "orderId", "type": "ID!", "required": false, "description": "The ID of the order to be canceled."}, {"name": "reason", "type": "OrderCancelReason!", "required": false, "description": "The reason for canceling the order."}, {"name": "refund", "type": "Boolean!", "required": false, "description": "Indicates whether to refund the amount paid by the customer. Authorized payments will be voided regardless of this setting."}, {"name": "restock", "type": "Boolean!", "required": false, "description": "Whether to restock the inventory committed to the order. For unpaid orders fulfilled from locations that have been deactivated, inventory will not be restocked to the deactivated locations even if this argument is set to true."}, {"name": "staffNote", "type": "String", "required": false, "description": "A staff-facing note about the order cancellation. This is not visible to the customer."}], "returns": [], "examples": []}, {"name": "orderCapture", "description": "Captures payment for an authorized transaction on an order. An order can only be captured if it has a successful authorization transaction. Capturing an order will claim the money reserved by the authorization. orderCapture can be used to capture multiple times as long as the OrderTransaction is multi-capturable. To capture a partial payment, the included amount value should be less than the total order amount. Multi-capture is available only to stores on a Shopify Plus plan.", "arguments": [{"name": "input", "type": "OrderCaptureInput!", "required": false, "description": "The input for the mutation."}], "returns": [], "examples": [{"description": "Creates a transaction for an order", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation TransactionCreate($input: OrderCaptureInput!) {\n      orderCapture(input: $input) {\n        transaction {\n          accountNumber\n          amountSet {\n            presentmentMoney {\n              amount\n              currencyCode\n            }\n            shopMoney {\n              amount\n              currencyCode\n            }\n          }\n          authorizationCode\n          authorizationExpiresAt\n          createdAt\n          errorCode\n          fees {\n            amount {\n              amount\n              currencyCode\n            }\n          }\n          formattedGateway\n          gateway\n          id\n          kind\n          manuallyCapturable\n          maximumRefundableV2 {\n            amount\n            currencyCode\n          }\n          multiCapturable\n          order {\n            id\n          }\n          parentTransaction {\n            id\n          }\n          paymentDetails {\n            ... on CardPaymentDetails {\n              paymentMethodName\n            }\n            ... on ShopPayInstallmentsPaymentDetails {\n              paymentMethodName\n            }\n          }\n          paymentIcon {\n            url\n          }\n          paymentId\n          processedAt\n          receiptJson\n          settlementCurrency\n          shopifyPaymentsSet {\n            refundSet {\n              acquirerReferenceNumber\n            }\n          }\n          status\n          test\n          totalUnsettledSet {\n            presentmentMoney {\n              amount\n              currencyCode\n            }\n            shopMoney {\n              amount\n              currencyCode\n            }\n          }\n          user {\n            id\n          }\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"input\": {\n        \"id\": \"gid://shopify/Order/431501862\",\n        \"parentTransactionId\": \"gid://shopify/OrderTransaction/336526656\",\n        \"amount\": \"1000.00\"\n      }\n    },\n  },\n});\n"}, {"description": "orderCapture reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation TransactionCreate($input: OrderCaptureInput!) {\n      orderCapture(input: $input) {\n        transaction {\n          accountNumber\n          amountSet {\n            presentmentMoney {\n              amount\n              currencyCode\n            }\n            shopMoney {\n              amount\n              currencyCode\n            }\n          }\n          authorizationCode\n          authorizationExpiresAt\n          createdAt\n          errorCode\n          fees {\n            amount {\n              amount\n              currencyCode\n            }\n          }\n          formattedGateway\n          gateway\n          id\n          kind\n          manuallyCapturable\n          maximumRefundableV2 {\n            amount\n            currencyCode\n          }\n          multiCapturable\n          order {\n            id\n          }\n          parentTransaction {\n            id\n          }\n          paymentDetails {\n            ... on CardPaymentDetails {\n              paymentMethodName\n            }\n            ... on ShopPayInstallmentsPaymentDetails {\n              paymentMethodName\n            }\n          }\n          paymentIcon {\n            url\n          }\n          paymentId\n          processedAt\n          receiptJson\n          settlementCurrency\n          shopifyPaymentsSet {\n            refundSet {\n              acquirerReferenceNumber\n            }\n          }\n          status\n          test\n          totalUnsettledSet {\n            presentmentMoney {\n              amount\n              currencyCode\n            }\n            shopMoney {\n              amount\n              currencyCode\n            }\n          }\n          user {\n            id\n          }\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"input\": {\n        \"id\": \"gid://shopify/Order/431501862\",\n        \"parentTransactionId\": \"gid://shopify/OrderTransaction/336526656\",\n        \"amount\": \"1000.00\"\n      }\n    },\n  },\n});\n"}]}, {"name": "orderClose", "description": "Closes an open order.", "arguments": [{"name": "input", "type": "OrderCloseInput!", "required": false, "description": "The input for the mutation."}], "returns": [], "examples": [{"description": "Close an order", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation OrderClose($input: OrderCloseInput!) {\n      orderClose(input: $input) {\n        order {\n          canMarkAsPaid\n          cancelReason\n          cancelledAt\n          clientIp\n          confirmed\n          customer {\n            displayName\n            email\n          }\n          discountCodes\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"input\": {\n        \"id\": \"gid://shopify/Order/148977776\"\n      }\n    },\n  },\n});\n"}, {"description": "orderClose reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation OrderClose($input: OrderCloseInput!) {\n      orderClose(input: $input) {\n        order {\n          canMarkAsPaid\n          cancelReason\n          cancelledAt\n          clientIp\n          confirmed\n          customer {\n            displayName\n            email\n          }\n          discountCodes\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"input\": {\n        \"id\": \"gid://shopify/Order/148977776\"\n      }\n    },\n  },\n});\n"}]}, {"name": "orderCreate", "description": "Creates an order with attributes such as customer information, line items, and shipping and billing addresses.\nUse the orderCreate mutation to programmatically generate orders in scenarios where\norders aren't created through the standard checkout process, such as when importing orders from an external\nsystem or creating orders for wholesale customers.\nThe orderCreate mutation doesn't support applying multiple discounts, such as discounts on line items.\nAutomatic discounts won't be applied unless you replicate the logic of those discounts in your custom\nimplementation. You can apply a discount code,\nbut only one discount code can be set for each order.\nNoteIf you're using the orderCreate mutation with a\ntrial or\ndevelopment store, then you can create a\nmaximum of five new orders per minute.After you create an order, you can make subsequent edits to the order using one of the following mutations:\n\norderUpdate:\nUsed for simple updates to an order, such as changing the order's note, tags, or customer information.\norderEditBegin:\nUsed when you need to make significant updates to an order, such as adding or removing line items, changing\nquantities, or modifying discounts. The orderEditBegin mutation initiates an order editing session,\nallowing you to make multiple changes before finalizing them. Learn more about using the orderEditBegin\nmutation to edit existing orders.\n\nLearn how to build apps that integrate with\norder management and fulfillment processes.", "arguments": [{"name": "options", "type": "OrderCreateOptionsInput", "required": false, "description": "The strategies for updating inventory and whether to send shipping and order confirmations to customers."}, {"name": "order", "type": "OrderCreateOrderInput!", "required": false, "description": "The attributes of the new order."}], "returns": [], "examples": [{"description": "Create a pending order with an existing customer and new addresses via customer_id", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation OrderCreate($order: OrderCreateOrderInput!, $options: OrderCreateOptionsInput) {\n      orderCreate(order: $order, options: $options) {\n        userErrors {\n          field\n          message\n        }\n        order {\n          id\n          displayFinancialStatus\n          shippingAddress {\n            lastName\n            address1\n            city\n            provinceCode\n            countryCode\n            zip\n          }\n          billingAddress {\n            lastName\n            address1\n            city\n            provinceCode\n            countryCode\n            zip\n          }\n          customer {\n            id\n          }\n        }\n      }\n    }`,\n    \"variables\": {\n      \"order\": {\n        \"lineItems\": [\n          {\n            \"variantId\": \"gid://shopify/ProductVariant/43729076\",\n            \"quantity\": 1\n          }\n        ],\n        \"customerId\": \"gid://shopify/Customer/544365967\",\n        \"financialStatus\": \"PENDING\",\n        \"shippingAddress\": {\n          \"lastName\": \"James\",\n          \"address1\": \"123 Main St\",\n          \"city\": \"Ottawa\",\n          \"countryCode\": \"CA\",\n          \"provinceCode\": \"ON\",\n          \"zip\": \"K1P 1J1\"\n        },\n        \"billingAddress\": {\n          \"lastName\": \"James\",\n          \"address1\": \"321 Secondary St\",\n          \"city\": \"Ottawa\",\n          \"countryCode\": \"CA\",\n          \"provinceCode\": \"ON\",\n          \"zip\": \"K1P 1J1\"\n        }\n      }\n    },\n  },\n});\n"}, {"description": "Create a pending order with an existing customer and new addresses via toAssociate", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation OrderCreate($order: OrderCreateOrderInput!, $options: OrderCreateOptionsInput) {\n      orderCreate(order: $order, options: $options) {\n        userErrors {\n          field\n          message\n        }\n        order {\n          id\n          displayFinancialStatus\n          shippingAddress {\n            lastName\n            address1\n            city\n            provinceCode\n            countryCode\n            zip\n          }\n          billingAddress {\n            lastName\n            address1\n            city\n            provinceCode\n            countryCode\n            zip\n          }\n          customer {\n            id\n          }\n        }\n      }\n    }`,\n    \"variables\": {\n      \"order\": {\n        \"lineItems\": [\n          {\n            \"variantId\": \"gid://shopify/ProductVariant/43729076\",\n            \"quantity\": 1\n          }\n        ],\n        \"customer\": {\n          \"toAssociate\": {\n            \"id\": \"gid://shopify/Customer/544365967\"\n          }\n        },\n        \"financialStatus\": \"PENDING\",\n        \"shippingAddress\": {\n          \"lastName\": \"James\",\n          \"address1\": \"123 Main St\",\n          \"city\": \"Ottawa\",\n          \"countryCode\": \"CA\",\n          \"provinceCode\": \"ON\",\n          \"zip\": \"K1P 1J1\"\n        },\n        \"billingAddress\": {\n          \"lastName\": \"James\",\n          \"address1\": \"321 Secondary St\",\n          \"city\": \"Ottawa\",\n          \"countryCode\": \"CA\",\n          \"provinceCode\": \"ON\",\n          \"zip\": \"K1P 1J1\"\n        }\n      }\n    },\n  },\n});\n"}, {"description": "Create a simple order with only a product variant ID and no optional parameters", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation OrderCreate($order: OrderCreateOrderInput!, $options: OrderCreateOptionsInput) {\n      orderCreate(order: $order, options: $options) {\n        userErrors {\n          field\n          message\n        }\n        order {\n          id\n          lineItems(first: 5) {\n            nodes {\n              id\n              title\n              quantity\n              variant {\n                id\n              }\n            }\n          }\n        }\n      }\n    }`,\n    \"variables\": {\n      \"order\": {\n        \"lineItems\": [\n          {\n            \"variantId\": \"gid://shopify/ProductVariant/43729076\",\n            \"quantity\": 1\n          }\n        ]\n      }\n    },\n  },\n});\n"}, {"description": "Create an order", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation M($order: OrderCreateOrderInput!, $options: OrderCreateOptionsInput) {\n      orderCreate(order: $order, options: $options) {\n        order {\n          id\n          billingAddress {\n            firstName\n            lastName\n            address1\n            phone\n            city\n            province\n            country\n            zip\n          }\n          currencyCode\n          customer {\n            id\n            firstName\n            lastName\n            email\n          }\n          discountCodes\n          displayFinancialStatus\n          displayFulfillmentStatus\n          email\n          fulfillments(first: 50) {\n            location {\n              id\n            }\n          }\n          lineItems(first: 50) {\n            nodes {\n              variant {\n                id\n              }\n              title\n              originalUnitPriceSet {\n                shopMoney {\n                  amount\n                  currencyCode\n                }\n              }\n              quantity\n              taxLines {\n                title\n                rate\n                priceSet {\n                  shopMoney {\n                    amount\n                    currencyCode\n                  }\n                }\n              }\n            }\n          }\n          note\n          phone\n          shippingAddress {\n            firstName\n            lastName\n            address1\n            phone\n            city\n            province\n            country\n            zip\n          }\n          tags\n          taxLines {\n            title\n            rate\n            priceSet {\n              shopMoney {\n                amount\n                currencyCode\n              }\n            }\n          }\n          totalTaxSet {\n            shopMoney {\n              amount\n              currencyCode\n            }\n          }\n          transactions {\n            kind\n            status\n            amountSet {\n              shopMoney {\n                amount\n                currencyCode\n              }\n            }\n          }\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"order\": {\n        \"lineItems\": [\n          {\n            \"variantId\": \"gid://shopify/ProductVariant/43729076\",\n            \"quantity\": 1\n          }\n        ]\n      }\n    },\n  },\n});\n"}, {"description": "Create an order and apply a fixed discount", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation OrderCreate($order: OrderCreateOrderInput!, $options: OrderCreateOptionsInput) {\n      orderCreate(order: $order, options: $options) {\n        userErrors {\n          field\n          message\n        }\n        order {\n          totalDiscountsSet {\n            shopMoney {\n              amount\n              currencyCode\n            }\n            presentmentMoney {\n              amount\n              currencyCode\n            }\n          }\n          discountCodes\n          discountApplications(first: 5) {\n            nodes {\n              value {\n                ... on MoneyV2 {\n                  amount\n                  currencyCode\n                }\n              }\n            }\n          }\n        }\n      }\n    }`,\n    \"variables\": {\n      \"order\": {\n        \"lineItems\": [\n          {\n            \"variantId\": \"gid://shopify/ProductVariant/43729076\",\n            \"quantity\": 1,\n            \"priceSet\": {\n              \"shopMoney\": {\n                \"amount\": 100.0,\n                \"currencyCode\": \"USD\"\n              },\n              \"presentmentMoney\": {\n                \"amount\": 75.0,\n                \"currencyCode\": \"CAD\"\n              }\n            }\n          }\n        ],\n        \"presentmentCurrency\": \"CAD\",\n        \"discountCode\": {\n          \"itemFixedDiscountCode\": {\n            \"amountSet\": {\n              \"shopMoney\": {\n                \"amount\": 5.0,\n                \"currencyCode\": \"USD\"\n              },\n              \"presentmentMoney\": {\n                \"amount\": 9.0,\n                \"currencyCode\": \"CAD\"\n              }\n            },\n            \"code\": \"BESTSALE\"\n          }\n        }\n      }\n    },\n  },\n});\n"}, {"description": "Create an order and apply a percentage discount", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation OrderCreate($order: OrderCreateOrderInput!, $options: OrderCreateOptionsInput) {\n      orderCreate(order: $order, options: $options) {\n        userErrors {\n          field\n          message\n        }\n        order {\n          totalDiscountsSet {\n            shopMoney {\n              amount\n              currencyCode\n            }\n            presentmentMoney {\n              amount\n              currencyCode\n            }\n          }\n          discountCodes\n          discountApplications(first: 5) {\n            nodes {\n              value {\n                ... on MoneyV2 {\n                  amount\n                  currencyCode\n                }\n                ... on PricingPercentageValue {\n                  percentage\n                }\n              }\n            }\n          }\n        }\n      }\n    }`,\n    \"variables\": {\n      \"order\": {\n        \"lineItems\": [\n          {\n            \"variantId\": \"gid://shopify/ProductVariant/43729076\",\n            \"quantity\": 1\n          }\n        ],\n        \"discountCode\": {\n          \"itemPercentageDiscountCode\": {\n            \"percentage\": 10,\n            \"code\": \"SUMMER SALE\"\n          }\n        }\n      }\n    },\n  },\n});\n"}, {"description": "Create an order with a fulfillment and send customer notification", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation OrderCreate($order: OrderCreateOrderInput!, $options: OrderCreateOptionsInput) {\n      orderCreate(order: $order, options: $options) {\n        userErrors {\n          field\n          message\n        }\n        order {\n          id\n          fulfillments(first: 5) {\n            id\n            status\n            location {\n              id\n            }\n            originAddress {\n              address1\n              city\n              countryCode\n              provinceCode\n              zip\n            }\n            trackingInfo {\n              company\n              number\n            }\n          }\n        }\n      }\n    }`,\n    \"variables\": {\n      \"order\": {\n        \"lineItems\": [\n          {\n            \"variantId\": \"gid://shopify/ProductVariant/43729076\",\n            \"quantity\": 1\n          }\n        ],\n        \"fulfillment\": {\n          \"locationId\": \"gid://shopify/Location/124656943\",\n          \"originAddress\": {\n            \"address1\": \"123 Main St\",\n            \"city\": \"Ottawa\",\n            \"countryCode\": \"CA\",\n            \"provinceCode\": \"ON\",\n            \"zip\": \"K1P 1J1\"\n          },\n          \"trackingCompany\": \"Canada Post\",\n          \"trackingNumber\": \"1234567890\",\n          \"shipmentStatus\": \"DELIVERED\",\n          \"notifyCustomer\": true\n        }\n      }\n    },\n  },\n});\n"}, {"description": "Creating an order with tax lines will split among taxable line items", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation OrderCreate($order: OrderCreateOrderInput!, $options: OrderCreateOptionsInput) {\n      orderCreate(order: $order, options: $options) {\n        userErrors {\n          field\n          message\n        }\n        order {\n          id\n          totalTaxSet {\n            shopMoney {\n              amount\n              currencyCode\n            }\n          }\n          lineItems(first: 5) {\n            nodes {\n              id\n              title\n              quantity\n              variant {\n                id\n              }\n              taxLines {\n                title\n                rate\n                priceSet {\n                  shopMoney {\n                    amount\n                    currencyCode\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }`,\n    \"variables\": {\n      \"order\": {\n        \"lineItems\": [\n          {\n            \"title\": \"Red Leather Coat\",\n            \"priceSet\": {\n              \"shopMoney\": {\n                \"amount\": 129.99,\n                \"currencyCode\": \"USD\"\n              }\n            },\n            \"quantity\": 1\n          },\n          {\n            \"title\": \"Blue Suede Shoes\",\n            \"priceSet\": {\n              \"shopMoney\": {\n                \"amount\": 85.95,\n                \"currencyCode\": \"USD\"\n              }\n            },\n            \"quantity\": 1,\n            \"taxable\": false\n          },\n          {\n            \"title\": \"Raspberry Beret\",\n            \"priceSet\": {\n              \"shopMoney\": {\n                \"amount\": 19.99,\n                \"currencyCode\": \"USD\"\n              }\n            },\n            \"quantity\": 2\n          }\n        ],\n        \"taxLines\": [\n          {\n            \"priceSet\": {\n              \"shopMoney\": {\n                \"amount\": 10.2,\n                \"currencyCode\": \"USD\"\n              }\n            },\n            \"title\": \"State tax\",\n            \"rate\": 0.04\n          },\n          {\n            \"priceSet\": {\n              \"shopMoney\": {\n                \"amount\": 4.25,\n                \"currencyCode\": \"USD\"\n              }\n            },\n            \"title\": \"County tax\",\n            \"rate\": 0.02\n          }\n        ]\n      }\n    },\n  },\n});\n"}, {"description": "orderCreate reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation OrderCreate($order: OrderCreateOrderInput!, $options: OrderCreateOptionsInput) {\n      orderCreate(order: $order, options: $options) {\n        userErrors {\n          field\n          message\n        }\n        order {\n          id\n          totalTaxSet {\n            shopMoney {\n              amount\n              currencyCode\n            }\n          }\n          lineItems(first: 5) {\n            nodes {\n              variant {\n                id\n              }\n              id\n              title\n              quantity\n              taxLines {\n                title\n                rate\n                priceSet {\n                  shopMoney {\n                    amount\n                    currencyCode\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }`,\n    \"variables\": {\n      \"order\": {\n        \"currency\": \"EUR\",\n        \"lineItems\": [\n          {\n            \"title\": \"Big Brown Bear Boots\",\n            \"priceSet\": {\n              \"shopMoney\": {\n                \"amount\": 74.99,\n                \"currencyCode\": \"EUR\"\n              }\n            },\n            \"quantity\": 3,\n            \"taxLines\": [\n              {\n                \"priceSet\": {\n                  \"shopMoney\": {\n                    \"amount\": 13.5,\n                    \"currencyCode\": \"EUR\"\n                  }\n                },\n                \"rate\": 0.06,\n                \"title\": \"State tax\"\n              }\n            ]\n          }\n        ],\n        \"transactions\": [\n          {\n            \"kind\": \"SALE\",\n            \"status\": \"SUCCESS\",\n            \"amountSet\": {\n              \"shopMoney\": {\n                \"amount\": 238.47,\n                \"currencyCode\": \"EUR\"\n              }\n            }\n          }\n        ]\n      }\n    },\n  },\n});\n"}]}, {"name": "orderCreateMandatePayment", "description": "Creates a payment for an order by mandate.", "arguments": [{"name": "amount", "type": "MoneyInput", "required": false, "description": "The payment amount to collect."}, {"name": "autoCapture", "type": "Boolean", "required": false, "description": "Whether the payment should be authorized or captured. If false, then the authorization of\nthe payment is triggered."}, {"name": "id", "type": "ID!", "required": false, "description": "The ID of the order to collect the balance for."}, {"name": "idempotencyKey", "type": "String!", "required": false, "description": "A unique key to identify the payment request."}, {"name": "mandateId", "type": "ID!", "required": false, "description": "The mandate ID used for payment."}, {"name": "paymentScheduleId", "type": "ID", "required": false, "description": "The ID of the payment schedule to collect the balance for."}], "returns": [], "examples": []}, {"name": "orderCreateManualPayment", "description": "Create a manual payment for an order. You can only create a manual payment for an order if it isn't already\nfully paid.", "arguments": [{"name": "amount", "type": "MoneyInput", "required": false, "description": "The manual payment amount to be created."}, {"name": "id", "type": "ID!", "required": false, "description": "The ID of the order to create a manual payment for."}, {"name": "paymentMethodName", "type": "String", "required": false, "description": "The name of the payment method used for creating the payment. If none is provided, then the default manual payment method ('Other') will be used."}], "returns": [], "examples": []}, {"name": "orderDelete", "description": "Deletes an order. For more information on which orders can be deleted, refer to Delete an order.", "arguments": [{"name": "orderId", "type": "ID!", "required": false, "description": "The ID of the order to be deleted."}], "returns": [], "examples": [{"description": "Delete an order", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation OrderDelete($orderId: ID!) {\n      orderDelete(orderId: $orderId) {\n        deletedId\n        userErrors {\n          field\n          message\n          code\n        }\n      }\n    }`,\n    \"variables\": {\n      \"orderId\": \"gid://shopify/Order/776341364\"\n    },\n  },\n});\n"}, {"description": "orderDelete reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation OrderDelete($orderId: ID!) {\n      orderDelete(orderId: $orderId) {\n        deletedId\n        userErrors {\n          field\n          message\n          code\n        }\n      }\n    }`,\n    \"variables\": {\n      \"orderId\": \"gid://shopify/Order/776341364\"\n    },\n  },\n});\n"}]}, {"name": "orderEditAddCustomItem", "description": "Adds a custom line item to an existing order. For example, you could add a gift wrapping service as a custom line item. To learn how to edit existing orders, refer to Edit an existing order with Admin API.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of the calculated order\nto which the custom item is added."}, {"name": "locationId", "type": "ID", "required": false, "description": "The ID of the retail location\n(if applicable) from which the custom item is sold. Used for tax calculations. A default location will be chosen automatically if none is provided."}, {"name": "price", "type": "MoneyInput!", "required": false, "description": "The unit price of the custom item. This value can't be negative."}, {"name": "quantity", "type": "Int!", "required": false, "description": "The quantity of the custom item. This value must be greater than zero."}, {"name": "requiresShipping", "type": "Boolean", "required": false, "description": "Whether the custom item requires shipping. Defaults to false."}, {"name": "taxable", "type": "Boolean", "required": false, "description": "Whether the custom item is taxable. Defaults to true."}, {"name": "title", "type": "String!", "required": false, "description": "The name of the custom item to add."}], "returns": [], "examples": []}, {"name": "orderEditAddLineItemDiscount", "description": "Adds a discount to a line item on the current order edit. For more information on how to use the GraphQL Admin API to edit an existing order, refer to Edit existing orders.", "arguments": [{"name": "discount", "type": "OrderEditAppliedDiscountInput!", "required": false, "description": "The discount to add to the line item."}, {"name": "id", "type": "ID!", "required": false, "description": "The ID of the calculated order\nto update."}, {"name": "lineItemId", "type": "ID!", "required": false, "description": "The ID of the calculated line item to add the discount to."}], "returns": [], "examples": []}, {"name": "orderEditAddShippingLine", "description": "Adds a shipping line to an existing order. For more information on how to use the GraphQL Admin API to edit an existing order, refer to Edit existing orders.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of the calculated order\nto edit."}, {"name": "shippingLine", "type": "OrderEditAddShippingLineInput!", "required": false, "description": "The shipping line to be added."}], "returns": [], "examples": [{"description": "Add a shipping line to an order edit", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation addShippingLine($id: ID!, $shippingLine: OrderEditAddShippingLineInput!) {\n      orderEditAddShippingLine(id: $id, shippingLine: $shippingLine) {\n        calculatedOrder {\n          id\n          totalOutstandingSet {\n            presentmentMoney {\n              amount\n              currencyCode\n            }\n          }\n          totalPriceSet {\n            presentmentMoney {\n              amount\n              currencyCode\n            }\n          }\n        }\n        calculatedShippingLine {\n          id\n          title\n          price {\n            presentmentMoney {\n              amount\n              currencyCode\n            }\n          }\n          stagedStatus\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/CalculatedOrder/607673083\",\n      \"shippingLine\": {\n        \"title\": \"2-Day Shipping\",\n        \"price\": {\n          \"amount\": 19.99,\n          \"currencyCode\": \"USD\"\n        }\n      }\n    },\n  },\n});\n"}, {"description": "orderEditAddShippingLine reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation addShippingLine($id: ID!, $shippingLine: OrderEditAddShippingLineInput!) {\n      orderEditAddShippingLine(id: $id, shippingLine: $shippingLine) {\n        calculatedOrder {\n          id\n          totalOutstandingSet {\n            presentmentMoney {\n              amount\n              currencyCode\n            }\n          }\n          totalPriceSet {\n            presentmentMoney {\n              amount\n              currencyCode\n            }\n          }\n        }\n        calculatedShippingLine {\n          id\n          title\n          price {\n            presentmentMoney {\n              amount\n              currencyCode\n            }\n          }\n          stagedStatus\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/CalculatedOrder/607673083\",\n      \"shippingLine\": {\n        \"title\": \"2-Day Shipping\",\n        \"price\": {\n          \"amount\": 19.99,\n          \"currencyCode\": \"USD\"\n        }\n      }\n    },\n  },\n});\n"}]}, {"name": "orderEditAddVariant", "description": "Adds a line item from an existing product variant. As of API version 2025-04, the orderEditAddVariant API will respect the contextual pricing of the variant.", "arguments": [{"name": "allowDuplicates", "type": "Boolean", "required": false, "description": "Whether the mutation can create a line item for a variant that's already on the calculated order."}, {"name": "id", "type": "ID!", "required": false, "description": "The ID of the calculated order\nto edit."}, {"name": "locationId", "type": "ID", "required": false, "description": "The ID of the location\nto check for inventory availability. A default location ID is chosen automatically if none is provided."}, {"name": "quantity", "type": "Int!", "required": false, "description": "The quantity of the item to add to the order. Must be a positive value."}, {"name": "variantId", "type": "ID!", "required": false, "description": "The ID of the variant to add."}], "returns": [], "examples": []}, {"name": "orderEditBegin", "description": "Starts editing an order. Mutations are operating on OrderEdit.\nAll order edits start with orderEditBegin, have any number of orderEdit* mutations made, and end with orderEditCommit.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of the order to begin editing."}], "returns": [], "examples": []}, {"name": "orderEditCommit", "description": "Applies and saves staged changes to an order. Mutations are operating on OrderEdit.\nAll order edits start with orderEditBegin, have any number of orderEdit* mutations made, and end with orderEditCommit.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of the calculated order\nthat will have its changes applied to the order."}, {"name": "notifyCustomer", "type": "Boolean", "required": false, "description": "Whether to notify the customer or not."}, {"name": "staffNote", "type": "String", "required": false, "description": "Note for staff members."}], "returns": [], "examples": []}, {"name": "orderEditRemoveDiscount", "description": "Removes a discount on the current order edit. For more information on how to use the GraphQL Admin API to edit an existing order, refer to Edit existing orders.", "arguments": [{"name": "discountApplicationId", "type": "ID!", "required": false, "description": "The ID of the calculated discount application\nto remove."}, {"name": "id", "type": "ID!", "required": false, "description": "The ID of the calculated order\nfrom which to remove the discount."}], "returns": [], "examples": []}, {"name": "orderEditRemoveLineItemDiscount", "description": "Removes a line item discount that was applied as part of an order edit. Use orderEditRemoveDiscount instead.", "arguments": [{"name": "discountApplicationId", "type": "ID!", "required": false, "description": "The ID of the calculated discount application\nto remove."}, {"name": "id", "type": "ID!", "required": false, "description": "The ID of the calculated order\nfrom which to remove the discount."}], "returns": [], "examples": []}, {"name": "orderEditRemoveShippingLine", "description": "Removes a shipping line from an existing order. For more information on how to use the GraphQL Admin API to edit an existing order, refer to Edit existing orders.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of the calculated order\nto edit."}, {"name": "shippingLineId", "type": "ID!", "required": false, "description": "The ID of the calculated shipping line to remove."}], "returns": [], "examples": [{"description": "Remove a staged shipping line from an order edit", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation removeShippingLine($id: ID!, $shippingLineId: ID!) {\n      orderEditRemoveShippingLine(id: $id, shippingLineId: $shippingLineId) {\n        calculatedOrder {\n          id\n          totalOutstandingSet {\n            presentmentMoney {\n              amount\n              currencyCode\n            }\n          }\n          totalPriceSet {\n            presentmentMoney {\n              amount\n              currencyCode\n            }\n          }\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/CalculatedOrder/607673085\",\n      \"shippingLineId\": \"gid://shopify/CalculatedShippingLine/6ffda6d8-c0cf-44d6-8aa4-e89cea4a6607\"\n    },\n  },\n});\n"}, {"description": "orderEditRemoveShippingLine reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation removeShippingLine($id: ID!, $shippingLineId: ID!) {\n      orderEditRemoveShippingLine(id: $id, shippingLineId: $shippingLineId) {\n        calculatedOrder {\n          id\n          totalOutstandingSet {\n            presentmentMoney {\n              amount\n              currencyCode\n            }\n          }\n          totalPriceSet {\n            presentmentMoney {\n              amount\n              currencyCode\n            }\n          }\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/CalculatedOrder/607673085\",\n      \"shippingLineId\": \"gid://shopify/CalculatedShippingLine/6ffda6d8-c0cf-44d6-8aa4-e89cea4a6607\"\n    },\n  },\n});\n"}]}, {"name": "orderEditSetQuantity", "description": "Sets the quantity of a line item on an order that is being edited. For more information on how to use the GraphQL Admin API to edit an existing order, refer to Edit existing orders.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of the calculated order\nto edit. The edit changes the quantity on the line item."}, {"name": "lineItemId", "type": "ID!", "required": false, "description": "The ID of the calculated line item to edit."}, {"name": "quantity", "type": "Int!", "required": false, "description": "The new quantity to set for the line item. This value cannot be negative."}, {"name": "restock", "type": "Boolean", "required": false, "description": "Whether or not to restock the line item when the updated quantity is less than the original quantity."}, {"name": "locationId", "type": "ID", "required": false, "description": "The ID of the location. If 'restock' is set to true, the restocked item will be made available\nat the specified location. No longer supported."}], "returns": [], "examples": []}, {"name": "orderEditUpdateDiscount", "description": "Updates a manual line level discount on the current order edit. For more information on how to use the GraphQL Admin API to edit an existing order, refer to Edit existing orders.", "arguments": [{"name": "discount", "type": "OrderEditAppliedDiscountInput!", "required": false, "description": "The updated discount."}, {"name": "discountApplicationId", "type": "ID!", "required": false, "description": "The ID of the calculated discount application\nto update."}, {"name": "id", "type": "ID!", "required": false, "description": "The ID of the calculated order\nfrom which to update the discount."}], "returns": [], "examples": []}, {"name": "orderEditUpdateShippingLine", "description": "Updates a shipping line on the current order edit. For more information on how to use the GraphQL Admin API to edit an existing order, refer to Edit existing orders.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of the calculated order\nfrom which to update the shipping line."}, {"name": "shippingLine", "type": "OrderEditUpdateShippingLineInput!", "required": false, "description": "The updated shipping line."}, {"name": "shippingLineId", "type": "ID!", "required": false, "description": "The ID of the calculated shipping line to update."}], "returns": [], "examples": [{"description": "Get a user error when updating a committed shipping line", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation updateShippingLine($id: ID!, $shippingLine: OrderEditUpdateShippingLineInput!, $shippingLineId: ID!) {\n      orderEditUpdateShippingLine(id: $id, shippingLine: $shippingLine, shippingLineId: $shippingLineId) {\n        calculatedOrder {\n          id\n          totalOutstandingSet {\n            presentmentMoney {\n              amount\n              currencyCode\n            }\n          }\n          totalPriceSet {\n            presentmentMoney {\n              amount\n              currencyCode\n            }\n          }\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/CalculatedOrder/607673082\",\n      \"shippingLineId\": \"gid://shopify/ShippingLine/1072813969\",\n      \"shippingLine\": {\n        \"title\": \"2-Day Shipping\",\n        \"price\": {\n          \"amount\": 19.99,\n          \"currencyCode\": \"USD\"\n        }\n      }\n    },\n  },\n});\n"}, {"description": "Update a staged shipping line on an order edit", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation updateShippingLine($id: ID!, $shippingLine: OrderEditUpdateShippingLineInput!, $shippingLineId: ID!) {\n      orderEditUpdateShippingLine(id: $id, shippingLine: $shippingLine, shippingLineId: $shippingLineId) {\n        calculatedOrder {\n          id\n          totalOutstandingSet {\n            presentmentMoney {\n              amount\n              currencyCode\n            }\n          }\n          totalPriceSet {\n            presentmentMoney {\n              amount\n              currencyCode\n            }\n          }\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/CalculatedOrder/607673080\",\n      \"shippingLineId\": \"gid://shopify/CalculatedShippingLine/52ccb02a-dbb1-4b10-ac24-3e7861a641ec\",\n      \"shippingLine\": {\n        \"title\": \"2-Day Shipping\",\n        \"price\": {\n          \"amount\": 19.99,\n          \"currencyCode\": \"USD\"\n        }\n      }\n    },\n  },\n});\n"}, {"description": "orderEditUpdateShippingLine reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation updateShippingLine($id: ID!, $shippingLine: OrderEditUpdateShippingLineInput!, $shippingLineId: ID!) {\n      orderEditUpdateShippingLine(id: $id, shippingLine: $shippingLine, shippingLineId: $shippingLineId) {\n        calculatedOrder {\n          id\n          totalOutstandingSet {\n            presentmentMoney {\n              amount\n              currencyCode\n            }\n          }\n          totalPriceSet {\n            presentmentMoney {\n              amount\n              currencyCode\n            }\n          }\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/CalculatedOrder/607673082\",\n      \"shippingLineId\": \"gid://shopify/ShippingLine/1072813969\",\n      \"shippingLine\": {\n        \"title\": \"2-Day Shipping\",\n        \"price\": {\n          \"amount\": 19.99,\n          \"currencyCode\": \"USD\"\n        }\n      }\n    },\n  },\n});\n"}]}, {"name": "orderInvoiceSend", "description": "Sends an email invoice for an order.", "arguments": [{"name": "email", "type": "EmailInput", "required": false, "description": "The email input fields for the order invoice. The bcc and from fields should be store or staff account emails."}, {"name": "id", "type": "ID!", "required": false, "description": "The order associated with the invoice."}], "returns": [], "examples": [{"description": "Send invoice", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation OrderInvoiceSend($orderId: ID!, $email: EmailInput) {\n      orderInvoiceSend(id: $orderId, email: $email) {\n        order {\n          id\n        }\n        userErrors {\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"orderId\": \"gid://shopify/Order/17181286\",\n      \"email\": {\n        \"to\": \"test@example.net\",\n        \"from\": \"Sales Modyl <salesmodel@example.com>\",\n        \"subject\": \"Invoice #1001\",\n        \"customMessage\": \"Thank you for your order\"\n      }\n    },\n  },\n});\n"}, {"description": "orderInvoiceSend reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation OrderInvoiceSend($orderId: ID!, $email: EmailInput) {\n      orderInvoiceSend(id: $orderId, email: $email) {\n        order {\n          id\n        }\n        userErrors {\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"orderId\": \"gid://shopify/Order/17181286\",\n      \"email\": {\n        \"to\": \"test@example.net\",\n        \"from\": \"Sales Modyl <salesmodel@example.com>\",\n        \"subject\": \"Invoice #1001\",\n        \"customMessage\": \"Thank you for your order\"\n      }\n    },\n  },\n});\n"}]}, {"name": "orderMarkAsPaid", "description": "Marks an order as paid. You can only mark an order as paid if it isn't already fully paid.", "arguments": [{"name": "input", "type": "OrderMarkAsPaidInput!", "required": false, "description": "The input for the mutation."}], "returns": [], "examples": []}, {"name": "orderOpen", "description": "Opens a closed order.", "arguments": [{"name": "input", "type": "OrderOpenInput!", "required": false, "description": "The input for the mutation."}], "returns": [], "examples": [{"description": "Re-open a closed order", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation OrderOpen($input: OrderOpenInput!) {\n      orderOpen(input: $input) {\n        order {\n          canMarkAsPaid\n          cancelReason\n          cancelledAt\n          clientIp\n          confirmed\n          customer {\n            displayName\n            email\n          }\n          discountCodes\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"input\": {\n        \"id\": \"gid://shopify/Order/235240302\"\n      }\n    },\n  },\n});\n"}, {"description": "orderOpen reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation OrderOpen($input: OrderOpenInput!) {\n      orderOpen(input: $input) {\n        order {\n          canMarkAsPaid\n          cancelReason\n          cancelledAt\n          clientIp\n          confirmed\n          customer {\n            displayName\n            email\n          }\n          discountCodes\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"input\": {\n        \"id\": \"gid://shopify/Order/235240302\"\n      }\n    },\n  },\n});\n"}]}, {"name": "orderRiskAssessmentCreate", "description": "Create a risk assessment for an order.", "arguments": [{"name": "orderRiskAssessmentInput", "type": "OrderRiskAssessmentCreateInput!", "required": false, "description": "The input fields required to create a risk assessment."}], "returns": [], "examples": [{"description": "Create a risk assessment for an order", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation OrderRiskAssessmentCreate($input: OrderRiskAssessmentCreateInput!) {\n      orderRiskAssessmentCreate(orderRiskAssessmentInput: $input) {\n        userErrors {\n          field\n          message\n        }\n        orderRiskAssessment {\n          facts {\n            description\n            sentiment\n          }\n          provider {\n            title\n          }\n          riskLevel\n        }\n      }\n    }`,\n    \"variables\": {\n      \"input\": {\n        \"orderId\": \"gid://shopify/Order/148977776\",\n        \"riskLevel\": \"LOW\",\n        \"facts\": [\n          {\n            \"description\": \"Payment verification successful.\",\n            \"sentiment\": \"POSITIVE\"\n          },\n          {\n            \"description\": \"Buyer verification inconclusive.\",\n            \"sentiment\": \"NEUTRAL\"\n          }\n        ]\n      }\n    },\n  },\n});\n"}, {"description": "Creates an order risk for an order", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation OrderRiskAssessmentCreate($input: OrderRiskAssessmentCreateInput!) {\n      orderRiskAssessmentCreate(orderRiskAssessmentInput: $input) {\n        userErrors {\n          field\n          message\n        }\n        orderRiskAssessment {\n          facts {\n            description\n            sentiment\n          }\n          provider {\n            title\n          }\n          riskLevel\n        }\n      }\n    }`,\n    \"variables\": {\n      \"input\": {\n        \"orderId\": \"gid://shopify/Order/148977776\",\n        \"riskLevel\": \"LOW\",\n        \"facts\": [\n          {\n            \"description\": \"Payment verification successful.\",\n            \"sentiment\": \"POSITIVE\"\n          },\n          {\n            \"description\": \"Buyer verification inconclusive.\",\n            \"sentiment\": \"NEUTRAL\"\n          }\n        ]\n      }\n    },\n  },\n});\n"}, {"description": "orderRiskAssessmentCreate reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation OrderRiskAssessmentCreate($input: OrderRiskAssessmentCreateInput!) {\n      orderRiskAssessmentCreate(orderRiskAssessmentInput: $input) {\n        userErrors {\n          field\n          message\n        }\n        orderRiskAssessment {\n          facts {\n            description\n            sentiment\n          }\n          provider {\n            title\n          }\n          riskLevel\n        }\n      }\n    }`,\n    \"variables\": {\n      \"input\": {\n        \"orderId\": \"gid://shopify/Order/148977776\",\n        \"riskLevel\": \"LOW\",\n        \"facts\": [\n          {\n            \"description\": \"Payment verification successful.\",\n            \"sentiment\": \"POSITIVE\"\n          },\n          {\n            \"description\": \"Buyer verification inconclusive.\",\n            \"sentiment\": \"NEUTRAL\"\n          }\n        ]\n      }\n    },\n  },\n});\n"}]}, {"name": "orderUpdate", "description": "Updates the attributes of an order, such as the customer's email, the shipping address for the order,\ntags, and metafields associated with the order.\nIf you need to make significant updates to an order, such as adding or removing line items, changing\nquantities, or modifying discounts, then use\nthe orderEditBegin\nmutation instead. The orderEditBegin mutation initiates an order editing session,\nallowing you to make multiple changes before finalizing them. Learn more about using the orderEditBegin\nmutation to edit existing orders.\nLearn how to build apps that integrate with\norder management and fulfillment processes.", "arguments": [{"name": "input", "type": "OrderInput!", "required": false, "description": "The attributes of the updated order."}], "returns": [], "examples": [{"description": "Create a new metafield and update another on an existing order", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation updateOrderMetafields($input: OrderInput!) {\n      orderUpdate(input: $input) {\n        order {\n          id\n          metafields(first: 3) {\n            edges {\n              node {\n                id\n                namespace\n                key\n                value\n              }\n            }\n          }\n        }\n        userErrors {\n          message\n          field\n        }\n      }\n    }`,\n    \"variables\": {\n      \"input\": {\n        \"metafields\": [\n          {\n            \"namespace\": \"my_field\",\n            \"key\": \"delivery_instructions\",\n            \"type\": \"single_line_text_field\",\n            \"value\": \"leave on back porch\"\n          },\n          {\n            \"id\": \"gid://shopify/Metafield/1069228968\",\n            \"value\": \"123\"\n          }\n        ],\n        \"id\": \"gid://shopify/Order/148977776\"\n      }\n    },\n  },\n});\n"}, {"description": "Update an order", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation OrderUpdate($input: OrderInput!) {\n      orderUpdate(input: $input) {\n        order {\n          canMarkAsPaid\n          cancelReason\n          cancelledAt\n          clientIp\n          confirmed\n          customer {\n            displayName\n            email\n          }\n          discountCodes\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"input\": {\n        \"id\": \"gid://shopify/Order/148977776\",\n        \"email\": \"bob@example.com\",\n        \"tags\": [\n          \"foo\",\n          \"bar\"\n        ]\n      }\n    },\n  },\n});\n"}, {"description": "orderUpdate reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation updateOrderMetafields($input: OrderInput!) {\n      orderUpdate(input: $input) {\n        order {\n          id\n          metafields(first: 3) {\n            edges {\n              node {\n                id\n                namespace\n                key\n                value\n              }\n            }\n          }\n        }\n        userErrors {\n          message\n          field\n        }\n      }\n    }`,\n    \"variables\": {\n      \"input\": {\n        \"metafields\": [\n          {\n            \"namespace\": \"my_field\",\n            \"key\": \"delivery_instructions\",\n            \"type\": \"single_line_text_field\",\n            \"value\": \"leave on back porch\"\n          },\n          {\n            \"id\": \"gid://shopify/Metafield/1069228968\",\n            \"value\": \"123\"\n          }\n        ],\n        \"id\": \"gid://shopify/Order/148977776\"\n      }\n    },\n  },\n});\n"}]}, {"name": "refundCreate", "description": "Creates a refund.", "arguments": [{"name": "input", "type": "RefundInput!", "required": false, "description": "The input fields that are used in the mutation for creating a refund."}], "returns": [], "examples": [{"description": "Creates a refund", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation RefundCreate($input: RefundInput!) {\n      refundCreate(input: $input) {\n        refund {\n          id\n          totalRefundedSet {\n            presentmentMoney {\n              amount\n              currencyCode\n            }\n          }\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"input\": {\n        \"orderId\": \"gid://shopify/Order/734509473\",\n        \"refundLineItems\": [\n          {\n            \"lineItemId\": \"gid://shopify/LineItem/25746870\",\n            \"quantity\": 1\n          }\n        ],\n        \"transactions\": []\n      }\n    },\n  },\n});\n"}, {"description": "refundCreate reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation M($input: RefundInput!) {\n      refundCreate(input: $input) {\n        userErrors {\n          field\n          message\n        }\n        refund {\n          id\n          note\n          totalRefundedSet {\n            presentmentMoney {\n              amount\n            }\n          }\n        }\n      }\n    }`,\n    \"variables\": {\n      \"input\": {\n        \"orderId\": \"gid://shopify/Order/734509473\",\n        \"note\": \"Want to exchange for a different item\",\n        \"refundLineItems\": [\n          {\n            \"lineItemId\": \"gid://shopify/LineItem/25746870\",\n            \"quantity\": 2\n          }\n        ],\n        \"transactions\": [\n          {\n            \"orderId\": \"gid://shopify/Order/734509473\",\n            \"gateway\": \"foo\",\n            \"kind\": \"REFUND\",\n            \"amount\": \"10.0\",\n            \"parentId\": \"gid://shopify/OrderTransaction/723599266\"\n          }\n        ]\n      }\n    },\n  },\n});\n"}]}, {"name": "returnApproveRequest", "description": "Approves a customer's return request.\nIf this mutation is successful, then the Return.status field of the\napproved return is set to OPEN.", "arguments": [{"name": "input", "type": "ReturnApproveRequestInput!", "required": false, "description": "The input fields to approve a return."}], "returns": [], "examples": [{"description": "Approve a return", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation ReturnApproveRequest($input: ReturnApproveRequestInput!) {\n      returnApproveRequest(input: $input) {\n        return {\n          id\n          name\n          status\n          returnLineItems(first: 1) {\n            edges {\n              node {\n                id\n              }\n            }\n          }\n          order {\n            id\n          }\n        }\n        userErrors {\n          code\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"input\": {\n        \"id\": \"gid://shopify/Return/945000959\"\n      }\n    },\n  },\n});\n"}, {"description": "Cannot approve a return with an invalid status", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation ReturnApproveRequest($input: ReturnApproveRequestInput!) {\n      returnApproveRequest(input: $input) {\n        return {\n          id\n          status\n        }\n        userErrors {\n          code\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"input\": {\n        \"id\": \"gid://shopify/Return/945000958\"\n      }\n    },\n  },\n});\n"}, {"description": "returnApproveRequest reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation ReturnApproveRequest($input: ReturnApproveRequestInput!) {\n      returnApproveRequest(input: $input) {\n        return {\n          id\n          name\n          status\n          returnLineItems(first: 1) {\n            edges {\n              node {\n                id\n              }\n            }\n          }\n          order {\n            id\n          }\n        }\n        userErrors {\n          code\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"input\": {\n        \"id\": \"gid://shopify/Return/945000959\"\n      }\n    },\n  },\n});\n"}]}, {"name": "returnCancel", "description": "Cancels a return and restores the items back to being fulfilled.\nCanceling a return is only available before any work has been done\non the return (such as an inspection or refund).", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of the return to cancel."}, {"name": "notifyCustomer", "type": "Boolean", "required": false, "description": "Whether the customer receives an email notification regarding the canceled return. Not supported. This argument will be removed in a future version."}], "returns": [], "examples": []}, {"name": "returnClose", "description": "Indicates a return is complete, either when a refund has been made and items restocked,\nor simply when it has been marked as returned in the system.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of the return to close."}], "returns": [], "examples": []}, {"name": "returnCreate", "description": "Creates a return.", "arguments": [{"name": "returnInput", "type": "ReturnInput!", "required": false, "description": "Specifies the input fields for a return."}], "returns": [], "examples": []}, {"name": "returnDeclineRequest", "description": "Declines a return on an order.\nWhen a return is declined, each ReturnLineItem.fulfillmentLineItem can be associated to a new return.\nUse the ReturnCreate or ReturnRequest mutation to initiate a new return.", "arguments": [{"name": "input", "type": "ReturnDeclineRequestInput!", "required": false, "description": "The input fields for declining a customer's return request."}], "returns": [], "examples": [{"description": "Cannot decline a return that has been refunded", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation ReturnDeclineRequest($input: ReturnDeclineRequestInput!) {\n      returnDeclineRequest(input: $input) {\n        return {\n          id\n          status\n        }\n        userErrors {\n          code\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"input\": {\n        \"id\": \"gid://shopify/Return/491427904\",\n        \"declineReason\": \"RETURN_PERIOD_ENDED\"\n      }\n    },\n  },\n});\n"}, {"description": "Cannot decline a return with an invalid status", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation ReturnDeclineRequest($input: ReturnDeclineRequestInput!) {\n      returnDeclineRequest(input: $input) {\n        return {\n          id\n          status\n        }\n        userErrors {\n          code\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"input\": {\n        \"id\": \"gid://shopify/Return/945000954\",\n        \"declineReason\": \"RETURN_PERIOD_ENDED\"\n      }\n    },\n  },\n});\n"}, {"description": "Decline a return", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation ReturnDeclineRequest($input: ReturnDeclineRequestInput!) {\n      returnDeclineRequest(input: $input) {\n        return {\n          id\n          status\n          decline {\n            reason\n          }\n          returnLineItems(first: 1) {\n            edges {\n              node {\n                id\n              }\n            }\n          }\n          order {\n            id\n          }\n        }\n        userErrors {\n          code\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"input\": {\n        \"id\": \"gid://shopify/Return/945000960\",\n        \"declineReason\": \"RETURN_PERIOD_ENDED\"\n      }\n    },\n  },\n});\n"}]}, {"name": "returnLineItemRemoveFromReturn", "description": "Removes return lines from a return.", "arguments": [{"name": "returnId", "type": "ID!", "required": false, "description": "The ID of the return for line item removal."}, {"name": "returnLineItems", "type": "[ReturnLineItemRemoveFromReturnInput!]!", "required": false, "description": "The return line items to remove from the return."}], "returns": [], "examples": [{"description": "Remove a return line item from a return", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation ReturnLineItemRemoveFromReturn($returnId: ID!, $returnLineItems: [ReturnLineItemRemoveFromReturnInput!]!) {\n      returnLineItemRemoveFromReturn(returnId: $returnId, returnLineItems: $returnLineItems) {\n        userErrors {\n          field\n          message\n        }\n        return {\n          id\n          status\n          returnLineItems(first: 10) {\n            edges {\n              node {\n                id\n                quantity\n              }\n            }\n          }\n        }\n      }\n    }`,\n    \"variables\": {\n      \"returnId\": \"gid://shopify/Return/945000969\",\n      \"returnLineItems\": [\n        {\n          \"returnLineItemId\": \"gid://shopify/ReturnLineItem/791246324\",\n          \"quantity\": 1\n        }\n      ]\n    },\n  },\n});\n"}, {"description": "returnLineItemRemoveFromReturn reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation ReturnLineItemRemoveFromReturn($returnId: ID!, $returnLineItems: [ReturnLineItemRemoveFromReturnInput!]!) {\n      returnLineItemRemoveFromReturn(returnId: $returnId, returnLineItems: $returnLineItems) {\n        userErrors {\n          field\n          message\n        }\n        return {\n          id\n          status\n          returnLineItems(first: 10) {\n            edges {\n              node {\n                id\n                quantity\n              }\n            }\n          }\n        }\n      }\n    }`,\n    \"variables\": {\n      \"returnId\": \"gid://shopify/Return/945000969\",\n      \"returnLineItems\": [\n        {\n          \"returnLineItemId\": \"gid://shopify/ReturnLineItem/791246324\",\n          \"quantity\": 1\n        }\n      ]\n    },\n  },\n});\n"}]}, {"name": "returnRefund", "description": "Refunds a return when its status is OPEN or CLOSED and associates it with the related return request.", "arguments": [{"name": "returnRefundInput", "type": "ReturnRefundInput!", "required": false, "description": "The input fields to refund a return."}], "returns": [], "examples": []}, {"name": "returnReopen", "description": "Reopens a closed return.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of the return to reopen."}], "returns": [], "examples": []}, {"name": "returnRequest", "description": "A customer's return request that hasn't been approved or declined.\nThis mutation sets the value of the Return.status field to REQUESTED.\nTo create a return that has the Return.status field set to OPEN, use the returnCreate mutation.", "arguments": [{"name": "input", "type": "ReturnRequestInput!", "required": false, "description": "The input fields for requesting a return."}], "returns": [], "examples": [{"description": "Request a return", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation ReturnRequest($input: ReturnRequestInput!) {\n      returnRequest(input: $input) {\n        userErrors {\n          field\n          message\n        }\n        return {\n          id\n          status\n          returnLineItems(first: 1) {\n            edges {\n              node {\n                id\n                returnReason\n                customerNote\n              }\n            }\n          }\n          order {\n            id\n          }\n        }\n      }\n    }`,\n    \"variables\": {\n      \"input\": {\n        \"orderId\": \"gid://shopify/Order/625362839\",\n        \"returnLineItems\": [\n          {\n            \"fulfillmentLineItemId\": \"gid://shopify/FulfillmentLineItem/820022594\",\n            \"quantity\": 1,\n            \"returnReason\": \"WRONG_ITEM\",\n            \"customerNote\": \"Sorry, I ordered the wrong item. Could I get a refund or store credit?\"\n          }\n        ]\n      }\n    },\n  },\n});\n"}, {"description": "returnRequest reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation ReturnRequest($input: ReturnRequestInput!) {\n      returnRequest(input: $input) {\n        userErrors {\n          field\n          message\n        }\n        return {\n          id\n          status\n          returnLineItems(first: 1) {\n            edges {\n              node {\n                id\n                returnReason\n                customerNote\n              }\n            }\n          }\n          order {\n            id\n          }\n        }\n      }\n    }`,\n    \"variables\": {\n      \"input\": {\n        \"orderId\": \"gid://shopify/Order/625362839\",\n        \"returnLineItems\": [\n          {\n            \"fulfillmentLineItemId\": \"gid://shopify/FulfillmentLineItem/820022594\",\n            \"quantity\": 1,\n            \"returnReason\": \"WRONG_ITEM\",\n            \"customerNote\": \"Sorry, I ordered the wrong item. Could I get a refund or store credit?\"\n          }\n        ]\n      }\n    },\n  },\n});\n"}]}, {"name": "reverseDeliveryCreateWithShipping", "description": "Creates a new reverse delivery with associated external shipping information.", "arguments": [{"name": "labelInput", "type": "ReverseDeliveryLabelInput", "required": false, "description": "The return label file information for the reverse delivery."}, {"name": "notifyCustomer", "type": "Boolean", "required": false, "description": "When true the customer is notified with delivery instructions if the ReverseFulfillmentOrder.order.email is present."}, {"name": "reverseDeliveryLineItems", "type": "[ReverseDeliveryLineItemInput!]!", "required": false, "description": "The reverse delivery line items to be created. If an empty array is provided, then this mutation\nwill create a reverse delivery line item for each reverse fulfillment order line item, with its quantity equal\nto the reverse fulfillment order line item total quantity."}, {"name": "reverseFulfillmentOrderId", "type": "ID!", "required": false, "description": "The ID of the reverse fulfillment order that's associated to the reverse delivery."}, {"name": "trackingInput", "type": "ReverseDeliveryTrackingInput", "required": false, "description": "The tracking information for the reverse delivery."}], "returns": [], "examples": []}, {"name": "reverseDeliveryShippingUpdate", "description": "Updates a reverse delivery with associated external shipping information.", "arguments": [{"name": "labelInput", "type": "ReverseDeliveryLabelInput", "required": false, "description": "The return label file information for the reverse delivery."}, {"name": "notifyCustomer", "type": "Boolean", "required": false, "description": "If true and an email address exists on the ReverseFulfillmentOrder.order, then the customer is notified with the updated delivery instructions."}, {"name": "reverseDeliveryId", "type": "ID!", "required": false, "description": "The ID of the reverse delivery to update."}, {"name": "trackingInput", "type": "ReverseDeliveryTrackingInput", "required": false, "description": "The tracking information for the reverse delivery."}], "returns": [], "examples": []}, {"name": "reverseFulfillmentOrderDispose", "description": "Disposes reverse fulfillment order line items.", "arguments": [{"name": "dispositionInputs", "type": "[ReverseFulfillmentOrderDisposeInput!]!", "required": false, "description": "The input parameters required to dispose reverse fulfillment order line items."}], "returns": [], "examples": []}, {"name": "subscriptionBillingAttemptCreate", "description": "Creates a new subscription billing attempt. For more information, refer to Create a subscription contract.", "arguments": [{"name": "subscriptionBillingAttemptInput", "type": "SubscriptionBillingAttemptInput!", "required": false, "description": "The information to apply as a billing attempt."}, {"name": "subscriptionContractId", "type": "ID!", "required": false, "description": "The ID of the subscription contract."}], "returns": [], "examples": [{"description": "Create a billing attempt on a specific billing cycle", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation subscriptionBillingAttemptCreate($contractId: ID!, $index: Int!) {\n      subscriptionBillingAttemptCreate(subscriptionContractId: $contractId, subscriptionBillingAttemptInput: {billingCycleSelector: {index: $index}, idempotencyKey: \"aaa-bbb-ccc\", originTime: \"2020-10-01T10:00:00Z\"}) {\n        subscriptionBillingAttempt {\n          id\n          ready\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"contractId\": \"gid://shopify/SubscriptionContract/593791907\",\n      \"index\": 1\n    },\n  },\n});\n"}, {"description": "subscriptionBillingAttemptCreate reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation subscriptionBillingAttemptCreate($contractId: ID!, $index: Int!) {\n      subscriptionBillingAttemptCreate(subscriptionContractId: $contractId, subscriptionBillingAttemptInput: {billingCycleSelector: {index: $index}, idempotencyKey: \"aaa-bbb-ccc\", originTime: \"2020-10-01T10:00:00Z\"}) {\n        subscriptionBillingAttempt {\n          id\n          ready\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"contractId\": \"gid://shopify/SubscriptionContract/593791907\",\n      \"index\": 1\n    },\n  },\n});\n"}]}, {"name": "subscriptionBillingCycleBulkCharge", "description": "Asynchronously queries and charges all subscription billing cycles whose billingAttemptExpectedDate values fall within a specified date range and meet additional filtering criteria. The results of this action can be retrieved using the subscriptionBillingCycleBulkResults query.", "arguments": [{"name": "billingAttemptExpectedDateRange", "type": "SubscriptionBillingCyclesDateRangeSelector!", "required": false, "description": "Specifies the date range within which the billingAttemptExpectedDate values of the billing cycles should fall."}, {"name": "filters", "type": "SubscriptionBillingCycleBulkFilters", "required": false, "description": "Criteria to filter the billing cycles on which the action is executed."}, {"name": "inventoryPolicy", "type": "SubscriptionBillingAttemptInventoryPolicy", "required": false, "description": "The behaviour to use when updating inventory."}], "returns": [], "examples": [{"description": "Create a job to charge all subscription billing cycles in time range", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation($startDate: DateTime!, $endDate: DateTime!) {\n      subscriptionBillingCycleBulkCharge(billingAttemptExpectedDateRange: {startDate: $startDate, endDate: $endDate}) {\n        job {\n          id\n        }\n      }\n    }`,\n    \"variables\": {\n      \"startDate\": \"2023-02-01T00:00:00-05:00\",\n      \"endDate\": \"2023-02-02T23:59:59-05:00\"\n    },\n  },\n});\n"}, {"description": "subscriptionBillingCycleBulkCharge reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation($startDate: DateTime!, $endDate: DateTime!) {\n      subscriptionBillingCycleBulkCharge(billingAttemptExpectedDateRange: {startDate: $startDate, endDate: $endDate}) {\n        job {\n          id\n        }\n      }\n    }`,\n    \"variables\": {\n      \"startDate\": \"2023-02-01T00:00:00-05:00\",\n      \"endDate\": \"2023-02-02T23:59:59-05:00\"\n    },\n  },\n});\n"}]}, {"name": "subscriptionBillingCycleBulkSearch", "description": "Asynchronously queries all subscription billing cycles whose billingAttemptExpectedDate values fall within a specified date range and meet additional filtering criteria. The results of this action can be retrieved using the subscriptionBillingCycleBulkResults query.", "arguments": [{"name": "billingAttemptExpectedDateRange", "type": "SubscriptionBillingCyclesDateRangeSelector!", "required": false, "description": "Specifies the date range within which the billingAttemptExpectedDate values of the billing cycles should fall."}, {"name": "filters", "type": "SubscriptionBillingCycleBulkFilters", "required": false, "description": "Criteria to filter the billing cycles on which the action is executed."}], "returns": [], "examples": [{"description": "Create a job to search for all subscription billing cycles in time range", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation($startDate: DateTime!, $endDate: DateTime!) {\n      subscriptionBillingCycleBulkSearch(billingAttemptExpectedDateRange: {startDate: $startDate, endDate: $endDate}) {\n        job {\n          id\n        }\n      }\n    }`,\n    \"variables\": {\n      \"startDate\": \"2023-02-01T00:00:00-05:00\",\n      \"endDate\": \"2023-02-02T23:59:59-05:00\"\n    },\n  },\n});\n"}, {"description": "subscriptionBillingCycleBulkSearch reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation($startDate: DateTime!, $endDate: DateTime!) {\n      subscriptionBillingCycleBulkSearch(billingAttemptExpectedDateRange: {startDate: $startDate, endDate: $endDate}) {\n        job {\n          id\n        }\n      }\n    }`,\n    \"variables\": {\n      \"startDate\": \"2023-02-01T00:00:00-05:00\",\n      \"endDate\": \"2023-02-02T23:59:59-05:00\"\n    },\n  },\n});\n"}]}, {"name": "subscriptionBillingCycleCharge", "description": "Creates a new subscription billing attempt for a specified billing cycle. This is the alternative mutation for subscriptionBillingAttemptCreate. For more information, refer to Create a subscription contract.", "arguments": [{"name": "billingCycleSelector", "type": "SubscriptionBillingCycleSelector!", "required": false, "description": "Select the specific billing cycle to be billed.\nIf the selected billing cycle's billingAttemptExpectedDate is in the past, the originTime of the billing attempt will be set to this date. However, if the billingAttemptExpectedDate is in the future, the originTime will be the current time."}, {"name": "inventoryPolicy", "type": "SubscriptionBillingAttemptInventoryPolicy", "required": false, "description": "The behaviour to use when updating inventory."}, {"name": "subscriptionContractId", "type": "ID!", "required": false, "description": "The ID of the subscription contract."}], "returns": [], "examples": [{"description": "Create a billing attempt on a specific billing cycle", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation subscriptionBillingCycleCharge($contractId: ID!, $billingCycleSelector: SubscriptionBillingCycleSelector!) {\n      subscriptionBillingCycleCharge(subscriptionContractId: $contractId, billingCycleSelector: $billingCycleSelector) {\n        subscriptionBillingAttempt {\n          id\n          ready\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"contractId\": \"gid://shopify/SubscriptionContract/593791907\",\n      \"billingCycleSelector\": {\n        \"date\": \"2023-01-05T12:00:00Z\"\n      }\n    },\n  },\n});\n"}, {"description": "subscriptionBillingCycleCharge reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation subscriptionBillingCycleCharge($contractId: ID!, $billingCycleSelector: SubscriptionBillingCycleSelector!) {\n      subscriptionBillingCycleCharge(subscriptionContractId: $contractId, billingCycleSelector: $billingCycleSelector) {\n        subscriptionBillingAttempt {\n          id\n          ready\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"contractId\": \"gid://shopify/SubscriptionContract/593791907\",\n      \"billingCycleSelector\": {\n        \"date\": \"2023-01-05T12:00:00Z\"\n      }\n    },\n  },\n});\n"}]}, {"name": "subscriptionBillingCycleContractDraftCommit", "description": "Commits the updates of a Subscription Billing Cycle Contract draft.", "arguments": [{"name": "draftId", "type": "ID!", "required": false, "description": "The gid of the Subscription Contract draft to commit."}], "returns": [], "examples": []}, {"name": "subscriptionBillingCycleContractDraftConcatenate", "description": "Concatenates a contract to a Subscription Draft.", "arguments": [{"name": "concatenatedBillingCycleContracts", "type": "[SubscriptionBillingCycleInput!]!", "required": false, "description": "An array of Subscription Contracts with their selected billing cycles to concatenate to the subscription draft."}, {"name": "draftId", "type": "ID!", "required": false, "description": "The gid of the Subscription Contract draft to update."}], "returns": [], "examples": []}, {"name": "subscriptionBillingCycleContractEdit", "description": "Edit the contents of a subscription contract for the specified billing cycle.", "arguments": [{"name": "billingCycleInput", "type": "SubscriptionBillingCycleInput!", "required": false, "description": "Input object for selecting and using billing cycles."}], "returns": [], "examples": []}, {"name": "subscriptionBillingCycleEditDelete", "description": "Delete the schedule and contract edits of the selected subscription billing cycle.", "arguments": [{"name": "billingCycleInput", "type": "SubscriptionBillingCycleInput!", "required": false, "description": "Input object used to select and use billing cycles."}], "returns": [], "examples": [{"description": "Deletes the edits on a future billing cycle", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation subscriptionBillingCycleEditDelete($contractId: ID!, $index: Int!) {\n      subscriptionBillingCycleEditDelete(billingCycleInput: {contractId: $contractId, selector: {index: $index}}) {\n        billingCycles {\n          cycleStartAt\n          cycleEndAt\n          cycleIndex\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"contractId\": \"gid://shopify/SubscriptionContract/398475269\",\n      \"index\": 1\n    },\n  },\n});\n"}]}, {"name": "subscriptionBillingCycleEditsDelete", "description": "Delete the current and future schedule and contract edits of a list of subscription billing cycles.", "arguments": [{"name": "contractId", "type": "ID!", "required": false, "description": "The globally-unique identifier of the subscription contract that the billing cycle belongs to."}, {"name": "targetSelection", "type": "SubscriptionBillingCyclesTargetSelection!", "required": false, "description": "Select billing cycles to be deleted."}], "returns": [], "examples": [{"description": "Delete the edits on the current and all future billing cycles", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation subscriptionBillingCycleEditsDelete($contractId: ID!) {\n      subscriptionBillingCycleEditsDelete(contractId: $contractId, targetSelection: ALL) {\n        billingCycles {\n          cycleStartAt\n          cycleEndAt\n          cycleIndex\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"contractId\": \"gid://shopify/SubscriptionContract/398475269\"\n    },\n  },\n});\n"}, {"description": "subscriptionBillingCycleEditsDelete reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation subscriptionBillingCycleEditsDelete($contractId: ID!) {\n      subscriptionBillingCycleEditsDelete(contractId: $contractId, targetSelection: ALL) {\n        billingCycles {\n          cycleStartAt\n          cycleEndAt\n          cycleIndex\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"contractId\": \"gid://shopify/SubscriptionContract/398475269\"\n    },\n  },\n});\n"}]}, {"name": "subscriptionBillingCycleScheduleEdit", "description": "Modify the schedule of a specific billing cycle.", "arguments": [{"name": "billingCycleInput", "type": "SubscriptionBillingCycleInput!", "required": false, "description": "Input object for selecting and using billing cycles."}, {"name": "input", "type": "SubscriptionBillingCycleScheduleEditInput!", "required": false, "description": "Data used to create or modify billing cycle schedule edit."}], "returns": [], "examples": [{"description": "subscriptionBillingCycleScheduleEdit reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation subscriptionBillingCycleScheduleEdit($contractId: ID!, $index: Int!, $date: DateTime!) {\n      subscriptionBillingCycleScheduleEdit(billingCycleInput: {contractId: $contractId, selector: {index: $index}}, input: {billingDate: $date, reason: BUYER_INITIATED}) {\n        billingCycle {\n          cycleIndex\n          billingAttemptExpectedDate\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"contractId\": \"gid://shopify/SubscriptionContract/398475269\",\n      \"index\": 1,\n      \"date\": \"2021-12-31T07:00:00-05:00\"\n    },\n  },\n});\n"}]}, {"name": "subscriptionBillingCycleSkip", "description": "Skips a Subscription Billing Cycle.", "arguments": [{"name": "billingCycleInput", "type": "SubscriptionBillingCycleInput!", "required": false, "description": "Input object for selecting and using billing cycles."}], "returns": [], "examples": []}, {"name": "subscriptionBillingCycleUnskip", "description": "Unskips a Subscription Billing Cycle.", "arguments": [{"name": "billingCycleInput", "type": "SubscriptionBillingCycleInput!", "required": false, "description": "Input object for selecting and using billing cycles."}], "returns": [], "examples": []}, {"name": "subscriptionContractActivate", "description": "Activates a Subscription Contract. Contract status must be either active, paused, or failed.", "arguments": [{"name": "subscriptionContractId", "type": "ID!", "required": false, "description": "The ID of the Subscription Contract."}], "returns": [], "examples": []}, {"name": "subscriptionContractAtomicCreate", "description": "Creates a Subscription Contract.", "arguments": [{"name": "input", "type": "SubscriptionContractAtomicCreateInput!", "required": false, "description": "The properties of the new Subscription Contract."}], "returns": [], "examples": [{"description": "Create a subscription contract with a single line item", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation($customerId: ID!, $paymentMethodId: ID!, $variantId: ID!) {\n      subscriptionContractAtomicCreate(input: {customerId: $customerId, nextBillingDate: \"2025-06-01\", currencyCode: USD, lines: [{line: {productVariantId: $variantId, quantity: 20, currentPrice: 25.0}}], contract: {status: ACTIVE, paymentMethodId: $paymentMethodId, billingPolicy: {interval: MONTH, intervalCount: 1, minCycles: 3}, deliveryPolicy: {interval: MONTH, intervalCount: 1}, deliveryPrice: 14.99, deliveryMethod: {shipping: {address: {firstName: \"John\", lastName: \"King\", address1: \"1483 rue Mossoro\", city: \"Montreal\", province: \"Quebec\", country: \"Canada\", zip: \"H2S1Z5\"}}}}}) {\n        contract {\n          id\n          lines(first: 10) {\n            nodes {\n              id\n              quantity\n            }\n          }\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"customerId\": \"gid://shopify/Customer/544365967\",\n      \"paymentMethodId\": \"gid://shopify/CustomerPaymentMethod/b7cc6e3267aace169e516ed48be72dff\",\n      \"variantId\": \"gid://shopify/ProductVariant/30322695\"\n    },\n  },\n});\n"}, {"description": "subscriptionContractAtomicCreate reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation($customerId: ID!, $paymentMethodId: ID!, $variantId: ID!) {\n      subscriptionContractAtomicCreate(input: {customerId: $customerId, nextBillingDate: \"2025-06-01\", currencyCode: USD, lines: [{line: {productVariantId: $variantId, quantity: 20, currentPrice: 25.0}}], contract: {status: ACTIVE, paymentMethodId: $paymentMethodId, billingPolicy: {interval: MONTH, intervalCount: 1, minCycles: 3}, deliveryPolicy: {interval: MONTH, intervalCount: 1}, deliveryPrice: 14.99, deliveryMethod: {shipping: {address: {firstName: \"John\", lastName: \"King\", address1: \"1483 rue Mossoro\", city: \"Montreal\", province: \"Quebec\", country: \"Canada\", zip: \"H2S1Z5\"}}}}}) {\n        contract {\n          id\n          lines(first: 10) {\n            nodes {\n              id\n              quantity\n            }\n          }\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"customerId\": \"gid://shopify/Customer/544365967\",\n      \"paymentMethodId\": \"gid://shopify/CustomerPaymentMethod/b7cc6e3267aace169e516ed48be72dff\",\n      \"variantId\": \"gid://shopify/ProductVariant/30322695\"\n    },\n  },\n});\n"}]}, {"name": "subscriptionContractCancel", "description": "Cancels a Subscription Contract.", "arguments": [{"name": "subscriptionContractId", "type": "ID!", "required": false, "description": "The ID of the Subscription Contract."}], "returns": [], "examples": []}, {"name": "subscriptionContractCreate", "description": "Creates a Subscription Contract Draft.\nYou can submit all the desired information for the draft using Subscription Draft Input object.\nYou can also update the draft using the Subscription Contract Update mutation.\nThe draft is not saved until you call the Subscription Draft Commit mutation.", "arguments": [{"name": "input", "type": "SubscriptionContractCreateInput!", "required": false, "description": "The properties of the new Subscription Contract."}], "returns": [], "examples": [{"description": "Create a subscription contract with draft input", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation createSubscriptionContract($input: SubscriptionContractCreateInput!) {\n      subscriptionContractCreate(input: $input) {\n        draft {\n          id\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"input\": {\n        \"customerId\": \"gid://shopify/Customer/544365967\",\n        \"currencyCode\": \"USD\",\n        \"nextBillingDate\": \"2024-10-11T21:11:01-04:00\",\n        \"contract\": {\n          \"status\": \"ACTIVE\",\n          \"note\": \"Note of a thing.\",\n          \"customAttributes\": [\n            {\n              \"key\": \"Test\",\n              \"value\": \"Test value\"\n            }\n          ],\n          \"paymentMethodId\": \"gid://shopify/CustomerPaymentMethod/b7cc6e3267aace169e516ed48be72dff\",\n          \"billingPolicy\": {\n            \"minCycles\": 3,\n            \"maxCycles\": 12,\n            \"intervalCount\": 1,\n            \"interval\": \"MONTH\",\n            \"anchors\": [\n              {\n                \"type\": \"MONTHDAY\",\n                \"day\": 12\n              }\n            ]\n          },\n          \"deliveryPolicy\": {\n            \"intervalCount\": 1,\n            \"interval\": \"MONTH\",\n            \"anchors\": [\n              {\n                \"type\": \"MONTHDAY\",\n                \"day\": 13\n              }\n            ]\n          },\n          \"deliveryPrice\": 2.99,\n          \"deliveryMethod\": {\n            \"shipping\": {\n              \"address\": {\n                \"firstName\": \"Mont\",\n                \"lastName\": \"R\u00e9al\",\n                \"address1\": \"490 Rue De La Gaucheti\u00e8re O\",\n                \"country\": \"Canada\",\n                \"province\": \"Qu\u00e9bec\",\n                \"phone\": \"+16135551212\",\n                \"zip\": \"H2Z 0B3\",\n                \"city\": \"Montr\u00e9al\"\n              },\n              \"shippingOption\": {\n                \"title\": \"Subscription shipping\",\n                \"presentmentTitle\": \"Translated shipping for subscription\",\n                \"description\": \"5-7 Days\",\n                \"code\": \"GROUND\",\n                \"carrierServiceId\": null\n              }\n            }\n          }\n        }\n      }\n    },\n  },\n});\n"}, {"description": "subscriptionContractCreate reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation createSubscriptionContract($input: SubscriptionContractCreateInput!) {\n      subscriptionContractCreate(input: $input) {\n        draft {\n          id\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"input\": {\n        \"customerId\": \"gid://shopify/Customer/544365967\",\n        \"currencyCode\": \"USD\",\n        \"nextBillingDate\": \"2024-10-11T21:11:01-04:00\",\n        \"contract\": {\n          \"status\": \"ACTIVE\",\n          \"note\": \"Note of a thing.\",\n          \"customAttributes\": [\n            {\n              \"key\": \"Test\",\n              \"value\": \"Test value\"\n            }\n          ],\n          \"paymentMethodId\": \"gid://shopify/CustomerPaymentMethod/b7cc6e3267aace169e516ed48be72dff\",\n          \"billingPolicy\": {\n            \"minCycles\": 3,\n            \"maxCycles\": 12,\n            \"intervalCount\": 1,\n            \"interval\": \"MONTH\",\n            \"anchors\": [\n              {\n                \"type\": \"MONTHDAY\",\n                \"day\": 12\n              }\n            ]\n          },\n          \"deliveryPolicy\": {\n            \"intervalCount\": 1,\n            \"interval\": \"MONTH\",\n            \"anchors\": [\n              {\n                \"type\": \"MONTHDAY\",\n                \"day\": 13\n              }\n            ]\n          },\n          \"deliveryPrice\": 2.99,\n          \"deliveryMethod\": {\n            \"shipping\": {\n              \"address\": {\n                \"firstName\": \"Mont\",\n                \"lastName\": \"R\u00e9al\",\n                \"address1\": \"490 Rue De La Gaucheti\u00e8re O\",\n                \"country\": \"Canada\",\n                \"province\": \"Qu\u00e9bec\",\n                \"phone\": \"+16135551212\",\n                \"zip\": \"H2Z 0B3\",\n                \"city\": \"Montr\u00e9al\"\n              },\n              \"shippingOption\": {\n                \"title\": \"Subscription shipping\",\n                \"presentmentTitle\": \"Translated shipping for subscription\",\n                \"description\": \"5-7 Days\",\n                \"code\": \"GROUND\",\n                \"carrierServiceId\": null\n              }\n            }\n          }\n        }\n      }\n    },\n  },\n});\n"}]}, {"name": "subscriptionContractExpire", "description": "Expires a Subscription Contract.", "arguments": [{"name": "subscriptionContractId", "type": "ID!", "required": false, "description": "The ID of the Subscription Contract."}], "returns": [], "examples": []}, {"name": "subscriptionContractFail", "description": "Fails a Subscription Contract.", "arguments": [{"name": "subscriptionContractId", "type": "ID!", "required": false, "description": "The ID of the Subscription Contract."}], "returns": [], "examples": []}, {"name": "subscriptionContractPause", "description": "Pauses a Subscription Contract.", "arguments": [{"name": "subscriptionContractId", "type": "ID!", "required": false, "description": "The ID of the Subscription Contract."}], "returns": [], "examples": []}, {"name": "subscriptionContractProductChange", "description": "Allows for the easy change of a Product in a Contract or a Product price change.", "arguments": [{"name": "input", "type": "SubscriptionContractProductChangeInput!", "required": false, "description": "The properties of the Product changes."}, {"name": "lineId", "type": "ID!", "required": false, "description": "The gid of the Subscription Line to update."}, {"name": "subscriptionContractId", "type": "ID!", "required": false, "description": "The ID of the subscription contract."}], "returns": [], "examples": [{"description": "subscriptionContractProductChange reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation($contractId: ID!, $lineId: ID!, $variantId: ID!) {\n      subscriptionContractProductChange(subscriptionContractId: $contractId, lineId: $lineId, input: {productVariantId: $variantId, currentPrice: 500}) {\n        contract {\n          id\n          updatedAt\n        }\n        lineUpdated {\n          id\n          currentPrice {\n            amount\n          }\n          variantId\n        }\n        userErrors {\n          field\n          message\n          code\n        }\n      }\n    }`,\n    \"variables\": {\n      \"contractId\": \"gid://shopify/SubscriptionContract/593791907\",\n      \"lineId\": \"gid://shopify/SubscriptionLine/25476bfc-b794-4ff5-b41f-7a00eb252d55\",\n      \"variantId\": \"gid://shopify/ProductVariant/30322695\"\n    },\n  },\n});\n"}]}, {"name": "subscriptionContractSetNextBillingDate", "description": "Sets the next billing date of a Subscription Contract. This field is managed by the apps.\n        Alternatively you can utilize our\n        Billing Cycles APIs,\n        which provide auto-computed billing dates and additional functionalities.", "arguments": [{"name": "contractId", "type": "ID!", "required": false, "description": "The gid of the Subscription Contract to set the next billing date for."}, {"name": "date", "type": "DateTime!", "required": false, "description": "The next billing date."}], "returns": [], "examples": []}, {"name": "subscriptionContractUpdate", "description": "The subscriptionContractUpdate mutation allows you to create a draft of an existing subscription contract. This draft can be reviewed and modified as needed. Once the draft is committed with subscriptionDraftCommit, the changes are applied to the original subscription contract.", "arguments": [{"name": "contractId", "type": "ID!", "required": false, "description": "The gid of the Subscription Contract to update."}], "returns": [], "examples": []}, {"name": "subscriptionDraftCommit", "description": "Commits the updates of a Subscription Contract draft.", "arguments": [{"name": "draftId", "type": "ID!", "required": false, "description": "The gid of the Subscription Contract draft to commit."}], "returns": [], "examples": []}, {"name": "subscriptionDraftDiscountAdd", "description": "Adds a subscription discount to a subscription draft.", "arguments": [{"name": "draftId", "type": "ID!", "required": false, "description": "The ID of the Subscription Contract draft to add a subscription discount to."}, {"name": "input", "type": "SubscriptionManualDiscountInput!", "required": false, "description": "The properties of the new Subscription Discount."}], "returns": [], "examples": []}, {"name": "subscriptionDraftDiscountCodeApply", "description": "Applies a code discount on the subscription draft.", "arguments": [{"name": "draftId", "type": "ID!", "required": false, "description": "The gid of the subscription contract draft to apply a subscription code discount on."}, {"name": "redeemCode", "type": "String!", "required": false, "description": "Code discount redeem code."}], "returns": [], "examples": []}, {"name": "subscriptionDraftDiscountRemove", "description": "Removes a subscription discount from a subscription draft.", "arguments": [{"name": "discountId", "type": "ID!", "required": false, "description": "The gid of the subscription draft discount to remove."}, {"name": "draftId", "type": "ID!", "required": false, "description": "The gid of the subscription contract draft to remove a subscription discount from."}], "returns": [], "examples": []}, {"name": "subscriptionDraftDiscountUpdate", "description": "Updates a subscription discount on a subscription draft.", "arguments": [{"name": "discountId", "type": "ID!", "required": false, "description": "The gid of the Subscription Discount to update."}, {"name": "draftId", "type": "ID!", "required": false, "description": "The ID of the Subscription Contract draft to update a subscription discount on."}, {"name": "input", "type": "SubscriptionManualDiscountInput!", "required": false, "description": "The properties to update on the Subscription Discount."}], "returns": [], "examples": []}, {"name": "subscriptionDraftFreeShippingDiscountAdd", "description": "Adds a subscription free shipping discount to a subscription draft.", "arguments": [{"name": "draftId", "type": "ID!", "required": false, "description": "The ID of the subscription contract draft to add a subscription free shipping discount to."}, {"name": "input", "type": "SubscriptionFreeShippingDiscountInput!", "required": false, "description": "The properties of the new subscription free shipping discount."}], "returns": [], "examples": []}, {"name": "subscriptionDraftFreeShippingDiscountUpdate", "description": "Updates a subscription free shipping discount on a subscription draft.", "arguments": [{"name": "discountId", "type": "ID!", "required": false, "description": "The gid of the Subscription Discount to update."}, {"name": "draftId", "type": "ID!", "required": false, "description": "The ID of the Subscription Contract draft to update a subscription discount on."}, {"name": "input", "type": "SubscriptionFreeShippingDiscountInput!", "required": false, "description": "The properties to update on the Subscription Free Shipping Discount."}], "returns": [], "examples": []}, {"name": "subscriptionDraftLineAdd", "description": "Adds a subscription line to a subscription draft.", "arguments": [{"name": "draftId", "type": "ID!", "required": false, "description": "The gid of the Subscription Contract draft to add a subscription line to."}, {"name": "input", "type": "SubscriptionLineInput!", "required": false, "description": "The properties of the new Subscription Line."}], "returns": [], "examples": []}, {"name": "subscriptionDraftLineRemove", "description": "Removes a subscription line from a subscription draft.", "arguments": [{"name": "draftId", "type": "ID!", "required": false, "description": "The gid of the Subscription Contract draft to remove a subscription line from."}, {"name": "lineId", "type": "ID!", "required": false, "description": "The gid of the Subscription Line to remove."}], "returns": [], "examples": []}, {"name": "subscriptionDraftLineUpdate", "description": "Updates a subscription line on a subscription draft.", "arguments": [{"name": "draftId", "type": "ID!", "required": false, "description": "The gid of the Subscription Contract draft to update a subscription line from."}, {"name": "input", "type": "SubscriptionLineUpdateInput!", "required": false, "description": "The properties of the new Subscription Line."}, {"name": "lineId", "type": "ID!", "required": false, "description": "The gid of the Subscription Line to update."}], "returns": [], "examples": []}, {"name": "subscriptionDraftUpdate", "description": "Updates a Subscription Draft.", "arguments": [{"name": "draftId", "type": "ID!", "required": false, "description": "The gid of the Subscription Draft to update."}, {"name": "input", "type": "SubscriptionDraftInput!", "required": false, "description": "The properties of the new Subscription Contract."}], "returns": [], "examples": []}, {"name": "transactionVoid", "description": "Trigger the voiding of an uncaptured authorization transaction.", "arguments": [{"name": "parentTransactionId", "type": "ID!", "required": false, "description": "An uncaptured authorization transaction."}], "returns": [], "examples": []}], "objects": [{"name": "AdditionalFee", "description": "The additional fees that have been applied to the order.", "fields_and_connections": [{"name": "id", "type": "Node", "description": "A globally-unique ID.", "not_nullable": false}], "examples": []}, {"name": "AdditionalFeeSale", "description": "A sale associated with an additional fee charge.", "fields_and_connections": [{"name": "actionType", "type": "Sale", "description": "The type of order action that the sale represents.", "not_nullable": false}], "examples": []}, {"name": "AdjustmentSale", "description": "A sale associated with an order price adjustment.", "fields_and_connections": [{"name": "actionType", "type": "Sale", "description": "The type of order action that the sale represents.", "not_nullable": false}], "examples": []}, {"name": "Attribute", "description": "Represents a generic custom attribute, such as whether an order is a customer's first.", "fields_and_connections": [{"name": "key", "type": "String!", "description": "The key or name of the attribute. For example, \"customersFirstOrder\".", "not_nullable": true}, {"name": "value", "type": "String", "description": "The value of the attribute. For example, \"true\".", "not_nullable": false}], "examples": []}, {"name": "AutomaticDiscountApplication", "description": "Automatic discount applications capture the intentions of a discount that was automatically applied.", "fields_and_connections": [{"name": "allocationMethod", "type": "DiscountApplication", "description": "The method by which the discount's value is applied to its entitled items.", "not_nullable": false}], "examples": []}, {"name": "CalculatedAutomaticDiscountApplication", "description": "A discount that is automatically applied to an order that is being edited.", "fields_and_connections": [{"name": "allocationMethod", "type": "CalculatedDiscountApplication", "description": "The method by which the discount's value is allocated to its entitled items.", "not_nullable": false}], "examples": []}, {"name": "CalculatedDiscountAllocation", "description": "An amount discounting the line that has been allocated by an associated discount application.", "fields_and_connections": [{"name": "allocatedAmountSet", "type": "MoneyBag!", "description": "The money amount that's allocated by the discount application in shop and presentment currencies.", "not_nullable": true}, {"name": "discountApplication", "type": "CalculatedDiscountApplication!", "description": "The discount that the allocated amount originated from.", "not_nullable": true}], "examples": []}, {"name": "CalculatedDiscountCodeApplication", "description": "A discount code that is applied to an order that is being edited.", "fields_and_connections": [{"name": "allocationMethod", "type": "CalculatedDiscountApplication", "description": "The method by which the discount's value is allocated to its entitled items.", "not_nullable": false}], "examples": []}, {"name": "CalculatedDraftOrder", "description": "The calculated fields for a draft order.", "fields_and_connections": [{"name": "acceptAutomaticDiscounts", "type": "draftOrderCalculate", "description": "Calculates the properties of a draft order. Useful for determining information\nsuch as total taxes or price without actually creating a draft order.", "not_nullable": false}], "examples": []}, {"name": "CalculatedDraftOrderLineItem", "description": "The calculated line item for a draft order.", "fields_and_connections": [{"name": "appliedDiscount", "type": "DraftOrderAppliedDiscount", "description": "The custom applied discount.", "not_nullable": false}, {"name": "approximateDiscountedUnitPriceSet", "type": "MoneyBag!", "description": "The discountedTotal divided by quantity,\nequal to the average value of the line item price per unit after discounts are applied.\nThis value doesn't include discounts applied to the entire draft order.", "not_nullable": true}, {"name": "components", "type": "[CalculatedDraftOrderLineItem!]!", "description": "The components of the draft order line item.", "not_nullable": true}, {"name": "custom", "type": "Boolean!", "description": "Whether the line item is custom (true) or contains a product variant (false).", "not_nullable": true}, {"name": "customAttributes", "type": "[Attribute!]!", "description": "A list of attributes that represent custom features or special requests.", "not_nullable": true}, {"name": "customAttributesV2", "type": "[TypedAttribute!]!", "description": "The list of additional information (metafields) with the associated types.", "not_nullable": true}, {"name": "discountedTotal", "type": "MoneyV2!", "description": "The total price with discounts applied.", "not_nullable": true}, {"name": "discountedTotalSet", "type": "MoneyBag!", "description": "The total price with discounts applied.", "not_nullable": true}, {"name": "fulfillmentService", "type": "FulfillmentService", "description": "Name of the service provider who fulfilled the order.\nValid values are either manual or the name of the provider.\nFor example, amazon, shipwire.\nDeleted fulfillment services will return null.", "not_nullable": false}, {"name": "image", "type": "Image", "description": "The image associated with the draft order line item.", "not_nullable": false}, {"name": "isGiftCard", "type": "Boolean!", "description": "Whether the line item represents the purchase of a gift card.", "not_nullable": true}, {"name": "name", "type": "String!", "description": "The name of the product.", "not_nullable": true}, {"name": "originalTotal", "type": "MoneyV2!", "description": "The total price, excluding discounts, equal to the original unit price multiplied by quantity.", "not_nullable": true}, {"name": "originalTotalSet", "type": "MoneyBag!", "description": "The total price excluding discounts, equal to the original unit price multiplied by quantity.", "not_nullable": true}, {"name": "originalUnitPrice", "type": "MoneyV2!", "description": "The line item price without any discounts applied.", "not_nullable": true}, {"name": "originalUnitPriceSet", "type": "MoneyBag!", "description": "The price without any discounts applied.", "not_nullable": true}, {"name": "originalUnitPriceWithCurrency", "type": "MoneyV2", "description": "The original custom line item input price.", "not_nullable": false}, {"name": "priceOverride", "type": "MoneyV2", "description": "The price override for the line item.", "not_nullable": false}, {"name": "product", "type": "Product", "description": "The product for the line item.", "not_nullable": false}, {"name": "quantity", "type": "Int!", "description": "The quantity of items. For a bundle item, this is the quantity of bundles,\nnot the quantity of items contained in the bundles themselves.", "not_nullable": true}, {"name": "requiresShipping", "type": "Boolean!", "description": "Whether physical shipping is required for the variant.", "not_nullable": true}, {"name": "sku", "type": "String", "description": "The SKU number of the product variant.", "not_nullable": false}, {"name": "taxable", "type": "Boolean!", "description": "Whether the variant is taxable.", "not_nullable": true}, {"name": "title", "type": "String!", "description": "The title of the product or variant. This field only applies to custom line items.", "not_nullable": true}, {"name": "totalDiscount", "type": "MoneyV2!", "description": "The total value of the discount.", "not_nullable": true}, {"name": "totalDiscountSet", "type": "MoneyBag!", "description": "The total discount amount.", "not_nullable": true}, {"name": "uuid", "type": "String!", "description": "The UUID of the draft order line item. Must be unique and consistent across requests.\nThis field is mandatory in order to manipulate drafts with bundles.", "not_nullable": true}, {"name": "variant", "type": "ProductVariant", "description": "The product variant for the line item.", "not_nullable": false}, {"name": "variantTitle", "type": "String", "description": "The name of the variant.", "not_nullable": false}, {"name": "vendor", "type": "String", "description": "The name of the vendor who created the product variant.", "not_nullable": false}, {"name": "weight", "type": "Weight", "description": "The weight unit and value.", "not_nullable": false}, {"name": "bundleComponents", "type": "[CalculatedDraftOrderLineItem!]!", "description": "The bundle components of the draft order line item. Use components instead.", "not_nullable": true}, {"name": "discountedUnitPrice", "type": "MoneyV2!", "description": "The unit price with discounts applied. Use approximateDiscountedUnitPriceSet instead.", "not_nullable": true}, {"name": "discountedUnitPriceSet", "type": "MoneyBag!", "description": "The unit price with discounts applied. Use approximateDiscountedUnitPriceSet instead.", "not_nullable": true}], "examples": []}, {"name": "CalculatedExchangeLineItem", "description": "A calculated exchange line item.", "fields_and_connections": [{"name": "calculatedDiscountAllocations", "type": "[CalculatedDiscountAllocation!]!", "description": "The discounts that have been allocated onto the line item by discount applications.", "not_nullable": true}, {"name": "discountedUnitPriceSet", "type": "MoneyBag!", "description": "The unit price of the exchange line item after discounts.", "not_nullable": true}, {"name": "id", "type": "ID", "description": "A globally-unique ID.", "not_nullable": false}, {"name": "originalUnitPriceSet", "type": "MoneyBag!", "description": "The original unit price of the exchange line item before discounts.", "not_nullable": true}, {"name": "quantity", "type": "Int!", "description": "The quantity being exchanged.", "not_nullable": true}, {"name": "subtotalSet", "type": "MoneyBag!", "description": "The calculated subtotal set of the exchange line item, including discounts.", "not_nullable": true}, {"name": "totalTaxSet", "type": "MoneyBag!", "description": "The total tax of the exchange line item.", "not_nullable": true}, {"name": "variant", "type": "ProductVariant", "description": "The variant being exchanged.", "not_nullable": false}], "examples": []}, {"name": "CalculatedLineItem", "description": "A line item involved in order editing that may be newly added or have new changes applied.", "fields_and_connections": [{"name": "calculatedDiscountAllocations", "type": "orderEditAddCustomItem", "description": "Adds a custom line item to an existing order. For example, you could add a gift wrapping service as a custom line item. To learn how to edit existing orders, refer to Edit an existing order with Admin API.", "not_nullable": false}, {"name": "calculatedDiscountAllocations", "type": "orderEditAddLineItemDiscount", "description": "Adds a discount to a line item on the current order edit. For more information on how to use the GraphQL Admin API to edit an existing order, refer to Edit existing orders.", "not_nullable": false}, {"name": "calculatedDiscountAllocations", "type": "orderEditAddVariant", "description": "Adds a line item from an existing product variant. As of API version 2025-04, the orderEditAddVariant API will respect the contextual pricing of the variant.", "not_nullable": false}, {"name": "calculatedDiscountAllocations", "type": "orderEditSetQuantity", "description": "Sets the quantity of a line item on an order that is being edited. For more information on how to use the GraphQL Admin API to edit an existing order, refer to Edit existing orders.", "not_nullable": false}, {"name": "calculatedDiscountAllocations", "type": "orderEditRemoveLineItemDiscount", "description": "Removes a line item discount that was applied as part of an order edit. Use orderEditRemoveDiscount instead.", "not_nullable": false}], "examples": []}, {"name": "CalculatedManualDiscountApplication", "description": "Represents a discount that was manually created for an order that is being edited.", "fields_and_connections": [{"name": "allocationMethod", "type": "CalculatedDiscountApplication", "description": "The method by which the discount's value is allocated to its entitled items.", "not_nullable": false}], "examples": []}, {"name": "CalculatedOrder", "description": "An order with edits applied but not saved.", "fields_and_connections": [{"name": "addedDiscountApplications", "type": "orderEditAddCustomItem", "description": "Adds a custom line item to an existing order. For example, you could add a gift wrapping service as a custom line item. To learn how to edit existing orders, refer to Edit an existing order with Admin API.", "not_nullable": false}, {"name": "addedDiscountApplications", "type": "orderEditAddLineItemDiscount", "description": "Adds a discount to a line item on the current order edit. For more information on how to use the GraphQL Admin API to edit an existing order, refer to Edit existing orders.", "not_nullable": false}, {"name": "addedDiscountApplications", "type": "orderEditAddShippingLine", "description": "Adds a shipping line to an existing order. For more information on how to use the GraphQL Admin API to edit an existing order, refer to Edit existing orders.", "not_nullable": false}, {"name": "addedDiscountApplications", "type": "orderEditAddVariant", "description": "Adds a line item from an existing product variant. As of API version 2025-04, the orderEditAddVariant API will respect the contextual pricing of the variant.", "not_nullable": false}, {"name": "addedDiscountApplications", "type": "orderEditBegin", "description": "Starts editing an order. Mutations are operating on OrderEdit.\nAll order edits start with orderEditBegin, have any number of orderEdit* mutations made, and end with orderEditCommit.", "not_nullable": false}, {"name": "addedDiscountApplications", "type": "orderEditRemoveDiscount", "description": "Removes a discount on the current order edit. For more information on how to use the GraphQL Admin API to edit an existing order, refer to Edit existing orders.", "not_nullable": false}, {"name": "addedDiscountApplications", "type": "orderEditRemoveShippingLine", "description": "Removes a shipping line from an existing order. For more information on how to use the GraphQL Admin API to edit an existing order, refer to Edit existing orders.", "not_nullable": false}, {"name": "addedDiscountApplications", "type": "orderEditSetQuantity", "description": "Sets the quantity of a line item on an order that is being edited. For more information on how to use the GraphQL Admin API to edit an existing order, refer to Edit existing orders.", "not_nullable": false}, {"name": "addedDiscountApplications", "type": "orderEditUpdateDiscount", "description": "Updates a manual line level discount on the current order edit. For more information on how to use the GraphQL Admin API to edit an existing order, refer to Edit existing orders.", "not_nullable": false}, {"name": "addedDiscountApplications", "type": "orderEditUpdateShippingLine", "description": "Updates a shipping line on the current order edit. For more information on how to use the GraphQL Admin API to edit an existing order, refer to Edit existing orders.", "not_nullable": false}, {"name": "addedDiscountApplications", "type": "orderEditRemoveLineItemDiscount", "description": "Removes a line item discount that was applied as part of an order edit. Use orderEditRemoveDiscount instead.", "not_nullable": false}, {"name": "addedDiscountApplications", "type": "Node", "description": "Returns only the new discount applications being added to the order in the current edit.", "not_nullable": false}], "examples": []}, {"name": "CalculatedRestockingFee", "description": "The calculated costs of handling a return line item.\nTypically, this would cover the costs of inspecting, repackaging, and restocking the item.", "fields_and_connections": [{"name": "amountSet", "type": "CalculatedReturnFee", "description": "The calculated amount of the return fee, in shop and presentment currencies.", "not_nullable": false}], "examples": []}, {"name": "CalculatedReturn", "description": "A calculated return.", "fields_and_connections": [{"name": "exchangeLineItems", "type": "returnCalculate", "description": "The calculated monetary value to be exchanged due to the return.", "not_nullable": false}], "examples": []}, {"name": "CalculatedReturnLineItem", "description": "A calculated return line item.", "fields_and_connections": [{"name": "fulfillmentLineItem", "type": "FulfillmentLineItem!", "description": "The fulfillment line item from which items are returned.", "not_nullable": true}, {"name": "id", "type": "ID", "description": "A globally-unique ID.", "not_nullable": false}, {"name": "quantity", "type": "Int!", "description": "The quantity being returned.", "not_nullable": true}, {"name": "restockingFee", "type": "CalculatedRestockingFee", "description": "The restocking fee of the return line item.", "not_nullable": false}, {"name": "subtotalBeforeOrderDiscountsSet", "type": "MoneyBag!", "description": "The subtotal of the return line item before order discounts.", "not_nullable": true}, {"name": "subtotalSet", "type": "MoneyBag!", "description": "The subtotal of the return line item.", "not_nullable": true}, {"name": "totalTaxSet", "type": "MoneyBag!", "description": "The total tax of the return line item.", "not_nullable": true}], "examples": []}, {"name": "CalculatedReturnShippingFee", "description": "The calculated cost of the return shipping.", "fields_and_connections": [{"name": "amountSet", "type": "CalculatedReturnFee", "description": "The calculated amount of the return fee, in shop and presentment currencies.", "not_nullable": false}], "examples": []}, {"name": "CalculatedScriptDiscountApplication", "description": "A discount created by a Shopify script for an order that is being edited.", "fields_and_connections": [{"name": "allocationMethod", "type": "CalculatedDiscountApplication", "description": "The method by which the discount's value is allocated to its entitled items.", "not_nullable": false}], "examples": []}, {"name": "CalculatedShippingLine", "description": "A shipping line item involved in order editing that may be newly added or have new changes applied.", "fields_and_connections": [{"name": "id", "type": "orderEditAddShippingLine", "description": "Adds a shipping line to an existing order. For more information on how to use the GraphQL Admin API to edit an existing order, refer to Edit existing orders.", "not_nullable": false}], "examples": []}, {"name": "CardPaymentDetails", "description": "Card payment details related to a transaction.", "fields_and_connections": [{"name": "avsResultCode", "type": "BasePaymentDetails", "description": "The response code from the address verification system (AVS). The code is always a single letter.", "not_nullable": false}], "examples": []}, {"name": "CashRoundingAdjustment", "description": "The rounding adjustment applied to total payment or refund received for an Order involving cash payments.", "fields_and_connections": [{"name": "paymentSet", "type": "MoneyBag!", "description": "The rounding adjustment that can be applied to totalReceived for an Order involving cash payments in shop and presentment currencies. Could be a positive or negative value. Value is 0 if there's no rounding, or for non-cash payments.", "not_nullable": true}, {"name": "refundSet", "type": "MoneyBag!", "description": "The rounding adjustment that can be applied to totalRefunded for an Order involving cash payments in shop and presentment currencies. Could be a positive or negative value. Value is 0 if there's no rounding, or for non-cash refunds.", "not_nullable": true}], "examples": []}, {"name": "CurrencySetting", "description": "A setting for a presentment currency.", "fields_and_connections": [{"name": "currencyCode", "type": "CurrencyCode!", "description": "The currency's ISO code.", "not_nullable": true}, {"name": "currencyName", "type": "String!", "description": "The full name of the currency.", "not_nullable": true}, {"name": "enabled", "type": "Boolean!", "description": "Whether the currency is enabled or not. An enabled currency setting is visible to buyers and allows orders to be generated with that currency as presentment.", "not_nullable": true}, {"name": "rateUpdatedAt", "type": "DateTime", "description": "The date and time when the active exchange rate for the currency was last modified. It can be the automatic rate's creation date, or the manual rate's last updated at date if active.", "not_nullable": false}], "examples": []}, {"name": "DiscountAllocation", "description": "An amount that's allocated to a line based on an associated discount application.", "fields_and_connections": [{"name": "allocatedAmountSet", "type": "MoneyBag!", "description": "The money amount that's allocated to a line based on the associated discount application in shop and presentment currencies.", "not_nullable": true}, {"name": "discountApplication", "type": "DiscountApplication!", "description": "The discount application that the allocated amount originated from.", "not_nullable": true}, {"name": "allocatedAmount", "type": "MoneyV2!", "description": "The money amount that's allocated to a line based on the associated discount application. Use allocatedAmountSet instead.", "not_nullable": true}], "examples": []}, {"name": "DiscountCodeApplication", "description": "Discount code applications capture the intentions of a discount code at\nthe time that it is applied onto an order.\nDiscount applications don't represent the actual final amount discounted on a line (line item or shipping line). The actual amount discounted on a line is represented by the DiscountAllocation object.", "fields_and_connections": [{"name": "allocationMethod", "type": "DiscountApplication", "description": "The method by which the discount's value is applied to its entitled items.", "not_nullable": false}], "examples": []}, {"name": "DraftOrder", "description": "An order that a merchant creates on behalf of a customer. Draft orders are useful for merchants that need to do the following tasks:\n\nCreate new orders for sales made by phone, in person, by chat, or elsewhere. When a merchant accepts payment for a draft order, an order is created.\nSend invoices to customers to pay with a secure checkout link.\nUse custom items to represent additional costs or products that aren't displayed in a shop's inventory.\nRe-create orders manually from active sales channels.\nSell products at discount or wholesale rates.\nTake pre-orders.\nSave an order as a draft and resume working on it later.\n\nFor draft orders in multiple currencies presentment_money is the source of truth for what a customer is going to be charged and shop_money is an estimate of what the merchant might receive in their shop currency.\nCaution: Only use this data if it's required for your app's functionality. Shopify will restrict access to scopes for apps that don't have a legitimate use for the associated data.\nDraft orders created on or after April 1, 2025 will be automatically purged after one year of inactivity.", "fields_and_connections": [{"name": "acceptAutomaticDiscounts", "type": "draftOrder", "description": "Returns a DraftOrder resource by ID.", "not_nullable": false}, {"name": "acceptAutomaticDiscounts", "type": "draftOrders", "description": "List of saved draft orders.", "not_nullable": false}, {"name": "acceptAutomaticDiscounts", "type": "draftOrderComplete", "description": "Completes a draft order and creates an order.", "not_nullable": false}, {"name": "acceptAutomaticDiscounts", "type": "draftOrderCreate", "description": "Creates a draft order.", "not_nullable": false}, {"name": "acceptAutomaticDiscounts", "type": "draftOrderCreateFromOrder", "description": "Creates a draft order from order.", "not_nullable": false}, {"name": "acceptAutomaticDiscounts", "type": "draftOrderDuplicate", "description": "Duplicates a draft order.", "not_nullable": false}, {"name": "acceptAutomaticDiscounts", "type": "draftOrderInvoiceSend", "description": "Sends an email invoice for a draft order.", "not_nullable": false}, {"name": "acceptAutomaticDiscounts", "type": "draftOrderUpdate", "description": "Updates a draft order.\nIf a checkout has been started for a draft order, any update to the draft will unlink the checkout. Checkouts\nare created but not immediately completed when opening the merchant credit card modal in the admin, and when a\nbuyer opens the invoice URL. This is usually fine, but there is an edge case where a checkout is in progress\nand the draft is updated before the checkout completes. This will not interfere with the checkout and order\ncreation, but if the link from draft to checkout is broken the draft will remain open even after the order is\ncreated.", "not_nullable": false}, {"name": "acceptAutomaticDiscounts", "type": "CommentEventSubject", "description": "Whether or not to accept automatic discounts on the draft order during calculation.\nIf false, only discount codes and custom draft order discounts (see appliedDiscount) will be applied.\nIf true, eligible automatic discounts will be applied in addition to discount codes and custom draft order discounts.", "not_nullable": false}, {"name": "acceptAutomaticDiscounts", "type": "HasEvents", "description": "Whether or not to accept automatic discounts on the draft order during calculation.\nIf false, only discount codes and custom draft order discounts (see appliedDiscount) will be applied.\nIf true, eligible automatic discounts will be applied in addition to discount codes and custom draft order discounts.", "not_nullable": false}, {"name": "acceptAutomaticDiscounts", "type": "HasLocalizationExtensions", "description": "Whether or not to accept automatic discounts on the draft order during calculation.\nIf false, only discount codes and custom draft order discounts (see appliedDiscount) will be applied.\nIf true, eligible automatic discounts will be applied in addition to discount codes and custom draft order discounts.", "not_nullable": false}, {"name": "acceptAutomaticDiscounts", "type": "HasLocalizedFields", "description": "Whether or not to accept automatic discounts on the draft order during calculation.\nIf false, only discount codes and custom draft order discounts (see appliedDiscount) will be applied.\nIf true, eligible automatic discounts will be applied in addition to discount codes and custom draft order discounts.", "not_nullable": false}, {"name": "acceptAutomaticDiscounts", "type": "HasMetafields", "description": "Whether or not to accept automatic discounts on the draft order during calculation.\nIf false, only discount codes and custom draft order discounts (see appliedDiscount) will be applied.\nIf true, eligible automatic discounts will be applied in addition to discount codes and custom draft order discounts.", "not_nullable": false}, {"name": "acceptAutomaticDiscounts", "type": "LegacyInteroperability", "description": "Whether or not to accept automatic discounts on the draft order during calculation.\nIf false, only discount codes and custom draft order discounts (see appliedDiscount) will be applied.\nIf true, eligible automatic discounts will be applied in addition to discount codes and custom draft order discounts.", "not_nullable": false}, {"name": "acceptAutomaticDiscounts", "type": "Navigable", "description": "Whether or not to accept automatic discounts on the draft order during calculation.\nIf false, only discount codes and custom draft order discounts (see appliedDiscount) will be applied.\nIf true, eligible automatic discounts will be applied in addition to discount codes and custom draft order discounts.", "not_nullable": false}, {"name": "acceptAutomaticDiscounts", "type": "Node", "description": "Whether or not to accept automatic discounts on the draft order during calculation.\nIf false, only discount codes and custom draft order discounts (see appliedDiscount) will be applied.\nIf true, eligible automatic discounts will be applied in addition to discount codes and custom draft order discounts.", "not_nullable": false}], "examples": []}, {"name": "DraftOrderAppliedDiscount", "description": "The order-level discount applied to a draft order.", "fields_and_connections": [{"name": "amountSet", "type": "MoneyBag!", "description": "The amount of money discounted, with values shown in both shop currency and presentment currency.", "not_nullable": true}, {"name": "description", "type": "String!", "description": "Description of the order-level discount.", "not_nullable": true}, {"name": "title", "type": "String", "description": "Name of the order-level discount.", "not_nullable": false}, {"name": "value", "type": "Float!", "description": "The order level discount amount. If valueType is \"percentage\",\nthen value is the percentage discount.", "not_nullable": true}, {"name": "valueType", "type": "DraftOrderAppliedDiscountType!", "description": "Type of the order-level discount.", "not_nullable": true}, {"name": "amount", "type": "Money!", "description": "Amount of the order-level discount that's applied to the draft order in shop currency. Use amountSet instead.", "not_nullable": true}, {"name": "amountV2", "type": "MoneyV2!", "description": "Amount of money discounted. Use amountSet instead.", "not_nullable": true}], "examples": []}, {"name": "DraftOrderBundleAddedWarning", "description": "A warning indicating that a bundle was added to a draft order.", "fields_and_connections": [{"name": "errorCode", "type": "DraftOrderWarning", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "DraftOrderDiscountNotAppliedWarning", "description": "A warning indicating that a discount cannot be applied to a draft order.", "fields_and_connections": [{"name": "discountCode", "type": "DraftOrderWarning", "description": "The code of the discount that can't be applied.", "not_nullable": false}], "examples": []}, {"name": "DraftOrderLineItem", "description": "The line item for a draft order.", "fields_and_connections": [{"name": "appliedDiscount", "type": "Node", "description": "The custom applied discount.", "not_nullable": false}], "examples": []}, {"name": "DraftOrderPlatformDiscount", "description": "The platform discounts applied to the draft order.", "fields_and_connections": [{"name": "allocations", "type": "[DraftOrderPlatformDiscountAllocation!]!", "description": "Price reduction allocations across the draft order's lines.", "not_nullable": true}, {"name": "automaticDiscount", "type": "Boolean!", "description": "Whether the discount is an automatic discount.", "not_nullable": true}, {"name": "bxgyDiscount", "type": "Boolean!", "description": "Whether the discount is a buy x get y discount.", "not_nullable": true}, {"name": "code", "type": "String", "description": "If a code-based discount, the code used to add the discount.", "not_nullable": false}, {"name": "discountNode", "type": "DiscountNode", "description": "The discount node for the platform discount.", "not_nullable": false}, {"name": "id", "type": "ID", "description": "The ID of the discount.", "not_nullable": false}, {"name": "presentationLevel", "type": "String!", "description": "Whether the discount is line, order or shipping level.", "not_nullable": true}, {"name": "shortSummary", "type": "String!", "description": "The short summary of the discount.", "not_nullable": true}, {"name": "summary", "type": "String!", "description": "The summary of the discount.", "not_nullable": true}, {"name": "title", "type": "String!", "description": "The name of the discount.", "not_nullable": true}, {"name": "totalAmount", "type": "MoneyV2!", "description": "The discount total amount in shop currency.", "not_nullable": true}, {"name": "totalAmountPriceSet", "type": "MoneyBag!", "description": "The amount of money discounted, with values shown in both shop currency and presentment currency.", "not_nullable": true}, {"name": "discountClass", "type": "DiscountClass!", "description": "The discount class. Use discountClasses instead.", "not_nullable": true}], "examples": []}, {"name": "DraftOrderPlatformDiscountAllocation", "description": "Price reduction allocations across the draft order's lines.", "fields_and_connections": [{"name": "id", "type": "ID", "description": "The ID of the allocation.", "not_nullable": false}, {"name": "quantity", "type": "Int", "description": "The quantity of the target being discounted.", "not_nullable": false}, {"name": "reductionAmount", "type": "MoneyV2!", "description": "Amount of the discount allocated to the target.", "not_nullable": true}, {"name": "reductionAmountSet", "type": "MoneyBag!", "description": "Amount of the discount allocated to the target in both shop currency and presentment currency.", "not_nullable": true}, {"name": "target", "type": "DraftOrderPlatformDiscountAllocationTarget", "description": "The element of the draft being discounted.", "not_nullable": false}], "examples": []}, {"name": "DraftOrderTag", "description": "Represents a draft order tag.", "fields_and_connections": [{"name": "handle", "type": "draftOrderTag", "description": "Returns a DraftOrderTag resource by ID.", "not_nullable": false}, {"name": "handle", "type": "Node", "description": "Handle of draft order tag.", "not_nullable": false}], "examples": []}, {"name": "Duty", "description": "The duty details for a line item.", "fields_and_connections": [{"name": "countryCodeOfOrigin", "type": "Node", "description": "The ISO 3166-1 alpha-2 country code of the country of origin used in calculating the duty.", "not_nullable": false}], "examples": []}, {"name": "DutySale", "description": "A sale associated with a duty charge.", "fields_and_connections": [{"name": "actionType", "type": "Sale", "description": "The type of order action that the sale represents.", "not_nullable": false}], "examples": []}, {"name": "ExchangeLineItem", "description": "An item for exchange.", "fields_and_connections": [{"name": "id", "type": "Node", "description": "A globally-unique ID.", "not_nullable": false}], "examples": []}, {"name": "FeeSale", "description": "A sale associated with a fee.", "fields_and_connections": [{"name": "actionType", "type": "Sale", "description": "The type of order action that the sale represents.", "not_nullable": false}], "examples": []}, {"name": "GiftCardSale", "description": "A sale associated with a gift card.", "fields_and_connections": [{"name": "actionType", "type": "Sale", "description": "The type of order action that the sale represents.", "not_nullable": false}], "examples": []}, {"name": "LineItem", "description": "Represents individual products and quantities purchased in the associated order.", "fields_and_connections": [{"name": "contract", "type": "Node", "description": "The subscription contract associated with this line item.", "not_nullable": false}], "examples": []}, {"name": "LineItemGroup", "description": "A line item group (bundle) to which a line item belongs to.", "fields_and_connections": [{"name": "customAttributes", "type": "Node", "description": "A list of attributes that represent custom features or special requests.", "not_nullable": false}], "examples": []}, {"name": "LineItemSellingPlan", "description": "Represents the selling plan for a line item.", "fields_and_connections": [{"name": "name", "type": "String!", "description": "The name of the selling plan for display purposes.", "not_nullable": true}, {"name": "sellingPlanId", "type": "ID", "description": "The ID of the selling plan associated with the line item.", "not_nullable": false}], "examples": []}, {"name": "LocalPaymentMethodsPaymentDetails", "description": "Local payment methods payment details related to a transaction.", "fields_and_connections": [{"name": "paymentDescriptor", "type": "BasePaymentDetails", "description": "The descriptor by the payment provider. Only available for Amazon Pay and Buy with Prime.", "not_nullable": false}], "examples": []}, {"name": "ManualDiscountApplication", "description": "Manual discount applications capture the intentions of a discount that was manually created for an order.\nDiscount applications don't represent the actual final amount discounted on a line (line item or shipping line). The actual amount discounted on a line is represented by the DiscountAllocation object.", "fields_and_connections": [{"name": "allocationMethod", "type": "DiscountApplication", "description": "The method by which the discount's value is applied to its entitled items.", "not_nullable": false}], "examples": []}, {"name": "Order", "description": "An order is a customer's request to purchase one or more products from a shop. You can retrieve and update orders using the Order object.\nLearn more about\nediting an existing order with the GraphQL Admin API.\nOnly the last 60 days' worth of orders from a store are accessible from the Order object by default. If you want to access older orders,\nthen you need to request access to all orders. If your app is granted\naccess, then you can add the read_all_orders scope to your app along with read_orders or write_orders.\nPrivate apps are not affected by this change and are automatically granted the scope.\nCaution: Only use this data if it's required for your app's functionality. Shopify will restrict access to scopes for apps that don't have a legitimate use for the associated data.", "fields_and_connections": [{"name": "additionalFees", "type": "order", "description": "Returns an Order resource by ID.", "not_nullable": false}, {"name": "additionalFees", "type": "orderByIdentifier", "description": "Return an order by an identifier.", "not_nullable": false}, {"name": "additionalFees", "type": "orders", "description": "Returns a list of orders placed in the store, including data such as order status, customer, and line item details.\nUse the orders query to build reports, analyze sales performance, or automate fulfillment workflows. The orders query supports pagination,\nsorting, and filtering.", "not_nullable": false}, {"name": "additionalFees", "type": "orderClose", "description": "Closes an open order.", "not_nullable": false}, {"name": "additionalFees", "type": "orderCreate", "description": "Creates an order with attributes such as customer information, line items, and shipping and billing addresses.\nUse the orderCreate mutation to programmatically generate orders in scenarios where\norders aren't created through the standard checkout process, such as when importing orders from an external\nsystem or creating orders for wholesale customers.\nThe orderCreate mutation doesn't support applying multiple discounts, such as discounts on line items.\nAutomatic discounts won't be applied unless you replicate the logic of those discounts in your custom\nimplementation. You can apply a discount code,\nbut only one discount code can be set for each order.\nNoteIf you're using the orderCreate mutation with a\ntrial or\ndevelopment store, then you can create a\nmaximum of five new orders per minute.After you create an order, you can make subsequent edits to the order using one of the following mutations:\n\norderUpdate:\nUsed for simple updates to an order, such as changing the order's note, tags, or customer information.\norderEditBegin:\nUsed when you need to make significant updates to an order, such as adding or removing line items, changing\nquantities, or modifying discounts. The orderEditBegin mutation initiates an order editing session,\nallowing you to make multiple changes before finalizing them. Learn more about using the orderEditBegin\nmutation to edit existing orders.\n\nLearn how to build apps that integrate with\norder management and fulfillment processes.", "not_nullable": false}, {"name": "additionalFees", "type": "orderCreateManualPayment", "description": "Create a manual payment for an order. You can only create a manual payment for an order if it isn't already\nfully paid.", "not_nullable": false}, {"name": "additionalFees", "type": "orderEditCommit", "description": "Applies and saves staged changes to an order. Mutations are operating on OrderEdit.\nAll order edits start with orderEditBegin, have any number of orderEdit* mutations made, and end with orderEditCommit.", "not_nullable": false}, {"name": "additionalFees", "type": "orderInvoiceSend", "description": "Sends an email invoice for an order.", "not_nullable": false}, {"name": "additionalFees", "type": "orderMarkAsPaid", "description": "Marks an order as paid. You can only mark an order as paid if it isn't already fully paid.", "not_nullable": false}, {"name": "additionalFees", "type": "orderOpen", "description": "Opens a closed order.", "not_nullable": false}, {"name": "additionalFees", "type": "orderUpdate", "description": "Updates the attributes of an order, such as the customer's email, the shipping address for the order,\ntags, and metafields associated with the order.\nIf you need to make significant updates to an order, such as adding or removing line items, changing\nquantities, or modifying discounts, then use\nthe orderEditBegin\nmutation instead. The orderEditBegin mutation initiates an order editing session,\nallowing you to make multiple changes before finalizing them. Learn more about using the orderEditBegin\nmutation to edit existing orders.\nLearn how to build apps that integrate with\norder management and fulfillment processes.", "not_nullable": false}, {"name": "additionalFees", "type": "refundCreate", "description": "Creates a refund.", "not_nullable": false}, {"name": "additionalFees", "type": "CommentEventSubject", "description": "A list of additional fees applied to the order.", "not_nullable": false}, {"name": "additionalFees", "type": "HasEvents", "description": "A list of additional fees applied to the order.", "not_nullable": false}, {"name": "additionalFees", "type": "HasLocalizationExtensions", "description": "A list of additional fees applied to the order.", "not_nullable": false}, {"name": "additionalFees", "type": "HasLocalizedFields", "description": "A list of additional fees applied to the order.", "not_nullable": false}, {"name": "additionalFees", "type": "HasMetafieldDefinitions", "description": "A list of additional fees applied to the order.", "not_nullable": false}, {"name": "additionalFees", "type": "HasMetafields", "description": "A list of additional fees applied to the order.", "not_nullable": false}, {"name": "additionalFees", "type": "LegacyInteroperability", "description": "A list of additional fees applied to the order.", "not_nullable": false}, {"name": "additionalFees", "type": "Node", "description": "A list of additional fees applied to the order.", "not_nullable": false}], "examples": []}, {"name": "OrderAdjustment", "description": "An order adjustment accounts for the difference between a calculated and actual refund amount.", "fields_and_connections": [{"name": "amountSet", "type": "Node", "description": "The amount of the order adjustment in shop and presentment currencies.", "not_nullable": false}], "examples": []}, {"name": "OrderAgreement", "description": "An agreement associated with an order placement.", "fields_and_connections": [{"name": "app", "type": "SalesAgreement", "description": "The application that created the agreement.", "not_nullable": false}], "examples": []}, {"name": "OrderApp", "description": "The application that created the order.", "fields_and_connections": [{"name": "icon", "type": "Image!", "description": "The application icon.", "not_nullable": true}, {"name": "id", "type": "ID!", "description": "The application ID.", "not_nullable": true}, {"name": "name", "type": "String!", "description": "The name of the application.", "not_nullable": true}], "examples": []}, {"name": "OrderCancellation", "description": "Details about the order cancellation.", "fields_and_connections": [{"name": "staffNote", "type": "String", "description": "Staff provided note for the order cancellation.", "not_nullable": false}], "examples": []}, {"name": "OrderCreateManualPaymentOrderCreateManualPaymentError", "description": "An error that occurs during the execution of a order create manual payment mutation.", "fields_and_connections": [{"name": "code", "type": "orderCreateManualPayment", "description": "Create a manual payment for an order. You can only create a manual payment for an order if it isn't already\nfully paid.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "OrderEditAgreement", "description": "An agreement associated with an edit to the order.", "fields_and_connections": [{"name": "app", "type": "SalesAgreement", "description": "The application that created the agreement.", "not_nullable": false}], "examples": []}, {"name": "OrderPaymentCollectionDetails", "description": "The payment collection details for an order that requires additional payment following an edit to the order.", "fields_and_connections": [{"name": "additionalPaymentCollectionUrl", "type": "URL", "description": "The URL to use for collecting an additional payment on the order.", "not_nullable": false}, {"name": "vaultedPaymentMethods", "type": "[PaymentMandate!]", "description": "The list of vaulted payment methods for the order with their permissions.", "not_nullable": false}], "examples": []}, {"name": "OrderRisk", "description": "Represents a fraud check on an order. This object is deprecated in favor of OrderRiskAssessment and its enhanced capabilities.", "fields_and_connections": [{"name": "display", "type": "Boolean!", "description": "Whether the risk level is shown in the Shopify admin. If false, then this order risk is ignored when Shopify determines the overall risk level for the order. This field is deprecated in favor of OrderRiskAssessment.facts.", "not_nullable": true}, {"name": "level", "type": "OrderRiskLevel", "description": "The likelihood that an order is fraudulent, based on this order risk. The level can be set by Shopify risk analysis or by an app. This field is deprecated in favor of OrderRiskAssessment.riskLevel which allows for more granular risk levels, including PENDING and NONE.", "not_nullable": false}, {"name": "message", "type": "String", "description": "The risk message that's shown to the merchant in the Shopify admin. This field is deprecated in favor of OrderRiskAssessment.facts.", "not_nullable": false}], "examples": []}, {"name": "OrderRiskAssessment", "description": "The risk assessments for an order.\nSee the example query \"Retrieves a list of all order risks for an order\".", "fields_and_connections": [{"name": "facts", "type": "orderRiskAssessmentCreate", "description": "Create a risk assessment for an order.", "not_nullable": false}], "examples": []}, {"name": "OrderRiskSummary", "description": "Summary of risk characteristics for an order.\nSee the example query \"Retrieves a list of all order risks for an order\".", "fields_and_connections": [{"name": "assessments", "type": "[OrderRiskAssessment!]!", "description": "The list of risk assessments for the order.", "not_nullable": true}, {"name": "recommendation", "type": "OrderRiskRecommendationResult!", "description": "The recommendation for the order based on the results of the risk assessments. This suggests the action the merchant should take with regards to its risk of fraud.", "not_nullable": true}], "examples": []}, {"name": "OrderStagedChangeAddCustomItem", "description": "A change to the order representing the addition of a\ncustom line item. For example, you might want to add gift wrapping service\nas a custom line item.", "fields_and_connections": [{"name": "originalUnitPrice", "type": "MoneyV2!", "description": "The price of an individual item without any discounts applied. This value can't be negative.", "not_nullable": true}, {"name": "quantity", "type": "Int!", "description": "The quantity of the custom item to add to the order. This value must be greater than zero.", "not_nullable": true}, {"name": "title", "type": "String!", "description": "The title of the custom item.", "not_nullable": true}], "examples": []}, {"name": "OrderStagedChangeAddLineItemDiscount", "description": "The discount applied to an item that was added during the current order edit.", "fields_and_connections": [{"name": "description", "type": "orderEditAddLineItemDiscount", "description": "Adds a discount to a line item on the current order edit. For more information on how to use the GraphQL Admin API to edit an existing order, refer to Edit existing orders.", "not_nullable": false}], "examples": []}, {"name": "OrderStagedChangeAddShippingLine", "description": "A new shipping line\nadded as part of an order edit.", "fields_and_connections": [{"name": "phone", "type": "String", "description": "The phone number at the shipping address.", "not_nullable": false}, {"name": "presentmentTitle", "type": "String", "description": "The shipping line's title that's shown to the buyer.", "not_nullable": false}, {"name": "price", "type": "MoneyV2!", "description": "The price that applies to the shipping line.", "not_nullable": true}, {"name": "title", "type": "String", "description": "The title of the shipping line.", "not_nullable": false}], "examples": []}, {"name": "OrderStagedChangeAddVariant", "description": "A change to the order representing the addition of an existing product variant.", "fields_and_connections": [{"name": "quantity", "type": "Int!", "description": "The quantity of the product variant that was added.", "not_nullable": true}, {"name": "variant", "type": "ProductVariant!", "description": "The product variant that was added.", "not_nullable": true}], "examples": []}, {"name": "OrderStagedChangeDecrementItem", "description": "An removal of items from an existing line item on the order.", "fields_and_connections": [{"name": "delta", "type": "Int!", "description": "The number of items removed.", "not_nullable": true}, {"name": "lineItem", "type": "LineItem!", "description": "The original line item.", "not_nullable": true}, {"name": "restock", "type": "Boolean!", "description": "The intention to restock the removed items.", "not_nullable": true}], "examples": []}, {"name": "OrderStagedChangeIncrementItem", "description": "An addition of items to an existing line item on the order.", "fields_and_connections": [{"name": "delta", "type": "Int!", "description": "The number of items added.", "not_nullable": true}, {"name": "lineItem", "type": "LineItem!", "description": "The original line item.", "not_nullable": true}], "examples": []}, {"name": "OrderStagedChangeRemoveShippingLine", "description": "A shipping line removed during an order edit.", "fields_and_connections": [{"name": "shippingLine", "type": "ShippingLine!", "description": "The removed shipping line.", "not_nullable": true}], "examples": []}, {"name": "OrderTransaction", "description": "A payment transaction in the context of an order.", "fields_and_connections": [{"name": "accountNumber", "type": "orderCapture", "description": "Captures payment for an authorized transaction on an order. An order can only be captured if it has a successful authorization transaction. Capturing an order will claim the money reserved by the authorization. orderCapture can be used to capture multiple times as long as the OrderTransaction is multi-capturable. To capture a partial payment, the included amount value should be less than the total order amount. Multi-capture is available only to stores on a Shopify Plus plan.", "not_nullable": false}, {"name": "accountNumber", "type": "transactionVoid", "description": "Trigger the voiding of an uncaptured authorization transaction.", "not_nullable": false}, {"name": "accountNumber", "type": "Node", "description": "The masked account number associated with the payment method.", "not_nullable": false}], "examples": []}, {"name": "PaymentSettings", "description": "Settings related to payments.", "fields_and_connections": [{"name": "supportedDigitalWallets", "type": "[DigitalWallet!]!", "description": "List of the digital wallets which the shop supports.", "not_nullable": true}], "examples": []}, {"name": "ProductSale", "description": "A sale associated with a product.", "fields_and_connections": [{"name": "actionType", "type": "Sale", "description": "The type of order action that the sale represents.", "not_nullable": false}], "examples": []}, {"name": "Refund", "description": "The record of the line items and transactions that were refunded to a customer, along with restocking instructions for refunded line items.", "fields_and_connections": [{"name": "createdAt", "type": "refund", "description": "Returns a Refund resource by ID.", "not_nullable": false}, {"name": "createdAt", "type": "refundCreate", "description": "Creates a refund.", "not_nullable": false}, {"name": "createdAt", "type": "returnRefund", "description": "Refunds a return when its status is OPEN or CLOSED and associates it with the related return request.", "not_nullable": false}, {"name": "createdAt", "type": "LegacyInteroperability", "description": "The date and time when the refund was created.", "not_nullable": false}, {"name": "createdAt", "type": "Node", "description": "The date and time when the refund was created.", "not_nullable": false}], "examples": []}, {"name": "RefundAgreement", "description": "An agreement between the merchant and customer to refund all or a portion of the order.", "fields_and_connections": [{"name": "app", "type": "SalesAgreement", "description": "The application that created the agreement.", "not_nullable": false}], "examples": []}, {"name": "RefundDuty", "description": "Represents a refunded duty.", "fields_and_connections": [{"name": "amountSet", "type": "MoneyBag!", "description": "The amount of a refunded duty in shop and presentment currencies.", "not_nullable": true}, {"name": "originalDuty", "type": "Duty", "description": "The duty associated with this refunded duty.", "not_nullable": false}], "examples": []}, {"name": "RefundLineItem", "description": "A line item that's included in a refund.", "fields_and_connections": [{"name": "id", "type": "ID", "description": "A globally-unique ID.", "not_nullable": false}, {"name": "lineItem", "type": "LineItem!", "description": "The LineItem resource associated to the refunded line item.", "not_nullable": true}, {"name": "location", "type": "Location", "description": "The inventory restock location.", "not_nullable": false}, {"name": "priceSet", "type": "MoneyBag!", "description": "The price of a refunded line item in shop and presentment currencies.", "not_nullable": true}, {"name": "quantity", "type": "Int!", "description": "The quantity of a refunded line item.", "not_nullable": true}, {"name": "restocked", "type": "Boolean!", "description": "Whether the refunded line item was restocked. Not applicable in the context of a SuggestedRefund.", "not_nullable": true}, {"name": "restockType", "type": "RefundLineItemRestockType!", "description": "The type of restock for the refunded line item.", "not_nullable": true}, {"name": "subtotalSet", "type": "MoneyBag!", "description": "The subtotal price of a refunded line item in shop and presentment currencies.", "not_nullable": true}, {"name": "totalTaxSet", "type": "MoneyBag!", "description": "The total tax charged on a refunded line item in shop and presentment currencies.", "not_nullable": true}, {"name": "price", "type": "Money!", "description": "The price of a refunded line item. Use priceSet instead.", "not_nullable": true}, {"name": "subtotal", "type": "Money!", "description": "The subtotal price of a refunded line item. Use subtotalSet instead.", "not_nullable": true}, {"name": "totalTax", "type": "Money!", "description": "The total tax charged on a refunded line item. Use totalTaxSet instead.", "not_nullable": true}], "examples": []}, {"name": "RefundShippingLine", "description": "A shipping line item that's included in a refund.", "fields_and_connections": [{"name": "id", "type": "Node", "description": "A globally-unique ID.", "not_nullable": false}], "examples": []}, {"name": "RestockingFee", "description": "A restocking fee is a fee captured as part of a return to cover the costs of handling a return line item.\nTypically, this would cover the costs of inspecting, repackaging, and restocking the item.", "fields_and_connections": [{"name": "amountSet", "type": "Fee", "description": "The amount of the restocking fee, in shop and presentment currencies.", "not_nullable": false}], "examples": []}, {"name": "Return", "description": "Represents a return.", "fields_and_connections": [{"name": "decline", "type": "return", "description": "Returns a Return resource by ID.", "not_nullable": false}, {"name": "decline", "type": "returnApproveRequest", "description": "Approves a customer's return request.\nIf this mutation is successful, then the Return.status field of the\napproved return is set to OPEN.", "not_nullable": false}, {"name": "decline", "type": "returnCancel", "description": "Cancels a return and restores the items back to being fulfilled.\nCanceling a return is only available before any work has been done\non the return (such as an inspection or refund).", "not_nullable": false}, {"name": "decline", "type": "returnClose", "description": "Indicates a return is complete, either when a refund has been made and items restocked,\nor simply when it has been marked as returned in the system.", "not_nullable": false}, {"name": "decline", "type": "returnCreate", "description": "Creates a return.", "not_nullable": false}, {"name": "decline", "type": "returnDeclineRequest", "description": "Declines a return on an order.\nWhen a return is declined, each ReturnLineItem.fulfillmentLineItem can be associated to a new return.\nUse the ReturnCreate or ReturnRequest mutation to initiate a new return.", "not_nullable": false}, {"name": "decline", "type": "returnLineItemRemoveFromReturn", "description": "Removes return lines from a return.", "not_nullable": false}, {"name": "decline", "type": "returnReopen", "description": "Reopens a closed return.", "not_nullable": false}, {"name": "decline", "type": "returnRequest", "description": "A customer's return request that hasn't been approved or declined.\nThis mutation sets the value of the Return.status field to REQUESTED.\nTo create a return that has the Return.status field set to OPEN, use the returnCreate mutation.", "not_nullable": false}, {"name": "decline", "type": "Node", "description": "Additional information about the declined return.", "not_nullable": false}], "examples": []}, {"name": "ReturnableFulfillment", "description": "A returnable fulfillment, which is an order that has been delivered\nand is eligible to be returned to the merchant.", "fields_and_connections": [{"name": "fulfillment", "type": "returnableFulfillment", "description": "Lookup a returnable fulfillment by ID.", "not_nullable": false}, {"name": "fulfillment", "type": "returnableFulfillments", "description": "List of returnable fulfillments.", "not_nullable": false}, {"name": "fulfillment", "type": "Node", "description": "The fulfillment that the returnable fulfillment refers to.", "not_nullable": false}], "examples": []}, {"name": "ReturnableFulfillmentLineItem", "description": "A returnable fulfillment line item.", "fields_and_connections": [{"name": "fulfillmentLineItem", "type": "FulfillmentLineItem!", "description": "The fulfillment line item that can be returned.", "not_nullable": true}, {"name": "quantity", "type": "Int!", "description": "The quantity available to be returned.", "not_nullable": true}], "examples": []}, {"name": "ReturnAgreement", "description": "An agreement between the merchant and customer for a return.", "fields_and_connections": [{"name": "app", "type": "SalesAgreement", "description": "The application that created the agreement.", "not_nullable": false}], "examples": []}, {"name": "ReturnDecline", "description": "Additional information about why a merchant declined the customer's return request.", "fields_and_connections": [{"name": "note", "type": "String", "description": "The notification message sent to the customer about their declined return request.\nMaximum length: 500 characters.", "not_nullable": false}, {"name": "reason", "type": "ReturnDeclineReason!", "description": "The reason the customer's return request was declined.", "not_nullable": true}], "examples": []}, {"name": "ReturnLineItem", "description": "A return line item.", "fields_and_connections": [{"name": "customerNote", "type": "Node", "description": "A note from the customer that describes the item to be returned. Maximum length: 300 characters.", "not_nullable": false}, {"name": "customerNote", "type": "ReturnLineItemType", "description": "A note from the customer that describes the item to be returned. Maximum length: 300 characters.", "not_nullable": false}], "examples": []}, {"name": "ReturnShippingFee", "description": "A return shipping fee is a fee captured as part of a return to cover the costs of shipping the return.", "fields_and_connections": [{"name": "amountSet", "type": "Fee", "description": "The amount of the return shipping fee, in shop and presentment currencies.", "not_nullable": false}], "examples": []}, {"name": "ReverseDelivery", "description": "A reverse delivery is a post-fulfillment object that represents a buyer sending a package to a merchant.\nFor example, a buyer requests a return, and a merchant sends the buyer a shipping label.\nThe reverse delivery contains the context of the items sent back, how they're being sent back\n(for example, a shipping label), and the current state of the delivery (tracking information).", "fields_and_connections": [{"name": "deliverable", "type": "reverseDelivery", "description": "Lookup a reverse delivery by ID.", "not_nullable": false}, {"name": "deliverable", "type": "reverseDeliveryCreateWithShipping", "description": "Creates a new reverse delivery with associated external shipping information.", "not_nullable": false}, {"name": "deliverable", "type": "reverseDeliveryShippingUpdate", "description": "Updates a reverse delivery with associated external shipping information.", "not_nullable": false}, {"name": "deliverable", "type": "Node", "description": "The deliverable associated with the reverse delivery.", "not_nullable": false}], "examples": []}, {"name": "ReverseDeliveryLabelV2", "description": "The return label file information for a reverse delivery.", "fields_and_connections": [{"name": "createdAt", "type": "DateTime!", "description": "The date and time when the reverse delivery label was created.", "not_nullable": true}, {"name": "publicFileUrl", "type": "URL", "description": "A public link that can be used to download the label image.", "not_nullable": false}, {"name": "updatedAt", "type": "DateTime!", "description": "The date and time when the reverse delivery label was updated.", "not_nullable": true}], "examples": []}, {"name": "ReverseDeliveryLineItem", "description": "The details about a reverse delivery line item.", "fields_and_connections": [{"name": "dispositions", "type": "Node", "description": "The dispositions of the item.", "not_nullable": false}], "examples": []}, {"name": "ReverseDeliveryShippingDeliverable", "description": "A reverse shipping deliverable that may include a label and tracking information.", "fields_and_connections": [{"name": "label", "type": "ReverseDeliveryLabelV2", "description": "The return label attached to the reverse delivery.", "not_nullable": false}, {"name": "tracking", "type": "ReverseDeliveryTrackingV2", "description": "The information to track the reverse delivery.", "not_nullable": false}], "examples": []}, {"name": "ReverseDeliveryTrackingV2", "description": "Represents the information used to track a reverse delivery.", "fields_and_connections": [{"name": "carrierName", "type": "String", "description": "The provider of the tracking information, in a human-readable format for display purposes.", "not_nullable": false}, {"name": "number", "type": "String", "description": "The identifier used by the courier to identify the shipment.", "not_nullable": false}, {"name": "url", "type": "URL", "description": "The URL to track a shipment.", "not_nullable": false}], "examples": []}, {"name": "ReverseFulfillmentOrder", "description": "A group of one or more items in a return that will be processed at a fulfillment service.\nThere can be more than one reverse fulfillment order for a return at a given location.", "fields_and_connections": [{"name": "id", "type": "reverseFulfillmentOrder", "description": "Lookup a reverse fulfillment order by ID.", "not_nullable": false}, {"name": "id", "type": "Node", "description": "A globally-unique ID.", "not_nullable": false}], "examples": []}, {"name": "ReverseFulfillmentOrderDisposition", "description": "The details of the arrangement of an item.", "fields_and_connections": [{"name": "id", "type": "Node", "description": "A globally-unique ID.", "not_nullable": false}], "examples": []}, {"name": "ReverseFulfillmentOrderLineItem", "description": "The details about a reverse fulfillment order line item.", "fields_and_connections": [{"name": "dispositions", "type": "reverseFulfillmentOrderDispose", "description": "Disposes reverse fulfillment order line items.", "not_nullable": false}, {"name": "dispositions", "type": "Node", "description": "The dispositions of the item.", "not_nullable": false}], "examples": []}, {"name": "ReverseFulfillmentOrderThirdPartyConfirmation", "description": "The third-party confirmation of a reverse fulfillment order.", "fields_and_connections": [{"name": "status", "type": "ReverseFulfillmentOrderThirdPartyConfirmationStatus!", "description": "The status of the reverse fulfillment order third-party confirmation.", "not_nullable": true}], "examples": []}, {"name": "RiskFact", "description": "A risk fact belongs to a single risk assessment and serves to provide additional context for an assessment. Risk facts are not necessarily tied to the result of the recommendation.", "fields_and_connections": [{"name": "description", "type": "String!", "description": "A description of the fact.", "not_nullable": true}, {"name": "sentiment", "type": "RiskFactSentiment!", "description": "Indicates whether the fact is a negative, neutral or positive contributor with regards to risk.", "not_nullable": true}], "examples": []}, {"name": "SaleAdditionalFee", "description": "The additional fee details for a line item.", "fields_and_connections": [{"name": "id", "type": "Node", "description": "A globally-unique ID.", "not_nullable": false}], "examples": []}, {"name": "SaleTax", "description": "The tax allocated to a sale from a single tax line.", "fields_and_connections": [{"name": "amount", "type": "MoneyBag!", "description": "The portion of the total tax amount on the related sale that comes from the associated tax line.", "not_nullable": true}, {"name": "id", "type": "ID!", "description": "The unique ID for the sale tax.", "not_nullable": true}, {"name": "taxLine", "type": "TaxLine!", "description": "The tax line associated with the sale.", "not_nullable": true}], "examples": []}, {"name": "ScriptDiscountApplication", "description": "Script discount applications capture the intentions of a discount that\nwas created by a Shopify Script for an order's line item or shipping line.\nDiscount applications don't represent the actual final amount discounted on a line (line item or shipping line). The actual amount discounted on a line is represented by the DiscountAllocation object.", "fields_and_connections": [{"name": "allocationMethod", "type": "DiscountApplication", "description": "The method by which the discount's value is applied to its entitled items.", "not_nullable": false}], "examples": []}, {"name": "ShippingLine", "description": "Represents the shipping details that the customer chose for their order.", "fields_and_connections": [{"name": "carrierIdentifier", "type": "String", "description": "A reference to the carrier service that provided the rate.\nPresent when the rate was computed by a third-party carrier service.", "not_nullable": false}, {"name": "code", "type": "String", "description": "A reference to the shipping method.", "not_nullable": false}, {"name": "currentDiscountedPriceSet", "type": "MoneyBag!", "description": "The current shipping price after applying refunds, after applying discounts. If the parent `order.taxesIncluded`` field is true, then this price includes taxes. Otherwise, this field is the pre-tax price.", "not_nullable": true}, {"name": "custom", "type": "Boolean!", "description": "Whether the shipping line is custom or not.", "not_nullable": true}, {"name": "deliveryCategory", "type": "String", "description": "The general classification of the delivery method.", "not_nullable": false}, {"name": "discountAllocations", "type": "[DiscountAllocation!]!", "description": "The discounts that have been allocated to the shipping line.", "not_nullable": true}, {"name": "discountedPriceSet", "type": "MoneyBag!", "description": "The shipping price after applying discounts. If the parent order.taxesIncluded field is true, then this price includes taxes. If not, it's the pre-tax price.\nAs of API version 2024-07, this will be calculated including cart level discounts, such as the free shipping discount.", "not_nullable": true}, {"name": "id", "type": "ID", "description": "A globally-unique ID.", "not_nullable": false}, {"name": "isRemoved", "type": "Boolean!", "description": "Whether the shipping line has been removed.", "not_nullable": true}, {"name": "originalPriceSet", "type": "MoneyBag!", "description": "The pre-tax shipping price without any discounts applied.", "not_nullable": true}, {"name": "phone", "type": "String", "description": "The phone number at the shipping address.", "not_nullable": false}, {"name": "shippingRateHandle", "type": "String", "description": "A unique identifier for the shipping rate. The format can change without notice and isn't meant to be shown to users.", "not_nullable": false}, {"name": "source", "type": "String", "description": "Returns the rate source for the shipping line.", "not_nullable": false}, {"name": "taxLines", "type": "[TaxLine!]!", "description": "The TaxLine objects connected to this shipping line.", "not_nullable": true}, {"name": "title", "type": "String!", "description": "Returns the title of the shipping line.", "not_nullable": true}, {"name": "discountedPrice", "type": "MoneyV2!", "description": "The pre-tax shipping price with discounts applied.\nAs of API version 2024-07, this will be calculated including cart level discounts, such as the free shipping discount. Use discountedPriceSet instead.", "not_nullable": true}, {"name": "originalPrice", "type": "MoneyV2!", "description": "The pre-tax shipping price without any discounts applied. Use originalPriceSet instead.", "not_nullable": true}, {"name": "price", "type": "Money!", "description": "Returns the price of the shipping line. Use originalPriceSet instead.", "not_nullable": true}, {"name": "requestedFulfillmentService", "type": "FulfillmentService", "description": "The fulfillment service requested for the shipping method.\nPresent if the shipping method requires processing by a third party fulfillment service. requestedFulfillmentService is no longer in use. Order routing does not use the requestedFulfillmentService during order and fulfillment order creation.", "not_nullable": false}], "examples": []}, {"name": "ShippingLineSale", "description": "A sale associated with a shipping charge.", "fields_and_connections": [{"name": "actionType", "type": "Sale", "description": "The type of order action that the sale represents.", "not_nullable": false}], "examples": []}, {"name": "ShippingRefund", "description": "Represents the shipping costs refunded on the Refund.", "fields_and_connections": [{"name": "amountSet", "type": "MoneyBag!", "description": "The monetary value of the shipping fees to be refunded in shop and presentment currencies.", "not_nullable": true}, {"name": "maximumRefundableSet", "type": "MoneyBag!", "description": "The maximum amount of shipping fees currently refundable in shop and presentment currencies.", "not_nullable": true}, {"name": "taxSet", "type": "MoneyBag!", "description": "The monetary value of the tax allocated to shipping fees to be refunded in shop and presentment currencies.", "not_nullable": true}, {"name": "amount", "type": "Money!", "description": "The monetary value of the shipping fees to be refunded. Use amountSet instead.", "not_nullable": true}, {"name": "maximumRefundable", "type": "Money!", "description": "The maximum amount of shipping fees currently refundable. Use maximumRefundableSet instead.", "not_nullable": true}, {"name": "tax", "type": "Money!", "description": "The monetary value of the tax allocated to shipping fees to be refunded. Use taxSet instead.", "not_nullable": true}], "examples": []}, {"name": "ShopifyPaymentsExtendedAuthorization", "description": "Presents all Shopify Payments information related to an extended authorization.", "fields_and_connections": [{"name": "extendedAuthorizationExpiresAt", "type": "DateTime!", "description": "The time after which the extended authorization expires. After the expiry, the merchant is unable to capture the payment.", "not_nullable": true}, {"name": "standardAuthorizationExpiresAt", "type": "DateTime!", "description": "The time after which capture will incur an additional fee.", "not_nullable": true}], "examples": []}, {"name": "ShopifyPaymentsRefundSet", "description": "Presents all Shopify Payments specific information related to an order refund.", "fields_and_connections": [{"name": "acquirerReferenceNumber", "type": "String", "description": "The acquirer reference number (ARN) code generated for Visa/Mastercard transactions.", "not_nullable": false}], "examples": []}, {"name": "ShopifyPaymentsTransactionSet", "description": "Presents all Shopify Payments specific information related to an order transaction.", "fields_and_connections": [{"name": "extendedAuthorizationSet", "type": "ShopifyPaymentsExtendedAuthorization", "description": "Contains all fields related to an extended authorization.", "not_nullable": false}, {"name": "refundSet", "type": "ShopifyPaymentsRefundSet", "description": "Contains all fields related to a refund.", "not_nullable": false}], "examples": []}, {"name": "ShopifyProtectOrderEligibility", "description": "The eligibility details of an order's protection against fraudulent chargebacks by Shopify Protect.", "fields_and_connections": [{"name": "status", "type": "ShopifyProtectEligibilityStatus!", "description": "The status of whether an order is eligible for protection against fraudulent chargebacks.", "not_nullable": true}], "examples": []}, {"name": "ShopifyProtectOrderSummary", "description": "A summary of Shopify Protect details for an order.", "fields_and_connections": [{"name": "eligibility", "type": "ShopifyProtectOrderEligibility!", "description": "The eligibility details of an order's protection against fraudulent chargebacks.", "not_nullable": true}, {"name": "status", "type": "ShopifyProtectStatus!", "description": "The status of the order's protection against fraudulent chargebacks.", "not_nullable": true}], "examples": []}, {"name": "ShopPayInstallmentsPaymentDetails", "description": "Shop Pay Installments payment details related to a transaction.", "fields_and_connections": [{"name": "paymentMethodName", "type": "BasePaymentDetails", "description": "The name of payment method used by the buyer.", "not_nullable": false}], "examples": []}, {"name": "SubscriptionAppliedCodeDiscount", "description": "Represents an applied code discount.", "fields_and_connections": [{"name": "id", "type": "subscriptionDraftDiscountCodeApply", "description": "Applies a code discount on the subscription draft.", "not_nullable": false}], "examples": []}, {"name": "SubscriptionBillingAttempt", "description": "A record of an execution of the subscription billing process. Billing attempts use\nidempotency keys to avoid duplicate order creation. A successful billing attempt\nwill create an order.", "fields_and_connections": [{"name": "completedAt", "type": "subscriptionBillingAttempt", "description": "Returns a SubscriptionBillingAttempt by ID.", "not_nullable": false}, {"name": "completedAt", "type": "subscriptionBillingAttempts", "description": "Returns subscription billing attempts on a store.", "not_nullable": false}, {"name": "completedAt", "type": "subscriptionBillingAttemptCreate", "description": "Creates a new subscription billing attempt. For more information, refer to Create a subscription contract.", "not_nullable": false}, {"name": "completedAt", "type": "subscriptionBillingCycleCharge", "description": "Creates a new subscription billing attempt for a specified billing cycle. This is the alternative mutation for subscriptionBillingAttemptCreate. For more information, refer to Create a subscription contract.", "not_nullable": false}, {"name": "completedAt", "type": "Node", "description": "The date and time when the billing attempt was completed.", "not_nullable": false}], "examples": []}, {"name": "SubscriptionBillingAttemptGenericError", "description": "A base error type that applies to all uncategorized error classes.", "fields_and_connections": [{"name": "code", "type": "SubscriptionBillingAttemptProcessingError", "description": "The code for the error.", "not_nullable": false}], "examples": []}, {"name": "SubscriptionBillingAttemptInsufficientStockProductVariantsError", "description": "An inventory error caused by an issue with one or more of the contract merchandise lines.", "fields_and_connections": [{"name": "code", "type": "SubscriptionBillingAttemptProcessingError", "description": "The code for the error.", "not_nullable": false}], "examples": []}, {"name": "SubscriptionBillingAttemptOutOfStockProductVariantsError", "description": "An inventory error caused by an issue with one or more of the contract merchandise lines.", "fields_and_connections": [{"name": "code", "type": "SubscriptionBillingAttemptProcessingError", "description": "The code for the error.", "not_nullable": false}], "examples": []}, {"name": "SubscriptionBillingCycle", "description": "A subscription billing cycle.", "fields_and_connections": [{"name": "billingAttemptExpectedDate", "type": "subscriptionBillingCycle", "description": "Returns a subscription billing cycle found either by cycle index or date.", "not_nullable": false}, {"name": "billingAttemptExpectedDate", "type": "subscriptionBillingCycleBulkResults", "description": "Retrieves the results of the asynchronous job for the subscription billing cycle bulk action based on the specified job ID.\nThis query can be used to obtain the billing cycles that match the criteria defined in the subscriptionBillingCycleBulkSearch and subscriptionBillingCycleBulkCharge mutations.", "not_nullable": false}, {"name": "billingAttemptExpectedDate", "type": "subscriptionBillingCycles", "description": "Returns subscription billing cycles for a contract ID.", "not_nullable": false}, {"name": "billingAttemptExpectedDate", "type": "subscriptionBillingCycleEditDelete", "description": "Delete the schedule and contract edits of the selected subscription billing cycle.", "not_nullable": false}, {"name": "billingAttemptExpectedDate", "type": "subscriptionBillingCycleEditsDelete", "description": "Delete the current and future schedule and contract edits of a list of subscription billing cycles.", "not_nullable": false}, {"name": "billingAttemptExpectedDate", "type": "subscriptionBillingCycleScheduleEdit", "description": "Modify the schedule of a specific billing cycle.", "not_nullable": false}, {"name": "billingAttemptExpectedDate", "type": "subscriptionBillingCycleSkip", "description": "Skips a Subscription Billing Cycle.", "not_nullable": false}, {"name": "billingAttemptExpectedDate", "type": "subscriptionBillingCycleUnskip", "description": "Unskips a Subscription Billing Cycle.", "not_nullable": false}], "examples": []}, {"name": "SubscriptionBillingCycleEditedContract", "description": "Represents a subscription contract with billing cycles.", "fields_and_connections": [{"name": "app", "type": "subscriptionBillingCycleContractDraftCommit", "description": "Commits the updates of a Subscription Billing Cycle Contract draft.", "not_nullable": false}, {"name": "app", "type": "SubscriptionContractBase", "description": "The subscription app that the subscription contract is registered to.", "not_nullable": false}], "examples": []}, {"name": "SubscriptionBillingPolicy", "description": "Represents a Subscription Billing Policy.", "fields_and_connections": [{"name": "anchors", "type": "[SellingPlanAnchor!]!", "description": "Specific anchor dates upon which the billing interval calculations should be made.", "not_nullable": true}, {"name": "interval", "type": "SellingPlanInterval!", "description": "The kind of interval that's associated with this schedule (e.g. Monthly, Weekly, etc).", "not_nullable": true}, {"name": "intervalCount", "type": "Int!", "description": "The number of billing intervals between invoices.", "not_nullable": true}, {"name": "maxCycles", "type": "Int", "description": "Maximum amount of cycles after which the subscription ends.", "not_nullable": false}, {"name": "minCycles", "type": "Int", "description": "Minimum amount of cycles required in the subscription.", "not_nullable": false}], "examples": []}, {"name": "SubscriptionContract", "description": "Represents a Subscription Contract.", "fields_and_connections": [{"name": "app", "type": "subscriptionContract", "description": "Returns a Subscription Contract resource by ID.", "not_nullable": false}, {"name": "app", "type": "subscriptionContracts", "description": "List Subscription Contracts.", "not_nullable": false}, {"name": "app", "type": "subscriptionContractActivate", "description": "Activates a Subscription Contract. Contract status must be either active, paused, or failed.", "not_nullable": false}, {"name": "app", "type": "subscriptionContractAtomicCreate", "description": "Creates a Subscription Contract.", "not_nullable": false}, {"name": "app", "type": "subscriptionContractCancel", "description": "Cancels a Subscription Contract.", "not_nullable": false}, {"name": "app", "type": "subscriptionContractExpire", "description": "Expires a Subscription Contract.", "not_nullable": false}, {"name": "app", "type": "subscriptionContractFail", "description": "Fails a Subscription Contract.", "not_nullable": false}, {"name": "app", "type": "subscriptionContractPause", "description": "Pauses a Subscription Contract.", "not_nullable": false}, {"name": "app", "type": "subscriptionContractProductChange", "description": "Allows for the easy change of a Product in a Contract or a Product price change.", "not_nullable": false}, {"name": "app", "type": "subscriptionContractSetNextBillingDate", "description": "Sets the next billing date of a Subscription Contract. This field is managed by the apps.\nAlternatively you can utilize our\nBilling Cycles APIs,\nwhich provide auto-computed billing dates and additional functionalities.", "not_nullable": false}, {"name": "app", "type": "subscriptionDraftCommit", "description": "Commits the updates of a Subscription Contract draft.", "not_nullable": false}, {"name": "app", "type": "Node", "description": "The subscription app that the subscription contract is registered to.", "not_nullable": false}, {"name": "app", "type": "SubscriptionContractBase", "description": "The subscription app that the subscription contract is registered to.", "not_nullable": false}], "examples": []}, {"name": "SubscriptionCyclePriceAdjustment", "description": "Represents a Subscription Line Pricing Cycle Adjustment.", "fields_and_connections": [{"name": "adjustmentType", "type": "SellingPlanPricingPolicyAdjustmentType!", "description": "Price adjustment type.", "not_nullable": true}, {"name": "adjustmentValue", "type": "SellingPlanPricingPolicyAdjustmentValue!", "description": "Price adjustment value.", "not_nullable": true}, {"name": "afterCycle", "type": "Int!", "description": "The number of cycles required before this pricing policy applies.", "not_nullable": true}, {"name": "computedPrice", "type": "MoneyV2!", "description": "The computed price after the adjustments applied.", "not_nullable": true}], "examples": []}, {"name": "SubscriptionDeliveryMethodLocalDelivery", "description": "A subscription delivery method for local delivery.\nThe other subscription delivery methods can be found in the SubscriptionDeliveryMethod union type.", "fields_and_connections": [{"name": "address", "type": "SubscriptionMailingAddress!", "description": "The address to deliver to.", "not_nullable": true}, {"name": "localDeliveryOption", "type": "SubscriptionDeliveryMethodLocalDeliveryOption!", "description": "The details of the local delivery method to use.", "not_nullable": true}], "examples": []}, {"name": "SubscriptionDeliveryMethodLocalDeliveryOption", "description": "The selected delivery option on a subscription contract.", "fields_and_connections": [{"name": "code", "type": "String", "description": "A custom reference to the delivery method for use with automations.", "not_nullable": false}, {"name": "description", "type": "String", "description": "The details displayed to the customer to describe the local delivery option.", "not_nullable": false}, {"name": "instructions", "type": "String", "description": "The delivery instructions that the customer can provide to the merchant.", "not_nullable": false}, {"name": "phone", "type": "String!", "description": "The phone number that the customer provided to the merchant.\nFormatted using E.164 standard. For example, +16135551111.", "not_nullable": true}, {"name": "presentmentTitle", "type": "String", "description": "The presentment title of the local delivery option.", "not_nullable": false}, {"name": "title", "type": "String", "description": "The title of the local delivery option.", "not_nullable": false}], "examples": []}, {"name": "SubscriptionDeliveryMethodPickup", "description": "A delivery method with a pickup option.", "fields_and_connections": [{"name": "pickupOption", "type": "SubscriptionDeliveryMethodPickupOption!", "description": "The details of the pickup delivery method to use.", "not_nullable": true}], "examples": []}, {"name": "SubscriptionDeliveryMethodPickupOption", "description": "Represents the selected pickup option on a subscription contract.", "fields_and_connections": [{"name": "code", "type": "String", "description": "A custom reference to the delivery method for use with automations.", "not_nullable": false}, {"name": "description", "type": "String", "description": "The details displayed to the customer to describe the pickup option.", "not_nullable": false}, {"name": "location", "type": "Location!", "description": "The location where the customer will pick up the merchandise.", "not_nullable": true}, {"name": "presentmentTitle", "type": "String", "description": "The presentment title of the pickup option.", "not_nullable": false}, {"name": "title", "type": "String", "description": "The title of the pickup option.", "not_nullable": false}], "examples": []}, {"name": "SubscriptionDeliveryMethodShipping", "description": "Represents a shipping delivery method: a mailing address and a shipping option.", "fields_and_connections": [{"name": "address", "type": "SubscriptionMailingAddress!", "description": "The address to ship to.", "not_nullable": true}, {"name": "shippingOption", "type": "SubscriptionDeliveryMethodShippingOption!", "description": "The details of the shipping method to use.", "not_nullable": true}], "examples": []}, {"name": "SubscriptionDeliveryMethodShippingOption", "description": "Represents the selected shipping option on a subscription contract.", "fields_and_connections": [{"name": "code", "type": "String", "description": "The code of the shipping option.", "not_nullable": false}, {"name": "description", "type": "String", "description": "The description of the shipping option.", "not_nullable": false}, {"name": "presentmentTitle", "type": "String", "description": "The presentment title of the shipping option.", "not_nullable": false}, {"name": "title", "type": "String", "description": "The title of the shipping option.", "not_nullable": false}, {"name": "carrierService", "type": "DeliveryCarrierService", "description": "The carrier service that's providing this shipping option.\nThis field isn't currently supported and returns null. This field has never been implemented.", "not_nullable": false}], "examples": []}, {"name": "SubscriptionDeliveryOptionResultFailure", "description": "A failure to find the available delivery options for a subscription contract.", "fields_and_connections": [{"name": "message", "type": "String", "description": "The reason for the failure.", "not_nullable": false}], "examples": []}, {"name": "SubscriptionDeliveryOptionResultSuccess", "description": "The delivery option for a subscription contract.", "fields_and_connections": [{"name": "deliveryOptions", "type": "[SubscriptionDeliveryOption!]!", "description": "The available delivery options.", "not_nullable": true}], "examples": []}, {"name": "SubscriptionDeliveryPolicy", "description": "Represents a Subscription Delivery Policy.", "fields_and_connections": [{"name": "anchors", "type": "[SellingPlanAnchor!]!", "description": "The specific anchor dates upon which the delivery interval calculations should be made.", "not_nullable": true}, {"name": "interval", "type": "SellingPlanInterval!", "description": "The kind of interval that's associated with this schedule (e.g. Monthly, Weekly, etc).", "not_nullable": true}, {"name": "intervalCount", "type": "Int!", "description": "The number of delivery intervals between deliveries.", "not_nullable": true}], "examples": []}, {"name": "SubscriptionDiscountAllocation", "description": "Represents what a particular discount reduces from a line price.", "fields_and_connections": [{"name": "amount", "type": "MoneyV2!", "description": "Allocation amount.", "not_nullable": true}, {"name": "discount", "type": "SubscriptionDiscount!", "description": "Discount that created the allocation.", "not_nullable": true}], "examples": []}, {"name": "SubscriptionDiscountEntitledLines", "description": "Represents the subscription lines the discount applies on.", "fields_and_connections": [{"name": "all", "type": "Boolean!", "description": "Specify whether the subscription discount will apply on all subscription lines.", "not_nullable": true}, {"name": "lines", "type": "SubscriptionLineConnection!", "description": "The list of subscription lines associated with the subscription discount.", "not_nullable": true}], "examples": []}, {"name": "SubscriptionDiscountFixedAmountValue", "description": "The value of the discount and how it will be applied.", "fields_and_connections": [{"name": "amount", "type": "MoneyV2!", "description": "The fixed amount value of the discount.", "not_nullable": true}, {"name": "appliesOnEachItem", "type": "Boolean!", "description": "Whether the amount is applied per item.", "not_nullable": true}], "examples": []}, {"name": "SubscriptionDiscountPercentageValue", "description": "The percentage value of the discount.", "fields_and_connections": [{"name": "percentage", "type": "Int!", "description": "The percentage value of the discount.", "not_nullable": true}], "examples": []}, {"name": "SubscriptionDraft", "description": "Represents a Subscription Draft.", "fields_and_connections": [{"name": "billingCycle", "type": "subscriptionDraft", "description": "Returns a Subscription Draft resource by ID.", "not_nullable": false}, {"name": "billingCycle", "type": "subscriptionBillingCycleContractDraftConcatenate", "description": "Concatenates a contract to a Subscription Draft.", "not_nullable": false}, {"name": "billingCycle", "type": "subscriptionBillingCycleContractEdit", "description": "Edit the contents of a subscription contract for the specified billing cycle.", "not_nullable": false}, {"name": "billingCycle", "type": "subscriptionContractCreate", "description": "Creates a Subscription Contract Draft.\nYou can submit all the desired information for the draft using Subscription Draft Input object.\nYou can also update the draft using the Subscription Contract Update mutation.\nThe draft is not saved until you call the Subscription Draft Commit mutation.", "not_nullable": false}, {"name": "billingCycle", "type": "subscriptionContractUpdate", "description": "The subscriptionContractUpdate mutation allows you to create a draft of an existing subscription contract. This draft can be reviewed and modified as needed. Once the draft is committed with subscriptionDraftCommit, the changes are applied to the original subscription contract.", "not_nullable": false}, {"name": "billingCycle", "type": "subscriptionDraftDiscountAdd", "description": "Adds a subscription discount to a subscription draft.", "not_nullable": false}, {"name": "billingCycle", "type": "subscriptionDraftDiscountCodeApply", "description": "Applies a code discount on the subscription draft.", "not_nullable": false}, {"name": "billingCycle", "type": "subscriptionDraftDiscountRemove", "description": "Removes a subscription discount from a subscription draft.", "not_nullable": false}, {"name": "billingCycle", "type": "subscriptionDraftDiscountUpdate", "description": "Updates a subscription discount on a subscription draft.", "not_nullable": false}, {"name": "billingCycle", "type": "subscriptionDraftFreeShippingDiscountAdd", "description": "Adds a subscription free shipping discount to a subscription draft.", "not_nullable": false}, {"name": "billingCycle", "type": "subscriptionDraftFreeShippingDiscountUpdate", "description": "Updates a subscription free shipping discount on a subscription draft.", "not_nullable": false}, {"name": "billingCycle", "type": "subscriptionDraftLineAdd", "description": "Adds a subscription line to a subscription draft.", "not_nullable": false}, {"name": "billingCycle", "type": "subscriptionDraftLineRemove", "description": "Removes a subscription line from a subscription draft.", "not_nullable": false}, {"name": "billingCycle", "type": "subscriptionDraftLineUpdate", "description": "Updates a subscription line on a subscription draft.", "not_nullable": false}, {"name": "billingCycle", "type": "subscriptionDraftUpdate", "description": "Updates a Subscription Draft.", "not_nullable": false}, {"name": "billingCycle", "type": "Node", "description": "The billing cycle that the subscription contract will be associated with.", "not_nullable": false}], "examples": []}, {"name": "SubscriptionLine", "description": "Represents a Subscription Line.", "fields_and_connections": [{"name": "concatenatedOriginContract", "type": "subscriptionContractProductChange", "description": "Allows for the easy change of a Product in a Contract or a Product price change.", "not_nullable": false}, {"name": "concatenatedOriginContract", "type": "subscriptionDraftLineAdd", "description": "Adds a subscription line to a subscription draft.", "not_nullable": false}, {"name": "concatenatedOriginContract", "type": "subscriptionDraftLineRemove", "description": "Removes a subscription line from a subscription draft.", "not_nullable": false}, {"name": "concatenatedOriginContract", "type": "subscriptionDraftLineUpdate", "description": "Updates a subscription line on a subscription draft.", "not_nullable": false}], "examples": []}, {"name": "SubscriptionLocalDeliveryOption", "description": "A local delivery option for a subscription contract.", "fields_and_connections": [{"name": "code", "type": "String!", "description": "The code of the local delivery option.", "not_nullable": true}, {"name": "description", "type": "String", "description": "The description of the local delivery option.", "not_nullable": false}, {"name": "phoneRequired", "type": "Boolean!", "description": "Whether a phone number is required for the local delivery option.", "not_nullable": true}, {"name": "presentmentTitle", "type": "String", "description": "The presentment title of the local delivery option.", "not_nullable": false}, {"name": "price", "type": "MoneyV2", "description": "The price of the local delivery option.", "not_nullable": false}, {"name": "title", "type": "String!", "description": "The title of the local delivery option.", "not_nullable": true}], "examples": []}, {"name": "SubscriptionMailingAddress", "description": "Represents a Mailing Address on a Subscription.", "fields_and_connections": [{"name": "address1", "type": "String", "description": "The first line of the address. Typically the street address or PO Box number.", "not_nullable": false}, {"name": "address2", "type": "String", "description": "The second line of the address. Typically the number of the apartment, suite, or unit.", "not_nullable": false}, {"name": "city", "type": "String", "description": "The name of the city, district, village, or town.", "not_nullable": false}, {"name": "company", "type": "String", "description": "The name of the customer's company or organization.", "not_nullable": false}, {"name": "country", "type": "String", "description": "The name of the country.", "not_nullable": false}, {"name": "countryCode", "type": "CountryCode", "description": "The two-letter code for the country of the address.\nFor example, US.", "not_nullable": false}, {"name": "firstName", "type": "String", "description": "The first name of the customer.", "not_nullable": false}, {"name": "lastName", "type": "String", "description": "The last name of the customer.", "not_nullable": false}, {"name": "name", "type": "String", "description": "The full name of the customer, based on firstName and lastName.", "not_nullable": false}, {"name": "phone", "type": "String", "description": "A unique phone number for the customer. Formatted using E.164 standard. For example, +16135551111.", "not_nullable": false}, {"name": "province", "type": "String", "description": "The region of the address, such as the province, state, or district.", "not_nullable": false}, {"name": "provinceCode", "type": "String", "description": "The alphanumeric code for the region.\nFor example, ON.", "not_nullable": false}, {"name": "zip", "type": "String", "description": "The zip or postal code of the address.", "not_nullable": false}], "examples": []}, {"name": "SubscriptionManualDiscount", "description": "Custom subscription discount.", "fields_and_connections": [{"name": "entitledLines", "type": "subscriptionDraftDiscountAdd", "description": "Adds a subscription discount to a subscription draft.", "not_nullable": false}, {"name": "entitledLines", "type": "subscriptionDraftDiscountUpdate", "description": "Updates a subscription discount on a subscription draft.", "not_nullable": false}, {"name": "entitledLines", "type": "subscriptionDraftFreeShippingDiscountAdd", "description": "Adds a subscription free shipping discount to a subscription draft.", "not_nullable": false}, {"name": "entitledLines", "type": "subscriptionDraftFreeShippingDiscountUpdate", "description": "Updates a subscription free shipping discount on a subscription draft.", "not_nullable": false}, {"name": "entitledLines", "type": "subscriptionDraftLineRemove", "description": "Removes a subscription line from a subscription draft.", "not_nullable": false}], "examples": []}, {"name": "SubscriptionPickupOption", "description": "A pickup option to deliver a subscription contract.", "fields_and_connections": [{"name": "code", "type": "String!", "description": "The code of the pickup option.", "not_nullable": true}, {"name": "description", "type": "String", "description": "The description of the pickup option.", "not_nullable": false}, {"name": "location", "type": "Location!", "description": "The pickup location.", "not_nullable": true}, {"name": "phoneRequired", "type": "Boolean!", "description": "Whether a phone number is required for the pickup option.", "not_nullable": true}, {"name": "pickupTime", "type": "String!", "description": "The estimated amount of time it takes for the pickup to be ready. For example, \"Usually ready in 24 hours\".).", "not_nullable": true}, {"name": "presentmentTitle", "type": "String", "description": "The presentment title of the pickup option.", "not_nullable": false}, {"name": "price", "type": "MoneyV2", "description": "The price of the pickup option.", "not_nullable": false}, {"name": "title", "type": "String!", "description": "The title of the pickup option.", "not_nullable": true}], "examples": []}, {"name": "SubscriptionPricingPolicy", "description": "Represents a Subscription Line Pricing Policy.", "fields_and_connections": [{"name": "basePrice", "type": "MoneyV2!", "description": "The base price per unit for the subscription line in the contract's currency.", "not_nullable": true}, {"name": "cycleDiscounts", "type": "[SubscriptionCyclePriceAdjustment!]!", "description": "The adjustments per cycle for the subscription line.", "not_nullable": true}], "examples": []}, {"name": "SubscriptionShippingOption", "description": "A shipping option to deliver a subscription contract.", "fields_and_connections": [{"name": "code", "type": "String!", "description": "The code of the shipping option.", "not_nullable": true}, {"name": "description", "type": "String", "description": "The description of the shipping option.", "not_nullable": false}, {"name": "phoneRequired", "type": "Boolean", "description": "If a phone number is required for the shipping option.", "not_nullable": false}, {"name": "presentmentTitle", "type": "String", "description": "The presentment title of the shipping option.", "not_nullable": false}, {"name": "price", "type": "MoneyV2", "description": "The price of the shipping option.", "not_nullable": false}, {"name": "title", "type": "String!", "description": "The title of the shipping option.", "not_nullable": true}, {"name": "carrierService", "type": "DeliveryCarrierService", "description": "The carrier service that's providing this shipping option.\nThis field isn't currently supported and returns null. This field has never been implemented.", "not_nullable": false}], "examples": []}, {"name": "SubscriptionShippingOptionResultFailure", "description": "Failure determining available shipping options for delivery of a subscription contract.", "fields_and_connections": [{"name": "message", "type": "String", "description": "Failure reason.", "not_nullable": false}], "examples": []}, {"name": "SubscriptionShippingOptionResultSuccess", "description": "A shipping option for delivery of a subscription contract.", "fields_and_connections": [{"name": "shippingOptions", "type": "[SubscriptionShippingOption!]!", "description": "Available shipping options.", "not_nullable": true}], "examples": []}, {"name": "SuggestedOrderTransaction", "description": "A suggested transaction. Suggested transaction are usually used in the context of refunds\nand exchanges.", "fields_and_connections": [{"name": "accountNumber", "type": "String", "description": "The masked account number associated with the payment method.", "not_nullable": false}, {"name": "amountSet", "type": "MoneyBag!", "description": "The amount and currency of the suggested order transaction in shop and presentment currencies.", "not_nullable": true}, {"name": "formattedGateway", "type": "String", "description": "The human-readable payment gateway name suggested to process the transaction.", "not_nullable": false}, {"name": "gateway", "type": "String", "description": "The suggested payment gateway used to process the transaction.", "not_nullable": false}, {"name": "kind", "type": "SuggestedOrderTransactionKind!", "description": "Specifies the kind of the suggested order transaction.", "not_nullable": true}, {"name": "maximumRefundableSet", "type": "MoneyBag", "description": "Specifies the available amount to refund on the gateway in shop and presentment currencies. Only available within SuggestedRefund.", "not_nullable": false}, {"name": "parentTransaction", "type": "OrderTransaction", "description": "The associated parent transaction, for example the authorization of a capture.", "not_nullable": false}, {"name": "paymentDetails", "type": "PaymentDetails", "description": "The associated payment details related to the transaction.", "not_nullable": false}, {"name": "amount", "type": "Money!", "description": "The amount of the transaction. Use amountSet instead.", "not_nullable": true}, {"name": "maximumRefundable", "type": "Money", "description": "Specifies the available amount to refund on the gateway. Only available within SuggestedRefund. Use maximumRefundableSet instead.", "not_nullable": false}], "examples": []}, {"name": "SuggestedRefund", "description": "Represents a refund suggested by Shopify based on the items being reimbursed. You can then use the suggested refund object to generate an actual refund.", "fields_and_connections": [{"name": "amountSet", "type": "MoneyBag!", "description": "The total monetary value to be refunded in shop and presentment currencies.", "not_nullable": true}, {"name": "discountedSubtotalSet", "type": "MoneyBag!", "description": "The sum of all the discounted prices of the line items being refunded.", "not_nullable": true}, {"name": "maximumRefundableSet", "type": "MoneyBag!", "description": "The total monetary value available to refund in shop and presentment currencies.", "not_nullable": true}, {"name": "refundDuties", "type": "[RefundDuty!]!", "description": "A list of duties to be refunded from the order.", "not_nullable": true}, {"name": "refundLineItems", "type": "[RefundLineItem!]!", "description": "A list of line items to be refunded, along with restock instructions.", "not_nullable": true}, {"name": "shipping", "type": "ShippingRefund!", "description": "The shipping costs to be refunded from the order.", "not_nullable": true}, {"name": "subtotalSet", "type": "MoneyBag!", "description": "The sum of all the prices of the line items being refunded in shop and presentment currencies.", "not_nullable": true}, {"name": "suggestedTransactions", "type": "[SuggestedOrderTransaction!]!", "description": "A list of suggested order transactions.", "not_nullable": true}, {"name": "totalCartDiscountAmountSet", "type": "MoneyBag!", "description": "The total cart discount amount that was applied to all line items in this refund.", "not_nullable": true}, {"name": "totalDutiesSet", "type": "MoneyBag!", "description": "The sum of all the duties being refunded from the order in shop and presentment currencies. The value must be positive.", "not_nullable": true}, {"name": "totalTaxSet", "type": "MoneyBag!", "description": "The sum of the taxes being refunded from the order in shop and presentment currencies. The value must be positive.", "not_nullable": true}, {"name": "amount", "type": "Money!", "description": "The total monetary value to be refunded. Use amountSet instead.", "not_nullable": true}, {"name": "maximumRefundable", "type": "Money!", "description": "The total monetary value available to refund. Use maximumRefundableSet instead.", "not_nullable": true}, {"name": "subtotal", "type": "Money!", "description": "The sum of all the prices of the line items being refunded. Use subtotalSet instead.", "not_nullable": true}, {"name": "totalTaxes", "type": "Money!", "description": "The sum of the taxes being refunded from the order. The value must be positive. Use totalTaxSet instead.", "not_nullable": true}], "examples": []}, {"name": "SuggestedReturnRefund", "description": "Represents a return refund suggested by Shopify based on the items being reimbursed. You can then use the suggested refund object to generate an actual refund for the return.", "fields_and_connections": [{"name": "amount", "type": "MoneyBag!", "description": "The total monetary value to be refunded in shop and presentment currencies.", "not_nullable": true}, {"name": "discountedSubtotal", "type": "MoneyBag!", "description": "The sum of all the discounted prices of the line items being refunded.", "not_nullable": true}, {"name": "maximumRefundable", "type": "MoneyBag!", "description": "The total monetary value available to refund in shop and presentment currencies.", "not_nullable": true}, {"name": "refundDuties", "type": "[RefundDuty!]!", "description": "A list of duties to be refunded from the order.", "not_nullable": true}, {"name": "shipping", "type": "ShippingRefund!", "description": "The shipping costs to be refunded from the order.", "not_nullable": true}, {"name": "subtotal", "type": "MoneyBag!", "description": "The sum of all the prices of the line items being refunded in shop and presentment currencies.", "not_nullable": true}, {"name": "suggestedTransactions", "type": "[SuggestedOrderTransaction!]!", "description": "A list of suggested order transactions.", "not_nullable": true}, {"name": "totalCartDiscountAmount", "type": "MoneyBag!", "description": "The total cart discount amount that was applied to all line items in this refund.", "not_nullable": true}, {"name": "totalDuties", "type": "MoneyBag!", "description": "The sum of all the duties being refunded from the order in shop and presentment currencies. The value must be positive.", "not_nullable": true}, {"name": "totalTax", "type": "MoneyBag!", "description": "The sum of the taxes being refunded in shop and presentment currencies. The value must be positive.", "not_nullable": true}], "examples": []}, {"name": "TaxLine", "description": "Represents a single tax applied to the associated line item.", "fields_and_connections": [{"name": "channelLiable", "type": "Boolean", "description": "Whether the channel that submitted the tax line is liable for remitting. A value of null indicates unknown liability for this tax line.", "not_nullable": false}, {"name": "priceSet", "type": "MoneyBag!", "description": "The amount of tax, in shop and presentment currencies, after discounts and before returns.", "not_nullable": true}, {"name": "rate", "type": "Float", "description": "The proportion of the line item price that the tax represents as a decimal.", "not_nullable": false}, {"name": "ratePercentage", "type": "Float", "description": "The proportion of the line item price that the tax represents as a percentage.", "not_nullable": false}, {"name": "source", "type": "String", "description": "The source of the tax.", "not_nullable": false}, {"name": "title", "type": "String!", "description": "The name of the tax.", "not_nullable": true}, {"name": "price", "type": "Money!", "description": "The amount of tax, in shop currency, after discounts and before returns. Use priceSet instead.", "not_nullable": true}], "examples": []}, {"name": "TenderTransaction", "description": "A TenderTransaction represents a transaction with financial impact on a shop's balance sheet. A tender transaction always\nrepresents actual money movement between a buyer and a shop. TenderTransactions can be used instead of OrderTransactions\nfor reconciling a shop's cash flow. A TenderTransaction is immutable once created.", "fields_and_connections": [{"name": "amount", "type": "tenderTransactions", "description": "Returns a list of TenderTransactions associated with the shop.", "not_nullable": false}, {"name": "amount", "type": "Node", "description": "The amount and currency of the tender transaction.", "not_nullable": false}], "examples": []}, {"name": "TenderTransactionCreditCardDetails", "description": "Information about the credit card used for this transaction.", "fields_and_connections": [{"name": "creditCardCompany", "type": "String", "description": "The name of the company that issued the customer's credit card. Example: Visa.", "not_nullable": false}, {"name": "creditCardNumber", "type": "String", "description": "The customer's credit card number, with all digits except the last 4 redacted. Example: \u2022\u2022\u2022\u2022 \u2022\u2022\u2022\u2022 \u2022\u2022\u2022\u2022 1234", "not_nullable": false}], "examples": []}, {"name": "TipSale", "description": "A sale associated with a tip.", "fields_and_connections": [{"name": "actionType", "type": "Sale", "description": "The type of order action that the sale represents.", "not_nullable": false}], "examples": []}, {"name": "TransactionFee", "description": "Transaction fee related to an order transaction.", "fields_and_connections": [{"name": "amount", "type": "Node", "description": "Amount of the fee.", "not_nullable": false}], "examples": []}, {"name": "UnknownSale", "description": "This is represents new sale types that have been added in future API versions. You may update to a more recent API version to receive additional details about this sale.", "fields_and_connections": [{"name": "actionType", "type": "Sale", "description": "The type of order action that the sale represents.", "not_nullable": false}], "examples": []}, {"name": "UnverifiedReturnLineItem", "description": "An unverified return line item.", "fields_and_connections": [{"name": "customerNote", "type": "Node", "description": "A note from the customer that describes the item to be returned. Maximum length: 300 characters.", "not_nullable": false}, {"name": "customerNote", "type": "ReturnLineItemType", "description": "A note from the customer that describes the item to be returned. Maximum length: 300 characters.", "not_nullable": false}], "examples": []}]}, {"name": "Privacy", "queries": [{"name": "consentPolicy", "description": "Returns the customer privacy consent policies of a shop.", "arguments": [{"name": "consentRequired", "type": "Boolean", "required": false, "description": "Return policies where consent is required or not."}, {"name": "countryCode", "type": "PrivacyCountryCode", "required": false, "description": "Return policies with the provided country code."}, {"name": "dataSaleOptOutRequired", "type": "Boolean", "required": false, "description": "Return policies where data sale opt out is required or not."}, {"name": "id", "type": "ID", "required": false, "description": "Return the policy with the provided ID."}, {"name": "regionCode", "type": "String", "required": false, "description": "Return policies with the provided region code."}], "returns": [], "examples": []}, {"name": "consentPolicyRegions", "description": "List of countries and regions for which consent policies can be created or updated.", "arguments": [], "returns": [{"name": "ConsentPolicyRegion", "type": "[ConsentPolicyRegion!]!", "description": ""}, {"name": "ConsentPolicyRegion", "type": "[ConsentPolicyRegion!]!", "description": ""}, {"name": "ConsentPolicyRegion", "type": "[ConsentPolicyRegion!]!", "description": ""}], "examples": []}, {"name": "privacySettings", "description": "Privacy related settings for a shop.", "arguments": [], "returns": [{"name": "PrivacySettings", "type": "PrivacySettings!", "description": ""}, {"name": "PrivacySettings", "type": "PrivacySettings!", "description": ""}, {"name": "PrivacySettings", "type": "PrivacySettings!", "description": ""}, {"name": "PrivacySettings", "type": "PrivacySettings!", "description": ""}], "examples": []}], "mutations": [{"name": "consentPolicyUpdate", "description": "Update or create consent policies in bulk.", "arguments": [{"name": "consentPolicies", "type": "[ConsentPolicyInput!]!", "required": false, "description": "The consent policies to update or create. If the country and region matches an existing consent policy, then the consent policy is updated. Otherwise, a new consent policy is created."}], "returns": [], "examples": []}, {"name": "dataSaleOptOut", "description": "Opt out a customer from data sale.", "arguments": [{"name": "email", "type": "String!", "required": false, "description": "The email address of the customer to opt out of data sale."}], "returns": [], "examples": []}, {"name": "privacyFeaturesDisable", "description": "Disable a shop's privacy features.", "arguments": [{"name": "featuresToDisable", "type": "[PrivacyFeaturesEnum!]!", "required": false, "description": "The list of privacy features to disable."}], "returns": [], "examples": []}], "objects": [{"name": "ConsentPolicy", "description": "A consent policy describes the level of consent that the merchant requires from the user before actually\ncollecting and processing the data.", "fields_and_connections": [{"name": "consentRequired", "type": "consentPolicy", "description": "Returns the customer privacy consent policies of a shop.", "not_nullable": false}, {"name": "consentRequired", "type": "consentPolicyUpdate", "description": "Update or create consent policies in bulk.", "not_nullable": false}, {"name": "consentRequired", "type": "Node", "description": "Whether consent is required for the region.", "not_nullable": false}], "examples": []}, {"name": "ConsentPolicyError", "description": "The errors encountered while performing mutations on consent policies.", "fields_and_connections": [{"name": "code", "type": "consentPolicyUpdate", "description": "Update or create consent policies in bulk.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "ConsentPolicyRegion", "description": "A country or region code.", "fields_and_connections": [{"name": "countryCode", "type": "consentPolicyRegions", "description": "List of countries and regions for which consent policies can be created or updated.", "not_nullable": false}], "examples": []}, {"name": "CookieBanner", "description": "A shop's banner settings.", "fields_and_connections": [{"name": "autoManaged", "type": "HasPublishedTranslations", "description": "Indicates if the banner is auto managed.", "not_nullable": false}], "examples": []}, {"name": "DataSaleOptOutPage", "description": "A shop's data sale opt out page.", "fields_and_connections": [{"name": "autoManaged", "type": "Boolean!", "description": "If the data sale opt out page is auto managed.", "not_nullable": true}], "examples": []}, {"name": "PrivacyPolicy", "description": "A shop's privacy policy settings.", "fields_and_connections": [{"name": "autoManaged", "type": "Boolean!", "description": "Whether the policy is auto managed.", "not_nullable": true}, {"name": "supportedLocales", "type": "[String!]!", "description": "Policy template supported locales.", "not_nullable": true}], "examples": []}, {"name": "PrivacySettings", "description": "A shop's privacy settings.", "fields_and_connections": [{"name": "banner", "type": "privacySettings", "description": "Privacy related settings for a shop.", "not_nullable": false}], "examples": []}]}, {"name": "Products and collections", "queries": [{"name": "catalog", "description": "Returns a Catalog resource by ID.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of the Catalog to return."}], "returns": [], "examples": []}, {"name": "catalogOperations", "description": "Returns the most recent catalog operations for the shop.", "arguments": [], "returns": [{"name": "ResourceOperation", "type": "[ResourceOperation!]!", "description": "non-null"}, {"name": "ResourceOperation", "type": "[ResourceOperation!]!", "description": "non-null"}, {"name": "ResourceOperation", "type": "[ResourceOperation!]!", "description": ""}, {"name": "ResourceOperation", "type": "[ResourceOperation!]!", "description": ""}, {"name": "ResourceOperation", "type": "[ResourceOperation!]!", "description": "non-null"}], "examples": []}, {"name": "catalogs", "description": "The catalogs belonging to the shop.", "arguments": [{"name": "after", "type": "String", "required": false, "description": "The elements that come after the specified cursor."}, {"name": "before", "type": "String", "required": false, "description": "The elements that come before the specified cursor."}, {"name": "first", "type": "Int", "required": false, "description": "The first n elements from the paginated list."}, {"name": "last", "type": "Int", "required": false, "description": "The last n elements from the paginated list."}, {"name": "query", "type": "String", "required": false, "description": "A filter made up of terms, connectives, modifiers, and comparators.\nYou can apply one or more filters to a query. Learn more about Shopify API search syntax."}, {"name": "reverse", "type": "Boolean", "required": false, "description": "Reverse the order of the underlying list."}, {"name": "sortKey", "type": "CatalogSortKeys", "required": false, "description": "Sort the underlying list using a key. If your query is slow or returns an error, then try specifying a sort key that matches the field used in the search."}, {"name": "type", "type": "CatalogType", "required": false, "description": "The type of the catalogs to be returned."}], "returns": [], "examples": []}, {"name": "catalogsCount", "description": "The count of catalogs belonging to the shop. Limited to a maximum of 10000.", "arguments": [{"name": "query", "type": "String", "required": false, "description": "A filter made up of terms, connectives, modifiers, and comparators.\nYou can apply one or more filters to a query. Learn more about Shopify API search syntax."}, {"name": "type", "type": "CatalogType", "required": false, "description": "The type of the catalogs to be returned."}], "returns": [], "examples": []}, {"name": "channel", "description": "Lookup a channel by ID. Use publication instead.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of the Channel to return."}], "returns": [], "examples": []}, {"name": "channels", "description": "List of the active sales channels. Use publications instead.", "arguments": [{"name": "after", "type": "String", "required": false, "description": "The elements that come after the specified cursor."}, {"name": "before", "type": "String", "required": false, "description": "The elements that come before the specified cursor."}, {"name": "first", "type": "Int", "required": false, "description": "The first n elements from the paginated list."}, {"name": "last", "type": "Int", "required": false, "description": "The last n elements from the paginated list."}, {"name": "reverse", "type": "Boolean", "required": false, "description": "Reverse the order of the underlying list."}], "returns": [], "examples": []}, {"name": "collection", "description": "Returns a Collection resource by ID.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of the Collection to return."}], "returns": [], "examples": [{"description": "Get a collection by ID", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `query {\n    collection(id: \"gid://shopify/Collection/841564295\") {\n      id\n      title\n      handle\n      updatedAt\n    }\n  }`,\n});\n"}, {"description": "Get a metafield attached to a collection", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `query CollectionMetafield($namespace: String!, $key: String!, $ownerId: ID!) {\n      collection(id: $ownerId) {\n        subtitle: metafield(namespace: $namespace, key: $key) {\n          value\n        }\n      }\n    }`,\n    \"variables\": {\n      \"namespace\": \"my_fields\",\n      \"key\": \"subtitle\",\n      \"ownerId\": \"gid://shopify/Collection/841564295\"\n    },\n  },\n});\n"}, {"description": "Get metafields attached to a collection", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `query CollectionMetafields($ownerId: ID!) {\n      collection(id: $ownerId) {\n        metafields(first: 3) {\n          edges {\n            node {\n              namespace\n              key\n              value\n            }\n          }\n        }\n      }\n    }`,\n    \"variables\": {\n      \"ownerId\": \"gid://shopify/Collection/841564295\"\n    },\n  },\n});\n"}, {"description": "Get pinned metafield definitions associated with a collection", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `query CollectionMetafieldDefinitions($ownerId: ID!, $first: Int, $pinnedStatus: MetafieldDefinitionPinnedStatus, $sortKey: MetafieldDefinitionSortKeys) {\n      collection(id: $ownerId) {\n        metafieldDefinitions(first: $first, pinnedStatus: $pinnedStatus, sortKey: $sortKey) {\n          edges {\n            node {\n              name\n              namespace\n              key\n              type {\n                name\n              }\n            }\n          }\n        }\n      }\n    }`,\n    \"variables\": {\n      \"pinnedStatus\": \"PINNED\",\n      \"ownerId\": \"gid://shopify/Collection/841564295\",\n      \"first\": 10,\n      \"sortKey\": \"PINNED_POSITION\"\n    },\n  },\n});\n"}, {"description": "Retrieve product_ids that are published to a collection_id", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `query CollectionShow($id: ID!) {\n      collection(id: $id) {\n        publishedOnCurrentPublication\n        id\n        title\n        descriptionHtml\n        updatedAt\n        handle\n        products(first: 10) {\n          nodes {\n            id\n          }\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/Collection/841564295\"\n    },\n  },\n});\n"}, {"description": "Retrieve a list of products belonging to a collection", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `query GetCollection($id: ID!) {\n      collection(id: $id) {\n        id\n        title\n        description\n        handle\n        image {\n          url\n        }\n        products(first: 10) {\n          nodes {\n            id\n            title\n          }\n        }\n        updatedAt\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/Collection/841564295\"\n    },\n  },\n});\n"}, {"description": "Retrieve a specific collection listing that is published to your app", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `query CollectionShow($id: ID!) {\n      collection(id: $id) {\n        publishedOnCurrentPublication\n        id\n        title\n        descriptionHtml\n        updatedAt\n        handle\n        image {\n          id\n          height\n          width\n          url\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/Collection/841564295\"\n    },\n  },\n});\n"}, {"description": "Retrieves a single collection", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `query CollectionShow($id: ID!) {\n      collection(id: $id) {\n        publishedOnCurrentPublication\n        id\n        title\n        descriptionHtml\n        updatedAt\n        handle\n        products(first: 10) {\n          nodes {\n            id\n          }\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/Collection/841564295\"\n    },\n  },\n});\n"}, {"description": "Retrieves a single custom collection", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `query GetCollection($id: ID!) {\n      collection(id: $id) {\n        id\n        title\n        description\n        handle\n        image {\n          url\n        }\n        products(first: 10) {\n          nodes {\n            id\n            title\n          }\n        }\n        updatedAt\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/Collection/841564295\"\n    },\n  },\n});\n"}, {"description": "Retrieves a single smart collection", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `query GetCollection($id: ID!) {\n      collection(id: $id) {\n        id\n        title\n        description\n        handle\n        image {\n          url\n        }\n        products(first: 10) {\n          nodes {\n            id\n            title\n          }\n        }\n        updatedAt\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/Collection/841564295\"\n    },\n  },\n});\n"}, {"description": "Returns null when collection is not found", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `query {\n    collection(id: \"gid://shopify/Collection/-1\") {\n      id\n      title\n    }\n  }`,\n});\n"}]}, {"name": "collectionByHandle", "description": "Return a collection by its handle. Use collectionByIdentifier instead.", "arguments": [{"name": "handle", "type": "String!", "required": false, "description": "The handle of the collection."}], "returns": [], "examples": [{"description": "Retrieve a collection with five of its best-selling products by its handle", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `query {\n    collectionByHandle(handle: \"everything\") {\n      id\n      title\n      products(first: 5, sortKey: BEST_SELLING) {\n        edges {\n          node {\n            id\n            title\n            priceRangeV2 {\n              minVariantPrice {\n                amount\n                currencyCode\n              }\n              maxVariantPrice {\n                amount\n                currencyCode\n              }\n            }\n          }\n        }\n      }\n    }\n  }`,\n});\n"}, {"description": "Retrieve the ID of a collection with a specified handle", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `query getCollectionIdFromHandle($handle: String!) {\n      collectionByHandle(handle: $handle) {\n        id\n      }\n    }`,\n    \"variables\": {\n      \"handle\": \"ipods\"\n    },\n  },\n});\n"}]}, {"name": "collectionByIdentifier", "description": "Return a collection by an identifier.", "arguments": [{"name": "identifier", "type": "CollectionIdentifierInput!", "required": false, "description": "The identifier of the collection."}], "returns": [], "examples": []}, {"name": "collectionRulesConditions", "description": "Lists all rules that can be used to create smart collections.", "arguments": [], "returns": [{"name": "CollectionRuleConditions", "type": "[CollectionRuleConditions!]!", "description": "non-null"}, {"name": "CollectionRuleConditions", "type": "[CollectionRuleConditions!]!", "description": "non-null"}, {"name": "CollectionRuleConditions", "type": "[CollectionRuleConditions!]!", "description": "non-null"}, {"name": "CollectionRuleConditions", "type": "[CollectionRuleConditions!]!", "description": ""}, {"name": "CollectionRuleConditions", "type": "[CollectionRuleConditions!]!", "description": "non-null"}], "examples": [{"description": "Retrieve a list of collection rule conditions", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `query {\n    collectionRulesConditions {\n      ruleType\n      allowedRelations\n      defaultRelation\n    }\n  }`,\n});\n"}, {"description": "Retrieve a list of collection rule conditions along with metafield rule objects", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `query {\n    collectionRulesConditions {\n      ruleType\n      allowedRelations\n      defaultRelation\n      ruleObject {\n        ... on CollectionRuleMetafieldCondition {\n          metafieldDefinition {\n            id\n            name\n            ownerType\n            type {\n              name\n            }\n            validations {\n              value\n            }\n          }\n        }\n      }\n    }\n  }`,\n});\n"}]}, {"name": "collections", "description": "Returns a list of collections.", "arguments": [{"name": "after", "type": "String", "required": false, "description": "The elements that come after the specified cursor."}, {"name": "before", "type": "String", "required": false, "description": "The elements that come before the specified cursor."}, {"name": "first", "type": "Int", "required": false, "description": "The first n elements from the paginated list."}, {"name": "last", "type": "Int", "required": false, "description": "The last n elements from the paginated list."}, {"name": "query", "type": "String", "required": false, "description": "A filter made up of terms, connectives, modifiers, and comparators.\nYou can apply one or more filters to a query. Learn more about Shopify API search syntax."}, {"name": "reverse", "type": "Boolean", "required": false, "description": "Reverse the order of the underlying list."}, {"name": "savedSearchId", "type": "ID", "required": false, "description": "The ID of a saved search.\nThe search\u2019s query string is used as the query argument."}, {"name": "sortKey", "type": "CollectionSortKeys", "required": false, "description": "Sort the underlying list using a key. If your query is slow or returns an error, then try specifying a sort key that matches the field used in the search."}], "returns": [], "examples": [{"description": "Retrieve collection listings that are published to your app", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `query CustomCollectionList {\n    collections(first: 50, query: \"collection_type:custom\") {\n      nodes {\n        id\n        handle\n        title\n        updatedAt\n        descriptionHtml\n        publishedOnCurrentPublication\n        sortOrder\n        templateSuffix\n      }\n    }\n  }`,\n});\n"}, {"description": "Retrieve the first five collections", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `query {\n    collections(first: 5) {\n      edges {\n        node {\n          id\n          title\n          handle\n          updatedAt\n          sortOrder\n        }\n      }\n    }\n  }`,\n});\n"}, {"description": "Retrieve the five most recently updated smart collections", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `query {\n    collections(first: 5, query: \"collection_type:smart\", sortKey: UPDATED_AT, reverse: true) {\n      edges {\n        node {\n          id\n          title\n          handle\n          updatedAt\n          sortOrder\n        }\n      }\n    }\n  }`,\n});\n"}, {"description": "Retrieves a list of custom collections", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `query CustomCollectionList {\n    collections(first: 50, query: \"collection_type:custom\") {\n      nodes {\n        id\n        handle\n        title\n        updatedAt\n        descriptionHtml\n        publishedOnCurrentPublication\n        sortOrder\n        templateSuffix\n      }\n    }\n  }`,\n});\n"}]}, {"name": "collectionSavedSearches", "description": "Returns a list of the shop's collection saved searches.", "arguments": [{"name": "after", "type": "String", "required": false, "description": "The elements that come after the specified cursor."}, {"name": "before", "type": "String", "required": false, "description": "The elements that come before the specified cursor."}, {"name": "first", "type": "Int", "required": false, "description": "The first n elements from the paginated list."}, {"name": "last", "type": "Int", "required": false, "description": "The last n elements from the paginated list."}, {"name": "reverse", "type": "Boolean", "required": false, "description": "Reverse the order of the underlying list."}], "returns": [], "examples": []}, {"name": "collectionsCount", "description": "Count of collections. Limited to a maximum of 10000.", "arguments": [{"name": "query", "type": "String", "required": false, "description": "A filter made up of terms, connectives, modifiers, and comparators.\nYou can apply one or more filters to a query. Learn more about Shopify API search syntax."}, {"name": "savedSearchId", "type": "ID", "required": false, "description": "The ID of an existing saved search.\nThe search\u2019s query string is used as the query argument.\nRefer to the SavedSearch object."}], "returns": [], "examples": [{"description": "Retrieves a count of custom collections", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `query CollectionsCount {\n    collectionsCount(query: \"collection_type:custom\") {\n      count\n    }\n  }`,\n});\n"}, {"description": "Retrieves a count of smart collections", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `query CollectionsCount {\n    collectionsCount(query: \"collection_type:smart\") {\n      count\n    }\n  }`,\n});\n"}]}, {"name": "files", "description": "Returns a paginated list of files that have been uploaded to Shopify.", "arguments": [{"name": "after", "type": "String", "required": false, "description": "The elements that come after the specified cursor."}, {"name": "before", "type": "String", "required": false, "description": "The elements that come before the specified cursor."}, {"name": "first", "type": "Int", "required": false, "description": "The first n elements from the paginated list."}, {"name": "last", "type": "Int", "required": false, "description": "The last n elements from the paginated list."}, {"name": "query", "type": "String", "required": false, "description": "A filter made up of terms, connectives, modifiers, and comparators.\nYou can apply one or more filters to a query. Learn more about Shopify API search syntax."}, {"name": "reverse", "type": "Boolean", "required": false, "description": "Reverse the order of the underlying list."}, {"name": "savedSearchId", "type": "ID", "required": false, "description": "The ID of a saved search.\nThe search\u2019s query string is used as the query argument."}, {"name": "sortKey", "type": "FileSortKeys", "required": false, "description": "Sort the underlying list using a key. If your query is slow or returns an error, then try specifying a sort key that matches the field used in the search."}], "returns": [], "examples": []}, {"name": "fileSavedSearches", "description": "A list of the shop's file saved searches.", "arguments": [{"name": "after", "type": "String", "required": false, "description": "The elements that come after the specified cursor."}, {"name": "before", "type": "String", "required": false, "description": "The elements that come before the specified cursor."}, {"name": "first", "type": "Int", "required": false, "description": "The first n elements from the paginated list."}, {"name": "last", "type": "Int", "required": false, "description": "The last n elements from the paginated list."}, {"name": "reverse", "type": "Boolean", "required": false, "description": "Reverse the order of the underlying list."}], "returns": [], "examples": []}, {"name": "priceList", "description": "Returns a price list resource by ID.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of the PriceList to return."}], "returns": [], "examples": [{"description": "Retrieve Price List Details and Associated Catalog Information", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `query {\n    priceList(id: \"gid://shopify/PriceList/524058083\") {\n      catalog {\n        id\n        title\n      }\n      prices(first: 5, query: \"product_id:20995642\") {\n        nodes {\n          price {\n            amount\n            currencyCode\n          }\n          variant {\n            id\n          }\n        }\n      }\n      currency\n      parent {\n        adjustment {\n          type\n          value\n        }\n      }\n    }\n  }`,\n});\n"}, {"description": "Retrieve Quantity Rules on Price List", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `query {\n    priceList(id: \"gid://shopify/PriceList/225060712\") {\n      quantityRules(first: 3, originType: FIXED) {\n        nodes {\n          increment\n          maximum\n          minimum\n          productVariant {\n            id\n            title\n          }\n        }\n      }\n      currency\n    }\n  }`,\n});\n"}, {"description": "Retrieve the FIXED prices on a price list", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `query {\n    priceList(id: \"gid://shopify/PriceList/294167858\") {\n      id\n      name\n      prices(first: 10, originType: FIXED) {\n        nodes {\n          price {\n            amount\n            currencyCode\n          }\n          compareAtPrice {\n            amount\n            currencyCode\n          }\n          originType\n          variant {\n            id\n          }\n        }\n      }\n    }\n  }`,\n});\n"}, {"description": "Retrieve the prices on a price list filtered by product_id", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `query {\n    priceList(id: \"gid://shopify/PriceList/294167858\") {\n      id\n      name\n      prices(first: 10, query: \"product_id:20995642\") {\n        nodes {\n          price {\n            amount\n            currencyCode\n          }\n          compareAtPrice {\n            amount\n            currencyCode\n          }\n          variant {\n            id\n            product {\n              id\n            }\n          }\n        }\n      }\n    }\n  }`,\n});\n"}, {"description": "Retrieve the prices on a price list filtered by variant_id", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `query {\n    priceList(id: \"gid://shopify/PriceList/294167858\") {\n      id\n      name\n      prices(first: 10, query: \"variant_id:498744621\") {\n        nodes {\n          price {\n            amount\n            currencyCode\n          }\n          compareAtPrice {\n            amount\n            currencyCode\n          }\n          variant {\n            id\n          }\n        }\n      }\n    }\n  }`,\n});\n"}]}, {"name": "priceLists", "description": "All price lists for a shop.", "arguments": [{"name": "after", "type": "String", "required": false, "description": "The elements that come after the specified cursor."}, {"name": "before", "type": "String", "required": false, "description": "The elements that come before the specified cursor."}, {"name": "first", "type": "Int", "required": false, "description": "The first n elements from the paginated list."}, {"name": "last", "type": "Int", "required": false, "description": "The last n elements from the paginated list."}, {"name": "reverse", "type": "Boolean", "required": false, "description": "Reverse the order of the underlying list."}, {"name": "sortKey", "type": "PriceListSortKeys", "required": false, "description": "Sort the underlying list using a key. If your query is slow or returns an error, then try specifying a sort key that matches the field used in the search."}], "returns": [], "examples": [{"description": "Retrieve price list in reversed order", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `query {\n    priceLists(first: 1, reverse: true) {\n      nodes {\n        id\n        currency\n        fixedPricesCount\n        catalog {\n          id\n          title\n        }\n      }\n    }\n  }`,\n});\n"}, {"description": "Retrieve the first two price lists", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `query {\n    priceLists(first: 2) {\n      edges {\n        node {\n          id\n          name\n          currency\n          fixedPricesCount\n          parent {\n            adjustment {\n              type\n              value\n            }\n          }\n        }\n      }\n    }\n  }`,\n});\n"}]}, {"name": "product", "description": "Returns a Product resource by ID.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of the Product to return."}], "returns": [], "examples": [{"description": "Get a metafield attached to a product", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `query ProductMetafield($namespace: String!, $key: String!, $ownerId: ID!) {\n      product(id: $ownerId) {\n        linerMaterial: metafield(namespace: $namespace, key: $key) {\n          value\n        }\n      }\n    }`,\n    \"variables\": {\n      \"namespace\": \"my_fields\",\n      \"key\": \"liner_material\",\n      \"ownerId\": \"gid://shopify/Product/108828309\"\n    },\n  },\n});\n"}, {"description": "Get a product using the QueryRoot.node field and a GraphQL fragment", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `query ProductMetafield($namespace: String!, $key: String!, $ownerId: ID!) {\n      product(id: $ownerId) {\n        linerMaterial: metafield(namespace: $namespace, key: $key) {\n          value\n        }\n      }\n    }`,\n    \"variables\": {\n      \"namespace\": \"my_fields\",\n      \"key\": \"liner_material\",\n      \"ownerId\": \"gid://shopify/Product/108828309\"\n    },\n  },\n});\n"}, {"description": "Get metafields attached to a product", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `query ProductMetafields($ownerId: ID!) {\n      product(id: $ownerId) {\n        metafields(first: 3) {\n          edges {\n            node {\n              namespace\n              key\n              value\n            }\n          }\n        }\n      }\n    }`,\n    \"variables\": {\n      \"ownerId\": \"gid://shopify/Product/108828309\"\n    },\n  },\n});\n"}, {"description": "Get pinned metafield definitions associated with a product", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `query ProductMetafieldDefinitions($ownerId: ID!, $first: Int, $pinnedStatus: MetafieldDefinitionPinnedStatus, $sortKey: MetafieldDefinitionSortKeys) {\n      product(id: $ownerId) {\n        metafieldDefinitions(first: $first, pinnedStatus: $pinnedStatus, sortKey: $sortKey) {\n          edges {\n            node {\n              name\n              namespace\n              key\n              type {\n                name\n              }\n            }\n          }\n        }\n      }\n    }`,\n    \"variables\": {\n      \"pinnedStatus\": \"PINNED\",\n      \"ownerId\": \"gid://shopify/Product/108828309\",\n      \"first\": 10,\n      \"sortKey\": \"PINNED_POSITION\"\n    },\n  },\n});\n"}, {"description": "Get the price range for a product for buyers from Canada", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `query {\n    product(id: \"gid://shopify/Product/108828309\") {\n      contextualPricing(context: {country: CA}) {\n        priceRange {\n          maxVariantPrice {\n            amount\n            currencyCode\n          }\n          minVariantPrice {\n            amount\n            currencyCode\n          }\n        }\n      }\n    }\n  }`,\n});\n"}, {"description": "Get the total count of inventory in stock of a product", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `query {\n    product(id: \"gid://shopify/Product/108828309\") {\n      title\n      totalInventory\n    }\n  }`,\n});\n"}, {"description": "Query a product and display its variants", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `query {\n    product(id: \"gid://shopify/Product/108828309\") {\n      title\n      variants(first: 10) {\n        edges {\n          node {\n            selectedOptions {\n              name\n              value\n            }\n            media(first: 10) {\n              edges {\n                node {\n                  alt\n                  mediaContentType\n                  status\n                  __typename\n                  ... on MediaImage {\n                    id\n                    preview {\n                      image {\n                        originalSrc\n                      }\n                    }\n                    __typename\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }`,\n});\n"}, {"description": "Query whether a product is published in a given country", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `query {\n    product(id: \"gid://shopify/Product/49527214\") {\n      title\n      publishedInCA: publishedInContext(context: {country: CA})\n      publishedInGB: publishedInContext(context: {country: GB})\n      publishedInUS: publishedInContext(context: {country: US})\n    }\n  }`,\n});\n"}, {"description": "Receive a list of all Product Images", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `query ProductImageList($productId: ID!) {\n      product(id: $productId) {\n        media(first: 10, query: \"media_type:IMAGE\", sortKey: POSITION) {\n          nodes {\n            id\n            alt\n            ... on MediaImage {\n              createdAt\n              image {\n                width\n                height\n                url\n              }\n            }\n          }\n          pageInfo {\n            startCursor\n            endCursor\n          }\n        }\n      }\n    }`,\n    \"variables\": {\n      \"productId\": \"gid://shopify/Product/108828309\"\n    },\n  },\n});\n"}, {"description": "Retrieve a single product", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `query GetProduct($id: ID!) {\n      product(id: $id) {\n        id\n        title\n        variants(first: 10) {\n          nodes {\n            id\n            title\n          }\n        }\n        collections(first: 10) {\n          nodes {\n            id\n            title\n          }\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/Product/108828309\"\n    },\n  },\n});\n"}, {"description": "Retrieve a specific product listing that is published to your app", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `query ProductShow($id: ID!) {\n      product(id: $id) {\n        publishedOnCurrentPublication\n        id\n        createdAt\n        updatedAt\n        descriptionHtml\n        handle\n        productType\n        title\n        vendor\n        tags\n        publishedAt\n        variants(first: 10) {\n          nodes {\n            id\n          }\n        }\n        images(first: 10) {\n          nodes {\n            id\n            height\n            width\n            url\n          }\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/Product/20995642\"\n    },\n  },\n});\n"}, {"description": "Retrieve media objects", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `query {\n    product(id: \"gid://shopify/Product/108828309\") {\n      title\n      media(first: 5) {\n        edges {\n          node {\n            ...fieldsForMediaTypes\n          }\n        }\n      }\n    }\n  }\n  \n  fragment fieldsForMediaTypes on Media {\n    alt\n    mediaContentType\n    preview {\n      image {\n        id\n        altText\n        originalSrc\n      }\n    }\n    status\n    ... on Video {\n      id\n      sources {\n        format\n        height\n        mimeType\n        url\n        width\n      }\n      originalSource {\n        format\n        height\n        mimeType\n        url\n        width\n      }\n    }\n    ... on ExternalVideo {\n      id\n      host\n      embeddedUrl\n    }\n    ... on Model3d {\n      sources {\n        format\n        mimeType\n        url\n      }\n      originalSource {\n        format\n        mimeType\n        url\n      }\n    }\n    ... on MediaImage {\n      id\n      image {\n        altText\n        originalSrc\n      }\n    }\n  }`,\n});\n"}, {"description": "Retrieves a list of collects", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `query CollectionsForProduct($productId: ID!) {\n      product(id: $productId) {\n        collections(first: 10) {\n          nodes {\n            id\n            title\n          }\n        }\n      }\n    }`,\n    \"variables\": {\n      \"productId\": \"gid://shopify/Product/108828309\"\n    },\n  },\n});\n"}]}, {"name": "productByHandle", "description": "Return a product by its handle. Use productByIdentifier instead.", "arguments": [{"name": "handle", "type": "String!", "required": false, "description": "A unique string that identifies the product. Handles are automatically generated based on the product's title, and are always lowercase. Whitespace and special characters are replaced with a hyphen: -. If there are multiple consecutive whitespace or special characters, then they're replaced with a single hyphen. Whitespace or special characters at the beginning are removed. If a duplicate product title is used, then the handle is auto-incremented by one. For example, if you had two products called Potion, then their handles would be potion and potion-1. After a product has been created, changing the product title doesn't update the handle."}], "returns": [], "examples": [{"description": "Retrieve product information using the product handle", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `query {\n    productByHandle(handle: \"ipod-nano\") {\n      id\n      handle\n      title\n      productType\n      description\n      vendor\n      priceRangeV2 {\n        minVariantPrice {\n          amount\n          currencyCode\n        }\n        maxVariantPrice {\n          amount\n          currencyCode\n        }\n      }\n    }\n  }`,\n});\n"}, {"description": "Retrieve the ID of a product with a specified handle", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `query getProductIdFromHandle($handle: String!) {\n      productByHandle(handle: $handle) {\n        id\n      }\n    }`,\n    \"variables\": {\n      \"handle\": \"element\"\n    },\n  },\n});\n"}]}, {"name": "productByIdentifier", "description": "Return a product by an identifier.", "arguments": [{"name": "identifier", "type": "ProductIdentifierInput!", "required": false, "description": "The identifier of the product."}], "returns": [], "examples": [{"description": "Find a product by custom id", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `query($identifier: ProductIdentifierInput!) {\n      product: productByIdentifier(identifier: $identifier) {\n        id\n        handle\n        title\n      }\n    }`,\n    \"variables\": {\n      \"identifier\": {\n        \"customId\": {\n          \"namespace\": \"custom\",\n          \"key\": \"id\",\n          \"value\": \"1001\"\n        }\n      }\n    },\n  },\n});\n"}, {"description": "Find a product by handle", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `query($identifier: ProductIdentifierInput!) {\n      product: productByIdentifier(identifier: $identifier) {\n        id\n        handle\n        title\n      }\n    }`,\n    \"variables\": {\n      \"identifier\": {\n        \"handle\": \"boots\"\n      }\n    },\n  },\n});\n"}]}, {"name": "productDuplicateJob", "description": "Returns the product duplicate job.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "An ID of a product duplicate job to fetch."}], "returns": [], "examples": []}, {"name": "productOperation", "description": "Returns a ProductOperation resource by ID.\nThis can be used to query the\nProductSetOperation, using\nthe ID that was returned\nwhen the product was created or updated\nby the\nProductSet mutation.\nThe status field indicates whether the operation is CREATED, ACTIVE, or COMPLETE.\nThe product field provides the details of the created or updated product.\nFor the\nProductSetOperation, the\nuserErrors field provides mutation errors that occurred during the operation.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of the ProductOperation to return."}], "returns": [], "examples": [{"description": "View the status of an asynchronous product delete operation", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `query ProductDeleteOperation($id: ID!) {\n      productOperation(id: $id) {\n        ... on ProductDeleteOperation {\n          id\n          status\n          deletedProductId\n          product {\n            id\n          }\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/ProductDeleteOperation/843567278\"\n    },\n  },\n});\n"}, {"description": "View the status of an asynchronous product duplicate operation", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `query ProductDuplicateOperation($operationId: ID!) {\n      productOperation(id: $operationId) {\n        ... on ProductDuplicateOperation {\n          id\n          status\n          newProduct {\n            id\n            title\n          }\n          userErrors {\n            field\n            message\n          }\n        }\n      }\n    }`,\n    \"variables\": {\n      \"operationId\": \"gid://shopify/ProductDuplicateOperation/893212316\"\n    },\n  },\n});\n"}, {"description": "View the status of an asynchronous product set operation", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `query productSetOperation($id: ID!) {\n      productOperation(id: $id) {\n        ... on ProductSetOperation {\n          id\n          status\n          product {\n            id\n          }\n          userErrors {\n            field\n            message\n            code\n          }\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/ProductSetOperation/824846712\"\n    },\n  },\n});\n"}]}, {"name": "productResourceFeedback", "description": "Returns the product resource feedback for the currently authenticated app.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The product associated with the resource feedback."}], "returns": [], "examples": [{"description": "Receive a list of all Product ResourceFeedbacks", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `query {\n    productResourceFeedback(id: \"gid://shopify/Product/1048875085\") {\n      feedbackGeneratedAt\n      messages\n      productId\n      productUpdatedAt\n      state\n    }\n  }`,\n});\n"}]}, {"name": "products", "description": "Returns a list of products.", "arguments": [{"name": "after", "type": "String", "required": false, "description": "The elements that come after the specified cursor."}, {"name": "before", "type": "String", "required": false, "description": "The elements that come before the specified cursor."}, {"name": "first", "type": "Int", "required": false, "description": "The first n elements from the paginated list."}, {"name": "last", "type": "Int", "required": false, "description": "The last n elements from the paginated list."}, {"name": "query", "type": "String", "required": false, "description": "A filter made up of terms, connectives, modifiers, and comparators.\nYou can apply one or more filters to a query. Learn more about Shopify API search syntax."}, {"name": "reverse", "type": "Boolean", "required": false, "description": "Reverse the order of the underlying list."}, {"name": "savedSearchId", "type": "ID", "required": false, "description": "The ID of a saved search.\nThe search\u2019s query string is used as the query argument."}, {"name": "sortKey", "type": "ProductSortKeys", "required": false, "description": "Sort the underlying list using a key. If your query is slow or returns an error, then try specifying a sort key that matches the field used in the search."}], "returns": [], "examples": [{"description": "Get 10 products after a given cursor and whether or not there is a subsequent page of       results", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `query {\n    products(first: 10, after: \"eyJsYXN0X2lkIjoyMDk5NTY0MiwibGFzdF92YWx1ZSI6IjIwOTk1NjQyIn0=\") {\n      edges {\n        node {\n          id\n          title\n          handle\n        }\n        cursor\n      }\n      pageInfo {\n        hasNextPage\n      }\n    }\n  }`,\n});\n"}, {"description": "Get multiple sets of products with a single query using aliases to name the results", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `query {\n    newestProducts: products(first: 5, reverse: true) {\n      edges {\n        node {\n          id\n          title\n        }\n      }\n    }\n    oldestProducts: products(first: 5) {\n      edges {\n        node {\n          id\n          title\n        }\n      }\n    }\n  }`,\n});\n"}, {"description": "Get the 10 most recently created products", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `query {\n    products(first: 10, reverse: true) {\n      edges {\n        node {\n          id\n          title\n          handle\n          resourcePublicationOnCurrentPublication {\n            publication {\n              name\n              id\n            }\n            publishDate\n            isPublished\n          }\n        }\n      }\n    }\n  }`,\n});\n"}, {"description": "Get the first 10 products of a specific product type", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `query {\n    products(first: 10, query: \"product_type:snowboards\") {\n      edges {\n        node {\n          title\n        }\n      }\n    }\n  }`,\n});\n"}, {"description": "Get the first 10 products updated after the specified date", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `query {\n    products(first: 10, query: \"updated_at:>2019-12-01\") {\n      edges {\n        node {\n          id\n          updatedAt\n        }\n      }\n    }\n  }`,\n});\n"}, {"description": "Get the total inventory and price range of three products using a fragment", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `query {\n    Glasses: product(id: \"gid://shopify/Product/20995642\") {\n      ...productInformation\n    }\n    Shoes: product(id: \"gid://shopify/Product/910489600\") {\n      ...productInformation\n    }\n    Bracelet: product(id: \"gid://shopify/Product/108828309\") {\n      ...productInformation\n    }\n  }\n  \n  fragment productInformation on Product {\n    totalInventory\n    priceRange {\n      minVariantPrice {\n        amount\n      }\n      maxVariantPrice {\n        amount\n      }\n    }\n  }`,\n});\n"}, {"description": "Get two specific products by their ID using aliases", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `query {\n    glasses: product(id: \"gid://shopify/Product/108828309\") {\n      title\n      description\n    }\n    shoes: product(id: \"gid://shopify/Product/910489600\") {\n      title\n      description\n    }\n  }`,\n});\n"}, {"description": "Retrieve product_ids that are published to your app", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `query ProductList {\n    products(first: 2) {\n      nodes {\n        publishedOnCurrentPublication\n        id\n      }\n    }\n  }`,\n});\n"}, {"description": "Retrieve a list of products", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `query GetProducts {\n    products(first: 10) {\n      nodes {\n        id\n        title\n      }\n    }\n  }`,\n});\n"}, {"description": "Retrieve product listings that are published to your app", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `query ProductList {\n    products(first: 2) {\n      nodes {\n        publishedOnCurrentPublication\n        id\n        createdAt\n        updatedAt\n        descriptionHtml\n        handle\n        productType\n        title\n        vendor\n        tags\n        publishedAt\n        variants(first: 10) {\n          nodes {\n            id\n          }\n        }\n        images(first: 10) {\n          nodes {\n            id\n            height\n            width\n            url\n          }\n        }\n      }\n    }\n  }`,\n});\n"}]}, {"name": "productSavedSearches", "description": "Returns a list of the shop's product saved searches.", "arguments": [{"name": "after", "type": "String", "required": false, "description": "The elements that come after the specified cursor."}, {"name": "before", "type": "String", "required": false, "description": "The elements that come before the specified cursor."}, {"name": "first", "type": "Int", "required": false, "description": "The first n elements from the paginated list."}, {"name": "last", "type": "Int", "required": false, "description": "The last n elements from the paginated list."}, {"name": "reverse", "type": "Boolean", "required": false, "description": "Reverse the order of the underlying list."}], "returns": [], "examples": []}, {"name": "productsCount", "description": "Count of products.", "arguments": [{"name": "limit", "type": "Int", "required": false, "description": "The upper bound on count value before returning a result."}, {"name": "query", "type": "String", "required": false, "description": "A filter made up of terms, connectives, modifiers, and comparators.\nYou can apply one or more filters to a query. Learn more about Shopify API search syntax."}, {"name": "savedSearchId", "type": "ID", "required": false, "description": "The ID of an existing saved search.\nThe search\u2019s query string is used as the query argument.\nRefer to the SavedSearch object."}], "returns": [], "examples": []}, {"name": "productVariant", "description": "Returns a ProductVariant resource by ID.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of the ProductVariant to return."}], "returns": [], "examples": [{"description": "Get a metafield attached to a product variant", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `query ProductVariantMetafield($namespace: String!, $key: String!, $ownerId: ID!) {\n      productVariant(id: $ownerId) {\n        linerMaterial: metafield(namespace: $namespace, key: $key) {\n          value\n        }\n      }\n    }`,\n    \"variables\": {\n      \"namespace\": \"my_fields\",\n      \"key\": \"liner_material\",\n      \"ownerId\": \"gid://shopify/ProductVariant/43729076\"\n    },\n  },\n});\n"}, {"description": "Get metafields attached to a product variant", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `query ProductVariantMetafields($ownerId: ID!) {\n      productVariant(id: $ownerId) {\n        metafields(first: 3) {\n          edges {\n            node {\n              namespace\n              key\n              value\n            }\n          }\n        }\n      }\n    }`,\n    \"variables\": {\n      \"ownerId\": \"gid://shopify/ProductVariant/43729076\"\n    },\n  },\n});\n"}, {"description": "Get pinned metafield definitions associated with a product variant", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `query ProductVariantMetafieldDefinitions($ownerId: ID!, $first: Int, $pinnedStatus: MetafieldDefinitionPinnedStatus, $sortKey: MetafieldDefinitionSortKeys) {\n      productVariant(id: $ownerId) {\n        metafieldDefinitions(first: $first, pinnedStatus: $pinnedStatus, sortKey: $sortKey) {\n          edges {\n            node {\n              name\n              namespace\n              key\n              type {\n                name\n              }\n            }\n          }\n        }\n      }\n    }`,\n    \"variables\": {\n      \"pinnedStatus\": \"PINNED\",\n      \"ownerId\": \"gid://shopify/ProductVariant/43729076\",\n      \"first\": 10,\n      \"sortKey\": \"PINNED_POSITION\"\n    },\n  },\n});\n"}, {"description": "Get the price for a product variant for buyers in Canada", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `query {\n    productVariant(id: \"gid://shopify/ProductVariant/43729076\") {\n      contextualPricing(context: {country: CA}) {\n        price {\n          amount\n          currencyCode\n        }\n      }\n    }\n  }`,\n});\n"}, {"description": "Get the price for a product variant for different countries in the same request", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `query {\n    productVariant(id: \"gid://shopify/ProductVariant/43729076\") {\n      CanadaPrice: contextualPricing(context: {country: CA}) {\n        price {\n          amount\n          currencyCode\n        }\n      }\n      USPrice: contextualPricing(context: {country: US}) {\n        price {\n          amount\n          currencyCode\n        }\n      }\n      FrancePrice: contextualPricing(context: {country: FR}) {\n        price {\n          amount\n          currencyCode\n        }\n      }\n    }\n  }`,\n});\n"}, {"description": "Receive a single Product Variant", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `query GetProductVariant($id: ID!) {\n      productVariant(id: $id) {\n        id\n        title\n        availableForSale\n        barcode\n        compareAtPrice\n        createdAt\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/ProductVariant/43729076\"\n    },\n  },\n});\n"}, {"description": "Retrieve information for non-existent variant ID", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `query {\n    productVariant(id: \"gid://shopify/ProductVariant/-1\") {\n      contextualPricing(context: {country: CA}) {\n        price {\n          amount\n          currencyCode\n        }\n      }\n    }\n  }`,\n});\n"}]}, {"name": "productVariantByIdentifier", "description": "Return a product variant by an identifier.", "arguments": [{"name": "identifier", "type": "ProductVariantIdentifierInput!", "required": false, "description": "The identifier of the product variant."}], "returns": [], "examples": []}, {"name": "productVariants", "description": "Returns a list of product variants.", "arguments": [{"name": "after", "type": "String", "required": false, "description": "The elements that come after the specified cursor."}, {"name": "before", "type": "String", "required": false, "description": "The elements that come before the specified cursor."}, {"name": "first", "type": "Int", "required": false, "description": "The first n elements from the paginated list."}, {"name": "last", "type": "Int", "required": false, "description": "The last n elements from the paginated list."}, {"name": "query", "type": "String", "required": false, "description": "A filter made up of terms, connectives, modifiers, and comparators.\nYou can apply one or more filters to a query. Learn more about Shopify API search syntax."}, {"name": "reverse", "type": "Boolean", "required": false, "description": "Reverse the order of the underlying list."}, {"name": "savedSearchId", "type": "ID", "required": false, "description": "The ID of a saved search.\nThe search\u2019s query string is used as the query argument."}, {"name": "sortKey", "type": "ProductVariantSortKeys", "required": false, "description": "Sort the underlying list using a key. If your query is slow or returns an error, then try specifying a sort key that matches the field used in the search."}], "returns": [], "examples": [{"description": "Get multiple product variants using their IDs and GraphQL aliases", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `query {\n    productVariant1: productVariant(id: \"gid://shopify/ProductVariant/30322695\") {\n      id\n      title\n    }\n    productVariant2: productVariant(id: \"gid://shopify/ProductVariant/43729076\") {\n      id\n      title\n    }\n    productVariant3: productVariant(id: \"gid://shopify/ProductVariant/113711323\") {\n      id\n      title\n    }\n  }`,\n});\n"}, {"description": "Get the IDs of the first 10 product variants", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `query {\n    productVariants(first: 10) {\n      edges {\n        node {\n          id\n        }\n      }\n    }\n  }`,\n});\n"}, {"description": "Get the first three product variants sorted by available quantity at a location.", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `query {\n    productVariant1: productVariant(id: \"gid://shopify/ProductVariant/30322695\") {\n      id\n      title\n    }\n    productVariant2: productVariant(id: \"gid://shopify/ProductVariant/43729076\") {\n      id\n      title\n    }\n    productVariant3: productVariant(id: \"gid://shopify/ProductVariant/113711323\") {\n      id\n      title\n    }\n  }`,\n});\n"}, {"description": "Get the first three product variants updated after the specified date", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `query {\n    productVariants(first: 3, query: \"updated_at:>2021-01-01\") {\n      edges {\n        node {\n          id\n          title\n          price\n          updatedAt\n          inventoryQuantity\n          product {\n            id\n            title\n          }\n        }\n      }\n    }\n  }`,\n});\n"}, {"description": "Retrieves a list of product variants", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `query ProductVariantsList {\n    productVariants(first: 10, query: \"product_id:20995642\") {\n      nodes {\n        id\n        title\n      }\n      pageInfo {\n        startCursor\n        endCursor\n      }\n    }\n  }`,\n});\n"}]}, {"name": "productVariantsCount", "description": "Count of product variants.", "arguments": [{"name": "query", "type": "String", "required": false, "description": "No supported search fields."}], "returns": [], "examples": []}, {"name": "sellingPlanGroup", "description": "Returns a Selling Plan Group resource by ID.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of the SellingPlanGroup to return."}], "returns": [], "examples": []}, {"name": "sellingPlanGroups", "description": "List Selling Plan Groups.", "arguments": [{"name": "after", "type": "String", "required": false, "description": "The elements that come after the specified cursor."}, {"name": "before", "type": "String", "required": false, "description": "The elements that come before the specified cursor."}, {"name": "first", "type": "Int", "required": false, "description": "The first n elements from the paginated list."}, {"name": "last", "type": "Int", "required": false, "description": "The last n elements from the paginated list."}, {"name": "query", "type": "String", "required": false, "description": "A filter made up of terms, connectives, modifiers, and comparators.\nYou can apply one or more filters to a query. Learn more about Shopify API search syntax."}, {"name": "reverse", "type": "Boolean", "required": false, "description": "Reverse the order of the underlying list."}, {"name": "sortKey", "type": "SellingPlanGroupSortKeys", "required": false, "description": "Sort the underlying list using a key. If your query is slow or returns an error, then try specifying a sort key that matches the field used in the search."}], "returns": [], "examples": []}, {"name": "taxonomy", "description": "The Taxonomy resource lets you access the categories, attributes and values of the loaded taxonomy tree.", "arguments": [], "returns": [{"name": "Taxonomy", "type": "Taxonomy", "description": "non-null"}, {"name": "Taxonomy", "type": "Taxonomy", "description": "non-null"}], "examples": []}], "mutations": [{"name": "catalogContextUpdate", "description": "Updates the context of a catalog.", "arguments": [{"name": "catalogId", "type": "ID!", "required": false, "description": "The ID of the catalog for which to update the context."}, {"name": "contextsToAdd", "type": "CatalogContextInput", "required": false, "description": "The contexts to add to the catalog."}, {"name": "contextsToRemove", "type": "CatalogContextInput", "required": false, "description": "The contexts to remove from the catalog."}], "returns": [], "examples": []}, {"name": "catalogCreate", "description": "Creates a new catalog.", "arguments": [{"name": "input", "type": "CatalogCreateInput!", "required": false, "description": "The properties of the new catalog."}], "returns": [], "examples": []}, {"name": "catalogDelete", "description": "Delete a catalog.", "arguments": [{"name": "deleteDependentResources", "type": "Boolean", "required": false, "description": "Whether to also delete the price list and the publication owned by the catalog."}, {"name": "id", "type": "ID!", "required": false, "description": "The ID of the catalog to delete."}], "returns": [], "examples": []}, {"name": "catalogUpdate", "description": "Updates an existing catalog.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of the catalog to update."}, {"name": "input", "type": "CatalogUpdateInput!", "required": false, "description": "The properties of the updated catalog."}], "returns": [], "examples": []}, {"name": "collectionAddProducts", "description": "Adds products to a collection.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of the collection that's being updated. This can't be a smart collection."}, {"name": "productIds", "type": "[ID!]!", "required": false, "description": "The IDs of the products that are being added to the collection.\nIf any of the products is already present in the input collection,\nthen an error is raised and no products are added."}], "returns": [], "examples": [{"description": "Add a product to a smart collection", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation collectionAddProducts($id: ID!, $productIds: [ID!]!) {\n      collectionAddProducts(id: $id, productIds: $productIds) {\n        collection {\n          id\n          title\n          products(first: 10) {\n            nodes {\n              id\n              title\n            }\n          }\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/Collection/142458073\",\n      \"productIds\": [\n        \"gid://shopify/Product/910489600\"\n      ]\n    },\n  },\n});\n"}, {"description": "Add products that already belong to the specified collection", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation collectionAddProducts($id: ID!, $productIds: [ID!]!) {\n      collectionAddProducts(id: $id, productIds: $productIds) {\n        collection {\n          id\n          title\n          products(first: 10) {\n            nodes {\n              id\n              title\n            }\n          }\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/Collection/1007901140\",\n      \"productIds\": [\n        \"gid://shopify/Product/108828309\",\n        \"gid://shopify/Product/632910392\",\n        \"gid://shopify/Product/20995642\"\n      ]\n    },\n  },\n});\n"}, {"description": "Add products to an existing collection", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation collectionAddProducts($id: ID!, $productIds: [ID!]!) {\n      collectionAddProducts(id: $id, productIds: $productIds) {\n        collection {\n          id\n          title\n          products(first: 10) {\n            nodes {\n              id\n              title\n            }\n          }\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/Collection/636030761\",\n      \"productIds\": [\n        \"gid://shopify/Product/121709582\",\n        \"gid://shopify/Product/108828309\"\n      ]\n    },\n  },\n});\n"}, {"description": "Add products to collections will fail when CollectionsAccess returns false", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation collectionAddProducts($id: ID!, $productIds: [ID!]!) {\n      collectionAddProducts(id: $id, productIds: $productIds) {\n        collection {\n          id\n          title\n          products(first: 10) {\n            nodes {\n              id\n              title\n            }\n          }\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/Collection/636030761\",\n      \"productIds\": [\n        \"gid://shopify/Product/121709582\",\n        \"gid://shopify/Product/108828309\"\n      ]\n    },\n  },\n});\n"}, {"description": "Adds a product to a custom collection", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation AddToCollection($id: ID!, $productIds: [ID!]!) {\n      collectionAddProducts(id: $id, productIds: $productIds) {\n        collection {\n          id\n          title\n          products(first: 10) {\n            nodes {\n              id\n              title\n            }\n          }\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/Collection/1007901140\",\n      \"productIds\": [\n        \"gid://shopify/Product/121709582\"\n      ]\n    },\n  },\n});\n"}]}, {"name": "collectionAddProductsV2", "description": "Asynchronously adds a set of products to a given collection. It can take a long time to run. Instead of returning a collection, it returns a job which should be polled.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of the collection that's being updated."}, {"name": "productIds", "type": "[ID!]!", "required": false, "description": "The IDs of the products that are being added to the collection. If the collection's sort order is manual, the products will be added in the order in which they are provided."}], "returns": [], "examples": [{"description": "Add a product to a non-existing collection", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation collectionAddProductsV2($id: ID!, $productIds: [ID!]!) {\n      collectionAddProductsV2(id: $id, productIds: $productIds) {\n        job {\n          done\n          id\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/Collection/-1\",\n      \"productIds\": [\n        \"gid://shopify/Product/108828309\"\n      ]\n    },\n  },\n});\n"}, {"description": "Add a product to a smart collection", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation collectionAddProductsV2($id: ID!, $productIds: [ID!]!) {\n      collectionAddProductsV2(id: $id, productIds: $productIds) {\n        job {\n          done\n          id\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/Collection/142458073\",\n      \"productIds\": [\n        \"gid://shopify/Product/910489600\"\n      ]\n    },\n  },\n});\n"}, {"description": "Add products that already belong to the specified collection", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation collectionAddProductsV2($id: ID!, $productIds: [ID!]!) {\n      collectionAddProductsV2(id: $id, productIds: $productIds) {\n        job {\n          done\n          id\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/Collection/1007901140\",\n      \"productIds\": [\n        \"gid://shopify/Product/108828309\",\n        \"gid://shopify/Product/632910392\",\n        \"gid://shopify/Product/20995642\"\n      ]\n    },\n  },\n});\n"}, {"description": "Add products to an existing collection", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation collectionAddProductsV2($id: ID!, $productIds: [ID!]!) {\n      collectionAddProductsV2(id: $id, productIds: $productIds) {\n        job {\n          done\n          id\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/Collection/636030761\",\n      \"productIds\": [\n        \"gid://shopify/Product/121709582\",\n        \"gid://shopify/Product/108828309\"\n      ]\n    },\n  },\n});\n"}, {"description": "collectionAddProductsV2 reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation collectionAddProductsV2($id: ID!, $productIds: [ID!]!) {\n      collectionAddProductsV2(id: $id, productIds: $productIds) {\n        job {\n          done\n          id\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/Collection/-1\",\n      \"productIds\": [\n        \"gid://shopify/Product/108828309\"\n      ]\n    },\n  },\n});\n"}]}, {"name": "collectionCreate", "description": "Creates a collection.", "arguments": [{"name": "input", "type": "CollectionInput!", "required": false, "description": "The properties to use when creating the collection."}], "returns": [], "examples": [{"description": "Create a new metafield on a new collection", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation createCollectionMetafields($input: CollectionInput!) {\n      collectionCreate(input: $input) {\n        collection {\n          id\n          metafields(first: 3) {\n            edges {\n              node {\n                id\n                namespace\n                key\n                value\n              }\n            }\n          }\n        }\n        userErrors {\n          message\n          field\n        }\n      }\n    }`,\n    \"variables\": {\n      \"input\": {\n        \"metafields\": [\n          {\n            \"namespace\": \"my_field\",\n            \"key\": \"subtitle\",\n            \"type\": \"single_line_text_field\",\n            \"value\": \"Bold Colors\"\n          }\n        ],\n        \"title\": \"Spring Styles\"\n      }\n    },\n  },\n});\n"}, {"description": "Creates a custom collection", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation CollectionCreate($input: CollectionInput!) {\n      collectionCreate(input: $input) {\n        collection {\n          id\n          title\n          descriptionHtml\n          updatedAt\n          handle\n          image {\n            id\n            height\n            width\n            url\n          }\n          products(first: 10) {\n            nodes {\n              id\n              featuredImage {\n                id\n                height\n                width\n                url\n              }\n            }\n          }\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"input\": {\n        \"title\": \"New Custom Collection\",\n        \"descriptionHtml\": \"This is a custom collection.\",\n        \"handle\": \"custom-collection\",\n        \"products\": [\n          \"gid://shopify/Product/20995642\"\n        ]\n      }\n    },\n  },\n});\n"}, {"description": "Creates a smart collection", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation CollectionCreate($input: CollectionInput!) {\n      collectionCreate(input: $input) {\n        userErrors {\n          field\n          message\n        }\n        collection {\n          id\n          title\n          descriptionHtml\n          handle\n          sortOrder\n          ruleSet {\n            appliedDisjunctively\n            rules {\n              column\n              relation\n              condition\n            }\n          }\n        }\n      }\n    }`,\n    \"variables\": {\n      \"input\": {\n        \"title\": \"Our entire shoe collection\",\n        \"descriptionHtml\": \"View <b>every</b> shoe available in our store.\",\n        \"ruleSet\": {\n          \"appliedDisjunctively\": false,\n          \"rules\": {\n            \"column\": \"TITLE\",\n            \"relation\": \"CONTAINS\",\n            \"condition\": \"shoe\"\n          }\n        }\n      }\n    },\n  },\n});\n"}]}, {"name": "collectionDelete", "description": "Deletes a collection.", "arguments": [{"name": "input", "type": "CollectionDeleteInput!", "required": false, "description": "The collection to delete."}], "returns": [], "examples": [{"description": "Delete a collection", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation collectionDelete($input: CollectionDeleteInput!) {\n      collectionDelete(input: $input) {\n        deletedCollectionId\n        shop {\n          id\n          name\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"input\": {\n        \"id\": \"gid://shopify/Collection/1009501285\"\n      }\n    },\n  },\n});\n"}, {"description": "Deletes a custom collection", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation CollectionDelete($id: ID!) {\n      collectionDelete(input: {id: $id}) {\n        deletedCollectionId\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/Collection/1009501285\"\n    },\n  },\n});\n"}, {"description": "Removes a smart collection", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation CollectionDelete($id: ID!) {\n      collectionDelete(input: {id: $id}) {\n        deletedCollectionId\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/Collection/1009501285\"\n    },\n  },\n});\n"}, {"description": "collectionDelete reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation collectionDelete($input: CollectionDeleteInput!) {\n      collectionDelete(input: $input) {\n        deletedCollectionId\n        shop {\n          id\n          name\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"input\": {\n        \"id\": \"gid://shopify/Collection/1009501285\"\n      }\n    },\n  },\n});\n"}]}, {"name": "collectionPublish", "description": "Publishes a collection to a channel. Use publishablePublish instead.", "arguments": [{"name": "input", "type": "CollectionPublishInput!", "required": false, "description": "Specify a collection to publish and the sales channels to publish it to."}], "returns": [], "examples": []}, {"name": "collectionRemoveProducts", "description": "Removes a set of products from a given collection. The mutation can take a long time to run. Instead of returning an updated collection the mutation returns a job, which should be polled. For use with manual collections only.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of the collection to remove products from. The ID must reference an existing manual collection."}, {"name": "productIds", "type": "[ID!]!", "required": false, "description": "The IDs of products to remove from the collection. The mutation doesn't validate that the products belong to the collection or whether the products exist."}], "returns": [], "examples": [{"description": "Remove a product from a manual collection", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation collectionRemoveProducts($id: ID!, $productIds: [ID!]!) {\n      collectionRemoveProducts(id: $id, productIds: $productIds) {\n        job {\n          done\n          id\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/Collection/1007901140\",\n      \"productIds\": [\n        \"gid://shopify/Product/20995642\"\n      ]\n    },\n  },\n});\n"}, {"description": "Remove a product from a smart collection", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation collectionRemoveProducts($id: ID!, $productIds: [ID!]!) {\n      collectionRemoveProducts(id: $id, productIds: $productIds) {\n        job {\n          done\n          id\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/Collection/142458073\",\n      \"productIds\": [\n        \"gid://shopify/Product/108828309\"\n      ]\n    },\n  },\n});\n"}, {"description": "Removes a product from a collection", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation RemoveFromCollection($id: ID!, $productIds: [ID!]!) {\n      collectionRemoveProducts(id: $id, productIds: $productIds) {\n        job {\n          done\n          id\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/Collection/1007901140\",\n      \"productIds\": [\n        \"gid://shopify/Product/20995642\"\n      ]\n    },\n  },\n});\n"}, {"description": "collectionRemoveProducts reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation collectionRemoveProducts($id: ID!, $productIds: [ID!]!) {\n      collectionRemoveProducts(id: $id, productIds: $productIds) {\n        job {\n          done\n          id\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/Collection/1007901140\",\n      \"productIds\": [\n        \"gid://shopify/Product/20995642\"\n      ]\n    },\n  },\n});\n"}]}, {"name": "collectionReorderProducts", "description": "Asynchronously reorders a set of products within a specified collection. Instead of returning an updated collection, this mutation returns a job, which should be polled. The Collection.sortOrder must be MANUAL. Displaced products will have their position altered in a consistent manner, with no gaps.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of the collection on which to reorder products."}, {"name": "moves", "type": "[MoveInput!]!", "required": false, "description": "A list of moves to perform, which will be evaluated in order. Up to 250 moves are supported, the newPosition does not have to be unique."}], "returns": [], "examples": [{"description": "Move a product to the top of a collection", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation collectionReorderProducts($id: ID!, $moves: [MoveInput!]!) {\n      collectionReorderProducts(id: $id, moves: $moves) {\n        job {\n          id\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/Collection/79210309\",\n      \"moves\": {\n        \"id\": \"gid://shopify/Product/20995642\",\n        \"newPosition\": \"0\"\n      }\n    },\n  },\n});\n"}, {"description": "Move a product to the top of a sorted collection", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation collectionReorderProducts($id: ID!, $moves: [MoveInput!]!) {\n      collectionReorderProducts(id: $id, moves: $moves) {\n        job {\n          id\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/Collection/1063001310\",\n      \"moves\": {\n        \"id\": \"gid://shopify/Product/108828309\",\n        \"newPosition\": \"0\"\n      }\n    },\n  },\n});\n"}, {"description": "Updates the ordering type of products in a smart collection", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation UpdateCollectionSortOrder($id: ID!, $sortOrder: CollectionSortOrder!) {\n      collectionUpdate(input: {id: $id, sortOrder: $sortOrder}) {\n        collection {\n          id\n          sortOrder\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/Collection/1063001310\",\n      \"sortOrder\": \"MANUAL\"\n    },\n  },\n});\n"}, {"description": "collectionReorderProducts reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation collectionReorderProducts($id: ID!, $moves: [MoveInput!]!) {\n      collectionReorderProducts(id: $id, moves: $moves) {\n        job {\n          id\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/Collection/79210309\",\n      \"moves\": {\n        \"id\": \"gid://shopify/Product/20995642\",\n        \"newPosition\": \"0\"\n      }\n    },\n  },\n});\n"}]}, {"name": "collectionUnpublish", "description": "Unpublishes a collection. Use publishableUnpublish instead.", "arguments": [{"name": "input", "type": "CollectionUnpublishInput!", "required": false, "description": "Specify a collection to unpublish and the sales channels to remove it from."}], "returns": [], "examples": []}, {"name": "collectionUpdate", "description": "Updates a collection.", "arguments": [{"name": "input", "type": "CollectionInput!", "required": false, "description": "The updated properties for the collection."}], "returns": [], "examples": [{"description": "Apply a rule on a manual collection", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation updateCollectionRules($input: CollectionInput!) {\n      collectionUpdate(input: $input) {\n        collection {\n          id\n          title\n          description\n          handle\n          ruleSet {\n            rules {\n              column\n              relation\n              condition\n            }\n            appliedDisjunctively\n          }\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"input\": {\n        \"id\": \"gid://shopify/Collection/442946009\",\n        \"ruleSet\": {\n          \"rules\": [\n            {\n              \"column\": \"IS_PRICE_REDUCED\",\n              \"relation\": \"IS_NOT_SET\",\n              \"condition\": \"\"\n            }\n          ],\n          \"appliedDisjunctively\": true\n        }\n      }\n    },\n  },\n});\n"}, {"description": "Create a new metafield and update another on an existing collection", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation updateCollectionMetafields($input: CollectionInput!) {\n      collectionUpdate(input: $input) {\n        collection {\n          id\n          metafields(first: 3) {\n            edges {\n              node {\n                id\n                namespace\n                key\n                value\n              }\n            }\n          }\n        }\n        userErrors {\n          message\n          field\n        }\n      }\n    }`,\n    \"variables\": {\n      \"input\": {\n        \"metafields\": [\n          {\n            \"namespace\": \"my_field\",\n            \"key\": \"subtitle\",\n            \"type\": \"single_line_text_field\",\n            \"value\": \"Bold Colors\"\n          },\n          {\n            \"id\": \"gid://shopify/Metafield/1069229037\",\n            \"value\": \"New Mothers\"\n          }\n        ],\n        \"id\": \"gid://shopify/Collection/79210309\"\n      }\n    },\n  },\n});\n"}, {"description": "Updates an existing custom collection", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation CollectionUpdate($input: CollectionInput!) {\n      collectionUpdate(input: $input) {\n        collection {\n          id\n          title\n          description\n          handle\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"input\": {\n        \"id\": \"gid://shopify/Collection/142458073\",\n        \"title\": \"Updated Collection Title\",\n        \"handle\": \"updated-collection-handle\"\n      }\n    },\n  },\n});\n"}, {"description": "Updates an existing smart collection", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation CollectionUpdate($input: CollectionInput!) {\n      collectionUpdate(input: $input) {\n        collection {\n          id\n          title\n          description\n          handle\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"input\": {\n        \"id\": \"gid://shopify/Collection/142458073\",\n        \"title\": \"Updated Smart Collection\",\n        \"handle\": \"updated-smart-collection\"\n      }\n    },\n  },\n});\n"}, {"description": "collectionUpdate reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation updateCollectionRules($input: CollectionInput!) {\n      collectionUpdate(input: $input) {\n        collection {\n          id\n          title\n          description\n          handle\n          ruleSet {\n            rules {\n              column\n              relation\n              condition\n            }\n            appliedDisjunctively\n          }\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"input\": {\n        \"id\": \"gid://shopify/Collection/442946009\",\n        \"ruleSet\": {\n          \"rules\": [\n            {\n              \"column\": \"IS_PRICE_REDUCED\",\n              \"relation\": \"IS_NOT_SET\",\n              \"condition\": \"\"\n            }\n          ],\n          \"appliedDisjunctively\": true\n        }\n      }\n    },\n  },\n});\n"}]}, {"name": "combinedListingUpdate", "description": "Add, remove and update CombinedListings of a given Product.\nCombinedListings are comprised of multiple products to create a single listing. There are two kinds of products used in a CombinedListing:\n\nParent products\nChild products\n\nThe parent product is created with a productCreate with a CombinedListingRole of PARENT. Once created, you can associate child products with the parent product using this mutation. Parent products represent the idea of a product (e.g. Shoe).\nChild products represent a particular option value (or combination of option values) of a parent product. For instance, with your Shoe parent product, you may have several child products representing specific colors of the shoe (e.g. Shoe - Blue). You could also have child products representing more than a single option (e.g. Shoe - Blue/Canvas, Shoe - Blue/Leather, etc...).\nThe combined listing is the association of parent product to one or more child products.\nLearn more about Combined Listings.", "arguments": [{"name": "optionsAndValues", "type": "[OptionAndValueInput!]", "required": false, "description": "The ordered options and values to be used by the combined listing. Options and values will be reordered to match the order specified here."}, {"name": "parentProductId", "type": "ID!", "required": false, "description": "The ID of the parent product."}, {"name": "productsAdded", "type": "[ChildProductRelationInput!]", "required": false, "description": "The child products to add and their assigned options and option values."}, {"name": "productsEdited", "type": "[ChildProductRelationInput!]", "required": false, "description": "The child products to edit and their assigned options and option values."}, {"name": "productsRemovedIds", "type": "[ID!]", "required": false, "description": "The IDs of products to be removed from the combined listing."}, {"name": "title", "type": "String", "required": false, "description": "The updated title for the combined listing."}], "returns": [], "examples": [{"description": "Add child products to a combined listing", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation AddChildProductsToCombinedListing($parentProductId: ID!, $productsAdded: [ChildProductRelationInput!], $optionsAndValues: [OptionAndValueInput!]) {\n      combinedListingUpdate(parentProductId: $parentProductId, productsAdded: $productsAdded, optionsAndValues: $optionsAndValues) {\n        product {\n          id\n          combinedListing {\n            combinedListingChildren(first: 10) {\n              nodes {\n                product {\n                  id\n                }\n                parentVariant {\n                  selectedOptions {\n                    value\n                  }\n                }\n              }\n            }\n          }\n        }\n        userErrors {\n          code\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"parentProductId\": \"gid://shopify/Product/108828309\",\n      \"productsAdded\": [\n        {\n          \"childProductId\": \"gid://shopify/Product/121709582\",\n          \"selectedParentOptionValues\": [\n            {\n              \"name\": \"color\",\n              \"value\": \"Blue\"\n            },\n            {\n              \"name\": \"size\",\n              \"value\": \"12\"\n            }\n          ]\n        },\n        {\n          \"childProductId\": \"gid://shopify/Product/912855135\",\n          \"selectedParentOptionValues\": [\n            {\n              \"name\": \"color\",\n              \"value\": \"Red\"\n            },\n            {\n              \"name\": \"size\",\n              \"value\": \"12\"\n            }\n          ]\n        }\n      ],\n      \"optionsAndValues\": [\n        {\n          \"name\": \"color\",\n          \"values\": [\n            \"Blue\",\n            \"Red\"\n          ]\n        },\n        {\n          \"name\": \"size\",\n          \"values\": [\n            \"12\"\n          ]\n        }\n      ]\n    },\n  },\n});\n"}, {"description": "Remove child products from a combined listing", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation RemoveChildProductsFromCombinedListing($parentProductId: ID!, $productsRemovedIds: [ID!]) {\n      combinedListingUpdate(parentProductId: $parentProductId, productsRemovedIds: $productsRemovedIds) {\n        product {\n          id\n          combinedListing {\n            combinedListingChildren(first: 10) {\n              nodes {\n                product {\n                  id\n                }\n              }\n            }\n          }\n        }\n        userErrors {\n          code\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"parentProductId\": \"gid://shopify/Product/362339553\",\n      \"productsRemovedIds\": [\n        \"gid://shopify/Product/223392616\"\n      ]\n    },\n  },\n});\n"}, {"description": "Update option values of combined listing child product", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation UpdateChildProductsOfCombinedListing($parentProductId: ID!, $productsEdited: [ChildProductRelationInput!]) {\n      combinedListingUpdate(parentProductId: $parentProductId, productsEdited: $productsEdited) {\n        product {\n          id\n          combinedListing {\n            combinedListingChildren(first: 10) {\n              nodes {\n                product {\n                  id\n                }\n                parentVariant {\n                  selectedOptions {\n                    value\n                  }\n                }\n              }\n            }\n          }\n        }\n        userErrors {\n          code\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"parentProductId\": \"gid://shopify/Product/362339553\",\n      \"productsEdited\": [\n        {\n          \"childProductId\": \"gid://shopify/Product/223392616\",\n          \"selectedParentOptionValues\": [\n            {\n              \"name\": \"Color\",\n              \"value\": \"green\"\n            }\n          ]\n        },\n        {\n          \"childProductId\": \"gid://shopify/Product/555575834\",\n          \"selectedParentOptionValues\": [\n            {\n              \"name\": \"Color\",\n              \"value\": \"blue\"\n            }\n          ]\n        }\n      ]\n    },\n  },\n});\n"}, {"description": "combinedListingUpdate reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation AddChildProductsToCombinedListing($parentProductId: ID!, $productsAdded: [ChildProductRelationInput!], $optionsAndValues: [OptionAndValueInput!]) {\n      combinedListingUpdate(parentProductId: $parentProductId, productsAdded: $productsAdded, optionsAndValues: $optionsAndValues) {\n        product {\n          id\n          combinedListing {\n            combinedListingChildren(first: 10) {\n              nodes {\n                product {\n                  id\n                }\n                parentVariant {\n                  selectedOptions {\n                    value\n                  }\n                }\n              }\n            }\n          }\n        }\n        userErrors {\n          code\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"parentProductId\": \"gid://shopify/Product/108828309\",\n      \"productsAdded\": [\n        {\n          \"childProductId\": \"gid://shopify/Product/121709582\",\n          \"selectedParentOptionValues\": [\n            {\n              \"name\": \"color\",\n              \"value\": \"Blue\"\n            },\n            {\n              \"name\": \"size\",\n              \"value\": \"12\"\n            }\n          ]\n        },\n        {\n          \"childProductId\": \"gid://shopify/Product/912855135\",\n          \"selectedParentOptionValues\": [\n            {\n              \"name\": \"color\",\n              \"value\": \"Red\"\n            },\n            {\n              \"name\": \"size\",\n              \"value\": \"12\"\n            }\n          ]\n        }\n      ],\n      \"optionsAndValues\": [\n        {\n          \"name\": \"color\",\n          \"values\": [\n            \"Blue\",\n            \"Red\"\n          ]\n        },\n        {\n          \"name\": \"size\",\n          \"values\": [\n            \"12\"\n          ]\n        }\n      ]\n    },\n  },\n});\n"}]}, {"name": "fileAcknowledgeUpdateFailed", "description": "Acknowledges file update failure by resetting FAILED status to READY and clearing any media errors.", "arguments": [{"name": "fileIds", "type": "[ID!]!", "required": false, "description": "Specifies the file(s) to acknowledge the failed updates of."}], "returns": [], "examples": []}, {"name": "fileCreate", "description": "Creates file assets using an external URL or for files that were previously uploaded using the\nstagedUploadsCreate mutation.\nThese files are added to the Files page in Shopify admin.\nFiles are processed asynchronously. Some data is not available until processing is completed.\nCheck fileStatus\nto know when the files are READY or FAILED. See the FileStatus\nfor the complete set of possible fileStatus values.\nTo get a list of all files, use the files query.", "arguments": [{"name": "files", "type": "[FileCreateInput!]!", "required": false, "description": "List of new files to be created."}], "returns": [], "examples": [{"description": "Create a file using a staged upload URL", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation fileCreate($files: [FileCreateInput!]!) {\n      fileCreate(files: $files) {\n        files {\n          id\n          fileStatus\n          alt\n          createdAt\n        }\n      }\n    }`,\n    \"variables\": {\n      \"files\": {\n        \"alt\": \"fallback text for a video\",\n        \"contentType\": \"VIDEO\",\n        \"originalSource\": \"https://snowdevil.myshopify.com/admin/tmp/files\"\n      }\n    },\n  },\n});\n"}, {"description": "Create a file using an external URL", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation fileCreate($files: [FileCreateInput!]!) {\n      fileCreate(files: $files) {\n        files {\n          id\n          fileStatus\n          alt\n          createdAt\n        }\n      }\n    }`,\n    \"variables\": {\n      \"files\": {\n        \"alt\": \"fallback text for an image\",\n        \"contentType\": \"IMAGE\",\n        \"originalSource\": \"https://example.com/image.jpg\"\n      }\n    },\n  },\n});\n"}, {"description": "Create an image with custom filename", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation fileCreate($files: [FileCreateInput!]!) {\n      fileCreate(files: $files) {\n        files {\n          id\n          fileStatus\n          alt\n          createdAt\n        }\n      }\n    }`,\n    \"variables\": {\n      \"files\": {\n        \"alt\": \"fallback text for an image\",\n        \"contentType\": \"IMAGE\",\n        \"originalSource\": \"https://burst.shopifycdn.com/photos/pug-in-city.jpg\",\n        \"filename\": \"dog.jpg\"\n      }\n    },\n  },\n});\n"}, {"description": "fileCreate reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation fileCreate($files: [FileCreateInput!]!) {\n      fileCreate(files: $files) {\n        files {\n          id\n          fileStatus\n          alt\n          createdAt\n        }\n      }\n    }`,\n    \"variables\": {\n      \"files\": {\n        \"alt\": \"fallback text for a video\",\n        \"contentType\": \"VIDEO\",\n        \"originalSource\": \"https://snowdevil.myshopify.com/admin/tmp/files\"\n      }\n    },\n  },\n});\n"}]}, {"name": "fileDelete", "description": "Deletes existing file assets that were uploaded to Shopify.", "arguments": [{"name": "fileIds", "type": "[ID!]!", "required": false, "description": "The IDs of the files to be deleted."}], "returns": [], "examples": [{"description": "Delete a list of files", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation fileDelete($input: [ID!]!) {\n      fileDelete(fileIds: $input) {\n        deletedFileIds\n      }\n    }`,\n    \"variables\": {\n      \"input\": [\n        \"gid://shopify/GenericFile/1072273199\",\n        \"gid://shopify/MediaImage/1072273200\",\n        \"gid://shopify/Video/1072273201\"\n      ]\n    },\n  },\n});\n"}, {"description": "fileDelete reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation fileDelete($input: [ID!]!) {\n      fileDelete(fileIds: $input) {\n        deletedFileIds\n      }\n    }`,\n    \"variables\": {\n      \"input\": [\n        \"gid://shopify/GenericFile/1072273199\",\n        \"gid://shopify/MediaImage/1072273200\",\n        \"gid://shopify/Video/1072273201\"\n      ]\n    },\n  },\n});\n"}]}, {"name": "fileUpdate", "description": "Updates an existing file asset that was uploaded to Shopify.", "arguments": [{"name": "files", "type": "[FileUpdateInput!]!", "required": false, "description": "List of files to be updated."}], "returns": [], "examples": [{"description": "Update a file", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation FileUpdate($input: [FileUpdateInput!]!) {\n      fileUpdate(files: $input) {\n        userErrors {\n          code\n          field\n          message\n        }\n        files {\n          alt\n        }\n      }\n    }`,\n    \"variables\": {\n      \"input\": {\n        \"id\": \"gid://shopify/GenericFile/1072273203\",\n        \"alt\": \"new alt text\"\n      }\n    },\n  },\n});\n"}, {"description": "Update a generic file", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation fileUpdate($input: [FileUpdateInput!]!) {\n      fileUpdate(files: $input) {\n        files {\n          ... on GenericFile {\n            id\n            url\n          }\n        }\n        userErrors {\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"input\": {\n        \"id\": \"gid://shopify/GenericFile/1072273204\",\n        \"originalSource\": \"https://example.com/manual.pdf\"\n      }\n    },\n  },\n});\n"}, {"description": "Update an image", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation fileUpdate($input: [FileUpdateInput!]!) {\n      fileUpdate(files: $input) {\n        files {\n          ... on MediaImage {\n            id\n            image {\n              url\n            }\n          }\n        }\n        userErrors {\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"input\": {\n        \"id\": \"gid://shopify/MediaImage/1072273202\",\n        \"originalSource\": \"https://example.com/image.jpg\"\n      }\n    },\n  },\n});\n"}, {"description": "fileUpdate reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation FileUpdate($input: [FileUpdateInput!]!) {\n      fileUpdate(files: $input) {\n        userErrors {\n          code\n          field\n          message\n        }\n        files {\n          alt\n        }\n      }\n    }`,\n    \"variables\": {\n      \"input\": {\n        \"id\": \"gid://shopify/GenericFile/1072273203\",\n        \"alt\": \"new alt text\"\n      }\n    },\n  },\n});\n"}]}, {"name": "priceListCreate", "description": "Creates a price list. You can use the priceListCreate mutation to create a new price list and associate it with a catalog. This enables you to sell your products with contextual pricing.", "arguments": [{"name": "input", "type": "PriceListCreateInput!", "required": false, "description": "The properties of the new price list."}], "returns": [], "examples": [{"description": "Create a price list with a percentage adjustment.", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation PriceListCreate($input: PriceListCreateInput!) {\n      priceListCreate(input: $input) {\n        userErrors {\n          field\n          message\n        }\n        priceList {\n          id\n          name\n          currency\n          parent {\n            adjustment {\n              type\n              value\n            }\n          }\n        }\n      }\n    }`,\n    \"variables\": {\n      \"input\": {\n        \"name\": \"Price List\",\n        \"currency\": \"USD\",\n        \"parent\": {\n          \"adjustment\": {\n            \"type\": \"PERCENTAGE_INCREASE\",\n            \"value\": 10\n          }\n        }\n      }\n    },\n  },\n});\n"}, {"description": "priceListCreate reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation PriceListCreate($input: PriceListCreateInput!) {\n      priceListCreate(input: $input) {\n        userErrors {\n          field\n          message\n        }\n        priceList {\n          id\n          name\n          currency\n          parent {\n            adjustment {\n              type\n              value\n            }\n          }\n        }\n      }\n    }`,\n    \"variables\": {\n      \"input\": {\n        \"name\": \"Price List\",\n        \"currency\": \"USD\",\n        \"parent\": {\n          \"adjustment\": {\n            \"type\": \"PERCENTAGE_INCREASE\",\n            \"value\": 10\n          }\n        }\n      }\n    },\n  },\n});\n"}]}, {"name": "priceListDelete", "description": "Deletes a price list. For example, you can delete a price list so that it no longer applies for products in the associated market.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of the price list to be deleted."}], "returns": [], "examples": [{"description": "Delete a price list", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation priceListDelete($id: ID!) {\n      priceListDelete(id: $id) {\n        deletedId\n        userErrors {\n          field\n          code\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/PriceList/294167858\"\n    },\n  },\n});\n"}, {"description": "priceListDelete reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation priceListDelete($id: ID!) {\n      priceListDelete(id: $id) {\n        deletedId\n        userErrors {\n          field\n          code\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/PriceList/294167858\"\n    },\n  },\n});\n"}]}, {"name": "priceListFixedPricesAdd", "description": "Creates or updates fixed prices on a price list. You can use the priceListFixedPricesAdd mutation to set a fixed price for specific product variants. This lets you change product variant pricing on a per country basis. Any existing fixed price list prices for these variants will be overwritten.", "arguments": [{"name": "priceListId", "type": "ID!", "required": false, "description": "The ID of the price list to which the fixed prices will be added or updated."}, {"name": "prices", "type": "[PriceListPriceInput!]!", "required": false, "description": "The list of fixed prices to add or update in the price list."}], "returns": [], "examples": [{"description": "Add multiple fixed prices to a price list", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation priceListFixedPricesAdd($priceListId: ID!, $prices: [PriceListPriceInput!]!) {\n      priceListFixedPricesAdd(priceListId: $priceListId, prices: $prices) {\n        prices {\n          compareAtPrice {\n            amount\n            currencyCode\n          }\n          price {\n            amount\n            currencyCode\n          }\n        }\n        userErrors {\n          field\n          code\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"priceListId\": \"gid://shopify/PriceList/115567603\",\n      \"prices\": [\n        {\n          \"compareAtPrice\": {\n            \"amount\": \"125.50\",\n            \"currencyCode\": \"CAD\"\n          },\n          \"price\": {\n            \"amount\": \"100\",\n            \"currencyCode\": \"CAD\"\n          },\n          \"variantId\": \"gid://shopify/ProductVariant/43729076\"\n        },\n        {\n          \"compareAtPrice\": {\n            \"amount\": \"6.99\",\n            \"currencyCode\": \"CAD\"\n          },\n          \"price\": {\n            \"amount\": \"4\",\n            \"currencyCode\": \"CAD\"\n          },\n          \"variantId\": \"gid://shopify/ProductVariant/138327650\"\n        }\n      ]\n    },\n  },\n});\n"}, {"description": "priceListFixedPricesAdd reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation priceListFixedPricesAdd($priceListId: ID!, $prices: [PriceListPriceInput!]!) {\n      priceListFixedPricesAdd(priceListId: $priceListId, prices: $prices) {\n        prices {\n          compareAtPrice {\n            amount\n            currencyCode\n          }\n          price {\n            amount\n            currencyCode\n          }\n        }\n        userErrors {\n          field\n          code\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"priceListId\": \"gid://shopify/PriceList/115567603\",\n      \"prices\": [\n        {\n          \"compareAtPrice\": {\n            \"amount\": \"125.50\",\n            \"currencyCode\": \"CAD\"\n          },\n          \"price\": {\n            \"amount\": \"100\",\n            \"currencyCode\": \"CAD\"\n          },\n          \"variantId\": \"gid://shopify/ProductVariant/43729076\"\n        },\n        {\n          \"compareAtPrice\": {\n            \"amount\": \"6.99\",\n            \"currencyCode\": \"CAD\"\n          },\n          \"price\": {\n            \"amount\": \"4\",\n            \"currencyCode\": \"CAD\"\n          },\n          \"variantId\": \"gid://shopify/ProductVariant/138327650\"\n        }\n      ]\n    },\n  },\n});\n"}]}, {"name": "priceListFixedPricesByProductUpdate", "description": "Updates the fixed prices for all variants for a product on a price list. You can use the priceListFixedPricesByProductUpdate mutation to set or remove a fixed price for all variants of a product associated with the price list.", "arguments": [{"name": "priceListId", "type": "ID!", "required": false, "description": "The price list to update the prices for."}, {"name": "pricesToAdd", "type": "[PriceListProductPriceInput!]", "required": false, "description": "A list of PriceListProductPriceInput that identifies which products to update the fixed prices for."}, {"name": "pricesToDeleteByProductIds", "type": "[ID!]", "required": false, "description": "A list of product IDs that identifies which products to remove the fixed prices for."}], "returns": [], "examples": []}, {"name": "priceListFixedPricesDelete", "description": "Deletes specific fixed prices from a price list using a product variant ID. You can use the priceListFixedPricesDelete mutation to delete a set of fixed prices from a price list. After deleting the set of fixed prices from the price list, the price of each product variant reverts to the original price that was determined by the price list adjustment.", "arguments": [{"name": "priceListId", "type": "ID!", "required": false, "description": "The ID of the price list from which the fixed prices will be removed."}, {"name": "variantIds", "type": "[ID!]!", "required": false, "description": "A list of product variant IDs whose fixed prices will be removed from the price list."}], "returns": [], "examples": [{"description": "Delete multiple fixed prices from a price list", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation priceListFixedPricesDelete($priceListId: ID!, $variantIds: [ID!]!) {\n      priceListFixedPricesDelete(priceListId: $priceListId, variantIds: $variantIds) {\n        deletedFixedPriceVariantIds\n        userErrors {\n          field\n          code\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"priceListId\": \"gid://shopify/PriceList/294167858\",\n      \"variantIds\": [\n        \"gid://shopify/ProductVariant/498744621\",\n        \"gid://shopify/ProductVariant/113711323\"\n      ]\n    },\n  },\n});\n"}, {"description": "priceListFixedPricesDelete reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation priceListFixedPricesDelete($priceListId: ID!, $variantIds: [ID!]!) {\n      priceListFixedPricesDelete(priceListId: $priceListId, variantIds: $variantIds) {\n        deletedFixedPriceVariantIds\n        userErrors {\n          field\n          code\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"priceListId\": \"gid://shopify/PriceList/294167858\",\n      \"variantIds\": [\n        \"gid://shopify/ProductVariant/498744621\",\n        \"gid://shopify/ProductVariant/113711323\"\n      ]\n    },\n  },\n});\n"}]}, {"name": "priceListFixedPricesUpdate", "description": "Updates fixed prices on a price list. You can use the priceListFixedPricesUpdate mutation to set a fixed price for specific product variants or to delete prices for variants associated with the price list.", "arguments": [{"name": "priceListId", "type": "ID!", "required": false, "description": "The price list that the prices will be updated against."}, {"name": "pricesToAdd", "type": "[PriceListPriceInput!]!", "required": false, "description": "The fixed prices to add."}, {"name": "variantIdsToDelete", "type": "[ID!]!", "required": false, "description": "A list of product variant IDs to remove from the price list."}], "returns": [], "examples": []}, {"name": "priceListUpdate", "description": "Updates a price list.\nIf you modify the currency, then any fixed prices set on the price list will be deleted.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of the price list to update."}, {"name": "input", "type": "PriceListUpdateInput!", "required": false, "description": "The input data used to update the price list."}], "returns": [], "examples": [{"description": "Update a price list", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation priceListUpdate($id: ID!, $input: PriceListUpdateInput!) {\n      priceListUpdate(id: $id, input: $input) {\n        priceList {\n          id\n          parent {\n            adjustment {\n              type\n              value\n            }\n          }\n        }\n        userErrors {\n          message\n          field\n          code\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/PriceList/734173888\",\n      \"input\": {\n        \"parent\": {\n          \"adjustment\": {\n            \"value\": 10,\n            \"type\": \"PERCENTAGE_INCREASE\"\n          }\n        }\n      }\n    },\n  },\n});\n"}, {"description": "priceListUpdate reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation priceListUpdate($id: ID!, $input: PriceListUpdateInput!) {\n      priceListUpdate(id: $id, input: $input) {\n        priceList {\n          id\n          parent {\n            adjustment {\n              type\n              value\n            }\n          }\n        }\n        userErrors {\n          message\n          field\n          code\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/PriceList/734173888\",\n      \"input\": {\n        \"parent\": {\n          \"adjustment\": {\n            \"value\": 10,\n            \"type\": \"PERCENTAGE_INCREASE\"\n          }\n        }\n      }\n    },\n  },\n});\n"}]}, {"name": "productBundleCreate", "description": "Creates a new componentized product.", "arguments": [{"name": "input", "type": "ProductBundleCreateInput!", "required": false, "description": "Input for creating a componentized product."}], "returns": [], "examples": []}, {"name": "productBundleUpdate", "description": "Updates a componentized product.", "arguments": [{"name": "input", "type": "ProductBundleUpdateInput!", "required": false, "description": "Input for updating a componentized product."}], "returns": [], "examples": []}, {"name": "productChangeStatus", "description": "Changes the status of a product. This allows you to set the availability of the product across all channels. Use productUpdate instead.", "arguments": [{"name": "productId", "type": "ID!", "required": false, "description": "The ID of the product."}, {"name": "status", "type": "ProductStatus!", "required": false, "description": "The status to be assigned to the product."}], "returns": [], "examples": [{"description": "productChangeStatus reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation productChangeStatus($productId: ID!, $status: ProductStatus!) {\n      productChangeStatus(productId: $productId, status: $status) {\n        product {\n          id\n          status\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"productId\": \"gid://shopify/Product/108828309\",\n      \"status\": \"ARCHIVED\"\n    },\n  },\n});\n"}]}, {"name": "productCreate", "description": "Creates a product\nwith attributes such as title, description, and vendor.\nYou can use the productCreate mutation to define\noptions and\nvalues\nfor products with\nproduct variants,\nsuch as different sizes or colors.\nTo create multiple product variants for a single product and manage prices, use the\nproductVariantsBulkCreate\nmutation.\nTo create or update a product in a single request, use the\nproductSet mutation.\nLearn more about the product model\nand adding product data.", "arguments": [{"name": "media", "type": "[CreateMediaInput!]", "required": false, "description": "The media to add to the product."}, {"name": "product", "type": "ProductCreateInput", "required": false, "description": "The attributes of the new product."}, {"name": "input", "type": "ProductInput", "required": false, "description": "The properties of the new product. Deprecated as of 2024-10.\nUse product argument instead."}], "returns": [], "examples": [{"description": "Create a product", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `mutation {\n    productCreate(product: {title: \"Cool socks\", productOptions: [{name: \"Color\", values: [{name: \"Red\"}, {name: \"Blue\"}]}, {name: \"Size\", values: [{name: \"Small\"}, {name: \"Large\"}]}]}) {\n      product {\n        id\n        title\n        options {\n          id\n          name\n          position\n          optionValues {\n            id\n            name\n            hasVariants\n          }\n        }\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }`,\n});\n"}, {"description": "Create a product and associate metafields", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `mutation {\n    productCreate(product: {title: \"Hiking Boots\", metafields: [{namespace: \"my_fields\", key: \"liner_material\", type: \"single_line_text_field\", value: \"Synthetic Leather\"}]}) {\n      product {\n        id\n        title\n        metafields(first: 1) {\n          nodes {\n            id\n            namespace\n            key\n            value\n          }\n        }\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }`,\n});\n"}, {"description": "Create a product and return the product ID", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `mutation {\n    productCreate(product: {title: \"Sweet new product\", productType: \"Snowboard\", vendor: \"JadedPixel\"}) {\n      product {\n        id\n      }\n    }\n  }`,\n});\n"}, {"description": "Create a product with a combined listing role", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `mutation {\n    productCreate(product: {title: \"Helmet Nova\", combinedListingRole: PARENT}) {\n      product {\n        id\n        combinedListingRole\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }`,\n});\n"}, {"description": "Create a product with media", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation CreateProductWithNewMedia($product: ProductCreateInput!, $media: [CreateMediaInput!]) {\n      productCreate(product: $product, media: $media) {\n        product {\n          id\n          title\n          media(first: 10) {\n            nodes {\n              alt\n              mediaContentType\n              preview {\n                status\n              }\n            }\n          }\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"product\": {\n        \"title\": \"Helmet Nova\"\n      },\n      \"media\": [\n        {\n          \"originalSource\": \"https://cdn.shopify.com/shopifycloud/brochure/assets/sell/image/image-@artdirection-large-1ba8d5de56c361cec6bc487b747c8774b9ec8203f392a99f53c028df8d0fb3fc.png\",\n          \"alt\": \"Gray helmet for bikers\",\n          \"mediaContentType\": \"IMAGE\"\n        },\n        {\n          \"originalSource\": \"https://www.youtube.com/watch?v=4L8VbGRibj8&list=PLlMkWQ65HlcEoPyG9QayqEaAu0ftj0MMz\",\n          \"alt\": \"Testing helmet resistance against impacts\",\n          \"mediaContentType\": \"EXTERNAL_VIDEO\"\n        }\n      ]\n    },\n  },\n});\n"}, {"description": "Create a product with product options and option values", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `mutation {\n    productCreate(product: {title: \"New product\", productOptions: [{name: \"Color\", values: [{name: \"Red\"}, {name: \"Green\"}]}, {name: \"Size\", values: [{name: \"Small\"}, {name: \"Medium\"}]}]}) {\n      userErrors {\n        field\n        message\n      }\n      product {\n        id\n        options {\n          id\n          name\n          position\n          values\n          optionValues {\n            id\n            name\n            hasVariants\n          }\n        }\n        variants(first: 5) {\n          nodes {\n            id\n            title\n            selectedOptions {\n              name\n              value\n            }\n          }\n        }\n      }\n    }\n  }`,\n});\n"}, {"description": "productCreate reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `mutation {\n    productCreate(product: {title: \"Cool socks\", productOptions: [{name: \"Color\", values: [{name: \"Red\"}, {name: \"Blue\"}]}, {name: \"Size\", values: [{name: \"Small\"}, {name: \"Large\"}]}]}) {\n      product {\n        id\n        title\n        options {\n          id\n          name\n          position\n          optionValues {\n            id\n            name\n            hasVariants\n          }\n        }\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }`,\n});\n"}]}, {"name": "productCreateMedia", "description": "Creates media for a product. Use productUpdate or productSet instead.", "arguments": [{"name": "media", "type": "[CreateMediaInput!]!", "required": false, "description": "List of new media to be added to a product."}, {"name": "productId", "type": "ID!", "required": false, "description": "Specifies the product associated with the media."}], "returns": [], "examples": [{"description": "Add both valid and invalid media to an existing product", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation productCreateMedia($media: [CreateMediaInput!]!, $productId: ID!) {\n      productCreateMedia(media: $media, productId: $productId) {\n        media {\n          alt\n          mediaContentType\n          status\n        }\n        mediaUserErrors {\n          field\n          message\n        }\n        product {\n          id\n          title\n        }\n      }\n    }`,\n    \"variables\": {\n      \"media\": [\n        {\n          \"alt\": \"Image\",\n          \"mediaContentType\": \"EXTERNAL_VIDEO\",\n          \"originalSource\": \"https://youtu.be/32mGBDk3LSo\"\n        },\n        {\n          \"alt\": \"Image\",\n          \"mediaContentType\": \"IMAGE\",\n          \"originalSource\": \"invalid_img\"\n        }\n      ],\n      \"productId\": \"gid://shopify/Product/121709582\"\n    },\n  },\n});\n"}, {"description": "Add invalid media to an existing product", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation productCreateMedia($media: [CreateMediaInput!]!, $productId: ID!) {\n      productCreateMedia(media: $media, productId: $productId) {\n        media {\n          alt\n          mediaContentType\n          status\n        }\n        mediaUserErrors {\n          field\n          message\n        }\n        product {\n          id\n          title\n        }\n      }\n    }`,\n    \"variables\": {\n      \"media\": {\n        \"alt\": \"Image\",\n        \"mediaContentType\": \"IMAGE\",\n        \"originalSource\": \"invalid_img\"\n      },\n      \"productId\": \"gid://shopify/Product/121709582\"\n    },\n  },\n});\n"}, {"description": "Add new media to a non-existent product", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation productCreateMedia($media: [CreateMediaInput!]!, $productId: ID!) {\n      productCreateMedia(media: $media, productId: $productId) {\n        media {\n          alt\n          mediaContentType\n          status\n        }\n        mediaUserErrors {\n          field\n          message\n        }\n        product {\n          id\n          title\n        }\n      }\n    }`,\n    \"variables\": {\n      \"media\": {\n        \"alt\": \"Video\",\n        \"mediaContentType\": \"EXTERNAL_VIDEO\",\n        \"originalSource\": \"https://youtu.be/32mGBDk3LSo\"\n      },\n      \"productId\": \"gid://shopify/Product/-1\"\n    },\n  },\n});\n"}, {"description": "Add new media to an existing product", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation productCreateMedia($media: [CreateMediaInput!]!, $productId: ID!) {\n      productCreateMedia(media: $media, productId: $productId) {\n        media {\n          alt\n          mediaContentType\n          status\n        }\n        mediaUserErrors {\n          field\n          message\n        }\n        product {\n          id\n          title\n        }\n      }\n    }`,\n    \"variables\": {\n      \"media\": {\n        \"alt\": \"Video\",\n        \"mediaContentType\": \"EXTERNAL_VIDEO\",\n        \"originalSource\": \"https://youtu.be/32mGBDk3LSo\"\n      },\n      \"productId\": \"gid://shopify/Product/121709582\"\n    },\n  },\n});\n"}, {"description": "Create a new Product Image", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation ProductImageCreate($id: ID!) {\n      productCreateMedia(productId: $id, media: [{mediaContentType: IMAGE, originalSource: \"https://path.to/image.jpg\", alt: \"Alt text.\"}]) {\n        media {\n          id\n          alt\n          status\n          ... on MediaImage {\n            image {\n              url\n            }\n          }\n        }\n        mediaUserErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/Product/121709582\"\n    },\n  },\n});\n"}, {"description": "productCreateMedia reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation productCreateMedia($media: [CreateMediaInput!]!, $productId: ID!) {\n      productCreateMedia(media: $media, productId: $productId) {\n        media {\n          alt\n          mediaContentType\n          status\n        }\n        mediaUserErrors {\n          field\n          message\n        }\n        product {\n          id\n          title\n        }\n      }\n    }`,\n    \"variables\": {\n      \"media\": [\n        {\n          \"alt\": \"Image\",\n          \"mediaContentType\": \"EXTERNAL_VIDEO\",\n          \"originalSource\": \"https://youtu.be/32mGBDk3LSo\"\n        },\n        {\n          \"alt\": \"Image\",\n          \"mediaContentType\": \"IMAGE\",\n          \"originalSource\": \"invalid_img\"\n        }\n      ],\n      \"productId\": \"gid://shopify/Product/121709582\"\n    },\n  },\n});\n"}]}, {"name": "productDelete", "description": "Deletes a product, including all associated variants and media.\nAs of API version 2023-01, if you need to delete a large product, such as one that has many\nvariants\nthat are active at several\nlocations,\nyou may encounter timeout errors. To avoid these timeout errors, you can instead use the asynchronous\nProductDeleteAsync\nmutation.", "arguments": [{"name": "input", "type": "ProductDeleteInput!", "required": false, "description": "Specifies the product to delete by its ID."}, {"name": "synchronous", "type": "Boolean", "required": false, "description": "Specifies whether or not to run the mutation synchronously."}], "returns": [], "examples": [{"description": "Delete a non-existent product", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `mutation {\n    productDelete(input: {id: \"gid://shopify/Product/-1\"}) {\n      deletedProductId\n      userErrors {\n        field\n        message\n      }\n    }\n  }`,\n});\n"}, {"description": "Delete a product", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `mutation {\n    productDelete(input: {id: \"gid://shopify/Product/108828309\"}) {\n      deletedProductId\n    }\n  }`,\n});\n"}, {"description": "Delete a product asynchronously and return a product delete operation", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation productDelete($input: ProductDeleteInput!, $synchronous: Boolean!) {\n      productDelete(synchronous: $synchronous, input: $input) {\n        deletedProductId\n        productDeleteOperation {\n          id\n          status\n          deletedProductId\n        }\n      }\n    }`,\n    \"variables\": {\n      \"synchronous\": false,\n      \"input\": {\n        \"id\": \"gid://shopify/Product/108828309\"\n      }\n    },\n  },\n});\n"}]}, {"name": "productDeleteMedia", "description": "Deletes media for a product. Use fileUpdate instead.", "arguments": [{"name": "mediaIds", "type": "[ID!]!", "required": false, "description": "The media IDs to be deleted."}, {"name": "productId", "type": "ID!", "required": false, "description": "Specifies the product ID from which the media will be deleted."}], "returns": [], "examples": [{"description": "Delete existing and non-existing media from a product", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation productDeleteMedia($mediaIds: [ID!]!, $productId: ID!) {\n      productDeleteMedia(mediaIds: $mediaIds, productId: $productId) {\n        deletedMediaIds\n        deletedProductImageIds\n        mediaUserErrors {\n          field\n          message\n        }\n        product {\n          id\n          title\n          media(first: 5) {\n            nodes {\n              alt\n              mediaContentType\n              status\n            }\n          }\n        }\n      }\n    }`,\n    \"variables\": {\n      \"mediaIds\": [\n        \"gid://shopify/Video/-1\",\n        \"gid://shopify/Video/723685877\"\n      ],\n      \"productId\": \"gid://shopify/Product/108828309\"\n    },\n  },\n});\n"}, {"description": "Delete media from an existing product", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation productDeleteMedia($mediaIds: [ID!]!, $productId: ID!) {\n      productDeleteMedia(mediaIds: $mediaIds, productId: $productId) {\n        deletedMediaIds\n        deletedProductImageIds\n        mediaUserErrors {\n          field\n          message\n        }\n        product {\n          id\n          title\n          media(first: 5) {\n            nodes {\n              alt\n              mediaContentType\n              status\n            }\n          }\n        }\n      }\n    }`,\n    \"variables\": {\n      \"mediaIds\": [\n        \"gid://shopify/Video/723685877\"\n      ],\n      \"productId\": \"gid://shopify/Product/108828309\"\n    },\n  },\n});\n"}, {"description": "Delete non-existing media from an existing product", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation productDeleteMedia($mediaIds: [ID!]!, $productId: ID!) {\n      productDeleteMedia(mediaIds: $mediaIds, productId: $productId) {\n        deletedMediaIds\n        deletedProductImageIds\n        mediaUserErrors {\n          field\n          message\n        }\n        product {\n          id\n          title\n          media(first: 5) {\n            nodes {\n              alt\n              mediaContentType\n              status\n            }\n          }\n        }\n      }\n    }`,\n    \"variables\": {\n      \"mediaIds\": [\n        \"gid://shopify/Video/-1\"\n      ],\n      \"productId\": \"gid://shopify/Product/108828309\"\n    },\n  },\n});\n"}, {"description": "Remove an existing Product Image", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation productDeleteMedia($productId: ID!, $mediaIds: [ID!]!) {\n      productDeleteMedia(productId: $productId, mediaIds: $mediaIds) {\n        deletedMediaIds\n        deletedProductImageIds\n        mediaUserErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"productId\": \"gid://shopify/Product/20995642\",\n      \"mediaIds\": [\n        \"gid://shopify/MediaImage/730211239\"\n      ]\n    },\n  },\n});\n"}, {"description": "productDeleteMedia reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation productDeleteMedia($mediaIds: [ID!]!, $productId: ID!) {\n      productDeleteMedia(mediaIds: $mediaIds, productId: $productId) {\n        deletedMediaIds\n        deletedProductImageIds\n        mediaUserErrors {\n          field\n          message\n        }\n        product {\n          id\n          title\n          media(first: 5) {\n            nodes {\n              alt\n              mediaContentType\n              status\n            }\n          }\n        }\n      }\n    }`,\n    \"variables\": {\n      \"mediaIds\": [\n        \"gid://shopify/Video/-1\",\n        \"gid://shopify/Video/723685877\"\n      ],\n      \"productId\": \"gid://shopify/Product/108828309\"\n    },\n  },\n});\n"}]}, {"name": "productDuplicate", "description": "Duplicates a product.\nIf you need to duplicate a large product, such as one that has many\nvariants\nthat are active at several\nlocations,\nyou might encounter timeout errors.\nTo avoid these timeout errors, you can instead duplicate the product asynchronously.\nIn API version 2024-10 and higher, include synchronous: false argument in this mutation to perform the duplication asynchronously.\nIn API version 2024-07 and lower, use the asynchronous ProductDuplicateAsyncV2.\nMetafield values are not duplicated if the unique values capability is enabled.", "arguments": [{"name": "includeImages", "type": "Boolean", "required": false, "description": "Specifies whether or not to duplicate images."}, {"name": "includeTranslations", "type": "Boolean", "required": false, "description": "Specifies whether or not to duplicate translations."}, {"name": "newStatus", "type": "ProductStatus", "required": false, "description": "The new status of the product. If no value is provided the status will be inherited from the original product."}, {"name": "newTitle", "type": "String!", "required": false, "description": "The new title of the product."}, {"name": "productId", "type": "ID!", "required": false, "description": "The ID of the product to be duplicated."}, {"name": "synchronous", "type": "Boolean", "required": false, "description": "Specifies whether or not to run the mutation synchronously."}], "returns": [], "examples": [{"description": "Duplicate a product asynchronously and return productDuplicateOperation", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation DuplicateProduct($productId: ID!, $newTitle: String!, $includeImages: Boolean, $newStatus: ProductStatus, $synchronous: Boolean) {\n      productDuplicate(productId: $productId, newTitle: $newTitle, includeImages: $includeImages, newStatus: $newStatus, synchronous: $synchronous) {\n        productDuplicateOperation {\n          id\n          status\n          newProduct {\n            id\n            title\n          }\n          userErrors {\n            field\n            message\n          }\n        }\n      }\n    }`,\n    \"variables\": {\n      \"productId\": \"gid://shopify/Product/20995642\",\n      \"newTitle\": \"Copy of Product\",\n      \"includeImages\": true,\n      \"newStatus\": \"ACTIVE\",\n      \"synchronous\": false\n    },\n  },\n});\n"}, {"description": "productDuplicate reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation DuplicateProduct($productId: ID!, $newTitle: String!, $includeImages: Boolean, $newStatus: ProductStatus) {\n      productDuplicate(productId: $productId, newTitle: $newTitle, includeImages: $includeImages, newStatus: $newStatus) {\n        newProduct {\n          id\n          title\n          vendor\n          productType\n          variants(first: 1) {\n            nodes {\n              id\n              title\n            }\n          }\n        }\n        imageJob {\n          id\n          done\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"productId\": \"gid://shopify/Product/20995642\",\n      \"newTitle\": \"Copy of Product\",\n      \"includeImages\": true,\n      \"newStatus\": \"ACTIVE\"\n    },\n  },\n});\n"}]}, {"name": "productJoinSellingPlanGroups", "description": "Adds multiple selling plan groups to a product.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of the product."}, {"name": "sellingPlanGroupIds", "type": "[ID!]!", "required": false, "description": "The IDs of the selling plan groups to add."}], "returns": [], "examples": []}, {"name": "productLeaveSellingPlanGroups", "description": "Removes multiple groups from a product.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of the product."}, {"name": "sellingPlanGroupIds", "type": "[ID!]!", "required": false, "description": "The IDs of the selling plan groups to add."}], "returns": [], "examples": []}, {"name": "productOptionsCreate", "description": "Creates options on a product.", "arguments": [{"name": "options", "type": "[OptionCreateInput!]!", "required": false, "description": "Options to add to the product."}, {"name": "productId", "type": "ID!", "required": false, "description": "The ID of the product to update."}, {"name": "variantStrategy", "type": "ProductOptionCreateVariantStrategy", "required": false, "description": "The strategy defines which behavior the mutation should observe regarding variants.\nIf not provided or set to null, the strategy LEAVE_AS_IS will be used."}], "returns": [], "examples": [{"description": "Create a product option linked to a metafield", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation createOptions($productId: ID!, $options: [OptionCreateInput!]!) {\n      productOptionsCreate(productId: $productId, options: $options) {\n        userErrors {\n          field\n          message\n          code\n        }\n        product {\n          options {\n            name\n            linkedMetafield {\n              namespace\n              key\n            }\n            optionValues {\n              name\n              linkedMetafieldValue\n            }\n          }\n        }\n      }\n    }`,\n    \"variables\": {\n      \"productId\": \"gid://shopify/Product/1072481128\",\n      \"options\": [\n        {\n          \"name\": \"Color\",\n          \"linkedMetafield\": {\n            \"namespace\": \"shopify\",\n            \"key\": \"color-pattern\",\n            \"values\": [\n              \"gid://shopify/Metaobject/971662503\",\n              \"gid://shopify/Metaobject/971662504\",\n              \"gid://shopify/Metaobject/971662505\"\n            ]\n          }\n        }\n      ]\n    },\n  },\n});\n"}, {"description": "Create a product option linked to a metafield (with existing values)", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation createOptions($productId: ID!, $options: [OptionCreateInput!]!) {\n      productOptionsCreate(productId: $productId, options: $options) {\n        userErrors {\n          field\n          message\n          code\n        }\n        product {\n          options {\n            name\n            linkedMetafield {\n              namespace\n              key\n            }\n            optionValues {\n              name\n              linkedMetafieldValue\n            }\n          }\n        }\n      }\n    }`,\n    \"variables\": {\n      \"productId\": \"gid://shopify/Product/1072481128\",\n      \"options\": [\n        {\n          \"name\": \"Color\",\n          \"linkedMetafield\": {\n            \"namespace\": \"shopify\",\n            \"key\": \"color-pattern\",\n            \"values\": [\n              \"gid://shopify/Metaobject/971662503\",\n              \"gid://shopify/Metaobject/971662504\",\n              \"gid://shopify/Metaobject/971662505\"\n            ]\n          }\n        }\n      ]\n    },\n  },\n});\n"}, {"description": "Create new product option and variants with CREATE variantStrategy", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation createOptions($productId: ID!, $options: [OptionCreateInput!]!, $variantStrategy: ProductOptionCreateVariantStrategy) {\n      productOptionsCreate(productId: $productId, options: $options, variantStrategy: $variantStrategy) {\n        userErrors {\n          field\n          message\n          code\n        }\n        product {\n          id\n          variants(first: 10) {\n            nodes {\n              id\n              title\n              selectedOptions {\n                name\n                value\n              }\n            }\n          }\n          options {\n            id\n            name\n            values\n            position\n            optionValues {\n              id\n              name\n              hasVariants\n            }\n          }\n        }\n      }\n    }`,\n    \"variables\": {\n      \"productId\": \"gid://shopify/Product/20995642\",\n      \"options\": [\n        {\n          \"name\": \"Color\",\n          \"values\": [\n            {\n              \"name\": \"Blue\"\n            },\n            {\n              \"name\": \"Green\"\n            }\n          ]\n        }\n      ],\n      \"variantStrategy\": \"CREATE\"\n    },\n  },\n});\n"}, {"description": "Create new product option but no new variants with LEAVE_AS_IS variantStrategy", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation createOptions($productId: ID!, $options: [OptionCreateInput!]!, $variantStrategy: ProductOptionCreateVariantStrategy) {\n      productOptionsCreate(productId: $productId, options: $options, variantStrategy: $variantStrategy) {\n        userErrors {\n          field\n          message\n          code\n        }\n        product {\n          id\n          variants(first: 10) {\n            nodes {\n              id\n              title\n              selectedOptions {\n                name\n                value\n              }\n            }\n          }\n          options {\n            id\n            name\n            values\n            position\n            optionValues {\n              id\n              name\n              hasVariants\n            }\n          }\n        }\n      }\n    }`,\n    \"variables\": {\n      \"productId\": \"gid://shopify/Product/20995642\",\n      \"options\": [\n        {\n          \"name\": \"Color\",\n          \"values\": [\n            {\n              \"name\": \"Blue\"\n            },\n            {\n              \"name\": \"Green\"\n            }\n          ]\n        }\n      ],\n      \"variantStrategy\": \"LEAVE_AS_IS\"\n    },\n  },\n});\n"}, {"description": "Create new product option with an explicit position", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation createOptions($productId: ID!, $options: [OptionCreateInput!]!, $variantStrategy: ProductOptionCreateVariantStrategy) {\n      productOptionsCreate(productId: $productId, options: $options, variantStrategy: $variantStrategy) {\n        userErrors {\n          field\n          message\n          code\n        }\n        product {\n          id\n          variants(first: 10) {\n            nodes {\n              id\n              title\n              selectedOptions {\n                name\n                value\n              }\n            }\n          }\n          options {\n            id\n            name\n            values\n            position\n            optionValues {\n              id\n              name\n              hasVariants\n            }\n          }\n        }\n      }\n    }`,\n    \"variables\": {\n      \"productId\": \"gid://shopify/Product/20995642\",\n      \"options\": [\n        {\n          \"name\": \"Color\",\n          \"position\": 1,\n          \"values\": [\n            {\n              \"name\": \"Blue\"\n            }\n          ]\n        }\n      ]\n    },\n  },\n});\n"}, {"description": "Create new product options", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation createOptions($productId: ID!, $options: [OptionCreateInput!]!, $variantStrategy: ProductOptionCreateVariantStrategy) {\n      productOptionsCreate(productId: $productId, options: $options, variantStrategy: $variantStrategy) {\n        userErrors {\n          field\n          message\n          code\n        }\n        product {\n          id\n          variants(first: 10) {\n            nodes {\n              id\n              title\n              selectedOptions {\n                name\n                value\n              }\n            }\n          }\n          options {\n            id\n            name\n            values\n            position\n            optionValues {\n              id\n              name\n              hasVariants\n            }\n          }\n        }\n      }\n    }`,\n    \"variables\": {\n      \"productId\": \"gid://shopify/Product/1072481130\",\n      \"options\": [\n        {\n          \"name\": \"Color\",\n          \"values\": [\n            {\n              \"name\": \"Blue\"\n            },\n            {\n              \"name\": \"Red\"\n            }\n          ]\n        },\n        {\n          \"name\": \"Size\",\n          \"values\": [\n            {\n              \"name\": \"Small\"\n            },\n            {\n              \"name\": \"Medium\"\n            }\n          ]\n        }\n      ]\n    },\n  },\n});\n"}, {"description": "Trying to create an option with a name that already exists on the product returns an error", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation createOptions($productId: ID!, $options: [OptionCreateInput!]!, $variantStrategy: ProductOptionCreateVariantStrategy) {\n      productOptionsCreate(productId: $productId, options: $options, variantStrategy: $variantStrategy) {\n        userErrors {\n          field\n          message\n          code\n        }\n        product {\n          id\n          variants(first: 10) {\n            nodes {\n              id\n              title\n              selectedOptions {\n                name\n                value\n              }\n            }\n          }\n          options {\n            id\n            name\n            values\n            position\n            optionValues {\n              id\n              name\n              hasVariants\n            }\n          }\n        }\n      }\n    }`,\n    \"variables\": {\n      \"productId\": \"gid://shopify/Product/20995642\",\n      \"options\": [\n        {\n          \"name\": \"Color\",\n          \"values\": [\n            {\n              \"name\": \"Blue\"\n            }\n          ]\n        }\n      ]\n    },\n  },\n});\n"}, {"description": "Trying to create too many options returns an error", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation createOptions($productId: ID!, $options: [OptionCreateInput!]!, $variantStrategy: ProductOptionCreateVariantStrategy) {\n      productOptionsCreate(productId: $productId, options: $options, variantStrategy: $variantStrategy) {\n        userErrors {\n          field\n          message\n          code\n        }\n        product {\n          id\n          variants(first: 10) {\n            nodes {\n              id\n              title\n              selectedOptions {\n                name\n                value\n              }\n            }\n          }\n          options {\n            id\n            name\n            values\n            position\n            optionValues {\n              id\n              name\n              hasVariants\n            }\n          }\n        }\n      }\n    }`,\n    \"variables\": {\n      \"productId\": \"gid://shopify/Product/20995642\",\n      \"options\": [\n        {\n          \"name\": \"Color\",\n          \"values\": [\n            {\n              \"name\": \"Blue\"\n            }\n          ]\n        },\n        {\n          \"name\": \"Style\",\n          \"values\": [\n            {\n              \"name\": \"Classic\"\n            }\n          ]\n        },\n        {\n          \"name\": \"Size\",\n          \"values\": [\n            {\n              \"name\": \"Small\"\n            }\n          ]\n        },\n        {\n          \"name\": \"Material\",\n          \"values\": [\n            {\n              \"name\": \"Linen\"\n            }\n          ]\n        }\n      ]\n    },\n  },\n});\n"}, {"description": "productOptionsCreate reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation createOptions($productId: ID!, $options: [OptionCreateInput!]!) {\n      productOptionsCreate(productId: $productId, options: $options) {\n        userErrors {\n          field\n          message\n          code\n        }\n        product {\n          options {\n            name\n            linkedMetafield {\n              namespace\n              key\n            }\n            optionValues {\n              name\n              linkedMetafieldValue\n            }\n          }\n        }\n      }\n    }`,\n    \"variables\": {\n      \"productId\": \"gid://shopify/Product/1072481128\",\n      \"options\": [\n        {\n          \"name\": \"Color\",\n          \"linkedMetafield\": {\n            \"namespace\": \"shopify\",\n            \"key\": \"color-pattern\",\n            \"values\": [\n              \"gid://shopify/Metaobject/971662503\",\n              \"gid://shopify/Metaobject/971662504\",\n              \"gid://shopify/Metaobject/971662505\"\n            ]\n          }\n        }\n      ]\n    },\n  },\n});\n"}]}, {"name": "productOptionsDelete", "description": "Deletes the specified options.", "arguments": [{"name": "options", "type": "[ID!]!", "required": false, "description": "IDs of the options to delete from the product."}, {"name": "productId", "type": "ID!", "required": false, "description": "ID of the product from which to delete the options."}, {"name": "strategy", "type": "ProductOptionDeleteStrategy", "required": false, "description": "The strategy defines which behavior the mutation should observe,such as how to handle a situation where deleting an option would result in duplicate variants."}], "returns": [], "examples": [{"description": "Delete an option", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation deleteOptions($productId: ID!, $options: [ID!]!, $strategy: ProductOptionDeleteStrategy) {\n      productOptionsDelete(productId: $productId, options: $options, strategy: $strategy) {\n        userErrors {\n          field\n          message\n          code\n        }\n        deletedOptionsIds\n        product {\n          id\n          options {\n            id\n            name\n            values\n            position\n            optionValues {\n              id\n              name\n              hasVariants\n            }\n          }\n        }\n      }\n    }`,\n    \"variables\": {\n      \"productId\": \"gid://shopify/Product/20995642\",\n      \"options\": [\n        \"gid://shopify/ProductOption/1064576514\"\n      ]\n    },\n  },\n});\n"}, {"description": "Delete an option with the POSITION delete strategy", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation deleteOptions($productId: ID!, $options: [ID!]!, $strategy: ProductOptionDeleteStrategy) {\n      productOptionsDelete(productId: $productId, options: $options, strategy: $strategy) {\n        userErrors {\n          field\n          message\n          code\n        }\n        deletedOptionsIds\n        product {\n          id\n          options {\n            id\n            name\n            values\n            position\n            optionValues {\n              id\n              name\n              hasVariants\n            }\n          }\n        }\n      }\n    }`,\n    \"variables\": {\n      \"productId\": \"gid://shopify/Product/20995642\",\n      \"options\": [\n        \"gid://shopify/ProductOption/328272167\"\n      ],\n      \"strategy\": \"POSITION\"\n    },\n  },\n});\n"}, {"description": "Trying to delete an option with multiple option values linked to variants with no option delete strategy\n            returns an error", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation deleteOptions($productId: ID!, $options: [ID!]!, $strategy: ProductOptionDeleteStrategy) {\n      productOptionsDelete(productId: $productId, options: $options, strategy: $strategy) {\n        userErrors {\n          field\n          message\n          code\n        }\n        deletedOptionsIds\n        product {\n          id\n          options {\n            id\n            name\n            values\n            position\n            optionValues {\n              id\n              name\n              hasVariants\n            }\n          }\n        }\n      }\n    }`,\n    \"variables\": {\n      \"productId\": \"gid://shopify/Product/20995642\",\n      \"options\": [\n        \"gid://shopify/ProductOption/1064576514\"\n      ]\n    },\n  },\n});\n"}, {"description": "productOptionsDelete reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation deleteOptions($productId: ID!, $options: [ID!]!, $strategy: ProductOptionDeleteStrategy) {\n      productOptionsDelete(productId: $productId, options: $options, strategy: $strategy) {\n        userErrors {\n          field\n          message\n          code\n        }\n        deletedOptionsIds\n        product {\n          id\n          options {\n            id\n            name\n            values\n            position\n            optionValues {\n              id\n              name\n              hasVariants\n            }\n          }\n        }\n      }\n    }`,\n    \"variables\": {\n      \"productId\": \"gid://shopify/Product/20995642\",\n      \"options\": [\n        \"gid://shopify/ProductOption/1064576514\"\n      ]\n    },\n  },\n});\n"}]}, {"name": "productOptionsReorder", "description": "Reorders options and option values on a product, causing product variants to alter their position.\nOptions order take precedence over option values order. Depending on the existing product variants,\nsome input orders might not be achieved.\nExample:\n  Existing product variants:\n    [\"Red / Small\", \"Green / Medium\", \"Blue / Small\"].\n  New order:\n    [\n      {\n        name: \"Size\", values: [{ name: \"Small\" }, { name: \"Medium\" }],\n        name: \"Color\", values: [{ name: \"Green\" }, { name: \"Red\" }, { name: \"Blue\" }]\n      }\n    ].\n  Description:\n    Variants with \"Green\" value are expected to appear before variants with \"Red\" and \"Blue\" values.\n    However, \"Size\" option appears before \"Color\".\n  Therefore, output will be:\n    [\"Small / \"Red\", \"Small / Blue\", \"Medium / Green\"].", "arguments": [{"name": "options", "type": "[OptionReorderInput!]!", "required": false, "description": "Options to reorder on the product."}, {"name": "productId", "type": "ID!", "required": false, "description": "The ID of the product to update."}], "returns": [], "examples": [{"description": "Reorder options and change the order of option values", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation reorderOptions($options: [OptionReorderInput!]!, $productId: ID!) {\n      productOptionsReorder(options: $options, productId: $productId) {\n        userErrors {\n          field\n          message\n          code\n        }\n        product {\n          id\n          options {\n            id\n            name\n            values\n            position\n            optionValues {\n              id\n              name\n              hasVariants\n            }\n          }\n          variants(first: 5) {\n            nodes {\n              id\n              title\n              selectedOptions {\n                name\n                value\n              }\n            }\n          }\n        }\n      }\n    }`,\n    \"variables\": {\n      \"productId\": \"gid://shopify/Product/1072481054\",\n      \"options\": [\n        {\n          \"name\": \"Color\",\n          \"values\": [\n            {\n              \"name\": \"Green\"\n            },\n            {\n              \"name\": \"Blue\"\n            },\n            {\n              \"name\": \"Red\"\n            }\n          ]\n        },\n        {\n          \"name\": \"Size\"\n        }\n      ]\n    },\n  },\n});\n"}, {"description": "Trying to reorder option values with any value missing in the input returns an error", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation reorderOptions($options: [OptionReorderInput!]!, $productId: ID!) {\n      productOptionsReorder(options: $options, productId: $productId) {\n        userErrors {\n          field\n          message\n          code\n        }\n        product {\n          id\n          options {\n            id\n            name\n            values\n            position\n            optionValues {\n              id\n              name\n              hasVariants\n            }\n          }\n          variants(first: 5) {\n            nodes {\n              id\n              title\n              selectedOptions {\n                name\n                value\n              }\n            }\n          }\n        }\n      }\n    }`,\n    \"variables\": {\n      \"productId\": \"gid://shopify/Product/20995642\",\n      \"options\": [\n        {\n          \"name\": \"Title\",\n          \"values\": [\n            {\n              \"name\": \"158cm\"\n            },\n            {\n              \"name\": \"151cm\"\n            }\n          ]\n        }\n      ]\n    },\n  },\n});\n"}, {"description": "productOptionsReorder reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation reorderOptions($options: [OptionReorderInput!]!, $productId: ID!) {\n      productOptionsReorder(options: $options, productId: $productId) {\n        userErrors {\n          field\n          message\n          code\n        }\n        product {\n          id\n          options {\n            id\n            name\n            values\n            position\n            optionValues {\n              id\n              name\n              hasVariants\n            }\n          }\n          variants(first: 5) {\n            nodes {\n              id\n              title\n              selectedOptions {\n                name\n                value\n              }\n            }\n          }\n        }\n      }\n    }`,\n    \"variables\": {\n      \"productId\": \"gid://shopify/Product/1072481054\",\n      \"options\": [\n        {\n          \"name\": \"Color\",\n          \"values\": [\n            {\n              \"name\": \"Green\"\n            },\n            {\n              \"name\": \"Blue\"\n            },\n            {\n              \"name\": \"Red\"\n            }\n          ]\n        },\n        {\n          \"name\": \"Size\"\n        }\n      ]\n    },\n  },\n});\n"}]}, {"name": "productOptionUpdate", "description": "Updates a product option.", "arguments": [{"name": "option", "type": "OptionUpdateInput!", "required": false, "description": "Option to update."}, {"name": "optionValuesToAdd", "type": "[OptionValueCreateInput!]", "required": false, "description": "New option values to create."}, {"name": "optionValuesToDelete", "type": "[ID!]", "required": false, "description": "IDs of the existing option values to delete."}, {"name": "optionValuesToUpdate", "type": "[OptionValueUpdateInput!]", "required": false, "description": "Existing option values to update."}, {"name": "productId", "type": "ID!", "required": false, "description": "The ID of the Product the Option belongs to."}, {"name": "variantStrategy", "type": "ProductOptionUpdateVariantStrategy", "required": false, "description": "The strategy defines which behavior the mutation should observe regarding variants,\nsuch as creating variants or deleting them in response to option values to add or to delete.\nIf not provided or set to null, the strategy LEAVE_AS_IS will be used."}], "returns": [], "examples": [{"description": "Add 2 new option values and update an existing one", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation updateOption($productId: ID!, $option: OptionUpdateInput!, $optionValuesToAdd: [OptionValueCreateInput!], $optionValuesToUpdate: [OptionValueUpdateInput!], $optionValuesToDelete: [ID!], $variantStrategy: ProductOptionUpdateVariantStrategy) {\n      productOptionUpdate(productId: $productId, option: $option, optionValuesToAdd: $optionValuesToAdd, optionValuesToUpdate: $optionValuesToUpdate, optionValuesToDelete: $optionValuesToDelete, variantStrategy: $variantStrategy) {\n        userErrors {\n          field\n          message\n          code\n        }\n        product {\n          id\n          options {\n            id\n            name\n            values\n            position\n            optionValues {\n              id\n              name\n              hasVariants\n            }\n          }\n          variants(first: 5) {\n            nodes {\n              id\n              title\n              selectedOptions {\n                name\n                value\n              }\n            }\n          }\n        }\n      }\n    }`,\n    \"variables\": {\n      \"productId\": \"gid://shopify/Product/1072481063\",\n      \"option\": {\n        \"id\": \"gid://shopify/ProductOption/1064576526\"\n      },\n      \"optionValuesToAdd\": [\n        {\n          \"name\": \"Yellow\"\n        },\n        {\n          \"name\": \"Red\"\n        }\n      ],\n      \"optionValuesToUpdate\": [\n        {\n          \"id\": \"gid://shopify/ProductOptionValue/1054672275\",\n          \"name\": \"Purple\"\n        }\n      ]\n    },\n  },\n});\n"}, {"description": "Replace a value with another", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation updateOption($productId: ID!, $option: OptionUpdateInput!, $optionValuesToAdd: [OptionValueCreateInput!], $optionValuesToUpdate: [OptionValueUpdateInput!], $optionValuesToDelete: [ID!], $variantStrategy: ProductOptionUpdateVariantStrategy) {\n      productOptionUpdate(productId: $productId, option: $option, optionValuesToAdd: $optionValuesToAdd, optionValuesToUpdate: $optionValuesToUpdate, optionValuesToDelete: $optionValuesToDelete, variantStrategy: $variantStrategy) {\n        userErrors {\n          field\n          message\n          code\n        }\n        product {\n          id\n          options {\n            id\n            name\n            values\n            position\n            optionValues {\n              id\n              name\n              hasVariants\n            }\n          }\n          variants(first: 5) {\n            nodes {\n              id\n              title\n              selectedOptions {\n                name\n                value\n              }\n            }\n          }\n        }\n      }\n    }`,\n    \"variables\": {\n      \"productId\": \"gid://shopify/Product/1072481069\",\n      \"option\": {\n        \"id\": \"gid://shopify/ProductOption/1064576533\"\n      },\n      \"optionValuesToAdd\": [\n        {\n          \"name\": \"Small\"\n        }\n      ],\n      \"optionValuesToUpdate\": [\n        {\n          \"id\": \"gid://shopify/ProductOptionValue/1054672293\",\n          \"name\": \"Medium\"\n        }\n      ]\n    },\n  },\n});\n"}, {"description": "Trying to add an option value with a name that already exists returns an error", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation updateOption($productId: ID!, $option: OptionUpdateInput!, $optionValuesToAdd: [OptionValueCreateInput!], $optionValuesToUpdate: [OptionValueUpdateInput!], $optionValuesToDelete: [ID!], $variantStrategy: ProductOptionUpdateVariantStrategy) {\n      productOptionUpdate(productId: $productId, option: $option, optionValuesToAdd: $optionValuesToAdd, optionValuesToUpdate: $optionValuesToUpdate, optionValuesToDelete: $optionValuesToDelete, variantStrategy: $variantStrategy) {\n        userErrors {\n          field\n          message\n          code\n        }\n        product {\n          id\n          options {\n            id\n            name\n            values\n            position\n            optionValues {\n              id\n              name\n              hasVariants\n            }\n          }\n          variants(first: 5) {\n            nodes {\n              id\n              title\n              selectedOptions {\n                name\n                value\n              }\n            }\n          }\n        }\n      }\n    }`,\n    \"variables\": {\n      \"productId\": \"gid://shopify/Product/1072481067\",\n      \"option\": {\n        \"id\": \"gid://shopify/ProductOption/1064576530\"\n      },\n      \"optionValuesToAdd\": [\n        {\n          \"name\": \"Red\"\n        },\n        {\n          \"name\": \"Blue\"\n        }\n      ]\n    },\n  },\n});\n"}, {"description": "Update name and position of an option", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation updateOption($productId: ID!, $option: OptionUpdateInput!, $optionValuesToAdd: [OptionValueCreateInput!], $optionValuesToUpdate: [OptionValueUpdateInput!], $optionValuesToDelete: [ID!], $variantStrategy: ProductOptionUpdateVariantStrategy) {\n      productOptionUpdate(productId: $productId, option: $option, optionValuesToAdd: $optionValuesToAdd, optionValuesToUpdate: $optionValuesToUpdate, optionValuesToDelete: $optionValuesToDelete, variantStrategy: $variantStrategy) {\n        userErrors {\n          field\n          message\n          code\n        }\n        product {\n          id\n          options {\n            id\n            name\n            values\n            position\n            optionValues {\n              id\n              name\n              hasVariants\n            }\n          }\n          variants(first: 5) {\n            nodes {\n              id\n              title\n              selectedOptions {\n                name\n                value\n              }\n            }\n          }\n        }\n      }\n    }`,\n    \"variables\": {\n      \"productId\": \"gid://shopify/Product/1072481071\",\n      \"option\": {\n        \"id\": \"gid://shopify/ProductOption/1064576536\",\n        \"position\": 1,\n        \"name\": \"Tint\"\n      }\n    },\n  },\n});\n"}, {"description": "Update the values of an option linked to a metafield", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation updateOption($productId: ID!, $option: OptionUpdateInput!, $optionValuesToAdd: [OptionValueCreateInput!], $optionValuesToUpdate: [OptionValueUpdateInput!], $optionValuesToDelete: [ID!]) {\n      productOptionUpdate(productId: $productId, option: $option, optionValuesToAdd: $optionValuesToAdd, optionValuesToUpdate: $optionValuesToUpdate, optionValuesToDelete: $optionValuesToDelete) {\n        userErrors {\n          field\n          message\n          code\n        }\n        product {\n          options {\n            name\n            linkedMetafield {\n              namespace\n              key\n            }\n            optionValues {\n              name\n              linkedMetafieldValue\n            }\n          }\n        }\n      }\n    }`,\n    \"variables\": {\n      \"productId\": \"gid://shopify/Product/1072481065\",\n      \"option\": {\n        \"id\": \"gid://shopify/ProductOption/1064576528\"\n      },\n      \"optionValuesToAdd\": [\n        {\n          \"linkedMetafieldValue\": \"gid://shopify/Metaobject/971662473\"\n        }\n      ],\n      \"optionValuesToUpdate\": [\n        {\n          \"id\": \"gid://shopify/ProductOptionValue/1054672281\",\n          \"linkedMetafieldValue\": \"gid://shopify/Metaobject/971662474\"\n        }\n      ]\n    },\n  },\n});\n"}, {"description": "productOptionUpdate reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation updateOption($productId: ID!, $option: OptionUpdateInput!, $optionValuesToAdd: [OptionValueCreateInput!], $optionValuesToUpdate: [OptionValueUpdateInput!], $optionValuesToDelete: [ID!], $variantStrategy: ProductOptionUpdateVariantStrategy) {\n      productOptionUpdate(productId: $productId, option: $option, optionValuesToAdd: $optionValuesToAdd, optionValuesToUpdate: $optionValuesToUpdate, optionValuesToDelete: $optionValuesToDelete, variantStrategy: $variantStrategy) {\n        userErrors {\n          field\n          message\n          code\n        }\n        product {\n          id\n          options {\n            id\n            name\n            values\n            position\n            optionValues {\n              id\n              name\n              hasVariants\n            }\n          }\n          variants(first: 5) {\n            nodes {\n              id\n              title\n              selectedOptions {\n                name\n                value\n              }\n            }\n          }\n        }\n      }\n    }`,\n    \"variables\": {\n      \"productId\": \"gid://shopify/Product/1072481063\",\n      \"option\": {\n        \"id\": \"gid://shopify/ProductOption/1064576526\"\n      },\n      \"optionValuesToAdd\": [\n        {\n          \"name\": \"Yellow\"\n        },\n        {\n          \"name\": \"Red\"\n        }\n      ],\n      \"optionValuesToUpdate\": [\n        {\n          \"id\": \"gid://shopify/ProductOptionValue/1054672275\",\n          \"name\": \"Purple\"\n        }\n      ]\n    },\n  },\n});\n"}]}, {"name": "productPublish", "description": "Publishes a product. Products that are sold exclusively on subscription (requiresSellingPlan: true) can only be published on online stores. Use publishablePublish instead.", "arguments": [{"name": "input", "type": "ProductPublishInput!", "required": false, "description": "Specifies the product to publish and the channels to publish it to."}], "returns": [], "examples": []}, {"name": "productReorderMedia", "description": "Asynchronously reorders the media attached to a product.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of the product on which to reorder medias."}, {"name": "moves", "type": "[MoveInput!]!", "required": false, "description": "A list of moves to perform which will be evaluated in order."}], "returns": [], "examples": [{"description": "productReorderMedia reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation productReorderMedia($id: ID!, $moves: [MoveInput!]!) {\n      productReorderMedia(id: $id, moves: $moves) {\n        job {\n          id\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/Product/108828309\",\n      \"moves\": [\n        {\n          \"id\": \"gid://shopify/MediaImage/183532652\",\n          \"newPosition\": \"2\"\n        },\n        {\n          \"id\": \"gid://shopify/MediaImage/731367280\",\n          \"newPosition\": \"3\"\n        }\n      ]\n    },\n  },\n});\n"}]}, {"name": "productSet", "description": "Creates or updates a product in a single request.\nUse this mutation when syncing information from an external data source into Shopify.\nWhen using this mutation to update a product, specify that product's id in the input.\nAny list field (e.g.\ncollections,\nmetafields,\nvariants)\nwill be updated so that all included entries are either created or updated, and all existing entries not\nincluded will be deleted.\nAll other fields will be updated to the value passed. Omitted fields will not be updated.\nWhen run in synchronous mode, you will get the product back in the response.\nFor versions 2024-04 and earlier, the synchronous mode has an input limit of 100 variants.\nThis limit has been removed for versions 2024-07 and later.\nIn asynchronous mode, you will instead get a\nProductSetOperation\nobject back. You can then use the\nproductOperation query to\nretrieve the updated product data. This query uses the ProductSetOperation object to\ncheck the status of the operation and to retrieve the details of the updated product and its variants.\nIf you need to update a subset of variants, use one of the bulk variant mutations:\n\nproductVariantsBulkCreate\nproductVariantsBulkUpdate\nproductVariantsBulkDelete\n\nIf you need to update options, use one of the product option mutations:\n\nproductOptionsCreate\nproductOptionUpdate\nproductOptionsDelete\nproductOptionsReorder\n\nSee our guide to\nsync product data from an external source\nfor more.", "arguments": [{"name": "identifier", "type": "ProductSetIdentifiers", "required": false, "description": "Specifies the identifier that will be used to lookup the resource."}, {"name": "input", "type": "ProductSetInput!", "required": false, "description": "The properties of the newly created or updated product."}, {"name": "synchronous", "type": "Boolean", "required": false, "description": "Whether the mutation should be run synchronously or asynchronously.\nIf true, the mutation will return the updated product.\nIf false, the mutation will return a productSetOperation.\nDefaults to true.\nSetting synchronous: false may be desirable depending on the input complexity/size, and should be used if you are experiencing timeouts.\nNote: When run in the context of a\nbulk operation, the mutation will\nalways run synchronously and this argument will be ignored."}], "returns": [], "examples": [{"description": "Asynchronously create a product with two variants", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation createProductAsynchronous($productSet: ProductSetInput!, $synchronous: Boolean!) {\n      productSet(synchronous: $synchronous, input: $productSet) {\n        product {\n          id\n        }\n        productSetOperation {\n          id\n          status\n          userErrors {\n            code\n            field\n            message\n          }\n        }\n        userErrors {\n          code\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"synchronous\": false,\n      \"productSet\": {\n        \"title\": \"Winter hat\",\n        \"productOptions\": [\n          {\n            \"name\": \"Color\",\n            \"position\": 1,\n            \"values\": [\n              {\n                \"name\": \"Grey\"\n              },\n              {\n                \"name\": \"Black\"\n              }\n            ]\n          }\n        ],\n        \"variants\": [\n          {\n            \"optionValues\": [\n              {\n                \"optionName\": \"Color\",\n                \"name\": \"Grey\"\n              }\n            ],\n            \"price\": 79.99\n          },\n          {\n            \"optionValues\": [\n              {\n                \"optionName\": \"Color\",\n                \"name\": \"Black\"\n              }\n            ],\n            \"price\": 69.99\n          }\n        ]\n      }\n    },\n  },\n});\n"}, {"description": "Create a product with customized inventory quantities", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation createProduct($productSet: ProductSetInput!, $synchronous: Boolean!) {\n      productSet(synchronous: $synchronous, input: $productSet) {\n        product {\n          id\n          variants(first: 5) {\n            nodes {\n              title\n              price\n              inventoryQuantity\n              inventoryItem {\n                inventoryLevels(first: 5) {\n                  nodes {\n                    location {\n                      id\n                      name\n                    }\n                    available\n                  }\n                }\n              }\n            }\n          }\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"synchronous\": true,\n      \"productSet\": {\n        \"title\": \"Winter hat\",\n        \"productOptions\": [\n          {\n            \"name\": \"Color\",\n            \"position\": 1,\n            \"values\": [\n              {\n                \"name\": \"Grey\"\n              },\n              {\n                \"name\": \"Black\"\n              }\n            ]\n          }\n        ],\n        \"variants\": [\n          {\n            \"optionValues\": [\n              {\n                \"optionName\": \"Color\",\n                \"name\": \"Grey\"\n              }\n            ],\n            \"inventoryQuantities\": [\n              {\n                \"locationId\": \"gid://shopify/Location/415211365\",\n                \"name\": \"available\",\n                \"quantity\": 12\n              },\n              {\n                \"locationId\": \"gid://shopify/Location/346779380\",\n                \"name\": \"available\",\n                \"quantity\": 19\n              }\n            ],\n            \"price\": 79.99\n          },\n          {\n            \"optionValues\": [\n              {\n                \"optionName\": \"Color\",\n                \"name\": \"Black\"\n              }\n            ],\n            \"inventoryQuantities\": [\n              {\n                \"locationId\": \"gid://shopify/Location/346779380\",\n                \"name\": \"available\",\n                \"quantity\": 976\n              },\n              {\n                \"locationId\": \"gid://shopify/Location/415211365\",\n                \"name\": \"available\",\n                \"quantity\": 844\n              }\n            ],\n            \"price\": 11.99\n          }\n        ]\n      }\n    },\n  },\n});\n"}, {"description": "Create a product with files", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation createProduct($productSet: ProductSetInput!, $synchronous: Boolean!) {\n      productSet(synchronous: $synchronous, input: $productSet) {\n        product {\n          id\n          media(first: 5) {\n            nodes {\n              id\n              position\n              alt\n              mediaContentType\n              status\n            }\n          }\n          variants(first: 5) {\n            nodes {\n              title\n              price\n              media(first: 5) {\n                nodes {\n                  id\n                  position\n                  alt\n                  mediaContentType\n                  status\n                }\n              }\n            }\n          }\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"synchronous\": true,\n      \"productSet\": {\n        \"title\": \"Winter hat\",\n        \"productOptions\": [\n          {\n            \"name\": \"Color\",\n            \"position\": 1,\n            \"values\": [\n              {\n                \"name\": \"Grey\"\n              },\n              {\n                \"name\": \"Black\"\n              }\n            ]\n          }\n        ],\n        \"files\": [\n          {\n            \"originalSource\": \"https://example.com/hats/grey-hat.jpg\",\n            \"alt\": \"An elegant grey hat\",\n            \"filename\": \"grey-hat.jpg\",\n            \"contentType\": \"IMAGE\"\n          },\n          {\n            \"originalSource\": \"https://example.com/hats/black-hat.jpg\",\n            \"alt\": \"An elegant black hat\",\n            \"filename\": \"black-hat.jpg\",\n            \"contentType\": \"IMAGE\"\n          }\n        ],\n        \"variants\": [\n          {\n            \"optionValues\": [\n              {\n                \"optionName\": \"Color\",\n                \"name\": \"Grey\"\n              }\n            ],\n            \"file\": {\n              \"originalSource\": \"https://example.com/hats/grey-hat.jpg\",\n              \"alt\": \"An elegant grey hat\",\n              \"filename\": \"grey-hat.jpg\",\n              \"contentType\": \"IMAGE\"\n            },\n            \"price\": 11.99\n          },\n          {\n            \"optionValues\": [\n              {\n                \"optionName\": \"Color\",\n                \"name\": \"Black\"\n              }\n            ],\n            \"file\": {\n              \"originalSource\": \"https://example.com/hats/black-hat.jpg\",\n              \"alt\": \"An elegant black hat\",\n              \"filename\": \"black-hat.jpg\",\n              \"contentType\": \"IMAGE\"\n            },\n            \"price\": 11.99\n          }\n        ]\n      }\n    },\n  },\n});\n"}, {"description": "Create a product with two options and four variants", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation createProductWithTwoOptionsAndVariants($productSet: ProductSetInput!, $synchronous: Boolean!) {\n      productSet(synchronous: $synchronous, input: $productSet) {\n        product {\n          id\n          title\n          options(first: 5) {\n            name\n            position\n            optionValues {\n              name\n            }\n          }\n          variants(first: 5) {\n            nodes {\n              price\n              selectedOptions {\n                name\n                optionValue {\n                  id\n                  name\n                }\n              }\n            }\n          }\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"synchronous\": true,\n      \"productSet\": {\n        \"title\": \"A humble tie\",\n        \"productOptions\": [\n          {\n            \"name\": \"Pattern\",\n            \"position\": 1,\n            \"values\": [\n              {\n                \"name\": \"Plain\"\n              },\n              {\n                \"name\": \"Stripes\"\n              }\n            ]\n          },\n          {\n            \"name\": \"Width\",\n            \"position\": 2,\n            \"values\": [\n              {\n                \"name\": \"Slim\"\n              },\n              {\n                \"name\": \"Classic\"\n              }\n            ]\n          }\n        ],\n        \"variants\": [\n          {\n            \"optionValues\": [\n              {\n                \"optionName\": \"Pattern\",\n                \"name\": \"Plain\"\n              },\n              {\n                \"optionName\": \"Width\",\n                \"name\": \"Slim\"\n              }\n            ],\n            \"price\": 15.0\n          },\n          {\n            \"optionValues\": [\n              {\n                \"optionName\": \"Pattern\",\n                \"name\": \"Plain\"\n              },\n              {\n                \"optionName\": \"Width\",\n                \"name\": \"Classic\"\n              }\n            ],\n            \"price\": 15.0\n          },\n          {\n            \"optionValues\": [\n              {\n                \"optionName\": \"Pattern\",\n                \"name\": \"Stripes\"\n              },\n              {\n                \"optionName\": \"Width\",\n                \"name\": \"Slim\"\n              }\n            ],\n            \"price\": 15.0\n          },\n          {\n            \"optionValues\": [\n              {\n                \"optionName\": \"Pattern\",\n                \"name\": \"Stripes\"\n              },\n              {\n                \"optionName\": \"Width\",\n                \"name\": \"Classic\"\n              }\n            ],\n            \"price\": 15.0\n          }\n        ]\n      }\n    },\n  },\n});\n"}, {"description": "Remove custom options and variants from a product", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation updateProductToLeaveDefaultVariant($productSet: ProductSetInput!, $synchronous: Boolean!) {\n      productSet(synchronous: $synchronous, input: $productSet) {\n        product {\n          id\n          hasOnlyDefaultVariant\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"synchronous\": true,\n      \"productSet\": {\n        \"id\": \"gid://shopify/Product/20995642\",\n        \"productOptions\": [],\n        \"variants\": []\n      }\n    },\n  },\n});\n"}, {"description": "Update product variant pricing referencing options and variants by Ids", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation updateProductVariantPricing($input: ProductSetInput!, $synchronous: Boolean!) {\n      productSet(synchronous: $synchronous, input: $input) {\n        product {\n          id\n          title\n          description\n          handle\n          options(first: 5) {\n            name\n            position\n            optionValues {\n              name\n            }\n          }\n          variants(first: 5) {\n            nodes {\n              price\n              compareAtPrice\n              selectedOptions {\n                name\n                optionValue {\n                  id\n                  name\n                }\n              }\n            }\n          }\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"synchronous\": true,\n      \"input\": {\n        \"id\": \"gid://shopify/Product/1072481473\",\n        \"title\": \"Bike frame\",\n        \"descriptionHtml\": \"Blending durability with aerodynamics\",\n        \"handle\": \"bike-frame\",\n        \"productType\": \"parts\",\n        \"tags\": [\n          \"cycling\",\n          \"bike\",\n          \"parts\"\n        ],\n        \"vendor\": \"Your cycling company\",\n        \"status\": \"ACTIVE\",\n        \"productOptions\": [\n          {\n            \"id\": \"gid://shopify/ProductOption/1064577289\",\n            \"values\": [\n              {\n                \"id\": \"gid://shopify/ProductOptionValue/1054675047\"\n              },\n              {\n                \"id\": \"gid://shopify/ProductOptionValue/1054675048\"\n              },\n              {\n                \"id\": \"gid://shopify/ProductOptionValue/1054675049\"\n              }\n            ]\n          },\n          {\n            \"id\": \"gid://shopify/ProductOption/1064577290\",\n            \"values\": [\n              {\n                \"id\": \"gid://shopify/ProductOptionValue/1054675051\"\n              },\n              {\n                \"id\": \"gid://shopify/ProductOptionValue/1054675050\"\n              },\n              {\n                \"id\": \"gid://shopify/ProductOptionValue/1054675052\"\n              }\n            ]\n          }\n        ],\n        \"variants\": [\n          {\n            \"id\": \"gid://shopify/ProductVariant/1070327057\",\n            \"position\": 1,\n            \"price\": 94.99,\n            \"compareAtPrice\": 99.99,\n            \"optionValues\": [\n              {\n                \"id\": \"gid://shopify/ProductOptionValue/1054675047\",\n                \"optionId\": \"gid://shopify/ProductOption/1064577289\"\n              },\n              {\n                \"id\": \"gid://shopify/ProductOptionValue/1054675050\",\n                \"optionId\": \"gid://shopify/ProductOption/1064577290\"\n              }\n            ]\n          },\n          {\n            \"id\": \"gid://shopify/ProductVariant/1070327058\",\n            \"position\": 2,\n            \"price\": 259.99,\n            \"compareAtPrice\": 299.99,\n            \"optionValues\": [\n              {\n                \"id\": \"gid://shopify/ProductOptionValue/1054675048\",\n                \"optionId\": \"gid://shopify/ProductOption/1064577289\"\n              },\n              {\n                \"id\": \"gid://shopify/ProductOptionValue/1054675051\",\n                \"optionId\": \"gid://shopify/ProductOption/1064577290\"\n              }\n            ]\n          },\n          {\n            \"id\": \"gid://shopify/ProductVariant/1070327059\",\n            \"position\": 3,\n            \"price\": 169.99,\n            \"compareAtPrice\": 199.99,\n            \"optionValues\": [\n              {\n                \"id\": \"gid://shopify/ProductOptionValue/1054675049\",\n                \"optionId\": \"gid://shopify/ProductOption/1064577289\"\n              },\n              {\n                \"id\": \"gid://shopify/ProductOptionValue/1054675052\",\n                \"optionId\": \"gid://shopify/ProductOption/1064577290\"\n              }\n            ]\n          }\n        ]\n      }\n    },\n  },\n});\n"}, {"description": "Update product variant pricing referencing options and variants by Ids", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation updateProductVariantPricing($input: ProductSetInput!, $synchronous: Boolean!) {\n      productSet(synchronous: $synchronous, input: $input) {\n        product {\n          id\n          title\n          description\n          handle\n          options(first: 5) {\n            name\n            position\n            optionValues {\n              name\n            }\n          }\n          variants(first: 5) {\n            nodes {\n              price\n              compareAtPrice\n              selectedOptions {\n                name\n                optionValue {\n                  id\n                  name\n                }\n              }\n            }\n          }\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"synchronous\": true,\n      \"input\": {\n        \"id\": \"gid://shopify/Product/1072481473\",\n        \"title\": \"Bike frame\",\n        \"descriptionHtml\": \"Blending durability with aerodynamics\",\n        \"handle\": \"bike-frame\",\n        \"productType\": \"parts\",\n        \"tags\": [\n          \"cycling\",\n          \"bike\",\n          \"parts\"\n        ],\n        \"vendor\": \"Your cycling company\",\n        \"status\": \"ACTIVE\",\n        \"productOptions\": [\n          {\n            \"id\": \"gid://shopify/ProductOption/1064577289\",\n            \"values\": [\n              {\n                \"id\": \"gid://shopify/ProductOptionValue/1054675047\"\n              },\n              {\n                \"id\": \"gid://shopify/ProductOptionValue/1054675048\"\n              },\n              {\n                \"id\": \"gid://shopify/ProductOptionValue/1054675049\"\n              }\n            ]\n          },\n          {\n            \"id\": \"gid://shopify/ProductOption/1064577290\",\n            \"values\": [\n              {\n                \"id\": \"gid://shopify/ProductOptionValue/1054675051\"\n              },\n              {\n                \"id\": \"gid://shopify/ProductOptionValue/1054675050\"\n              },\n              {\n                \"id\": \"gid://shopify/ProductOptionValue/1054675052\"\n              }\n            ]\n          }\n        ],\n        \"variants\": [\n          {\n            \"id\": \"gid://shopify/ProductVariant/1070327057\",\n            \"position\": 1,\n            \"price\": 94.99,\n            \"compareAtPrice\": 99.99,\n            \"optionValues\": [\n              {\n                \"id\": \"gid://shopify/ProductOptionValue/1054675047\",\n                \"optionId\": \"gid://shopify/ProductOption/1064577289\"\n              },\n              {\n                \"id\": \"gid://shopify/ProductOptionValue/1054675050\",\n                \"optionId\": \"gid://shopify/ProductOption/1064577290\"\n              }\n            ]\n          },\n          {\n            \"id\": \"gid://shopify/ProductVariant/1070327058\",\n            \"position\": 2,\n            \"price\": 259.99,\n            \"compareAtPrice\": 299.99,\n            \"optionValues\": [\n              {\n                \"id\": \"gid://shopify/ProductOptionValue/1054675048\",\n                \"optionId\": \"gid://shopify/ProductOption/1064577289\"\n              },\n              {\n                \"id\": \"gid://shopify/ProductOptionValue/1054675051\",\n                \"optionId\": \"gid://shopify/ProductOption/1064577290\"\n              }\n            ]\n          },\n          {\n            \"id\": \"gid://shopify/ProductVariant/1070327059\",\n            \"position\": 3,\n            \"price\": 169.99,\n            \"compareAtPrice\": 199.99,\n            \"optionValues\": [\n              {\n                \"id\": \"gid://shopify/ProductOptionValue/1054675049\",\n                \"optionId\": \"gid://shopify/ProductOption/1064577289\"\n              },\n              {\n                \"id\": \"gid://shopify/ProductOptionValue/1054675052\",\n                \"optionId\": \"gid://shopify/ProductOption/1064577290\"\n              }\n            ]\n          }\n        ]\n      }\n    },\n  },\n});\n"}, {"description": "productSet reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation createProductAsynchronous($productSet: ProductSetInput!, $synchronous: Boolean!) {\n      productSet(synchronous: $synchronous, input: $productSet) {\n        product {\n          id\n        }\n        productSetOperation {\n          id\n          status\n          userErrors {\n            code\n            field\n            message\n          }\n        }\n        userErrors {\n          code\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"synchronous\": false,\n      \"productSet\": {\n        \"title\": \"Winter hat\",\n        \"productOptions\": [\n          {\n            \"name\": \"Color\",\n            \"position\": 1,\n            \"values\": [\n              {\n                \"name\": \"Grey\"\n              },\n              {\n                \"name\": \"Black\"\n              }\n            ]\n          }\n        ],\n        \"variants\": [\n          {\n            \"optionValues\": [\n              {\n                \"optionName\": \"Color\",\n                \"name\": \"Grey\"\n              }\n            ],\n            \"price\": 79.99\n          },\n          {\n            \"optionValues\": [\n              {\n                \"optionName\": \"Color\",\n                \"name\": \"Black\"\n              }\n            ],\n            \"price\": 69.99\n          }\n        ]\n      }\n    },\n  },\n});\n"}]}, {"name": "productUnpublish", "description": "Unpublishes a product. Use publishableUnpublish instead.", "arguments": [{"name": "input", "type": "ProductUnpublishInput!", "required": false, "description": "Specifies the product to unpublish and the channel to unpublish it from."}], "returns": [], "examples": []}, {"name": "productUpdate", "description": "Updates a product.\nFor versions 2024-01 and older:\nIf you update a product and only include some variants in the update,\nthen any variants not included will be deleted.\nTo safely manage variants without the risk of\ndeleting excluded variants, use\nproductVariantsBulkUpdate.\nIf you want to update a single variant, then use\nproductVariantUpdate.", "arguments": [{"name": "media", "type": "[CreateMediaInput!]", "required": false, "description": "List of new media to be added to the product."}, {"name": "product", "type": "ProductUpdateInput", "required": false, "description": "The updated properties for a product."}, {"name": "input", "type": "ProductInput", "required": false, "description": "The updated properties for a product. Deprecated as of 2024-10.\nUse product argument instead."}], "returns": [], "examples": [{"description": "Add new media to an existing product", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation UpdateProductWithNewMedia($input: ProductInput!, $media: [CreateMediaInput!]) {\n      productUpdate(input: $input, media: $media) {\n        product {\n          id\n          media(first: 10) {\n            nodes {\n              alt\n              mediaContentType\n              preview {\n                status\n              }\n            }\n          }\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"input\": {\n        \"id\": \"gid://shopify/Product/912855135\"\n      },\n      \"media\": [\n        {\n          \"originalSource\": \"https://cdn.shopify.com/shopifycloud/brochure/assets/sell/image/image-@artdirection-large-1ba8d5de56c361cec6bc487b747c8774b9ec8203f392a99f53c028df8d0fb3fc.png\",\n          \"alt\": \"Gray helmet for bikers\",\n          \"mediaContentType\": \"IMAGE\"\n        },\n        {\n          \"originalSource\": \"https://www.youtube.com/watch?v=4L8VbGRibj8&list=PLlMkWQ65HlcEoPyG9QayqEaAu0ftj0MMz\",\n          \"alt\": \"Testing helmet resistance against impacts\",\n          \"mediaContentType\": \"EXTERNAL_VIDEO\"\n        }\n      ]\n    },\n  },\n});\n"}, {"description": "Create a new metafield and update another on an existing product", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation updateProductMetafields($input: ProductInput!) {\n      productUpdate(input: $input) {\n        product {\n          id\n          metafields(first: 3) {\n            edges {\n              node {\n                id\n                namespace\n                key\n                value\n              }\n            }\n          }\n        }\n        userErrors {\n          message\n          field\n        }\n      }\n    }`,\n    \"variables\": {\n      \"input\": {\n        \"metafields\": [\n          {\n            \"namespace\": \"my_field\",\n            \"key\": \"liner_material\",\n            \"type\": \"single_line_text_field\",\n            \"value\": \"Synthetic Leather\"\n          },\n          {\n            \"id\": \"gid://shopify/Metafield/1069229063\",\n            \"value\": \"Rubber\"\n          }\n        ],\n        \"id\": \"gid://shopify/Product/108828309\"\n      }\n    },\n  },\n});\n"}, {"description": "Updates a product", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation ProductUpdate($input: ProductInput!) {\n      productUpdate(input: $input) {\n        product {\n          id\n          title\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"input\": {\n        \"id\": \"gid://shopify/Product/108828309\",\n        \"title\": \"Updated Product Title\"\n      }\n    },\n  },\n});\n"}, {"description": "productUpdate reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation UpdateProductWithNewMedia($input: ProductInput!, $media: [CreateMediaInput!]) {\n      productUpdate(input: $input, media: $media) {\n        product {\n          id\n          media(first: 10) {\n            nodes {\n              alt\n              mediaContentType\n              preview {\n                status\n              }\n            }\n          }\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"input\": {\n        \"id\": \"gid://shopify/Product/912855135\"\n      },\n      \"media\": [\n        {\n          \"originalSource\": \"https://cdn.shopify.com/shopifycloud/brochure/assets/sell/image/image-@artdirection-large-1ba8d5de56c361cec6bc487b747c8774b9ec8203f392a99f53c028df8d0fb3fc.png\",\n          \"alt\": \"Gray helmet for bikers\",\n          \"mediaContentType\": \"IMAGE\"\n        },\n        {\n          \"originalSource\": \"https://www.youtube.com/watch?v=4L8VbGRibj8&list=PLlMkWQ65HlcEoPyG9QayqEaAu0ftj0MMz\",\n          \"alt\": \"Testing helmet resistance against impacts\",\n          \"mediaContentType\": \"EXTERNAL_VIDEO\"\n        }\n      ]\n    },\n  },\n});\n"}]}, {"name": "productUpdateMedia", "description": "Updates media for a product. Use fileUpdate instead.", "arguments": [{"name": "media", "type": "[UpdateMediaInput!]!", "required": false, "description": "A list of media updates."}, {"name": "productId", "type": "ID!", "required": false, "description": "Specifies the product on which media will be updated."}], "returns": [], "examples": [{"description": "Modify an existing Product Image", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation ProductImageUpdate($id: ID!) {\n      productUpdateMedia(productId: $id, media: [{id: \"gid://shopify/MediaImage/853695510\", alt: \"Updated alt text.\"}]) {\n        media {\n          id\n          alt\n          status\n          ... on MediaImage {\n            image {\n              url\n            }\n          }\n        }\n        mediaUserErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/Product/108828309\"\n    },\n  },\n});\n"}, {"description": "Update new media on a non-existent product", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation productUpdateMedia($media: [UpdateMediaInput!]!, $productId: ID!) {\n      productUpdateMedia(media: $media, productId: $productId) {\n        product {\n          id\n          title\n        }\n        media {\n          alt\n        }\n        mediaUserErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"media\": [\n        {\n          \"alt\": \"Some alt text\",\n          \"id\": \"gid://shopify/Video/723685877\"\n        },\n        {\n          \"alt\": \"Some more alt text\",\n          \"id\": \"gid://shopify/MediaImage/853695510\"\n        }\n      ],\n      \"productId\": \"gid://shopify/Product/-1\"\n    },\n  },\n});\n"}, {"description": "Update non-existent media on a non-existent product", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation productUpdateMedia($media: [UpdateMediaInput!]!, $productId: ID!) {\n      productUpdateMedia(media: $media, productId: $productId) {\n        product {\n          id\n          title\n        }\n        media {\n          alt\n        }\n        mediaUserErrors {\n          field\n          message\n          code\n        }\n      }\n    }`,\n    \"variables\": {\n      \"media\": [\n        {\n          \"alt\": \"Some more alt text\",\n          \"id\": \"gid://shopify/MediaImage/-1\"\n        }\n      ],\n      \"productId\": \"gid://shopify/Product/-1\"\n    },\n  },\n});\n"}, {"description": "Update non-existent media on a valid product", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation productUpdateMedia($media: [UpdateMediaInput!]!, $productId: ID!) {\n      productUpdateMedia(media: $media, productId: $productId) {\n        product {\n          id\n          title\n        }\n        media {\n          alt\n        }\n        mediaUserErrors {\n          field\n          message\n          code\n        }\n      }\n    }`,\n    \"variables\": {\n      \"media\": [\n        {\n          \"alt\": \"Some more alt text\",\n          \"id\": \"gid://shopify/MediaImage/-1\"\n        }\n      ],\n      \"productId\": \"gid://shopify/Product/108828309\"\n    },\n  },\n});\n"}, {"description": "productUpdateMedia reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation ProductImageUpdate($id: ID!) {\n      productUpdateMedia(productId: $id, media: [{id: \"gid://shopify/MediaImage/853695510\", alt: \"Updated alt text.\"}]) {\n        media {\n          id\n          alt\n          status\n          ... on MediaImage {\n            image {\n              url\n            }\n          }\n        }\n        mediaUserErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/Product/108828309\"\n    },\n  },\n});\n"}]}, {"name": "productVariantAppendMedia", "description": "Appends media from a product to variants of the product.", "arguments": [{"name": "productId", "type": "ID!", "required": false, "description": "Specifies the product associated to the media."}, {"name": "variantMedia", "type": "[ProductVariantAppendMediaInput!]!", "required": false, "description": "A list of pairs of variants and media to be attached to the variants."}], "returns": [], "examples": [{"description": "productVariantAppendMedia reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation productVariantAppendMedia($productId: ID!, $variantMedia: [ProductVariantAppendMediaInput!]!) {\n      productVariantAppendMedia(productId: $productId, variantMedia: $variantMedia) {\n        product {\n          id\n        }\n      }\n    }`,\n    \"variables\": {\n      \"productId\": \"gid://shopify/Product/1072481072\",\n      \"variantMedia\": [\n        {\n          \"mediaIds\": [\n            \"gid://shopify/MediaImage/1072273216\"\n          ],\n          \"variantId\": \"gid://shopify/ProductVariant/1070325119\"\n        },\n        {\n          \"mediaIds\": [\n            \"gid://shopify/MediaImage/1072273217\"\n          ],\n          \"variantId\": \"gid://shopify/ProductVariant/1070325120\"\n        }\n      ]\n    },\n  },\n});\n"}]}, {"name": "productVariantDetachMedia", "description": "Detaches media from product variants.", "arguments": [{"name": "productId", "type": "ID!", "required": false, "description": "Specifies the product to which the variants and media are associated."}, {"name": "variantMedia", "type": "[ProductVariantDetachMediaInput!]!", "required": false, "description": "A list of pairs of variants and media to be deleted from the variants."}], "returns": [], "examples": [{"description": "productVariantDetachMedia reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation productVariantDetachMedia($productId: ID!, $variantMedia: [ProductVariantDetachMediaInput!]!) {\n      productVariantDetachMedia(productId: $productId, variantMedia: $variantMedia) {\n        product {\n          id\n        }\n      }\n    }`,\n    \"variables\": {\n      \"productId\": \"gid://shopify/Product/1072481079\",\n      \"variantMedia\": [\n        {\n          \"mediaIds\": [\n            \"gid://shopify/MediaImage/1072273220\"\n          ],\n          \"variantId\": \"gid://shopify/ProductVariant/1070325128\"\n        },\n        {\n          \"mediaIds\": [\n            \"gid://shopify/MediaImage/1072273221\"\n          ],\n          \"variantId\": \"gid://shopify/ProductVariant/1070325129\"\n        }\n      ]\n    },\n  },\n});\n"}]}, {"name": "productVariantJoinSellingPlanGroups", "description": "Adds multiple selling plan groups to a product variant.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of the product variant."}, {"name": "sellingPlanGroupIds", "type": "[ID!]!", "required": false, "description": "The IDs of the selling plan groups to add."}], "returns": [], "examples": []}, {"name": "productVariantLeaveSellingPlanGroups", "description": "Remove multiple groups from a product variant.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of the product variant."}, {"name": "sellingPlanGroupIds", "type": "[ID!]!", "required": false, "description": "The IDs of the selling plan groups to leave."}], "returns": [], "examples": []}, {"name": "productVariantRelationshipBulkUpdate", "description": "Creates new bundles, updates existing bundles, and removes bundle components for one or multiple bundles.", "arguments": [{"name": "input", "type": "[ProductVariantRelationshipUpdateInput!]!", "required": false, "description": "The input options for the product variant being updated."}], "returns": [], "examples": [{"description": "Create a bundle by adding components to a product variant", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation CreateBundle($input: [ProductVariantRelationshipUpdateInput!]!) {\n      productVariantRelationshipBulkUpdate(input: $input) {\n        parentProductVariants {\n          id\n          productVariantComponents(first: 10) {\n            nodes {\n              id\n              productVariant {\n                id\n                displayName\n              }\n            }\n          }\n        }\n        userErrors {\n          code\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"input\": [\n        {\n          \"parentProductVariantId\": \"gid://shopify/ProductVariant/799757249\",\n          \"productVariantRelationshipsToCreate\": [\n            {\n              \"id\": \"gid://shopify/ProductVariant/149896808\",\n              \"quantity\": 1\n            },\n            {\n              \"id\": \"gid://shopify/ProductVariant/709406719\",\n              \"quantity\": 1\n            }\n          ]\n        }\n      ]\n    },\n  },\n});\n"}, {"description": "Delete a product variant component", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation RemoveABundleComponent($input: [ProductVariantRelationshipUpdateInput!]!) {\n      productVariantRelationshipBulkUpdate(input: $input) {\n        parentProductVariants {\n          id\n          productVariantComponents(first: 10) {\n            nodes {\n              id\n              productVariant {\n                id\n                displayName\n              }\n            }\n          }\n        }\n        userErrors {\n          code\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"input\": [\n        {\n          \"parentProductVariantId\": \"gid://shopify/ProductVariant/799757249\",\n          \"productVariantRelationshipsToRemove\": [\n            \"gid://shopify/ProductVariant/149896808\"\n          ]\n        }\n      ]\n    },\n  },\n});\n"}, {"description": "Remove all product variant components of a bundle", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation RemoveAllBundleComponents($input: [ProductVariantRelationshipUpdateInput!]!) {\n      productVariantRelationshipBulkUpdate(input: $input) {\n        parentProductVariants {\n          id\n          productVariantComponents(first: 10) {\n            nodes {\n              id\n              productVariant {\n                id\n                displayName\n              }\n            }\n          }\n        }\n        userErrors {\n          code\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"input\": [\n        {\n          \"parentProductVariantId\": \"gid://shopify/ProductVariant/799757249\",\n          \"removeAllProductVariantRelationships\": true\n        }\n      ]\n    },\n  },\n});\n"}, {"description": "Update a product variant relationship", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation UpdateBundleComponent($input: [ProductVariantRelationshipUpdateInput!]!) {\n      productVariantRelationshipBulkUpdate(input: $input) {\n        parentProductVariants {\n          id\n          productVariantComponents(first: 10) {\n            nodes {\n              id\n              productVariant {\n                id\n                displayName\n              }\n            }\n          }\n        }\n        userErrors {\n          code\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"input\": [\n        {\n          \"parentProductVariantId\": \"gid://shopify/ProductVariant/799757249\",\n          \"productVariantRelationshipsToUpdate\": [\n            {\n              \"id\": \"gid://shopify/ProductVariant/149896808\",\n              \"quantity\": 33\n            }\n          ]\n        }\n      ]\n    },\n  },\n});\n"}, {"description": "productVariantRelationshipBulkUpdate reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation CreateBundle($input: [ProductVariantRelationshipUpdateInput!]!) {\n      productVariantRelationshipBulkUpdate(input: $input) {\n        parentProductVariants {\n          id\n          productVariantComponents(first: 10) {\n            nodes {\n              id\n              productVariant {\n                id\n                displayName\n              }\n            }\n          }\n        }\n        userErrors {\n          code\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"input\": [\n        {\n          \"parentProductVariantId\": \"gid://shopify/ProductVariant/799757249\",\n          \"productVariantRelationshipsToCreate\": [\n            {\n              \"id\": \"gid://shopify/ProductVariant/149896808\",\n              \"quantity\": 1\n            },\n            {\n              \"id\": \"gid://shopify/ProductVariant/709406719\",\n              \"quantity\": 1\n            }\n          ]\n        }\n      ]\n    },\n  },\n});\n"}]}, {"name": "productVariantsBulkCreate", "description": "Creates multiple variants in a single product. This mutation can be called directly or via the bulkOperation.", "arguments": [{"name": "media", "type": "[CreateMediaInput!]", "required": false, "description": "List of new media to be added to the product."}, {"name": "productId", "type": "ID!", "required": false, "description": "The ID of the product on which to create the variants."}, {"name": "strategy", "type": "ProductVariantsBulkCreateStrategy", "required": false, "description": "The strategy defines which behavior the mutation should observe, such as whether to keep or delete the standalone variant (when product has only a single or default variant) when creating new variants in bulk."}, {"name": "variants", "type": "[ProductVariantsBulkInput!]!", "required": false, "description": "An array of product variants to be created."}], "returns": [], "examples": [{"description": "Create a new Product Variant", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation ProductVariantsCreate($productId: ID!, $variants: [ProductVariantsBulkInput!]!) {\n      productVariantsBulkCreate(productId: $productId, variants: $variants) {\n        productVariants {\n          id\n          title\n          selectedOptions {\n            name\n            value\n          }\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"productId\": \"gid://shopify/Product/20995642\",\n      \"variants\": [\n        {\n          \"price\": 15.99,\n          \"compareAtPrice\": 19.99,\n          \"optionValues\": [\n            {\n              \"name\": \"Golden\",\n              \"optionId\": \"gid://shopify/ProductOption/328272167\"\n            }\n          ]\n        }\n      ]\n    },\n  },\n});\n"}, {"description": "Create product variants using existing and new option values", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation productVariantsBulkCreate($productId: ID!, $variants: [ProductVariantsBulkInput!]!) {\n      productVariantsBulkCreate(productId: $productId, variants: $variants) {\n        userErrors {\n          field\n          message\n        }\n        product {\n          id\n          options {\n            id\n            name\n            values\n            position\n            optionValues {\n              id\n              name\n              hasVariants\n            }\n          }\n        }\n        productVariants {\n          id\n          title\n          selectedOptions {\n            name\n            value\n          }\n        }\n      }\n    }`,\n    \"variables\": {\n      \"productId\": \"gid://shopify/Product/1072481066\",\n      \"variants\": [\n        {\n          \"optionValues\": [\n            {\n              \"name\": \"Red\",\n              \"optionName\": \"Color\"\n            },\n            {\n              \"name\": \"Brand new style\",\n              \"optionId\": \"gid://shopify/ProductOption/1064576530\"\n            },\n            {\n              \"name\": \"Silk\",\n              \"optionName\": \"Material\"\n            }\n          ],\n          \"price\": 22.0\n        },\n        {\n          \"optionValues\": [\n            {\n              \"name\": \"Brand new style\",\n              \"optionName\": \"Style\"\n            },\n            {\n              \"id\": \"gid://shopify/ProductOptionValue/1054672336\",\n              \"optionName\": \"Color\"\n            },\n            {\n              \"name\": \"Silk\",\n              \"optionName\": \"Material\"\n            }\n          ],\n          \"price\": 23.5\n        },\n        {\n          \"optionValues\": [\n            {\n              \"name\": \"Brand new style\",\n              \"optionId\": \"gid://shopify/ProductOption/1064576530\"\n            },\n            {\n              \"id\": \"gid://shopify/ProductOptionValue/1054672337\",\n              \"optionId\": \"gid://shopify/ProductOption/1064576529\"\n            },\n            {\n              \"id\": \"gid://shopify/ProductOptionValue/1054672339\",\n              \"optionId\": \"gid://shopify/ProductOption/1064576531\"\n            }\n          ],\n          \"price\": 29.5\n        }\n      ]\n    },\n  },\n});\n"}, {"description": "productVariantsBulkCreate reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation ProductVariantsCreate($productId: ID!, $variants: [ProductVariantsBulkInput!]!) {\n      productVariantsBulkCreate(productId: $productId, variants: $variants) {\n        productVariants {\n          id\n          title\n          selectedOptions {\n            name\n            value\n          }\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"productId\": \"gid://shopify/Product/20995642\",\n      \"variants\": [\n        {\n          \"price\": 15.99,\n          \"compareAtPrice\": 19.99,\n          \"optionValues\": [\n            {\n              \"name\": \"Golden\",\n              \"optionId\": \"gid://shopify/ProductOption/328272167\"\n            }\n          ]\n        }\n      ]\n    },\n  },\n});\n"}]}, {"name": "productVariantsBulkDelete", "description": "Deletes multiple variants in a single product. This mutation can be called directly or via the bulkOperation.", "arguments": [{"name": "productId", "type": "ID!", "required": false, "description": "The ID of the product with the variants to update."}, {"name": "variantsIds", "type": "[ID!]!", "required": false, "description": "An array of product variants IDs to delete."}], "returns": [], "examples": [{"description": "Bulk delete multiple product variants.", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation bulkDeleteProductVariants($productId: ID!, $variantsIds: [ID!]!) {\n      productVariantsBulkDelete(productId: $productId, variantsIds: $variantsIds) {\n        product {\n          id\n          title\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"productId\": \"gid://shopify/Product/20995642\",\n      \"variantsIds\": [\n        \"gid://shopify/ProductVariant/30322695\",\n        \"gid://shopify/ProductVariant/113711323\"\n      ]\n    },\n  },\n});\n"}, {"description": "Remove an existing Product Variant", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation ProductVariantsDelete($productId: ID!, $variantsIds: [ID!]!) {\n      productVariantsBulkDelete(productId: $productId, variantsIds: $variantsIds) {\n        product {\n          id\n          title\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"productId\": \"gid://shopify/Product/20995642\",\n      \"variantsIds\": [\n        \"gid://shopify/ProductVariant/30322695\",\n        \"gid://shopify/ProductVariant/113711323\"\n      ]\n    },\n  },\n});\n"}, {"description": "Returns an error if any of the product variants does not belong to the product.", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation bulkDeleteProductVariants($productId: ID!, $variantsIds: [ID!]!) {\n      productVariantsBulkDelete(productId: $productId, variantsIds: $variantsIds) {\n        product {\n          id\n          title\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"productId\": \"gid://shopify/Product/20995642\",\n      \"variantsIds\": [\n        \"gid://shopify/ProductVariant/30322695\",\n        \"gid://shopify/ProductVariant/113711323\"\n      ]\n    },\n  },\n});\n"}, {"description": "productVariantsBulkDelete reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation bulkDeleteProductVariants($productId: ID!, $variantsIds: [ID!]!) {\n      productVariantsBulkDelete(productId: $productId, variantsIds: $variantsIds) {\n        product {\n          id\n          title\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"productId\": \"gid://shopify/Product/20995642\",\n      \"variantsIds\": [\n        \"gid://shopify/ProductVariant/30322695\",\n        \"gid://shopify/ProductVariant/113711323\"\n      ]\n    },\n  },\n});\n"}]}, {"name": "productVariantsBulkReorder", "description": "Reorders multiple variants in a single product. This mutation can be called directly or via the bulkOperation.", "arguments": [{"name": "positions", "type": "[ProductVariantPositionInput!]!", "required": false, "description": "An array of variant positions."}, {"name": "productId", "type": "ID!", "required": false, "description": "The product ID of the variants to be reordered."}], "returns": [], "examples": []}, {"name": "productVariantsBulkUpdate", "description": "Updates multiple variants in a single product. This mutation can be called directly or via the bulkOperation.", "arguments": [{"name": "allowPartialUpdates", "type": "Boolean", "required": false, "description": "When partial updates are allowed, valid variant changes may be persisted even if some of\nthe variants updated have invalid data and cannot be persisted.\nWhen partial updates are not allowed, any error will prevent all variants from updating."}, {"name": "media", "type": "[CreateMediaInput!]", "required": false, "description": "List of new media to be added to the product."}, {"name": "productId", "type": "ID!", "required": false, "description": "The ID of the product associated with the variants to update."}, {"name": "variants", "type": "[ProductVariantsBulkInput!]!", "required": false, "description": "An array of product variants to update."}], "returns": [], "examples": [{"description": "Create and update metafields when updating product variants in bulk", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation productVariantsBulkUpdate($productId: ID!, $variants: [ProductVariantsBulkInput!]!) {\n      productVariantsBulkUpdate(productId: $productId, variants: $variants) {\n        product {\n          id\n        }\n        productVariants {\n          id\n          metafields(first: 2) {\n            edges {\n              node {\n                namespace\n                key\n                value\n              }\n            }\n          }\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"productId\": \"gid://shopify/Product/20995642\",\n      \"variants\": [\n        {\n          \"id\": \"gid://shopify/ProductVariant/1070325197\",\n          \"metafields\": [\n            {\n              \"id\": \"gid://shopify/Metafield/1069229095\",\n              \"value\": \"SYNTHETIC LEATHER\"\n            },\n            {\n              \"namespace\": \"my_fields\",\n              \"key\": \"sole_material\",\n              \"value\": \"RUBBER\",\n              \"type\": \"single_line_text_field\"\n            }\n          ]\n        },\n        {\n          \"id\": \"gid://shopify/ProductVariant/1070325198\",\n          \"metafields\": [\n            {\n              \"id\": \"gid://shopify/Metafield/1069229096\",\n              \"value\": \"SYNTHETIC LEATHER\"\n            },\n            {\n              \"namespace\": \"my_fields\",\n              \"key\": \"sole_material\",\n              \"value\": \"CREPE\",\n              \"type\": \"single_line_text_field\"\n            }\n          ]\n        }\n      ]\n    },\n  },\n});\n"}, {"description": "Modify an existing Product Variant", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation ProductVariantsUpdate($productId: ID!) {\n      productVariantsBulkUpdate(productId: $productId, variants: [{id: \"gid://shopify/ProductVariant/1\", barcode: \"12345\"}, {id: \"gid://shopify/ProductVariant/2\", barcode: \"67890\"}]) {\n        product {\n          id\n        }\n        productVariants {\n          id\n          metafields(first: 2) {\n            edges {\n              node {\n                namespace\n                key\n                value\n              }\n            }\n          }\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"productId\": \"gid://shopify/Product/20995642\",\n      \"variants\": [\n        {\n          \"id\": \"gid://shopify/ProductVariant/1\",\n          \"barcode\": \"12345\"\n        },\n        {\n          \"id\": \"gid://shopify/ProductVariant/2\",\n          \"barcode\": \"67890\"\n        }\n      ]\n    },\n  },\n});\n"}, {"description": "Update product variants with option values", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation UpdateProductVariantsOptionValuesInBulk($productId: ID!, $variants: [ProductVariantsBulkInput!]!) {\n      productVariantsBulkUpdate(productId: $productId, variants: $variants) {\n        product {\n          id\n          title\n          options {\n            id\n            position\n            name\n            values\n            optionValues {\n              id\n              name\n              hasVariants\n            }\n          }\n        }\n        productVariants {\n          id\n          title\n          selectedOptions {\n            name\n            value\n          }\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"productId\": \"gid://shopify/Product/1072481069\",\n      \"variants\": [\n        {\n          \"id\": \"gid://shopify/ProductVariant/1070325199\",\n          \"optionValues\": [\n            {\n              \"name\": \"Green\",\n              \"optionName\": \"Color\"\n            }\n          ]\n        },\n        {\n          \"id\": \"gid://shopify/ProductVariant/1070325200\",\n          \"optionValues\": [\n            {\n              \"name\": \"Large\",\n              \"optionId\": \"gid://shopify/ProductOption/1064576536\"\n            },\n            {\n              \"id\": \"gid://shopify/ProductOptionValue/1054672367\",\n              \"optionId\": \"gid://shopify/ProductOption/1064576537\"\n            }\n          ]\n        },\n        {\n          \"id\": \"gid://shopify/ProductVariant/1070325201\",\n          \"optionValues\": [\n            {\n              \"name\": \"Medium\",\n              \"optionName\": \"Size\"\n            },\n            {\n              \"id\": \"gid://shopify/ProductOptionValue/1054672367\",\n              \"optionName\": \"Color\"\n            }\n          ]\n        }\n      ]\n    },\n  },\n});\n"}, {"description": "productVariantsBulkUpdate reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation productVariantsBulkUpdate($productId: ID!, $variants: [ProductVariantsBulkInput!]!) {\n      productVariantsBulkUpdate(productId: $productId, variants: $variants) {\n        product {\n          id\n        }\n        productVariants {\n          id\n          metafields(first: 2) {\n            edges {\n              node {\n                namespace\n                key\n                value\n              }\n            }\n          }\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"productId\": \"gid://shopify/Product/20995642\",\n      \"variants\": [\n        {\n          \"id\": \"gid://shopify/ProductVariant/1070325197\",\n          \"metafields\": [\n            {\n              \"id\": \"gid://shopify/Metafield/1069229095\",\n              \"value\": \"SYNTHETIC LEATHER\"\n            },\n            {\n              \"namespace\": \"my_fields\",\n              \"key\": \"sole_material\",\n              \"value\": \"RUBBER\",\n              \"type\": \"single_line_text_field\"\n            }\n          ]\n        },\n        {\n          \"id\": \"gid://shopify/ProductVariant/1070325198\",\n          \"metafields\": [\n            {\n              \"id\": \"gid://shopify/Metafield/1069229096\",\n              \"value\": \"SYNTHETIC LEATHER\"\n            },\n            {\n              \"namespace\": \"my_fields\",\n              \"key\": \"sole_material\",\n              \"value\": \"CREPE\",\n              \"type\": \"single_line_text_field\"\n            }\n          ]\n        }\n      ]\n    },\n  },\n});\n"}]}, {"name": "quantityPricingByVariantUpdate", "description": "Updates quantity pricing on a price list. You can use the quantityPricingByVariantUpdate mutation to set fixed prices, quantity rules, and quantity price breaks. This mutation does not allow partial successes. If any of the requested resources fail to update, none of the requested resources will be updated. Delete operations are executed before create operations.", "arguments": [{"name": "input", "type": "QuantityPricingByVariantUpdateInput!", "required": false, "description": "The input data used to update the quantity pricing in the price list."}, {"name": "priceListId", "type": "ID!", "required": false, "description": "The ID of the price list for which quantity pricing will be updated."}], "returns": [], "examples": [{"description": "Configure quantity pricing for a price list", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation quantityPricingByVariantUpdate($priceListId: ID!, $input: QuantityPricingByVariantUpdateInput!, $companyLocationId: ID!) {\n      quantityPricingByVariantUpdate(priceListId: $priceListId, input: $input) {\n        productVariants {\n          id\n          contextualPricing(context: {companyLocationId: $companyLocationId}) {\n            quantityPriceBreaks(first: 1) {\n              nodes {\n                minimumQuantity\n                price {\n                  amount\n                  currencyCode\n                }\n              }\n            }\n            quantityRule {\n              minimum\n              maximum\n              increment\n            }\n          }\n        }\n        userErrors {\n          message\n          code\n          field\n        }\n      }\n    }`,\n    \"variables\": {\n      \"priceListId\": \"gid://shopify/PriceList/467640202\",\n      \"companyLocationId\": \"gid://shopify/CompanyLocation/441870438\",\n      \"input\": {\n        \"quantityPriceBreaksToAdd\": [\n          {\n            \"variantId\": \"gid://shopify/ProductVariant/113711323\",\n            \"price\": {\n              \"amount\": 35.0,\n              \"currencyCode\": \"USD\"\n            },\n            \"minimumQuantity\": 10\n          }\n        ],\n        \"quantityPriceBreaksToDelete\": [],\n        \"quantityRulesToAdd\": [\n          {\n            \"variantId\": \"gid://shopify/ProductVariant/113711323\",\n            \"minimum\": 10,\n            \"maximum\": 100,\n            \"increment\": 5\n          }\n        ],\n        \"quantityRulesToDeleteByVariantId\": [],\n        \"pricesToAdd\": [\n          {\n            \"price\": {\n              \"amount\": 40.0,\n              \"currencyCode\": \"USD\"\n            },\n            \"variantId\": \"gid://shopify/ProductVariant/113711323\"\n          }\n        ],\n        \"pricesToDeleteByVariantId\": []\n      }\n    },\n  },\n});\n"}, {"description": "Configuring invalid quantity pricing returns an error", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation quantityPricingByVariantUpdate($priceListId: ID!, $input: QuantityPricingByVariantUpdateInput!, $companyLocationId: ID!) {\n      quantityPricingByVariantUpdate(priceListId: $priceListId, input: $input) {\n        productVariants {\n          id\n          contextualPricing(context: {companyLocationId: $companyLocationId}) {\n            quantityPriceBreaks(first: 1) {\n              nodes {\n                minimumQuantity\n                price {\n                  amount\n                  currencyCode\n                }\n              }\n            }\n            quantityRule {\n              minimum\n              maximum\n              increment\n            }\n          }\n        }\n        userErrors {\n          message\n          code\n          field\n        }\n      }\n    }`,\n    \"variables\": {\n      \"priceListId\": \"gid://shopify/PriceList/467640202\",\n      \"companyLocationId\": \"gid://shopify/CompanyLocation/441870438\",\n      \"input\": {\n        \"quantityPriceBreaksToAdd\": [\n          {\n            \"variantId\": \"gid://shopify/ProductVariant/113711323\",\n            \"price\": {\n              \"amount\": 35.0,\n              \"currencyCode\": \"USD\"\n            },\n            \"minimumQuantity\": 5\n          }\n        ],\n        \"quantityPriceBreaksToDelete\": [],\n        \"quantityRulesToAdd\": [\n          {\n            \"variantId\": \"gid://shopify/ProductVariant/113711323\",\n            \"minimum\": 10,\n            \"maximum\": 100,\n            \"increment\": 5\n          }\n        ],\n        \"quantityRulesToDeleteByVariantId\": [],\n        \"pricesToAdd\": [\n          {\n            \"price\": {\n              \"amount\": 40.0,\n              \"currencyCode\": \"USD\"\n            },\n            \"variantId\": \"gid://shopify/ProductVariant/113711323\"\n          }\n        ],\n        \"pricesToDeleteByVariantId\": []\n      }\n    },\n  },\n});\n"}, {"description": "quantityPricingByVariantUpdate reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation quantityPricingByVariantUpdate($priceListId: ID!, $input: QuantityPricingByVariantUpdateInput!, $companyLocationId: ID!) {\n      quantityPricingByVariantUpdate(priceListId: $priceListId, input: $input) {\n        productVariants {\n          id\n          contextualPricing(context: {companyLocationId: $companyLocationId}) {\n            quantityPriceBreaks(first: 1) {\n              nodes {\n                minimumQuantity\n                price {\n                  amount\n                  currencyCode\n                }\n              }\n            }\n            quantityRule {\n              minimum\n              maximum\n              increment\n            }\n          }\n        }\n        userErrors {\n          message\n          code\n          field\n        }\n      }\n    }`,\n    \"variables\": {\n      \"priceListId\": \"gid://shopify/PriceList/467640202\",\n      \"companyLocationId\": \"gid://shopify/CompanyLocation/441870438\",\n      \"input\": {\n        \"quantityPriceBreaksToAdd\": [\n          {\n            \"variantId\": \"gid://shopify/ProductVariant/113711323\",\n            \"price\": {\n              \"amount\": 35.0,\n              \"currencyCode\": \"USD\"\n            },\n            \"minimumQuantity\": 10\n          }\n        ],\n        \"quantityPriceBreaksToDelete\": [],\n        \"quantityRulesToAdd\": [\n          {\n            \"variantId\": \"gid://shopify/ProductVariant/113711323\",\n            \"minimum\": 10,\n            \"maximum\": 100,\n            \"increment\": 5\n          }\n        ],\n        \"quantityRulesToDeleteByVariantId\": [],\n        \"pricesToAdd\": [\n          {\n            \"price\": {\n              \"amount\": 40.0,\n              \"currencyCode\": \"USD\"\n            },\n            \"variantId\": \"gid://shopify/ProductVariant/113711323\"\n          }\n        ],\n        \"pricesToDeleteByVariantId\": []\n      }\n    },\n  },\n});\n"}]}, {"name": "quantityRulesAdd", "description": "Creates or updates existing quantity rules on a price list.\nYou can use the quantityRulesAdd mutation to set order level minimums, maximumums and increments for specific product variants.", "arguments": [{"name": "priceListId", "type": "ID!", "required": false, "description": "The ID of the price list to which the quantity rules will be added or updated."}, {"name": "quantityRules", "type": "[QuantityRuleInput!]!", "required": false, "description": "The list of quantity rules to add or update in the price list."}], "returns": [], "examples": [{"description": "Add multiple quantity rules to a price list", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation quantityRulesAdd($priceListId: ID!, $quantityRules: [QuantityRuleInput!]!) {\n      quantityRulesAdd(priceListId: $priceListId, quantityRules: $quantityRules) {\n        userErrors {\n          field\n          code\n          message\n        }\n        quantityRules {\n          minimum\n          maximum\n          increment\n          isDefault\n          originType\n          productVariant {\n            id\n          }\n        }\n      }\n    }`,\n    \"variables\": {\n      \"priceListId\": \"gid://shopify/PriceList/155157792\",\n      \"quantityRules\": [\n        {\n          \"variantId\": \"gid://shopify/ProductVariant/138327650\",\n          \"minimum\": 1,\n          \"maximum\": null,\n          \"increment\": 1\n        },\n        {\n          \"variantId\": \"gid://shopify/ProductVariant/113711323\",\n          \"minimum\": 5,\n          \"maximum\": 25,\n          \"increment\": 5\n        }\n      ]\n    },\n  },\n});\n"}, {"description": "Adding invalid quantity rules returns an error", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation quantityRulesAdd($priceListId: ID!, $quantityRules: [QuantityRuleInput!]!) {\n      quantityRulesAdd(priceListId: $priceListId, quantityRules: $quantityRules) {\n        userErrors {\n          field\n          code\n          message\n        }\n        quantityRules {\n          minimum\n          maximum\n          increment\n          isDefault\n          originType\n          productVariant {\n            id\n          }\n        }\n      }\n    }`,\n    \"variables\": {\n      \"priceListId\": \"gid://shopify/PriceList/155157792\",\n      \"quantityRules\": [\n        {\n          \"variantId\": \"gid://shopify/ProductVariant/138327650\",\n          \"minimum\": 1,\n          \"maximum\": 5,\n          \"increment\": 2\n        },\n        {\n          \"variantId\": \"gid://shopify/ProductVariant/113711323\",\n          \"minimum\": 10,\n          \"maximum\": 5,\n          \"increment\": 5\n        }\n      ]\n    },\n  },\n});\n"}, {"description": "quantityRulesAdd reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation quantityRulesAdd($priceListId: ID!, $quantityRules: [QuantityRuleInput!]!) {\n      quantityRulesAdd(priceListId: $priceListId, quantityRules: $quantityRules) {\n        userErrors {\n          field\n          code\n          message\n        }\n        quantityRules {\n          minimum\n          maximum\n          increment\n          isDefault\n          originType\n          productVariant {\n            id\n          }\n        }\n      }\n    }`,\n    \"variables\": {\n      \"priceListId\": \"gid://shopify/PriceList/155157792\",\n      \"quantityRules\": [\n        {\n          \"variantId\": \"gid://shopify/ProductVariant/138327650\",\n          \"minimum\": 1,\n          \"maximum\": null,\n          \"increment\": 1\n        },\n        {\n          \"variantId\": \"gid://shopify/ProductVariant/113711323\",\n          \"minimum\": 5,\n          \"maximum\": 25,\n          \"increment\": 5\n        }\n      ]\n    },\n  },\n});\n"}]}, {"name": "quantityRulesDelete", "description": "Deletes specific quantity rules from a price list using a product variant ID.\nYou can use the quantityRulesDelete mutation to delete a set of quantity rules from a price list.", "arguments": [{"name": "priceListId", "type": "ID!", "required": false, "description": "The ID of the price list from which the quantity rules will be deleted."}, {"name": "variantIds", "type": "[ID!]!", "required": false, "description": "A list of product variant IDs whose quantity rules will be removed from the price list."}], "returns": [], "examples": [{"description": "Delete multiple quantity rules from a price list", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation quantityRulesDelete($priceListId: ID!, $variantIds: [ID!]!) {\n      quantityRulesDelete(priceListId: $priceListId, variantIds: $variantIds) {\n        deletedQuantityRulesVariantIds\n        userErrors {\n          field\n          code\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"priceListId\": \"gid://shopify/PriceList/225060712\",\n      \"variantIds\": [\n        \"gid://shopify/ProductVariant/43729076\",\n        \"gid://shopify/ProductVariant/138327650\"\n      ]\n    },\n  },\n});\n"}, {"description": "quantityRulesDelete reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation quantityRulesDelete($priceListId: ID!, $variantIds: [ID!]!) {\n      quantityRulesDelete(priceListId: $priceListId, variantIds: $variantIds) {\n        deletedQuantityRulesVariantIds\n        userErrors {\n          field\n          code\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"priceListId\": \"gid://shopify/PriceList/225060712\",\n      \"variantIds\": [\n        \"gid://shopify/ProductVariant/43729076\",\n        \"gid://shopify/ProductVariant/138327650\"\n      ]\n    },\n  },\n});\n"}]}, {"name": "sellingPlanGroupAddProducts", "description": "Adds multiple products to a selling plan group.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of the selling plan group."}, {"name": "productIds", "type": "[ID!]!", "required": false, "description": "The IDs of the products to add."}], "returns": [], "examples": []}, {"name": "sellingPlanGroupAddProductVariants", "description": "Adds multiple product variants to a selling plan group.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of the selling plan group."}, {"name": "productVariantIds", "type": "[ID!]!", "required": false, "description": "The IDs of the product variants to add."}], "returns": [], "examples": []}, {"name": "sellingPlanGroupCreate", "description": "Creates a Selling Plan Group.", "arguments": [{"name": "input", "type": "SellingPlanGroupInput!", "required": false, "description": "The properties of the new Selling Plan Group."}, {"name": "resources", "type": "SellingPlanGroupResourceInput", "required": false, "description": "The resources this Selling Plan Group should be applied to."}], "returns": [], "examples": [{"description": "Create a TBYB selling plan group", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation createSellingPlanGroup($input: SellingPlanGroupInput!, $resources: SellingPlanGroupResourceInput) {\n      sellingPlanGroupCreate(input: $input, resources: $resources) {\n        sellingPlanGroup {\n          id\n          sellingPlans(first: 1) {\n            edges {\n              node {\n                id\n              }\n            }\n          }\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"input\": {\n        \"name\": \"TBYB\",\n        \"merchantCode\": \"tbyb\",\n        \"options\": [\n          \"Try before you buy\"\n        ],\n        \"sellingPlansToCreate\": [\n          {\n            \"name\": \"TBYB\",\n            \"options\": \"Try free for 14 days\",\n            \"category\": \"TRY_BEFORE_YOU_BUY\",\n            \"billingPolicy\": {\n              \"fixed\": {\n                \"checkoutCharge\": {\n                  \"type\": \"PRICE\",\n                  \"value\": {\n                    \"fixedValue\": 0\n                  }\n                },\n                \"remainingBalanceChargeTrigger\": \"TIME_AFTER_CHECKOUT\",\n                \"remainingBalanceChargeTimeAfterCheckout\": \"P14D\"\n              }\n            },\n            \"inventoryPolicy\": {\n              \"reserve\": \"ON_SALE\"\n            },\n            \"deliveryPolicy\": {\n              \"fixed\": {\n                \"fulfillmentTrigger\": \"ASAP\"\n              }\n            }\n          }\n        ]\n      },\n      \"resources\": {\n        \"productIds\": [\n          \"gid://shopify/Product/121709582\"\n        ],\n        \"productVariantIds\": []\n      }\n    },\n  },\n});\n"}, {"description": "Create a prepaid selling plan group with anchor dates", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation createSellingPlanGroup($input: SellingPlanGroupInput!, $resources: SellingPlanGroupResourceInput) {\n      sellingPlanGroupCreate(input: $input, resources: $resources) {\n        sellingPlanGroup {\n          id\n          sellingPlans(first: 1) {\n            edges {\n              node {\n                id\n              }\n            }\n          }\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"input\": {\n        \"name\": \"Delivered every week and billed every three weeks\",\n        \"merchantCode\": \"prepaid-weekly\",\n        \"options\": [\n          \"1 week\"\n        ],\n        \"sellingPlansToCreate\": [\n          {\n            \"name\": \"Delivered every week\",\n            \"options\": \"1 Week(s)\",\n            \"category\": \"SUBSCRIPTION\",\n            \"billingPolicy\": {\n              \"recurring\": {\n                \"interval\": \"WEEK\",\n                \"intervalCount\": 3,\n                \"anchors\": [\n                  {\n                    \"cutoffDay\": 2,\n                    \"day\": 4,\n                    \"type\": \"WEEKDAY\"\n                  }\n                ]\n              }\n            },\n            \"pricingPolicies\": [\n              {\n                \"fixed\": {\n                  \"adjustmentType\": \"PERCENTAGE\",\n                  \"adjustmentValue\": {\n                    \"percentage\": 25.0\n                  }\n                }\n              }\n            ],\n            \"deliveryPolicy\": {\n              \"recurring\": {\n                \"interval\": \"WEEK\",\n                \"intervalCount\": 1,\n                \"anchors\": [\n                  {\n                    \"cutoffDay\": 2,\n                    \"day\": 4,\n                    \"type\": \"WEEKDAY\"\n                  }\n                ]\n              }\n            }\n          }\n        ]\n      },\n      \"resources\": {\n        \"productIds\": [\n          \"gid://shopify/Product/121709582\"\n        ],\n        \"productVariantIds\": []\n      }\n    },\n  },\n});\n"}, {"description": "Create a selling plan group with metafields", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation createSellingPlanGroup($input: SellingPlanGroupInput!, $resources: SellingPlanGroupResourceInput) {\n      sellingPlanGroupCreate(input: $input, resources: $resources) {\n        sellingPlanGroup {\n          id\n          sellingPlans(first: 1) {\n            edges {\n              node {\n                id\n                metafields(first: 1) {\n                  edges {\n                    node {\n                      id\n                      namespace\n                      key\n                      value\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"input\": {\n        \"name\": \"Subscribe and save\",\n        \"merchantCode\": \"subscribe-and-save\",\n        \"appId\": \"groovy\",\n        \"options\": [\n          \"Delivery every\",\n          \"Delivery interval\",\n          \"Fun every\"\n        ],\n        \"position\": 1,\n        \"description\": \"Subscribe and save group\",\n        \"sellingPlansToCreate\": [\n          {\n            \"name\": \"Pay every month deliver every month\",\n            \"options\": [\n              \"1\",\n              \"month\",\n              \"day\"\n            ],\n            \"metafields\": [\n              {\n                \"namespace\": \"for_testing\",\n                \"key\": \"my_key\",\n                \"value\": \"selling plan metafield\",\n                \"type\": \"single_line_text_field\"\n              }\n            ],\n            \"position\": 1,\n            \"category\": \"SUBSCRIPTION\",\n            \"billingPolicy\": {\n              \"recurring\": {\n                \"interval\": \"MONTH\",\n                \"intervalCount\": 1,\n                \"anchors\": [\n                  {\n                    \"type\": \"MONTHDAY\",\n                    \"day\": 26\n                  }\n                ]\n              }\n            },\n            \"deliveryPolicy\": {\n              \"recurring\": {\n                \"interval\": \"MONTH\",\n                \"intervalCount\": 1,\n                \"anchors\": [\n                  {\n                    \"type\": \"MONTHDAY\",\n                    \"day\": 26\n                  }\n                ],\n                \"cutoff\": 5,\n                \"intent\": \"FULFILLMENT_BEGIN\",\n                \"preAnchorBehavior\": \"ASAP\"\n              }\n            },\n            \"inventoryPolicy\": {\n              \"reserve\": \"ON_SALE\"\n            },\n            \"pricingPolicies\": [\n              {\n                \"fixed\": {\n                  \"adjustmentType\": \"PERCENTAGE\",\n                  \"adjustmentValue\": {\n                    \"percentage\": 25.0\n                  }\n                }\n              },\n              {\n                \"recurring\": {\n                  \"afterCycle\": 3,\n                  \"adjustmentType\": \"PERCENTAGE\",\n                  \"adjustmentValue\": {\n                    \"percentage\": 26.0\n                  }\n                }\n              }\n            ]\n          }\n        ]\n      },\n      \"resources\": {}\n    },\n  },\n});\n"}, {"description": "sellingPlanGroupCreate reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation createSellingPlanGroup($input: SellingPlanGroupInput!, $resources: SellingPlanGroupResourceInput) {\n      sellingPlanGroupCreate(input: $input, resources: $resources) {\n        sellingPlanGroup {\n          id\n          sellingPlans(first: 1) {\n            edges {\n              node {\n                id\n              }\n            }\n          }\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"input\": {\n        \"name\": \"TBYB\",\n        \"merchantCode\": \"tbyb\",\n        \"options\": [\n          \"Try before you buy\"\n        ],\n        \"sellingPlansToCreate\": [\n          {\n            \"name\": \"TBYB\",\n            \"options\": \"Try free for 14 days\",\n            \"category\": \"TRY_BEFORE_YOU_BUY\",\n            \"billingPolicy\": {\n              \"fixed\": {\n                \"checkoutCharge\": {\n                  \"type\": \"PRICE\",\n                  \"value\": {\n                    \"fixedValue\": 0\n                  }\n                },\n                \"remainingBalanceChargeTrigger\": \"TIME_AFTER_CHECKOUT\",\n                \"remainingBalanceChargeTimeAfterCheckout\": \"P14D\"\n              }\n            },\n            \"inventoryPolicy\": {\n              \"reserve\": \"ON_SALE\"\n            },\n            \"deliveryPolicy\": {\n              \"fixed\": {\n                \"fulfillmentTrigger\": \"ASAP\"\n              }\n            }\n          }\n        ]\n      },\n      \"resources\": {\n        \"productIds\": [\n          \"gid://shopify/Product/121709582\"\n        ],\n        \"productVariantIds\": []\n      }\n    },\n  },\n});\n"}]}, {"name": "sellingPlanGroupDelete", "description": "Delete a Selling Plan Group. This does not affect subscription contracts.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The id of the selling plan group to delete."}], "returns": [], "examples": []}, {"name": "sellingPlanGroupRemoveProducts", "description": "Removes multiple products from a selling plan group.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of the selling plan group."}, {"name": "productIds", "type": "[ID!]!", "required": false, "description": "The IDs of the products to remove."}], "returns": [], "examples": []}, {"name": "sellingPlanGroupRemoveProductVariants", "description": "Removes multiple product variants from a selling plan group.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of the selling plan group."}, {"name": "productVariantIds", "type": "[ID!]!", "required": false, "description": "The IDs of the product variants to remove."}], "returns": [], "examples": []}, {"name": "sellingPlanGroupUpdate", "description": "Update a Selling Plan Group.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The Selling Plan Group to update."}, {"name": "input", "type": "SellingPlanGroupInput!", "required": false, "description": "The properties of the Selling Plan Group to update."}], "returns": [], "examples": [{"description": "Update a selling plan group and its metafields", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation sellingPlanGroupUpdate($id: ID!, $input: SellingPlanGroupInput!) {\n      sellingPlanGroupUpdate(id: $id, input: $input) {\n        sellingPlanGroup {\n          id\n          sellingPlans(first: 1) {\n            edges {\n              node {\n                id\n                metafields(first: 1) {\n                  edges {\n                    node {\n                      id\n                      namespace\n                      key\n                      value\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/SellingPlanGroup/964742479\",\n      \"input\": {\n        \"sellingPlansToUpdate\": [\n          {\n            \"id\": \"gid://shopify/SellingPlan/563068713\",\n            \"metafields\": [\n              {\n                \"value\": \"waterproof\",\n                \"type\": \"single_line_text_field\",\n                \"key\": \"test_key\",\n                \"namespace\": \"example-selling-plan\"\n              }\n            ]\n          }\n        ]\n      }\n    },\n  },\n});\n"}, {"description": "sellingPlanGroupUpdate reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation sellingPlanGroupUpdate($id: ID!, $input: SellingPlanGroupInput!) {\n      sellingPlanGroupUpdate(id: $id, input: $input) {\n        sellingPlanGroup {\n          id\n          sellingPlans(first: 1) {\n            edges {\n              node {\n                id\n                metafields(first: 1) {\n                  edges {\n                    node {\n                      id\n                      namespace\n                      key\n                      value\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/SellingPlanGroup/964742479\",\n      \"input\": {\n        \"sellingPlansToUpdate\": [\n          {\n            \"id\": \"gid://shopify/SellingPlan/563068713\",\n            \"metafields\": [\n              {\n                \"value\": \"waterproof\",\n                \"type\": \"single_line_text_field\",\n                \"key\": \"test_key\",\n                \"namespace\": \"example-selling-plan\"\n              }\n            ]\n          }\n        ]\n      }\n    },\n  },\n});\n"}]}, {"name": "stagedUploadsCreate", "description": "Creates staged upload targets for each input. This is the first step in the upload process.\nThe returned staged upload targets' URL and parameter fields can be used to send a request\nto upload the file described in the corresponding input.\nFor more information on the upload process, refer to\nUpload media to Shopify.", "arguments": [{"name": "input", "type": "[StagedUploadInput!]!", "required": false, "description": "The information required to generate staged upload targets."}], "returns": [], "examples": [{"description": "Create staged upload targets", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation stagedUploadsCreate($input: [StagedUploadInput!]!) {\n      stagedUploadsCreate(input: $input) {\n        stagedTargets {\n          url\n          resourceUrl\n          parameters {\n            name\n            value\n          }\n        }\n      }\n    }`,\n    \"variables\": {\n      \"input\": [\n        {\n          \"filename\": \"image1.png\",\n          \"mimeType\": \"image/png\",\n          \"httpMethod\": \"POST\",\n          \"resource\": \"IMAGE\"\n        },\n        {\n          \"filename\": \"video.mp4\",\n          \"mimeType\": \"video/mp4\",\n          \"fileSize\": \"1234\",\n          \"resource\": \"VIDEO\"\n        },\n        {\n          \"filename\": \"3d_model.glb\",\n          \"mimeType\": \"model/gltf-binary\",\n          \"resource\": \"MODEL_3D\",\n          \"fileSize\": \"456\"\n        }\n      ]\n    },\n  },\n});\n"}, {"description": "stagedUploadsCreate reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation stagedUploadsCreate($input: [StagedUploadInput!]!) {\n      stagedUploadsCreate(input: $input) {\n        stagedTargets {\n          url\n          resourceUrl\n          parameters {\n            name\n            value\n          }\n        }\n      }\n    }`,\n    \"variables\": {\n      \"input\": [\n        {\n          \"filename\": \"image1.png\",\n          \"mimeType\": \"image/png\",\n          \"httpMethod\": \"POST\",\n          \"resource\": \"IMAGE\"\n        },\n        {\n          \"filename\": \"video.mp4\",\n          \"mimeType\": \"video/mp4\",\n          \"fileSize\": \"1234\",\n          \"resource\": \"VIDEO\"\n        },\n        {\n          \"filename\": \"3d_model.glb\",\n          \"mimeType\": \"model/gltf-binary\",\n          \"resource\": \"MODEL_3D\",\n          \"fileSize\": \"456\"\n        }\n      ]\n    },\n  },\n});\n"}]}], "objects": [{"name": "AddAllProductsOperation", "description": "Represents an operation publishing all products to a publication.", "fields_and_connections": [{"name": "id", "type": "Node", "description": "A globally-unique ID.", "not_nullable": false}, {"name": "id", "type": "ResourceOperation", "description": "A globally-unique ID.", "not_nullable": false}], "examples": []}, {"name": "AppCatalog", "description": "A catalog that defines the publication associated with an app.", "fields_and_connections": [{"name": "apps", "type": "Catalog", "description": "The apps associated with the catalog.", "not_nullable": false}, {"name": "apps", "type": "Node", "description": "The apps associated with the catalog.", "not_nullable": false}], "examples": []}, {"name": "BundlesFeature", "description": "Represents the Bundles feature configuration for the shop.", "fields_and_connections": [{"name": "eligibleForBundles", "type": "Boolean!", "description": "Whether a shop is configured properly to sell bundles.", "not_nullable": true}, {"name": "ineligibilityReason", "type": "String", "description": "The reason why a shop is not eligible for bundles.", "not_nullable": false}, {"name": "sellsBundles", "type": "Boolean!", "description": "Whether a shop has any fixed bundle products or has a cartTransform function installed.", "not_nullable": true}], "examples": []}, {"name": "CatalogCsvOperation", "description": "A catalog csv operation represents a CSV file import.", "fields_and_connections": [{"name": "id", "type": "Node", "description": "A globally-unique ID.", "not_nullable": false}, {"name": "id", "type": "ResourceOperation", "description": "A globally-unique ID.", "not_nullable": false}], "examples": []}, {"name": "Channel", "description": "A channel represents an app where you sell a group of products and collections.\nA channel can be a platform or marketplace such as Facebook or Pinterest, an online store, or POS.", "fields_and_connections": [{"name": "app", "type": "channel", "description": "Lookup a channel by ID. Use publication instead.", "not_nullable": false}, {"name": "app", "type": "channels", "description": "List of the active sales channels. Use publications instead.", "not_nullable": false}, {"name": "app", "type": "Node", "description": "The underlying app used by the channel.", "not_nullable": false}], "examples": []}, {"name": "Collection", "description": "Represents a group of products that can be displayed in online stores and other sales channels in categories, which makes it easy for customers to find them. For example, an athletics store might create different collections for running attire, shoes, and accessories.\nCollections can be defined by conditions, such as whether they match certain product tags. These are called smart or automated collections.\nCollections can also be created for a custom group of products. These are called custom or manual collections.", "fields_and_connections": [{"name": "availablePublicationsCount", "type": "collection", "description": "Returns a Collection resource by ID.", "not_nullable": false}, {"name": "availablePublicationsCount", "type": "collectionByIdentifier", "description": "Return a collection by an identifier.", "not_nullable": false}, {"name": "availablePublicationsCount", "type": "collections", "description": "Returns a list of collections.", "not_nullable": false}, {"name": "availablePublicationsCount", "type": "collectionByHandle", "description": "Return a collection by its handle. Use collectionByIdentifier instead.", "not_nullable": false}, {"name": "availablePublicationsCount", "type": "collectionAddProducts", "description": "Adds products to a collection.", "not_nullable": false}, {"name": "availablePublicationsCount", "type": "collectionCreate", "description": "Creates a collection.", "not_nullable": false}, {"name": "availablePublicationsCount", "type": "collectionUpdate", "description": "Updates a collection.", "not_nullable": false}, {"name": "availablePublicationsCount", "type": "collectionPublish", "description": "Publishes a collection to a channel. Use publishablePublish instead.", "not_nullable": false}, {"name": "availablePublicationsCount", "type": "collectionUnpublish", "description": "Unpublishes a collection. Use publishableUnpublish instead.", "not_nullable": false}, {"name": "availablePublicationsCount", "type": "HasEvents", "description": "The number of\npublications\nthat a resource is published to, without\nfeedback errors.", "not_nullable": false}, {"name": "availablePublicationsCount", "type": "HasMetafieldDefinitions", "description": "The number of\npublications\nthat a resource is published to, without\nfeedback errors.", "not_nullable": false}, {"name": "availablePublicationsCount", "type": "HasMetafields", "description": "The number of\npublications\nthat a resource is published to, without\nfeedback errors.", "not_nullable": false}, {"name": "availablePublicationsCount", "type": "HasPublishedTranslations", "description": "The number of\npublications\nthat a resource is published to, without\nfeedback errors.", "not_nullable": false}, {"name": "availablePublicationsCount", "type": "Node", "description": "The number of\npublications\nthat a resource is published to, without\nfeedback errors.", "not_nullable": false}, {"name": "availablePublicationsCount", "type": "Publishable", "description": "The number of\npublications\nthat a resource is published to, without\nfeedback errors.", "not_nullable": false}], "examples": []}, {"name": "CollectionPublication", "description": "Represents the publications where a collection is published.", "fields_and_connections": [{"name": "collection", "type": "collectionPublish", "description": "Publishes a collection to a channel. Use publishablePublish instead.", "not_nullable": false}], "examples": []}, {"name": "CollectionRule", "description": "Represents at rule that's used to assign products to a collection.", "fields_and_connections": [{"name": "column", "type": "CollectionRuleColumn!", "description": "The attribute that the rule focuses on. For example, title or product_type.", "not_nullable": true}, {"name": "condition", "type": "String!", "description": "The value that the operator is applied to. For example, Hats.", "not_nullable": true}, {"name": "conditionObject", "type": "CollectionRuleConditionObject", "description": "The value that the operator is applied to.", "not_nullable": false}, {"name": "relation", "type": "CollectionRuleRelation!", "description": "The type of operator that the rule is based on. For example, equals, contains, or not_equals.", "not_nullable": true}], "examples": []}, {"name": "CollectionRuleCategoryCondition", "description": "Specifies the taxonomy category to used for the condition.", "fields_and_connections": [{"name": "value", "type": "TaxonomyCategory!", "description": "The taxonomy category used as condition.", "not_nullable": true}], "examples": []}, {"name": "CollectionRuleConditions", "description": "This object defines all columns and allowed relations that can be used in rules for smart collections to automatically include the matching products.", "fields_and_connections": [{"name": "allowedRelations", "type": "collectionRulesConditions", "description": "Lists all rules that can be used to create smart collections.", "not_nullable": false}], "examples": []}, {"name": "CollectionRuleMetafieldCondition", "description": "Identifies a metafield definition used as a rule for the smart collection.", "fields_and_connections": [{"name": "metafieldDefinition", "type": "MetafieldDefinition!", "description": "The metafield definition associated with the condition.", "not_nullable": true}], "examples": []}, {"name": "CollectionRuleProductCategoryCondition", "description": "Specifies the condition for a Product Category field.", "fields_and_connections": [{"name": "value", "type": "ProductTaxonomyNode!", "description": "The value of the condition.", "not_nullable": true}], "examples": []}, {"name": "CollectionRuleSet", "description": "The set of rules that are used to determine which products are included in the collection.", "fields_and_connections": [{"name": "appliedDisjunctively", "type": "Boolean!", "description": "Whether products must match any or all of the rules to be included in the collection.\nIf true, then products must match at least one of the rules to be included in the collection.\nIf false, then products must match all of the rules to be included in the collection.", "not_nullable": true}, {"name": "rules", "type": "[CollectionRule!]!", "description": "The rules used to assign products to the collection.", "not_nullable": true}], "examples": []}, {"name": "CollectionRuleTextCondition", "description": "Specifies the condition for a text field.", "fields_and_connections": [{"name": "value", "type": "String!", "description": "The value of the condition.", "not_nullable": true}], "examples": []}, {"name": "CombinedListing", "description": "A combined listing of products.", "fields_and_connections": [{"name": "combinedListingChildren", "type": "CombinedListingChildConnection!", "description": "A list of child products in the combined listing.", "not_nullable": true}, {"name": "parentProduct", "type": "Product!", "description": "The parent product.", "not_nullable": true}], "examples": []}, {"name": "CombinedListingChild", "description": "A child of a combined listing.", "fields_and_connections": [{"name": "parentVariant", "type": "ProductVariant!", "description": "The parent variant.", "not_nullable": true}, {"name": "product", "type": "Product!", "description": "The child product.", "not_nullable": true}], "examples": []}, {"name": "CompanyLocationCatalog", "description": "A list of products with publishing and pricing information associated with company locations.", "fields_and_connections": [{"name": "companyLocations", "type": "Catalog", "description": "The company locations associated with the catalog.", "not_nullable": false}, {"name": "companyLocations", "type": "Node", "description": "The company locations associated with the catalog.", "not_nullable": false}], "examples": []}, {"name": "ExternalVideo", "description": "Represents a video hosted outside of Shopify.", "fields_and_connections": [{"name": "alt", "type": "File", "description": "A word or phrase to describe the contents or the function of a file.", "not_nullable": false}, {"name": "alt", "type": "Media", "description": "A word or phrase to describe the contents or the function of a file.", "not_nullable": false}, {"name": "alt", "type": "Node", "description": "A word or phrase to describe the contents or the function of a file.", "not_nullable": false}], "examples": []}, {"name": "FileError", "description": "A file error. This typically occurs when there is an issue with the file itself causing it to fail validation.\nCheck the file before attempting to upload again.", "fields_and_connections": [{"name": "code", "type": "FileErrorCode!", "description": "Code representing the type of error.", "not_nullable": true}, {"name": "details", "type": "String", "description": "Additional details regarding the error.", "not_nullable": false}, {"name": "message", "type": "String!", "description": "Translated error message.", "not_nullable": true}], "examples": []}, {"name": "GenericFile", "description": "Represents any file other than HTML.", "fields_and_connections": [{"name": "alt", "type": "File", "description": "A word or phrase to describe the contents or the function of a file.", "not_nullable": false}, {"name": "alt", "type": "Node", "description": "A word or phrase to describe the contents or the function of a file.", "not_nullable": false}], "examples": []}, {"name": "LinkedMetafield", "description": "The identifier for the metafield linked to this option.\nThis API is currently in early access. See Metafield-linked product options for more details.", "fields_and_connections": [{"name": "key", "type": "String", "description": "Key of the metafield the option is linked to.", "not_nullable": false}, {"name": "namespace", "type": "String", "description": "Namespace of the metafield the option is linked to.", "not_nullable": false}], "examples": []}, {"name": "MarketCatalog", "description": "A list of products with publishing and pricing information associated with markets.", "fields_and_connections": [{"name": "id", "type": "Catalog", "description": "A globally-unique ID.", "not_nullable": false}, {"name": "id", "type": "Node", "description": "A globally-unique ID.", "not_nullable": false}], "examples": []}, {"name": "MarketsCatalogsEntitlement", "description": "The entitlements for catalogs.", "fields_and_connections": [{"name": "enabled", "type": "Boolean!", "description": "Whether catalogs are enabled.", "not_nullable": true}], "examples": []}, {"name": "MediaError", "description": "Represents a media error. This typically occurs when there is an issue with the media itself causing it to fail validation.\nCheck the media before attempting to upload again.", "fields_and_connections": [{"name": "code", "type": "MediaErrorCode!", "description": "Code representing the type of error.", "not_nullable": true}, {"name": "details", "type": "String", "description": "Additional details regarding the error.", "not_nullable": false}, {"name": "message", "type": "String!", "description": "Translated error message.", "not_nullable": true}], "examples": []}, {"name": "MediaImage", "description": "An image hosted on Shopify.", "fields_and_connections": [{"name": "alt", "type": "File", "description": "A word or phrase to share the nature or contents of a media.", "not_nullable": false}, {"name": "alt", "type": "HasMetafields", "description": "A word or phrase to share the nature or contents of a media.", "not_nullable": false}, {"name": "alt", "type": "Media", "description": "A word or phrase to share the nature or contents of a media.", "not_nullable": false}, {"name": "alt", "type": "Node", "description": "A word or phrase to share the nature or contents of a media.", "not_nullable": false}], "examples": []}, {"name": "MediaImageOriginalSource", "description": "The original source for an image.", "fields_and_connections": [{"name": "fileSize", "type": "Int", "description": "The size of the original file in bytes.", "not_nullable": false}, {"name": "url", "type": "URL", "description": "The URL of the original image, valid only for a short period.", "not_nullable": false}], "examples": []}, {"name": "MediaPreviewImage", "description": "Represents the preview image for a media.", "fields_and_connections": [{"name": "image", "type": "Image", "description": "The preview image for the media. Returns null until status is READY.", "not_nullable": false}, {"name": "status", "type": "MediaPreviewImageStatus!", "description": "Current status of the preview image.", "not_nullable": true}], "examples": []}, {"name": "MediaWarning", "description": "Represents a media warning. This occurs when there is a non-blocking concern regarding your media.\nConsider reviewing your media to ensure it is correct and its parameters are as expected.", "fields_and_connections": [{"name": "code", "type": "MediaWarningCode!", "description": "The code representing the type of warning.", "not_nullable": true}, {"name": "message", "type": "String", "description": "Translated warning message.", "not_nullable": false}], "examples": []}, {"name": "MetafieldCapabilitySmartCollectionCondition", "description": "Information about the smart collection condition capability on a metafield definition.", "fields_and_connections": [{"name": "eligible", "type": "Boolean!", "description": "Indicates if the definition is eligible to have the capability.", "not_nullable": true}, {"name": "enabled", "type": "Boolean!", "description": "Indicates if the capability is enabled.", "not_nullable": true}], "examples": []}, {"name": "Model3d", "description": "Represents a Shopify hosted 3D model.", "fields_and_connections": [{"name": "alt", "type": "File", "description": "A word or phrase to describe the contents or the function of a file.", "not_nullable": false}, {"name": "alt", "type": "Media", "description": "A word or phrase to describe the contents or the function of a file.", "not_nullable": false}, {"name": "alt", "type": "Node", "description": "A word or phrase to describe the contents or the function of a file.", "not_nullable": false}], "examples": []}, {"name": "Model3dBoundingBox", "description": "Bounding box information of a 3d model.", "fields_and_connections": [{"name": "size", "type": "Vector3!", "description": "Size in meters of the smallest volume which contains the 3d model.", "not_nullable": true}], "examples": []}, {"name": "Model3dSource", "description": "A source for a Shopify-hosted 3d model.\nTypes of sources include GLB and USDZ formatted 3d models, where the former\nis an original 3d model and the latter has been converted from the original.\nIf the original source is in GLB format and over 15 MBs in size, then both the\noriginal and the USDZ formatted source are optimized to reduce the file size.", "fields_and_connections": [{"name": "filesize", "type": "Int!", "description": "The 3d model source's filesize.", "not_nullable": true}, {"name": "format", "type": "String!", "description": "The 3d model source's format.", "not_nullable": true}, {"name": "mimeType", "type": "String!", "description": "The 3d model source's MIME type.", "not_nullable": true}, {"name": "url", "type": "String!", "description": "The 3d model source's URL.", "not_nullable": true}], "examples": []}, {"name": "PriceList", "description": "Represents a price list, including information about related prices and eligibility rules.\nYou can use price lists to specify either fixed prices or adjusted relative prices that\noverride initial product variant prices. Price lists are applied to customers\nusing context rules, which determine price list eligibility.\n  For more information on price lists, refer to\n  Support different pricing models.", "fields_and_connections": [{"name": "catalog", "type": "priceList", "description": "Returns a price list resource by ID.", "not_nullable": false}, {"name": "catalog", "type": "priceLists", "description": "All price lists for a shop.", "not_nullable": false}, {"name": "catalog", "type": "priceListCreate", "description": "Creates a price list. You can use the priceListCreate mutation to create a new price list and associate it with a catalog. This enables you to sell your products with contextual pricing.", "not_nullable": false}, {"name": "catalog", "type": "priceListFixedPricesByProductUpdate", "description": "Updates the fixed prices for all variants for a product on a price list. You can use the priceListFixedPricesByProductUpdate mutation to set or remove a fixed price for all variants of a product associated with the price list.", "not_nullable": false}, {"name": "catalog", "type": "priceListFixedPricesUpdate", "description": "Updates fixed prices on a price list. You can use the priceListFixedPricesUpdate mutation to set a fixed price for specific product variants or to delete prices for variants associated with the price list.", "not_nullable": false}, {"name": "catalog", "type": "priceListUpdate", "description": "Updates a price list.\nIf you modify the currency, then any fixed prices set on the price list will be deleted.", "not_nullable": false}, {"name": "catalog", "type": "Node", "description": "The catalog that the price list is associated with.", "not_nullable": false}], "examples": []}, {"name": "PriceListAdjustment", "description": "The type and value of a price list adjustment.\nFor more information on price lists, refer to\nSupport different pricing models.", "fields_and_connections": [{"name": "type", "type": "PriceListAdjustmentType!", "description": "The type of price adjustment, such as percentage increase or decrease.", "not_nullable": true}, {"name": "value", "type": "Float!", "description": "The value of price adjustment, where positive numbers reduce the prices and negative numbers\nincrease them.", "not_nullable": true}], "examples": []}, {"name": "PriceListAdjustmentSettings", "description": "Represents the settings of price list adjustments.", "fields_and_connections": [{"name": "compareAtMode", "type": "PriceListCompareAtMode!", "description": "The type of price list adjustment setting for compare at price.", "not_nullable": true}], "examples": []}, {"name": "PriceListParent", "description": "Represents relative adjustments from one price list to other prices.\n  You can use a PriceListParent to specify an adjusted relative price using a percentage-based\n  adjustment. Adjusted prices work in conjunction with exchange rules and rounding.\n  Adjustment types\n  support both percentage increases and decreases.", "fields_and_connections": [{"name": "adjustment", "type": "PriceListAdjustment!", "description": "A price list adjustment.", "not_nullable": true}, {"name": "settings", "type": "PriceListAdjustmentSettings!", "description": "A price list's settings for adjustment.", "not_nullable": true}], "examples": []}, {"name": "PriceListPrice", "description": "Represents information about pricing for a product variant\n        as defined on a price list, such as the price, compare at price, and origin type. You can use a PriceListPrice to specify a fixed price for a specific product variant. For examples, refer to PriceListFixedPricesAdd and PriceList.", "fields_and_connections": [{"name": "compareAtPrice", "type": "priceListFixedPricesAdd", "description": "Creates or updates fixed prices on a price list. You can use the priceListFixedPricesAdd mutation to set a fixed price for specific product variants. This lets you change product variant pricing on a per country basis. Any existing fixed price list prices for these variants will be overwritten.", "not_nullable": false}, {"name": "compareAtPrice", "type": "priceListFixedPricesUpdate", "description": "Updates fixed prices on a price list. You can use the priceListFixedPricesUpdate mutation to set a fixed price for specific product variants or to delete prices for variants associated with the price list.", "not_nullable": false}], "examples": []}, {"name": "Product", "description": "The Product object lets you manage products in a merchant\u2019s store.\nProducts are the goods and services that merchants offer to customers. They can include various details such as title, description, price, images, and options such as size or color.\nYou can use product variants to create or update different versions of the same product.\nYou can also add or update product media.\nProducts can be organized by grouping them into a collection.\nLearn more about working with Shopify's product model,\nincluding limitations and considerations.", "fields_and_connections": [{"name": "availablePublicationsCount", "type": "product", "description": "Returns a Product resource by ID.", "not_nullable": false}, {"name": "availablePublicationsCount", "type": "productByIdentifier", "description": "Return a product by an identifier.", "not_nullable": false}, {"name": "availablePublicationsCount", "type": "products", "description": "Returns a list of products.", "not_nullable": false}, {"name": "availablePublicationsCount", "type": "productByHandle", "description": "Return a product by its handle. Use productByIdentifier instead.", "not_nullable": false}, {"name": "availablePublicationsCount", "type": "combinedListingUpdate", "description": "Add, remove and update CombinedListings of a given Product.\nCombinedListings are comprised of multiple products to create a single listing. There are two kinds of products used in a CombinedListing:\n\nParent products\nChild products\n\nThe parent product is created with a productCreate with a CombinedListingRole of PARENT. Once created, you can associate child products with the parent product using this mutation. Parent products represent the idea of a product (e.g. Shoe).\nChild products represent a particular option value (or combination of option values) of a parent product. For instance, with your Shoe parent product, you may have several child products representing specific colors of the shoe (e.g. Shoe - Blue). You could also have child products representing more than a single option (e.g. Shoe - Blue/Canvas, Shoe - Blue/Leather, etc...).\nThe combined listing is the association of parent product to one or more child products.\nLearn more about Combined Listings.", "not_nullable": false}, {"name": "availablePublicationsCount", "type": "priceListFixedPricesByProductUpdate", "description": "Updates the fixed prices for all variants for a product on a price list. You can use the priceListFixedPricesByProductUpdate mutation to set or remove a fixed price for all variants of a product associated with the price list.", "not_nullable": false}, {"name": "availablePublicationsCount", "type": "productCreate", "description": "Creates a product\nwith attributes such as title, description, and vendor.\nYou can use the productCreate mutation to define\noptions and\nvalues\nfor products with\nproduct variants,\nsuch as different sizes or colors.\nTo create multiple product variants for a single product and manage prices, use the\nproductVariantsBulkCreate\nmutation.\nTo create or update a product in a single request, use the\nproductSet mutation.\nLearn more about the product model\nand adding product data.", "not_nullable": false}, {"name": "availablePublicationsCount", "type": "productDuplicate", "description": "Duplicates a product.\nIf you need to duplicate a large product, such as one that has many\nvariants\nthat are active at several\nlocations,\nyou might encounter timeout errors.\nTo avoid these timeout errors, you can instead duplicate the product asynchronously.\nIn API version 2024-10 and higher, include synchronous: false argument in this mutation to perform the duplication asynchronously.\nIn API version 2024-07 and lower, use the asynchronous ProductDuplicateAsyncV2.\nMetafield values are not duplicated if the unique values capability is enabled.", "not_nullable": false}, {"name": "availablePublicationsCount", "type": "productJoinSellingPlanGroups", "description": "Adds multiple selling plan groups to a product.", "not_nullable": false}, {"name": "availablePublicationsCount", "type": "productLeaveSellingPlanGroups", "description": "Removes multiple groups from a product.", "not_nullable": false}, {"name": "availablePublicationsCount", "type": "productOptionsCreate", "description": "Creates options on a product.", "not_nullable": false}, {"name": "availablePublicationsCount", "type": "productOptionsDelete", "description": "Deletes the specified options.", "not_nullable": false}, {"name": "availablePublicationsCount", "type": "productOptionsReorder", "description": "Reorders options and option values on a product, causing product variants to alter their position.\nOptions order take precedence over option values order. Depending on the existing product variants,\nsome input orders might not be achieved.\nExample:\nExisting product variants:\n[\"Red / Small\", \"Green / Medium\", \"Blue / Small\"].\nNew order:\n[\n{\nname: \"Size\", values: [{ name: \"Small\" }, { name: \"Medium\" }],\nname: \"Color\", values: [{ name: \"Green\" }, { name: \"Red\" }, { name: \"Blue\" }]\n}\n].\nDescription:\nVariants with \"Green\" value are expected to appear before variants with \"Red\" and \"Blue\" values.\nHowever, \"Size\" option appears before \"Color\".\nTherefore, output will be:\n[\"Small / \"Red\", \"Small / Blue\", \"Medium / Green\"].", "not_nullable": false}, {"name": "availablePublicationsCount", "type": "productOptionUpdate", "description": "Updates a product option.", "not_nullable": false}, {"name": "availablePublicationsCount", "type": "productSet", "description": "Creates or updates a product in a single request.\nUse this mutation when syncing information from an external data source into Shopify.\nWhen using this mutation to update a product, specify that product's id in the input.\nAny list field (e.g.\ncollections,\nmetafields,\nvariants)\nwill be updated so that all included entries are either created or updated, and all existing entries not\nincluded will be deleted.\nAll other fields will be updated to the value passed. Omitted fields will not be updated.\nWhen run in synchronous mode, you will get the product back in the response.\nFor versions 2024-04 and earlier, the synchronous mode has an input limit of 100 variants.\nThis limit has been removed for versions 2024-07 and later.\nIn asynchronous mode, you will instead get a\nProductSetOperation\nobject back. You can then use the\nproductOperation query to\nretrieve the updated product data. This query uses the ProductSetOperation object to\ncheck the status of the operation and to retrieve the details of the updated product and its variants.\nIf you need to update a subset of variants, use one of the bulk variant mutations:\n\nproductVariantsBulkCreate\nproductVariantsBulkUpdate\nproductVariantsBulkDelete\n\nIf you need to update options, use one of the product option mutations:\n\nproductOptionsCreate\nproductOptionUpdate\nproductOptionsDelete\nproductOptionsReorder\n\nSee our guide to\nsync product data from an external source\nfor more.", "not_nullable": false}, {"name": "availablePublicationsCount", "type": "productUpdate", "description": "Updates a product.\nFor versions 2024-01 and older:\nIf you update a product and only include some variants in the update,\nthen any variants not included will be deleted.\nTo safely manage variants without the risk of\ndeleting excluded variants, use\nproductVariantsBulkUpdate.\nIf you want to update a single variant, then use\nproductVariantUpdate.", "not_nullable": false}, {"name": "availablePublicationsCount", "type": "productVariantAppendMedia", "description": "Appends media from a product to variants of the product.", "not_nullable": false}, {"name": "availablePublicationsCount", "type": "productVariantDetachMedia", "description": "Detaches media from product variants.", "not_nullable": false}, {"name": "availablePublicationsCount", "type": "productVariantsBulkCreate", "description": "Creates multiple variants in a single product. This mutation can be called directly or via the bulkOperation.", "not_nullable": false}, {"name": "availablePublicationsCount", "type": "productVariantsBulkDelete", "description": "Deletes multiple variants in a single product. This mutation can be called directly or via the bulkOperation.", "not_nullable": false}, {"name": "availablePublicationsCount", "type": "productVariantsBulkReorder", "description": "Reorders multiple variants in a single product. This mutation can be called directly or via the bulkOperation.", "not_nullable": false}, {"name": "availablePublicationsCount", "type": "productVariantsBulkUpdate", "description": "Updates multiple variants in a single product. This mutation can be called directly or via the bulkOperation.", "not_nullable": false}, {"name": "availablePublicationsCount", "type": "productChangeStatus", "description": "Changes the status of a product. This allows you to set the availability of the product across all channels. Use productUpdate instead.", "not_nullable": false}, {"name": "availablePublicationsCount", "type": "productCreateMedia", "description": "Creates media for a product. Use productUpdate or productSet instead.", "not_nullable": false}, {"name": "availablePublicationsCount", "type": "productDeleteMedia", "description": "Deletes media for a product. Use fileUpdate instead.", "not_nullable": false}, {"name": "availablePublicationsCount", "type": "productPublish", "description": "Publishes a product. Products that are sold exclusively on subscription (requiresSellingPlan: true) can only be published on online stores. Use publishablePublish instead.", "not_nullable": false}, {"name": "availablePublicationsCount", "type": "productUnpublish", "description": "Unpublishes a product. Use publishableUnpublish instead.", "not_nullable": false}, {"name": "availablePublicationsCount", "type": "productUpdateMedia", "description": "Updates media for a product. Use fileUpdate instead.", "not_nullable": false}, {"name": "availablePublicationsCount", "type": "HasEvents", "description": "The number of\npublications\nthat a resource is published to, without\nfeedback errors.", "not_nullable": false}, {"name": "availablePublicationsCount", "type": "HasMetafieldDefinitions", "description": "The number of\npublications\nthat a resource is published to, without\nfeedback errors.", "not_nullable": false}, {"name": "availablePublicationsCount", "type": "HasMetafields", "description": "The number of\npublications\nthat a resource is published to, without\nfeedback errors.", "not_nullable": false}, {"name": "availablePublicationsCount", "type": "HasPublishedTranslations", "description": "The number of\npublications\nthat a resource is published to, without\nfeedback errors.", "not_nullable": false}, {"name": "availablePublicationsCount", "type": "LegacyInteroperability", "description": "The number of\npublications\nthat a resource is published to, without\nfeedback errors.", "not_nullable": false}, {"name": "availablePublicationsCount", "type": "Navigable", "description": "The number of\npublications\nthat a resource is published to, without\nfeedback errors.", "not_nullable": false}, {"name": "availablePublicationsCount", "type": "Node", "description": "The number of\npublications\nthat a resource is published to, without\nfeedback errors.", "not_nullable": false}, {"name": "availablePublicationsCount", "type": "OnlineStorePreviewable", "description": "The number of\npublications\nthat a resource is published to, without\nfeedback errors.", "not_nullable": false}, {"name": "availablePublicationsCount", "type": "Publishable", "description": "The number of\npublications\nthat a resource is published to, without\nfeedback errors.", "not_nullable": false}], "examples": []}, {"name": "ProductBundleComponent", "description": "The product's component information.", "fields_and_connections": [{"name": "componentProduct", "type": "Product!", "description": "The product that's related as a component.", "not_nullable": true}, {"name": "componentVariants", "type": "ProductVariantConnection!", "description": "The list of products' variants that are components.", "not_nullable": true}, {"name": "componentVariantsCount", "type": "Count", "description": "The number of component variants for the product component.", "not_nullable": false}, {"name": "optionSelections", "type": "[ProductBundleComponentOptionSelection!]!", "description": "The options in the parent and the component options they're connected to, along with the chosen option values\nthat appear in the bundle.", "not_nullable": true}, {"name": "quantity", "type": "Int", "description": "The quantity of the component product set for this bundle line.\nIt will be null if there's a quantityOption present.", "not_nullable": false}, {"name": "quantityOption", "type": "ProductBundleComponentQuantityOption", "description": "The quantity as option of the component product. It will be null if there's a quantity set.", "not_nullable": false}], "examples": []}, {"name": "ProductBundleComponentOptionSelection", "description": "A relationship between a component option and a parent option.", "fields_and_connections": [{"name": "componentOption", "type": "ProductOption!", "description": "The option that existed on the component product prior to the fixed bundle creation.", "not_nullable": true}, {"name": "parentOption", "type": "ProductOption", "description": "The option that was created on the parent product.", "not_nullable": false}, {"name": "values", "type": "[ProductBundleComponentOptionSelectionValue!]!", "description": "The component option values that are actively selected for this relationship.", "not_nullable": true}], "examples": []}, {"name": "ProductBundleComponentOptionSelectionValue", "description": "A component option value related to a bundle line.", "fields_and_connections": [{"name": "selectionStatus", "type": "ProductBundleComponentOptionSelectionStatus!", "description": "Selection status of the option.", "not_nullable": true}, {"name": "value", "type": "String!", "description": "The value of the option.", "not_nullable": true}], "examples": []}, {"name": "ProductBundleComponentQuantityOption", "description": "A quantity option related to a bundle.", "fields_and_connections": [{"name": "name", "type": "String!", "description": "The name of the option value.", "not_nullable": true}, {"name": "parentOption", "type": "ProductOption", "description": "The option that was created on the parent product.", "not_nullable": false}, {"name": "values", "type": "[ProductBundleComponentQuantityOptionValue!]!", "description": "The quantity values of the option.", "not_nullable": true}], "examples": []}, {"name": "ProductBundleComponentQuantityOptionValue", "description": "A quantity option value related to a componentized product.", "fields_and_connections": [{"name": "name", "type": "String!", "description": "The name of the option value.", "not_nullable": true}, {"name": "quantity", "type": "Int!", "description": "The quantity of the option value.", "not_nullable": true}], "examples": []}, {"name": "ProductBundleOperation", "description": "An entity that represents details of an asynchronous\nProductBundleCreate or\nProductBundleUpdate mutation.\nBy querying this entity with the\nproductOperation query\nusing the ID that was returned when the bundle was created or updated, this can be used to check the status of an operation.\nThe status field indicates whether the operation is CREATED, ACTIVE, or COMPLETE.\nThe product field provides the details of the created or updated product.\nThe userErrors field provides mutation errors that occurred during the operation.", "fields_and_connections": [{"name": "id", "type": "productBundleCreate", "description": "Creates a new componentized product.", "not_nullable": false}, {"name": "id", "type": "productBundleUpdate", "description": "Updates a componentized product.", "not_nullable": false}, {"name": "id", "type": "Node", "description": "A globally-unique ID.", "not_nullable": false}, {"name": "id", "type": "ProductOperation", "description": "A globally-unique ID.", "not_nullable": false}], "examples": []}, {"name": "ProductCategory", "description": "The details of a specific product category within the Shopify product taxonomy.", "fields_and_connections": [{"name": "productTaxonomyNode", "type": "ProductTaxonomyNode", "description": "The product taxonomy node associated with the product category.", "not_nullable": false}], "examples": []}, {"name": "ProductCompareAtPriceRange", "description": "The compare-at price range of the product.", "fields_and_connections": [{"name": "maxVariantCompareAtPrice", "type": "MoneyV2!", "description": "The highest variant's compare-at price.", "not_nullable": true}, {"name": "minVariantCompareAtPrice", "type": "MoneyV2!", "description": "The lowest variant's compare-at price.", "not_nullable": true}], "examples": []}, {"name": "ProductContextualPricing", "description": "The price of a product in a specific country.\nPrices vary between countries.\nRefer to Product\nfor more information on how to use this object.", "fields_and_connections": [{"name": "fixedQuantityRulesCount", "type": "Int!", "description": "The number of fixed quantity rules for the product's variants on the price list.", "not_nullable": true}, {"name": "maxVariantPricing", "type": "ProductVariantContextualPricing", "description": "The pricing of the variant with the highest price in the given context.", "not_nullable": false}, {"name": "minVariantPricing", "type": "ProductVariantContextualPricing", "description": "The pricing of the variant with the lowest price in the given context.", "not_nullable": false}, {"name": "priceRange", "type": "ProductPriceRangeV2!", "description": "The minimum and maximum prices of a product, expressed in decimal numbers.\nFor example, if the product is priced between $10.00 and $50.00,\nthen the price range is $10.00 - $50.00.", "not_nullable": true}], "examples": []}, {"name": "ProductDeleteOperation", "description": "An entity that represents details of an asynchronous\nProductDelete mutation.\nBy querying this entity with the\nproductOperation query\nusing the ID that was returned when the product was deleted, this can be used to check the status of an operation.\nThe status field indicates whether the operation is CREATED, ACTIVE, or COMPLETE.\nThe deletedProductId field provides the ID of the deleted product.\nThe userErrors field provides mutation errors that occurred during the operation.", "fields_and_connections": [{"name": "deletedProductId", "type": "productDelete", "description": "Deletes a product, including all associated variants and media.\nAs of API version 2023-01, if you need to delete a large product, such as one that has many\nvariants\nthat are active at several\nlocations,\nyou may encounter timeout errors. To avoid these timeout errors, you can instead use the asynchronous\nProductDeleteAsync\nmutation.", "not_nullable": false}, {"name": "deletedProductId", "type": "Node", "description": "The ID of the deleted product.", "not_nullable": false}, {"name": "deletedProductId", "type": "ProductOperation", "description": "The ID of the deleted product.", "not_nullable": false}], "examples": []}, {"name": "ProductDuplicateJob", "description": "Represents a product duplication job.", "fields_and_connections": [{"name": "done", "type": "productDuplicateJob", "description": "Returns the product duplicate job.", "not_nullable": false}], "examples": []}, {"name": "ProductDuplicateOperation", "description": "An entity that represents details of an asynchronous\nProductDuplicate mutation.\nBy querying this entity with the\nproductOperation query\nusing the ID that was returned\nwhen the product was duplicated,\nthis can be used to check the status of an operation.\nThe status field indicates whether the operation is CREATED, ACTIVE, or COMPLETE.\nThe product field provides the details of the original product.\nThe newProduct field provides the details of the new duplicate of the product.\nThe userErrors field provides mutation errors that occurred during the operation.", "fields_and_connections": [{"name": "id", "type": "productDuplicate", "description": "Duplicates a product.\nIf you need to duplicate a large product, such as one that has many\nvariants\nthat are active at several\nlocations,\nyou might encounter timeout errors.\nTo avoid these timeout errors, you can instead duplicate the product asynchronously.\nIn API version 2024-10 and higher, include synchronous: false argument in this mutation to perform the duplication asynchronously.\nIn API version 2024-07 and lower, use the asynchronous ProductDuplicateAsyncV2.\nMetafield values are not duplicated if the unique values capability is enabled.", "not_nullable": false}, {"name": "id", "type": "Node", "description": "A globally-unique ID.", "not_nullable": false}, {"name": "id", "type": "ProductOperation", "description": "A globally-unique ID.", "not_nullable": false}], "examples": []}, {"name": "ProductOption", "description": "The product property names. For example, \"Size\", \"Color\", and \"Material\".\nVariants are selected based on permutations of these options.\nThe limit for each product property name is 255 characters.", "fields_and_connections": [{"name": "id", "type": "HasPublishedTranslations", "description": "A globally-unique ID.", "not_nullable": false}, {"name": "id", "type": "Node", "description": "A globally-unique ID.", "not_nullable": false}], "examples": []}, {"name": "ProductOptionValue", "description": "The product option value names. For example, \"Red\", \"Blue\", and \"Green\" for a \"Color\" option.", "fields_and_connections": [{"name": "hasVariants", "type": "HasPublishedTranslations", "description": "Whether the product option value has any linked variants.", "not_nullable": false}, {"name": "hasVariants", "type": "Node", "description": "Whether the product option value has any linked variants.", "not_nullable": false}], "examples": []}, {"name": "ProductOptionValueSwatch", "description": "A swatch associated with a product option value.", "fields_and_connections": [{"name": "color", "type": "Color", "description": "The color representation of the swatch.", "not_nullable": false}, {"name": "image", "type": "MediaImage", "description": "An image representation of the swatch.", "not_nullable": false}], "examples": []}, {"name": "ProductPriceRange", "description": "The price range of the product.", "fields_and_connections": [{"name": "maxVariantPrice", "type": "MoneyV2!", "description": "The highest variant's price.", "not_nullable": true}, {"name": "minVariantPrice", "type": "MoneyV2!", "description": "The lowest variant's price.", "not_nullable": true}], "examples": []}, {"name": "ProductPriceRangeV2", "description": "The price range of the product.", "fields_and_connections": [{"name": "maxVariantPrice", "type": "MoneyV2!", "description": "The highest variant's price.", "not_nullable": true}, {"name": "minVariantPrice", "type": "MoneyV2!", "description": "The lowest variant's price.", "not_nullable": true}], "examples": []}, {"name": "ProductPublication", "description": "Represents the channels where a product is published.", "fields_and_connections": [{"name": "channel", "type": "productPublish", "description": "Publishes a product. Products that are sold exclusively on subscription (requiresSellingPlan: true) can only be published on online stores. Use publishablePublish instead.", "not_nullable": false}], "examples": []}, {"name": "ProductSetOperation", "description": "An entity that represents details of an asynchronous\nProductSet mutation.\nBy querying this entity with the\nproductOperation query\nusing the ID that was returned\nwhen the product was created or updated,\nthis can be used to check the status of an operation.\nThe status field indicates whether the operation is CREATED, ACTIVE, or COMPLETE.\nThe product field provides the details of the created or updated product.\nThe userErrors field provides mutation errors that occurred during the operation.", "fields_and_connections": [{"name": "id", "type": "productSet", "description": "Creates or updates a product in a single request.\nUse this mutation when syncing information from an external data source into Shopify.\nWhen using this mutation to update a product, specify that product's id in the input.\nAny list field (e.g.\ncollections,\nmetafields,\nvariants)\nwill be updated so that all included entries are either created or updated, and all existing entries not\nincluded will be deleted.\nAll other fields will be updated to the value passed. Omitted fields will not be updated.\nWhen run in synchronous mode, you will get the product back in the response.\nFor versions 2024-04 and earlier, the synchronous mode has an input limit of 100 variants.\nThis limit has been removed for versions 2024-07 and later.\nIn asynchronous mode, you will instead get a\nProductSetOperation\nobject back. You can then use the\nproductOperation query to\nretrieve the updated product data. This query uses the ProductSetOperation object to\ncheck the status of the operation and to retrieve the details of the updated product and its variants.\nIf you need to update a subset of variants, use one of the bulk variant mutations:\n\nproductVariantsBulkCreate\nproductVariantsBulkUpdate\nproductVariantsBulkDelete\n\nIf you need to update options, use one of the product option mutations:\n\nproductOptionsCreate\nproductOptionUpdate\nproductOptionsDelete\nproductOptionsReorder\n\nSee our guide to\nsync product data from an external source\nfor more.", "not_nullable": false}, {"name": "id", "type": "Node", "description": "A globally-unique ID.", "not_nullable": false}, {"name": "id", "type": "ProductOperation", "description": "A globally-unique ID.", "not_nullable": false}], "examples": []}, {"name": "ProductTaxonomyNode", "description": "Represents a Shopify product taxonomy node.", "fields_and_connections": [{"name": "fullName", "type": "Node", "description": "The full name of the product taxonomy node. For example,  Animals & Pet Supplies > Pet Supplies > Dog Supplies > Dog Beds.", "not_nullable": false}], "examples": []}, {"name": "ProductVariant", "description": "Represents a product variant.", "fields_and_connections": [{"name": "availableForSale", "type": "productVariant", "description": "Returns a ProductVariant resource by ID.", "not_nullable": false}, {"name": "availableForSale", "type": "productVariantByIdentifier", "description": "Return a product variant by an identifier.", "not_nullable": false}, {"name": "availableForSale", "type": "productVariants", "description": "Returns a list of product variants.", "not_nullable": false}, {"name": "availableForSale", "type": "productVariantAppendMedia", "description": "Appends media from a product to variants of the product.", "not_nullable": false}, {"name": "availableForSale", "type": "productVariantDetachMedia", "description": "Detaches media from product variants.", "not_nullable": false}, {"name": "availableForSale", "type": "productVariantJoinSellingPlanGroups", "description": "Adds multiple selling plan groups to a product variant.", "not_nullable": false}, {"name": "availableForSale", "type": "productVariantLeaveSellingPlanGroups", "description": "Remove multiple groups from a product variant.", "not_nullable": false}, {"name": "availableForSale", "type": "productVariantRelationshipBulkUpdate", "description": "Creates new bundles, updates existing bundles, and removes bundle components for one or multiple bundles.", "not_nullable": false}, {"name": "availableForSale", "type": "productVariantsBulkCreate", "description": "Creates multiple variants in a single product. This mutation can be called directly or via the bulkOperation.", "not_nullable": false}, {"name": "availableForSale", "type": "productVariantsBulkUpdate", "description": "Updates multiple variants in a single product. This mutation can be called directly or via the bulkOperation.", "not_nullable": false}, {"name": "availableForSale", "type": "quantityPricingByVariantUpdate", "description": "Updates quantity pricing on a price list. You can use the quantityPricingByVariantUpdate mutation to set fixed prices, quantity rules, and quantity price breaks. This mutation does not allow partial successes. If any of the requested resources fail to update, none of the requested resources will be updated. Delete operations are executed before create operations.", "not_nullable": false}, {"name": "availableForSale", "type": "HasEvents", "description": "Whether the product variant is available for sale.", "not_nullable": false}, {"name": "availableForSale", "type": "HasMetafieldDefinitions", "description": "Whether the product variant is available for sale.", "not_nullable": false}, {"name": "availableForSale", "type": "HasMetafields", "description": "Whether the product variant is available for sale.", "not_nullable": false}, {"name": "availableForSale", "type": "HasPublishedTranslations", "description": "Whether the product variant is available for sale.", "not_nullable": false}, {"name": "availableForSale", "type": "LegacyInteroperability", "description": "Whether the product variant is available for sale.", "not_nullable": false}, {"name": "availableForSale", "type": "Navigable", "description": "Whether the product variant is available for sale.", "not_nullable": false}, {"name": "availableForSale", "type": "Node", "description": "Whether the product variant is available for sale.", "not_nullable": false}], "examples": []}, {"name": "ProductVariantComponent", "description": "A product variant component associated with a product variant.", "fields_and_connections": [{"name": "id", "type": "Node", "description": "A globally-unique ID.", "not_nullable": false}], "examples": []}, {"name": "ProductVariantContextualPricing", "description": "The price of a product variant in a specific country.\nPrices vary between countries.", "fields_and_connections": [{"name": "compareAtPrice", "type": "MoneyV2", "description": "The final compare-at price after all adjustments are applied.", "not_nullable": false}, {"name": "price", "type": "MoneyV2!", "description": "The final price after all adjustments are applied.", "not_nullable": true}, {"name": "quantityPriceBreaks", "type": "QuantityPriceBreakConnection!", "description": "A list of quantity breaks for the product variant.", "not_nullable": true}, {"name": "quantityRule", "type": "QuantityRule!", "description": "The quantity rule applied for a given context.", "not_nullable": true}], "examples": []}, {"name": "ProductVariantPricePair", "description": "The compare-at price and price of a variant sharing a currency.", "fields_and_connections": [{"name": "compareAtPrice", "type": "MoneyV2", "description": "The compare-at price of the variant with associated currency.", "not_nullable": false}, {"name": "price", "type": "MoneyV2!", "description": "The price of the variant with associated currency.", "not_nullable": true}], "examples": []}, {"name": "PublicationResourceOperation", "description": "A bulk update operation on a publication.", "fields_and_connections": [{"name": "id", "type": "Node", "description": "A globally-unique ID.", "not_nullable": false}, {"name": "id", "type": "ResourceOperation", "description": "A globally-unique ID.", "not_nullable": false}], "examples": []}, {"name": "QuantityPriceBreak", "description": "Quantity price breaks lets you offer different rates that are based on the\namount of a specific variant being ordered.", "fields_and_connections": [{"name": "id", "type": "Node", "description": "A globally-unique ID.", "not_nullable": false}], "examples": []}, {"name": "QuantityRule", "description": "The quantity rule for the product variant in a given context.", "fields_and_connections": [{"name": "increment", "type": "quantityRulesAdd", "description": "Creates or updates existing quantity rules on a price list.\nYou can use the quantityRulesAdd mutation to set order level minimums, maximumums and increments for specific product variants.", "not_nullable": false}], "examples": []}, {"name": "ResourcePublication", "description": "A resource publication represents information about the publication of a resource.\nAn instance of ResourcePublication, unlike ResourcePublicationV2, can be neither published or scheduled to be published.\nSee ResourcePublicationV2 for more context.", "fields_and_connections": [{"name": "isPublished", "type": "Boolean!", "description": "Whether the resource publication is published. Also returns true if the resource publication is scheduled to be published.\nIf false, then the resource publication is neither published nor scheduled to be published.", "not_nullable": true}, {"name": "publication", "type": "Publication!", "description": "The publication the resource publication is published to.", "not_nullable": true}, {"name": "publishable", "type": "Publishable!", "description": "The resource published to the publication.", "not_nullable": true}, {"name": "publishDate", "type": "DateTime!", "description": "The date that the resource publication was or is going to be published to the publication.\nIf the product isn't published, then this field returns an epoch timestamp.", "not_nullable": true}, {"name": "channel", "type": "Channel!", "description": "The channel the resource publication is published to. Use publication instead.", "not_nullable": true}], "examples": []}, {"name": "ResourcePublicationV2", "description": "A resource publication represents information about the publication of a resource.\nUnlike ResourcePublication, an instance of ResourcePublicationV2 can't be unpublished. It must either be published or scheduled to be published.\nSee ResourcePublication for more context.", "fields_and_connections": [{"name": "isPublished", "type": "Boolean!", "description": "Whether the resource publication is published. If true, then the resource publication is published to the publication.\nIf false, then the resource publication is staged to be published to the publication.", "not_nullable": true}, {"name": "publication", "type": "Publication!", "description": "The publication the resource publication is published to.", "not_nullable": true}, {"name": "publishable", "type": "Publishable!", "description": "The resource published to the publication.", "not_nullable": true}, {"name": "publishDate", "type": "DateTime", "description": "The date that the resource publication was or is going to be published to the publication.", "not_nullable": false}], "examples": []}, {"name": "RestrictedForResource", "description": "Information about product is restricted for a given resource.", "fields_and_connections": [{"name": "restricted", "type": "Boolean!", "description": "Returns true when the product is restricted for the given resource.", "not_nullable": true}, {"name": "restrictedReason", "type": "String!", "description": "Restriction reason for the given resource.", "not_nullable": true}], "examples": []}, {"name": "RowCount", "description": "A row count represents rows on background operation.", "fields_and_connections": [{"name": "count", "type": "Int!", "description": "Estimated number of rows contained within this background operation.", "not_nullable": true}, {"name": "exceedsMax", "type": "Boolean!", "description": "Whether the operation exceeds max number of reportable rows.", "not_nullable": true}], "examples": []}, {"name": "SelectedOption", "description": "Properties used by customers to select a product variant.\nProducts can have multiple options, like different sizes or colors.", "fields_and_connections": [{"name": "name", "type": "String!", "description": "The product option\u2019s name.", "not_nullable": true}, {"name": "optionValue", "type": "ProductOptionValue!", "description": "The product option\u2019s value object.", "not_nullable": true}, {"name": "value", "type": "String!", "description": "The product option\u2019s value.", "not_nullable": true}], "examples": []}, {"name": "SellingPlan", "description": "Represents how a product can be sold and purchased. Selling plans and associated records (selling plan groups\nand policies) are deleted 48 hours after a merchant uninstalls their subscriptions app. We recommend backing\nup these records if you need to restore them later.\nFor more information on selling plans, refer to\nCreating and managing selling plans.", "fields_and_connections": [{"name": "billingPolicy", "type": "HasMetafieldDefinitions", "description": "A selling plan policy which describes the recurring billing details.", "not_nullable": false}, {"name": "billingPolicy", "type": "HasMetafields", "description": "A selling plan policy which describes the recurring billing details.", "not_nullable": false}, {"name": "billingPolicy", "type": "HasPublishedTranslations", "description": "A selling plan policy which describes the recurring billing details.", "not_nullable": false}, {"name": "billingPolicy", "type": "Node", "description": "A selling plan policy which describes the recurring billing details.", "not_nullable": false}], "examples": []}, {"name": "SellingPlanAnchor", "description": "Specifies the date when delivery or fulfillment is completed by a merchant for a given time cycle. You can also\ndefine a cutoff for which customers are eligible to enter this cycle and the desired behavior for customers who\nstart their subscription inside the cutoff period.\nSome example scenarios where anchors can be useful to implement advanced delivery behavior:\n\nA merchant starts fulfillment on a specific date every month.\nA merchant wants to bill the 1st of every quarter.\nA customer expects their delivery every Tuesday.\n\nFor more details, see About Selling Plans.", "fields_and_connections": [{"name": "cutoffDay", "type": "Int", "description": "The cutoff day for the anchor. Specifies a buffer period before the anchor date for orders to be included in a\ndelivery or fulfillment cycle.\nIf type is WEEKDAY, then the value must be between 1-7. Shopify interprets\nthe days of the week according to ISO 8601, where 1 is Monday.\nIf type is MONTHDAY, then the value must be between 1-31.\nIf type is YEARDAY, then the value must be null.", "not_nullable": false}, {"name": "day", "type": "Int!", "description": "The day of the anchor.\nIf type is WEEKDAY, then the value must be between 1-7. Shopify interprets\nthe days of the week according to ISO 8601, where 1 is Monday.\nIf type isn't WEEKDAY, then the value must be between 1-31.", "not_nullable": true}, {"name": "month", "type": "Int", "description": "The month of the anchor. If type is different than YEARDAY, then the value must\nbe null or between 1-12.", "not_nullable": false}, {"name": "type", "type": "SellingPlanAnchorType!", "description": "Represents the anchor type, it can be one one of WEEKDAY, MONTHDAY, YEARDAY.", "not_nullable": true}], "examples": []}, {"name": "SellingPlanCheckoutCharge", "description": "The amount charged at checkout when the full amount isn't charged at checkout.", "fields_and_connections": [{"name": "type", "type": "SellingPlanCheckoutChargeType!", "description": "The charge type for the checkout charge.", "not_nullable": true}, {"name": "value", "type": "SellingPlanCheckoutChargeValue!", "description": "The charge value for the checkout charge.", "not_nullable": true}], "examples": []}, {"name": "SellingPlanCheckoutChargePercentageValue", "description": "The percentage value of the price used for checkout charge.", "fields_and_connections": [{"name": "percentage", "type": "Float!", "description": "The percentage value of the price used for checkout charge.", "not_nullable": true}], "examples": []}, {"name": "SellingPlanFixedBillingPolicy", "description": "The fixed selling plan billing policy defines how much of the price of the product will be billed to customer\nat checkout. If there is an outstanding balance, it determines when it will be paid.", "fields_and_connections": [{"name": "checkoutCharge", "type": "SellingPlanCheckoutCharge!", "description": "The checkout charge when the full amount isn't charged at checkout.", "not_nullable": true}, {"name": "remainingBalanceChargeExactTime", "type": "DateTime", "description": "The exact time when to capture the full payment.", "not_nullable": false}, {"name": "remainingBalanceChargeTimeAfterCheckout", "type": "String", "description": "The period after remaining_balance_charge_trigger, before capturing the full payment. Expressed as an ISO8601 duration.", "not_nullable": false}, {"name": "remainingBalanceChargeTrigger", "type": "SellingPlanRemainingBalanceChargeTrigger!", "description": "When to capture payment for amount due.", "not_nullable": true}], "examples": []}, {"name": "SellingPlanFixedDeliveryPolicy", "description": "Represents a fixed selling plan delivery policy.", "fields_and_connections": [{"name": "anchors", "type": "[SellingPlanAnchor!]!", "description": "The specific anchor dates upon which the delivery interval calculations should be made.", "not_nullable": true}, {"name": "cutoff", "type": "Int", "description": "A buffer period for orders to be included in next fulfillment anchor.", "not_nullable": false}, {"name": "fulfillmentExactTime", "type": "DateTime", "description": "The date and time when the fulfillment should trigger.", "not_nullable": false}, {"name": "fulfillmentTrigger", "type": "SellingPlanFulfillmentTrigger!", "description": "What triggers the fulfillment. The value must be one of ANCHOR, ASAP, EXACT_TIME, or UNKNOWN.", "not_nullable": true}, {"name": "intent", "type": "SellingPlanFixedDeliveryPolicyIntent!", "description": "Whether the delivery policy is merchant or buyer-centric.\nBuyer-centric delivery policies state the time when the buyer will receive the goods.\nMerchant-centric delivery policies state the time when the fulfillment should be started.\nCurrently, only merchant-centric delivery policies are supported.", "not_nullable": true}, {"name": "preAnchorBehavior", "type": "SellingPlanFixedDeliveryPolicyPreAnchorBehavior!", "description": "The fulfillment or delivery behavior of the first fulfillment when the order is placed before the anchor. The default value for this field is ASAP.", "not_nullable": true}], "examples": []}, {"name": "SellingPlanFixedPricingPolicy", "description": "Represents the pricing policy of a subscription or deferred purchase option selling plan.\nThe selling plan fixed pricing policy works with the billing and delivery policy\nto determine the final price. Discounts are divided among fulfillments.\nFor example, a subscription with a $10 discount and two deliveries will have a $5\ndiscount applied to each delivery.", "fields_and_connections": [{"name": "adjustmentType", "type": "SellingPlanPricingPolicyBase", "description": "The price adjustment type.", "not_nullable": false}], "examples": []}, {"name": "SellingPlanGroup", "description": "Represents a selling method (for example, \"Subscribe and save\" or \"Pre-paid\"). Selling plan groups\nand associated records (selling plans and policies) are deleted 48 hours after a merchant\nuninstalls their subscriptions app. We recommend backing up these records if you need to restore them later.", "fields_and_connections": [{"name": "appId", "type": "sellingPlanGroup", "description": "Returns a Selling Plan Group resource by ID.", "not_nullable": false}, {"name": "appId", "type": "sellingPlanGroups", "description": "List Selling Plan Groups.", "not_nullable": false}, {"name": "appId", "type": "sellingPlanGroupAddProducts", "description": "Adds multiple products to a selling plan group.", "not_nullable": false}, {"name": "appId", "type": "sellingPlanGroupAddProductVariants", "description": "Adds multiple product variants to a selling plan group.", "not_nullable": false}, {"name": "appId", "type": "sellingPlanGroupCreate", "description": "Creates a Selling Plan Group.", "not_nullable": false}, {"name": "appId", "type": "sellingPlanGroupUpdate", "description": "Update a Selling Plan Group.", "not_nullable": false}, {"name": "appId", "type": "HasPublishedTranslations", "description": "The ID for app, exposed in Liquid and product JSON.", "not_nullable": false}, {"name": "appId", "type": "Node", "description": "The ID for app, exposed in Liquid and product JSON.", "not_nullable": false}], "examples": []}, {"name": "SellingPlanInventoryPolicy", "description": "The selling plan inventory policy.", "fields_and_connections": [{"name": "reserve", "type": "SellingPlanReserve!", "description": "When to reserve inventory for the order.", "not_nullable": true}], "examples": []}, {"name": "SellingPlanPricingPolicyPercentageValue", "description": "The percentage value of a selling plan pricing policy percentage type.", "fields_and_connections": [{"name": "percentage", "type": "Float!", "description": "The percentage value.", "not_nullable": true}], "examples": []}, {"name": "SellingPlanRecurringBillingPolicy", "description": "Represents a recurring selling plan billing policy.", "fields_and_connections": [{"name": "anchors", "type": "[SellingPlanAnchor!]!", "description": "Specific anchor dates upon which the billing interval calculations should be made.", "not_nullable": true}, {"name": "createdAt", "type": "DateTime!", "description": "The date and time when the selling plan billing policy was created.", "not_nullable": true}, {"name": "interval", "type": "SellingPlanInterval!", "description": "The billing frequency, it can be either: day, week, month or year.", "not_nullable": true}, {"name": "intervalCount", "type": "Int!", "description": "The number of intervals between billings.", "not_nullable": true}, {"name": "maxCycles", "type": "Int", "description": "Maximum number of billing iterations.", "not_nullable": false}, {"name": "minCycles", "type": "Int", "description": "Minimum number of billing iterations.", "not_nullable": false}], "examples": []}, {"name": "SellingPlanRecurringDeliveryPolicy", "description": "Represents a recurring selling plan delivery policy.", "fields_and_connections": [{"name": "anchors", "type": "[SellingPlanAnchor!]!", "description": "The specific anchor dates upon which the delivery interval calculations should be made.", "not_nullable": true}, {"name": "createdAt", "type": "DateTime!", "description": "The date and time when the selling plan delivery policy was created.", "not_nullable": true}, {"name": "cutoff", "type": "Int", "description": "Number of days which represent a buffer period for orders to be included in a cycle.", "not_nullable": false}, {"name": "intent", "type": "SellingPlanRecurringDeliveryPolicyIntent!", "description": "Whether the delivery policy is merchant or buyer-centric.\nBuyer-centric delivery policies state the time when the buyer will receive the goods.\nMerchant-centric delivery policies state the time when the fulfillment should be started.\nCurrently, only merchant-centric delivery policies are supported.", "not_nullable": true}, {"name": "interval", "type": "SellingPlanInterval!", "description": "The delivery frequency, it can be either: day, week, month or year.", "not_nullable": true}, {"name": "intervalCount", "type": "Int!", "description": "The number of intervals between deliveries.", "not_nullable": true}, {"name": "preAnchorBehavior", "type": "SellingPlanRecurringDeliveryPolicyPreAnchorBehavior!", "description": "The fulfillment or delivery behavior of the first fulfillment when the order is placed before the anchor. The default value for this field is ASAP.", "not_nullable": true}], "examples": []}, {"name": "SellingPlanRecurringPricingPolicy", "description": "Represents a recurring selling plan pricing policy. It applies after the fixed pricing policy. By using the afterCycle parameter, you can specify the cycle when the recurring pricing policy comes into effect. Recurring pricing policies are not available for deferred purchase options.", "fields_and_connections": [{"name": "adjustmentType", "type": "SellingPlanPricingPolicyBase", "description": "The price adjustment type.", "not_nullable": false}], "examples": []}, {"name": "StagedMediaUploadTarget", "description": "Information about a staged upload target, which should be used to send a request to upload\nthe file.\nFor more information on the upload process, refer to\nUpload media to Shopify.", "fields_and_connections": [{"name": "parameters", "type": "stagedUploadsCreate", "description": "Creates staged upload targets for each input. This is the first step in the upload process.\nThe returned staged upload targets' URL and parameter fields can be used to send a request\nto upload the file described in the corresponding input.\nFor more information on the upload process, refer to\nUpload media to Shopify.", "not_nullable": false}], "examples": []}, {"name": "StandardizedProductType", "description": "Represents the details of a specific type of product within the Shopify product taxonomy.", "fields_and_connections": [{"name": "productTaxonomyNode", "type": "ProductTaxonomyNode", "description": "The product taxonomy node associated with the standardized product type.", "not_nullable": false}], "examples": []}, {"name": "Taxonomy", "description": "The Taxonomy resource lets you access the categories, attributes and values of a taxonomy tree.", "fields_and_connections": [], "examples": []}, {"name": "TaxonomyAttribute", "description": "A Shopify product taxonomy attribute.", "fields_and_connections": [{"name": "id", "type": "Node", "description": "A globally-unique ID.", "not_nullable": false}], "examples": []}, {"name": "TaxonomyCategory", "description": "The details of a specific product category within the Shopify product taxonomy.", "fields_and_connections": [{"name": "ancestorIds", "type": "Node", "description": "The IDs of the category's ancestor categories.", "not_nullable": false}], "examples": []}, {"name": "TaxonomyChoiceListAttribute", "description": "A Shopify product taxonomy choice list attribute.", "fields_and_connections": [{"name": "id", "type": "Node", "description": "The unique ID of the TaxonomyAttribute.", "not_nullable": false}], "examples": []}, {"name": "TaxonomyMeasurementAttribute", "description": "A Shopify product taxonomy measurement attribute.", "fields_and_connections": [{"name": "id", "type": "Node", "description": "The unique ID of the TaxonomyAttribute.", "not_nullable": false}], "examples": []}, {"name": "TaxonomyValue", "description": "Represents a Shopify product taxonomy value.", "fields_and_connections": [{"name": "id", "type": "Node", "description": "A globally-unique ID.", "not_nullable": false}], "examples": []}, {"name": "UnitPriceMeasurement", "description": "The measurement used to calculate a unit price for a product variant (e.g. $9.99 / 100ml).", "fields_and_connections": [{"name": "measuredType", "type": "UnitPriceMeasurementMeasuredType", "description": "The type of unit of measurement for the unit price measurement.", "not_nullable": false}, {"name": "quantityUnit", "type": "UnitPriceMeasurementMeasuredUnit", "description": "The quantity unit for the unit price measurement.", "not_nullable": false}, {"name": "quantityValue", "type": "Float!", "description": "The quantity value for the unit price measurement.", "not_nullable": true}, {"name": "referenceUnit", "type": "UnitPriceMeasurementMeasuredUnit", "description": "The reference unit for the unit price measurement.", "not_nullable": false}, {"name": "referenceValue", "type": "Int!", "description": "The reference value for the unit price measurement.", "not_nullable": true}], "examples": []}, {"name": "Vector3", "description": "Representation of 3d vectors and points. It can represent\neither the coordinates of a point in space, a direction, or\nsize. Presented as an object with three floating-point values.", "fields_and_connections": [{"name": "x", "type": "Float!", "description": "The x coordinate of Vector3.", "not_nullable": true}, {"name": "y", "type": "Float!", "description": "The y coordinate of Vector3.", "not_nullable": true}, {"name": "z", "type": "Float!", "description": "The z coordinate of Vector3.", "not_nullable": true}], "examples": []}, {"name": "Video", "description": "Represents a Shopify hosted video.", "fields_and_connections": [{"name": "alt", "type": "File", "description": "A word or phrase to share the nature or contents of a media.", "not_nullable": false}, {"name": "alt", "type": "Media", "description": "A word or phrase to share the nature or contents of a media.", "not_nullable": false}, {"name": "alt", "type": "Node", "description": "A word or phrase to share the nature or contents of a media.", "not_nullable": false}], "examples": []}, {"name": "VideoSource", "description": "Represents a source for a Shopify hosted video.\nTypes of sources include the original video, lower resolution versions of the original video,\nand an m3u8 playlist file.\nOnly videos with a status field\nof READY have sources.", "fields_and_connections": [{"name": "fileSize", "type": "Int", "description": "The video source's file size in bytes.", "not_nullable": false}, {"name": "format", "type": "String!", "description": "The video source's file format extension.", "not_nullable": true}, {"name": "height", "type": "Int!", "description": "The video source's height.", "not_nullable": true}, {"name": "mimeType", "type": "String!", "description": "The video source's MIME type.", "not_nullable": true}, {"name": "url", "type": "String!", "description": "The video source's URL.", "not_nullable": true}, {"name": "width", "type": "Int!", "description": "The video source's width.", "not_nullable": true}], "examples": []}, {"name": "Weight", "description": "A weight, which includes a numeric value and a unit of measurement.", "fields_and_connections": [{"name": "unit", "type": "WeightUnit!", "description": "The unit of measurement for value.", "not_nullable": true}, {"name": "value", "type": "Float!", "description": "The weight value using the unit system specified with unit.", "not_nullable": true}], "examples": []}]}, {"name": "Retail", "queries": [{"name": "cashTrackingSession", "description": "Lookup a cash tracking session by ID.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of the CashTrackingSession to return."}], "returns": [], "examples": []}, {"name": "cashTrackingSessions", "description": "Returns a shop's cash tracking sessions for locations with a POS Pro subscription.\nTip: To query for cash tracking sessions in bulk, you can\nperform a bulk operation.", "arguments": [{"name": "after", "type": "String", "required": false, "description": "The elements that come after the specified cursor."}, {"name": "before", "type": "String", "required": false, "description": "The elements that come before the specified cursor."}, {"name": "first", "type": "Int", "required": false, "description": "The first n elements from the paginated list."}, {"name": "last", "type": "Int", "required": false, "description": "The last n elements from the paginated list."}, {"name": "query", "type": "String", "required": false, "description": "A filter made up of terms, connectives, modifiers, and comparators.\nYou can apply one or more filters to a query. Learn more about Shopify API search syntax."}, {"name": "reverse", "type": "Boolean", "required": false, "description": "Reverse the order of the underlying list."}, {"name": "sortKey", "type": "CashTrackingSessionsSortKeys", "required": false, "description": "Sort the underlying list using a key. If your query is slow or returns an error, then try specifying a sort key that matches the field used in the search."}], "returns": [], "examples": []}], "mutations": [], "objects": [{"name": "CashTrackingAdjustment", "description": "Tracks an adjustment to the cash in a cash tracking session for a point of sale device over the course of a shift.", "fields_and_connections": [{"name": "cash", "type": "Node", "description": "The amount of cash being added or removed.", "not_nullable": false}], "examples": []}, {"name": "CashTrackingSession", "description": "Tracks the balance in a cash drawer for a point of sale device over the course of a shift.", "fields_and_connections": [{"name": "adjustments", "type": "cashTrackingSession", "description": "Lookup a cash tracking session by ID.", "not_nullable": false}, {"name": "adjustments", "type": "cashTrackingSessions", "description": "Returns a shop's cash tracking sessions for locations with a POS Pro subscription.\nTip: To query for cash tracking sessions in bulk, you can\nperform a bulk operation.", "not_nullable": false}, {"name": "adjustments", "type": "Node", "description": "The adjustments made to the cash drawer during this session.", "not_nullable": false}], "examples": []}]}, {"name": "Shipping and fulfillment", "queries": [{"name": "assignedFulfillmentOrders", "description": "The paginated list of fulfillment orders assigned to the shop locations owned by the app.\nAssigned fulfillment orders are fulfillment orders that are set to be fulfilled from locations\nmanaged by\nfulfillment services\nthat are registered by the app.\nOne app (api_client) can host multiple fulfillment services on a shop.\nEach fulfillment service manages a dedicated location on a shop.\nAssigned fulfillment orders can have associated\nfulfillment requests,\nor might currently not be requested to be fulfilled.\nThe app must have the read_assigned_fulfillment_orders\naccess scope\nto be able to retrieve the fulfillment orders assigned to its locations.\nAll assigned fulfillment orders (except those with the CLOSED status) will be returned by default.\nPerform filtering with the assignmentStatus argument\nto receive only fulfillment orders that have been requested to be fulfilled.", "arguments": [{"name": "after", "type": "String", "required": false, "description": "The elements that come after the specified cursor."}, {"name": "assignmentStatus", "type": "FulfillmentOrderAssignmentStatus", "required": false, "description": "The assigment status of the fulfillment orders that should be returned.\nIf assignmentStatus argument is not provided, then\nthe query will return all assigned fulfillment orders,\nexcept those that have the CLOSED status."}, {"name": "before", "type": "String", "required": false, "description": "The elements that come before the specified cursor."}, {"name": "first", "type": "Int", "required": false, "description": "The first n elements from the paginated list."}, {"name": "last", "type": "Int", "required": false, "description": "The last n elements from the paginated list."}, {"name": "locationIds", "type": "[ID!]", "required": false, "description": "Returns fulfillment orders only for certain locations, specified by a list of location IDs."}, {"name": "reverse", "type": "Boolean", "required": false, "description": "Reverse the order of the underlying list."}, {"name": "sortKey", "type": "FulfillmentOrderSortKeys", "required": false, "description": "Sort the underlying list using a key. If your query is slow or returns an error, then try specifying a sort key that matches the field used in the search."}], "returns": [], "examples": []}, {"name": "availableCarrierServices", "description": "Returns a list of activated carrier services and associated shop locations that support them.", "arguments": [], "returns": [{"name": "DeliveryCarrierServiceAndLocations", "type": "[DeliveryCarrierServiceAndLocations!]!", "description": "non-null"}, {"name": "DeliveryCarrierServiceAndLocations", "type": "[DeliveryCarrierServiceAndLocations!]!", "description": "non-null"}, {"name": "DeliveryCarrierServiceAndLocations", "type": "[DeliveryCarrierServiceAndLocations!]!", "description": "non-null"}], "examples": []}, {"name": "carrierService", "description": "Returns a DeliveryCarrierService object by ID.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of the DeliveryCarrierService to return."}], "returns": [], "examples": []}, {"name": "carrierServices", "description": "Retrieve a list of CarrierServices.", "arguments": [{"name": "after", "type": "String", "required": false, "description": "The elements that come after the specified cursor."}, {"name": "before", "type": "String", "required": false, "description": "The elements that come before the specified cursor."}, {"name": "first", "type": "Int", "required": false, "description": "The first n elements from the paginated list."}, {"name": "last", "type": "Int", "required": false, "description": "The last n elements from the paginated list."}, {"name": "query", "type": "String", "required": false, "description": "A filter made up of terms, connectives, modifiers, and comparators.\nYou can apply one or more filters to a query. Learn more about Shopify API search syntax."}, {"name": "reverse", "type": "Boolean", "required": false, "description": "Reverse the order of the underlying list."}, {"name": "sortKey", "type": "CarrierServiceSortKeys", "required": false, "description": "Sort the underlying list using a key. If your query is slow or returns an error, then try specifying a sort key that matches the field used in the search."}], "returns": [], "examples": []}, {"name": "deliveryCustomization", "description": "The delivery customization.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of the delivery customization."}], "returns": [], "examples": []}, {"name": "deliveryCustomizations", "description": "The delivery customizations.", "arguments": [{"name": "after", "type": "String", "required": false, "description": "The elements that come after the specified cursor."}, {"name": "before", "type": "String", "required": false, "description": "The elements that come before the specified cursor."}, {"name": "first", "type": "Int", "required": false, "description": "The first n elements from the paginated list."}, {"name": "last", "type": "Int", "required": false, "description": "The last n elements from the paginated list."}, {"name": "query", "type": "String", "required": false, "description": "A filter made up of terms, connectives, modifiers, and comparators.\nYou can apply one or more filters to a query. Learn more about Shopify API search syntax."}, {"name": "reverse", "type": "Boolean", "required": false, "description": "Reverse the order of the underlying list."}], "returns": [], "examples": []}, {"name": "deliveryProfile", "description": "Returns a Delivery Profile resource by ID.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of the DeliveryProfile to return."}], "returns": [], "examples": []}, {"name": "deliveryProfiles", "description": "Returns a list of saved delivery profiles.", "arguments": [{"name": "after", "type": "String", "required": false, "description": "The elements that come after the specified cursor."}, {"name": "before", "type": "String", "required": false, "description": "The elements that come before the specified cursor."}, {"name": "first", "type": "Int", "required": false, "description": "The first n elements from the paginated list."}, {"name": "last", "type": "Int", "required": false, "description": "The last n elements from the paginated list."}, {"name": "merchantOwnedOnly", "type": "Boolean", "required": false, "description": "If true, returns only delivery profiles that were created by the merchant."}, {"name": "reverse", "type": "Boolean", "required": false, "description": "Reverse the order of the underlying list."}], "returns": [], "examples": []}, {"name": "deliveryPromiseParticipants", "description": "Returns delivery promise participants.", "arguments": [{"name": "after", "type": "String", "required": false, "description": "The elements that come after the specified cursor."}, {"name": "before", "type": "String", "required": false, "description": "The elements that come before the specified cursor."}, {"name": "brandedPromiseHandle", "type": "String!", "required": false, "description": "The branded promise handle to filter by."}, {"name": "first", "type": "Int", "required": false, "description": "The first n elements from the paginated list."}, {"name": "last", "type": "Int", "required": false, "description": "The last n elements from the paginated list."}, {"name": "ownerIds", "type": "[ID!]", "required": false, "description": "The product variant ID to filter by."}, {"name": "reverse", "type": "Boolean", "required": false, "description": "Reverse the order of the underlying list."}], "returns": [], "examples": []}, {"name": "deliveryPromiseProvider", "description": "Lookup a delivery promise provider.", "arguments": [{"name": "locationId", "type": "ID!", "required": false, "description": "The ID of the location associated with the delivery promise provider."}], "returns": [], "examples": []}, {"name": "deliveryPromiseSettings", "description": "Represents the delivery promise settings for a shop.", "arguments": [], "returns": [{"name": "DeliveryPromiseSetting", "type": "DeliveryPromiseSetting!", "description": "non-null"}, {"name": "DeliveryPromiseSetting", "type": "DeliveryPromiseSetting!", "description": "non-null"}, {"name": "DeliveryPromiseSetting", "type": "DeliveryPromiseSetting!", "description": ""}], "examples": []}, {"name": "deliverySettings", "description": "Returns the shop-wide shipping settings.", "arguments": [], "returns": [{"name": "DeliverySetting", "type": "DeliverySetting", "description": "non-null"}, {"name": "DeliverySetting", "type": "DeliverySetting", "description": "non-null"}, {"name": "DeliverySetting", "type": "DeliverySetting", "description": "non-null"}], "examples": []}, {"name": "fulfillment", "description": "Returns a Fulfillment resource by ID.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of the Fulfillment to return."}], "returns": [], "examples": [{"description": "Receive a single Fulfillment", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `query FulfillmentShow($id: ID!) {\n      fulfillment(id: $id) {\n        fulfillmentLineItems(first: 10) {\n          edges {\n            node {\n              id\n              lineItem {\n                title\n                variant {\n                  id\n                }\n              }\n              quantity\n              originalTotalSet {\n                shopMoney {\n                  amount\n                  currencyCode\n                }\n              }\n            }\n          }\n        }\n        status\n        estimatedDeliveryAt\n        location {\n          id\n          legacyResourceId\n        }\n        service {\n          handle\n        }\n        trackingInfo(first: 10) {\n          company\n          number\n          url\n        }\n        originAddress {\n          address1\n          address2\n          city\n          countryCode\n          provinceCode\n          zip\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/Fulfillment/237894043\"\n    },\n  },\n});\n"}, {"description": "Retrieves a list of fulfillment events for a specific fulfillment", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `query FulfillmentEventList($id: ID!) {\n      fulfillment(id: $id) {\n        events(first: 10) {\n          edges {\n            node {\n              happenedAt\n              status\n            }\n          }\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/Fulfillment/237894043\"\n    },\n  },\n});\n"}]}, {"name": "fulfillmentOrder", "description": "Returns a Fulfillment order resource by ID.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of the FulfillmentOrder to return."}], "returns": [], "examples": [{"description": "Retrieves a list of locations that a fulfillment order can potentially move to.", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `query LocationsForMoveList($fulfillmentOrderId: ID!) {\n      fulfillmentOrder(id: $fulfillmentOrderId) {\n        locationsForMove(first: 10) {\n          edges {\n            node {\n              location {\n                id\n                name\n              }\n              message\n              movable\n              availableLineItemsCount {\n                count\n              }\n              unavailableLineItemsCount {\n                count\n              }\n            }\n          }\n        }\n      }\n    }`,\n    \"variables\": {\n      \"fulfillmentOrderId\": \"gid://shopify/FulfillmentOrder/564786110\"\n    },\n  },\n});\n"}, {"description": "Retrieves a specific fulfillment order", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `query FulfillmentOrderShow($id: ID!) {\n      fulfillmentOrder(id: $id) {\n        assignedLocation {\n          location {\n            id\n          }\n        }\n        channelId\n        destination {\n          address1\n          address2\n          city\n          company\n          countryCode\n          zip\n          firstName\n          lastName\n        }\n        fulfillAt\n        fulfillBy\n        requestStatus\n        status\n        lineItems(first: 10) {\n          edges {\n            node {\n              inventoryItemId\n              remainingQuantity\n              requiresShipping\n              weight {\n                unit\n                value\n              }\n            }\n          }\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/FulfillmentOrder/564786110\"\n    },\n  },\n});\n"}, {"description": "Retrieves fulfillments associated with a fulfillment order", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `query FulfillmentList($fulfillmentOrderId: ID!) {\n      fulfillmentOrder(id: $fulfillmentOrderId) {\n        fulfillments(first: 10) {\n          edges {\n            node {\n              id\n              fulfillmentLineItems(first: 10) {\n                edges {\n                  node {\n                    id\n                    lineItem {\n                      title\n                      variant {\n                        id\n                      }\n                    }\n                    quantity\n                    originalTotalSet {\n                      shopMoney {\n                        amount\n                        currencyCode\n                      }\n                    }\n                  }\n                }\n              }\n              status\n              estimatedDeliveryAt\n              service {\n                handle\n              }\n              trackingInfo(first: 10) {\n                company\n                number\n                url\n              }\n              originAddress {\n                address1\n                address2\n                city\n                countryCode\n                provinceCode\n                zip\n              }\n            }\n          }\n        }\n      }\n    }`,\n    \"variables\": {\n      \"fulfillmentOrderId\": \"gid://shopify/FulfillmentOrder/158170091\"\n    },\n  },\n});\n"}]}, {"name": "fulfillmentOrders", "description": "The paginated list of all fulfillment orders.\nThe returned fulfillment orders are filtered according to the\nfulfillment order access scopes\ngranted to the app.\nUse this query to retrieve fulfillment orders assigned to merchant-managed locations,\nthird-party fulfillment service locations, or all kinds of locations together.\nFor fetching only the fulfillment orders assigned to the app's locations, use the\nassignedFulfillmentOrders\nconnection.", "arguments": [{"name": "after", "type": "String", "required": false, "description": "The elements that come after the specified cursor."}, {"name": "before", "type": "String", "required": false, "description": "The elements that come before the specified cursor."}, {"name": "first", "type": "Int", "required": false, "description": "The first n elements from the paginated list."}, {"name": "includeClosed", "type": "Boolean", "required": false, "description": "Whether to include closed fulfillment orders."}, {"name": "last", "type": "Int", "required": false, "description": "The last n elements from the paginated list."}, {"name": "query", "type": "String", "required": false, "description": "A filter made up of terms, connectives, modifiers, and comparators.\nYou can apply one or more filters to a query. Learn more about Shopify API search syntax."}, {"name": "reverse", "type": "Boolean", "required": false, "description": "Reverse the order of the underlying list."}, {"name": "sortKey", "type": "FulfillmentOrderSortKeys", "required": false, "description": "Sort the underlying list using a key. If your query is slow or returns an error, then try specifying a sort key that matches the field used in the search."}], "returns": [], "examples": []}, {"name": "fulfillmentService", "description": "Returns a FulfillmentService resource by ID.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of the FulfillmentService to return."}], "returns": [], "examples": []}, {"name": "manualHoldsFulfillmentOrders", "description": "Returns a list of fulfillment orders that are on hold.", "arguments": [{"name": "after", "type": "String", "required": false, "description": "The elements that come after the specified cursor."}, {"name": "before", "type": "String", "required": false, "description": "The elements that come before the specified cursor."}, {"name": "first", "type": "Int", "required": false, "description": "The first n elements from the paginated list."}, {"name": "last", "type": "Int", "required": false, "description": "The last n elements from the paginated list."}, {"name": "query", "type": "String", "required": false, "description": "The query conditions used to filter fulfillment orders. Only fulfillment orders corresponding to orders matching the query will be counted.\nSupported filter parameters:\n\norder_financial_status\norder_risk_level\nshipping_address_coordinates_validated\n\nSee the detailed search syntax\nfor more information about using filters."}, {"name": "reverse", "type": "Boolean", "required": false, "description": "Reverse the order of the underlying list."}], "returns": [], "examples": []}], "mutations": [{"name": "carrierServiceCreate", "description": "Creates a new carrier service.", "arguments": [{"name": "input", "type": "DeliveryCarrierServiceCreateInput!", "required": false, "description": "The input fields used to create a carrier service."}], "returns": [], "examples": [{"description": "Create a new CarrierService", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation CarrierServiceCreate($input: DeliveryCarrierServiceCreateInput!) {\n      carrierServiceCreate(input: $input) {\n        carrierService {\n          id\n          name\n          callbackUrl\n          active\n          supportsServiceDiscovery\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"input\": {\n        \"name\": \"test carrier service\",\n        \"callbackUrl\": \"https://example.com/\",\n        \"supportsServiceDiscovery\": true,\n        \"active\": true\n      }\n    },\n  },\n});\n"}, {"description": "carrierServiceCreate reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation CarrierServiceCreate($input: DeliveryCarrierServiceCreateInput!) {\n      carrierServiceCreate(input: $input) {\n        carrierService {\n          id\n          name\n          callbackUrl\n          active\n          supportsServiceDiscovery\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"input\": {\n        \"name\": \"test carrier service\",\n        \"callbackUrl\": \"https://example.com/\",\n        \"supportsServiceDiscovery\": true,\n        \"active\": true\n      }\n    },\n  },\n});\n"}]}, {"name": "carrierServiceUpdate", "description": "Updates a carrier service. Only the app that creates a carrier service can update it.", "arguments": [{"name": "input", "type": "DeliveryCarrierServiceUpdateInput!", "required": false, "description": "The input fields used to update a carrier service."}], "returns": [], "examples": [{"description": "Modify an existing CarrierService", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation CarrierServiceUpdate($input: DeliveryCarrierServiceUpdateInput!) {\n      carrierServiceUpdate(input: $input) {\n        carrierService {\n          id\n          name\n          callbackUrl\n          active\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"input\": {\n        \"id\": \"gid://shopify/DeliveryCarrierService/1036895102\",\n        \"name\": \"new test carrier service\",\n        \"callbackUrl\": \"https://new.example.com/\",\n        \"active\": true\n      }\n    },\n  },\n});\n"}, {"description": "carrierServiceUpdate reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation CarrierServiceUpdate($input: DeliveryCarrierServiceUpdateInput!) {\n      carrierServiceUpdate(input: $input) {\n        carrierService {\n          id\n          name\n          callbackUrl\n          active\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"input\": {\n        \"id\": \"gid://shopify/DeliveryCarrierService/1036895102\",\n        \"name\": \"new test carrier service\",\n        \"callbackUrl\": \"https://new.example.com/\",\n        \"active\": true\n      }\n    },\n  },\n});\n"}]}, {"name": "deliveryCustomizationActivation", "description": "Activates and deactivates delivery customizations.", "arguments": [{"name": "enabled", "type": "Boolean!", "required": false, "description": "The enabled status of the delivery customizations."}, {"name": "ids", "type": "[ID!]!", "required": false, "description": "The global IDs of the delivery customizations."}], "returns": [], "examples": []}, {"name": "deliveryCustomizationCreate", "description": "Creates a delivery customization.", "arguments": [{"name": "deliveryCustomization", "type": "DeliveryCustomizationInput!", "required": false, "description": "The input data used to create the delivery customization."}], "returns": [], "examples": []}, {"name": "deliveryCustomizationDelete", "description": "Creates a delivery customization.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The global ID of the delivery customization."}], "returns": [], "examples": []}, {"name": "deliveryCustomizationUpdate", "description": "Updates a delivery customization.", "arguments": [{"name": "deliveryCustomization", "type": "DeliveryCustomizationInput!", "required": false, "description": "The input data used to update the delivery customization."}, {"name": "id", "type": "ID!", "required": false, "description": "The global ID of the delivery customization."}], "returns": [], "examples": []}, {"name": "deliveryProfileCreate", "description": "Create a delivery profile.", "arguments": [{"name": "profile", "type": "DeliveryProfileInput!", "required": false, "description": "Specifies the input fields for a delivery profile."}], "returns": [], "examples": [{"description": "Create delivery profile", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation createDeliveryProfile($profile: DeliveryProfileInput!) {\n      deliveryProfileCreate(profile: $profile) {\n        profile {\n          id\n          name\n          profileLocationGroups {\n            locationGroup {\n              id\n              locations(first: 5) {\n                nodes {\n                  name\n                  address {\n                    country\n                  }\n                }\n              }\n            }\n            locationGroupZones(first: 2) {\n              edges {\n                node {\n                  zone {\n                    id\n                    name\n                    countries {\n                      code {\n                        countryCode\n                      }\n                      provinces {\n                        code\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"profile\": {\n        \"name\": \"Sample Delivery Profile\",\n        \"locationGroupsToCreate\": [\n          {\n            \"locationsToAdd\": [\n              \"gid://shopify/Location/750123840\",\n              \"gid://shopify/Location/884687543\"\n            ],\n            \"zonesToCreate\": [\n              {\n                \"name\": \"Canada Zone\",\n                \"countries\": [\n                  {\n                    \"code\": \"CA\",\n                    \"provinces\": [\n                      {\n                        \"code\": \"ON\"\n                      }\n                    ]\n                  }\n                ],\n                \"methodDefinitionsToCreate\": [\n                  {\n                    \"name\": \"Standard\",\n                    \"rateDefinition\": {\n                      \"price\": {\n                        \"amount\": 1.0,\n                        \"currencyCode\": \"USD\"\n                      }\n                    },\n                    \"weightConditionsToCreate\": [\n                      {\n                        \"operator\": \"GREATER_THAN_OR_EQUAL_TO\",\n                        \"criteria\": {\n                          \"value\": 0,\n                          \"unit\": \"KILOGRAMS\"\n                        }\n                      },\n                      {\n                        \"operator\": \"LESS_THAN_OR_EQUAL_TO\",\n                        \"criteria\": {\n                          \"value\": 15.0,\n                          \"unit\": \"KILOGRAMS\"\n                        }\n                      }\n                    ]\n                  }\n                ]\n              }\n            ]\n          },\n          {\n            \"locationsToAdd\": [\n              \"gid://shopify/Location/415211365\"\n            ],\n            \"zonesToCreate\": [\n              {\n                \"name\": \"USA Zone\",\n                \"countries\": {\n                  \"code\": \"US\",\n                  \"provinces\": [\n                    {\n                      \"code\": \"CO\"\n                    }\n                  ]\n                },\n                \"methodDefinitionsToCreate\": [\n                  {\n                    \"name\": \"Standard\",\n                    \"rateDefinition\": {\n                      \"price\": {\n                        \"amount\": 1.0,\n                        \"currencyCode\": \"USD\"\n                      }\n                    }\n                  }\n                ]\n              },\n              {\n                \"name\": \"Mexico Zone\",\n                \"countries\": {\n                  \"code\": \"MX\",\n                  \"provinces\": [\n                    {\n                      \"code\": \"MOR\"\n                    }\n                  ]\n                },\n                \"methodDefinitionsToCreate\": [\n                  {\n                    \"name\": \"Standard\",\n                    \"rateDefinition\": {\n                      \"price\": {\n                        \"amount\": 1.0,\n                        \"currencyCode\": \"USD\"\n                      }\n                    }\n                  }\n                ]\n              }\n            ]\n          }\n        ]\n      }\n    },\n  },\n});\n"}, {"description": "deliveryProfileCreate reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation createDeliveryProfile($profile: DeliveryProfileInput!) {\n      deliveryProfileCreate(profile: $profile) {\n        profile {\n          id\n          name\n          profileLocationGroups {\n            locationGroup {\n              id\n              locations(first: 5) {\n                nodes {\n                  name\n                  address {\n                    country\n                  }\n                }\n              }\n            }\n            locationGroupZones(first: 2) {\n              edges {\n                node {\n                  zone {\n                    id\n                    name\n                    countries {\n                      code {\n                        countryCode\n                      }\n                      provinces {\n                        code\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"profile\": {\n        \"name\": \"Sample Delivery Profile\",\n        \"locationGroupsToCreate\": [\n          {\n            \"locationsToAdd\": [\n              \"gid://shopify/Location/750123840\",\n              \"gid://shopify/Location/884687543\"\n            ],\n            \"zonesToCreate\": [\n              {\n                \"name\": \"Canada Zone\",\n                \"countries\": [\n                  {\n                    \"code\": \"CA\",\n                    \"provinces\": [\n                      {\n                        \"code\": \"ON\"\n                      }\n                    ]\n                  }\n                ],\n                \"methodDefinitionsToCreate\": [\n                  {\n                    \"name\": \"Standard\",\n                    \"rateDefinition\": {\n                      \"price\": {\n                        \"amount\": 1.0,\n                        \"currencyCode\": \"USD\"\n                      }\n                    },\n                    \"weightConditionsToCreate\": [\n                      {\n                        \"operator\": \"GREATER_THAN_OR_EQUAL_TO\",\n                        \"criteria\": {\n                          \"value\": 0,\n                          \"unit\": \"KILOGRAMS\"\n                        }\n                      },\n                      {\n                        \"operator\": \"LESS_THAN_OR_EQUAL_TO\",\n                        \"criteria\": {\n                          \"value\": 15.0,\n                          \"unit\": \"KILOGRAMS\"\n                        }\n                      }\n                    ]\n                  }\n                ]\n              }\n            ]\n          },\n          {\n            \"locationsToAdd\": [\n              \"gid://shopify/Location/415211365\"\n            ],\n            \"zonesToCreate\": [\n              {\n                \"name\": \"USA Zone\",\n                \"countries\": {\n                  \"code\": \"US\",\n                  \"provinces\": [\n                    {\n                      \"code\": \"CO\"\n                    }\n                  ]\n                },\n                \"methodDefinitionsToCreate\": [\n                  {\n                    \"name\": \"Standard\",\n                    \"rateDefinition\": {\n                      \"price\": {\n                        \"amount\": 1.0,\n                        \"currencyCode\": \"USD\"\n                      }\n                    }\n                  }\n                ]\n              },\n              {\n                \"name\": \"Mexico Zone\",\n                \"countries\": {\n                  \"code\": \"MX\",\n                  \"provinces\": [\n                    {\n                      \"code\": \"MOR\"\n                    }\n                  ]\n                },\n                \"methodDefinitionsToCreate\": [\n                  {\n                    \"name\": \"Standard\",\n                    \"rateDefinition\": {\n                      \"price\": {\n                        \"amount\": 1.0,\n                        \"currencyCode\": \"USD\"\n                      }\n                    }\n                  }\n                ]\n              }\n            ]\n          }\n        ]\n      }\n    },\n  },\n});\n"}]}, {"name": "deliveryProfileUpdate", "description": "Update a delivery profile.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of the delivery profile to update."}, {"name": "leaveLegacyModeProfiles", "type": "Boolean", "required": false, "description": "Whether this delivery profile should leave legacy mode."}, {"name": "profile", "type": "DeliveryProfileInput!", "required": false, "description": "Specifies the input fields for a delivery profile."}], "returns": [], "examples": [{"description": "Update delivery profile to add a location and a zone to an existing group", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation deliveryProfileUpdate($id: ID!, $profile: DeliveryProfileInput!) {\n      deliveryProfileUpdate(id: $id, profile: $profile) {\n        profile {\n          id\n          name\n          profileLocationGroups {\n            locationGroup {\n              id\n              locations(first: 5) {\n                nodes {\n                  name\n                  address {\n                    country\n                  }\n                }\n              }\n            }\n            locationGroupZones(first: 2) {\n              edges {\n                node {\n                  zone {\n                    id\n                    name\n                    countries {\n                      code {\n                        countryCode\n                      }\n                      provinces {\n                        code\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/DeliveryProfile/593363170\",\n      \"profile\": {\n        \"name\": \"Sample Updated Delivery Profile\",\n        \"locationGroupsToUpdate\": [\n          {\n            \"id\": \"gid://shopify/DeliveryLocationGroup/955592432\",\n            \"locationsToAdd\": [\n              \"gid://shopify/Location/884687543\"\n            ],\n            \"zonesToCreate\": [\n              {\n                \"name\": \"USA Zone\",\n                \"countries\": {\n                  \"code\": \"US\",\n                  \"provinces\": [\n                    {\n                      \"code\": \"CO\"\n                    }\n                  ]\n                },\n                \"methodDefinitionsToCreate\": [\n                  {\n                    \"name\": \"Standard\",\n                    \"rateDefinition\": {\n                      \"price\": {\n                        \"amount\": 1.0,\n                        \"currencyCode\": \"USD\"\n                      }\n                    }\n                  }\n                ]\n              }\n            ]\n          }\n        ]\n      }\n    },\n  },\n});\n"}, {"description": "Update delivery profile to add a location group", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation deliveryProfileUpdate($id: ID!, $profile: DeliveryProfileInput!) {\n      deliveryProfileUpdate(id: $id, profile: $profile) {\n        profile {\n          id\n          name\n          profileLocationGroups {\n            locationGroup {\n              id\n              locations(first: 5) {\n                nodes {\n                  name\n                  address {\n                    country\n                  }\n                }\n              }\n            }\n            locationGroupZones(first: 2) {\n              edges {\n                node {\n                  zone {\n                    id\n                    name\n                    countries {\n                      code {\n                        countryCode\n                      }\n                      provinces {\n                        code\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/DeliveryProfile/593363170\",\n      \"profile\": {\n        \"name\": \"Sample Updated Delivery Profile\",\n        \"locationGroupsToCreate\": [\n          {\n            \"locationsToAdd\": [\n              \"gid://shopify/Location/415211365\"\n            ],\n            \"zonesToCreate\": [\n              {\n                \"name\": \"USA Zone\",\n                \"countries\": {\n                  \"code\": \"US\",\n                  \"provinces\": [\n                    {\n                      \"code\": \"CO\"\n                    }\n                  ]\n                },\n                \"methodDefinitionsToCreate\": [\n                  {\n                    \"name\": \"Standard\",\n                    \"rateDefinition\": {\n                      \"price\": {\n                        \"amount\": 1.0,\n                        \"currencyCode\": \"USD\"\n                      }\n                    }\n                  }\n                ]\n              },\n              {\n                \"name\": \"Mexico Zone\",\n                \"countries\": {\n                  \"code\": \"MX\",\n                  \"provinces\": [\n                    {\n                      \"code\": \"MOR\"\n                    }\n                  ]\n                },\n                \"methodDefinitionsToCreate\": [\n                  {\n                    \"name\": \"Standard\",\n                    \"rateDefinition\": {\n                      \"price\": {\n                        \"amount\": 1.0,\n                        \"currencyCode\": \"USD\"\n                      }\n                    }\n                  }\n                ]\n              }\n            ]\n          }\n        ]\n      }\n    },\n  },\n});\n"}, {"description": "deliveryProfileUpdate reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation deliveryProfileUpdate($id: ID!, $profile: DeliveryProfileInput!) {\n      deliveryProfileUpdate(id: $id, profile: $profile) {\n        profile {\n          id\n          name\n          profileLocationGroups {\n            locationGroup {\n              id\n              locations(first: 5) {\n                nodes {\n                  name\n                  address {\n                    country\n                  }\n                }\n              }\n            }\n            locationGroupZones(first: 2) {\n              edges {\n                node {\n                  zone {\n                    id\n                    name\n                    countries {\n                      code {\n                        countryCode\n                      }\n                      provinces {\n                        code\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/DeliveryProfile/593363170\",\n      \"profile\": {\n        \"name\": \"Sample Updated Delivery Profile\",\n        \"locationGroupsToUpdate\": [\n          {\n            \"id\": \"gid://shopify/DeliveryLocationGroup/955592432\",\n            \"locationsToAdd\": [\n              \"gid://shopify/Location/884687543\"\n            ],\n            \"zonesToCreate\": [\n              {\n                \"name\": \"USA Zone\",\n                \"countries\": {\n                  \"code\": \"US\",\n                  \"provinces\": [\n                    {\n                      \"code\": \"CO\"\n                    }\n                  ]\n                },\n                \"methodDefinitionsToCreate\": [\n                  {\n                    \"name\": \"Standard\",\n                    \"rateDefinition\": {\n                      \"price\": {\n                        \"amount\": 1.0,\n                        \"currencyCode\": \"USD\"\n                      }\n                    }\n                  }\n                ]\n              }\n            ]\n          }\n        ]\n      }\n    },\n  },\n});\n"}]}, {"name": "deliveryPromiseParticipantsUpdate", "description": "Updates the delivery promise participants by adding or removing owners based on a branded promise handle.", "arguments": [{"name": "brandedPromiseHandle", "type": "String!", "required": false, "description": "The branded promise handle to update the delivery promise participants for."}, {"name": "ownersToAdd", "type": "[ID!]", "required": false, "description": "The owners to add to the delivery promise participants."}, {"name": "ownersToRemove", "type": "[ID!]", "required": false, "description": "The owners to remove from the delivery promise participants."}], "returns": [], "examples": []}, {"name": "deliveryPromiseProviderUpsert", "description": "Creates or updates a delivery promise provider. Currently restricted to select approved delivery promise partners.", "arguments": [{"name": "active", "type": "Boolean", "required": false, "description": "Whether the delivery promise provider is active. Defaults to true when creating a provider."}, {"name": "fulfillmentDelay", "type": "Int", "required": false, "description": "The number of seconds to add to the current time as a buffer when looking up delivery promises. Represents how long the shop requires before releasing an order to the fulfillment provider."}, {"name": "locationId", "type": "ID!", "required": false, "description": "The ID of the location that will be associated with the delivery promise provider."}, {"name": "timeZone", "type": "String", "required": false, "description": "The time zone to be used for interpreting day of week and cutoff times in delivery schedules when looking up delivery promises. Defaults to UTC when creating a provider."}], "returns": [], "examples": []}, {"name": "deliverySettingUpdate", "description": "Set the delivery settings for a shop.", "arguments": [{"name": "setting", "type": "DeliverySettingInput!", "required": false, "description": "Specifies the input fields for the delivery shop level settings."}], "returns": [], "examples": []}, {"name": "fulfillmentCancel", "description": "Cancels a fulfillment.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of the fulfillment to be canceled."}], "returns": [], "examples": [{"description": "Cancels a fulfillment", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation fulfillmentCancel($id: ID!) {\n      fulfillmentCancel(id: $id) {\n        fulfillment {\n          id\n          status\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/Fulfillment/237894043\"\n    },\n  },\n});\n"}, {"description": "fulfillmentCancel reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation fulfillmentCancel($id: ID!) {\n      fulfillmentCancel(id: $id) {\n        fulfillment {\n          id\n          status\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/Fulfillment/237894043\"\n    },\n  },\n});\n"}]}, {"name": "fulfillmentCreate", "description": "Creates a fulfillment for one or many fulfillment orders.\nThe fulfillment orders are associated with the same order and are assigned to the same location.", "arguments": [{"name": "fulfillment", "type": "FulfillmentInput!", "required": false, "description": "The input fields used to create a fulfillment from fulfillment orders."}, {"name": "message", "type": "String", "required": false, "description": "An optional message for the fulfillment request."}], "returns": [], "examples": []}, {"name": "fulfillmentCreateV2", "description": "Creates a fulfillment for one or many fulfillment orders.\nThe fulfillment orders are associated with the same order and are assigned to the same location. Use fulfillmentCreate instead.", "arguments": [{"name": "fulfillment", "type": "FulfillmentV2Input!", "required": false, "description": "The input fields used to create a fulfillment from fulfillment orders."}, {"name": "message", "type": "String", "required": false, "description": "An optional message for the fulfillment request."}], "returns": [], "examples": [{"description": "Creates a fulfillment for one or many fulfillment orders", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation FulfillmentCreate($fulfillment: FulfillmentV2Input!) {\n      fulfillmentCreateV2(fulfillment: $fulfillment) {\n        fulfillment {\n          fulfillmentLineItems(first: 10) {\n            edges {\n              node {\n                id\n                lineItem {\n                  title\n                  variant {\n                    id\n                  }\n                }\n                quantity\n                originalTotalSet {\n                  shopMoney {\n                    amount\n                    currencyCode\n                  }\n                }\n              }\n            }\n          }\n          status\n          estimatedDeliveryAt\n          location {\n            id\n            legacyResourceId\n          }\n          service {\n            handle\n          }\n          trackingInfo(first: 10) {\n            company\n            number\n            url\n          }\n          originAddress {\n            address1\n            address2\n            city\n            countryCode\n            provinceCode\n            zip\n          }\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"fulfillment\": {\n        \"lineItemsByFulfillmentOrder\": {\n          \"fulfillmentOrderId\": \"gid://shopify/FulfillmentOrder/940656279\"\n        }\n      }\n    },\n  },\n});\n"}, {"description": "Fulfill a fulfillment order", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation fulfillmentCreateV2($fulfillment: FulfillmentV2Input!) {\n      fulfillmentCreateV2(fulfillment: $fulfillment) {\n        fulfillment {\n          id\n          status\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"fulfillment\": {\n        \"lineItemsByFulfillmentOrder\": {\n          \"fulfillmentOrderId\": \"gid://shopify/FulfillmentOrder/940656279\"\n        }\n      }\n    },\n  },\n});\n"}, {"description": "Fulfill a fulfillment order with tracking data specified", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation fulfillmentCreateV2($fulfillment: FulfillmentV2Input!) {\n      fulfillmentCreateV2(fulfillment: $fulfillment) {\n        fulfillment {\n          id\n          status\n          trackingInfo(first: 10) {\n            company\n            number\n            url\n          }\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"fulfillment\": {\n        \"lineItemsByFulfillmentOrder\": {\n          \"fulfillmentOrderId\": \"gid://shopify/FulfillmentOrder/940656279\"\n        },\n        \"trackingInfo\": {\n          \"company\": \"UPS\",\n          \"number\": \"1Z001985YW99744790\"\n        }\n      }\n    },\n  },\n});\n"}, {"description": "Fulfill a fulfillment order with two tracking numbers and  a supported tracking company name specified", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation fulfillmentCreateV2($fulfillment: FulfillmentV2Input!) {\n      fulfillmentCreateV2(fulfillment: $fulfillment) {\n        fulfillment {\n          id\n          status\n          trackingInfo(first: 10) {\n            company\n            number\n            url\n          }\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"fulfillment\": {\n        \"lineItemsByFulfillmentOrder\": {\n          \"fulfillmentOrderId\": \"gid://shopify/FulfillmentOrder/940656279\"\n        },\n        \"trackingInfo\": {\n          \"company\": \"UPS\",\n          \"numbers\": [\n            \"1Z001985YW99744790\",\n            \"1Z001985YW99744791\"\n          ]\n        }\n      }\n    },\n  },\n});\n"}, {"description": "Fulfill a fulfillment order with two tracking numbers and tracking urls from different tracking tracking providers", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation fulfillmentCreateV2($fulfillment: FulfillmentV2Input!) {\n      fulfillmentCreateV2(fulfillment: $fulfillment) {\n        fulfillment {\n          id\n          status\n          trackingInfo(first: 10) {\n            company\n            number\n            url\n          }\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"fulfillment\": {\n        \"lineItemsByFulfillmentOrder\": {\n          \"fulfillmentOrderId\": \"gid://shopify/FulfillmentOrder/940656279\"\n        },\n        \"trackingInfo\": {\n          \"numbers\": [\n            \"1Z1234512345123456\",\n            \"MS123\"\n          ],\n          \"urls\": [\n            \"https://www.ups.com/WebTracking?loc=en_US&requester=ST&trackNums=1Z1234512345123456\",\n            \"http://shopify-unsupported-tracking-company.com?tracking_number=MS123\"\n          ]\n        }\n      }\n    },\n  },\n});\n"}, {"description": "Fulfill a fulfillment order without providing tracking info", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation fulfillmentCreateV2($fulfillment: FulfillmentV2Input!) {\n      fulfillmentCreateV2(fulfillment: $fulfillment) {\n        fulfillment {\n          id\n          status\n          trackingInfo(first: 10) {\n            company\n            number\n            url\n          }\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"fulfillment\": {\n        \"lineItemsByFulfillmentOrder\": {\n          \"fulfillmentOrderId\": \"gid://shopify/FulfillmentOrder/940656279\"\n        }\n      }\n    },\n  },\n});\n"}, {"description": "Partially fulfill a fulfillment order", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation fulfillmentCreateV2($fulfillment: FulfillmentV2Input!) {\n      fulfillmentCreateV2(fulfillment: $fulfillment) {\n        fulfillment {\n          id\n          status\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"fulfillment\": {\n        \"lineItemsByFulfillmentOrder\": {\n          \"fulfillmentOrderId\": \"gid://shopify/FulfillmentOrder/940656279\",\n          \"fulfillmentOrderLineItems\": {\n            \"id\": \"gid://shopify/FulfillmentOrderLineItem/361939597\",\n            \"quantity\": 1\n          }\n        }\n      }\n    },\n  },\n});\n"}, {"description": "fulfillmentCreateV2 reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation FulfillmentCreate($fulfillment: FulfillmentV2Input!) {\n      fulfillmentCreateV2(fulfillment: $fulfillment) {\n        fulfillment {\n          fulfillmentLineItems(first: 10) {\n            edges {\n              node {\n                id\n                lineItem {\n                  title\n                  variant {\n                    id\n                  }\n                }\n                quantity\n                originalTotalSet {\n                  shopMoney {\n                    amount\n                    currencyCode\n                  }\n                }\n              }\n            }\n          }\n          status\n          estimatedDeliveryAt\n          location {\n            id\n            legacyResourceId\n          }\n          service {\n            handle\n          }\n          trackingInfo(first: 10) {\n            company\n            number\n            url\n          }\n          originAddress {\n            address1\n            address2\n            city\n            countryCode\n            provinceCode\n            zip\n          }\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"fulfillment\": {\n        \"lineItemsByFulfillmentOrder\": {\n          \"fulfillmentOrderId\": \"gid://shopify/FulfillmentOrder/940656279\"\n        }\n      }\n    },\n  },\n});\n"}]}, {"name": "fulfillmentEventCreate", "description": "Creates a fulfillment event for a specified fulfillment.", "arguments": [{"name": "fulfillmentEvent", "type": "FulfillmentEventInput!", "required": false, "description": "The input fields used to create a fulfillment event for a fulfillment."}], "returns": [], "examples": [{"description": "Creates a fulfillment event", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation fulfillmentEventCreate($fulfillmentEvent: FulfillmentEventInput!) {\n      fulfillmentEventCreate(fulfillmentEvent: $fulfillmentEvent) {\n        fulfillmentEvent {\n          address1\n          city\n          country\n          estimatedDeliveryAt\n          happenedAt\n          latitude\n          longitude\n          message\n          province\n          status\n          zip\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"fulfillmentEvent\": {\n        \"fulfillmentId\": \"gid://shopify/Fulfillment/237894043\",\n        \"address1\": \"150 Elgin St.\",\n        \"city\": \"Ottawa\",\n        \"country\": \"Canada\",\n        \"estimatedDeliveryAt\": \"2024-11-15T23:40:59Z\",\n        \"happenedAt\": \"2024-11-15T23:40:49Z\",\n        \"latitude\": 1.234,\n        \"longitude\": 9.876,\n        \"message\": \"In transit\",\n        \"province\": \"Ontario\",\n        \"status\": \"IN_TRANSIT\",\n        \"zip\": \"K2P1L4\"\n      }\n    },\n  },\n});\n"}, {"description": "fulfillmentEventCreate reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation fulfillmentEventCreate($fulfillmentEvent: FulfillmentEventInput!) {\n      fulfillmentEventCreate(fulfillmentEvent: $fulfillmentEvent) {\n        fulfillmentEvent {\n          id\n          status\n          message\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"fulfillmentEvent\": {\n        \"fulfillmentId\": \"gid://shopify/Fulfillment/237894043\",\n        \"address1\": \"151 O'Connor St\",\n        \"city\": \"Ottawa\",\n        \"province\": \"Ontario\",\n        \"country\": \"Canada\",\n        \"zip\": \"K2P 2L8\",\n        \"latitude\": 45.4191176,\n        \"longitude\": 75.6966166,\n        \"happenedAt\": \"2024-03-07T15:50:00Z\",\n        \"estimatedDeliveryAt\": \"2024-03-07T16:50:00Z\",\n        \"message\": \"This package is now out for delivery!\",\n        \"status\": \"OUT_FOR_DELIVERY\"\n      }\n    },\n  },\n});\n"}]}, {"name": "fulfillmentOrderAcceptCancellationRequest", "description": "Accept a cancellation request sent to a fulfillment service for a fulfillment order.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of the fulfillment order associated with the cancellation request."}, {"name": "message", "type": "String", "required": false, "description": "An optional reason for accepting the cancellation request."}], "returns": [], "examples": [{"description": "Accepts a cancellation request", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation fulfillmentOrderAcceptCancellationRequest($id: ID!, $message: String) {\n      fulfillmentOrderAcceptCancellationRequest(id: $id, message: $message) {\n        fulfillmentOrder {\n          id\n          status\n          requestStatus\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/FulfillmentOrder/1046000777\",\n      \"message\": \"Fragile\"\n    },\n  },\n});\n"}, {"description": "fulfillmentOrderAcceptCancellationRequest reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation fulfillmentOrderAcceptCancellationRequest($id: ID!, $message: String) {\n      fulfillmentOrderAcceptCancellationRequest(id: $id, message: $message) {\n        fulfillmentOrder {\n          id\n          status\n          requestStatus\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/FulfillmentOrder/1046000777\",\n      \"message\": \"Fragile\"\n    },\n  },\n});\n"}]}, {"name": "fulfillmentOrderAcceptFulfillmentRequest", "description": "Accepts a fulfillment request sent to a fulfillment service for a fulfillment order.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of the fulfillment order associated with the fulfillment request."}, {"name": "message", "type": "String", "required": false, "description": "An optional reason for accepting the fulfillment request."}], "returns": [], "examples": [{"description": "Accepts a fulfillment request", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation fulfillmentOrderAcceptFulfillmentRequest($id: ID!, $message: String) {\n      fulfillmentOrderAcceptFulfillmentRequest(id: $id, message: $message) {\n        fulfillmentOrder {\n          id\n          status\n          requestStatus\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/FulfillmentOrder/1046000778\",\n      \"message\": \"Fragile\"\n    },\n  },\n});\n"}, {"description": "fulfillmentOrderAcceptFulfillmentRequest reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation fulfillmentOrderAcceptFulfillmentRequest($id: ID!, $message: String) {\n      fulfillmentOrderAcceptFulfillmentRequest(id: $id, message: $message) {\n        fulfillmentOrder {\n          id\n          status\n          requestStatus\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/FulfillmentOrder/1046000778\",\n      \"message\": \"Fragile\"\n    },\n  },\n});\n"}]}, {"name": "fulfillmentOrderCancel", "description": "Marks a fulfillment order as canceled.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of the fulfillment order to mark as canceled."}], "returns": [], "examples": [{"description": "Cancel a fulfillment order", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation fulfillmentOrderCancel($id: ID!) {\n      fulfillmentOrderCancel(id: $id) {\n        fulfillmentOrder {\n          id\n          status\n          requestStatus\n        }\n        replacementFulfillmentOrder {\n          id\n          status\n          requestStatus\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/FulfillmentOrder/1046000804\"\n    },\n  },\n});\n"}, {"description": "fulfillmentOrderCancel reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation fulfillmentOrderCancel($id: ID!) {\n      fulfillmentOrderCancel(id: $id) {\n        fulfillmentOrder {\n          id\n          status\n          requestStatus\n        }\n        replacementFulfillmentOrder {\n          id\n          status\n          requestStatus\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/FulfillmentOrder/1046000804\"\n    },\n  },\n});\n"}]}, {"name": "fulfillmentOrderClose", "description": "Marks an in-progress fulfillment order as incomplete,\nindicating the fulfillment service is unable to ship any remaining items,\nand closes the fulfillment request.\nThis mutation can only be called for fulfillment orders that meet the following criteria:\n\nAssigned to a fulfillment service location,\nThe fulfillment request has been accepted,\nThe fulfillment order status is IN_PROGRESS.\n\nThis mutation can only be called by the fulfillment service app that accepted the fulfillment request.\nCalling this mutation returns the control of the fulfillment order to the merchant, allowing them to\nmove the fulfillment order line items to another location and fulfill from there,\nremove and refund the line items, or to request fulfillment from the same fulfillment service again.\nClosing a fulfillment order is explained in\nthe fulfillment service guide.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of the fulfillment order to mark as incomplete."}, {"name": "message", "type": "String", "required": false, "description": "An optional reason for marking the fulfillment order as incomplete."}], "returns": [], "examples": [{"description": "Marks a fulfillment order as incomplete", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation fulfillmentOrderClose($id: ID!, $message: String) {\n      fulfillmentOrderClose(id: $id, message: $message) {\n        fulfillmentOrder {\n          id\n          status\n          requestStatus\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/FulfillmentOrder/1046000779\",\n      \"message\": \"Out of Stock\"\n    },\n  },\n});\n"}, {"description": "fulfillmentOrderClose reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation fulfillmentOrderClose($id: ID!, $message: String) {\n      fulfillmentOrderClose(id: $id, message: $message) {\n        fulfillmentOrder {\n          id\n          status\n          requestStatus\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/FulfillmentOrder/1046000779\",\n      \"message\": \"Out of Stock\"\n    },\n  },\n});\n"}]}, {"name": "fulfillmentOrderHold", "description": "Applies a fulfillment hold on a fulfillment order.\nAs of the\n2025-01 API version,\nthe mutation can be successfully executed on fulfillment orders that are already on hold.\nTo place multiple holds on a fulfillment order, apps need to supply the\nhandle\nfield. Each app can place up to\n10 active holds\nper fulfillment order. If an app attempts to place more than this, the mutation will return\na user error indicating that the limit has been reached.\nThe app would need to release one of its existing holds before being able to apply a new one.", "arguments": [{"name": "fulfillmentHold", "type": "FulfillmentOrderHoldInput!", "required": false, "description": "The details of the fulfillment hold applied on the fulfillment order."}, {"name": "id", "type": "ID!", "required": false, "description": "The ID of the fulfillment order on which a fulfillment hold is applied."}], "returns": [], "examples": [{"description": "Applies a fulfillment hold on an open fulfillment order", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation FulfillmentOrderHold($fulfillmentHold: FulfillmentOrderHoldInput!, $id: ID!) {\n      fulfillmentOrderHold(fulfillmentHold: $fulfillmentHold, id: $id) {\n        fulfillmentOrder {\n          id\n        }\n        remainingFulfillmentOrder {\n          id\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"fulfillmentHold\": {\n        \"reason\": \"INVENTORY_OUT_OF_STOCK\",\n        \"reasonNotes\": \"Waiting on new shipment\"\n      },\n      \"id\": \"gid://shopify/FulfillmentOrder/1046001479\"\n    },\n  },\n});\n"}, {"description": "Put a fulfillment order on hold", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation fulfillmentOrderHold($fulfillmentHold: FulfillmentOrderHoldInput!, $id: ID!) {\n      fulfillmentOrderHold(fulfillmentHold: $fulfillmentHold, id: $id) {\n        fulfillmentOrder {\n          id\n          status\n          requestStatus\n          fulfillmentHolds {\n            reason\n            reasonNotes\n          }\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"fulfillmentHold\": {\n        \"notifyMerchant\": true,\n        \"reason\": \"INVENTORY_OUT_OF_STOCK\",\n        \"reasonNotes\": \"Waiting on new shipment\"\n      },\n      \"id\": \"gid://shopify/FulfillmentOrder/1046001480\"\n    },\n  },\n});\n"}, {"description": "fulfillmentOrderHold reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation FulfillmentOrderHold($fulfillmentHold: FulfillmentOrderHoldInput!, $id: ID!) {\n      fulfillmentOrderHold(fulfillmentHold: $fulfillmentHold, id: $id) {\n        fulfillmentOrder {\n          id\n        }\n        remainingFulfillmentOrder {\n          id\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"fulfillmentHold\": {\n        \"reason\": \"INVENTORY_OUT_OF_STOCK\",\n        \"reasonNotes\": \"Waiting on new shipment\"\n      },\n      \"id\": \"gid://shopify/FulfillmentOrder/1046001479\"\n    },\n  },\n});\n"}]}, {"name": "fulfillmentOrderLineItemsPreparedForPickup", "description": "Mark line items associated with a fulfillment order as being ready for pickup by a customer.\nSends a Ready For Pickup notification to the customer to let them know that their order is ready\nto be picked up.", "arguments": [{"name": "input", "type": "FulfillmentOrderLineItemsPreparedForPickupInput!", "required": false, "description": "The input for marking fulfillment order line items as ready for pickup."}], "returns": [], "examples": [{"description": "Mark all line items associated with a fulfillment order as being ready for a customer to pick up", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation fulfillmentOrderLineItemsPreparedForPickup($input: FulfillmentOrderLineItemsPreparedForPickupInput!) {\n      fulfillmentOrderLineItemsPreparedForPickup(input: $input) {\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"input\": {\n        \"lineItemsByFulfillmentOrder\": [\n          {\n            \"fulfillmentOrderId\": \"gid://shopify/FulfillmentOrder/1046000776\"\n          }\n        ]\n      }\n    },\n  },\n});\n"}, {"description": "fulfillmentOrderLineItemsPreparedForPickup reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation fulfillmentOrderLineItemsPreparedForPickup($input: FulfillmentOrderLineItemsPreparedForPickupInput!) {\n      fulfillmentOrderLineItemsPreparedForPickup(input: $input) {\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"input\": {\n        \"lineItemsByFulfillmentOrder\": [\n          {\n            \"fulfillmentOrderId\": \"gid://shopify/FulfillmentOrder/1046000776\"\n          }\n        ]\n      }\n    },\n  },\n});\n"}]}, {"name": "fulfillmentOrderMerge", "description": "Merges a set or multiple sets of fulfillment orders together into one based on\nline item inputs and quantities.", "arguments": [{"name": "fulfillmentOrderMergeInputs", "type": "[FulfillmentOrderMergeInput!]!", "required": false, "description": "One or more sets of fulfillment orders to be merged."}], "returns": [], "examples": []}, {"name": "fulfillmentOrderMove", "description": "Changes the location which is assigned to fulfill a number of unfulfilled fulfillment order line items.\nMoving a fulfillment order will fail in the following circumstances:\n\nThe fulfillment order is closed.\nThe destination location has never stocked the requested inventory item.\nThe API client doesn't have the correct permissions.\n\nLine items which have already been fulfilled can't be re-assigned\nand will always remain assigned to the original location.\nYou can't change the assigned location while a fulfillment order has a\nrequest status\nof SUBMITTED, ACCEPTED, CANCELLATION_REQUESTED, or CANCELLATION_REJECTED.\nThese request statuses mean that a fulfillment order is awaiting action by a fulfillment service\nand can't be re-assigned without first having the fulfillment service accept a cancellation request.\nThis behavior is intended to prevent items from being fulfilled by multiple locations or fulfillment services.\nHow re-assigning line items affects fulfillment orders\nFirst scenario: Re-assign all line items belonging to a fulfillment order to a new location.\nIn this case, the\nassignedLocation\nof the original fulfillment order will be updated to the new location.\nSecond scenario: Re-assign a subset of the line items belonging to a fulfillment order to a new location.\nYou can specify a subset of line items using the fulfillmentOrderLineItems parameter\n(available as of the 2023-04 API version),\nor specify that the original fulfillment order contains line items which have already been fulfilled.\nIf the new location is already assigned to another active fulfillment order, on the same order, then\na new fulfillment order is created. The existing fulfillment order is closed and line items are recreated\nin a new fulfillment order.", "arguments": [{"name": "fulfillmentOrderLineItems", "type": "[FulfillmentOrderLineItemInput!]", "required": false, "description": "The fulfillment order line items to be moved.\nIf left blank, all unfulfilled line items belonging to the fulfillment order are moved."}, {"name": "id", "type": "ID!", "required": false, "description": "The ID of the fulfillment order to be moved."}, {"name": "newLocationId", "type": "ID!", "required": false, "description": "The ID of the location where the fulfillment order will be moved."}], "returns": [], "examples": [{"description": "Move some of the line items in a fulfillment order to a new location", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation fulfillmentOrderMove($id: ID!, $newLocationId: ID!) {\n      fulfillmentOrderMove(id: $id, newLocationId: $newLocationId) {\n        movedFulfillmentOrder {\n          id\n          status\n        }\n        originalFulfillmentOrder {\n          id\n          status\n        }\n        remainingFulfillmentOrder {\n          id\n          status\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/FulfillmentOrder/940656279\",\n      \"newLocationId\": \"gid://shopify/Location/346779380\"\n    },\n  },\n});\n"}, {"description": "Moves a fulfillment order to a new location", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation fulfillmentOrderMove($id: ID!, $newLocationId: ID!) {\n      fulfillmentOrderMove(id: $id, newLocationId: $newLocationId) {\n        movedFulfillmentOrder {\n          id\n          status\n        }\n        originalFulfillmentOrder {\n          id\n          status\n        }\n        remainingFulfillmentOrder {\n          id\n          status\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/FulfillmentOrder/564786110\",\n      \"newLocationId\": \"gid://shopify/Location/346779380\"\n    },\n  },\n});\n"}, {"description": "fulfillmentOrderMove reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation fulfillmentOrderMove($id: ID!, $newLocationId: ID!) {\n      fulfillmentOrderMove(id: $id, newLocationId: $newLocationId) {\n        movedFulfillmentOrder {\n          id\n          status\n        }\n        originalFulfillmentOrder {\n          id\n          status\n        }\n        remainingFulfillmentOrder {\n          id\n          status\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/FulfillmentOrder/940656279\",\n      \"newLocationId\": \"gid://shopify/Location/346779380\"\n    },\n  },\n});\n"}]}, {"name": "fulfillmentOrderOpen", "description": "Marks a scheduled fulfillment order as open.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of the fulfillment order to mark as open."}], "returns": [], "examples": [{"description": "Marks the fulfillment order as open", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation fulfillmentOrderOpen($id: ID!) {\n      fulfillmentOrderOpen(id: $id) {\n        fulfillmentOrder {\n          id\n          status\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/FulfillmentOrder/1046000781\"\n    },\n  },\n});\n"}, {"description": "fulfillmentOrderOpen reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation fulfillmentOrderOpen($id: ID!) {\n      fulfillmentOrderOpen(id: $id) {\n        fulfillmentOrder {\n          id\n          status\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/FulfillmentOrder/1046000781\"\n    },\n  },\n});\n"}]}, {"name": "fulfillmentOrderRejectCancellationRequest", "description": "Rejects a cancellation request sent to a fulfillment service for a fulfillment order.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of the fulfillment order associated with the cancellation request."}, {"name": "message", "type": "String", "required": false, "description": "An optional reason for rejecting the cancellation request."}], "returns": [], "examples": [{"description": "Rejects a cancellation request", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation fulfillmentOrderRejectCancellationRequest($id: ID!, $message: String) {\n      fulfillmentOrderRejectCancellationRequest(id: $id, message: $message) {\n        fulfillmentOrder {\n          id\n          status\n          requestStatus\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/FulfillmentOrder/1046000785\",\n      \"message\": \"Already shipped product\"\n    },\n  },\n});\n"}, {"description": "fulfillmentOrderRejectCancellationRequest reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation fulfillmentOrderRejectCancellationRequest($id: ID!, $message: String) {\n      fulfillmentOrderRejectCancellationRequest(id: $id, message: $message) {\n        fulfillmentOrder {\n          id\n          status\n          requestStatus\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/FulfillmentOrder/1046000785\",\n      \"message\": \"Already shipped product\"\n    },\n  },\n});\n"}]}, {"name": "fulfillmentOrderRejectFulfillmentRequest", "description": "Rejects a fulfillment request sent to a fulfillment service for a fulfillment order.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of the fulfillment order associated with the fulfillment request."}, {"name": "lineItems", "type": "[IncomingRequestLineItemInput!]", "required": false, "description": "An optional array of line item rejection details. If none are provided, all line items will be assumed to be unfulfillable.\nNote: After the fulfillment request has been rejected, none of the line items will be able to be fulfilled. This field documents which line items specifically were unable to be fulfilled and why."}, {"name": "message", "type": "String", "required": false, "description": "An optional reason for rejecting the fulfillment request."}, {"name": "reason", "type": "FulfillmentOrderRejectionReason", "required": false, "description": "The reason for the fulfillment order rejection."}], "returns": [], "examples": [{"description": "Rejects a fulfillment request", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation fulfillmentOrderRejectFulfillmentRequest($id: ID!, $message: String) {\n      fulfillmentOrderRejectFulfillmentRequest(id: $id, message: $message) {\n        fulfillmentOrder {\n          id\n          status\n          requestStatus\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/FulfillmentOrder/1046000786\",\n      \"message\": \"Can't fulfill due to no inventory on product\"\n    },\n  },\n});\n"}, {"description": "fulfillmentOrderRejectFulfillmentRequest reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation fulfillmentOrderRejectFulfillmentRequest($id: ID!, $message: String) {\n      fulfillmentOrderRejectFulfillmentRequest(id: $id, message: $message) {\n        fulfillmentOrder {\n          id\n          status\n          requestStatus\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/FulfillmentOrder/1046000786\",\n      \"message\": \"Can't fulfill due to no inventory on product\"\n    },\n  },\n});\n"}]}, {"name": "fulfillmentOrderReleaseHold", "description": "Releases the fulfillment hold on a fulfillment order.", "arguments": [{"name": "externalId", "type": "String", "required": false, "description": "A configurable ID used to track the automation system releasing this hold."}, {"name": "holdIds", "type": "[ID!]", "required": false, "description": "The IDs of the fulfillment holds to release.\n\nHolds will only be released if they belong to the fulfillment order specified by the id argument.\n\nNOTE: If not supplied, all holds for the fulfillment order will be released.\nIt is highly recommended that apps supply the ids of the holds that they intend to release.\nReleasing all holds on a fulfillment order will result in the fulfillment order being released prematurely\nand items being incorrectly fulfilled."}, {"name": "id", "type": "ID!", "required": false, "description": "The ID of the fulfillment order for which to release the fulfillment hold."}], "returns": [], "examples": [{"description": "Release all holds on a fulfillment order", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation fulfillmentOrderReleaseHold($id: ID!) {\n      fulfillmentOrderReleaseHold(id: $id) {\n        fulfillmentOrder {\n          id\n          status\n          requestStatus\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/FulfillmentOrder/564786110\"\n    },\n  },\n});\n"}, {"description": "Releases the fulfillment hold on a fulfillment order", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `mutation {\n    fulfillmentOrderReleaseHold(holdIds: [\"gid://shopify/FulfillmentHold/172\"], id: \"gid://shopify/FulfillmentOrder/564786110\") {\n      fulfillmentOrder {\n        id\n        status\n        requestStatus\n      }\n      userErrors {\n        field\n        message\n        code\n      }\n    }\n  }`,\n});\n"}, {"description": "fulfillmentOrderReleaseHold reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation fulfillmentOrderReleaseHold($id: ID!) {\n      fulfillmentOrderReleaseHold(id: $id) {\n        fulfillmentOrder {\n          id\n          status\n          requestStatus\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/FulfillmentOrder/564786110\"\n    },\n  },\n});\n"}]}, {"name": "fulfillmentOrderReschedule", "description": "Reschedules a scheduled fulfillment order.\nUpdates the value of the fulfillAt field on a scheduled fulfillment order.\nThe fulfillment order will be marked as ready for fulfillment at this date and time.", "arguments": [{"name": "fulfillAt", "type": "DateTime!", "required": false, "description": "A future date and time when the fulfillment order will be marked as ready for fulfillment."}, {"name": "id", "type": "ID!", "required": false, "description": "The ID of the fulfillment order to reschedule."}], "returns": [], "examples": [{"description": "Reschedules the fulfill_at time of a scheduled fulfillment order", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation fulfillmentOrderReschedule($fulfillAt: DateTime!, $id: ID!) {\n      fulfillmentOrderReschedule(fulfillAt: $fulfillAt, id: $id) {\n        fulfillmentOrder {\n          id\n          status\n          fulfillAt\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/FulfillmentOrder/564786110\",\n      \"fulfillAt\": \"2024-11-25T18:40:54Z\"\n    },\n  },\n});\n"}, {"description": "fulfillmentOrderReschedule reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation fulfillmentOrderReschedule($fulfillAt: DateTime!, $id: ID!) {\n      fulfillmentOrderReschedule(fulfillAt: $fulfillAt, id: $id) {\n        fulfillmentOrder {\n          id\n          status\n          fulfillAt\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/FulfillmentOrder/564786110\",\n      \"fulfillAt\": \"2024-11-25T18:40:54Z\"\n    },\n  },\n});\n"}]}, {"name": "fulfillmentOrderSplit", "description": "Splits a fulfillment order or orders based on line item inputs and quantities.", "arguments": [{"name": "fulfillmentOrderSplits", "type": "[FulfillmentOrderSplitInput!]!", "required": false, "description": "The fulfillment orders, line items and quantities to be split into new fulfillment orders."}], "returns": [], "examples": [{"description": "Split a single fulfillment order", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation fulfillmentOrderSplit($fulfillmentOrderSplits: [FulfillmentOrderSplitInput!]!) {\n      fulfillmentOrderSplit(fulfillmentOrderSplits: $fulfillmentOrderSplits) {\n        fulfillmentOrderSplits {\n          fulfillmentOrder {\n            id\n            lineItems(first: 10) {\n              edges {\n                cursor\n                node {\n                  id\n                  totalQuantity\n                }\n              }\n            }\n          }\n          remainingFulfillmentOrder {\n            id\n            lineItems(first: 10) {\n              edges {\n                cursor\n                node {\n                  id\n                  totalQuantity\n                }\n              }\n            }\n          }\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"fulfillmentOrderSplits\": [\n        {\n          \"fulfillmentOrderId\": \"gid://shopify/FulfillmentOrder/1046000796\",\n          \"fulfillmentOrderLineItems\": [\n            {\n              \"id\": \"gid://shopify/FulfillmentOrderLineItem/1058737504\",\n              \"quantity\": 2\n            }\n          ]\n        }\n      ]\n    },\n  },\n});\n"}, {"description": "fulfillmentOrderSplit reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation fulfillmentOrderSplit($fulfillmentOrderSplits: [FulfillmentOrderSplitInput!]!) {\n      fulfillmentOrderSplit(fulfillmentOrderSplits: $fulfillmentOrderSplits) {\n        fulfillmentOrderSplits {\n          fulfillmentOrder {\n            id\n            lineItems(first: 10) {\n              edges {\n                cursor\n                node {\n                  id\n                  totalQuantity\n                }\n              }\n            }\n          }\n          remainingFulfillmentOrder {\n            id\n            lineItems(first: 10) {\n              edges {\n                cursor\n                node {\n                  id\n                  totalQuantity\n                }\n              }\n            }\n          }\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"fulfillmentOrderSplits\": [\n        {\n          \"fulfillmentOrderId\": \"gid://shopify/FulfillmentOrder/1046000796\",\n          \"fulfillmentOrderLineItems\": [\n            {\n              \"id\": \"gid://shopify/FulfillmentOrderLineItem/1058737504\",\n              \"quantity\": 2\n            }\n          ]\n        }\n      ]\n    },\n  },\n});\n"}]}, {"name": "fulfillmentOrdersSetFulfillmentDeadline", "description": "Sets the latest date and time by which the fulfillment orders need to be fulfilled.", "arguments": [{"name": "fulfillmentDeadline", "type": "DateTime!", "required": false, "description": "The new fulfillment deadline of the fulfillment orders."}, {"name": "fulfillmentOrderIds", "type": "[ID!]!", "required": false, "description": "The IDs of the fulfillment orders for which the deadline is being set."}], "returns": [], "examples": [{"description": "Sets deadline for fulfillment orders", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation fulfillmentOrdersSetFulfillmentDeadline($fulfillmentDeadline: DateTime!, $fulfillmentOrderIds: [ID!]!) {\n      fulfillmentOrdersSetFulfillmentDeadline(fulfillmentDeadline: $fulfillmentDeadline, fulfillmentOrderIds: $fulfillmentOrderIds) {\n        success\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"fulfillmentDeadline\": \"2024-11-25T18:44:04Z\",\n      \"fulfillmentOrderIds\": [\n        \"gid://shopify/FulfillmentOrder/234125762\",\n        \"gid://shopify/FulfillmentOrder/564786110\"\n      ]\n    },\n  },\n});\n"}, {"description": "fulfillmentOrdersSetFulfillmentDeadline reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation fulfillmentOrdersSetFulfillmentDeadline($fulfillmentDeadline: DateTime!, $fulfillmentOrderIds: [ID!]!) {\n      fulfillmentOrdersSetFulfillmentDeadline(fulfillmentDeadline: $fulfillmentDeadline, fulfillmentOrderIds: $fulfillmentOrderIds) {\n        success\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"fulfillmentDeadline\": \"2024-11-25T18:44:04Z\",\n      \"fulfillmentOrderIds\": [\n        \"gid://shopify/FulfillmentOrder/234125762\",\n        \"gid://shopify/FulfillmentOrder/564786110\"\n      ]\n    },\n  },\n});\n"}]}, {"name": "fulfillmentOrderSubmitCancellationRequest", "description": "Sends a cancellation request to the fulfillment service of a fulfillment order.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of the fulfillment order associated with the cancellation request."}, {"name": "message", "type": "String", "required": false, "description": "An optional reason for the cancellation request."}], "returns": [], "examples": [{"description": "Sends a cancellation request", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation fulfillmentOrderSubmitCancellationRequest($id: ID!, $message: String) {\n      fulfillmentOrderSubmitCancellationRequest(id: $id, message: $message) {\n        fulfillmentOrder {\n          id\n          status\n          requestStatus\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/FulfillmentOrder/1046001469\",\n      \"message\": \"Customer cancelled their order\"\n    },\n  },\n});\n"}, {"description": "fulfillmentOrderSubmitCancellationRequest reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation fulfillmentOrderSubmitCancellationRequest($id: ID!, $message: String) {\n      fulfillmentOrderSubmitCancellationRequest(id: $id, message: $message) {\n        fulfillmentOrder {\n          id\n          status\n          requestStatus\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/FulfillmentOrder/1046001469\",\n      \"message\": \"Customer cancelled their order\"\n    },\n  },\n});\n"}]}, {"name": "fulfillmentOrderSubmitFulfillmentRequest", "description": "Sends a fulfillment request to the fulfillment service of a fulfillment order.", "arguments": [{"name": "fulfillmentOrderLineItems", "type": "[FulfillmentOrderLineItemInput!]", "required": false, "description": "The fulfillment order line items to be requested for fulfillment.\nIf left blank, all line items of the fulfillment order are requested for fulfillment."}, {"name": "id", "type": "ID!", "required": false, "description": "The ID of the fulfillment order associated with fulfillment request."}, {"name": "message", "type": "String", "required": false, "description": "An optional message for the fulfillment request."}, {"name": "notifyCustomer", "type": "Boolean", "required": false, "description": "Whether the customer should be notified when fulfillments are created for this fulfillment order."}], "returns": [], "examples": [{"description": "Sends a fulfillment request", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation fulfillmentOrderSubmitFulfillmentRequest($id: ID!) {\n      fulfillmentOrderSubmitFulfillmentRequest(id: $id) {\n        originalFulfillmentOrder {\n          id\n          status\n          requestStatus\n        }\n        submittedFulfillmentOrder {\n          id\n          status\n          requestStatus\n        }\n        unsubmittedFulfillmentOrder {\n          id\n          status\n          requestStatus\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/FulfillmentOrder/1046000784\"\n    },\n  },\n});\n"}, {"description": "Split a fulfillment order into a partial fulfillment request", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation fulfillmentOrderSubmitFulfillmentRequest($id: ID!, $fulfillmentOrderLineItems: [FulfillmentOrderLineItemInput!]) {\n      fulfillmentOrderSubmitFulfillmentRequest(id: $id, fulfillmentOrderLineItems: $fulfillmentOrderLineItems) {\n        originalFulfillmentOrder {\n          id\n          status\n          requestStatus\n        }\n        submittedFulfillmentOrder {\n          id\n          status\n          requestStatus\n        }\n        unsubmittedFulfillmentOrder {\n          id\n          status\n          requestStatus\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/FulfillmentOrder/1046000782\",\n      \"fulfillmentOrderLineItems\": [\n        {\n          \"id\": \"gid://shopify/FulfillmentOrderLineItem/1072503280\",\n          \"quantity\": 1\n        }\n      ]\n    },\n  },\n});\n"}, {"description": "fulfillmentOrderSubmitFulfillmentRequest reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation fulfillmentOrderSubmitFulfillmentRequest($id: ID!) {\n      fulfillmentOrderSubmitFulfillmentRequest(id: $id) {\n        originalFulfillmentOrder {\n          id\n          status\n          requestStatus\n        }\n        submittedFulfillmentOrder {\n          id\n          status\n          requestStatus\n        }\n        unsubmittedFulfillmentOrder {\n          id\n          status\n          requestStatus\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/FulfillmentOrder/1046000784\"\n    },\n  },\n});\n"}]}, {"name": "fulfillmentServiceCreate", "description": "Creates a fulfillment service.\nFulfillment service location\nWhen creating a fulfillment service, a new location will be automatically created on the shop\nand will be associated with this fulfillment service.\nThis location will be named after the fulfillment service and inherit the shop's address.\nIf you are using API version 2023-10 or later, and you need to specify custom attributes for the fulfillment service location\n(for example, to change its address to a country different from the shop's country),\nuse the\nLocationEdit\nmutation after creating the fulfillment service.", "arguments": [{"name": "callbackUrl", "type": "URL!", "required": false, "description": "The URL to send requests for the fulfillment service. The following considerations apply:\n\nShopify queries the callback_url/fetch_tracking_numbers endpoint to retrieve tracking numbers\nfor orders, if trackingSupport is set to true.\nShopify queries the callback_url/fetch_stock endpoint to retrieve inventory levels,\nif inventoryManagement is set to true.\nShopify uses the callback_url/fulfillment_order_notification endpoint to send\nfulfillment and cancellation requests."}, {"name": "inventoryManagement", "type": "Boolean", "required": false, "description": "Whether the fulfillment service manages product inventory and provides updates to Shopify."}, {"name": "name", "type": "String!", "required": false, "description": "The name of the fulfillment service."}, {"name": "requiresShippingMethod", "type": "Boolean", "required": false, "description": "Whether the fulfillment service requires products to be physically shipped."}, {"name": "trackingSupport", "type": "Boolean", "required": false, "description": "Whether the fulfillment service provides tracking numbers for packages."}, {"name": "fulfillmentOrdersOptIn", "type": "Boolean", "required": false, "description": "Whether the fulfillment service uses the fulfillment order based workflow for managing fulfillments.\nAs of 2022-07 API version,\nthe fulfillment order based workflow is the only way to manage fulfillments.\nAs the migration is now finished, the fulfillmentOrdersOptIn property is deprecated\nand is always set to true on correctly functioning fulfillment services.\nThe fulfillmentOrdersOptIn input field is deprecated and will be removed in the next API version.\nThis API version makes it optional and defaults to true for a smooth migration experience.\nDo not set the fulfillmentOrdersOptIn argument, and you are ready for the next API version release. Migration period ended. Defaults to true."}, {"name": "permitsSkuSharing", "type": "Boolean", "required": false, "description": "Whether the fulfillment service can stock inventory alongside other locations. The non-SKU sharing fulfillment services are now deprecated.\nIn the version \"2025-04\", this argument will be removed and all new fulfillment services will support SKU sharing by default."}], "returns": [], "examples": [{"description": "Create a new FulfillmentService", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation fulfillmentServiceCreate($name: String!, $callbackUrl: URL!) {\n      fulfillmentServiceCreate(name: $name, callbackUrl: $callbackUrl) {\n        fulfillmentService {\n          id\n          serviceName\n          callbackUrl\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"name\": \"example_fulfillment_service\",\n      \"callbackUrl\": \"https://callback.org/\"\n    },\n  },\n});\n"}, {"description": "fulfillmentServiceCreate reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation fulfillmentServiceCreate($name: String!, $callbackUrl: URL!) {\n      fulfillmentServiceCreate(name: $name, callbackUrl: $callbackUrl) {\n        fulfillmentService {\n          id\n          serviceName\n          callbackUrl\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"name\": \"example_fulfillment_service\",\n      \"callbackUrl\": \"https://callback.org/\"\n    },\n  },\n});\n"}]}, {"name": "fulfillmentServiceDelete", "description": "Deletes a fulfillment service.", "arguments": [{"name": "destinationLocationId", "type": "ID", "required": false, "description": "The ID of an active merchant managed location where inventory and commitments will be relocated\nafter the fulfillment service is deleted.\nInventory will only be transferred if the\nTRANSFER\ninventory action has been chosen."}, {"name": "id", "type": "ID!", "required": false, "description": "The ID of the fulfillment service to delete."}, {"name": "inventoryAction", "type": "FulfillmentServiceDeleteInventoryAction", "required": false, "description": "The action to take with the location after the fulfillment service is deleted."}], "returns": [], "examples": [{"description": "Remove an existing FulfillmentService", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation fulfillmentServiceDelete($id: ID!, $destinationLocationId: ID) {\n      fulfillmentServiceDelete(id: $id, destinationLocationId: $destinationLocationId) {\n        deletedId\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"destinationLocationId\": \"gid://shopify/Location/124656943\",\n      \"id\": \"gid://shopify/FulfillmentService/198258461\"\n    },\n  },\n});\n"}, {"description": "fulfillmentServiceDelete reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation fulfillmentServiceDelete($id: ID!, $destinationLocationId: ID) {\n      fulfillmentServiceDelete(id: $id, destinationLocationId: $destinationLocationId) {\n        deletedId\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"destinationLocationId\": \"gid://shopify/Location/124656943\",\n      \"id\": \"gid://shopify/FulfillmentService/198258461\"\n    },\n  },\n});\n"}]}, {"name": "fulfillmentServiceUpdate", "description": "Updates a fulfillment service.\nIf you are using API version 2023-10 or later,\nand you need to update the location managed by the fulfillment service\n(for example, to change the address of a fulfillment service),\nuse the\nLocationEdit\nmutation.", "arguments": [{"name": "callbackUrl", "type": "URL", "required": false, "description": "The URL to send requests for the fulfillment service. The following considerations apply:\n\nShopify queries the callback_url/fetch_tracking_numbers endpoint to retrieve tracking numbers\nfor orders, if trackingSupport is set to true.\nShopify queries the callback_url/fetch_stock endpoint to retrieve inventory levels,\nif inventoryManagement is set to true.\nShopify uses the callback_url/fulfillment_order_notification endpoint to send\nfulfillment and cancellation requests."}, {"name": "id", "type": "ID!", "required": false, "description": "The id of the fulfillment service."}, {"name": "inventoryManagement", "type": "Boolean", "required": false, "description": "Whether the fulfillment service tracks product inventory and provides updates to Shopify."}, {"name": "name", "type": "String", "required": false, "description": "The name of the fulfillment service."}, {"name": "requiresShippingMethod", "type": "Boolean", "required": false, "description": "Whether the fulfillment service requires products to be physically shipped."}, {"name": "trackingSupport", "type": "Boolean", "required": false, "description": "Whether the fulfillment service provides tracking numbers for packages."}, {"name": "fulfillmentOrdersOptIn", "type": "Boolean", "required": false, "description": "Whether the fulfillment service uses the fulfillment order based workflow for managing fulfillments.\nAs of 2022-07 API version,\nthe fulfillment order based workflow is the only way to manage fulfillments,\nand true is the only valid value for fulfillmentOrdersOptIn. Migration period has ended."}, {"name": "permitsSkuSharing", "type": "Boolean", "required": false, "description": "Whether the fulfillment service can stock inventory alongside other locations. The non-SKU sharing fulfillment services are now deprecated.\nIn the next version, this argument will be removed and all new fulfillment services will support SKU sharing by default."}], "returns": [], "examples": [{"description": "Modify an existing FulfillmentService", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation fulfillmentServiceUpdate($id: ID!, $name: String!) {\n      fulfillmentServiceUpdate(id: $id, name: $name) {\n        fulfillmentService {\n          id\n          serviceName\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/FulfillmentService/198258461\",\n      \"name\": \"My Updated Fulfillment Warehouse\"\n    },\n  },\n});\n"}, {"description": "fulfillmentServiceUpdate reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation fulfillmentServiceUpdate($id: ID!, $name: String!) {\n      fulfillmentServiceUpdate(id: $id, name: $name) {\n        fulfillmentService {\n          id\n          serviceName\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/FulfillmentService/198258461\",\n      \"name\": \"My Updated Fulfillment Warehouse\"\n    },\n  },\n});\n"}]}, {"name": "fulfillmentTrackingInfoUpdate", "description": "Updates tracking information for a fulfillment.", "arguments": [{"name": "fulfillmentId", "type": "ID!", "required": false, "description": "The ID of the fulfillment."}, {"name": "notifyCustomer", "type": "Boolean", "required": false, "description": "Whether the customer will be notified of this update and future updates for the fulfillment.\nIf this field is left blank, then notifications won't be sent to the customer when the fulfillment is updated."}, {"name": "trackingInfoInput", "type": "FulfillmentTrackingInput!", "required": false, "description": "The tracking input for the mutation, including tracking URL, number, and company."}], "returns": [], "examples": [{"description": "Updates the tracking information for a fulfillment", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation FulfillmentTrackingInfoUpdate($fulfillmentId: ID!, $trackingInfoInput: FulfillmentTrackingInput!, $notifyCustomer: Boolean) {\n      fulfillmentTrackingInfoUpdate(fulfillmentId: $fulfillmentId, trackingInfoInput: $trackingInfoInput, notifyCustomer: $notifyCustomer) {\n        fulfillment {\n          id\n          status\n          trackingInfo {\n            company\n            number\n            url\n          }\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"fulfillmentId\": \"gid://shopify/Fulfillment/255858046\",\n      \"notifyCustomer\": true,\n      \"trackingInfoInput\": {\n        \"company\": \"UPS\",\n        \"number\": \"1Z001985YW99744790\"\n      }\n    },\n  },\n});\n"}, {"description": "fulfillmentTrackingInfoUpdate reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation FulfillmentTrackingInfoUpdate($fulfillmentId: ID!, $trackingInfoInput: FulfillmentTrackingInput!, $notifyCustomer: Boolean) {\n      fulfillmentTrackingInfoUpdate(fulfillmentId: $fulfillmentId, trackingInfoInput: $trackingInfoInput, notifyCustomer: $notifyCustomer) {\n        fulfillment {\n          id\n          status\n          trackingInfo {\n            company\n            number\n            url\n          }\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"fulfillmentId\": \"gid://shopify/Fulfillment/255858046\",\n      \"notifyCustomer\": true,\n      \"trackingInfoInput\": {\n        \"company\": \"UPS\",\n        \"number\": \"1Z001985YW99744790\"\n      }\n    },\n  },\n});\n"}]}, {"name": "fulfillmentTrackingInfoUpdateV2", "description": "Updates tracking information for a fulfillment. Use fulfillmentTrackingInfoUpdate instead.", "arguments": [{"name": "fulfillmentId", "type": "ID!", "required": false, "description": "The ID of the fulfillment."}, {"name": "notifyCustomer", "type": "Boolean", "required": false, "description": "Whether the customer will be notified of this update and future updates for the fulfillment.\nIf this field is left blank, then notifications won't be sent to the customer when the fulfillment is updated."}, {"name": "trackingInfoInput", "type": "FulfillmentTrackingInput!", "required": false, "description": "The tracking input for the mutation, including tracking URL, number, and company."}], "returns": [], "examples": [{"description": "Add a tracking number and a tracking company name to a fulfillment", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation fulfillmentTrackingInfoUpdateV2($fulfillmentId: ID!, $trackingInfoInput: FulfillmentTrackingInput!, $notifyCustomer: Boolean) {\n      fulfillmentTrackingInfoUpdateV2(fulfillmentId: $fulfillmentId, trackingInfoInput: $trackingInfoInput, notifyCustomer: $notifyCustomer) {\n        fulfillment {\n          id\n          status\n          trackingInfo {\n            company\n            number\n            url\n          }\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"fulfillmentId\": \"gid://shopify/Fulfillment/255858046\",\n      \"notifyCustomer\": true,\n      \"trackingInfoInput\": {\n        \"company\": \"UPS\",\n        \"number\": \"1Z001985YW99744790\"\n      }\n    },\n  },\n});\n"}, {"description": "Add tracking information with two tracking numbers and a supported tracking company name specified", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation fulfillmentTrackingInfoUpdateV2($fulfillmentId: ID!, $trackingInfoInput: FulfillmentTrackingInput!, $notifyCustomer: Boolean) {\n      fulfillmentTrackingInfoUpdateV2(fulfillmentId: $fulfillmentId, trackingInfoInput: $trackingInfoInput, notifyCustomer: $notifyCustomer) {\n        fulfillment {\n          id\n          status\n          trackingInfo {\n            company\n            number\n            url\n          }\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"fulfillmentId\": \"gid://shopify/Fulfillment/255858046\",\n      \"notifyCustomer\": true,\n      \"trackingInfoInput\": {\n        \"company\": \"UPS\",\n        \"numbers\": [\n          \"1Z001985YW99744790\",\n          \"1Z001985YW99744791\"\n        ]\n      }\n    },\n  },\n});\n"}, {"description": "fulfillmentTrackingInfoUpdateV2 reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation fulfillmentTrackingInfoUpdateV2($fulfillmentId: ID!, $trackingInfoInput: FulfillmentTrackingInput!, $notifyCustomer: Boolean) {\n      fulfillmentTrackingInfoUpdateV2(fulfillmentId: $fulfillmentId, trackingInfoInput: $trackingInfoInput, notifyCustomer: $notifyCustomer) {\n        fulfillment {\n          id\n          status\n          trackingInfo {\n            company\n            number\n            url\n          }\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"fulfillmentId\": \"gid://shopify/Fulfillment/255858046\",\n      \"notifyCustomer\": true,\n      \"trackingInfoInput\": {\n        \"company\": \"UPS\",\n        \"number\": \"1Z001985YW99744790\"\n      }\n    },\n  },\n});\n"}]}, {"name": "shippingPackageDelete", "description": "Deletes a shipping package.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of the shipping package to remove."}], "returns": [], "examples": []}, {"name": "shippingPackageMakeDefault", "description": "Set a shipping package as the default.\nThe default shipping package is the one used to calculate shipping costs on checkout.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of the shipping package to set as the default."}], "returns": [], "examples": []}, {"name": "shippingPackageUpdate", "description": "Updates a shipping package.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of the shipping package to update."}, {"name": "shippingPackage", "type": "CustomShippingPackageInput!", "required": false, "description": "Specifies the input fields for a shipping package."}], "returns": [], "examples": []}], "objects": [{"name": "CountriesInShippingZones", "description": "The list of all the countries from the combined shipping zones for the shop.", "fields_and_connections": [{"name": "countryCodes", "type": "[CountryCode!]!", "description": "The list of all the countries from all the combined shipping zones.", "not_nullable": true}, {"name": "includeRestOfWorld", "type": "Boolean!", "description": "Whether 'Rest of World' has been defined in any of the shipping zones.", "not_nullable": true}], "examples": []}, {"name": "DeliveryAvailableService", "description": "A shipping service and a list of countries that the service is available for.", "fields_and_connections": [{"name": "countries", "type": "DeliveryCountryCodesOrRestOfWorld!", "description": "The countries the service provider ships to.", "not_nullable": true}, {"name": "name", "type": "String!", "description": "The name of the service.", "not_nullable": true}], "examples": []}, {"name": "DeliveryBrandedPromise", "description": "Represents a branded promise presented to buyers.", "fields_and_connections": [{"name": "handle", "type": "String!", "description": "The handle of the branded promise.  For example: shop_promise.", "not_nullable": true}, {"name": "name", "type": "String!", "description": "The name of the branded promise.  For example: Shop Promise.", "not_nullable": true}], "examples": []}, {"name": "DeliveryCarrierService", "description": "A carrier service (also known as a carrier calculated service or shipping service) provides real-time shipping rates to Shopify. Some common carrier services include Canada Post, FedEx, UPS, and USPS. The term carrier is often used interchangeably with the terms shipping company and rate provider.\nUsing the CarrierService resource, you can add a carrier service to a shop and then provide a list of applicable shipping rates at checkout. You can even use the cart data to adjust shipping rates and offer shipping discounts based on what is in the customer's cart.\nRequirements for accessing the CarrierService resource\nTo access the CarrierService resource, add the write_shipping permission to your app's requested scopes. For more information, see API access scopes.\nYour app's request to create a carrier service will fail unless the store installing your carrier service meets one of the following requirements:\n\nIt's on the Advanced Shopify plan or higher.\nIt's on the Shopify plan with yearly billing, or the carrier service feature has been added to the store for a monthly fee. For more information, contact Shopify Support.\nIt's a development store.\n\nNoteIf a store changes its Shopify plan, then the store's association with a carrier service is deactivated if the store no long meets one of the requirements above.Providing shipping rates to Shopify\nWhen adding a carrier service to a store, you need to provide a POST endpoint rooted in the callbackUrl property where Shopify can retrieve applicable shipping rates. The callback URL should be a public endpoint that expects these requests from Shopify.\nExample shipping rate request sent to a carrier service\nCopy991234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950{  \"rate\": {    \"origin\": {      \"country\": \"CA\",      \"postal_code\": \"K2P1L4\",      \"province\": \"ON\",      \"city\": \"Ottawa\",      \"name\": null,      \"address1\": \"150 Elgin St.\",      \"address2\": \"\",      \"address3\": null,      \"phone\": null,      \"fax\": null,      \"email\": null,      \"address_type\": null,      \"company_name\": \"Jamie D's Emporium\"    },    \"destination\": {      \"country\": \"CA\",      \"postal_code\": \"K1M1M4\",      \"province\": \"ON\",      \"city\": \"Ottawa\",      \"name\": \"Bob Norman\",      \"address1\": \"24 Sussex Dr.\",      \"address2\": \"\",      \"address3\": null,      \"phone\": null,      \"fax\": null,      \"email\": null,      \"address_type\": null,      \"company_name\": null    },    \"items\": [{      \"name\": \"Short Sleeve T-Shirt\",      \"sku\": \"\",      \"quantity\": 1,      \"grams\": 1000,      \"price\": 1999,      \"vendor\": \"Jamie D's Emporium\",      \"requires_shipping\": true,      \"taxable\": true,      \"fulfillment_service\": \"manual\",      \"properties\": null,      \"product_id\": 48447225880,      \"variant_id\": 258644705304    }],    \"currency\": \"USD\",    \"locale\": \"en\"  }}\n\nExample response\nCopy991234567891011121314151617181920212223242526272829{   \"rates\": [       {           \"service_name\": \"canadapost-overnight\",           \"service_code\": \"ON\",           \"total_price\": \"1295\",           \"description\": \"This is the fastest option by far\",           \"currency\": \"CAD\",           \"min_delivery_date\": \"2013-04-12 14:48:45 -0400\",           \"max_delivery_date\": \"2013-04-12 14:48:45 -0400\"       },       {           \"service_name\": \"fedex-2dayground\",           \"service_code\": \"2D\",           \"total_price\": \"2934\",           \"currency\": \"USD\",           \"min_delivery_date\": \"2013-04-12 14:48:45 -0400\",           \"max_delivery_date\": \"2013-04-12 14:48:45 -0400\"       },       {           \"service_name\": \"fedex-priorityovernight\",           \"service_code\": \"1D\",           \"total_price\": \"3587\",           \"currency\": \"USD\",           \"min_delivery_date\": \"2013-04-12 14:48:45 -0400\",           \"max_delivery_date\": \"2013-04-12 14:48:45 -0400\"       }   ]}\n\nThe address3, fax, address_type, and company_name fields are returned by specific ActiveShipping providers. For API-created carrier services, you should use only the following shipping address fields:\n\naddress1\naddress2\ncity\nzip\nprovince\ncountry\n\nOther values remain as null and are not sent to the callback URL.\nResponse fields\nWhen Shopify requests shipping rates using your callback URL, the response object rates must be a JSON array of objects with the following fields.  Required fields must be included in the response for the carrier service integration to work properly.\nFieldRequiredDescriptionservice_nameYesThe name of the rate, which customers see at checkout. For example: Expedited Mail.descriptionYesA description of the rate, which customers see at checkout. For example: Includes tracking and insurance.service_codeYesA unique code associated with the rate. For example: expedited_mail.currencyYesThe currency of the shipping rate.total_priceYesThe total price expressed in subunits. If the currency doesn't use subunits, then the value must be multiplied by 100. For example: \"total_price\": 500 for 5.00 CAD, \"total_price\": 100000 for 1000 JPY.phone_requiredNoWhether the customer must provide a phone number at checkout.min_delivery_dateNoThe earliest delivery date for the displayed rate.max_delivery_dateNoThe latest delivery date for the displayed rate to still be valid.Special conditions\n\nTo indicate that this carrier service cannot handle this shipping request, return an empty array and any successful (20x) HTTP code.\nTo force backup rates instead, return a 40x or 50x HTTP code with any content. A good choice is the regular 404 Not Found code.\nRedirects (30x codes) will only be followed for the same domain as the original callback URL. Attempting to redirect to a different domain will trigger backup rates.\nThere is no retry mechanism. The response must be successful on the first try, within the time budget listed below. Timeouts or errors will trigger backup rates.\n\nResponse Timeouts\nThe read timeout for rate requests are dynamic, based on the number of requests per minute (RPM). These limits are applied to each shop-app pair. The timeout values are as follows.\nRPM RangeTimeoutUnder 150010s1500 to 30005sOver 30003sNoteThese values are upper limits and should not be interpretted as a goal to develop towards. Shopify is constantly evaluating the performance of the platform and working towards improving resilience as well as app capabilities. As such, these numbers may be adjusted outside of our normal versioning timelines.Server-side caching of requests\nShopify provides server-side caching to reduce the number of requests it makes. Any shipping rate request that identically matches the following fields will be retrieved from Shopify's cache of the initial response:\n\nvariant IDs\ndefault shipping box weight and dimensions\nvariant quantities\ncarrier service ID\norigin address\ndestination address\nitem weights and signatures\n\nIf any of these fields differ, or if the cache has expired since the original request, then new shipping rates are requested. The cache expires 15 minutes after rates are successfully returned. If an error occurs, then the cache expires after 30 seconds.", "fields_and_connections": [{"name": "active", "type": "carrierService", "description": "Returns a DeliveryCarrierService object by ID.", "not_nullable": false}, {"name": "active", "type": "carrierServices", "description": "Retrieve a list of CarrierServices.", "not_nullable": false}, {"name": "active", "type": "carrierServiceCreate", "description": "Creates a new carrier service.", "not_nullable": false}, {"name": "active", "type": "carrierServiceUpdate", "description": "Updates a carrier service. Only the app that creates a carrier service can update it.", "not_nullable": false}, {"name": "active", "type": "Node", "description": "Whether the carrier service is active.", "not_nullable": false}], "examples": []}, {"name": "DeliveryCarrierServiceAndLocations", "description": "A carrier service and the associated list of shop locations.", "fields_and_connections": [{"name": "carrierService", "type": "availableCarrierServices", "description": "Returns a list of activated carrier services and associated shop locations that support them.", "not_nullable": false}], "examples": []}, {"name": "DeliveryCondition", "description": "A condition that must pass for a delivery method definition to be applied to an order.", "fields_and_connections": [{"name": "conditionCriteria", "type": "Node", "description": "The value (weight or price) that the condition field is compared to.", "not_nullable": false}], "examples": []}, {"name": "DeliveryCountry", "description": "A country that is used to define a shipping zone.", "fields_and_connections": [{"name": "code", "type": "Node", "description": "A two-letter country code in ISO 3166-1 alpha-2 standard.\nIt also includes a flag indicating whether the country should be\na part of the 'Rest Of World' shipping zone.", "not_nullable": false}], "examples": []}, {"name": "DeliveryCountryAndZone", "description": "The country details and the associated shipping zone.", "fields_and_connections": [{"name": "country", "type": "DeliveryCountry!", "description": "The country details.", "not_nullable": true}, {"name": "zone", "type": "String!", "description": "The name of the shipping zone.", "not_nullable": true}], "examples": []}, {"name": "DeliveryCountryCodeOrRestOfWorld", "description": "The country code and whether the country is a part of the 'Rest Of World' shipping zone.", "fields_and_connections": [{"name": "countryCode", "type": "CountryCode", "description": "The country code in the ISO 3166-1 alpha-2 format.", "not_nullable": false}, {"name": "restOfWorld", "type": "Boolean!", "description": "Whether the country is a part of the 'Rest of World' shipping zone.", "not_nullable": true}], "examples": []}, {"name": "DeliveryCountryCodesOrRestOfWorld", "description": "The list of country codes and information whether the countries\nare a part of the 'Rest Of World' shipping zone.", "fields_and_connections": [{"name": "countryCodes", "type": "[CountryCode!]!", "description": "List of applicable country codes in the ISO 3166-1 alpha-2 format.", "not_nullable": true}, {"name": "restOfWorld", "type": "Boolean!", "description": "Whether the countries are a part of the 'Rest of World' shipping zone.", "not_nullable": true}], "examples": []}, {"name": "DeliveryCustomization", "description": "A delivery customization.", "fields_and_connections": [{"name": "enabled", "type": "deliveryCustomization", "description": "The delivery customization.", "not_nullable": false}, {"name": "enabled", "type": "deliveryCustomizations", "description": "The delivery customizations.", "not_nullable": false}, {"name": "enabled", "type": "deliveryCustomizationCreate", "description": "Creates a delivery customization.", "not_nullable": false}, {"name": "enabled", "type": "deliveryCustomizationUpdate", "description": "Updates a delivery customization.", "not_nullable": false}, {"name": "enabled", "type": "HasMetafieldDefinitions", "description": "The enabled status of the delivery customization.", "not_nullable": false}, {"name": "enabled", "type": "HasMetafields", "description": "The enabled status of the delivery customization.", "not_nullable": false}, {"name": "enabled", "type": "Node", "description": "The enabled status of the delivery customization.", "not_nullable": false}], "examples": []}, {"name": "DeliveryCustomizationError", "description": "An error that occurs during the execution of a delivery customization mutation.", "fields_and_connections": [{"name": "code", "type": "deliveryCustomizationActivation", "description": "Activates and deactivates delivery customizations.", "not_nullable": false}, {"name": "code", "type": "deliveryCustomizationCreate", "description": "Creates a delivery customization.", "not_nullable": false}, {"name": "code", "type": "deliveryCustomizationDelete", "description": "Creates a delivery customization.", "not_nullable": false}, {"name": "code", "type": "deliveryCustomizationUpdate", "description": "Updates a delivery customization.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "DeliveryLegacyModeBlocked", "description": "Whether the shop is blocked from converting to full multi-location delivery profiles mode. If the shop is blocked, then the blocking reasons are also returned.", "fields_and_connections": [{"name": "blocked", "type": "Boolean!", "description": "Whether the shop can convert to full multi-location delivery profiles mode.", "not_nullable": true}, {"name": "reasons", "type": "[DeliveryLegacyModeBlockedReason!]", "description": "The reasons why the shop is blocked from converting to full multi-location delivery profiles mode.", "not_nullable": false}], "examples": []}, {"name": "DeliveryLocalPickupSettings", "description": "Local pickup settings associated with a location.", "fields_and_connections": [{"name": "instructions", "type": "locationLocalPickupEnable", "description": "Enables local pickup for a location.", "not_nullable": false}], "examples": []}, {"name": "DeliveryLocationGroup", "description": "A location group is a collection of locations. They share zones and delivery methods across delivery\nprofiles.", "fields_and_connections": [{"name": "id", "type": "Node", "description": "A globally-unique ID.", "not_nullable": false}], "examples": []}, {"name": "DeliveryLocationGroupZone", "description": "Links a location group with a zone and the associated method definitions.", "fields_and_connections": [{"name": "methodDefinitionCounts", "type": "DeliveryMethodDefinitionCounts!", "description": "The number of method definitions for the zone.", "not_nullable": true}, {"name": "methodDefinitions", "type": "DeliveryMethodDefinitionConnection!", "description": "The method definitions associated to a zone and location group.", "not_nullable": true}, {"name": "zone", "type": "DeliveryZone!", "description": "The zone associated to a location group.", "not_nullable": true}], "examples": []}, {"name": "DeliveryLocationLocalPickupSettingsError", "description": "Represents an error that happened when changing local pickup settings for a location.", "fields_and_connections": [{"name": "code", "type": "locationLocalPickupDisable", "description": "Disables local pickup for a location.", "not_nullable": false}, {"name": "code", "type": "locationLocalPickupEnable", "description": "Enables local pickup for a location.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "DeliveryMethod", "description": "The delivery method used by a fulfillment order.", "fields_and_connections": [{"name": "additionalInformation", "type": "Node", "description": "The Additional information to consider when performing the delivery.", "not_nullable": false}], "examples": []}, {"name": "DeliveryMethodAdditionalInformation", "description": "Additional information included on a delivery method that will help during the delivery process.", "fields_and_connections": [{"name": "instructions", "type": "String", "description": "The delivery instructions to follow when performing the delivery.", "not_nullable": false}, {"name": "phone", "type": "String", "description": "The phone number to contact when performing the delivery.", "not_nullable": false}], "examples": []}, {"name": "DeliveryMethodDefinition", "description": "A method definition contains the delivery rate and the conditions that must be met for the method to be\napplied.", "fields_and_connections": [{"name": "active", "type": "Node", "description": "Whether this method definition is active.", "not_nullable": false}], "examples": []}, {"name": "DeliveryMethodDefinitionCounts", "description": "The number of method definitions for a zone, separated into merchant-owned and participant definitions.", "fields_and_connections": [{"name": "participantDefinitionsCount", "type": "Int!", "description": "The number of participant method definitions for the specified zone.", "not_nullable": true}, {"name": "rateDefinitionsCount", "type": "Int!", "description": "The number of merchant-defined method definitions for the specified zone.", "not_nullable": true}], "examples": []}, {"name": "DeliveryParticipant", "description": "A participant defines carrier-calculated rates for shipping services\nwith a possible merchant-defined fixed fee or a percentage-of-rate fee.", "fields_and_connections": [{"name": "adaptToNewServicesFlag", "type": "Node", "description": "Whether to display new shipping services automatically to the customer when the service becomes available.", "not_nullable": false}], "examples": []}, {"name": "DeliveryParticipantService", "description": "A mail service provided by the participant.", "fields_and_connections": [{"name": "active", "type": "Boolean!", "description": "Whether the service is active.", "not_nullable": true}, {"name": "name", "type": "String!", "description": "The name of the service.", "not_nullable": true}], "examples": []}, {"name": "DeliveryProductVariantsCount", "description": "How many product variants are in a profile. This count is capped at 500.", "fields_and_connections": [{"name": "capped", "type": "Boolean!", "description": "Whether the count has reached the cap of 500.", "not_nullable": true}, {"name": "count", "type": "Int!", "description": "The product variant count.", "not_nullable": true}], "examples": []}, {"name": "DeliveryProfile", "description": "A shipping profile. In Shopify, a shipping profile is a set of shipping rates scoped to a set of products or variants that can be shipped from selected locations to zones. Learn more about building with delivery profiles.", "fields_and_connections": [{"name": "activeMethodDefinitionsCount", "type": "deliveryProfile", "description": "Returns a Delivery Profile resource by ID.", "not_nullable": false}, {"name": "activeMethodDefinitionsCount", "type": "deliveryProfiles", "description": "Returns a list of saved delivery profiles.", "not_nullable": false}, {"name": "activeMethodDefinitionsCount", "type": "deliveryProfileCreate", "description": "Create a delivery profile.", "not_nullable": false}, {"name": "activeMethodDefinitionsCount", "type": "deliveryProfileUpdate", "description": "Update a delivery profile.", "not_nullable": false}, {"name": "activeMethodDefinitionsCount", "type": "Node", "description": "The number of active shipping rates for the profile.", "not_nullable": false}], "examples": []}, {"name": "DeliveryProfileItem", "description": "A product and the subset of associated variants that are part of this delivery profile.", "fields_and_connections": [{"name": "id", "type": "Node", "description": "A globally-unique ID.", "not_nullable": false}], "examples": []}, {"name": "DeliveryProfileLocationGroup", "description": "Links a location group with zones. Both are associated to a delivery profile.", "fields_and_connections": [{"name": "countriesInAnyZone", "type": "[DeliveryCountryAndZone!]!", "description": "The countries already selected in any zone for the specified location group.", "not_nullable": true}, {"name": "locationGroup", "type": "DeliveryLocationGroup!", "description": "The collection of locations that make up the specified location group.", "not_nullable": true}, {"name": "locationGroupZones", "type": "DeliveryLocationGroupZoneConnection!", "description": "The applicable zones associated to the specified location group.", "not_nullable": true}], "examples": []}, {"name": "DeliveryPromiseParticipant", "description": "Returns enabled delivery promise participants.", "fields_and_connections": [{"name": "id", "type": "deliveryPromiseParticipants", "description": "Returns delivery promise participants.", "not_nullable": false}, {"name": "id", "type": "deliveryPromiseParticipantsUpdate", "description": "Updates the delivery promise participants by adding or removing owners based on a branded promise handle.", "not_nullable": false}, {"name": "id", "type": "Node", "description": "The ID of the promise participant.", "not_nullable": false}], "examples": []}, {"name": "DeliveryPromiseProvider", "description": "A delivery promise provider. Currently restricted to select approved delivery promise partners.", "fields_and_connections": [{"name": "active", "type": "deliveryPromiseProvider", "description": "Lookup a delivery promise provider.", "not_nullable": false}, {"name": "active", "type": "deliveryPromiseProviderUpsert", "description": "Creates or updates a delivery promise provider. Currently restricted to select approved delivery promise partners.", "not_nullable": false}, {"name": "active", "type": "Node", "description": "Whether the delivery promise provider is active. Defaults to true when creating a provider.", "not_nullable": false}], "examples": []}, {"name": "DeliveryPromiseSetting", "description": "The delivery promise settings.", "fields_and_connections": [{"name": "deliveryDatesEnabled", "type": "deliveryPromiseSettings", "description": "Represents the delivery promise settings for a shop.", "not_nullable": false}], "examples": []}, {"name": "DeliveryProvince", "description": "A region that is used to define a shipping zone.", "fields_and_connections": [{"name": "code", "type": "Node", "description": "The code of the region.", "not_nullable": false}], "examples": []}, {"name": "DeliveryRateDefinition", "description": "The merchant-defined rate of the DeliveryMethodDefinition.", "fields_and_connections": [{"name": "id", "type": "Node", "description": "A globally-unique ID.", "not_nullable": false}], "examples": []}, {"name": "DeliverySetting", "description": "The DeliverySetting object enables you to manage shop-wide shipping settings.\nYou can enable legacy compatibility mode for the multi-location delivery profiles feature\nif the legacy mode isn't blocked.", "fields_and_connections": [{"name": "legacyModeBlocked", "type": "deliverySettings", "description": "Returns the shop-wide shipping settings.", "not_nullable": false}, {"name": "legacyModeBlocked", "type": "deliverySettingUpdate", "description": "Set the delivery settings for a shop.", "not_nullable": false}], "examples": []}, {"name": "DeliveryZone", "description": "A zone is a group of countries that have the same shipping rates. Customers can order products from a store only if they choose a shipping destination that's included in one of the store's zones.", "fields_and_connections": [{"name": "countries", "type": "Node", "description": "The list of countries within the zone.", "not_nullable": false}], "examples": []}, {"name": "EditableProperty", "description": "The attribute editable information.", "fields_and_connections": [{"name": "locked", "type": "Boolean!", "description": "Whether the attribute is locked for editing.", "not_nullable": true}, {"name": "reason", "type": "FormattedString", "description": "The reason the attribute is locked for editing.", "not_nullable": false}], "examples": []}, {"name": "FinancialSummaryDiscountAllocation", "description": "An amount that's allocated to a line item based on an associated discount application.", "fields_and_connections": [{"name": "approximateAllocatedAmountPerItem", "type": "MoneyBag!", "description": "The money amount that's allocated per unit on the associated line based on the discount application in shop and presentment currencies. If the allocated amount for the line cannot be evenly divided by the quantity, then this amount will be an approximate amount, avoiding fractional pennies. For example, if the associated line had a quantity of 3 with a discount of 4 cents, then the discount distribution would be [0.01, 0.01, 0.02]. This field returns the highest number of the distribution. In this example, this would be 0.02.", "not_nullable": true}, {"name": "discountApplication", "type": "FinancialSummaryDiscountApplication!", "description": "The discount application that the allocated amount originated from.", "not_nullable": true}], "examples": []}, {"name": "FinancialSummaryDiscountApplication", "description": "Discount applications capture the intentions of a discount source at\nthe time of application on an order's line items or shipping lines.", "fields_and_connections": [{"name": "allocationMethod", "type": "DiscountApplicationAllocationMethod!", "description": "The method by which the discount's value is applied to its entitled items.", "not_nullable": true}, {"name": "targetSelection", "type": "DiscountApplicationTargetSelection!", "description": "How the discount amount is distributed on the discounted lines.", "not_nullable": true}, {"name": "targetType", "type": "DiscountApplicationTargetType!", "description": "Whether the discount is applied on line items or shipping lines.", "not_nullable": true}], "examples": []}, {"name": "Fulfillment", "description": "Represents a fulfillment.\nIn Shopify, a fulfillment represents a shipment of one or more items in an order.\nWhen an order has been completely fulfilled, it means that all the items that are included\nin the order have been sent to the customer.\nThere can be more than one fulfillment for an order.", "fields_and_connections": [{"name": "createdAt", "type": "fulfillment", "description": "Returns a Fulfillment resource by ID.", "not_nullable": false}, {"name": "createdAt", "type": "fulfillmentCancel", "description": "Cancels a fulfillment.", "not_nullable": false}, {"name": "createdAt", "type": "fulfillmentCreate", "description": "Creates a fulfillment for one or many fulfillment orders.\nThe fulfillment orders are associated with the same order and are assigned to the same location.", "not_nullable": false}, {"name": "createdAt", "type": "fulfillmentTrackingInfoUpdate", "description": "Updates tracking information for a fulfillment.", "not_nullable": false}, {"name": "createdAt", "type": "fulfillmentCreateV2", "description": "Creates a fulfillment for one or many fulfillment orders.\nThe fulfillment orders are associated with the same order and are assigned to the same location. Use fulfillmentCreate instead.", "not_nullable": false}, {"name": "createdAt", "type": "fulfillmentTrackingInfoUpdateV2", "description": "Updates tracking information for a fulfillment. Use fulfillmentTrackingInfoUpdate instead.", "not_nullable": false}, {"name": "createdAt", "type": "LegacyInteroperability", "description": "The date and time when the fulfillment was created.", "not_nullable": false}, {"name": "createdAt", "type": "Node", "description": "The date and time when the fulfillment was created.", "not_nullable": false}], "examples": []}, {"name": "FulfillmentEvent", "description": "The fulfillment event that describes the fulfilllment status at a particular time.", "fields_and_connections": [{"name": "address1", "type": "fulfillmentEventCreate", "description": "Creates a fulfillment event for a specified fulfillment.", "not_nullable": false}, {"name": "address1", "type": "Node", "description": "The street address where this fulfillment event occurred.", "not_nullable": false}], "examples": []}, {"name": "FulfillmentHold", "description": "A fulfillment hold currently applied on a fulfillment order.", "fields_and_connections": [{"name": "displayReason", "type": "fulfillmentOrderHold", "description": "Applies a fulfillment hold on a fulfillment order.\nAs of the\n2025-01 API version,\nthe mutation can be successfully executed on fulfillment orders that are already on hold.\nTo place multiple holds on a fulfillment order, apps need to supply the\nhandle\nfield. Each app can place up to\n10 active holds\nper fulfillment order. If an app attempts to place more than this, the mutation will return\na user error indicating that the limit has been reached.\nThe app would need to release one of its existing holds before being able to apply a new one.", "not_nullable": false}, {"name": "displayReason", "type": "Node", "description": "The localized reason for the fulfillment hold for display purposes.", "not_nullable": false}], "examples": []}, {"name": "FulfillmentLineItem", "description": "Represents a line item from an order that's included in a fulfillment.", "fields_and_connections": [{"name": "discountedTotalSet", "type": "Node", "description": "The total price after discounts are applied in shop and presentment currencies. This value doesn't include order-level discounts.", "not_nullable": false}], "examples": []}, {"name": "FulfillmentOrder", "description": "The FulfillmentOrder object represents either an item or a group of items in an\nOrder\nthat are expected to be fulfilled from the same location.\nThere can be more than one fulfillment order for an\norder\nat a given location.\n\n\nFulfillment orders represent the work which is intended to be done in relation to an order.\nWhen fulfillment has started for one or more line items, a\nFulfillment\nis created by a merchant or third party to represent the ongoing or completed work of fulfillment.\nSee below for more details on creating fulfillments.\nNoteShopify creates fulfillment orders automatically when an order is created.\nIt is not possible to manually create fulfillment orders.\nSee below for more details on the lifecycle of a fulfillment order.Retrieving fulfillment orders\nFulfillment orders from an order\nAll fulfillment orders related to a given order can be retrieved with the\nOrder.fulfillmentOrders\nconnection.\nAPI access scopes\ngovern which fulfillments orders are returned to clients.\nAn API client will only receive a subset of the fulfillment orders which belong to an order\nif they don't have the necessary access scopes to view all of the fulfillment orders.\nFulfillment orders assigned to the app for fulfillment\nFulfillment service apps can retrieve the fulfillment orders which have been assigned to their locations with the\nassignedFulfillmentOrders\nconnection.\nUse the assignmentStatus argument to control whether all assigned fulfillment orders\nshould be returned or only those where a merchant has sent a\nfulfillment request\nand it has yet to be responded to.\nThe API client must be granted the read_assigned_fulfillment_orders access scope to access\nthe assigned fulfillment orders.\nAll fulfillment orders\nApps can retrieve all fulfillment orders with the\nfulfillmentOrders\nquery. This query returns all assigned, merchant-managed, and third-party fulfillment orders on the shop,\nwhich are accessible to the app according to the\nfulfillment order access scopes it was granted with.\nThe lifecycle of a fulfillment order\nFulfillment Order Creation\nAfter an order is created, a background worker performs the order routing process which determines\nwhich locations will be responsible for fulfilling the purchased items.\nOnce the order routing process is complete, one or more fulfillment orders will be created\nand assigned to these locations. It is not possible to manually create fulfillment orders.\nOnce a fulfillment order has been created, it will have one of two different lifecycles depending on\nthe type of location which the fulfillment order is assigned to.\nThe lifecycle of a fulfillment order at a merchant managed location\nFulfillment orders are completed by creating\nfulfillments.\nFulfillments represents the work done.\nFor digital products a merchant or an order management app would create a fulfilment once the digital asset\nhas been provisioned.\nFor example, in the case of a digital gift card, a merchant would to do this once\nthe gift card has been activated - before the email has been shipped.\nOn the other hand, for a traditional shipped order,\na merchant or an order management app would create a fulfillment after picking and packing the items relating\nto a fulfillment order, but before the courier has collected the goods.\nLearn about managing fulfillment orders as an order management app.\nThe lifecycle of a fulfillment order at a location which is managed by a fulfillment service\nFor fulfillment orders which are assigned to a location that is managed by a fulfillment service,\na merchant or an Order Management App can\nsend a fulfillment request\nto the fulfillment service which operates the location to request that they fulfill the associated items.\nA fulfillment service has the option to\naccept\nor reject\nthis fulfillment request.\nOnce the fulfillment service has accepted the request, the request can no longer be cancelled by the merchant\nor order management app and instead a\ncancellation request must be submitted\nto the fulfillment service.\nOnce a fulfillment service accepts a fulfillment request,\nthen after they are ready to pack items and send them for delivery, they create fulfillments with the\nfulfillmentCreate\nmutation.\nThey can provide tracking information right away or create fulfillments without it and then\nupdate the tracking information for fulfillments with the\nfulfillmentTrackingInfoUpdate\nmutation.\nLearn about managing fulfillment orders as a fulfillment service.\nAPI access scopes\nFulfillment orders are governed by the following API access scopes:\n\nThe read_merchant_managed_fulfillment_orders and\nwrite_merchant_managed_fulfillment_orders access scopes\ngrant access to fulfillment orders assigned to merchant-managed locations.\nThe read_assigned_fulfillment_orders and write_assigned_fulfillment_orders\naccess scopes are intended for fulfillment services.\nThese scopes grant access to fulfillment orders assigned to locations that are being managed\nby fulfillment services.\nThe read_third_party_fulfillment_orders and write_third_party_fulfillment_orders\naccess scopes grant access to fulfillment orders\nassigned to locations managed by other fulfillment services.\n\nFulfillment service app access scopes\nUsually, fulfillment services have the write_assigned_fulfillment_orders access scope\nand don't have the *_third_party_fulfillment_orders\nor *_merchant_managed_fulfillment_orders access scopes.\nThe app will only have access to the fulfillment orders assigned to their location\n(or multiple locations if the app registers multiple fulfillment services on the shop).\nThe app will not have access to fulfillment orders assigned to merchant-managed locations\nor locations owned by other fulfillment service apps.\nOrder management app access scopes\nOrder management apps will usually request write_merchant_managed_fulfillment_orders and\nwrite_third_party_fulfillment_orders access scopes. This will allow them to manage all fulfillment orders\non behalf of a merchant.\nIf an app combines the functions of an order management app and a fulfillment service,\nthen the app should request all\naccess scopes to manage all assigned and all unassigned fulfillment orders.\nNotifications about fulfillment orders\nFulfillment services are required to\nregister\na self-hosted callback URL which has a number of uses. One of these uses is that this callback URL will be notified\nwhenever a merchant submits a fulfillment or cancellation request.\nBoth merchants and apps can\nsubscribe\nto the\nfulfillment order webhooks\nto be notified whenever fulfillment order related domain events occur.\nLearn about fulfillment workflows.", "fields_and_connections": [{"name": "assignedLocation", "type": "assignedFulfillmentOrders", "description": "The paginated list of fulfillment orders assigned to the shop locations owned by the app.\nAssigned fulfillment orders are fulfillment orders that are set to be fulfilled from locations\nmanaged by\nfulfillment services\nthat are registered by the app.\nOne app (api_client) can host multiple fulfillment services on a shop.\nEach fulfillment service manages a dedicated location on a shop.\nAssigned fulfillment orders can have associated\nfulfillment requests,\nor might currently not be requested to be fulfilled.\nThe app must have the read_assigned_fulfillment_orders\naccess scope\nto be able to retrieve the fulfillment orders assigned to its locations.\nAll assigned fulfillment orders (except those with the CLOSED status) will be returned by default.\nPerform filtering with the assignmentStatus argument\nto receive only fulfillment orders that have been requested to be fulfilled.", "not_nullable": false}, {"name": "assignedLocation", "type": "fulfillmentOrder", "description": "Returns a Fulfillment order resource by ID.", "not_nullable": false}, {"name": "assignedLocation", "type": "fulfillmentOrders", "description": "The paginated list of all fulfillment orders.\nThe returned fulfillment orders are filtered according to the\nfulfillment order access scopes\ngranted to the app.\nUse this query to retrieve fulfillment orders assigned to merchant-managed locations,\nthird-party fulfillment service locations, or all kinds of locations together.\nFor fetching only the fulfillment orders assigned to the app's locations, use the\nassignedFulfillmentOrders\nconnection.", "not_nullable": false}, {"name": "assignedLocation", "type": "manualHoldsFulfillmentOrders", "description": "Returns a list of fulfillment orders that are on hold.", "not_nullable": false}, {"name": "assignedLocation", "type": "fulfillmentOrderAcceptCancellationRequest", "description": "Accept a cancellation request sent to a fulfillment service for a fulfillment order.", "not_nullable": false}, {"name": "assignedLocation", "type": "fulfillmentOrderAcceptFulfillmentRequest", "description": "Accepts a fulfillment request sent to a fulfillment service for a fulfillment order.", "not_nullable": false}, {"name": "assignedLocation", "type": "fulfillmentOrderCancel", "description": "Marks a fulfillment order as canceled.", "not_nullable": false}, {"name": "assignedLocation", "type": "fulfillmentOrderClose", "description": "Marks an in-progress fulfillment order as incomplete,\nindicating the fulfillment service is unable to ship any remaining items,\nand closes the fulfillment request.\nThis mutation can only be called for fulfillment orders that meet the following criteria:\n\nAssigned to a fulfillment service location,\nThe fulfillment request has been accepted,\nThe fulfillment order status is IN_PROGRESS.\n\nThis mutation can only be called by the fulfillment service app that accepted the fulfillment request.\nCalling this mutation returns the control of the fulfillment order to the merchant, allowing them to\nmove the fulfillment order line items to another location and fulfill from there,\nremove and refund the line items, or to request fulfillment from the same fulfillment service again.\nClosing a fulfillment order is explained in\nthe fulfillment service guide.", "not_nullable": false}, {"name": "assignedLocation", "type": "fulfillmentOrderHold", "description": "Applies a fulfillment hold on a fulfillment order.\nAs of the\n2025-01 API version,\nthe mutation can be successfully executed on fulfillment orders that are already on hold.\nTo place multiple holds on a fulfillment order, apps need to supply the\nhandle\nfield. Each app can place up to\n10 active holds\nper fulfillment order. If an app attempts to place more than this, the mutation will return\na user error indicating that the limit has been reached.\nThe app would need to release one of its existing holds before being able to apply a new one.", "not_nullable": false}, {"name": "assignedLocation", "type": "fulfillmentOrderMove", "description": "Changes the location which is assigned to fulfill a number of unfulfilled fulfillment order line items.\nMoving a fulfillment order will fail in the following circumstances:\n\nThe fulfillment order is closed.\nThe destination location has never stocked the requested inventory item.\nThe API client doesn't have the correct permissions.\n\nLine items which have already been fulfilled can't be re-assigned\nand will always remain assigned to the original location.\nYou can't change the assigned location while a fulfillment order has a\nrequest status\nof SUBMITTED, ACCEPTED, CANCELLATION_REQUESTED, or CANCELLATION_REJECTED.\nThese request statuses mean that a fulfillment order is awaiting action by a fulfillment service\nand can't be re-assigned without first having the fulfillment service accept a cancellation request.\nThis behavior is intended to prevent items from being fulfilled by multiple locations or fulfillment services.\nHow re-assigning line items affects fulfillment orders\nFirst scenario: Re-assign all line items belonging to a fulfillment order to a new location.\nIn this case, the\nassignedLocation\nof the original fulfillment order will be updated to the new location.\nSecond scenario: Re-assign a subset of the line items belonging to a fulfillment order to a new location.\nYou can specify a subset of line items using the fulfillmentOrderLineItems parameter\n(available as of the 2023-04 API version),\nor specify that the original fulfillment order contains line items which have already been fulfilled.\nIf the new location is already assigned to another active fulfillment order, on the same order, then\na new fulfillment order is created. The existing fulfillment order is closed and line items are recreated\nin a new fulfillment order.", "not_nullable": false}, {"name": "assignedLocation", "type": "fulfillmentOrderOpen", "description": "Marks a scheduled fulfillment order as open.", "not_nullable": false}, {"name": "assignedLocation", "type": "fulfillmentOrderRejectCancellationRequest", "description": "Rejects a cancellation request sent to a fulfillment service for a fulfillment order.", "not_nullable": false}, {"name": "assignedLocation", "type": "fulfillmentOrderRejectFulfillmentRequest", "description": "Rejects a fulfillment request sent to a fulfillment service for a fulfillment order.", "not_nullable": false}, {"name": "assignedLocation", "type": "fulfillmentOrderReleaseHold", "description": "Releases the fulfillment hold on a fulfillment order.", "not_nullable": false}, {"name": "assignedLocation", "type": "fulfillmentOrderReschedule", "description": "Reschedules a scheduled fulfillment order.\nUpdates the value of the fulfillAt field on a scheduled fulfillment order.\nThe fulfillment order will be marked as ready for fulfillment at this date and time.", "not_nullable": false}, {"name": "assignedLocation", "type": "fulfillmentOrderSubmitCancellationRequest", "description": "Sends a cancellation request to the fulfillment service of a fulfillment order.", "not_nullable": false}, {"name": "assignedLocation", "type": "fulfillmentOrderSubmitFulfillmentRequest", "description": "Sends a fulfillment request to the fulfillment service of a fulfillment order.", "not_nullable": false}, {"name": "assignedLocation", "type": "Node", "description": "The fulfillment order's assigned location. This is the location where the fulfillment is expected to happen.\nThe fulfillment order's assigned location might change in the following cases:\n\nThe fulfillment order has been entirely moved to a new location. For example, the fulfillmentOrderMove mutation has been called, and you see the original fulfillment order in the movedFulfillmentOrder field within the mutation's response.\nWork on the fulfillment order hasn't yet begun, which means that the fulfillment order has the\nOPEN,\nSCHEDULED, or\nON_HOLD\nstatus, and the shop's location properties might be undergoing edits (for example, in the Shopify admin).", "not_nullable": false}], "examples": []}, {"name": "FulfillmentOrderAssignedLocation", "description": "The fulfillment order's assigned location. This is the location where the fulfillment is expected to happen.\n The fulfillment order's assigned location might change in the following cases:\n\nThe fulfillment order has been entirely moved to a new location. For example, the fulfillmentOrderMove mutation has been called, and you see the original fulfillment order in the movedFulfillmentOrder field within the mutation's response.\n\nWork on the fulfillment order has not yet begun, which means that the fulfillment order has the\n  OPEN,\n  SCHEDULED, or\n  ON_HOLD\n  status, and the shop's location properties might be undergoing edits (for example, in the Shopify admin).\n\n\nIf the fulfillmentOrderMove mutation has moved the fulfillment order's line items to a new location,\nbut hasn't moved the fulfillment order instance itself, then the original fulfillment order's assigned location\ndoesn't change.\nThis happens if the fulfillment order is being split during the move, or if all line items can be moved\nto an existing fulfillment order at a new location.\nOnce the fulfillment order has been taken into work or canceled,\nwhich means that the fulfillment order has the\nIN_PROGRESS,\nCLOSED,\nCANCELLED, or\nINCOMPLETE\nstatus, FulfillmentOrderAssignedLocation acts as a snapshot of the shop's location content.\nUp-to-date shop's location data may be queried through location connection.", "fields_and_connections": [{"name": "address1", "type": "String", "description": "The first line of the address for the location.", "not_nullable": false}, {"name": "address2", "type": "String", "description": "The second line of the address for the location.", "not_nullable": false}, {"name": "city", "type": "String", "description": "The city of the location.", "not_nullable": false}, {"name": "countryCode", "type": "CountryCode!", "description": "The two-letter country code of the location.", "not_nullable": true}, {"name": "location", "type": "Location", "description": "The location where the fulfillment is expected to happen. This value might be different from\nFulfillmentOrderAssignedLocation if the location's attributes were updated\nafter the fulfillment order was taken into work of canceled.", "not_nullable": false}, {"name": "name", "type": "String!", "description": "The name of the location.", "not_nullable": true}, {"name": "phone", "type": "String", "description": "The phone number of the location.", "not_nullable": false}, {"name": "province", "type": "String", "description": "The province of the location.", "not_nullable": false}, {"name": "zip", "type": "String", "description": "The ZIP code of the location.", "not_nullable": false}], "examples": []}, {"name": "FulfillmentOrderDestination", "description": "Represents the destination where the items should be sent upon fulfillment.", "fields_and_connections": [{"name": "address1", "type": "Node", "description": "The first line of the address of the destination.", "not_nullable": false}], "examples": []}, {"name": "FulfillmentOrderInternationalDuties", "description": "The international duties relevant to a fulfillment order.", "fields_and_connections": [{"name": "incoterm", "type": "String!", "description": "The method of duties payment. Example values: DDP, DAP.", "not_nullable": true}], "examples": []}, {"name": "FulfillmentOrderLineItem", "description": "Associates an order line item with quantities requiring fulfillment from the respective fulfillment order.", "fields_and_connections": [{"name": "financialSummaries", "type": "Node", "description": "The financial summary for the Fulfillment Order's Line Items.", "not_nullable": false}], "examples": []}, {"name": "FulfillmentOrderLineItemFinancialSummary", "description": "The financial details of a fulfillment order line item.", "fields_and_connections": [{"name": "approximateDiscountedUnitPriceSet", "type": "MoneyBag!", "description": "The approximate split price of a line item unit, in shop and presentment currencies. This value doesn't include discounts applied to the entire order.For the full picture of applied discounts, see discountAllocations.", "not_nullable": true}, {"name": "discountAllocations", "type": "[FinancialSummaryDiscountAllocation!]!", "description": "The discounts that have been allocated onto the line item by discount applications, not including order edits and refunds.", "not_nullable": true}, {"name": "originalUnitPriceSet", "type": "MoneyBag!", "description": "The variant unit price without discounts applied, in shop and presentment currencies.", "not_nullable": true}, {"name": "quantity", "type": "Int!", "description": "Number of line items that this financial summary applies to.", "not_nullable": true}], "examples": []}, {"name": "FulfillmentOrderLineItemWarning", "description": "A fulfillment order line item warning. For example, a warning about why a fulfillment request was rejected.", "fields_and_connections": [{"name": "description", "type": "String", "description": "The description of warning.", "not_nullable": false}, {"name": "title", "type": "String", "description": "The title of warning.", "not_nullable": false}], "examples": []}, {"name": "FulfillmentOrderLocationForMove", "description": "A location that a fulfillment order can potentially move to.", "fields_and_connections": [{"name": "availableLineItems", "type": "FulfillmentOrderLineItemConnection!", "description": "Fulfillment order line items that can be moved from their current location to the given location.", "not_nullable": true}, {"name": "availableLineItemsCount", "type": "Count", "description": "Total number of fulfillment order line items that can be moved from their current assigned location to the\ngiven location.", "not_nullable": false}, {"name": "location", "type": "Location!", "description": "The location being considered as the fulfillment order's new assigned location.", "not_nullable": true}, {"name": "message", "type": "String", "description": "A human-readable string with the reason why the fulfillment order, or some of its line items, can't be\nmoved to the location.", "not_nullable": false}, {"name": "movable", "type": "Boolean!", "description": "Whether the fulfillment order can be moved to the location.", "not_nullable": true}, {"name": "unavailableLineItems", "type": "FulfillmentOrderLineItemConnection!", "description": "Fulfillment order line items that cannot be moved from their current location to the given location.", "not_nullable": true}, {"name": "unavailableLineItemsCount", "type": "Count", "description": "Total number of fulfillment order line items that can't be moved from their current assigned location to the\ngiven location.", "not_nullable": false}], "examples": []}, {"name": "FulfillmentOrderMerchantRequest", "description": "A request made by the merchant or an order management app to a fulfillment service\nfor a fulfillment order.", "fields_and_connections": [{"name": "fulfillmentOrder", "type": "Node", "description": "The fulfillment order associated with the merchant request.", "not_nullable": false}], "examples": []}, {"name": "FulfillmentOrderMergeResult", "description": "The result of merging a set of fulfillment orders.", "fields_and_connections": [{"name": "fulfillmentOrder", "type": "fulfillmentOrderMerge", "description": "Merges a set or multiple sets of fulfillment orders together into one based on\nline item inputs and quantities.", "not_nullable": false}], "examples": []}, {"name": "FulfillmentOrderSplitResult", "description": "The result of splitting a fulfillment order.", "fields_and_connections": [{"name": "fulfillmentOrder", "type": "fulfillmentOrderSplit", "description": "Splits a fulfillment order or orders based on line item inputs and quantities.", "not_nullable": false}], "examples": []}, {"name": "FulfillmentOrderSupportedAction", "description": "One of the actions that the fulfillment order supports in its current state.", "fields_and_connections": [{"name": "action", "type": "FulfillmentOrderAction!", "description": "The action value.", "not_nullable": true}, {"name": "externalUrl", "type": "URL", "description": "The external URL to be used to initiate the fulfillment process outside Shopify.\nApplicable only when the action value is EXTERNAL.", "not_nullable": false}], "examples": []}, {"name": "FulfillmentOriginAddress", "description": "The address at which the fulfillment occurred. This object is intended for tax purposes, as a full address is required for tax providers to accurately calculate taxes. Typically this is the address of the warehouse or fulfillment center. To retrieve a fulfillment location's address, use the assignedLocation field on the FulfillmentOrder object instead.", "fields_and_connections": [{"name": "address1", "type": "String", "description": "The street address of the fulfillment location.", "not_nullable": false}, {"name": "address2", "type": "String", "description": "The second line of the address. Typically the number of the apartment, suite, or unit.", "not_nullable": false}, {"name": "city", "type": "String", "description": "The city in which the fulfillment location is located.", "not_nullable": false}, {"name": "countryCode", "type": "String!", "description": "The country code of the fulfillment location.", "not_nullable": true}, {"name": "provinceCode", "type": "String", "description": "The province code of the fulfillment location.", "not_nullable": false}, {"name": "zip", "type": "String", "description": "The zip code of the fulfillment location.", "not_nullable": false}], "examples": []}, {"name": "FulfillmentService", "description": "A Fulfillment Service is a third party warehouse that prepares and ships orders\non behalf of the store owner. Fulfillment services charge a fee to package and ship items\nand update product inventory levels. Some well known fulfillment services with Shopify integrations\ninclude: Amazon, Shipwire, and Rakuten. When an app registers a new FulfillmentService on a store,\nShopify automatically creates a Location that's associated to the fulfillment service.\nTo learn more about fulfillment services, refer to\nManage fulfillments as a fulfillment service app\nguide.\nMutations\nYou can work with the FulfillmentService object with the\nfulfillmentServiceCreate,\nfulfillmentServiceUpdate,\nand fulfillmentServiceDelete\nmutations.\nHosted endpoints\nFulfillment service providers integrate with Shopify by providing Shopify with a set of hosted endpoints that\nShopify can query on certain conditions.\nThese endpoints must have a common prefix, and this prefix should be supplied in the callbackUrl parameter\nin the\nfulfillmentServiceCreate\nmutation.\n\nShopify sends POST requests to the <callbackUrl>/fulfillment_order_notification endpoint\nto notify the fulfillment service about fulfillment requests and fulfillment cancellation requests.\nFor more information, refer to\nReceive fulfillment requests and cancellations.\n\nShopify sends GET requests to the <callbackUrl>/fetch_tracking_numbers endpoint to retrieve tracking numbers for orders\nif trackingSupport is set to true.\nFor more information, refer to\nEnable tracking support.\nFulfillment services can also update tracking information using the\nfulfillmentTrackingInfoUpdate mutation,\nrather than waiting for Shopify to ask for tracking numbers.\n\nShopify sends GET requests to the <callbackUrl>/fetch_stock endpoint to retrieve\non hand inventory levels for the fulfillment service location if inventoryManagement is set to true.\nFor more information, refer to\nSharing inventory levels with Shopify.\n\n\nTo make sure you have everything set up correctly, you can test the callbackUrl-prefixed endpoints\nin your development store.\nResources and webhooks\nThere are a variety of objects and webhooks that enable a fulfillment service to work.\nTo exchange fulfillment information with Shopify, fulfillment services use the\nFulfillmentOrder,\nFulfillment and\nOrder objects and related mutations.\nTo act on fulfillment process events that happen on the Shopify side,\nbesides awaiting calls to callbackUrl-prefixed endpoints,\nfulfillment services can subscribe to the\nfulfillment order\nand order\nwebhooks.", "fields_and_connections": [{"name": "callbackUrl", "type": "fulfillmentService", "description": "Returns a FulfillmentService resource by ID.", "not_nullable": false}, {"name": "callbackUrl", "type": "fulfillmentServiceCreate", "description": "Creates a fulfillment service.\nFulfillment service location\nWhen creating a fulfillment service, a new location will be automatically created on the shop\nand will be associated with this fulfillment service.\nThis location will be named after the fulfillment service and inherit the shop's address.\nIf you are using API version 2023-10 or later, and you need to specify custom attributes for the fulfillment service location\n(for example, to change its address to a country different from the shop's country),\nuse the\nLocationEdit\nmutation after creating the fulfillment service.", "not_nullable": false}, {"name": "callbackUrl", "type": "fulfillmentServiceUpdate", "description": "Updates a fulfillment service.\nIf you are using API version 2023-10 or later,\nand you need to update the location managed by the fulfillment service\n(for example, to change the address of a fulfillment service),\nuse the\nLocationEdit\nmutation.", "not_nullable": false}], "examples": []}, {"name": "FulfillmentTrackingInfo", "description": "Represents the tracking information for a fulfillment.", "fields_and_connections": [{"name": "company", "type": "String", "description": "The name of the tracking company.\nFor tracking company names from the list below\nShopify will automatically build tracking URLs for all provided tracking numbers,\nwhich will make the tracking numbers clickable in the interface.\nAdditionally, for the tracking companies listed on the\nShipping Carriers help page\nShopify will automatically update the fulfillment's shipment_status field during the fulfillment process.\nSupported tracking companies\nThe following tracking companies display for shops located in any country:\n\n4PX\nAGS\nAmazon\nAmazon Logistics UK\nAn Post\nAnjun Logistics\nAPC\nAsendia USA\nAustralia Post\nBonshaw\nBPost\nBPost International\nCanada Post\nCanpar\nCDL Last Mile\nChina Post\nChronopost\nChukou1\nColissimo\nComingle\nCoordinadora\nCorreios\nCorreos\nCTT\nCTT Express\nCyprus Post\nDelnext\nDeutsche Post\nDHL eCommerce\nDHL eCommerce Asia\nDHL Express\nDPD\nDPD Local\nDPD UK\nDTD Express\nDX\nEagle\nEstes\nEvri\nFedEx\nFirst Global Logistics\nFirst Line\nFSC\nFulfilla\nGLS\nGuangdong Weisuyi Information Technology (WSE)\nHeppner Internationale Spedition GmbH & Co.\nIceland Post\nIDEX\nIsrael Post\nJapan Post (EN)\nJapan Post (JA)\nLa Poste\nLasership\nLatvia Post\nLietuvos Pa\u0161tas\nLogisters\nLone Star Overnight\nM3 Logistics\nMeteor Space\nMondial Relay\nNew Zealand Post\nNinjaVan\nNorth Russia Supply Chain (Shenzhen) Co.\nOnTrac\nPacketa\nPago Logistics\nPing An Da Tengfei Express\nPitney Bowes\nPortal PostNord\nPoste Italiane\nPostNL\nPostNord DK\nPostNord NO\nPostNord SE\nPurolator\nQxpress\nQyun Express\nRoyal Mail\nRoyal Shipments\nSagawa (EN)\nSagawa (JA)\nSendle\nSF Express\nSFC Fulfillment\nSHREE NANDAN COURIER\nSingapore Post\nSouthwest Air Cargo\nStarTrack\nStep Forward Freight\nSwiss Post\nTForce Final Mile\nTinghao\nTNT\nToll IPEC\nUnited Delivery Service\nUPS\nUSPS\nVenipak\nWe Post\nWhistl\nWizmo\nWMYC\nXpedigo\nXPO Logistics\nYamato (EN)\nYamato (JA)\nYiFan Express\nYunExpress\n\nThe following tracking companies are displayed for shops located in specific countries:\n\nAustralia: Australia Post, Sendle, Aramex Australia, TNT Australia, Hunter Express, Couriers Please, Bonds, Allied Express, Direct Couriers, Northline, GO Logistics\nAustria: \u00d6sterreichische Post\nBulgaria: Speedy\nCanada: Intelcom, BoxKnight, Loomis, GLS\nChina: China Post, DHL eCommerce Asia, WanbExpress, YunExpress, Anjun Logistics, SFC Fulfillment, FSC\nCzechia: Z\u00e1silkovna\nGermany: Deutsche Post (DE), Deutsche Post (EN), DHL, DHL Express, Swiship, Hermes, GLS\nSpain: SEUR\nFrance: Colissimo, Mondial Relay, Colis Priv\u00e9, GLS\nUnited Kingdom: Evri, DPD UK, Parcelforce, Yodel, DHL Parcel, Tuffnells\nGreece: ACS Courier\nHong Kong SAR: SF Express\nIreland: Fastway, DPD Ireland\nIndia: DTDC, India Post, Delhivery, Gati KWE, Professional Couriers, XpressBees, Ecom Express, Ekart, Shadowfax, Bluedart\nItaly: BRT, GLS Italy\nJapan: \u30a8\u30b3\u914d, \u897f\u6fc3\u904b\u8f38, \u897f\u6fc3\u30b9\u30fc\u30d1\u30fc\u30a8\u30ad\u30b9\u30d7\u30ec\u30b9, \u798f\u5c71\u901a\u904b, \u65e5\u672c\u901a\u904b, \u540d\u9244\u904b\u8f38, \u7b2c\u4e00\u8ca8\u7269\nNetherlands: DHL Parcel, DPD\nNorway: Bring\nPoland: Inpost\nTurkey: PTT, Yurti\u00e7i Kargo, Aras Kargo, S\u00fcrat Kargo\nUnited States: GLS, Alliance Air Freight, Pilot Freight, LSO, Old Dominion, Pandion, R+L Carriers, Southwest Air Cargo\nSouth Africa: Fastway, Skynet.", "not_nullable": false}, {"name": "number", "type": "String", "description": "The tracking number of the fulfillment.\nThe tracking number is clickable in the interface if one of the following applies\n(the highest in the list has the highest priority):\n\nTracking url provided in the url field.\nShopify-known tracking company name specified in the company field.\nShopify will build the tracking URL automatically based on the tracking number specified.\nThe tracking number has a Shopify-known format.\nShopify will guess the tracking provider and build the tracking url based on the tracking number format.\nNot all tracking carriers are supported, and multiple tracking carriers may use similarly formatted tracking numbers.\nThis can result in an invalid tracking URL.\nIt is highly recommended that you send the tracking company and the tracking URL.", "not_nullable": false}, {"name": "url", "type": "URL", "description": "The URLs to track the fulfillment.\nThe tracking URL is displayed in the merchant's admin on the order page.\nThe tracking URL is displayed in the shipping confirmation email, which can optionally be sent to the customer.\nWhen accounts are enabled, it's also displayed in the customer's order history.", "not_nullable": false}], "examples": []}, {"name": "ShippingRate", "description": "A shipping rate is an additional cost added to the cost of the products that were ordered.", "fields_and_connections": [{"name": "handle", "type": "String!", "description": "Human-readable unique identifier for this shipping rate.", "not_nullable": true}, {"name": "price", "type": "MoneyV2!", "description": "The cost associated with the shipping rate.", "not_nullable": true}, {"name": "title", "type": "String!", "description": "The name of the shipping rate.", "not_nullable": true}], "examples": []}]}, {"name": "Shopify Markets", "queries": [{"name": "backupRegion", "description": "The backup region of the shop.", "arguments": [], "returns": [{"name": "MarketRegion", "type": "MarketRegion!", "description": "non-null"}, {"name": "MarketRegion", "type": "MarketRegion!", "description": "non-null"}, {"name": "MarketRegion", "type": "MarketRegion!", "description": "non-null"}], "examples": []}, {"name": "market", "description": "Returns a market resource by ID.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of the Market to return."}], "returns": [], "examples": []}, {"name": "marketByGeography", "description": "Returns the applicable market for a customer based on where they are in the world. This market_by_geography field will be removed in a future version of the API.", "arguments": [{"name": "countryCode", "type": "CountryCode!", "required": false, "description": "The code for the country where the customer is."}], "returns": [], "examples": []}, {"name": "markets", "description": "The markets configured for the shop.", "arguments": [{"name": "after", "type": "String", "required": false, "description": "The elements that come after the specified cursor."}, {"name": "before", "type": "String", "required": false, "description": "The elements that come before the specified cursor."}, {"name": "first", "type": "Int", "required": false, "description": "The first n elements from the paginated list."}, {"name": "last", "type": "Int", "required": false, "description": "The last n elements from the paginated list."}, {"name": "query", "type": "String", "required": false, "description": "A filter made up of terms, connectives, modifiers, and comparators.\nYou can apply one or more filters to a query. Learn more about Shopify API search syntax."}, {"name": "reverse", "type": "Boolean", "required": false, "description": "Reverse the order of the underlying list."}, {"name": "sortKey", "type": "MarketsSortKeys", "required": false, "description": "Sort the underlying list using a key. If your query is slow or returns an error, then try specifying a sort key that matches the field used in the search."}, {"name": "type", "type": "MarketType", "required": false, "description": "Filters markets by type."}], "returns": [], "examples": [{"description": "Get market web presences and their root URLs", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `query Markets {\n    markets(first: 4) {\n      nodes {\n        name\n        webPresence {\n          rootUrls {\n            locale\n            url\n          }\n        }\n      }\n    }\n  }`,\n});\n"}, {"description": "Get the first four markets", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `query Markets {\n    markets(first: 4) {\n      nodes {\n        id\n        name\n        regions(first: 2) {\n          pageInfo {\n            hasNextPage\n          }\n          nodes {\n            name\n            ... on MarketRegionCountry {\n              code\n            }\n          }\n        }\n      }\n    }\n  }`,\n});\n"}]}, {"name": "primaryMarket", "description": "The primary market of the shop. Use backupRegion instead.", "arguments": [], "returns": [{"name": "Market", "type": "Market!", "description": "non-null"}, {"name": "Market", "type": "Market!", "description": "non-null"}, {"name": "Market", "type": "Market!", "description": "non-null"}, {"name": "Market", "type": "Market!", "description": ""}, {"name": "Market", "type": "Market!", "description": ""}, {"name": "Market", "type": "Market!", "description": ""}, {"name": "Market", "type": "Market!", "description": "non-null"}, {"name": "Market", "type": "Market!", "description": "non-null"}, {"name": "Market", "type": "Market!", "description": ""}, {"name": "Market", "type": "Market!", "description": "non-null"}, {"name": "Market", "type": "Market!", "description": "non-null"}, {"name": "Market", "type": "Market!", "description": ""}, {"name": "Market", "type": "Market!", "description": "non-null"}, {"name": "Market", "type": "Market!", "description": "non-null"}, {"name": "Market", "type": "Market!", "description": "non-null"}, {"name": "Market", "type": "Market!", "description": "non-null"}, {"name": "Market", "type": "Market!", "description": "non-null"}, {"name": "Market", "type": "Market!", "description": ""}, {"name": "Market", "type": "Market!", "description": "non-null"}, {"name": "Market", "type": "Market!", "description": "non-null"}, {"name": "Market", "type": "Market!", "description": ""}], "examples": []}, {"name": "webPresences", "description": "The web presences for the shop.", "arguments": [{"name": "after", "type": "String", "required": false, "description": "The elements that come after the specified cursor."}, {"name": "before", "type": "String", "required": false, "description": "The elements that come before the specified cursor."}, {"name": "first", "type": "Int", "required": false, "description": "The first n elements from the paginated list."}, {"name": "last", "type": "Int", "required": false, "description": "The last n elements from the paginated list."}, {"name": "reverse", "type": "Boolean", "required": false, "description": "Reverse the order of the underlying list."}], "returns": [], "examples": []}], "mutations": [{"name": "backupRegionUpdate", "description": "Update the backup region that is used when we have no better signal of what region a buyer is in.", "arguments": [{"name": "region", "type": "BackupRegionUpdateInput", "required": false, "description": "Optional input representing the region to be updated. If not provided, the existing regions remain unchanged."}], "returns": [], "examples": []}, {"name": "marketCreate", "description": "Creates a new market.", "arguments": [{"name": "input", "type": "MarketCreateInput!", "required": false, "description": "The properties of the new market."}], "returns": [], "examples": [{"description": "Create a B2B market for all company locations located in the United States", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation marketCreate($input: MarketCreateInput!) {\n      marketCreate(input: $input) {\n        market {\n          id\n          handle\n          status\n          conditions {\n            companyLocationsCondition {\n              companyLocations(first: 10) {\n                edges {\n                  node {\n                    id\n                  }\n                }\n              }\n            }\n          }\n          currencySettings {\n            baseCurrency {\n              currencyCode\n            }\n            localCurrencies\n          }\n        }\n        userErrors {\n          field\n          message\n          code\n        }\n      }\n    }`,\n    \"variables\": {\n      \"input\": {\n        \"name\": \"Company Location Market\",\n        \"handle\": \"Company-Location\",\n        \"enabled\": true,\n        \"conditions\": {\n          \"regionsCondition\": {\n            \"regions\": [\n              {\n                \"countryCode\": \"US\"\n              }\n            ]\n          },\n          \"companyLocationsCondition\": {\n            \"applicationLevel\": \"ALL\"\n          }\n        },\n        \"currencySettings\": {\n          \"baseCurrency\": \"USD\",\n          \"localCurrencies\": false\n        }\n      }\n    },\n  },\n});\n"}, {"description": "Create a B2B market with a specific currency and price inclusions", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation marketCreate($input: MarketCreateInput!) {\n      marketCreate(input: $input) {\n        market {\n          id\n          handle\n          status\n          conditions {\n            companyLocationsCondition {\n              companyLocations(first: 10) {\n                edges {\n                  node {\n                    id\n                  }\n                }\n              }\n            }\n          }\n          currencySettings {\n            baseCurrency {\n              currencyCode\n            }\n            localCurrencies\n          }\n        }\n        userErrors {\n          field\n          message\n          code\n        }\n      }\n    }`,\n    \"variables\": {\n      \"input\": {\n        \"name\": \"Company Location Market\",\n        \"handle\": \"company-location-market\",\n        \"enabled\": true,\n        \"conditions\": {\n          \"companyLocationsCondition\": {\n            \"companyLocationIds\": [\n              \"gid://shopify/CompanyLocation/423757199\"\n            ]\n          }\n        },\n        \"currencySettings\": {\n          \"baseCurrency\": \"USD\",\n          \"localCurrencies\": false\n        }\n      }\n    },\n  },\n});\n"}, {"description": "Create a North America market with a catalog and web presences", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation marketCreate($input: MarketCreateInput!) {\n      marketCreate(input: $input) {\n        market {\n          id\n          handle\n          status\n          conditions {\n            regionsCondition {\n              regions(first: 10) {\n                edges {\n                  node {\n                    id\n                    name\n                  }\n                }\n              }\n            }\n          }\n          catalogs(first: 10) {\n            edges {\n              node {\n                id\n              }\n            }\n          }\n          webPresences(first: 10) {\n            edges {\n              node {\n                domain {\n                  id\n                }\n                subfolderSuffix\n              }\n            }\n          }\n        }\n        userErrors {\n          field\n          message\n          code\n        }\n      }\n    }`,\n    \"variables\": {\n      \"input\": {\n        \"name\": \"North America Market\",\n        \"handle\": \"NA\",\n        \"enabled\": true,\n        \"conditions\": {\n          \"regionsCondition\": {\n            \"regions\": [\n              {\n                \"countryCode\": \"US\"\n              },\n              {\n                \"countryCode\": \"CA\"\n              },\n              {\n                \"countryCode\": \"MX\"\n              }\n            ]\n          }\n        },\n        \"catalogs\": [\n          \"gid://shopify/Catalog/307400570\"\n        ],\n        \"webPresences\": [\n          \"gid://shopify/MarketWebPresence/1068177692\"\n        ]\n      }\n    },\n  },\n});\n"}, {"description": "Create a POS market for all locations", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation marketCreate($input: MarketCreateInput!) {\n      marketCreate(input: $input) {\n        market {\n          id\n          handle\n          status\n          conditions {\n            locationsCondition {\n              locations(first: 10) {\n                edges {\n                  node {\n                    id\n                  }\n                }\n              }\n            }\n          }\n          currencySettings {\n            baseCurrency {\n              currencyCode\n            }\n            localCurrencies\n          }\n        }\n        userErrors {\n          field\n          message\n          code\n        }\n      }\n    }`,\n    \"variables\": {\n      \"input\": {\n        \"name\": \"All POS Market\",\n        \"handle\": \"all-pos-market\",\n        \"enabled\": true,\n        \"conditions\": {\n          \"locationsCondition\": {\n            \"applicationLevel\": \"ALL\"\n          }\n        },\n        \"currencySettings\": {\n          \"baseCurrency\": \"USD\",\n          \"localCurrencies\": false\n        }\n      }\n    },\n  },\n});\n"}, {"description": "marketCreate reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation marketCreate($input: MarketCreateInput!) {\n      marketCreate(input: $input) {\n        market {\n          id\n          handle\n          status\n          conditions {\n            companyLocationsCondition {\n              companyLocations(first: 10) {\n                edges {\n                  node {\n                    id\n                  }\n                }\n              }\n            }\n          }\n          currencySettings {\n            baseCurrency {\n              currencyCode\n            }\n            localCurrencies\n          }\n        }\n        userErrors {\n          field\n          message\n          code\n        }\n      }\n    }`,\n    \"variables\": {\n      \"input\": {\n        \"name\": \"Company Location Market\",\n        \"handle\": \"Company-Location\",\n        \"enabled\": true,\n        \"conditions\": {\n          \"regionsCondition\": {\n            \"regions\": [\n              {\n                \"countryCode\": \"US\"\n              }\n            ]\n          },\n          \"companyLocationsCondition\": {\n            \"applicationLevel\": \"ALL\"\n          }\n        },\n        \"currencySettings\": {\n          \"baseCurrency\": \"USD\",\n          \"localCurrencies\": false\n        }\n      }\n    },\n  },\n});\n"}]}, {"name": "marketCurrencySettingsUpdate", "description": "Updates currency settings of a market.", "arguments": [{"name": "input", "type": "MarketCurrencySettingsUpdateInput!", "required": false, "description": "Properties to update for the market currency settings."}, {"name": "marketId", "type": "ID!", "required": false, "description": "The ID of the market definition to target."}], "returns": [], "examples": []}, {"name": "marketDelete", "description": "Deletes a market definition.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of the market to delete."}], "returns": [], "examples": []}, {"name": "marketRegionDelete", "description": "Deletes a market region. Use marketUpdate instead.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of the market region to delete."}], "returns": [], "examples": []}, {"name": "marketRegionsCreate", "description": "Creates regions that belong to an existing market. This mutation is deprecated and will be removed in the future. Use marketCreate or marketUpdate instead.", "arguments": [{"name": "marketId", "type": "ID!", "required": false, "description": "The ID of the market to add the regions to."}, {"name": "regions", "type": "[MarketRegionCreateInput!]!", "required": false, "description": "The regions to be created."}], "returns": [], "examples": []}, {"name": "marketUpdate", "description": "Updates the properties of a market.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of the market to update."}, {"name": "input", "type": "MarketUpdateInput!", "required": false, "description": "The properties to update."}], "returns": [], "examples": [{"description": "Update a market status to make it draft", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation marketUpdate($input: MarketUpdateInput!) {\n      marketUpdate(id: \"gid://shopify/Market/73827535\", input: $input) {\n        market {\n          id\n          handle\n          status\n          conditions {\n            regionsCondition {\n              regions(first: 10) {\n                edges {\n                  node {\n                    id\n                    name\n                  }\n                }\n              }\n            }\n          }\n          currencySettings {\n            baseCurrency {\n              currencyCode\n            }\n            localCurrencies\n          }\n        }\n        userErrors {\n          field\n          message\n          code\n        }\n      }\n    }`,\n    \"variables\": {\n      \"input\": {\n        \"status\": \"DRAFT\"\n      }\n    },\n  },\n});\n"}, {"description": "Update a market to add a new catalog", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation marketUpdate($input: MarketUpdateInput!) {\n      marketUpdate(id: \"gid://shopify/Market/73827535\", input: $input) {\n        market {\n          id\n          handle\n          status\n          conditions {\n            regionsCondition {\n              regions(first: 10) {\n                edges {\n                  node {\n                    id\n                    name\n                  }\n                }\n              }\n            }\n          }\n          catalogs(first: 10) {\n            edges {\n              node {\n                id\n              }\n            }\n          }\n        }\n        userErrors {\n          field\n          message\n          code\n        }\n      }\n    }`,\n    \"variables\": {\n      \"input\": {\n        \"catalogsToAdd\": [\n          \"gid://shopify/Catalog/307400570\"\n        ]\n      }\n    },\n  },\n});\n"}, {"description": "Update a market to change its conditions", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation marketUpdate($input: MarketUpdateInput!) {\n      marketUpdate(id: \"gid://shopify/Market/73827535\", input: $input) {\n        market {\n          id\n          handle\n          status\n          conditions {\n            regionsCondition {\n              regions(first: 10) {\n                edges {\n                  node {\n                    id\n                    name\n                  }\n                }\n              }\n            }\n          }\n          catalogs(first: 10) {\n            edges {\n              node {\n                id\n              }\n            }\n          }\n        }\n        userErrors {\n          field\n          message\n          code\n        }\n      }\n    }`,\n    \"variables\": {\n      \"input\": {\n        \"conditions\": {\n          \"conditionsToAdd\": {\n            \"regionsCondition\": {\n              \"regions\": [\n                {\n                  \"countryCode\": \"GB\"\n                }\n              ]\n            }\n          },\n          \"conditionsToDelete\": {\n            \"regionsCondition\": {\n              \"regions\": [\n                {\n                  \"countryCode\": \"US\"\n                }\n              ]\n            }\n          }\n        }\n      }\n    },\n  },\n});\n"}, {"description": "marketUpdate reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation marketUpdate($input: MarketUpdateInput!) {\n      marketUpdate(id: \"gid://shopify/Market/73827535\", input: $input) {\n        market {\n          id\n          handle\n          status\n          conditions {\n            regionsCondition {\n              regions(first: 10) {\n                edges {\n                  node {\n                    id\n                    name\n                  }\n                }\n              }\n            }\n          }\n          currencySettings {\n            baseCurrency {\n              currencyCode\n            }\n            localCurrencies\n          }\n        }\n        userErrors {\n          field\n          message\n          code\n        }\n      }\n    }`,\n    \"variables\": {\n      \"input\": {\n        \"status\": \"DRAFT\"\n      }\n    },\n  },\n});\n"}]}, {"name": "marketWebPresenceCreate", "description": "Creates a web presence for a market. Use webPresenceCreate instead.", "arguments": [{"name": "marketId", "type": "ID!", "required": false, "description": "The ID of the market for which to create a web presence."}, {"name": "webPresence", "type": "MarketWebPresenceCreateInput!", "required": false, "description": "The details of the web presence to be created."}], "returns": [], "examples": []}, {"name": "marketWebPresenceDelete", "description": "Deletes a market web presence. Use webPresenceDelete instead.", "arguments": [{"name": "webPresenceId", "type": "ID!", "required": false, "description": "The ID of the web presence to delete."}], "returns": [], "examples": []}, {"name": "marketWebPresenceUpdate", "description": "Updates a market web presence. Use webPresenceUpdate instead.", "arguments": [{"name": "webPresence", "type": "MarketWebPresenceUpdateInput!", "required": false, "description": "The web_presence fields used to update the market's web presence."}, {"name": "webPresenceId", "type": "ID!", "required": false, "description": "The ID of the web presence to update."}], "returns": [], "examples": []}, {"name": "webPresenceCreate", "description": "Creates a web presence.", "arguments": [{"name": "input", "type": "WebPresenceCreateInput!", "required": false, "description": "The details of the web presence to be created."}], "returns": [], "examples": []}, {"name": "webPresenceDelete", "description": "Deletes a web presence.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of the web presence to delete."}], "returns": [], "examples": []}, {"name": "webPresenceUpdate", "description": "Updates a web presence.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of the web presence to update."}, {"name": "input", "type": "WebPresenceUpdateInput!", "required": false, "description": "The web presence properties to update."}], "returns": [], "examples": []}], "objects": [{"name": "Market", "description": "A market is a group of one or more regions that you want to target for international sales.\nBy creating a market, you can configure a distinct, localized shopping experience for\ncustomers from a specific area of the world. For example, you can\nchange currency,\nconfigure international pricing,\nor add market-specific domains or subfolders.", "fields_and_connections": [{"name": "assignedCustomization", "type": "market", "description": "Returns a market resource by ID.", "not_nullable": false}, {"name": "assignedCustomization", "type": "markets", "description": "The markets configured for the shop.", "not_nullable": false}, {"name": "assignedCustomization", "type": "marketByGeography", "description": "Returns the applicable market for a customer based on where they are in the world. This market_by_geography field will be removed in a future version of the API.", "not_nullable": false}, {"name": "assignedCustomization", "type": "primaryMarket", "description": "The primary market of the shop. Use backupRegion instead.", "not_nullable": false}, {"name": "assignedCustomization", "type": "marketCreate", "description": "Creates a new market.", "not_nullable": false}, {"name": "assignedCustomization", "type": "marketCurrencySettingsUpdate", "description": "Updates currency settings of a market.", "not_nullable": false}, {"name": "assignedCustomization", "type": "marketUpdate", "description": "Updates the properties of a market.", "not_nullable": false}, {"name": "assignedCustomization", "type": "marketRegionDelete", "description": "Deletes a market region. Use marketUpdate instead.", "not_nullable": false}, {"name": "assignedCustomization", "type": "marketRegionsCreate", "description": "Creates regions that belong to an existing market. This mutation is deprecated and will be removed in the future. Use marketCreate or marketUpdate instead.", "not_nullable": false}, {"name": "assignedCustomization", "type": "marketWebPresenceCreate", "description": "Creates a web presence for a market. Use webPresenceCreate instead.", "not_nullable": false}, {"name": "assignedCustomization", "type": "marketWebPresenceDelete", "description": "Deletes a market web presence. Use webPresenceDelete instead.", "not_nullable": false}, {"name": "assignedCustomization", "type": "marketWebPresenceUpdate", "description": "Updates a market web presence. Use webPresenceUpdate instead.", "not_nullable": false}, {"name": "assignedCustomization", "type": "HasMetafieldDefinitions", "description": "Whether the market has a customization with the given ID.", "not_nullable": false}, {"name": "assignedCustomization", "type": "HasMetafields", "description": "Whether the market has a customization with the given ID.", "not_nullable": false}, {"name": "assignedCustomization", "type": "Node", "description": "Whether the market has a customization with the given ID.", "not_nullable": false}], "examples": []}, {"name": "MarketConditions", "description": "The conditions that determine whether a visitor is in a market.", "fields_and_connections": [{"name": "companyLocationsCondition", "type": "CompanyLocationsCondition", "description": "The company location conditions that determine whether a visitor is in the market.", "not_nullable": false}, {"name": "conditionTypes", "type": "[MarketConditionType!]!", "description": "The set of condition types that are defined for the market.", "not_nullable": true}, {"name": "locationsCondition", "type": "LocationsCondition", "description": "The retail location conditions that determine whether a visitor is in the market.", "not_nullable": false}, {"name": "regionsCondition", "type": "RegionsCondition", "description": "The region conditions that determine whether a visitor is in the market.", "not_nullable": false}], "examples": []}, {"name": "MarketCurrencySettings", "description": "A market's currency settings.", "fields_and_connections": [{"name": "baseCurrency", "type": "CurrencySetting!", "description": "The currency which this market's customers must use if local currencies are disabled.", "not_nullable": true}, {"name": "localCurrencies", "type": "Boolean!", "description": "Whether or not local currencies are enabled. If enabled, then prices will\nbe converted to give each customer the best experience based on their\nregion. If disabled, then all customers in this market will see prices\nin the market's base currency.", "not_nullable": true}], "examples": []}, {"name": "MarketRegionCountry", "description": "A country which comprises a market.", "fields_and_connections": [{"name": "code", "type": "MarketRegion", "description": "The ISO code identifying the country.", "not_nullable": false}, {"name": "code", "type": "Node", "description": "The ISO code identifying the country.", "not_nullable": false}], "examples": []}, {"name": "MarketsB2BEntitlement", "description": "The entitlements for B2B markets.", "fields_and_connections": [{"name": "catalogs", "type": "MarketsCatalogsEntitlement!", "description": "The entitlements for B2B market catalogs.", "not_nullable": true}, {"name": "enabled", "type": "Boolean!", "description": "Whether B2B markets are enabled.", "not_nullable": true}], "examples": []}, {"name": "MarketsRegionsEntitlement", "description": "The entitlements for region markets.", "fields_and_connections": [{"name": "catalogs", "type": "MarketsCatalogsEntitlement!", "description": "The entitlements for region market catalogs.", "not_nullable": true}, {"name": "enabled", "type": "Boolean!", "description": "Whether region markets are enabled.", "not_nullable": true}], "examples": []}, {"name": "MarketsRetailEntitlement", "description": "The entitlements for retail markets.", "fields_and_connections": [{"name": "catalogs", "type": "MarketsCatalogsEntitlement!", "description": "The entitlements for retail market catalogs.", "not_nullable": true}, {"name": "enabled", "type": "Boolean!", "description": "Whether retail markets are enabled.", "not_nullable": true}], "examples": []}, {"name": "MarketWebPresence", "description": "The market\u2019s web presence, which defines its SEO strategy. This can be a different domain\n(e.g. example.ca), subdomain (e.g. ca.example.com), or subfolders of the primary\ndomain (e.g. example.com/en-ca). Each web presence comprises one or more language\nvariants. If a market does not have its own web presence, it is accessible on the shop\u2019s\nprimary domain via country\nselectors.\nNote: while the domain/subfolders defined by a market\u2019s web presence are not applicable to\ncustom storefronts, which must manage their own domains and routing, the languages chosen\nhere do govern the languages available on the Storefront\nAPI for the countries in\nthis market.", "fields_and_connections": [{"name": "alternateLocales", "type": "webPresences", "description": "The web presences for the shop.", "not_nullable": false}, {"name": "alternateLocales", "type": "webPresenceCreate", "description": "Creates a web presence.", "not_nullable": false}, {"name": "alternateLocales", "type": "webPresenceUpdate", "description": "Updates a web presence.", "not_nullable": false}, {"name": "alternateLocales", "type": "Node", "description": "The ShopLocale object for the alternate locales. When a domain is used, these locales will be\navailable as language-specific subfolders. For example, if English is an\nalternate locale, and example.ca is the market\u2019s domain, then\nexample.ca/en will load in English.", "not_nullable": false}], "examples": []}, {"name": "MarketWebPresenceRootUrl", "description": "The URL for the homepage of the online store in the context of a particular market and a\nparticular locale.", "fields_and_connections": [{"name": "locale", "type": "String!", "description": "The locale that the storefront loads in.", "not_nullable": true}, {"name": "url", "type": "URL!", "description": "The URL.", "not_nullable": true}], "examples": []}, {"name": "RegionsCondition", "description": "A condition checking the visitor's region.", "fields_and_connections": [{"name": "applicationLevel", "type": "MarketConditionApplicationType", "description": "The application level for the condition.", "not_nullable": false}, {"name": "regions", "type": "MarketRegionConnection!", "description": "The regions that comprise the market.", "not_nullable": true}], "examples": []}, {"name": "WebPresence", "description": "This can be a domain (e.g. example.ca), subdomain (e.g. ca.example.com), or subfolders of the primary\ndomain (e.g. example.com/en-ca). Each web presence comprises one or more language\nvariants.\nNote: while the domain/subfolders defined by a web presence are not applicable to\ncustom storefronts, which must manage their own domains and routing, the languages chosen\nhere do govern the languages available on the Storefront\nAPI for the countries\nusing this web presence.", "fields_and_connections": [{"name": "alternateLocales", "type": "Node", "description": "The ShopLocale object for the alternate locales. When a domain is used, these locales will be\navailable as language-specific subfolders. For example, if English is an\nalternate locale, and example.ca is the domain, then\nexample.ca/en will load in English.", "not_nullable": false}], "examples": []}, {"name": "WebPresenceRootUrl", "description": "The URL for the homepage of the online store in the context of the web presence and a\nparticular locale.", "fields_and_connections": [{"name": "locale", "type": "String!", "description": "The locale that the storefront loads in.", "not_nullable": true}, {"name": "url", "type": "URL!", "description": "The URL.", "not_nullable": true}], "examples": []}]}, {"name": "Shopify Payments", "queries": [{"name": "dispute", "description": "Returns dispute details based on ID.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of the ShopifyPaymentsDispute to return."}], "returns": [], "examples": []}, {"name": "disputeEvidence", "description": "Returns dispute evidence details based on ID.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of the ShopifyPaymentsDisputeEvidence to return."}], "returns": [], "examples": []}, {"name": "financeKycInformation", "description": "Returns the KYC information for the shop's Shopify Payments account, used in embedded finance apps.", "arguments": [], "returns": [{"name": "FinanceKycInformation", "type": "FinanceKycInformation", "description": "non-null"}, {"name": "FinanceKycInformation", "type": "FinanceKycInformation", "description": ""}, {"name": "FinanceKycInformation", "type": "FinanceKycInformation", "description": ""}, {"name": "FinanceKycInformation", "type": "FinanceKycInformation", "description": ""}, {"name": "FinanceKycInformation", "type": "FinanceKycInformation", "description": ""}, {"name": "FinanceKycInformation", "type": "FinanceKycInformation", "description": "non-null"}, {"name": "FinanceKycInformation", "type": "FinanceKycInformation", "description": ""}], "examples": []}, {"name": "shopifyPaymentsAccount", "description": "Shopify Payments account information, including balances and payouts.", "arguments": [], "returns": [{"name": "ShopifyPaymentsAccount", "type": "ShopifyPaymentsAccount", "description": "non-null"}, {"name": "ShopifyPaymentsAccount", "type": "ShopifyPaymentsAccount", "description": ""}, {"name": "ShopifyPaymentsAccount", "type": "ShopifyPaymentsAccount", "description": "non-null"}, {"name": "ShopifyPaymentsAccount", "type": "ShopifyPaymentsAccount", "description": "non-null"}, {"name": "ShopifyPaymentsAccount", "type": "ShopifyPaymentsAccount", "description": "non-null"}, {"name": "ShopifyPaymentsAccount", "type": "ShopifyPaymentsAccount", "description": "non-null"}, {"name": "ShopifyPaymentsAccount", "type": "ShopifyPaymentsAccount", "description": ""}, {"name": "ShopifyPaymentsAccount", "type": "ShopifyPaymentsAccount", "description": "non-null"}, {"name": "ShopifyPaymentsAccount", "type": "ShopifyPaymentsAccount", "description": "non-null"}, {"name": "ShopifyPaymentsAccount", "type": "ShopifyPaymentsAccount", "description": "non-null"}, {"name": "ShopifyPaymentsAccount", "type": "ShopifyPaymentsAccount", "description": "non-null"}, {"name": "ShopifyPaymentsAccount", "type": "ShopifyPaymentsAccount", "description": "non-null"}, {"name": "ShopifyPaymentsAccount", "type": "ShopifyPaymentsAccount", "description": "non-null"}, {"name": "ShopifyPaymentsAccount", "type": "ShopifyPaymentsAccount", "description": "non-null"}, {"name": "ShopifyPaymentsAccount", "type": "ShopifyPaymentsAccount", "description": ""}, {"name": "ShopifyPaymentsAccount", "type": "ShopifyPaymentsAccount", "description": ""}], "examples": [{"description": "Return a list of all balance transactions", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `query {\n    shopifyPaymentsAccount {\n      balanceTransactions(first: 10) {\n        nodes {\n          id\n          type\n          test\n          associatedPayout {\n            id\n            status\n          }\n          amount {\n            amount\n            currencyCode\n          }\n          fee {\n            amount\n          }\n          net {\n            amount\n          }\n          sourceId\n          sourceType\n          sourceOrderTransactionId\n          associatedOrder {\n            id\n          }\n          adjustmentsOrders {\n            orderTransactionId\n            amount {\n              amount\n            }\n            name\n          }\n          adjustmentReason\n        }\n      }\n    }\n  }`,\n});\n"}, {"description": "Return a list of all disputes", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `query ShopifyPaymentsListDisputes {\n    shopifyPaymentsAccount {\n      disputes(first: 10) {\n        edges {\n          node {\n            amount {\n              amount\n              currencyCode\n            }\n            evidenceDueBy\n            evidenceSentOn\n            finalizedOn\n            id\n            initiatedAt\n            reasonDetails {\n              reason\n              networkReasonCode\n            }\n            status\n            type\n          }\n        }\n      }\n    }\n  }`,\n});\n"}, {"description": "Return a list of all payouts", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `query ShopifyPaymentsPayoutShow {\n    shopifyPaymentsAccount {\n      payouts(first: 10) {\n        nodes {\n          id\n          issuedAt\n          net {\n            amount\n            currencyCode\n          }\n          status\n          transactionType\n        }\n      }\n    }\n  }`,\n});\n"}, {"description": "Return a single payout", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `query ShopifyPaymentsPayoutShow {\n    shopifyPaymentsAccount {\n      payouts(first: 10, query: \"id:623721858\") {\n        nodes {\n          id\n          issuedAt\n          net {\n            amount\n            currencyCode\n          }\n          status\n          transactionType\n        }\n      }\n    }\n  }`,\n});\n"}, {"description": "Return the current balance", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `query ShopifyPaymentsShowBalance {\n    shopifyPaymentsAccount {\n      balance {\n        amount\n        currencyCode\n      }\n    }\n  }`,\n});\n"}]}], "mutations": [{"name": "disputeEvidenceUpdate", "description": "Updates a dispute evidence.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of the dispute evidence to be updated."}, {"name": "input", "type": "ShopifyPaymentsDisputeEvidenceUpdateInput!", "required": false, "description": "The updated properties for a dispute evidence."}], "returns": [], "examples": [{"description": "Delete a dispute evidence file", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation ShopifyPaymentsDisputeFileUploadDestroy($id: ID!, $fileId: ID!) {\n      disputeEvidenceUpdate(id: $id, input: {uncategorizedFile: {id: $fileId, destroy: true}}) {\n        disputeEvidence {\n          disputeFileUploads {\n            id\n          }\n          dispute {\n            amount {\n              amount\n              currencyCode\n            }\n            evidenceDueBy\n            evidenceSentOn\n            finalizedOn\n            id\n            initiatedAt\n            reasonDetails {\n              reason\n              networkReasonCode\n            }\n            status\n            type\n          }\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/ShopifyPaymentsDisputeEvidence/819974671\",\n      \"fileId\": \"gid://shopify/ShopifyPaymentsDisputeFileUpload/567271523\"\n    },\n  },\n});\n"}, {"description": "Updates dispute evidence", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation ShopifyPaymentsDisputeEvidenceUpdate($id: ID!, $input: ShopifyPaymentsDisputeEvidenceUpdateInput!) {\n      disputeEvidenceUpdate(id: $id, input: $input) {\n        disputeEvidence {\n          uncategorizedText\n          dispute {\n            amount {\n              amount\n              currencyCode\n            }\n            evidenceDueBy\n            evidenceSentOn\n            finalizedOn\n            id\n            initiatedAt\n            reasonDetails {\n              reason\n              networkReasonCode\n            }\n            status\n            type\n          }\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/ShopifyPaymentsDisputeEvidence/819974671\",\n      \"input\": {\n        \"customerFirstName\": \"Kermit\",\n        \"customerLastName\": \"The frog\",\n        \"customerEmailAddress\": \"kermit@example.com\",\n        \"shippingAddress\": {\n          \"address1\": \"1 Infinite Loop\",\n          \"address2\": \"Muppet Studio\",\n          \"city\": \"Cupertino\",\n          \"zip\": \"95014\",\n          \"country\": \"US\",\n          \"province\": \"California\"\n        },\n        \"uncategorizedText\": \"Test uncategorized text\",\n        \"accessActivityLog\": \"Test access activity log\",\n        \"cancellationPolicyDisclosure\": \"Test cancellation policy disclosure\",\n        \"cancellationRebuttal\": \"Test cancellation rebuttal\",\n        \"refundPolicyDisclosure\": \"Test refund policy disclosure\",\n        \"refundRefusalExplanation\": \"Test refund refusal explanation\"\n      }\n    },\n  },\n});\n"}, {"description": "Upload a file to a dispute", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation ShopifyPaymentsDisputeFileUpload($id: ID!, $fileId: ID!) {\n      disputeEvidenceUpdate(id: $id, input: {uncategorizedFile: {id: $fileId}}) {\n        disputeEvidence {\n          disputeFileUploads {\n            id\n          }\n          dispute {\n            amount {\n              amount\n              currencyCode\n            }\n            evidenceDueBy\n            evidenceSentOn\n            finalizedOn\n            id\n            initiatedAt\n            reasonDetails {\n              reason\n              networkReasonCode\n            }\n            status\n            type\n          }\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/ShopifyPaymentsDisputeEvidence/819974671\",\n      \"fileId\": \"gid://shopify/ShopifyPaymentsDisputeFileUpload/567271523\"\n    },\n  },\n});\n"}, {"description": "disputeEvidenceUpdate reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation ShopifyPaymentsDisputeFileUploadDestroy($id: ID!, $fileId: ID!) {\n      disputeEvidenceUpdate(id: $id, input: {uncategorizedFile: {id: $fileId, destroy: true}}) {\n        disputeEvidence {\n          disputeFileUploads {\n            id\n          }\n          dispute {\n            amount {\n              amount\n              currencyCode\n            }\n            evidenceDueBy\n            evidenceSentOn\n            finalizedOn\n            id\n            initiatedAt\n            reasonDetails {\n              reason\n              networkReasonCode\n            }\n            status\n            type\n          }\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/ShopifyPaymentsDisputeEvidence/819974671\",\n      \"fileId\": \"gid://shopify/ShopifyPaymentsDisputeFileUpload/567271523\"\n    },\n  },\n});\n"}]}, {"name": "shopifyPaymentsPayoutAlternateCurrencyCreate", "description": "Creates an alternate currency payout for a Shopify Payments account.", "arguments": [{"name": "accountId", "type": "ID", "required": false, "description": "The ID of the Shopify Payments account on which the mutation is being performed."}, {"name": "currency", "type": "CurrencyCode!", "required": false, "description": "The currency of the balance to payout."}], "returns": [], "examples": []}], "objects": [{"name": "FinanceKycInformation", "description": "Shopify Payments account information shared with embedded finance applications.", "fields_and_connections": [{"name": "businessAddress", "type": "financeKycInformation", "description": "Returns the KYC information for the shop's Shopify Payments account, used in embedded finance apps.", "not_nullable": false}], "examples": []}, {"name": "FinancialKycShopOwner", "description": "Represents the shop owner information for financial KYC purposes.", "fields_and_connections": [{"name": "email", "type": "String!", "description": "The email of the shop owner.", "not_nullable": true}, {"name": "firstName", "type": "String", "description": "The first name of the shop owner.", "not_nullable": false}, {"name": "id", "type": "ID!", "description": "A globally-unique ID.", "not_nullable": true}, {"name": "lastName", "type": "String", "description": "The last name of the shop owner.", "not_nullable": false}, {"name": "phone", "type": "String", "description": "The phone number of the shop owner.", "not_nullable": false}], "examples": []}, {"name": "OrderDisputeSummary", "description": "A summary of the important details for a dispute on an order.", "fields_and_connections": [{"name": "id", "type": "Node", "description": "A globally-unique ID.", "not_nullable": false}], "examples": []}, {"name": "ShopifyPaymentsAccount", "description": "Balance and payout information for a\nShopify Payments\naccount. Balance includes all balances for the currencies supported by the shop.\nYou can also query for a list of payouts, where each payout includes the corresponding currencyCode field.", "fields_and_connections": [{"name": "accountOpenerName", "type": "shopifyPaymentsAccount", "description": "Shopify Payments account information, including balances and payouts.", "not_nullable": false}, {"name": "accountOpenerName", "type": "Node", "description": "The name of the account opener.", "not_nullable": false}], "examples": []}, {"name": "ShopifyPaymentsAddressBasic", "description": "A Shopify Payments address.", "fields_and_connections": [{"name": "addressLine1", "type": "String", "description": "Line 1 of the address.", "not_nullable": false}, {"name": "addressLine2", "type": "String", "description": "Line 2 of the address.", "not_nullable": false}, {"name": "city", "type": "String", "description": "The address city.", "not_nullable": false}, {"name": "country", "type": "String", "description": "The address country.", "not_nullable": false}, {"name": "postalCode", "type": "String", "description": "The address postal code.", "not_nullable": false}, {"name": "zone", "type": "String", "description": "The address state/province/zone.", "not_nullable": false}], "examples": []}, {"name": "ShopifyPaymentsAdjustmentOrder", "description": "The adjustment order object.", "fields_and_connections": [{"name": "amount", "type": "MoneyV2!", "description": "The amount of the adjustment order.", "not_nullable": true}, {"name": "fees", "type": "MoneyV2!", "description": "The fee of the adjustment order.", "not_nullable": true}, {"name": "link", "type": "URL!", "description": "The link to the adjustment order.", "not_nullable": true}, {"name": "name", "type": "String!", "description": "The name of the adjustment order.", "not_nullable": true}, {"name": "net", "type": "MoneyV2!", "description": "The net of the adjustment order.", "not_nullable": true}, {"name": "orderTransactionId", "type": "BigInt!", "description": "The ID of the order transaction.", "not_nullable": true}], "examples": []}, {"name": "ShopifyPaymentsAssociatedOrder", "description": "The order associated to the balance transaction.", "fields_and_connections": [{"name": "id", "type": "ID!", "description": "The ID of the associated order.", "not_nullable": true}, {"name": "name", "type": "String!", "description": "The name of the associated order.", "not_nullable": true}], "examples": []}, {"name": "ShopifyPaymentsBalanceTransaction", "description": "A transaction that contributes to a Shopify Payments account balance.", "fields_and_connections": [{"name": "adjustmentReason", "type": "Node", "description": "The reason for the adjustment that's associated with the transaction.\nIf the source_type isn't an adjustment, the value will be null.", "not_nullable": false}], "examples": []}, {"name": "ShopifyPaymentsBalanceTransactionAssociatedPayout", "description": "The payout associated with a balance transaction.", "fields_and_connections": [{"name": "id", "type": "ID", "description": "The ID of the payout associated with the balance transaction.", "not_nullable": false}, {"name": "status", "type": "ShopifyPaymentsBalanceTransactionPayoutStatus", "description": "The status of the payout associated with the balance transaction.", "not_nullable": false}], "examples": []}, {"name": "ShopifyPaymentsBankAccount", "description": "A bank account that can receive payouts.", "fields_and_connections": [{"name": "accountNumberLastDigits", "type": "Node", "description": "The last digits of the account number (the rest is redacted).", "not_nullable": false}], "examples": []}, {"name": "ShopifyPaymentsDefaultChargeStatementDescriptor", "description": "The charge descriptors for a payments account.", "fields_and_connections": [{"name": "default", "type": "ShopifyPaymentsChargeStatementDescriptor", "description": "The default charge statement descriptor.", "not_nullable": false}], "examples": []}, {"name": "ShopifyPaymentsDispute", "description": "A dispute occurs when a buyer questions the legitimacy of a charge with their financial institution.", "fields_and_connections": [{"name": "amount", "type": "dispute", "description": "Returns dispute details based on ID.", "not_nullable": false}, {"name": "amount", "type": "disputes", "description": "All disputes related to the Shop.", "not_nullable": false}, {"name": "amount", "type": "LegacyInteroperability", "description": "The total amount disputed by the cardholder.", "not_nullable": false}, {"name": "amount", "type": "Node", "description": "The total amount disputed by the cardholder.", "not_nullable": false}], "examples": []}, {"name": "ShopifyPaymentsDisputeEvidence", "description": "The evidence associated with the dispute.", "fields_and_connections": [{"name": "accessActivityLog", "type": "disputeEvidence", "description": "Returns dispute evidence details based on ID.", "not_nullable": false}, {"name": "accessActivityLog", "type": "disputeEvidenceUpdate", "description": "Updates a dispute evidence.", "not_nullable": false}, {"name": "accessActivityLog", "type": "Node", "description": "The activity logs associated with the dispute evidence.", "not_nullable": false}], "examples": []}, {"name": "ShopifyPaymentsDisputeFileUpload", "description": "The file upload associated with the dispute evidence.", "fields_and_connections": [{"name": "disputeEvidenceType", "type": "Node", "description": "The type of the file for the dispute evidence.", "not_nullable": false}], "examples": []}, {"name": "ShopifyPaymentsDisputeFulfillment", "description": "The fulfillment associated with dispute evidence.", "fields_and_connections": [{"name": "id", "type": "Node", "description": "A globally-unique ID.", "not_nullable": false}], "examples": []}, {"name": "ShopifyPaymentsDisputeReasonDetails", "description": "Details regarding a dispute reason.", "fields_and_connections": [{"name": "networkReasonCode", "type": "String", "description": "The raw code provided by the payment network.", "not_nullable": false}, {"name": "reason", "type": "ShopifyPaymentsDisputeReason!", "description": "The reason for the dispute provided by the cardholder's banks.", "not_nullable": true}], "examples": []}, {"name": "ShopifyPaymentsJpChargeStatementDescriptor", "description": "The charge descriptors for a Japanese payments account.", "fields_and_connections": [{"name": "default", "type": "ShopifyPaymentsChargeStatementDescriptor", "description": "The default charge statement descriptor.", "not_nullable": false}], "examples": []}, {"name": "ShopifyPaymentsMerchantCategoryCode", "description": "A MerchantCategoryCode (MCC) is a four-digit number listed in ISO 18245 for retail financial services and used to classify the business by the type of goods or services it provides.", "fields_and_connections": [{"name": "category", "type": "String!", "description": "The category of the MCC.", "not_nullable": true}, {"name": "categoryLabel", "type": "String!", "description": "The category label of the MCC.", "not_nullable": true}, {"name": "code", "type": "Int!", "description": "A four-digit number listed in ISO 18245.", "not_nullable": true}, {"name": "id", "type": "Int!", "description": "The ID of the MCC.", "not_nullable": true}, {"name": "subcategoryLabel", "type": "String!", "description": "The subcategory label of the MCC.", "not_nullable": true}], "examples": []}, {"name": "ShopifyPaymentsPayout", "description": "Payouts represent the movement of money between a merchant's Shopify\nPayments balance and their bank account.", "fields_and_connections": [{"name": "businessEntity", "type": "LegacyInteroperability", "description": "The business entity associated with the payout.", "not_nullable": false}, {"name": "businessEntity", "type": "Node", "description": "The business entity associated with the payout.", "not_nullable": false}], "examples": []}, {"name": "ShopifyPaymentsPayoutSchedule", "description": "The payment schedule for a payments account.", "fields_and_connections": [{"name": "interval", "type": "ShopifyPaymentsPayoutInterval!", "description": "The interval at which payouts are sent to the connected bank account.", "not_nullable": true}, {"name": "monthlyAnchor", "type": "Int", "description": "The day of the month funds will be paid out.\nThe value can be any day of the month from the 1st to the 31st.\nIf the payment interval is set to monthly, this value will be used.\nPayouts scheduled between 29-31st of the month are sent on the last day of shorter months.", "not_nullable": false}, {"name": "weeklyAnchor", "type": "DayOfTheWeek", "description": "The day of the week funds will be paid out.\nThe value can be any weekday from Monday to Friday.\nIf the payment interval is set to weekly, this value will be used.", "not_nullable": false}], "examples": []}, {"name": "ShopifyPaymentsPayoutSummary", "description": "Breakdown of the total fees and gross of each of the different types of transactions associated\nwith the payout.", "fields_and_connections": [{"name": "adjustmentsFee", "type": "MoneyV2!", "description": "Total fees for all adjustments including disputes.", "not_nullable": true}, {"name": "adjustmentsGross", "type": "MoneyV2!", "description": "Total gross amount for all adjustments including disputes.", "not_nullable": true}, {"name": "advanceFees", "type": "MoneyV2!", "description": "Total fees for all advances.", "not_nullable": true}, {"name": "advanceGross", "type": "MoneyV2!", "description": "Total gross amount for all advances.", "not_nullable": true}, {"name": "chargesFee", "type": "MoneyV2!", "description": "Total fees for all charges.", "not_nullable": true}, {"name": "chargesGross", "type": "MoneyV2!", "description": "Total gross amount for all charges.", "not_nullable": true}, {"name": "refundsFee", "type": "MoneyV2!", "description": "Total fees for all refunds.", "not_nullable": true}, {"name": "refundsFeeGross", "type": "MoneyV2!", "description": "Total gross amount for all refunds.", "not_nullable": true}, {"name": "reservedFundsFee", "type": "MoneyV2!", "description": "Total fees for all reserved funds.", "not_nullable": true}, {"name": "reservedFundsGross", "type": "MoneyV2!", "description": "Total gross amount for all reserved funds.", "not_nullable": true}, {"name": "retriedPayoutsFee", "type": "MoneyV2!", "description": "Total fees for all retried payouts.", "not_nullable": true}, {"name": "retriedPayoutsGross", "type": "MoneyV2!", "description": "Total gross amount for all retried payouts.", "not_nullable": true}], "examples": []}, {"name": "ShopifyPaymentsTaxIdentification", "description": "A typed identifier that represents an individual within a tax jurisdiction.", "fields_and_connections": [{"name": "taxIdentificationType", "type": "ShopifyPaymentsTaxIdentificationType!", "description": "The type of the identification.", "not_nullable": true}, {"name": "value", "type": "String!", "description": "The value of the identification.", "not_nullable": true}], "examples": []}, {"name": "ShopifyPaymentsToolingProviderPayout", "description": "Relevant reference information for an alternate currency payout.", "fields_and_connections": [{"name": "amount", "type": "shopifyPaymentsPayoutAlternateCurrencyCreate", "description": "Creates an alternate currency payout for a Shopify Payments account.", "not_nullable": false}], "examples": []}, {"name": "ShopifyPaymentsVerification", "description": "Each subject (individual) of an account has a verification object giving\n information about the verification state.", "fields_and_connections": [{"name": "id", "type": "Node", "description": "A globally-unique ID.", "not_nullable": false}], "examples": []}, {"name": "ShopifyPaymentsVerificationSubject", "description": "The verification subject represents an individual that has to be verified.", "fields_and_connections": [{"name": "familyName", "type": "String!", "description": "The family name of the individual to verify.", "not_nullable": true}, {"name": "givenName", "type": "String!", "description": "The given name of the individual to verify.", "not_nullable": true}], "examples": []}]}, {"name": "Store properties", "queries": [{"name": "businessEntities", "description": "Returns a list of Business Entities associated with the shop.", "arguments": [], "returns": [{"name": "BusinessEntity", "type": "[BusinessEntity!]!", "description": "non-null"}, {"name": "BusinessEntity", "type": "[BusinessEntity!]!", "description": "non-null"}, {"name": "BusinessEntity", "type": "[BusinessEntity!]!", "description": ""}, {"name": "BusinessEntity", "type": "[BusinessEntity!]!", "description": "non-null"}, {"name": "BusinessEntity", "type": "[BusinessEntity!]!", "description": "non-null"}, {"name": "BusinessEntity", "type": "[BusinessEntity!]!", "description": "non-null"}, {"name": "BusinessEntity", "type": "[BusinessEntity!]!", "description": ""}], "examples": []}, {"name": "businessEntity", "description": "Returns a Business Entity by ID.", "arguments": [{"name": "id", "type": "ID", "required": false, "description": "The ID of the Business Entity to return. Returns the primary Business Entity if not provided."}], "returns": [], "examples": []}, {"name": "location", "description": "Returns an inventory Location resource by ID.", "arguments": [{"name": "id", "type": "ID", "required": false, "description": "The ID of the location to return. If no ID is provided, the primary location of the Shop is returned."}], "returns": [], "examples": [{"description": "Get a metafield attached to a location", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `query LocationMetafield($namespace: String!, $key: String!, $ownerId: ID!) {\n      location(id: $ownerId) {\n        hours: metafield(namespace: $namespace, key: $key) {\n          value\n        }\n      }\n    }`,\n    \"variables\": {\n      \"namespace\": \"my_fields\",\n      \"key\": \"hours\",\n      \"ownerId\": \"gid://shopify/Location/346779380\"\n    },\n  },\n});\n"}, {"description": "Get metafields attached to a location", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `query LocationMetafields($ownerId: ID!) {\n      location(id: $ownerId) {\n        metafields(first: 3) {\n          edges {\n            node {\n              namespace\n              key\n              value\n            }\n          }\n        }\n      }\n    }`,\n    \"variables\": {\n      \"ownerId\": \"gid://shopify/Location/346779380\"\n    },\n  },\n});\n"}, {"description": "Get pinned metafield definitions associated with a location", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `query LocationMetafieldDefinitions($ownerId: ID!, $first: Int, $pinnedStatus: MetafieldDefinitionPinnedStatus, $sortKey: MetafieldDefinitionSortKeys) {\n      location(id: $ownerId) {\n        metafieldDefinitions(first: $first, pinnedStatus: $pinnedStatus, sortKey: $sortKey) {\n          edges {\n            node {\n              name\n              namespace\n              key\n              type {\n                name\n              }\n            }\n          }\n        }\n      }\n    }`,\n    \"variables\": {\n      \"pinnedStatus\": \"PINNED\",\n      \"ownerId\": \"gid://shopify/Location/346779380\",\n      \"first\": 10,\n      \"sortKey\": \"PINNED_POSITION\"\n    },\n  },\n});\n"}, {"description": "Retrieve a list of inventory levels for a location", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `query LocationInventoryLevelList($id: ID!) {\n      location(id: $id) {\n        inventoryLevels(first: 10) {\n          nodes {\n            item {\n              id\n            }\n            location {\n              id\n            }\n            quantities(names: [\"available\"]) {\n              name\n              quantity\n            }\n          }\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/Location/346779380\"\n    },\n  },\n});\n"}, {"description": "Retrieve a single location by its ID", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `query LocationShow($id: ID!) {\n      location(id: $id) {\n        id\n        name\n        fulfillmentService {\n          handle\n        }\n        address {\n          address1\n          address2\n          city\n          country\n          countryCode\n          province\n          provinceCode\n          zip\n        }\n        fulfillsOnlineOrders\n        hasActiveInventory\n        isActive\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/Location/346779380\"\n    },\n  },\n});\n"}, {"description": "Returns a Location resource by ID", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `query {\n    location(id: \"gid://shopify/Location/346779380\") {\n      id\n      name\n      address {\n        formatted\n      }\n      deactivatable\n      fulfillsOnlineOrders\n      hasActiveInventory\n      isActive\n      shipsInventory\n    }\n  }`,\n});\n"}]}, {"name": "locationByIdentifier", "description": "Return a location by an identifier.", "arguments": [{"name": "identifier", "type": "LocationIdentifierInput!", "required": false, "description": "The identifier of the location."}], "returns": [], "examples": []}, {"name": "locations", "description": "Returns a list of active inventory locations.", "arguments": [{"name": "after", "type": "String", "required": false, "description": "The elements that come after the specified cursor."}, {"name": "before", "type": "String", "required": false, "description": "The elements that come before the specified cursor."}, {"name": "first", "type": "Int", "required": false, "description": "The first n elements from the paginated list."}, {"name": "includeInactive", "type": "Boolean", "required": false, "description": "Whether to include the locations that are deactivated."}, {"name": "includeLegacy", "type": "Boolean", "required": false, "description": "Whether to include the legacy locations of fulfillment services."}, {"name": "last", "type": "Int", "required": false, "description": "The last n elements from the paginated list."}, {"name": "query", "type": "String", "required": false, "description": "A filter made up of terms, connectives, modifiers, and comparators.\nYou can apply one or more filters to a query. Learn more about Shopify API search syntax."}, {"name": "reverse", "type": "Boolean", "required": false, "description": "Reverse the order of the underlying list."}, {"name": "sortKey", "type": "LocationSortKeys", "required": false, "description": "Sort the underlying list using a key. If your query is slow or returns an error, then try specifying a sort key that matches the field used in the search."}], "returns": [], "examples": []}, {"name": "locationsAvailableForDeliveryProfiles", "description": "Returns a list of all origin locations available for a delivery profile. Use locationsAvailableForDeliveryProfilesConnection instead.", "arguments": [], "returns": [{"name": "Location", "type": "[Location!]", "description": "non-null"}, {"name": "Location", "type": "[Location!]", "description": "non-null"}, {"name": "Location", "type": "[Location!]", "description": "non-null"}, {"name": "Location", "type": "[Location!]", "description": "non-null"}, {"name": "Location", "type": "[Location!]", "description": "non-null"}, {"name": "Location", "type": "[Location!]", "description": "non-null"}, {"name": "Location", "type": "[Location!]", "description": ""}, {"name": "Location", "type": "[Location!]", "description": "non-null"}, {"name": "Location", "type": "[Location!]", "description": ""}, {"name": "Location", "type": "[Location!]", "description": "non-null"}, {"name": "Location", "type": "[Location!]", "description": "non-null"}, {"name": "Location", "type": "[Location!]", "description": "non-null"}, {"name": "Location", "type": "[Location!]", "description": "non-null"}, {"name": "Location", "type": "[Location!]", "description": ""}, {"name": "Location", "type": "[Location!]", "description": "non-null"}, {"name": "Location", "type": "[Location!]", "description": "non-null"}, {"name": "Location", "type": "[Location!]", "description": "non-null"}, {"name": "Location", "type": "[Location!]", "description": "non-null"}, {"name": "Location", "type": "[Location!]", "description": ""}, {"name": "Location", "type": "[Location!]", "description": ""}, {"name": "Location", "type": "[Location!]", "description": "non-null"}, {"name": "Location", "type": "[Location!]", "description": "non-null"}, {"name": "Location", "type": "[Location!]", "description": "non-null"}, {"name": "Location", "type": "[Location!]", "description": "non-null"}, {"name": "Location", "type": "[Location!]", "description": "non-null"}, {"name": "Location", "type": "[Location!]", "description": "non-null"}, {"name": "Location", "type": "[Location!]", "description": "non-null"}], "examples": []}, {"name": "locationsAvailableForDeliveryProfilesConnection", "description": "Returns a list of all origin locations available for a delivery profile.", "arguments": [{"name": "after", "type": "String", "required": false, "description": "The elements that come after the specified cursor."}, {"name": "before", "type": "String", "required": false, "description": "The elements that come before the specified cursor."}, {"name": "first", "type": "Int", "required": false, "description": "The first n elements from the paginated list."}, {"name": "last", "type": "Int", "required": false, "description": "The last n elements from the paginated list."}, {"name": "reverse", "type": "Boolean", "required": false, "description": "Reverse the order of the underlying list."}], "returns": [], "examples": []}, {"name": "locationsCount", "description": "Returns the count of locations for the given shop. Limited to a maximum of 10000.", "arguments": [{"name": "query", "type": "String", "required": false, "description": "A filter made up of terms, connectives, modifiers, and comparators.\nYou can apply one or more filters to a query. Learn more about Shopify API search syntax."}], "returns": [], "examples": []}, {"name": "shop", "description": "Returns the Shop resource corresponding to the access token used in the request. The Shop resource contains\nbusiness and store management settings for the shop.", "arguments": [], "returns": [{"name": "Shop", "type": "Shop!", "description": "non-null"}, {"name": "Shop", "type": "Shop!", "description": "non-null"}, {"name": "Shop", "type": "Shop!", "description": "non-null"}, {"name": "Shop", "type": "Shop!", "description": "non-null"}, {"name": "Shop", "type": "Shop!", "description": "non-null"}, {"name": "Shop", "type": "Shop!", "description": "non-null"}, {"name": "Shop", "type": "Shop!", "description": "non-null"}, {"name": "Shop", "type": "Shop!", "description": "non-null"}, {"name": "Shop", "type": "Shop!", "description": "non-null"}, {"name": "Shop", "type": "Shop!", "description": "non-null"}, {"name": "Shop", "type": "Shop!", "description": "non-null"}, {"name": "Shop", "type": "Shop!", "description": "non-null"}, {"name": "Shop", "type": "Shop!", "description": "non-null"}, {"name": "Shop", "type": "Shop!", "description": "non-null"}, {"name": "Shop", "type": "Shop!", "description": "non-null"}, {"name": "Shop", "type": "Shop!", "description": "non-null"}, {"name": "Shop", "type": "Shop!", "description": "non-null"}, {"name": "Shop", "type": "Shop!", "description": ""}, {"name": "Shop", "type": "Shop!", "description": "non-null"}, {"name": "Shop", "type": "Shop!", "description": "non-null"}, {"name": "Shop", "type": "Shop!", "description": "non-null"}, {"name": "Shop", "type": "Shop!", "description": "non-null"}, {"name": "Shop", "type": "Shop!", "description": "non-null"}, {"name": "Shop", "type": "Shop!", "description": "non-null"}, {"name": "Shop", "type": "Shop!", "description": "non-null"}, {"name": "Shop", "type": "Shop!", "description": "non-null"}, {"name": "Shop", "type": "Shop!", "description": "non-null"}, {"name": "Shop", "type": "Shop!", "description": ""}, {"name": "Shop", "type": "Shop!", "description": ""}, {"name": "Shop", "type": "Shop!", "description": "non-null"}, {"name": "Shop", "type": "Shop!", "description": "non-null"}, {"name": "Shop", "type": "Shop!", "description": "non-null"}, {"name": "Shop", "type": "Shop!", "description": "non-null"}, {"name": "Shop", "type": "Shop!", "description": "non-null"}, {"name": "Shop", "type": "Shop!", "description": "non-null"}, {"name": "Shop", "type": "Shop!", "description": "non-null"}, {"name": "Shop", "type": "Shop!", "description": "non-null"}, {"name": "Shop", "type": "Shop!", "description": "non-null"}, {"name": "Shop", "type": "Shop!", "description": "non-null"}, {"name": "Shop", "type": "Shop!", "description": "non-null"}, {"name": "Shop", "type": "Shop!", "description": "non-null"}, {"name": "Shop", "type": "Shop!", "description": "non-null"}, {"name": "Shop", "type": "Shop!", "description": "non-null"}, {"name": "Shop", "type": "Shop!", "description": "non-null"}, {"name": "Shop", "type": "Shop!", "description": "non-null"}, {"name": "Shop", "type": "Shop!", "description": "non-null"}, {"name": "Shop", "type": "Shop!", "description": "non-null"}, {"name": "Shop", "type": "Shop!", "description": "non-null"}, {"name": "Shop", "type": "Shop!", "description": "non-null"}, {"name": "Shop", "type": "Shop!", "description": "non-null"}, {"name": "Shop", "type": "Shop!", "description": "non-null"}, {"name": "Shop", "type": "Shop!", "description": "non-null"}, {"name": "Shop", "type": "Shop!", "description": "non-null"}, {"name": "Shop", "type": "Shop!", "description": "non-null"}, {"name": "Shop", "type": "Shop!", "description": "non-null"}, {"name": "Shop", "type": "Shop!", "description": "non-null"}, {"name": "Shop", "type": "Shop!", "description": "non-null"}, {"name": "Shop", "type": "Shop!", "description": "non-null"}, {"name": "Shop", "type": "Shop!", "description": "non-null"}, {"name": "Shop", "type": "Shop!", "description": "non-null"}, {"name": "Shop", "type": "Shop!", "description": "non-null"}, {"name": "Shop", "type": "Shop!", "description": "non-null"}, {"name": "Shop", "type": "Shop!", "description": "non-null"}, {"name": "Shop", "type": "Shop!", "description": "non-null"}, {"name": "Shop", "type": "Shop!", "description": "non-null"}, {"name": "Shop", "type": "Shop!", "description": "non-null"}, {"name": "Shop", "type": "Shop!", "description": "non-null"}, {"name": "Shop", "type": "Shop!", "description": "non-null"}, {"name": "Shop", "type": "Shop!", "description": "non-null"}, {"name": "Shop", "type": "Shop!", "description": "non-null"}, {"name": "Shop", "type": "Shop!", "description": "non-null"}, {"name": "Shop", "type": "Shop!", "description": "non-null"}, {"name": "Shop", "type": "Shop!", "description": "non-null"}, {"name": "Shop", "type": "Shop!", "description": "non-null"}, {"name": "Shop", "type": "Shop!", "description": "non-null"}, {"name": "Shop", "type": "Shop!", "description": "non-null"}, {"name": "Shop", "type": "Shop!", "description": "non-null"}, {"name": "Shop", "type": "Shop!", "description": "non-null"}, {"name": "Shop", "type": "Shop!", "description": "non-null"}, {"name": "Shop", "type": "Shop!", "description": "non-null"}, {"name": "Shop", "type": "Shop!", "description": "non-null"}], "examples": [{"description": "Get a metafield attached to a shop", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `query ShopMetafield($namespace: String!, $key: String!) {\n      shop {\n        copyrightYear: metafield(namespace: $namespace, key: $key) {\n          value\n        }\n      }\n    }`,\n    \"variables\": {\n      \"namespace\": \"my_fields\",\n      \"key\": \"copyright_year\"\n    },\n  },\n});\n"}, {"description": "Get metafields attached to a shop", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `query ShopMetafields {\n    shop {\n      metafields(first: 3) {\n        edges {\n          node {\n            namespace\n            key\n            value\n          }\n        }\n      }\n    }\n  }`,\n});\n"}, {"description": "Receive a list of all FulfillmentServices", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `query FulfillmentServiceList {\n    shop {\n      fulfillmentServices {\n        id\n        callbackUrl\n        fulfillmentOrdersOptIn\n        permitsSkuSharing\n        handle\n        inventoryManagement\n        serviceName\n      }\n    }\n  }`,\n});\n"}, {"description": "Retrieve information about a shop", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `query {\n    shop {\n      name\n      currencyCode\n      checkoutApiSupported\n      taxesIncluded\n      resourceLimits {\n        maxProductVariants\n      }\n    }\n  }`,\n});\n"}, {"description": "Retrieves a list of fulfillment orders assigned to the shop locations that are owned by the app", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `query AssignedFulfillmentOrderList($assignmentStatus: FulfillmentOrderAssignmentStatus) {\n      shop {\n        assignedFulfillmentOrders(first: 10, assignmentStatus: $assignmentStatus) {\n          edges {\n            node {\n              id\n              status\n              requestStatus\n              destination {\n                firstName\n                lastName\n                address1\n                city\n                province\n                zip\n                countryCode\n                phone\n              }\n              lineItems(first: 10) {\n                edges {\n                  node {\n                    id\n                    productTitle\n                    sku\n                    remainingQuantity\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }`,\n    \"variables\": {\n      \"assignmentStatus\": \"FULFILLMENT_REQUESTED\"\n    },\n  },\n});\n"}, {"description": "Retrieves a list of all users", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `query {\n    shop {\n      staffMembers(first: 10) {\n        edges {\n          node {\n            active\n            avatar {\n              url\n            }\n            email\n            exists\n            firstName\n            id\n            initials\n            isShopOwner\n            lastName\n            locale\n            name\n            phone\n          }\n        }\n      }\n    }\n  }`,\n});\n"}, {"description": "Retrieves a list of currencies enabled on a shop", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `query {\n    shop {\n      currencySettings(first: 1) {\n        edges {\n          node {\n            currencyCode\n            rateUpdatedAt\n          }\n        }\n      }\n    }\n  }`,\n});\n"}, {"description": "Retrieves a list of storefront access tokens that have been issued", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `query storefrontAccessToken {\n    shop {\n      storefrontAccessTokens(first: 10) {\n        edges {\n          node {\n            id\n            accessToken\n            accessScopes {\n              handle\n            }\n            createdAt\n            title\n          }\n        }\n      }\n    }\n  }`,\n});\n"}]}], "mutations": [{"name": "locationActivate", "description": "Activates a location so that you can stock inventory at the location. Refer to the\nisActive and\nactivatable\nfields on the Location object.", "arguments": [{"name": "locationId", "type": "ID!", "required": false, "description": "The ID of a location to activate."}], "returns": [], "examples": [{"description": "Activate a deactivated location", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `mutation {\n    locationActivate(locationId: \"gid://shopify/Location/658095763\") {\n      location {\n        id\n        isActive\n      }\n    }\n  }`,\n});\n"}, {"description": "locationActivate reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `mutation {\n    locationActivate(locationId: \"gid://shopify/Location/658095763\") {\n      location {\n        id\n        isActive\n      }\n    }\n  }`,\n});\n"}]}, {"name": "locationAdd", "description": "Adds a new location.", "arguments": [{"name": "input", "type": "LocationAddInput!", "required": false, "description": "The properties of the location to add."}], "returns": [], "examples": [{"description": "Add a location and return the location ID", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `mutation {\n    locationAdd(input: {name: \"New York Warehouses\", address: {address1: \"101 Liberty Street\", city: \"New York\", provinceCode: \"NY\", countryCode: US, zip: \"10006\"}, fulfillsOnlineOrders: true}) {\n      location {\n        id\n        name\n        address {\n          address1\n          provinceCode\n          countryCode\n          zip\n        }\n        fulfillsOnlineOrders\n      }\n    }\n  }`,\n});\n"}, {"description": "Create a new metafield on a new location", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation createLocationMetafields($input: LocationAddInput!) {\n      locationAdd(input: $input) {\n        location {\n          id\n          metafields(first: 3) {\n            edges {\n              node {\n                id\n                namespace\n                key\n                value\n              }\n            }\n          }\n        }\n        userErrors {\n          message\n          field\n        }\n      }\n    }`,\n    \"variables\": {\n      \"input\": {\n        \"metafields\": [\n          {\n            \"namespace\": \"my_field\",\n            \"key\": \"delivery_type\",\n            \"type\": \"single_line_text_field\",\n            \"value\": \"local\"\n          }\n        ],\n        \"name\": \"Warehouse\",\n        \"address\": {\n          \"countryCode\": \"CA\"\n        }\n      }\n    },\n  },\n});\n"}, {"description": "locationAdd reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `mutation {\n    locationAdd(input: {name: \"New York Warehouses\", address: {address1: \"101 Liberty Street\", city: \"New York\", provinceCode: \"NY\", countryCode: US, zip: \"10006\"}, fulfillsOnlineOrders: true}) {\n      location {\n        id\n        name\n        address {\n          address1\n          provinceCode\n          countryCode\n          zip\n        }\n        fulfillsOnlineOrders\n      }\n    }\n  }`,\n});\n"}]}, {"name": "locationDeactivate", "description": "Deactivates a location and moves inventory, pending orders, and moving transfers to a destination location.", "arguments": [{"name": "destinationLocationId", "type": "ID", "required": false, "description": "The ID of a destination location to which inventory, pending orders and moving transfers will be moved from the location to deactivate."}, {"name": "locationId", "type": "ID!", "required": false, "description": "The ID of a location to deactivate."}], "returns": [], "examples": [{"description": "Deactivate a location with active inventory", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `mutation locationDeactivate {\n    locationDeactivate(locationId: \"gid://shopify/Location/922479430\") {\n      location {\n        id\n        isActive\n      }\n      locationDeactivateUserErrors {\n        message\n        code\n        field\n      }\n    }\n  }`,\n});\n"}, {"description": "Deactivate a location with pending orders", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `mutation locationDeactivate {\n    locationDeactivate(locationId: \"gid://shopify/Location/123\") {\n      location {\n        id\n        isActive\n      }\n      locationDeactivateUserErrors {\n        message\n        code\n        field\n      }\n    }\n  }`,\n});\n"}, {"description": "Deactivate an active location", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `mutation {\n    locationDeactivate(locationId: \"gid://shopify/Location/922479430\", destinationLocationId: \"gid://shopify/Location/147921425\") {\n      location {\n        id\n        isActive\n      }\n      locationDeactivateUserErrors {\n        message\n        code\n        field\n      }\n    }\n  }`,\n});\n"}, {"description": "locationDeactivate reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `mutation locationDeactivate {\n    locationDeactivate(locationId: \"gid://shopify/Location/922479430\") {\n      location {\n        id\n        isActive\n      }\n      locationDeactivateUserErrors {\n        message\n        code\n        field\n      }\n    }\n  }`,\n});\n"}]}, {"name": "locationDelete", "description": "Deletes a location.", "arguments": [{"name": "locationId", "type": "ID!", "required": false, "description": "The ID of a location to delete."}], "returns": [], "examples": [{"description": "Delete a location and return the location ID", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `mutation {\n    locationDelete(locationId: \"gid://shopify/Location/658095763\") {\n      deletedLocationId\n    }\n  }`,\n});\n"}, {"description": "Delete an active location", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `mutation {\n    locationDelete(locationId: \"gid://shopify/Location/658095763\") {\n      deletedLocationId\n      locationDeleteUserErrors {\n        message\n        code\n        field\n      }\n    }\n  }`,\n});\n"}, {"description": "locationDelete reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `mutation {\n    locationDelete(locationId: \"gid://shopify/Location/658095763\") {\n      deletedLocationId\n    }\n  }`,\n});\n"}]}, {"name": "locationEdit", "description": "Edits an existing location.\nAs of the 2023-10 API version, apps can change the name and address of their fulfillment service locations.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of a location to edit."}, {"name": "input", "type": "LocationEditInput!", "required": false, "description": "The updated properties for the location."}], "returns": [], "examples": [{"description": "Create a new metafield and update another on an existing location", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation updateLocationMetafields($input: LocationEditInput!, $ownerId: ID!) {\n      locationEdit(input: $input, id: $ownerId) {\n        location {\n          id\n          metafields(first: 3) {\n            edges {\n              node {\n                id\n                namespace\n                key\n                value\n              }\n            }\n          }\n        }\n        userErrors {\n          message\n          field\n        }\n      }\n    }`,\n    \"variables\": {\n      \"input\": {\n        \"metafields\": [\n          {\n            \"namespace\": \"my_field\",\n            \"key\": \"delivery_type\",\n            \"type\": \"single_line_text_field\",\n            \"value\": \"local\"\n          },\n          {\n            \"id\": \"gid://shopify/Metafield/1069229306\",\n            \"value\": \"Open from 7am to 10pm\"\n          }\n        ]\n      },\n      \"ownerId\": \"gid://shopify/Location/346779380\"\n    },\n  },\n});\n"}, {"description": "Edit a location and return the location ID", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `mutation locationEdit {\n    locationEdit(id: \"gid://shopify/Location/346779380\", input: {name: \"Shipping Warehouse\", address: {address1: \"290 Bremner Blvd\", city: \"Toronto\", zip: \"M5V 3L9\", provinceCode: \"ON\", countryCode: CA}, fulfillsOnlineOrders: false}) {\n      location {\n        id\n        name\n        address {\n          address1\n          provinceCode\n          countryCode\n          zip\n        }\n        fulfillsOnlineOrders\n      }\n    }\n  }`,\n});\n"}, {"description": "locationEdit reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation updateLocationMetafields($input: LocationEditInput!, $ownerId: ID!) {\n      locationEdit(input: $input, id: $ownerId) {\n        location {\n          id\n          metafields(first: 3) {\n            edges {\n              node {\n                id\n                namespace\n                key\n                value\n              }\n            }\n          }\n        }\n        userErrors {\n          message\n          field\n        }\n      }\n    }`,\n    \"variables\": {\n      \"input\": {\n        \"metafields\": [\n          {\n            \"namespace\": \"my_field\",\n            \"key\": \"delivery_type\",\n            \"type\": \"single_line_text_field\",\n            \"value\": \"local\"\n          },\n          {\n            \"id\": \"gid://shopify/Metafield/1069229306\",\n            \"value\": \"Open from 7am to 10pm\"\n          }\n        ]\n      },\n      \"ownerId\": \"gid://shopify/Location/346779380\"\n    },\n  },\n});\n"}]}, {"name": "locationLocalPickupDisable", "description": "Disables local pickup for a location.", "arguments": [{"name": "locationId", "type": "ID!", "required": false, "description": "The ID of the location to disable local pickup for."}], "returns": [], "examples": [{"description": "Disable local pickup for a location", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation disableLocalPickup($locationId: ID!) {\n      locationLocalPickupDisable(locationId: $locationId) {\n        locationId\n        userErrors {\n          code\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"locationId\": \"gid://shopify/Location/750123840\"\n    },\n  },\n});\n"}, {"description": "Disabling local pickup for an invalid location returns an error", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation disableLocalPickup($locationId: ID!) {\n      locationLocalPickupDisable(locationId: $locationId) {\n        locationId\n        userErrors {\n          code\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"locationId\": \"gid://shopify/Location/123\"\n    },\n  },\n});\n"}, {"description": "locationLocalPickupDisable reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation disableLocalPickup($locationId: ID!) {\n      locationLocalPickupDisable(locationId: $locationId) {\n        locationId\n        userErrors {\n          code\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"locationId\": \"gid://shopify/Location/750123840\"\n    },\n  },\n});\n"}]}, {"name": "locationLocalPickupEnable", "description": "Enables local pickup for a location.", "arguments": [{"name": "localPickupSettings", "type": "DeliveryLocationLocalPickupEnableInput!", "required": false, "description": "The settings required to enable local pickup for a location."}], "returns": [], "examples": [{"description": "Enable local pickup for a location", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation enableLocalPickup($localPickupSettings: DeliveryLocationLocalPickupEnableInput!) {\n      locationLocalPickupEnable(localPickupSettings: $localPickupSettings) {\n        localPickupSettings {\n          pickupTime\n          instructions\n        }\n        userErrors {\n          message\n          field\n        }\n      }\n    }`,\n    \"variables\": {\n      \"localPickupSettings\": {\n        \"locationId\": \"gid://shopify/Location/530388139\",\n        \"pickupTime\": \"TWENTY_FOUR_HOURS\",\n        \"instructions\": \"Use side door.\"\n      }\n    },\n  },\n});\n"}, {"description": "Enabling local pickup for an invalid location returns an error", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation enableLocalPickup($localPickupSettings: DeliveryLocationLocalPickupEnableInput!) {\n      locationLocalPickupEnable(localPickupSettings: $localPickupSettings) {\n        localPickupSettings {\n          pickupTime\n          instructions\n        }\n        userErrors {\n          code\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"localPickupSettings\": {\n        \"locationId\": \"gid://shopify/Location/123\",\n        \"pickupTime\": \"TWENTY_FOUR_HOURS\",\n        \"instructions\": \"Use side door.\"\n      }\n    },\n  },\n});\n"}, {"description": "locationLocalPickupEnable reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation enableLocalPickup($localPickupSettings: DeliveryLocationLocalPickupEnableInput!) {\n      locationLocalPickupEnable(localPickupSettings: $localPickupSettings) {\n        localPickupSettings {\n          pickupTime\n          instructions\n        }\n        userErrors {\n          message\n          field\n        }\n      }\n    }`,\n    \"variables\": {\n      \"localPickupSettings\": {\n        \"locationId\": \"gid://shopify/Location/530388139\",\n        \"pickupTime\": \"TWENTY_FOUR_HOURS\",\n        \"instructions\": \"Use side door.\"\n      }\n    },\n  },\n});\n"}]}, {"name": "publishablePublish", "description": "Publishes a resource to a channel. If the resource is a product, then it's visible in the channel only if the product status is active. Products that are sold exclusively on subscription (requiresSellingPlan: true) can be published only on online stores.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The resource to create or update publications for."}, {"name": "input", "type": "[PublicationInput!]!", "required": false, "description": "Specifies the input fields required to publish a resource."}], "returns": [], "examples": [{"description": "Create a collection listing to publish a collection to your app", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation PublishablePublish($collectionId: ID!, $publicationId: ID!) {\n      publishablePublish(id: $collectionId, input: {publicationId: $publicationId}) {\n        publishable {\n          publishedOnPublication(publicationId: $publicationId)\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"collectionId\": \"gid://shopify/Collection/636030761\",\n      \"publicationId\": \"gid://shopify/Publication/762454635\"\n    },\n  },\n});\n"}, {"description": "Create a product listing to publish a product to your app", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation publishablePublish($id: ID!, $input: [PublicationInput!]!) {\n      publishablePublish(id: $id, input: $input) {\n        publishable {\n          availablePublicationsCount {\n            count\n          }\n          resourcePublicationsCount {\n            count\n          }\n        }\n        shop {\n          publicationCount\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/Product/558169081\",\n      \"input\": {\n        \"publicationId\": \"gid://shopify/Publication/762454635\"\n      }\n    },\n  },\n});\n"}, {"description": "Publish a product that does not belong to the shop", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation publishablePublish($id: ID!, $input: [PublicationInput!]!) {\n      publishablePublish(id: $id, input: $input) {\n        publishable {\n          availablePublicationsCount {\n            count\n          }\n          resourcePublicationsCount {\n            count\n          }\n        }\n        shop {\n          publicationCount\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/Product/921728736\",\n      \"input\": {\n        \"publicationId\": \"gid://shopify/Publication/762454635\"\n      }\n    },\n  },\n});\n"}, {"description": "Publish a product that does not exist", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation publishablePublish($id: ID!, $input: [PublicationInput!]!) {\n      publishablePublish(id: $id, input: $input) {\n        publishable {\n          availablePublicationsCount {\n            count\n          }\n          resourcePublicationsCount {\n            count\n          }\n        }\n        shop {\n          publicationCount\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/Product/0\",\n      \"input\": {\n        \"publicationId\": \"gid://shopify/Publication/762454635\"\n      }\n    },\n  },\n});\n"}, {"description": "Publish a product with a future publication date", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation publishablePublish($id: ID!, $input: [PublicationInput!]!) {\n      publishablePublish(id: $id, input: $input) {\n        publishable {\n          availablePublicationsCount {\n            count\n          }\n          resourcePublicationsCount {\n            count\n          }\n        }\n        shop {\n          publicationCount\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/Product/558169081\",\n      \"input\": {\n        \"publicationId\": \"gid://shopify/Publication/762454635\",\n        \"publishDate\": \"2999-01-01T00:00:00-00:00\"\n      }\n    },\n  },\n});\n"}, {"description": "Publish a product with an invalid publication ID", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation publishablePublish($id: ID!, $input: [PublicationInput!]!) {\n      publishablePublish(id: $id, input: $input) {\n        publishable {\n          availablePublicationsCount {\n            count\n          }\n          resourcePublicationsCount {\n            count\n          }\n        }\n        shop {\n          publicationCount\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/Product/558169081\",\n      \"input\": {\n        \"publicationId\": \"gid://shopify/Publication/0\"\n      }\n    },\n  },\n});\n"}, {"description": "publishablePublish reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation PublishablePublish($collectionId: ID!, $publicationId: ID!) {\n      publishablePublish(id: $collectionId, input: {publicationId: $publicationId}) {\n        publishable {\n          publishedOnPublication(publicationId: $publicationId)\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"collectionId\": \"gid://shopify/Collection/636030761\",\n      \"publicationId\": \"gid://shopify/Publication/762454635\"\n    },\n  },\n});\n"}]}, {"name": "publishablePublishToCurrentChannel", "description": "Publishes a resource to current channel. If the resource is a product, then it's visible in the channel only if the product status is active. Products that are sold exclusively on subscription (requiresSellingPlan: true) can be published only on online stores.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The resource to create or update publications for."}], "returns": [], "examples": [{"description": "Publish a product to the current channel", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation publishablePublishToCurrentChannel($id: ID!) {\n      publishablePublishToCurrentChannel(id: $id) {\n        publishable {\n          availablePublicationsCount {\n            count\n          }\n          resourcePublicationsCount {\n            count\n          }\n        }\n        shop {\n          publicationCount\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/Product/921728736\"\n    },\n  },\n});\n"}, {"description": "Publish a publication to the current channel", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation publishablePublishToCurrentChannel($id: ID!) {\n      publishablePublishToCurrentChannel(id: $id) {\n        publishable {\n          availablePublicationsCount {\n            count\n          }\n          resourcePublicationsCount {\n            count\n          }\n        }\n        shop {\n          publicationCount\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/Collection/841564295\"\n    },\n  },\n});\n"}, {"description": "Publishing a product that does not exist", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation publishablePublishToCurrentChannel($id: ID!) {\n      publishablePublishToCurrentChannel(id: $id) {\n        publishable {\n          availablePublicationsCount {\n            count\n          }\n          resourcePublicationsCount {\n            count\n          }\n        }\n        shop {\n          publicationCount\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/Product/non-existent_product_id\"\n    },\n  },\n});\n"}, {"description": "publishablePublishToCurrentChannel reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation publishablePublishToCurrentChannel($id: ID!) {\n      publishablePublishToCurrentChannel(id: $id) {\n        publishable {\n          availablePublicationsCount {\n            count\n          }\n          resourcePublicationsCount {\n            count\n          }\n        }\n        shop {\n          publicationCount\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/Product/921728736\"\n    },\n  },\n});\n"}]}, {"name": "publishableUnpublish", "description": "Unpublishes a resource from a channel. If the resource is a product, then it's visible in the channel only if the product status is active.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The resource to delete or update publications for."}, {"name": "input", "type": "[PublicationInput!]!", "required": false, "description": "Specifies the input fields required to unpublish a resource."}], "returns": [], "examples": [{"description": "Delete a collection listing to unpublish a collection from your app", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation PublishableUnpublish($collectionId: ID!, $publicationId: ID!) {\n      publishableUnpublish(id: $collectionId, input: {publicationId: $publicationId}) {\n        publishable {\n          publishedOnPublication(publicationId: $publicationId)\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"collectionId\": \"gid://shopify/Collection/142458073\",\n      \"publicationId\": \"gid://shopify/Publication/762454635\"\n    },\n  },\n});\n"}, {"description": "Delete a product listing to unpublish a product from your app", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation PublishableUnpublish($productId: ID!, $publicationId: ID!) {\n      publishableUnpublish(id: $productId, input: {publicationId: $publicationId}) {\n        publishable {\n          publishedOnPublication(publicationId: $publicationId)\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"productId\": \"gid://shopify/Product/108828309\",\n      \"publicationId\": \"gid://shopify/Publication/762454635\"\n    },\n  },\n});\n"}, {"description": "Error response", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation publishableUnpublish($id: ID!, $input: [PublicationInput!]!) {\n      publishableUnpublish(id: $id, input: $input) {\n        publishable {\n          availablePublicationsCount {\n            count\n          }\n          resourcePublicationsCount {\n            count\n          }\n        }\n        shop {\n          publicationCount\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/Product/108828309\",\n      \"input\": {\n        \"publishDate\": \"2024-11-14T11:45:48-05:00\"\n      }\n    },\n  },\n});\n"}, {"description": "Unpublish a product from a channel", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation publishableUnpublish($id: ID!, $input: [PublicationInput!]!) {\n      publishableUnpublish(id: $id, input: $input) {\n        publishable {\n          availablePublicationsCount {\n            count\n          }\n          resourcePublicationsCount {\n            count\n          }\n        }\n        shop {\n          publicationCount\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/Product/108828309\",\n      \"input\": {\n        \"channelId\": \"gid://shopify/Channel/762454635\"\n      }\n    },\n  },\n});\n"}, {"description": "Unpublish a product from a non-existing channel", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation publishableUnpublish($id: ID!, $input: [PublicationInput!]!) {\n      publishableUnpublish(id: $id, input: $input) {\n        publishable {\n          availablePublicationsCount {\n            count\n          }\n          resourcePublicationsCount {\n            count\n          }\n        }\n        shop {\n          publicationCount\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/Product/108828309\",\n      \"input\": {\n        \"channelId\": \"gid://shopify/Channel/0\"\n      }\n    },\n  },\n});\n"}, {"description": "Unpublish a product from a non-existing publication", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation publishableUnpublish($id: ID!, $input: [PublicationInput!]!) {\n      publishableUnpublish(id: $id, input: $input) {\n        publishable {\n          availablePublicationsCount {\n            count\n          }\n          resourcePublicationsCount {\n            count\n          }\n        }\n        shop {\n          publicationCount\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/Product/108828309\",\n      \"input\": {\n        \"publicationId\": \"gid://shopify/Publication/0\"\n      }\n    },\n  },\n});\n"}, {"description": "Unpublish a product from a publication", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation publishableUnpublish($id: ID!, $input: [PublicationInput!]!) {\n      publishableUnpublish(id: $id, input: $input) {\n        publishable {\n          availablePublicationsCount {\n            count\n          }\n          resourcePublicationsCount {\n            count\n          }\n        }\n        shop {\n          publicationCount\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/Product/108828309\",\n      \"input\": {\n        \"publicationId\": \"gid://shopify/Publication/762454635\"\n      }\n    },\n  },\n});\n"}, {"description": "Unpublish a product using both a channel ID and publication ID", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation publishableUnpublish($id: ID!, $input: [PublicationInput!]!) {\n      publishableUnpublish(id: $id, input: $input) {\n        publishable {\n          availablePublicationsCount {\n            count\n          }\n          resourcePublicationsCount {\n            count\n          }\n        }\n        shop {\n          publicationCount\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/Product/108828309\",\n      \"input\": {\n        \"channelId\": \"gid://shopify/Channel/762454635\",\n        \"publicationId\": \"gid://shopify/Publication/762454635\"\n      }\n    },\n  },\n});\n"}, {"description": "publishableUnpublish reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation PublishableUnpublish($collectionId: ID!, $publicationId: ID!) {\n      publishableUnpublish(id: $collectionId, input: {publicationId: $publicationId}) {\n        publishable {\n          publishedOnPublication(publicationId: $publicationId)\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"collectionId\": \"gid://shopify/Collection/142458073\",\n      \"publicationId\": \"gid://shopify/Publication/762454635\"\n    },\n  },\n});\n"}]}, {"name": "publishableUnpublishToCurrentChannel", "description": "Unpublishes a resource from the current channel. If the resource is a product, then it's visible in the channel only if the product status is active.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The resource to delete or update publications for."}], "returns": [], "examples": [{"description": "Unpublish a product from the current channel", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation publishableUnpublishToCurrentChannel($id: ID!) {\n      publishableUnpublishToCurrentChannel(id: $id) {\n        publishable {\n          availablePublicationsCount {\n            count\n          }\n          resourcePublicationsCount {\n            count\n          }\n        }\n        shop {\n          publicationCount\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/Product/921728736\"\n    },\n  },\n});\n"}, {"description": "publishableUnpublishToCurrentChannel reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation publishableUnpublishToCurrentChannel($id: ID!) {\n      publishableUnpublishToCurrentChannel(id: $id) {\n        publishable {\n          availablePublicationsCount {\n            count\n          }\n          resourcePublicationsCount {\n            count\n          }\n        }\n        shop {\n          publicationCount\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/Product/921728736\"\n    },\n  },\n});\n"}]}, {"name": "shopPolicyUpdate", "description": "Updates a shop policy.", "arguments": [{"name": "shopPolicy", "type": "ShopPolicyInput!", "required": false, "description": "The properties to use when updating the shop policy."}], "returns": [], "examples": []}], "objects": [{"name": "BusinessEntity", "description": "Represents a merchant's Business Entity.", "fields_and_connections": [{"name": "address", "type": "businessEntities", "description": "Returns a list of Business Entities associated with the shop.", "not_nullable": false}, {"name": "address", "type": "businessEntity", "description": "Returns a Business Entity by ID.", "not_nullable": false}, {"name": "address", "type": "Node", "description": "The address of the merchant's Business Entity.", "not_nullable": false}], "examples": []}, {"name": "BusinessEntityAddress", "description": "Represents the address of a merchant's Business Entity.", "fields_and_connections": [{"name": "address1", "type": "String", "description": "The first line of the address. Typically the street address or PO Box number.", "not_nullable": false}, {"name": "address2", "type": "String", "description": "The second line of the address. Typically the number of the apartment, suite, or unit.", "not_nullable": false}, {"name": "city", "type": "String", "description": "The name of the city, district, village, or town.", "not_nullable": false}, {"name": "countryCode", "type": "CountryCode!", "description": "The country code of the merchant's Business Entity.", "not_nullable": true}, {"name": "province", "type": "String", "description": "The region of the address, such as the province, state, or district.", "not_nullable": false}, {"name": "zip", "type": "String", "description": "The zip or postal code of the address.", "not_nullable": false}], "examples": []}, {"name": "CartTransformEligibleOperations", "description": "Represents the cart transform feature configuration for the shop.", "fields_and_connections": [{"name": "expandOperation", "type": "Boolean!", "description": "The shop is eligible for expand operations.", "not_nullable": true}, {"name": "mergeOperation", "type": "Boolean!", "description": "The shop is eligible for merge operations.", "not_nullable": true}, {"name": "updateOperation", "type": "Boolean!", "description": "The shop is eligible for update operations.", "not_nullable": true}], "examples": []}, {"name": "CartTransformFeature", "description": "Represents the cart transform feature configuration for the shop.", "fields_and_connections": [{"name": "eligibleOperations", "type": "CartTransformEligibleOperations!", "description": "The cart transform operations eligible for the shop.", "not_nullable": true}], "examples": []}, {"name": "CurrencyFormats", "description": "Currency formats configured for the merchant. These formats are available to use within Liquid.", "fields_and_connections": [{"name": "moneyFormat", "type": "FormattedString!", "description": "Money without currency in HTML.", "not_nullable": true}, {"name": "moneyInEmailsFormat", "type": "String!", "description": "Money without currency in emails.", "not_nullable": true}, {"name": "moneyWithCurrencyFormat", "type": "FormattedString!", "description": "Money with currency in HTML.", "not_nullable": true}, {"name": "moneyWithCurrencyInEmailsFormat", "type": "String!", "description": "Money with currency in emails.", "not_nullable": true}], "examples": []}, {"name": "FilterOption", "description": "A filter option is one possible value in a search filter.", "fields_and_connections": [{"name": "label", "type": "String!", "description": "The filter option's label for display purposes.", "not_nullable": true}, {"name": "value", "type": "String!", "description": "The filter option's value.", "not_nullable": true}], "examples": []}, {"name": "LimitedPendingOrderCount", "description": "The total number of pending orders on a shop if less then a maximum, or that maximum.\nThe atMax field indicates when this maximum has been reached.", "fields_and_connections": [{"name": "atMax", "type": "Boolean!", "description": "This is set when the number of pending orders has reached the maximum.", "not_nullable": true}, {"name": "count", "type": "Int!", "description": "The number of pendings orders on the shop.\nLimited to a maximum of 10000.", "not_nullable": true}], "examples": []}, {"name": "Location", "description": "Represents the location where the physical good resides. You can stock inventory at active locations. Active\nlocations that have fulfills_online_orders: true and are configured with a shipping rate, pickup enabled or\nlocal delivery will be able to sell from their storefront.", "fields_and_connections": [{"name": "activatable", "type": "location", "description": "Returns an inventory Location resource by ID.", "not_nullable": false}, {"name": "activatable", "type": "locationByIdentifier", "description": "Return a location by an identifier.", "not_nullable": false}, {"name": "activatable", "type": "locations", "description": "Returns a list of active inventory locations.", "not_nullable": false}, {"name": "activatable", "type": "locationsAvailableForDeliveryProfilesConnection", "description": "Returns a list of all origin locations available for a delivery profile.", "not_nullable": false}, {"name": "activatable", "type": "locationsAvailableForDeliveryProfiles", "description": "Returns a list of all origin locations available for a delivery profile. Use locationsAvailableForDeliveryProfilesConnection instead.", "not_nullable": false}, {"name": "activatable", "type": "locationActivate", "description": "Activates a location so that you can stock inventory at the location. Refer to the\nisActive and\nactivatable\nfields on the Location object.", "not_nullable": false}, {"name": "activatable", "type": "locationAdd", "description": "Adds a new location.", "not_nullable": false}, {"name": "activatable", "type": "locationDeactivate", "description": "Deactivates a location and moves inventory, pending orders, and moving transfers to a destination location.", "not_nullable": false}, {"name": "activatable", "type": "locationEdit", "description": "Edits an existing location.\nAs of the 2023-10 API version, apps can change the name and address of their fulfillment service locations.", "not_nullable": false}, {"name": "activatable", "type": "HasMetafieldDefinitions", "description": "Whether the location can be reactivated. If false, then trying to activate the location with the\nLocationActivate\nmutation will return an error that describes why the location can't be activated.", "not_nullable": false}, {"name": "activatable", "type": "HasMetafields", "description": "Whether the location can be reactivated. If false, then trying to activate the location with the\nLocationActivate\nmutation will return an error that describes why the location can't be activated.", "not_nullable": false}, {"name": "activatable", "type": "LegacyInteroperability", "description": "Whether the location can be reactivated. If false, then trying to activate the location with the\nLocationActivate\nmutation will return an error that describes why the location can't be activated.", "not_nullable": false}, {"name": "activatable", "type": "Node", "description": "Whether the location can be reactivated. If false, then trying to activate the location with the\nLocationActivate\nmutation will return an error that describes why the location can't be activated.", "not_nullable": false}], "examples": []}, {"name": "LocationAddress", "description": "Represents the address of a location.", "fields_and_connections": [{"name": "address1", "type": "String", "description": "The first line of the address for the location.", "not_nullable": false}, {"name": "address2", "type": "String", "description": "The second line of the address for the location.", "not_nullable": false}, {"name": "city", "type": "String", "description": "The city of the location.", "not_nullable": false}, {"name": "country", "type": "String", "description": "The country of the location.", "not_nullable": false}, {"name": "countryCode", "type": "String", "description": "The country code of the location.", "not_nullable": false}, {"name": "formatted", "type": "[String!]!", "description": "A formatted version of the address for the location.", "not_nullable": true}, {"name": "latitude", "type": "Float", "description": "The approximate latitude coordinates of the location.", "not_nullable": false}, {"name": "longitude", "type": "Float", "description": "The approximate longitude coordinates of the location.", "not_nullable": false}, {"name": "phone", "type": "String", "description": "The phone number of the location.", "not_nullable": false}, {"name": "province", "type": "String", "description": "The province of the location.", "not_nullable": false}, {"name": "provinceCode", "type": "String", "description": "The code for the province, state, or district of the address of the location.", "not_nullable": false}, {"name": "zip", "type": "String", "description": "The ZIP code of the location.", "not_nullable": false}], "examples": []}, {"name": "LocationsCondition", "description": "A condition checking the location that the visitor is shopping from.", "fields_and_connections": [{"name": "applicationLevel", "type": "MarketConditionApplicationType", "description": "The application level for the condition.", "not_nullable": false}, {"name": "locations", "type": "LocationConnection!", "description": "The locations that comprise the market.", "not_nullable": true}], "examples": []}, {"name": "LocationSuggestedAddress", "description": "Represents a suggested address for a location.", "fields_and_connections": [{"name": "address1", "type": "String", "description": "The first line of the suggested address.", "not_nullable": false}, {"name": "address2", "type": "String", "description": "The second line of the suggested address.", "not_nullable": false}, {"name": "city", "type": "String", "description": "The city of the suggested address.", "not_nullable": false}, {"name": "country", "type": "String", "description": "The country of the suggested address.", "not_nullable": false}, {"name": "countryCode", "type": "CountryCode", "description": "The country code of the suggested address.", "not_nullable": false}, {"name": "formatted", "type": "[String!]!", "description": "A formatted version of the suggested address.", "not_nullable": true}, {"name": "province", "type": "String", "description": "The province of the suggested address.", "not_nullable": false}, {"name": "provinceCode", "type": "String", "description": "The code for the province, state, or district of the suggested address.", "not_nullable": false}, {"name": "zip", "type": "String", "description": "The ZIP code of the suggested address.", "not_nullable": false}], "examples": []}, {"name": "NavigationItem", "description": "A navigation item, holding basic link attributes.", "fields_and_connections": [{"name": "id", "type": "String!", "description": "The unique identifier of the navigation item.", "not_nullable": true}, {"name": "title", "type": "String!", "description": "The name of the navigation item.", "not_nullable": true}, {"name": "url", "type": "URL!", "description": "The URL of the page that the navigation item links to.", "not_nullable": true}], "examples": []}, {"name": "Shop", "description": "Represents a collection of general settings and information about the shop.", "fields_and_connections": [{"name": "accountOwner", "type": "shop", "description": "Returns the Shop resource corresponding to the access token used in the request. The Shop resource contains\nbusiness and store management settings for the shop.", "not_nullable": false}, {"name": "accountOwner", "type": "collectionDelete", "description": "Deletes a collection.", "not_nullable": false}, {"name": "accountOwner", "type": "customerDelete", "description": "Delete a customer. As of API version 2022-10, apps using protected customer data must meet the protected customer data requirements.", "not_nullable": false}, {"name": "accountOwner", "type": "delegateAccessTokenCreate", "description": "Creates a delegate access token.\nTo learn more about creating delegate access tokens, refer to\nDelegate OAuth access tokens to subsystems.", "not_nullable": false}, {"name": "accountOwner", "type": "delegateAccessTokenDestroy", "description": "Destroys a delegate access token.", "not_nullable": false}, {"name": "accountOwner", "type": "productCreate", "description": "Creates a product\nwith attributes such as title, description, and vendor.\nYou can use the productCreate mutation to define\noptions and\nvalues\nfor products with\nproduct variants,\nsuch as different sizes or colors.\nTo create multiple product variants for a single product and manage prices, use the\nproductVariantsBulkCreate\nmutation.\nTo create or update a product in a single request, use the\nproductSet mutation.\nLearn more about the product model\nand adding product data.", "not_nullable": false}, {"name": "accountOwner", "type": "productDelete", "description": "Deletes a product, including all associated variants and media.\nAs of API version 2023-01, if you need to delete a large product, such as one that has many\nvariants\nthat are active at several\nlocations,\nyou may encounter timeout errors. To avoid these timeout errors, you can instead use the asynchronous\nProductDeleteAsync\nmutation.", "not_nullable": false}, {"name": "accountOwner", "type": "productDuplicate", "description": "Duplicates a product.\nIf you need to duplicate a large product, such as one that has many\nvariants\nthat are active at several\nlocations,\nyou might encounter timeout errors.\nTo avoid these timeout errors, you can instead duplicate the product asynchronously.\nIn API version 2024-10 and higher, include synchronous: false argument in this mutation to perform the duplication asynchronously.\nIn API version 2024-07 and lower, use the asynchronous ProductDuplicateAsyncV2.\nMetafield values are not duplicated if the unique values capability is enabled.", "not_nullable": false}, {"name": "accountOwner", "type": "publishablePublish", "description": "Publishes a resource to a channel. If the resource is a product, then it's visible in the channel only if the product status is active. Products that are sold exclusively on subscription (requiresSellingPlan: true) can be published only on online stores.", "not_nullable": false}, {"name": "accountOwner", "type": "publishablePublishToCurrentChannel", "description": "Publishes a resource to current channel. If the resource is a product, then it's visible in the channel only if the product status is active. Products that are sold exclusively on subscription (requiresSellingPlan: true) can be published only on online stores.", "not_nullable": false}, {"name": "accountOwner", "type": "publishableUnpublish", "description": "Unpublishes a resource from a channel. If the resource is a product, then it's visible in the channel only if the product status is active.", "not_nullable": false}, {"name": "accountOwner", "type": "publishableUnpublishToCurrentChannel", "description": "Unpublishes a resource from the current channel. If the resource is a product, then it's visible in the channel only if the product status is active.", "not_nullable": false}, {"name": "accountOwner", "type": "savedSearchDelete", "description": "Delete a saved search.", "not_nullable": false}, {"name": "accountOwner", "type": "storefrontAccessTokenCreate", "description": "Creates a storefront access token for use with the Storefront API.\nAn app can have a maximum of 100 active storefront access tokens for each shop.\nGet started with the Storefront API.", "not_nullable": false}, {"name": "accountOwner", "type": "collectionPublish", "description": "Publishes a collection to a channel. Use publishablePublish instead.", "not_nullable": false}, {"name": "accountOwner", "type": "collectionUnpublish", "description": "Unpublishes a collection. Use publishableUnpublish instead.", "not_nullable": false}, {"name": "accountOwner", "type": "productPublish", "description": "Publishes a product. Products that are sold exclusively on subscription (requiresSellingPlan: true) can only be published on online stores. Use publishablePublish instead.", "not_nullable": false}, {"name": "accountOwner", "type": "productUnpublish", "description": "Unpublishes a product. Use publishableUnpublish instead.", "not_nullable": false}, {"name": "accountOwner", "type": "HasMetafields", "description": "Account owner information.", "not_nullable": false}, {"name": "accountOwner", "type": "HasPublishedTranslations", "description": "Account owner information.", "not_nullable": false}, {"name": "accountOwner", "type": "Node", "description": "Account owner information.", "not_nullable": false}], "examples": []}, {"name": "ShopAddress", "description": "An address for a shop.", "fields_and_connections": [{"name": "address1", "type": "Node", "description": "The first line of the address. Typically the street address or PO Box number.", "not_nullable": false}], "examples": []}, {"name": "ShopFeatures", "description": "Represents the feature set available to the shop.\nMost fields specify whether a feature is enabled for a shop, and some fields return information\nrelated to specific features.", "fields_and_connections": [{"name": "avalaraAvatax", "type": "Boolean!", "description": "Whether a shop has access to Avalara AvaTax.", "not_nullable": true}, {"name": "branding", "type": "ShopBranding!", "description": "The branding of the shop, which influences its look and feel in the Shopify admin.", "not_nullable": true}, {"name": "bundles", "type": "BundlesFeature!", "description": "Represents the Bundles feature configuration for the shop.", "not_nullable": true}, {"name": "captcha", "type": "Boolean!", "description": "Whether a shop's online store can have CAPTCHA protection.", "not_nullable": true}, {"name": "cartTransform", "type": "CartTransformFeature!", "description": "Represents the cart transform feature configuration for the shop.", "not_nullable": true}, {"name": "dynamicRemarketing", "type": "Boolean!", "description": "Whether a shop has access to the Google Analytics dynamic remarketing feature.", "not_nullable": true}, {"name": "eligibleForSubscriptionMigration", "type": "Boolean!", "description": "Whether a shop can be migrated to use Shopify subscriptions.", "not_nullable": true}, {"name": "eligibleForSubscriptions", "type": "Boolean!", "description": "Whether a shop is configured properly to sell subscriptions.", "not_nullable": true}, {"name": "giftCards", "type": "Boolean!", "description": "Whether a shop can create gift cards.", "not_nullable": true}, {"name": "harmonizedSystemCode", "type": "Boolean!", "description": "Whether a shop displays Harmonized System codes on products. This is used for customs when shipping\ninternationally.", "not_nullable": true}, {"name": "internationalPriceOverrides", "type": "Boolean!", "description": "Whether a shop can enable international price overrides.", "not_nullable": true}, {"name": "internationalPriceRules", "type": "Boolean!", "description": "Whether a shop can enable international price rules.", "not_nullable": true}, {"name": "legacySubscriptionGatewayEnabled", "type": "Boolean!", "description": "Whether a shop has enabled a legacy subscription gateway to handle older subscriptions.", "not_nullable": true}, {"name": "liveView", "type": "Boolean!", "description": "Whether to show the Live View metrics in the Shopify admin. Live view is hidden from merchants that are on a trial\nor don't have a storefront.", "not_nullable": true}, {"name": "paypalExpressSubscriptionGatewayStatus", "type": "PaypalExpressSubscriptionsGatewayStatus!", "description": "Whether a shop is configured to sell subscriptions with PayPal Express.", "not_nullable": true}, {"name": "reports", "type": "Boolean!", "description": "Whether a shop has access to all reporting features.", "not_nullable": true}, {"name": "sellsSubscriptions", "type": "Boolean!", "description": "Whether a shop has ever had subscription products.", "not_nullable": true}, {"name": "showMetrics", "type": "Boolean!", "description": "Whether to show metrics in the Shopify admin. Metrics are hidden for new merchants until they become meaningful.", "not_nullable": true}, {"name": "storefront", "type": "Boolean!", "description": "Whether a shop has an online store.", "not_nullable": true}, {"name": "unifiedMarkets", "type": "Boolean!", "description": "Whether a shop is eligible for Unified Markets.", "not_nullable": true}, {"name": "usingShopifyBalance", "type": "Boolean!", "description": "Whether a shop is using Shopify Balance.", "not_nullable": true}, {"name": "captchaExternalDomains", "type": "Boolean!", "description": "Whether a shop's online store can have CAPTCHA protection for domains not managed by Shopify. No longer required for external domains", "not_nullable": true}, {"name": "deliveryProfiles", "type": "Boolean!", "description": "Whether the delivery profiles functionality is enabled for this shop. Delivery profiles are now 100% enabled across Shopify.", "not_nullable": true}, {"name": "internationalDomains", "type": "Boolean!", "description": "Whether a shop can enable international domains. All shops have international domains through Shopify Markets.", "not_nullable": true}, {"name": "onboardingVisual", "type": "Boolean!", "description": "Whether a shop has access to the onboarding visual. No longer supported.", "not_nullable": true}, {"name": "shopifyPlus", "type": "Boolean!", "description": "Whether the shop has a Shopify Plus subscription. Use Shop.plan.shopifyPlus instead.", "not_nullable": true}], "examples": []}, {"name": "ShopPlan", "description": "The billing plan of the shop.", "fields_and_connections": [{"name": "displayName", "type": "String!", "description": "The name of the shop's billing plan.", "not_nullable": true}, {"name": "partnerDevelopment", "type": "Boolean!", "description": "Whether the shop is a partner development shop for testing purposes.", "not_nullable": true}, {"name": "shopifyPlus", "type": "Boolean!", "description": "Whether the shop has a Shopify Plus subscription.", "not_nullable": true}], "examples": []}, {"name": "ShopPolicy", "description": "Policy that a merchant has configured for their store, such as their refund or privacy policy.", "fields_and_connections": [{"name": "body", "type": "shopPolicyUpdate", "description": "Updates a shop policy.", "not_nullable": false}, {"name": "body", "type": "HasPublishedTranslations", "description": "The text of the policy. The maximum size is 512kb.", "not_nullable": false}, {"name": "body", "type": "Node", "description": "The text of the policy. The maximum size is 512kb.", "not_nullable": false}], "examples": []}, {"name": "ShopResourceLimits", "description": "Resource limits of a shop.", "fields_and_connections": [{"name": "locationLimit", "type": "Int!", "description": "Maximum number of locations allowed.", "not_nullable": true}, {"name": "maxProductOptions", "type": "Int!", "description": "Maximum number of product options allowed.", "not_nullable": true}, {"name": "maxProductVariants", "type": "Int!", "description": "The maximum number of variants allowed per product.", "not_nullable": true}, {"name": "redirectLimitReached", "type": "Boolean!", "description": "Whether the shop has reached the limit of the number of URL redirects it can make for resources.", "not_nullable": true}], "examples": []}]}, {"name": "Webhooks", "queries": [{"name": "webhookSubscription", "description": "Returns a webhook subscription by ID.\nBuilding an app? If you only use app-specific webhooks, you won't need this. App-specific webhook subscriptions specified in your shopify.app.toml may be easier. They are automatically kept up to date by Shopify & require less maintenance. Please read About managing webhook subscriptions.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of the WebhookSubscription to return."}], "returns": [], "examples": [{"description": "Get a specific webhook subscription using the node field and a GraphQL fragment", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `query {\n    node(id: \"gid://shopify/WebhookSubscription/892403750\") {\n      ... on WebhookSubscription {\n        id\n        createdAt\n        updatedAt\n        legacyResourceId\n        topic\n        format\n      }\n    }\n  }`,\n});\n"}, {"description": "Get the dates a webhook subscription was created and updated", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `query {\n    webhookSubscription(id: \"gid://shopify/WebhookSubscription/892403750\") {\n      createdAt\n      updatedAt\n    }\n  }`,\n});\n"}, {"description": "Get the format in which the webhook subscription serializes the payload", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `query {\n    webhookSubscription(id: \"gid://shopify/WebhookSubscription/892403750\") {\n      format\n    }\n  }`,\n});\n"}, {"description": "Get the topic of a webhook subscription", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `query {\n    webhookSubscription(id: \"gid://shopify/WebhookSubscription/892403750\") {\n      topic\n    }\n  }`,\n});\n"}, {"description": "Receive a single Webhook", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `query WebhookSubscription($id: ID!) {\n      webhookSubscription(id: $id) {\n        id\n        topic\n        endpoint {\n          __typename\n          ... on WebhookHttpEndpoint {\n            callbackUrl\n          }\n          ... on WebhookEventBridgeEndpoint {\n            arn\n          }\n          ... on WebhookPubSubEndpoint {\n            pubSubProject\n            pubSubTopic\n          }\n        }\n        apiVersion {\n          handle\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/WebhookSubscription/892403750\"\n    },\n  },\n});\n"}]}, {"name": "webhookSubscriptions", "description": "Returns a list of webhook subscriptions.\nBuilding an app? If you only use app-specific webhooks, you won't need this. App-specific webhook subscriptions specified in your shopify.app.toml may be easier. They are automatically kept up to date by Shopify & require less maintenance. Please read About managing webhook subscriptions.", "arguments": [{"name": "after", "type": "String", "required": false, "description": "The elements that come after the specified cursor."}, {"name": "before", "type": "String", "required": false, "description": "The elements that come before the specified cursor."}, {"name": "callbackUrl", "type": "URL", "required": false, "description": "Callback URL to filter by."}, {"name": "first", "type": "Int", "required": false, "description": "The first n elements from the paginated list."}, {"name": "format", "type": "WebhookSubscriptionFormat", "required": false, "description": "Response format to filter by."}, {"name": "last", "type": "Int", "required": false, "description": "The last n elements from the paginated list."}, {"name": "query", "type": "String", "required": false, "description": "A filter made up of terms, connectives, modifiers, and comparators.\nYou can apply one or more filters to a query. Learn more about Shopify API search syntax."}, {"name": "reverse", "type": "Boolean", "required": false, "description": "Reverse the order of the underlying list."}, {"name": "sortKey", "type": "WebhookSubscriptionSortKeys", "required": false, "description": "Sort the underlying list using a key. If your query is slow or returns an error, then try specifying a sort key that matches the field used in the search."}, {"name": "topics", "type": "[WebhookSubscriptionTopic!]", "required": false, "description": "List of webhook subscription topics to filter by."}], "returns": [], "examples": [{"description": "Get the first two webhook subscriptions with an APP_UNINSTALLED topic", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `query {\n    webhookSubscriptions(first: 2, topics: APP_UNINSTALLED) {\n      edges {\n        node {\n          id\n          topic\n          endpoint {\n            __typename\n            ... on WebhookHttpEndpoint {\n              callbackUrl\n            }\n            ... on WebhookEventBridgeEndpoint {\n              arn\n            }\n          }\n        }\n      }\n    }\n  }`,\n});\n"}, {"description": "Retrieves a list of webhooks", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: `query WebhookSubscriptionList {\n    webhookSubscriptions(first: 3) {\n      edges {\n        node {\n          id\n          topic\n          endpoint {\n            __typename\n            ... on WebhookHttpEndpoint {\n              callbackUrl\n            }\n            ... on WebhookEventBridgeEndpoint {\n              arn\n            }\n            ... on WebhookPubSubEndpoint {\n              pubSubProject\n              pubSubTopic\n            }\n          }\n          createdAt\n          updatedAt\n          apiVersion {\n            handle\n          }\n          format\n          includeFields\n          metafieldNamespaces\n          privateMetafieldNamespaces\n        }\n      }\n    }\n  }`,\n});\n"}]}, {"name": "webhookSubscriptionsCount", "description": "The count of webhook subscriptions.\nBuilding an app? If you only use app-specific webhooks, you won't need this. App-specific webhook subscriptions specified in your shopify.app.toml may be easier. They are automatically kept up to date by Shopify & require less maintenance. Please read About managing webhook subscriptions. Limited to a maximum of 10000.", "arguments": [{"name": "query", "type": "String", "required": false, "description": "A filter made up of terms, connectives, modifiers, and comparators.\nYou can apply one or more filters to a query. Learn more about Shopify API search syntax."}], "returns": [], "examples": []}], "mutations": [{"name": "eventBridgeWebhookSubscriptionCreate", "description": "Creates a new Amazon EventBridge webhook subscription.\nBuilding an app? If you only use app-specific webhooks, you won't need this. App-specific webhook subscriptions specified in your shopify.app.toml may be easier. They are automatically kept up to date by Shopify & require less maintenance. Please read About managing webhook subscriptions.", "arguments": [{"name": "topic", "type": "WebhookSubscriptionTopic!", "required": false, "description": "The type of event that triggers the webhook."}, {"name": "webhookSubscription", "type": "EventBridgeWebhookSubscriptionInput!", "required": false, "description": "Specifies the input fields for an EventBridge webhook subscription."}], "returns": [], "examples": [{"description": "Create a METAOBJECTS_CREATE EventBridge webhook subscription for lookbook metaobjects", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation eventBridgeWebhookSubscriptionCreate($topic: WebhookSubscriptionTopic!, $webhookSubscription: EventBridgeWebhookSubscriptionInput!) {\n      eventBridgeWebhookSubscriptionCreate(topic: $topic, webhookSubscription: $webhookSubscription) {\n        webhookSubscription {\n          id\n          topic\n          filter\n          format\n          endpoint {\n            __typename\n            ... on WebhookEventBridgeEndpoint {\n              arn\n            }\n          }\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"topic\": \"METAOBJECTS_CREATE\",\n      \"webhookSubscription\": {\n        \"arn\": \"arn:aws:events:us-east-1::event-source/aws.partner/shopify.com/1830279/test-event-source\",\n        \"format\": \"JSON\",\n        \"filter\": \"type:lookbook\"\n      }\n    },\n  },\n});\n"}, {"description": "Create an Amazon EventBridge webhook subscription for ORDERS_CREATE events", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation eventBridgeWebhookSubscriptionCreate($topic: WebhookSubscriptionTopic!, $webhookSubscription: EventBridgeWebhookSubscriptionInput!) {\n      eventBridgeWebhookSubscriptionCreate(topic: $topic, webhookSubscription: $webhookSubscription) {\n        webhookSubscription {\n          id\n          topic\n          format\n          endpoint {\n            __typename\n            ... on WebhookEventBridgeEndpoint {\n              arn\n            }\n          }\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"topic\": \"ORDERS_CREATE\",\n      \"webhookSubscription\": {\n        \"arn\": \"arn:aws:events:us-east-1::event-source/aws.partner/shopify.com/166357/test-event-source\",\n        \"format\": \"JSON\"\n      }\n    },\n  },\n});\n"}, {"description": "Create an ORDERS_CREATE EventBridge webhook subscription thatincludes metafields during serialization", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation eventBridgeWebhookSubscriptionCreate($topic: WebhookSubscriptionTopic!, $webhookSubscription: EventBridgeWebhookSubscriptionInput!) {\n      eventBridgeWebhookSubscriptionCreate(topic: $topic, webhookSubscription: $webhookSubscription) {\n        webhookSubscription {\n          id\n          topic\n          format\n          metafieldNamespaces\n          endpoint {\n            __typename\n            ... on WebhookEventBridgeEndpoint {\n              arn\n            }\n          }\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"topic\": \"ORDERS_CREATE\",\n      \"metafieldNamespaces\": [\n        \"MY_NAMESPACE\",\n        \"ANOTHER_NAMESPACE\"\n      ],\n      \"webhookSubscription\": {\n        \"arn\": \"arn:aws:events:us-east-1::event-source/aws.partner/shopify.com/166357/test-event-source\",\n        \"format\": \"JSON\"\n      }\n    },\n  },\n});\n"}, {"description": "Create an ORDERS_CREATE EventBridge webhook subscription with fewer resource fields", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation eventBridgeWebhookSubscriptionCreate($topic: WebhookSubscriptionTopic!, $webhookSubscription: EventBridgeWebhookSubscriptionInput!) {\n      eventBridgeWebhookSubscriptionCreate(topic: $topic, webhookSubscription: $webhookSubscription) {\n        webhookSubscription {\n          id\n          topic\n          format\n          includeFields\n          endpoint {\n            __typename\n            ... on WebhookEventBridgeEndpoint {\n              arn\n            }\n          }\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"topic\": \"ORDERS_CREATE\",\n      \"includeFields\": [\n        \"id\",\n        \"note\"\n      ],\n      \"webhookSubscription\": {\n        \"arn\": \"arn:aws:events:us-east-1::event-source/aws.partner/shopify.com/166357/test-event-source\",\n        \"format\": \"JSON\"\n      }\n    },\n  },\n});\n"}, {"description": "eventBridgeWebhookSubscriptionCreate reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation eventBridgeWebhookSubscriptionCreate($topic: WebhookSubscriptionTopic!, $webhookSubscription: EventBridgeWebhookSubscriptionInput!) {\n      eventBridgeWebhookSubscriptionCreate(topic: $topic, webhookSubscription: $webhookSubscription) {\n        webhookSubscription {\n          id\n          topic\n          filter\n          format\n          endpoint {\n            __typename\n            ... on WebhookEventBridgeEndpoint {\n              arn\n            }\n          }\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"topic\": \"METAOBJECTS_CREATE\",\n      \"webhookSubscription\": {\n        \"arn\": \"arn:aws:events:us-east-1::event-source/aws.partner/shopify.com/1830279/test-event-source\",\n        \"format\": \"JSON\",\n        \"filter\": \"type:lookbook\"\n      }\n    },\n  },\n});\n"}]}, {"name": "eventBridgeWebhookSubscriptionUpdate", "description": "Updates an Amazon EventBridge webhook subscription.\nBuilding an app? If you only use app-specific webhooks, you won't need this. App-specific webhook subscriptions specified in your shopify.app.toml may be easier. They are automatically kept up to date by Shopify & require less maintenance. Please read About managing webhook subscriptions.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of the webhook subscription to update."}, {"name": "webhookSubscription", "type": "EventBridgeWebhookSubscriptionInput!", "required": false, "description": "Specifies the input fields for an EventBridge webhook subscription."}], "returns": [], "examples": [{"description": "Update a webhook subscription from HTTP to Amazon EventBridge", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation eventBridgeWebhookSubscriptionUpdate($id: ID!, $webhookSubscription: EventBridgeWebhookSubscriptionInput!) {\n      eventBridgeWebhookSubscriptionUpdate(id: $id, webhookSubscription: $webhookSubscription) {\n        userErrors {\n          field\n          message\n        }\n        webhookSubscription {\n          id\n          topic\n          endpoint {\n            ... on WebhookEventBridgeEndpoint {\n              arn\n            }\n          }\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/WebhookSubscription/525699895\",\n      \"webhookSubscription\": {\n        \"arn\": \"arn:aws:events:us-east-1::event-source/aws.partner/shopify.com/755357713/test-event-source\",\n        \"format\": \"JSON\"\n      }\n    },\n  },\n});\n"}, {"description": "eventBridgeWebhookSubscriptionUpdate reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation eventBridgeWebhookSubscriptionUpdate($id: ID!, $webhookSubscription: EventBridgeWebhookSubscriptionInput!) {\n      eventBridgeWebhookSubscriptionUpdate(id: $id, webhookSubscription: $webhookSubscription) {\n        userErrors {\n          field\n          message\n        }\n        webhookSubscription {\n          id\n          topic\n          endpoint {\n            ... on WebhookEventBridgeEndpoint {\n              arn\n            }\n          }\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/WebhookSubscription/525699895\",\n      \"webhookSubscription\": {\n        \"arn\": \"arn:aws:events:us-east-1::event-source/aws.partner/shopify.com/755357713/test-event-source\",\n        \"format\": \"JSON\"\n      }\n    },\n  },\n});\n"}]}, {"name": "pubSubWebhookSubscriptionCreate", "description": "Creates a new Google Cloud Pub/Sub webhook subscription.\nBuilding an app? If you only use app-specific webhooks, you won't need this. App-specific webhook subscriptions specified in your shopify.app.toml may be easier. They are automatically kept up to date by Shopify & require less maintenance. Please read About managing webhook subscriptions.", "arguments": [{"name": "topic", "type": "WebhookSubscriptionTopic!", "required": false, "description": "The type of event that triggers the webhook."}, {"name": "webhookSubscription", "type": "PubSubWebhookSubscriptionInput!", "required": false, "description": "Specifies the input fields for a Google Cloud Pub/Sub webhook subscription."}], "returns": [], "examples": [{"description": "Create a Google Cloud Pub/Sub webhook subscription for ORDERS_CREATE events", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation pubSubWebhookSubscriptionCreate($topic: WebhookSubscriptionTopic!, $webhookSubscription: PubSubWebhookSubscriptionInput!) {\n      pubSubWebhookSubscriptionCreate(topic: $topic, webhookSubscription: $webhookSubscription) {\n        webhookSubscription {\n          id\n          topic\n          format\n          endpoint {\n            __typename\n            ... on WebhookPubSubEndpoint {\n              pubSubProject\n              pubSubTopic\n            }\n          }\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"topic\": \"ORDERS_CREATE\",\n      \"webhookSubscription\": {\n        \"pubSubProject\": \"my-gcp-project\",\n        \"pubSubTopic\": \"my-gcp-topic\",\n        \"format\": \"JSON\"\n      }\n    },\n  },\n});\n"}, {"description": "Create a METAOBJECTS_CREATE Pub/Sub webhook subscription for lookbook metaobjects", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation pubSubWebhookSubscriptionCreate($topic: WebhookSubscriptionTopic!, $webhookSubscription: PubSubWebhookSubscriptionInput!) {\n      pubSubWebhookSubscriptionCreate(topic: $topic, webhookSubscription: $webhookSubscription) {\n        webhookSubscription {\n          id\n          topic\n          format\n          endpoint {\n            __typename\n            ... on WebhookPubSubEndpoint {\n              pubSubProject\n              pubSubTopic\n            }\n          }\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"topic\": \"ORDERS_CREATE\",\n      \"webhookSubscription\": {\n        \"pubSubProject\": \"my-gcp-project\",\n        \"pubSubTopic\": \"my-gcp-topic\",\n        \"format\": \"JSON\"\n      }\n    },\n  },\n});\n"}, {"description": "Create an ORDERS_CREATE Pub/Sub webhook subscription that includes metafields during serialization", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation pubSubWebhookSubscriptionCreate($topic: WebhookSubscriptionTopic!, $webhookSubscription: PubSubWebhookSubscriptionInput!) {\n      pubSubWebhookSubscriptionCreate(topic: $topic, webhookSubscription: $webhookSubscription) {\n        webhookSubscription {\n          id\n          topic\n          format\n          endpoint {\n            __typename\n            ... on WebhookPubSubEndpoint {\n              pubSubProject\n              pubSubTopic\n            }\n          }\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"topic\": \"ORDERS_CREATE\",\n      \"webhookSubscription\": {\n        \"pubSubProject\": \"my-gcp-project\",\n        \"pubSubTopic\": \"my-gcp-topic\",\n        \"format\": \"JSON\"\n      }\n    },\n  },\n});\n"}, {"description": "Create an ORDERS_CREATE Pub/Sub webhook subscription with fewer resource fields", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation pubSubWebhookSubscriptionCreate($topic: WebhookSubscriptionTopic!, $webhookSubscription: PubSubWebhookSubscriptionInput!) {\n      pubSubWebhookSubscriptionCreate(topic: $topic, webhookSubscription: $webhookSubscription) {\n        webhookSubscription {\n          id\n          topic\n          format\n          endpoint {\n            __typename\n            ... on WebhookPubSubEndpoint {\n              pubSubProject\n              pubSubTopic\n            }\n          }\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"topic\": \"ORDERS_CREATE\",\n      \"webhookSubscription\": {\n        \"pubSubProject\": \"my-gcp-project\",\n        \"pubSubTopic\": \"my-gcp-topic\",\n        \"format\": \"JSON\"\n      }\n    },\n  },\n});\n"}, {"description": "pubSubWebhookSubscriptionCreate reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation pubSubWebhookSubscriptionCreate($topic: WebhookSubscriptionTopic!, $webhookSubscription: PubSubWebhookSubscriptionInput!) {\n      pubSubWebhookSubscriptionCreate(topic: $topic, webhookSubscription: $webhookSubscription) {\n        webhookSubscription {\n          id\n          topic\n          format\n          endpoint {\n            __typename\n            ... on WebhookPubSubEndpoint {\n              pubSubProject\n              pubSubTopic\n            }\n          }\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"topic\": \"ORDERS_CREATE\",\n      \"webhookSubscription\": {\n        \"pubSubProject\": \"my-gcp-project\",\n        \"pubSubTopic\": \"my-gcp-topic\",\n        \"format\": \"JSON\"\n      }\n    },\n  },\n});\n"}]}, {"name": "pubSubWebhookSubscriptionUpdate", "description": "Updates a Google Cloud Pub/Sub webhook subscription.\nBuilding an app? If you only use app-specific webhooks, you won't need this. App-specific webhook subscriptions specified in your shopify.app.toml may be easier. They are automatically kept up to date by Shopify & require less maintenance. Please read About managing webhook subscriptions.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of the webhook subscription to update."}, {"name": "webhookSubscription", "type": "PubSubWebhookSubscriptionInput", "required": false, "description": "Specifies the input fields for a Google Cloud Pub/Sub webhook subscription."}], "returns": [], "examples": [{"description": "Update a webhook subscription from HTTP to Google Pub/Sub", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation pubSubWebhookSubscriptionUpdate($id: ID!, $webhookSubscription: PubSubWebhookSubscriptionInput!) {\n      pubSubWebhookSubscriptionUpdate(id: $id, webhookSubscription: $webhookSubscription) {\n        userErrors {\n          field\n          message\n        }\n        webhookSubscription {\n          id\n          topic\n          endpoint {\n            ... on WebhookPubSubEndpoint {\n              pubSubProject\n              pubSubTopic\n            }\n          }\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/WebhookSubscription/525699895\",\n      \"webhookSubscription\": {\n        \"pubSubProject\": \"a-gcp-project\",\n        \"pubSubTopic\": \"a-pubsub-topic\",\n        \"format\": \"JSON\"\n      }\n    },\n  },\n});\n"}, {"description": "pubSubWebhookSubscriptionUpdate reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation pubSubWebhookSubscriptionUpdate($id: ID!, $webhookSubscription: PubSubWebhookSubscriptionInput!) {\n      pubSubWebhookSubscriptionUpdate(id: $id, webhookSubscription: $webhookSubscription) {\n        userErrors {\n          field\n          message\n        }\n        webhookSubscription {\n          id\n          topic\n          endpoint {\n            ... on WebhookPubSubEndpoint {\n              pubSubProject\n              pubSubTopic\n            }\n          }\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/WebhookSubscription/525699895\",\n      \"webhookSubscription\": {\n        \"pubSubProject\": \"a-gcp-project\",\n        \"pubSubTopic\": \"a-pubsub-topic\",\n        \"format\": \"JSON\"\n      }\n    },\n  },\n});\n"}]}, {"name": "webhookSubscriptionCreate", "description": "Creates a new webhook subscription.\nBuilding an app? If you only use app-specific webhooks, you won't need this. App-specific webhook subscriptions specified in your shopify.app.toml may be easier. They are automatically kept up to date by Shopify & require less maintenance. Please read About managing webhook subscriptions.", "arguments": [{"name": "topic", "type": "WebhookSubscriptionTopic!", "required": false, "description": "The type of event that triggers the webhook."}, {"name": "webhookSubscription", "type": "WebhookSubscriptionInput!", "required": false, "description": "Specifies the input fields for a webhook subscription."}], "returns": [], "examples": [{"description": "Create a METAOBJECTS_CREATE webhook subscription for lookbook metaobjects", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation webhookSubscriptionCreate($topic: WebhookSubscriptionTopic!, $webhookSubscription: WebhookSubscriptionInput!) {\n      webhookSubscriptionCreate(topic: $topic, webhookSubscription: $webhookSubscription) {\n        webhookSubscription {\n          id\n          topic\n          filter\n          format\n          endpoint {\n            __typename\n            ... on WebhookHttpEndpoint {\n              callbackUrl\n            }\n          }\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"topic\": \"METAOBJECTS_CREATE\",\n      \"webhookSubscription\": {\n        \"callbackUrl\": \"https://example.org/endpoint\",\n        \"format\": \"JSON\",\n        \"filter\": \"type:lookbook\"\n      }\n    },\n  },\n});\n"}, {"description": "Create a new Webhook", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation WebhookSubscriptionCreate($topic: WebhookSubscriptionTopic!, $webhookSubscription: WebhookSubscriptionInput!) {\n      webhookSubscriptionCreate(topic: $topic, webhookSubscription: $webhookSubscription) {\n        webhookSubscription {\n          id\n          topic\n          apiVersion {\n            handle\n          }\n          format\n          createdAt\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"topic\": \"ORDERS_CREATE\",\n      \"webhookSubscription\": {\n        \"callbackUrl\": \"https://example.org/endpoint\",\n        \"format\": \"JSON\"\n      }\n    },\n  },\n});\n"}, {"description": "Create an HTTP webhook subscription for APP_UNINSTALLED events", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation webhookSubscriptionCreate($topic: WebhookSubscriptionTopic!, $webhookSubscription: WebhookSubscriptionInput!) {\n      webhookSubscriptionCreate(topic: $topic, webhookSubscription: $webhookSubscription) {\n        webhookSubscription {\n          id\n          topic\n          format\n          endpoint {\n            __typename\n            ... on WebhookHttpEndpoint {\n              callbackUrl\n            }\n          }\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"topic\": \"APP_UNINSTALLED\",\n      \"webhookSubscription\": {\n        \"callbackUrl\": \"https://example.org/endpoint\",\n        \"format\": \"JSON\"\n      }\n    },\n  },\n});\n"}, {"description": "Create an ORDERS_CREATE webhook subscription that includes metafields during serialization", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation webhookSubscriptionCreate($topic: WebhookSubscriptionTopic!, $webhookSubscription: WebhookSubscriptionInput!) {\n      webhookSubscriptionCreate(topic: $topic, webhookSubscription: $webhookSubscription) {\n        webhookSubscription {\n          id\n          topic\n          format\n          metafieldNamespaces\n          endpoint {\n            __typename\n            ... on WebhookHttpEndpoint {\n              callbackUrl\n            }\n          }\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"topic\": \"ORDERS_CREATE\",\n      \"webhookSubscription\": {\n        \"callbackUrl\": \"https://example.org/endpoint\",\n        \"format\": \"JSON\",\n        \"metafieldNamespaces\": [\n          \"MY_NAMESPACE\",\n          \"ANOTHER_NAMESPACE\"\n        ]\n      }\n    },\n  },\n});\n"}, {"description": "Create an ORDERS_CREATE webhook subscription with fewer resource fields during serialization", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation webhookSubscriptionCreate($topic: WebhookSubscriptionTopic!, $webhookSubscription: WebhookSubscriptionInput!) {\n      webhookSubscriptionCreate(topic: $topic, webhookSubscription: $webhookSubscription) {\n        webhookSubscription {\n          id\n          topic\n          format\n          includeFields\n          endpoint {\n            __typename\n            ... on WebhookHttpEndpoint {\n              callbackUrl\n            }\n          }\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"topic\": \"ORDERS_CREATE\",\n      \"webhookSubscription\": {\n        \"callbackUrl\": \"https://example.org/endpoint\",\n        \"format\": \"JSON\",\n        \"includeFields\": [\n          \"id\",\n          \"note\"\n        ]\n      }\n    },\n  },\n});\n"}, {"description": "webhookSubscriptionCreate reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation webhookSubscriptionCreate($topic: WebhookSubscriptionTopic!, $webhookSubscription: WebhookSubscriptionInput!) {\n      webhookSubscriptionCreate(topic: $topic, webhookSubscription: $webhookSubscription) {\n        webhookSubscription {\n          id\n          topic\n          filter\n          format\n          endpoint {\n            __typename\n            ... on WebhookHttpEndpoint {\n              callbackUrl\n            }\n          }\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`,\n    \"variables\": {\n      \"topic\": \"METAOBJECTS_CREATE\",\n      \"webhookSubscription\": {\n        \"callbackUrl\": \"https://example.org/endpoint\",\n        \"format\": \"JSON\",\n        \"filter\": \"type:lookbook\"\n      }\n    },\n  },\n});\n"}]}, {"name": "webhookSubscriptionDelete", "description": "Deletes a webhook subscription.\nBuilding an app? If you only use app-specific webhooks, you won't need this. App-specific webhook subscriptions specified in your shopify.app.toml may be easier. They are automatically kept up to date by Shopify & require less maintenance. Please read About managing webhook subscriptions.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of the webhook subscription to delete."}], "returns": [], "examples": [{"description": "Remove an existing Webhook", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation webhookSubscriptionDelete($id: ID!) {\n      webhookSubscriptionDelete(id: $id) {\n        userErrors {\n          field\n          message\n        }\n        deletedWebhookSubscriptionId\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/WebhookSubscription/525699895\"\n    },\n  },\n});\n"}, {"description": "webhookSubscriptionDelete reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation webhookSubscriptionDelete($id: ID!) {\n      webhookSubscriptionDelete(id: $id) {\n        userErrors {\n          field\n          message\n        }\n        deletedWebhookSubscriptionId\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/WebhookSubscription/525699895\"\n    },\n  },\n});\n"}]}, {"name": "webhookSubscriptionUpdate", "description": "Updates a webhook subscription.\nBuilding an app? If you only use app-specific webhooks, you won't need this. App-specific webhook subscriptions specified in your shopify.app.toml may be easier. They are automatically kept up to date by Shopify & require less maintenance. Please read About managing webhook subscriptions.", "arguments": [{"name": "id", "type": "ID!", "required": false, "description": "The ID of the webhook subscription to update."}, {"name": "webhookSubscription", "type": "WebhookSubscriptionInput!", "required": false, "description": "Specifies the input fields for a webhook subscription."}], "returns": [], "examples": [{"description": "Modify an existing Webhook", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation WebhookSubscriptionUpdate($id: ID!, $webhookSubscription: WebhookSubscriptionInput!) {\n      webhookSubscriptionUpdate(id: $id, webhookSubscription: $webhookSubscription) {\n        userErrors {\n          field\n          message\n        }\n        webhookSubscription {\n          id\n          topic\n          endpoint {\n            __typename\n            ... on WebhookHttpEndpoint {\n              callbackUrl\n            }\n            ... on WebhookEventBridgeEndpoint {\n              arn\n            }\n            ... on WebhookPubSubEndpoint {\n              pubSubProject\n              pubSubTopic\n            }\n          }\n          apiVersion {\n            handle\n          }\n          format\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/WebhookSubscription/525699895\",\n      \"webhookSubscription\": {\n        \"callbackUrl\": \"https://example.org/aValidEndpoint\"\n      }\n    },\n  },\n});\n"}, {"description": "Update the callback URL of a webhook subscription", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation webhookSubscriptionUpdate($id: ID!, $webhookSubscription: WebhookSubscriptionInput!) {\n      webhookSubscriptionUpdate(id: $id, webhookSubscription: $webhookSubscription) {\n        userErrors {\n          field\n          message\n        }\n        webhookSubscription {\n          id\n          topic\n          endpoint {\n            ... on WebhookHttpEndpoint {\n              callbackUrl\n            }\n          }\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/WebhookSubscription/525699895\",\n      \"webhookSubscription\": {\n        \"callbackUrl\": \"https://example.org/aValidEndpoint\"\n      }\n    },\n  },\n});\n"}, {"description": "webhookSubscriptionUpdate reference", "code": "const client = new shopify.clients.Graphql({session});\nconst data = await client.query({\n  data: {\n    \"query\": `mutation WebhookSubscriptionUpdate($id: ID!, $webhookSubscription: WebhookSubscriptionInput!) {\n      webhookSubscriptionUpdate(id: $id, webhookSubscription: $webhookSubscription) {\n        userErrors {\n          field\n          message\n        }\n        webhookSubscription {\n          id\n          topic\n          endpoint {\n            __typename\n            ... on WebhookHttpEndpoint {\n              callbackUrl\n            }\n            ... on WebhookEventBridgeEndpoint {\n              arn\n            }\n            ... on WebhookPubSubEndpoint {\n              pubSubProject\n              pubSubTopic\n            }\n          }\n          apiVersion {\n            handle\n          }\n          format\n        }\n      }\n    }`,\n    \"variables\": {\n      \"id\": \"gid://shopify/WebhookSubscription/525699895\",\n      \"webhookSubscription\": {\n        \"callbackUrl\": \"https://example.org/aValidEndpoint\"\n      }\n    },\n  },\n});\n"}]}], "objects": [{"name": "WebhookEventBridgeEndpoint", "description": "An Amazon EventBridge partner event source to which webhook subscriptions publish events.", "fields_and_connections": [{"name": "arn", "type": "ARN!", "description": "The ARN of this EventBridge partner event source.", "not_nullable": true}], "examples": []}, {"name": "WebhookHttpEndpoint", "description": "An HTTPS endpoint to which webhook subscriptions send POST requests.", "fields_and_connections": [{"name": "callbackUrl", "type": "URL!", "description": "The URL to which the webhooks events are sent.", "not_nullable": true}], "examples": []}, {"name": "WebhookPubSubEndpoint", "description": "A Google Cloud Pub/Sub topic to which webhook subscriptions publish events.", "fields_and_connections": [{"name": "pubSubProject", "type": "String!", "description": "The Google Cloud Pub/Sub project ID.", "not_nullable": true}, {"name": "pubSubTopic", "type": "String!", "description": "The Google Cloud Pub/Sub topic ID.", "not_nullable": true}], "examples": []}, {"name": "WebhookSubscription", "description": "A webhook subscription is a persisted data object created by an app using the REST Admin API or GraphQL Admin API.\nIt describes the topic that the app wants to receive, and a destination where Shopify should send webhooks of the specified topic.\nWhen an event for a given topic occurs, the webhook subscription sends a relevant payload to the destination.\nLearn more about the webhooks system.", "fields_and_connections": [{"name": "apiVersion", "type": "webhookSubscription", "description": "Returns a webhook subscription by ID.\nBuilding an app? If you only use app-specific webhooks, you won't need this. App-specific webhook subscriptions specified in your shopify.app.toml may be easier. They are automatically kept up to date by Shopify & require less maintenance. Please read About managing webhook subscriptions.", "not_nullable": false}, {"name": "apiVersion", "type": "webhookSubscriptions", "description": "Returns a list of webhook subscriptions.\nBuilding an app? If you only use app-specific webhooks, you won't need this. App-specific webhook subscriptions specified in your shopify.app.toml may be easier. They are automatically kept up to date by Shopify & require less maintenance. Please read About managing webhook subscriptions.", "not_nullable": false}, {"name": "apiVersion", "type": "eventBridgeWebhookSubscriptionCreate", "description": "Creates a new Amazon EventBridge webhook subscription.\nBuilding an app? If you only use app-specific webhooks, you won't need this. App-specific webhook subscriptions specified in your shopify.app.toml may be easier. They are automatically kept up to date by Shopify & require less maintenance. Please read About managing webhook subscriptions.", "not_nullable": false}, {"name": "apiVersion", "type": "eventBridgeWebhookSubscriptionUpdate", "description": "Updates an Amazon EventBridge webhook subscription.\nBuilding an app? If you only use app-specific webhooks, you won't need this. App-specific webhook subscriptions specified in your shopify.app.toml may be easier. They are automatically kept up to date by Shopify & require less maintenance. Please read About managing webhook subscriptions.", "not_nullable": false}, {"name": "apiVersion", "type": "pubSubWebhookSubscriptionCreate", "description": "Creates a new Google Cloud Pub/Sub webhook subscription.\nBuilding an app? If you only use app-specific webhooks, you won't need this. App-specific webhook subscriptions specified in your shopify.app.toml may be easier. They are automatically kept up to date by Shopify & require less maintenance. Please read About managing webhook subscriptions.", "not_nullable": false}, {"name": "apiVersion", "type": "pubSubWebhookSubscriptionUpdate", "description": "Updates a Google Cloud Pub/Sub webhook subscription.\nBuilding an app? If you only use app-specific webhooks, you won't need this. App-specific webhook subscriptions specified in your shopify.app.toml may be easier. They are automatically kept up to date by Shopify & require less maintenance. Please read About managing webhook subscriptions.", "not_nullable": false}, {"name": "apiVersion", "type": "webhookSubscriptionCreate", "description": "Creates a new webhook subscription.\nBuilding an app? If you only use app-specific webhooks, you won't need this. App-specific webhook subscriptions specified in your shopify.app.toml may be easier. They are automatically kept up to date by Shopify & require less maintenance. Please read About managing webhook subscriptions.", "not_nullable": false}, {"name": "apiVersion", "type": "webhookSubscriptionUpdate", "description": "Updates a webhook subscription.\nBuilding an app? If you only use app-specific webhooks, you won't need this. App-specific webhook subscriptions specified in your shopify.app.toml may be easier. They are automatically kept up to date by Shopify & require less maintenance. Please read About managing webhook subscriptions.", "not_nullable": false}, {"name": "apiVersion", "type": "LegacyInteroperability", "description": "The Admin API version that Shopify uses to serialize webhook events. This value is inherited from the app that created the webhook subscription.", "not_nullable": false}, {"name": "apiVersion", "type": "Node", "description": "The Admin API version that Shopify uses to serialize webhook events. This value is inherited from the app that created the webhook subscription.", "not_nullable": false}], "examples": []}]}, {"name": "GraphQL Types", "queries": [], "mutations": [], "objects": [{"name": "AbandonedCheckoutEdge", "description": "An auto-generated type which holds one AbandonedCheckout and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "AbandonedCheckout!", "description": "The item at the end of AbandonedCheckoutEdge.", "not_nullable": true}], "examples": []}, {"name": "AbandonedCheckoutLineItemEdge", "description": "An auto-generated type which holds one AbandonedCheckoutLineItem and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "AbandonedCheckoutLineItem!", "description": "The item at the end of AbandonedCheckoutLineItemEdge.", "not_nullable": true}], "examples": []}, {"name": "AbandonmentEmailStateUpdateUserError", "description": "An error that occurs during the execution of AbandonmentEmailStateUpdate.", "fields_and_connections": [{"name": "code", "type": "abandonmentEmailStateUpdate", "description": "Updates the email state value for an abandonment. Use abandonmentUpdateActivitiesDeliveryStatuses instead.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "AbandonmentUpdateActivitiesDeliveryStatusesUserError", "description": "An error that occurs during the execution of AbandonmentUpdateActivitiesDeliveryStatuses.", "fields_and_connections": [{"name": "code", "type": "abandonmentUpdateActivitiesDeliveryStatuses", "description": "Updates the marketing activities delivery statuses for an abandonment.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "AppCreditEdge", "description": "An auto-generated type which holds one AppCredit and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "AppCredit!", "description": "The item at the end of AppCreditEdge.", "not_nullable": true}], "examples": []}, {"name": "AppDiscountTypeEdge", "description": "An auto-generated type which holds one AppDiscountType and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "AppDiscountType!", "description": "The item at the end of AppDiscountTypeEdge.", "not_nullable": true}], "examples": []}, {"name": "AppEdge", "description": "An auto-generated type which holds one App and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "App!", "description": "The item at the end of AppEdge.", "not_nullable": true}], "examples": []}, {"name": "AppInstallationEdge", "description": "An auto-generated type which holds one AppInstallation and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "AppInstallation!", "description": "The item at the end of AppInstallationEdge.", "not_nullable": true}], "examples": []}, {"name": "AppPurchaseOneTimeEdge", "description": "An auto-generated type which holds one AppPurchaseOneTime and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "AppPurchaseOneTime!", "description": "The item at the end of AppPurchaseOneTimeEdge.", "not_nullable": true}], "examples": []}, {"name": "AppRevenueAttributionRecordEdge", "description": "An auto-generated type which holds one AppRevenueAttributionRecord and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "AppRevenueAttributionRecord!", "description": "The item at the end of AppRevenueAttributionRecordEdge.", "not_nullable": true}], "examples": []}, {"name": "AppSubscriptionEdge", "description": "An auto-generated type which holds one AppSubscription and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "AppSubscription!", "description": "The item at the end of AppSubscriptionEdge.", "not_nullable": true}], "examples": []}, {"name": "AppSubscriptionTrialExtendUserError", "description": "An error that occurs during the execution of AppSubscriptionTrialExtend.", "fields_and_connections": [{"name": "code", "type": "appSubscriptionTrialExtend", "description": "Extends the trial of an app subscription.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "AppUsageRecordEdge", "description": "An auto-generated type which holds one AppUsageRecord and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "AppUsageRecord!", "description": "The item at the end of AppUsageRecordEdge.", "not_nullable": true}], "examples": []}, {"name": "ArticleAuthorEdge", "description": "An auto-generated type which holds one ArticleAuthor and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "ArticleAuthor!", "description": "The item at the end of ArticleAuthorEdge.", "not_nullable": true}], "examples": []}, {"name": "ArticleCreateUserError", "description": "An error that occurs during the execution of ArticleCreate.", "fields_and_connections": [{"name": "code", "type": "articleCreate", "description": "Creates an article.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "ArticleDeleteUserError", "description": "An error that occurs during the execution of ArticleDelete.", "fields_and_connections": [{"name": "code", "type": "articleDelete", "description": "Deletes an article.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "ArticleEdge", "description": "An auto-generated type which holds one Article and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "Article!", "description": "The item at the end of ArticleEdge.", "not_nullable": true}], "examples": []}, {"name": "ArticleUpdateUserError", "description": "An error that occurs during the execution of ArticleUpdate.", "fields_and_connections": [{"name": "code", "type": "articleUpdate", "description": "Updates an article.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "BillingAttemptUserError", "description": "Represents an error that happens during the execution of a billing attempt mutation.", "fields_and_connections": [{"name": "code", "type": "subscriptionBillingAttemptCreate", "description": "Creates a new subscription billing attempt. For more information, refer to Create a subscription contract.", "not_nullable": false}, {"name": "code", "type": "subscriptionBillingCycleCharge", "description": "Creates a new subscription billing attempt for a specified billing cycle. This is the alternative mutation for subscriptionBillingAttemptCreate. For more information, refer to Create a subscription contract.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "BlogCreateUserError", "description": "An error that occurs during the execution of BlogCreate.", "fields_and_connections": [{"name": "code", "type": "blogCreate", "description": "Creates a blog.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "BlogDeleteUserError", "description": "An error that occurs during the execution of BlogDelete.", "fields_and_connections": [{"name": "code", "type": "blogDelete", "description": "Deletes a blog.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "BlogEdge", "description": "An auto-generated type which holds one Blog and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "Blog!", "description": "The item at the end of BlogEdge.", "not_nullable": true}], "examples": []}, {"name": "BlogUpdateUserError", "description": "An error that occurs during the execution of BlogUpdate.", "fields_and_connections": [{"name": "code", "type": "blogUpdate", "description": "Updates a blog.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "BulkMutationUserError", "description": "Represents an error that happens during execution of a bulk mutation.", "fields_and_connections": [{"name": "code", "type": "bulkOperationRunMutation", "description": "Creates and runs a bulk operation mutation.\nTo learn how to bulk import large volumes of data asynchronously, refer to the\nbulk import data guide.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "BulkOperationUserError", "description": "Represents an error in the input of a mutation.", "fields_and_connections": [{"name": "code", "type": "bulkOperationRunQuery", "description": "Creates and runs a bulk operation query.\nSee the bulk operations guide for more details.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "BulkProductResourceFeedbackCreateUserError", "description": "An error that occurs during the execution of BulkProductResourceFeedbackCreate.", "fields_and_connections": [{"name": "code", "type": "bulkProductResourceFeedbackCreate", "description": "Creates product feedback for multiple products.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "BusinessCustomerUserError", "description": "An error that happens during the execution of a business customer mutation.", "fields_and_connections": [{"name": "code", "type": "companiesDelete", "description": "Deletes a list of companies.", "not_nullable": false}, {"name": "code", "type": "companyAddressDelete", "description": "Deletes a company address.", "not_nullable": false}, {"name": "code", "type": "companyAssignCustomerAsContact", "description": "Assigns the customer as a company contact.", "not_nullable": false}, {"name": "code", "type": "companyAssignMainContact", "description": "Assigns the main contact for the company.", "not_nullable": false}, {"name": "code", "type": "companyContactAssignRole", "description": "Assigns a role to a contact for a location.", "not_nullable": false}, {"name": "code", "type": "companyContactAssignRoles", "description": "Assigns roles on a company contact.", "not_nullable": false}, {"name": "code", "type": "companyContactCreate", "description": "Creates a company contact and the associated customer.", "not_nullable": false}, {"name": "code", "type": "companyContactDelete", "description": "Deletes a company contact.", "not_nullable": false}, {"name": "code", "type": "companyContactRemoveFromCompany", "description": "Removes a company contact from a Company.", "not_nullable": false}, {"name": "code", "type": "companyContactRevokeRole", "description": "Revokes a role on a company contact.", "not_nullable": false}, {"name": "code", "type": "companyContactRevokeRoles", "description": "Revokes roles on a company contact.", "not_nullable": false}, {"name": "code", "type": "companyContactsDelete", "description": "Deletes one or more company contacts.", "not_nullable": false}, {"name": "code", "type": "companyContactUpdate", "description": "Updates a company contact.", "not_nullable": false}, {"name": "code", "type": "companyCreate", "description": "Creates a company.", "not_nullable": false}, {"name": "code", "type": "companyDelete", "description": "Deletes a company.", "not_nullable": false}, {"name": "code", "type": "companyLocationAssignAddress", "description": "Updates an address on a company location.", "not_nullable": false}, {"name": "code", "type": "companyLocationAssignRoles", "description": "Assigns roles on a company location.", "not_nullable": false}, {"name": "code", "type": "companyLocationAssignStaffMembers", "description": "Creates one or more mappings between a staff member at a shop and a company location.", "not_nullable": false}, {"name": "code", "type": "companyLocationCreate", "description": "Creates a company location.", "not_nullable": false}, {"name": "code", "type": "companyLocationDelete", "description": "Deletes a company location.", "not_nullable": false}, {"name": "code", "type": "companyLocationRemoveStaffMembers", "description": "Deletes one or more existing mappings between a staff member at a shop and a company location.", "not_nullable": false}, {"name": "code", "type": "companyLocationRevokeRoles", "description": "Revokes roles on a company location.", "not_nullable": false}, {"name": "code", "type": "companyLocationsDelete", "description": "Deletes a list of company locations.", "not_nullable": false}, {"name": "code", "type": "companyLocationTaxSettingsUpdate", "description": "Sets the tax settings for a company location.", "not_nullable": false}, {"name": "code", "type": "companyLocationUpdate", "description": "Updates a company location.", "not_nullable": false}, {"name": "code", "type": "companyRevokeMainContact", "description": "Revokes the main contact from the company.", "not_nullable": false}, {"name": "code", "type": "companyUpdate", "description": "Updates a company.", "not_nullable": false}, {"name": "code", "type": "companyLocationAssignTaxExemptions", "description": "Assigns tax exemptions to the company location. Use companyLocationTaxSettingsUpdate instead.", "not_nullable": false}, {"name": "code", "type": "companyLocationCreateTaxRegistration", "description": "Creates a tax registration for a company location. Use companyLocationTaxSettingsUpdate instead.", "not_nullable": false}, {"name": "code", "type": "companyLocationRevokeTaxExemptions", "description": "Revokes tax exemptions from the company location. Use companyLocationTaxSettingsUpdate instead.", "not_nullable": false}, {"name": "code", "type": "companyLocationRevokeTaxRegistration", "description": "Revokes tax registration on a company location. Use companyLocationTaxSettingsUpdate instead.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "CalculatedDiscountApplicationEdge", "description": "An auto-generated type which holds one CalculatedDiscountApplication and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "CalculatedDiscountApplication!", "description": "The item at the end of CalculatedDiscountApplicationEdge.", "not_nullable": true}], "examples": []}, {"name": "CalculatedLineItemEdge", "description": "An auto-generated type which holds one CalculatedLineItem and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "CalculatedLineItem!", "description": "The item at the end of CalculatedLineItemEdge.", "not_nullable": true}], "examples": []}, {"name": "CarrierServiceCreateUserError", "description": "An error that occurs during the execution of CarrierServiceCreate.", "fields_and_connections": [{"name": "code", "type": "carrierServiceCreate", "description": "Creates a new carrier service.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "CarrierServiceDeleteUserError", "description": "An error that occurs during the execution of CarrierServiceDelete.", "fields_and_connections": [{"name": "code", "type": "carrierServiceDelete", "description": "Removes an existing carrier service.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "CarrierServiceUpdateUserError", "description": "An error that occurs during the execution of CarrierServiceUpdate.", "fields_and_connections": [{"name": "code", "type": "carrierServiceUpdate", "description": "Updates a carrier service. Only the app that creates a carrier service can update it.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "CartTransformCreateUserError", "description": "An error that occurs during the execution of CartTransformCreate.", "fields_and_connections": [{"name": "code", "type": "cartTransformCreate", "description": "Create a CartTransform function to the Shop.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "CartTransformDeleteUserError", "description": "An error that occurs during the execution of CartTransformDelete.", "fields_and_connections": [{"name": "code", "type": "cartTransformDelete", "description": "Destroy a cart transform function from the Shop.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "CartTransformEdge", "description": "An auto-generated type which holds one CartTransform and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "CartTransform!", "description": "The item at the end of CartTransformEdge.", "not_nullable": true}], "examples": []}, {"name": "CashTrackingAdjustmentEdge", "description": "An auto-generated type which holds one CashTrackingAdjustment and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "CashTrackingAdjustment!", "description": "The item at the end of CashTrackingAdjustmentEdge.", "not_nullable": true}], "examples": []}, {"name": "CashTrackingSessionEdge", "description": "An auto-generated type which holds one CashTrackingSession and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "CashTrackingSession!", "description": "The item at the end of CashTrackingSessionEdge.", "not_nullable": true}], "examples": []}, {"name": "CatalogEdge", "description": "An auto-generated type which holds one Catalog and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "Catalog!", "description": "The item at the end of CatalogEdge.", "not_nullable": true}], "examples": []}, {"name": "CatalogUserError", "description": "Defines errors encountered while managing a catalog.", "fields_and_connections": [{"name": "code", "type": "catalogContextUpdate", "description": "Updates the context of a catalog.", "not_nullable": false}, {"name": "code", "type": "catalogCreate", "description": "Creates a new catalog.", "not_nullable": false}, {"name": "code", "type": "catalogDelete", "description": "Delete a catalog.", "not_nullable": false}, {"name": "code", "type": "catalogUpdate", "description": "Updates an existing catalog.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "ChannelEdge", "description": "An auto-generated type which holds one Channel and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "Channel!", "description": "The item at the end of ChannelEdge.", "not_nullable": true}], "examples": []}, {"name": "CheckoutBrandingUpsertUserError", "description": "An error that occurs during the execution of CheckoutBrandingUpsert.", "fields_and_connections": [{"name": "code", "type": "checkoutBrandingUpsert", "description": "Updates the checkout branding settings for a\ncheckout profile.\nIf the settings don't exist, then new settings are created. The checkout branding settings applied to a\npublished checkout profile will be immediately visible within the store's checkout. The checkout branding\nsettings applied to a draft checkout profile could be previewed within the admin checkout editor.\nTo learn more about updating checkout branding settings, refer to the checkout branding\ntutorial.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "CheckoutProfileEdge", "description": "An auto-generated type which holds one CheckoutProfile and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "CheckoutProfile!", "description": "The item at the end of CheckoutProfileEdge.", "not_nullable": true}], "examples": []}, {"name": "CollectionAddProductsV2UserError", "description": "An error that occurs during the execution of CollectionAddProductsV2.", "fields_and_connections": [{"name": "code", "type": "collectionAddProductsV2", "description": "Asynchronously adds a set of products to a given collection. It can take a long time to run. Instead of returning a collection, it returns a job which should be polled.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "CollectionEdge", "description": "An auto-generated type which holds one Collection and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "Collection!", "description": "The item at the end of CollectionEdge.", "not_nullable": true}], "examples": []}, {"name": "CollectionPublicationEdge", "description": "An auto-generated type which holds one CollectionPublication and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "CollectionPublication!", "description": "The item at the end of CollectionPublicationEdge.", "not_nullable": true}], "examples": []}, {"name": "CombinedListingChildEdge", "description": "An auto-generated type which holds one CombinedListingChild and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "CombinedListingChild!", "description": "The item at the end of CombinedListingChildEdge.", "not_nullable": true}], "examples": []}, {"name": "CombinedListingUpdateUserError", "description": "An error that occurs during the execution of CombinedListingUpdate.", "fields_and_connections": [{"name": "code", "type": "combinedListingUpdate", "description": "Add, remove and update CombinedListings of a given Product.\nCombinedListings are comprised of multiple products to create a single listing. There are two kinds of products used in a CombinedListing:\n\nParent products\nChild products\n\nThe parent product is created with a productCreate with a CombinedListingRole of PARENT. Once created, you can associate child products with the parent product using this mutation. Parent products represent the idea of a product (e.g. Shoe).\nChild products represent a particular option value (or combination of option values) of a parent product. For instance, with your Shoe parent product, you may have several child products representing specific colors of the shoe (e.g. Shoe - Blue). You could also have child products representing more than a single option (e.g. Shoe - Blue/Canvas, Shoe - Blue/Leather, etc...).\nThe combined listing is the association of parent product to one or more child products.\nLearn more about Combined Listings.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "CommentApproveUserError", "description": "An error that occurs during the execution of CommentApprove.", "fields_and_connections": [{"name": "code", "type": "commentApprove", "description": "Approves a comment.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "CommentDeleteUserError", "description": "An error that occurs during the execution of CommentDelete.", "fields_and_connections": [{"name": "code", "type": "commentDelete", "description": "Deletes a comment.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "CommentEdge", "description": "An auto-generated type which holds one Comment and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "Comment!", "description": "The item at the end of CommentEdge.", "not_nullable": true}], "examples": []}, {"name": "CommentNotSpamUserError", "description": "An error that occurs during the execution of CommentNotSpam.", "fields_and_connections": [{"name": "code", "type": "commentNotSpam", "description": "Marks a comment as not spam.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "CommentSpamUserError", "description": "An error that occurs during the execution of CommentSpam.", "fields_and_connections": [{"name": "code", "type": "commentSpam", "description": "Marks a comment as spam.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "CompanyContactEdge", "description": "An auto-generated type which holds one CompanyContact and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "CompanyContact!", "description": "The item at the end of CompanyContactEdge.", "not_nullable": true}], "examples": []}, {"name": "CompanyContactRoleAssignmentEdge", "description": "An auto-generated type which holds one CompanyContactRoleAssignment and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "CompanyContactRoleAssignment!", "description": "The item at the end of CompanyContactRoleAssignmentEdge.", "not_nullable": true}], "examples": []}, {"name": "CompanyContactRoleEdge", "description": "An auto-generated type which holds one CompanyContactRole and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "CompanyContactRole!", "description": "The item at the end of CompanyContactRoleEdge.", "not_nullable": true}], "examples": []}, {"name": "CompanyEdge", "description": "An auto-generated type which holds one Company and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "Company!", "description": "The item at the end of CompanyEdge.", "not_nullable": true}], "examples": []}, {"name": "CompanyLocationEdge", "description": "An auto-generated type which holds one CompanyLocation and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "CompanyLocation!", "description": "The item at the end of CompanyLocationEdge.", "not_nullable": true}], "examples": []}, {"name": "CompanyLocationStaffMemberAssignmentEdge", "description": "An auto-generated type which holds one CompanyLocationStaffMemberAssignment and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "CompanyLocationStaffMemberAssignment!", "description": "The item at the end of CompanyLocationStaffMemberAssignmentEdge.", "not_nullable": true}], "examples": []}, {"name": "CountryHarmonizedSystemCodeEdge", "description": "An auto-generated type which holds one CountryHarmonizedSystemCode and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "CountryHarmonizedSystemCode!", "description": "The item at the end of CountryHarmonizedSystemCodeEdge.", "not_nullable": true}], "examples": []}, {"name": "CurrencySettingEdge", "description": "An auto-generated type which holds one CurrencySetting and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "CurrencySetting!", "description": "The item at the end of CurrencySettingEdge.", "not_nullable": true}], "examples": []}, {"name": "CustomerAccountPageEdge", "description": "An auto-generated type which holds one CustomerAccountPage and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "CustomerAccountPage!", "description": "The item at the end of CustomerAccountPageEdge.", "not_nullable": true}], "examples": []}, {"name": "CustomerCancelDataErasureUserError", "description": "An error that occurs when cancelling a customer data erasure request.", "fields_and_connections": [{"name": "code", "type": "customerCancelDataErasure", "description": "Cancels a pending erasure of a customer's data.\nTo request an erasure of a customer's data use the customerRequestDataErasure mutation.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "CustomerEdge", "description": "An auto-generated type which holds one Customer and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "Customer!", "description": "The item at the end of CustomerEdge.", "not_nullable": true}], "examples": []}, {"name": "CustomerEmailMarketingConsentUpdateUserError", "description": "An error that occurs during the execution of CustomerEmailMarketingConsentUpdate.", "fields_and_connections": [{"name": "code", "type": "customerEmailMarketingConsentUpdate", "description": "Update a customer's email marketing information information.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "CustomerMergeUserError", "description": "An error that occurs while merging two customers.", "fields_and_connections": [{"name": "code", "type": "customerMerge", "description": "Merges two customers.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "CustomerMomentEdge", "description": "An auto-generated type which holds one CustomerMoment and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "CustomerMoment!", "description": "The item at the end of CustomerMomentEdge.", "not_nullable": true}], "examples": []}, {"name": "CustomerPaymentMethodCreateFromDuplicationDataUserError", "description": "An error that occurs during the execution of CustomerPaymentMethodCreateFromDuplicationData.", "fields_and_connections": [{"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "CustomerPaymentMethodEdge", "description": "An auto-generated type which holds one CustomerPaymentMethod and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "CustomerPaymentMethod!", "description": "The item at the end of CustomerPaymentMethodEdge.", "not_nullable": true}], "examples": []}, {"name": "CustomerPaymentMethodGetDuplicationDataUserError", "description": "An error that occurs during the execution of CustomerPaymentMethodGetDuplicationData.", "fields_and_connections": [{"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "CustomerPaymentMethodGetUpdateUrlUserError", "description": "An error that occurs during the execution of CustomerPaymentMethodGetUpdateUrl.", "fields_and_connections": [{"name": "code", "type": "customerPaymentMethodGetUpdateUrl", "description": "Returns a URL that allows the customer to update a specific payment method.\nCurrently, customerPaymentMethodGetUpdateUrl only supports Shop Pay.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "CustomerPaymentMethodRemoteUserError", "description": "Represents an error in the input of a mutation.", "fields_and_connections": [{"name": "code", "type": "customerPaymentMethodRemoteCreate", "description": "Create a payment method from remote gateway identifiers. NOTE: This operation processes payment methods asynchronously. The returned payment method will initially have incomplete details. Developers must poll this payment method using customerPaymentMethod query until all payment method details are available, or the payment method is revoked (usually within seconds).", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "CustomerPaymentMethodUserError", "description": "Represents an error in the input of a mutation.", "fields_and_connections": [{"name": "code", "type": "customerPaymentMethodPaypalBillingAgreementCreate", "description": "Creates a PayPal billing agreement for a customer.", "not_nullable": false}, {"name": "code", "type": "customerPaymentMethodPaypalBillingAgreementUpdate", "description": "Updates a PayPal billing agreement for a customer.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "CustomerRequestDataErasureUserError", "description": "An error that occurs when requesting a customer data erasure.", "fields_and_connections": [{"name": "code", "type": "customerRequestDataErasure", "description": "Enqueues a request to erase customer's data. Read more here.\nTo cancel the data erasure request use the customerCancelDataErasure mutation.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "CustomerSegmentMemberEdge", "description": "An auto-generated type which holds one CustomerSegmentMember and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "CustomerSegmentMember!", "description": "The item at the end of CustomerSegmentMemberEdge.", "not_nullable": true}], "examples": []}, {"name": "CustomerSegmentMembersQueryUserError", "description": "Represents a customer segment members query custom error.", "fields_and_connections": [{"name": "code", "type": "customerSegmentMembersQueryCreate", "description": "Creates a customer segment members query.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "CustomerSendAccountInviteEmailUserError", "description": "Defines errors for customerSendAccountInviteEmail mutation.", "fields_and_connections": [{"name": "code", "type": "customerSendAccountInviteEmail", "description": "Sends the customer an account invite email.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "CustomerSetUserError", "description": "Defines errors for CustomerSet mutation.", "fields_and_connections": [{"name": "code", "type": "customerSet", "description": "Creates or updates a customer in a single mutation.\nUse this mutation when syncing information from an external data source into Shopify.\nThis mutation can be used to create a new customer, update an existing customer by id, or\nupsert a customer by a unique key (email or phone).\nTo create a new customer omit the identifier argument.\nTo update an existing customer, include the identifier with the id of the customer to update.\nTo perform an 'upsert' by unique key (email or phone)\nuse the identifier argument to upsert a customer by a unique key (email or phone). If a customer\nwith the specified unique key exists, it will be updated. If not, a new customer will be created with\nthat unique key.\nAs of API version 2022-10, apps using protected customer data must meet the\nprotected customer data requirements\nAny list field (e.g.\naddresses,\nwill be updated so that all included entries are either created or updated, and all existing entries not\nincluded will be deleted.\nAll other fields will be updated to the value passed. Omitted fields will not be updated.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "CustomerVisitProductInfoEdge", "description": "An auto-generated type which holds one CustomerVisitProductInfo and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "CustomerVisitProductInfo!", "description": "The item at the end of CustomerVisitProductInfoEdge.", "not_nullable": true}], "examples": []}, {"name": "DataSaleOptOutUserError", "description": "An error that occurs during the execution of DataSaleOptOut.", "fields_and_connections": [{"name": "code", "type": "dataSaleOptOut", "description": "Opt out a customer from data sale.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "DelegateAccessTokenCreateUserError", "description": "An error that occurs during the execution of DelegateAccessTokenCreate.", "fields_and_connections": [{"name": "code", "type": "delegateAccessTokenCreate", "description": "Creates a delegate access token.\nTo learn more about creating delegate access tokens, refer to\nDelegate OAuth access tokens to subsystems.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "DelegateAccessTokenDestroyUserError", "description": "An error that occurs during the execution of DelegateAccessTokenDestroy.", "fields_and_connections": [{"name": "code", "type": "delegateAccessTokenDestroy", "description": "Destroys a delegate access token.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "DeletionEventEdge", "description": "An auto-generated type which holds one DeletionEvent and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "DeletionEvent!", "description": "The item at the end of DeletionEventEdge.", "not_nullable": true}], "examples": []}, {"name": "DeliveryCarrierServiceEdge", "description": "An auto-generated type which holds one DeliveryCarrierService and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "DeliveryCarrierService!", "description": "The item at the end of DeliveryCarrierServiceEdge.", "not_nullable": true}], "examples": []}, {"name": "DeliveryCustomizationEdge", "description": "An auto-generated type which holds one DeliveryCustomization and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "DeliveryCustomization!", "description": "The item at the end of DeliveryCustomizationEdge.", "not_nullable": true}], "examples": []}, {"name": "DeliveryLocationGroupZoneEdge", "description": "An auto-generated type which holds one DeliveryLocationGroupZone and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "DeliveryLocationGroupZone!", "description": "The item at the end of DeliveryLocationGroupZoneEdge.", "not_nullable": true}], "examples": []}, {"name": "DeliveryMethodDefinitionEdge", "description": "An auto-generated type which holds one DeliveryMethodDefinition and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "DeliveryMethodDefinition!", "description": "The item at the end of DeliveryMethodDefinitionEdge.", "not_nullable": true}], "examples": []}, {"name": "DeliveryProfileEdge", "description": "An auto-generated type which holds one DeliveryProfile and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "DeliveryProfile!", "description": "The item at the end of DeliveryProfileEdge.", "not_nullable": true}], "examples": []}, {"name": "DeliveryProfileItemEdge", "description": "An auto-generated type which holds one DeliveryProfileItem and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "DeliveryProfileItem!", "description": "The item at the end of DeliveryProfileItemEdge.", "not_nullable": true}], "examples": []}, {"name": "DeliveryPromiseParticipantEdge", "description": "An auto-generated type which holds one DeliveryPromiseParticipant and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "DeliveryPromiseParticipant!", "description": "The item at the end of DeliveryPromiseParticipantEdge.", "not_nullable": true}], "examples": []}, {"name": "DeliveryPromiseProviderUpsertUserError", "description": "An error that occurs during the execution of DeliveryPromiseProviderUpsert.", "fields_and_connections": [{"name": "code", "type": "deliveryPromiseProviderUpsert", "description": "Creates or updates a delivery promise provider. Currently restricted to select approved delivery promise partners.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "DiscountAllocationEdge", "description": "An auto-generated type which holds one DiscountAllocation and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "DiscountAllocation!", "description": "The item at the end of DiscountAllocationEdge.", "not_nullable": true}], "examples": []}, {"name": "DiscountApplicationEdge", "description": "An auto-generated type which holds one DiscountApplication and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "DiscountApplication!", "description": "The item at the end of DiscountApplicationEdge.", "not_nullable": true}], "examples": []}, {"name": "DiscountAutomaticEdge", "description": "An auto-generated type which holds one DiscountAutomatic and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "DiscountAutomatic!", "description": "The item at the end of DiscountAutomaticEdge.", "not_nullable": true}], "examples": []}, {"name": "DiscountAutomaticNodeEdge", "description": "An auto-generated type which holds one DiscountAutomaticNode and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "DiscountAutomaticNode!", "description": "The item at the end of DiscountAutomaticNodeEdge.", "not_nullable": true}], "examples": []}, {"name": "DiscountCodeNodeEdge", "description": "An auto-generated type which holds one DiscountCodeNode and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "DiscountCodeNode!", "description": "The item at the end of DiscountCodeNodeEdge.", "not_nullable": true}], "examples": []}, {"name": "DiscountNodeEdge", "description": "An auto-generated type which holds one DiscountNode and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "DiscountNode!", "description": "The item at the end of DiscountNodeEdge.", "not_nullable": true}], "examples": []}, {"name": "DiscountRedeemCodeBulkCreationCodeEdge", "description": "An auto-generated type which holds one DiscountRedeemCodeBulkCreationCode and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "DiscountRedeemCodeBulkCreationCode!", "description": "The item at the end of DiscountRedeemCodeBulkCreationCodeEdge.", "not_nullable": true}], "examples": []}, {"name": "DiscountRedeemCodeEdge", "description": "An auto-generated type which holds one DiscountRedeemCode and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "DiscountRedeemCode!", "description": "The item at the end of DiscountRedeemCodeEdge.", "not_nullable": true}], "examples": []}, {"name": "DiscountUserError", "description": "An error that occurs during the execution of a discount mutation.", "fields_and_connections": [{"name": "code", "type": "discountAutomaticActivate", "description": "Activates an automatic discount.", "not_nullable": false}, {"name": "code", "type": "discountAutomaticAppCreate", "description": "Creates an automatic discount that's managed by an app.\nUse this mutation with Shopify Functions\nwhen you need advanced, custom, or dynamic discount capabilities that aren't supported by\nShopify's native discount types.\nFor example, use this mutation to create an automatic discount using an app's\n\"Volume\" discount type that applies a percentage\noff when customers purchase more than the minimum quantity of a product. For an example implementation,\nrefer to our tutorial.\nNoteTo create code discounts with custom logic, use the\ndiscountCodeAppCreate\nmutation.", "not_nullable": false}, {"name": "code", "type": "discountAutomaticAppUpdate", "description": "Updates an existing automatic discount that's managed by an app using\nShopify Functions.\nUse this mutation when you need advanced, custom, or\ndynamic discount capabilities that aren't supported by\nShopify's native discount types.\nFor example, use this mutation to update a new \"Volume\" discount type that applies a percentage\noff when customers purchase more than the minimum quantity of a product. For an example implementation,\nrefer to our tutorial.\nNoteTo update code discounts with custom logic, use the\ndiscountCodeAppUpdate\nmutation instead.", "not_nullable": false}, {"name": "code", "type": "discountAutomaticBasicCreate", "description": "Creates an\namount off discount\nthat's automatically applied on a cart and at checkout.\nNoteTo create code discounts, use the\ndiscountCodeBasicCreate\nmutation.", "not_nullable": false}, {"name": "code", "type": "discountAutomaticBasicUpdate", "description": "Updates an existing\namount off discount\nthat's automatically applied on a cart and at checkout.\nNoteTo update code discounts, use the\ndiscountCodeBasicUpdate\nmutation instead.", "not_nullable": false}, {"name": "code", "type": "discountAutomaticBulkDelete", "description": "Asynchronously delete automatic discounts in bulk if a search or saved_search_id argument is provided or if a\nmaximum discount threshold is reached (1,000). Otherwise, deletions will occur inline.\nWarning: All automatic discounts will be deleted if a blank search argument is provided.", "not_nullable": false}, {"name": "code", "type": "discountAutomaticBxgyCreate", "description": "Creates a\nbuy X get Y discount (BXGY)\nthat's automatically applied on a cart and at checkout.\nNoteTo create code discounts, use the\ndiscountCodeBxgyCreate\nmutation.", "not_nullable": false}, {"name": "code", "type": "discountAutomaticBxgyUpdate", "description": "Updates an existing\nbuy X get Y discount (BXGY)\nthat's automatically applied on a cart and at checkout.\nNoteTo update code discounts, use the\ndiscountCodeBxgyUpdate\nmutation instead.", "not_nullable": false}, {"name": "code", "type": "discountAutomaticDeactivate", "description": "Deactivates an automatic discount.", "not_nullable": false}, {"name": "code", "type": "discountAutomaticDelete", "description": "Deletes an\nautomatic discount.", "not_nullable": false}, {"name": "code", "type": "discountAutomaticFreeShippingCreate", "description": "Creates a\nfree shipping discount\nthat's automatically applied on a cart and at checkout.\nNoteTo create code discounts, use the\ndiscountCodeFreeShippingCreate\nmutation.", "not_nullable": false}, {"name": "code", "type": "discountAutomaticFreeShippingUpdate", "description": "Updates an existing\nfree shipping discount\nthat's automatically applied on a cart and at checkout.\nNoteTo update code discounts, use the\ndiscountCodeFreeShippingUpdate\nmutation instead.", "not_nullable": false}, {"name": "code", "type": "discountCodeActivate", "description": "Activates a code discount.", "not_nullable": false}, {"name": "code", "type": "discountCodeAppCreate", "description": "Creates a code discount. The discount type must be provided by an app extension that uses Shopify Functions. Functions can implement order, product, or shipping discount functions. Use this mutation with Shopify Functions when you need custom logic beyond Shopify's native discount types.\nFor example, use this mutation to create a code discount using an app's \"Volume\" discount type that applies a percentage off when customers purchase more than the minimum quantity\nof a product. For an example implementation, refer to our tutorial.\nNoteTo create automatic discounts with custom logic, use discountAutomaticAppCreate.", "not_nullable": false}, {"name": "code", "type": "discountCodeAppUpdate", "description": "Updates a code discount, where the discount type is provided by an app extension that uses Shopify Functions. Use this mutation when you need advanced, custom, or dynamic discount capabilities that aren't supported by Shopify's native discount types.\nNoteTo update automatic discounts, use discountAutomaticAppUpdate.", "not_nullable": false}, {"name": "code", "type": "discountCodeBasicCreate", "description": "Creates an amount off discount that's applied on a cart and at checkout when a customer enters a code. Amount off discounts can be a percentage off or a fixed amount off.\nNoteTo create discounts that are automatically applied on a cart and at checkout, use the discountAutomaticBasicCreate mutation.", "not_nullable": false}, {"name": "code", "type": "discountCodeBasicUpdate", "description": "Updates an amount off discount that's applied on a cart and at checkout when a customer enters a code. Amount off discounts can be a percentage off or a fixed amount off.\nNoteTo update discounts that are automatically applied on a cart and at checkout, use the discountAutomaticBasicUpdate mutation.", "not_nullable": false}, {"name": "code", "type": "discountCodeBulkActivate", "description": "Activates multiple code discounts asynchronously using one of the following:\n\nA search query\nA saved search ID\nA list of discount code IDs\n\nFor example, you can activate discounts for all codes that match a search criteria, or activate a predefined set of discount codes.", "not_nullable": false}, {"name": "code", "type": "discountCodeBulkDeactivate", "description": "Deactivates multiple code-based discounts asynchronously using one of the following:\n\nA search query\nA saved search ID\nA list of discount code IDs\n\nFor example, you can deactivate discounts for all codes that match a search criteria, or deactivate a predefined set of discount codes.", "not_nullable": false}, {"name": "code", "type": "discountCodeBulkDelete", "description": "Deletes multiple code-based discounts asynchronously using one of the following:\n\nA search query\nA saved search ID\nA list of discount code IDs\n\nFor example, you can delete discounts for all codes that match a search criteria, or delete a predefined set of discount codes.", "not_nullable": false}, {"name": "code", "type": "discountCodeBxgyCreate", "description": "Creates a\nbuy X get Y discount (BXGY)\nthat's applied on a cart and at checkout when a customer enters a code.\nNoteTo create discounts that are automatically applied on a cart and at checkout, use the\ndiscountAutomaticBxgyCreate\nmutation.", "not_nullable": false}, {"name": "code", "type": "discountCodeBxgyUpdate", "description": "Updates a\nbuy X get Y discount (BXGY)\nthat's applied on a cart and at checkout when a customer enters a code.\nNoteTo update discounts that are automatically applied on a cart and at checkout, use the\ndiscountAutomaticBxgyUpdate\nmutation.", "not_nullable": false}, {"name": "code", "type": "discountCodeDeactivate", "description": "Deactivates a code discount.", "not_nullable": false}, {"name": "code", "type": "discountCodeDelete", "description": "Deletes a\ncode discount.", "not_nullable": false}, {"name": "code", "type": "discountCodeFreeShippingCreate", "description": "Creates an free shipping discount that's applied on a cart and at checkout when a customer enters a code.\nNoteTo create discounts that are automatically applied on a cart and at checkout, use the discountAutomaticFreeShippingCreate mutation.", "not_nullable": false}, {"name": "code", "type": "discountCodeFreeShippingUpdate", "description": "Updates a free shipping discount that's applied on a cart and at checkout when a customer enters a code.\nNoteTo update a free shipping discount that's automatically applied on a cart and at checkout, use the discountAutomaticFreeShippingUpdate mutation.", "not_nullable": false}, {"name": "code", "type": "discountCodeRedeemCodeBulkDelete", "description": "Asynchronously delete\ndiscount codes\nin bulk that customers can use to redeem a discount.", "not_nullable": false}, {"name": "code", "type": "discountRedeemCodeBulkAdd", "description": "Asynchronously add\ndiscount codes\nin bulk that customers can use to redeem a discount. You can use the discountRedeemCodeBulkAdd mutation\nto automate the distribution of discount codes through emails or other\nmarketing channels.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "DisputeEvidenceUpdateUserError", "description": "An error that occurs during the execution of DisputeEvidenceUpdate.", "fields_and_connections": [{"name": "code", "type": "disputeEvidenceUpdate", "description": "Updates a dispute evidence.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "DraftOrderEdge", "description": "An auto-generated type which holds one DraftOrder and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "DraftOrder!", "description": "The item at the end of DraftOrderEdge.", "not_nullable": true}], "examples": []}, {"name": "DraftOrderLineItemEdge", "description": "An auto-generated type which holds one DraftOrderLineItem and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "DraftOrderLineItem!", "description": "The item at the end of DraftOrderLineItemEdge.", "not_nullable": true}], "examples": []}, {"name": "ErrorsServerPixelUserError", "description": "An error that occurs during the execution of a server pixel mutation.", "fields_and_connections": [{"name": "code", "type": "eventBridgeServerPixelUpdate", "description": "Updates the server pixel to connect to an EventBridge endpoint.\nRunning this mutation deletes any previous subscriptions for the server pixel.", "not_nullable": false}, {"name": "code", "type": "pubSubServerPixelUpdate", "description": "Updates the server pixel to connect to a Google PubSub endpoint.\nRunning this mutation deletes any previous subscriptions for the server pixel.", "not_nullable": false}, {"name": "code", "type": "serverPixelCreate", "description": "Creates a new unconfigured server pixel. A single server pixel can exist for an app and shop combination. If you call this mutation when a server pixel already exists, then an error will return.", "not_nullable": false}, {"name": "code", "type": "serverPixelDelete", "description": "Deletes the Server Pixel associated with the current app & shop.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "ErrorsWebPixelUserError", "description": "An error that occurs during the execution of a web pixel mutation.", "fields_and_connections": [{"name": "code", "type": "webPixelCreate", "description": "Activate a web pixel extension\nby creating a web pixel record on the store where you installed your app.\nWhen you run the webPixelCreate mutation, Shopify validates it\nagainst the settings definition in shopify.extension.toml. If the settings input field doesn't match\nthe schema that you defined, then the mutation fails. Learn how to\ndefine web pixel settings.", "not_nullable": false}, {"name": "code", "type": "webPixelDelete", "description": "Deletes the web pixel shop settings.", "not_nullable": false}, {"name": "code", "type": "webPixelUpdate", "description": "Activate a web pixel extension\nby updating a web pixel record on the store where you installed your app.\nWhen you run the webPixelUpdate mutation, Shopify validates it\nagainst the settings definition in shopify.extension.toml. If the settings input field doesn't match\nthe schema that you defined, then the mutation fails. Learn how to\ndefine web pixel settings.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "EventEdge", "description": "An auto-generated type which holds one Event and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "Event!", "description": "The item at the end of EventEdge.", "not_nullable": true}], "examples": []}, {"name": "ExchangeLineItemEdge", "description": "An auto-generated type which holds one ExchangeLineItem and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "ExchangeLineItem!", "description": "The item at the end of ExchangeLineItemEdge.", "not_nullable": true}], "examples": []}, {"name": "FileEdge", "description": "An auto-generated type which holds one File and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "File!", "description": "The item at the end of FileEdge.", "not_nullable": true}], "examples": []}, {"name": "FilesUserError", "description": "An error that happens during the execution of a Files API query or mutation.", "fields_and_connections": [{"name": "code", "type": "fileAcknowledgeUpdateFailed", "description": "Acknowledges file update failure by resetting FAILED status to READY and clearing any media errors.", "not_nullable": false}, {"name": "code", "type": "fileCreate", "description": "Creates file assets using an external URL or for files that were previously uploaded using the\nstagedUploadsCreate mutation.\nThese files are added to the Files page in Shopify admin.\nFiles are processed asynchronously. Some data is not available until processing is completed.\nCheck fileStatus\nto know when the files are READY or FAILED. See the FileStatus\nfor the complete set of possible fileStatus values.\nTo get a list of all files, use the files query.", "not_nullable": false}, {"name": "code", "type": "fileDelete", "description": "Deletes existing file assets that were uploaded to Shopify.", "not_nullable": false}, {"name": "code", "type": "fileUpdate", "description": "Updates an existing file asset that was uploaded to Shopify.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "FulfillmentConstraintRuleCreateUserError", "description": "An error that occurs during the execution of FulfillmentConstraintRuleCreate.", "fields_and_connections": [{"name": "code", "type": "fulfillmentConstraintRuleCreate", "description": "Creates a fulfillment constraint rule and its metafield.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "FulfillmentConstraintRuleDeleteUserError", "description": "An error that occurs during the execution of FulfillmentConstraintRuleDelete.", "fields_and_connections": [{"name": "code", "type": "fulfillmentConstraintRuleDelete", "description": "Deletes a fulfillment constraint rule and its metafields.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "FulfillmentConstraintRuleUpdateUserError", "description": "An error that occurs during the execution of FulfillmentConstraintRuleUpdate.", "fields_and_connections": [{"name": "code", "type": "fulfillmentConstraintRuleUpdate", "description": "Update a fulfillment constraint rule.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "FulfillmentEdge", "description": "An auto-generated type which holds one Fulfillment and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "Fulfillment!", "description": "The item at the end of FulfillmentEdge.", "not_nullable": true}], "examples": []}, {"name": "FulfillmentEventEdge", "description": "An auto-generated type which holds one FulfillmentEvent and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "FulfillmentEvent!", "description": "The item at the end of FulfillmentEventEdge.", "not_nullable": true}], "examples": []}, {"name": "FulfillmentLineItemEdge", "description": "An auto-generated type which holds one FulfillmentLineItem and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "FulfillmentLineItem!", "description": "The item at the end of FulfillmentLineItemEdge.", "not_nullable": true}], "examples": []}, {"name": "FulfillmentOrderEdge", "description": "An auto-generated type which holds one FulfillmentOrder and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "FulfillmentOrder!", "description": "The item at the end of FulfillmentOrderEdge.", "not_nullable": true}], "examples": []}, {"name": "FulfillmentOrderHoldUserError", "description": "An error that occurs during the execution of FulfillmentOrderHold.", "fields_and_connections": [{"name": "code", "type": "fulfillmentOrderHold", "description": "Applies a fulfillment hold on a fulfillment order.\nAs of the\n2025-01 API version,\nthe mutation can be successfully executed on fulfillment orders that are already on hold.\nTo place multiple holds on a fulfillment order, apps need to supply the\nhandle\nfield. Each app can place up to\n10 active holds\nper fulfillment order. If an app attempts to place more than this, the mutation will return\na user error indicating that the limit has been reached.\nThe app would need to release one of its existing holds before being able to apply a new one.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "FulfillmentOrderLineItemEdge", "description": "An auto-generated type which holds one FulfillmentOrderLineItem and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "FulfillmentOrderLineItem!", "description": "The item at the end of FulfillmentOrderLineItemEdge.", "not_nullable": true}], "examples": []}, {"name": "FulfillmentOrderLineItemsPreparedForPickupUserError", "description": "An error that occurs during the execution of FulfillmentOrderLineItemsPreparedForPickup.", "fields_and_connections": [{"name": "code", "type": "fulfillmentOrderLineItemsPreparedForPickup", "description": "Mark line items associated with a fulfillment order as being ready for pickup by a customer.\nSends a Ready For Pickup notification to the customer to let them know that their order is ready\nto be picked up.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "FulfillmentOrderLocationForMoveEdge", "description": "An auto-generated type which holds one FulfillmentOrderLocationForMove and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "FulfillmentOrderLocationForMove!", "description": "The item at the end of FulfillmentOrderLocationForMoveEdge.", "not_nullable": true}], "examples": []}, {"name": "FulfillmentOrderMerchantRequestEdge", "description": "An auto-generated type which holds one FulfillmentOrderMerchantRequest and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "FulfillmentOrderMerchantRequest!", "description": "The item at the end of FulfillmentOrderMerchantRequestEdge.", "not_nullable": true}], "examples": []}, {"name": "FulfillmentOrderMergeUserError", "description": "An error that occurs during the execution of FulfillmentOrderMerge.", "fields_and_connections": [{"name": "code", "type": "fulfillmentOrderMerge", "description": "Merges a set or multiple sets of fulfillment orders together into one based on\nline item inputs and quantities.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "FulfillmentOrderReleaseHoldUserError", "description": "An error that occurs during the execution of FulfillmentOrderReleaseHold.", "fields_and_connections": [{"name": "code", "type": "fulfillmentOrderReleaseHold", "description": "Releases the fulfillment hold on a fulfillment order.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "FulfillmentOrderRescheduleUserError", "description": "An error that occurs during the execution of FulfillmentOrderReschedule.", "fields_and_connections": [{"name": "code", "type": "fulfillmentOrderReschedule", "description": "Reschedules a scheduled fulfillment order.\nUpdates the value of the fulfillAt field on a scheduled fulfillment order.\nThe fulfillment order will be marked as ready for fulfillment at this date and time.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "FulfillmentOrderSplitUserError", "description": "An error that occurs during the execution of FulfillmentOrderSplit.", "fields_and_connections": [{"name": "code", "type": "fulfillmentOrderSplit", "description": "Splits a fulfillment order or orders based on line item inputs and quantities.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "FulfillmentOrdersSetFulfillmentDeadlineUserError", "description": "An error that occurs during the execution of FulfillmentOrdersSetFulfillmentDeadline.", "fields_and_connections": [{"name": "code", "type": "fulfillmentOrdersSetFulfillmentDeadline", "description": "Sets the latest date and time by which the fulfillment orders need to be fulfilled.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "GiftCardDeactivateUserError", "description": "An error that occurs during the execution of GiftCardDeactivate.", "fields_and_connections": [{"name": "code", "type": "giftCardDeactivate", "description": "Deactivate a gift card. A deactivated gift card cannot be used by a customer.\nA deactivated gift card cannot be re-enabled.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "GiftCardEdge", "description": "An auto-generated type which holds one GiftCard and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "GiftCard!", "description": "The item at the end of GiftCardEdge.", "not_nullable": true}], "examples": []}, {"name": "GiftCardSendNotificationToCustomerUserError", "description": "An error that occurs during the execution of GiftCardSendNotificationToCustomer.", "fields_and_connections": [{"name": "code", "type": "giftCardSendNotificationToCustomer", "description": "Send notification to the customer of a gift card.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "GiftCardSendNotificationToRecipientUserError", "description": "An error that occurs during the execution of GiftCardSendNotificationToRecipient.", "fields_and_connections": [{"name": "code", "type": "giftCardSendNotificationToRecipient", "description": "Send notification to the recipient of a gift card.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "GiftCardTransactionEdge", "description": "An auto-generated type which holds one GiftCardTransaction and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "GiftCardTransaction!", "description": "The item at the end of GiftCardTransactionEdge.", "not_nullable": true}], "examples": []}, {"name": "GiftCardTransactionUserError", "description": "Represents an error that happens during the execution of a gift card transaction mutation.", "fields_and_connections": [{"name": "code", "type": "giftCardCredit", "description": "Credit a gift card.", "not_nullable": false}, {"name": "code", "type": "giftCardDebit", "description": "Debit a gift card.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "GiftCardUserError", "description": "Represents an error that happens during the execution of a gift card mutation.", "fields_and_connections": [{"name": "code", "type": "giftCardCreate", "description": "Create a gift card.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "ImageEdge", "description": "An auto-generated type which holds one Image and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "Image!", "description": "The item at the end of ImageEdge.", "not_nullable": true}], "examples": []}, {"name": "InventoryAdjustQuantitiesUserError", "description": "An error that occurs during the execution of InventoryAdjustQuantities.", "fields_and_connections": [{"name": "code", "type": "inventoryAdjustQuantities", "description": "Apply changes to inventory quantities.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "InventoryBulkToggleActivationUserError", "description": "An error that occurred while setting the activation status of an inventory item.", "fields_and_connections": [{"name": "code", "type": "inventoryBulkToggleActivation", "description": "Modify the activation status of an inventory item at locations. Activating an inventory item at a particular location allows that location to stock that inventory item. Deactivating an inventory item at a location removes the inventory item's quantities and turns off the inventory item from that location.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "InventoryItemEdge", "description": "An auto-generated type which holds one InventoryItem and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "InventoryItem!", "description": "The item at the end of InventoryItemEdge.", "not_nullable": true}], "examples": []}, {"name": "InventoryLevelEdge", "description": "An auto-generated type which holds one InventoryLevel and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "InventoryLevel!", "description": "The item at the end of InventoryLevelEdge.", "not_nullable": true}], "examples": []}, {"name": "InventoryMoveQuantitiesUserError", "description": "An error that occurs during the execution of InventoryMoveQuantities.", "fields_and_connections": [{"name": "code", "type": "inventoryMoveQuantities", "description": "Moves inventory between inventory quantity names at a single location.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "InventoryScheduledChangeEdge", "description": "An auto-generated type which holds one InventoryScheduledChange and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "InventoryScheduledChange!", "description": "The item at the end of InventoryScheduledChangeEdge.", "not_nullable": true}], "examples": []}, {"name": "InventorySetOnHandQuantitiesUserError", "description": "An error that occurs during the execution of InventorySetOnHandQuantities.", "fields_and_connections": [{"name": "code", "type": "inventorySetOnHandQuantities", "description": "Set inventory on-hand quantities using absolute values. Use inventorySetQuantities to set on_hand or available quantites instead.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "InventorySetQuantitiesUserError", "description": "An error that occurs during the execution of InventorySetQuantities.", "fields_and_connections": [{"name": "code", "type": "inventorySetQuantities", "description": "Set quantities of specified name using absolute values. This mutation supports compare-and-set functionality to handle\nconcurrent requests properly. If ignoreCompareQuantity is not set to true,\nthe mutation will only update the quantity if the persisted quantity matches the compareQuantity value.\nIf the compareQuantity value does not match the persisted value, the mutation will return an error. In order to opt out\nof the compareQuantity check, the ignoreCompareQuantity argument can be set to true.\nNoteOnly use this mutation if calling on behalf of a system that acts as the source of truth for inventory quantities,\notherwise please consider using the inventoryAdjustQuantities mutation.\nOpting out of the compareQuantity check can lead to inaccurate inventory quantities if multiple requests are made concurrently.\nIt is recommended to always include the compareQuantity value to ensure the accuracy of the inventory quantities and to opt out\nof the check using ignoreCompareQuantity only when necessary.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "InventorySetScheduledChangesUserError", "description": "An error that occurs during the execution of InventorySetScheduledChanges.", "fields_and_connections": [{"name": "code", "type": "inventorySetScheduledChanges", "description": "Set up scheduled changes of inventory items.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "LineItemEdge", "description": "An auto-generated type which holds one LineItem and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "LineItem!", "description": "The item at the end of LineItemEdge.", "not_nullable": true}], "examples": []}, {"name": "LocalizationExtensionEdge", "description": "An auto-generated type which holds one LocalizationExtension and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "LocalizationExtension!", "description": "The item at the end of LocalizationExtensionEdge.", "not_nullable": true}], "examples": []}, {"name": "LocalizedFieldEdge", "description": "An auto-generated type which holds one LocalizedField and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "LocalizedField!", "description": "The item at the end of LocalizedFieldEdge.", "not_nullable": true}], "examples": []}, {"name": "LocationActivateUserError", "description": "An error that occurs while activating a location.", "fields_and_connections": [{"name": "code", "type": "locationActivate", "description": "Activates a location so that you can stock inventory at the location. Refer to the\nisActive and\nactivatable\nfields on the Location object.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "LocationAddUserError", "description": "An error that occurs while adding a location.", "fields_and_connections": [{"name": "code", "type": "locationAdd", "description": "Adds a new location.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "LocationDeactivateUserError", "description": "The possible errors that can be returned when executing the locationDeactivate mutation.", "fields_and_connections": [{"name": "code", "type": "locationDeactivate", "description": "Deactivates a location and moves inventory, pending orders, and moving transfers to a destination location.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "LocationDeleteUserError", "description": "An error that occurs while deleting a location.", "fields_and_connections": [{"name": "code", "type": "locationDelete", "description": "Deletes a location.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "LocationEdge", "description": "An auto-generated type which holds one Location and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "Location!", "description": "The item at the end of LocationEdge.", "not_nullable": true}], "examples": []}, {"name": "LocationEditUserError", "description": "An error that occurs while editing a location.", "fields_and_connections": [{"name": "code", "type": "locationEdit", "description": "Edits an existing location.\nAs of the 2023-10 API version, apps can change the name and address of their fulfillment service locations.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "MailingAddressEdge", "description": "An auto-generated type which holds one MailingAddress and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "MailingAddress!", "description": "The item at the end of MailingAddressEdge.", "not_nullable": true}], "examples": []}, {"name": "MarketCatalogEdge", "description": "An auto-generated type which holds one MarketCatalog and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "MarketCatalog!", "description": "The item at the end of MarketCatalogEdge.", "not_nullable": true}], "examples": []}, {"name": "MarketCurrencySettingsUserError", "description": "Error codes for failed market multi-currency operations.", "fields_and_connections": [{"name": "code", "type": "marketCurrencySettingsUpdate", "description": "Updates currency settings of a market.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "MarketEdge", "description": "An auto-generated type which holds one Market and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "Market!", "description": "The item at the end of MarketEdge.", "not_nullable": true}], "examples": []}, {"name": "MarketingActivityEdge", "description": "An auto-generated type which holds one MarketingActivity and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "MarketingActivity!", "description": "The item at the end of MarketingActivityEdge.", "not_nullable": true}], "examples": []}, {"name": "MarketingActivityUserError", "description": "An error that occurs during the execution of marketing activity and engagement mutations.", "fields_and_connections": [{"name": "code", "type": "marketingActivitiesDeleteAllExternal", "description": "Deletes all external marketing activities. Deletion is performed by a background job, as it may take a bit of time to complete if a large number of activities are to be deleted. Attempting to create or modify external activities before the job has completed will result in the create/update/upsert mutation returning an error.", "not_nullable": false}, {"name": "code", "type": "marketingActivityCreateExternal", "description": "Creates a new external marketing activity.", "not_nullable": false}, {"name": "code", "type": "marketingActivityDeleteExternal", "description": "Deletes an external marketing activity.", "not_nullable": false}, {"name": "code", "type": "marketingActivityUpdateExternal", "description": "Update an external marketing activity.", "not_nullable": false}, {"name": "code", "type": "marketingActivityUpsertExternal", "description": "Creates a new external marketing activity or updates an existing one. When optional fields are absent or null, associated information will be removed from an existing marketing activity.", "not_nullable": false}, {"name": "code", "type": "marketingEngagementCreate", "description": "Creates a new marketing engagement for a marketing activity or a marketing channel.", "not_nullable": false}, {"name": "code", "type": "marketingEngagementsDelete", "description": "Marks channel-level engagement data such that it no longer appears in reports.\nActivity-level data cannot be deleted directly, instead the MarketingActivity itself should be deleted to\nhide it from reports.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "MarketingEventEdge", "description": "An auto-generated type which holds one MarketingEvent and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "MarketingEvent!", "description": "The item at the end of MarketingEventEdge.", "not_nullable": true}], "examples": []}, {"name": "MarketLocalizableResourceEdge", "description": "An auto-generated type which holds one MarketLocalizableResource and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "MarketLocalizableResource!", "description": "The item at the end of MarketLocalizableResourceEdge.", "not_nullable": true}], "examples": []}, {"name": "MarketRegionEdge", "description": "An auto-generated type which holds one MarketRegion and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "MarketRegion!", "description": "The item at the end of MarketRegionEdge.", "not_nullable": true}], "examples": []}, {"name": "MarketUserError", "description": "Defines errors encountered while managing a Market.", "fields_and_connections": [{"name": "code", "type": "backupRegionUpdate", "description": "Update the backup region that is used when we have no better signal of what region a buyer is in.", "not_nullable": false}, {"name": "code", "type": "marketCreate", "description": "Creates a new market.", "not_nullable": false}, {"name": "code", "type": "marketDelete", "description": "Deletes a market definition.", "not_nullable": false}, {"name": "code", "type": "marketUpdate", "description": "Updates the properties of a market.", "not_nullable": false}, {"name": "code", "type": "webPresenceCreate", "description": "Creates a web presence.", "not_nullable": false}, {"name": "code", "type": "webPresenceDelete", "description": "Deletes a web presence.", "not_nullable": false}, {"name": "code", "type": "webPresenceUpdate", "description": "Updates a web presence.", "not_nullable": false}, {"name": "code", "type": "marketRegionDelete", "description": "Deletes a market region. Use marketUpdate instead.", "not_nullable": false}, {"name": "code", "type": "marketRegionsCreate", "description": "Creates regions that belong to an existing market. This mutation is deprecated and will be removed in the future. Use marketCreate or marketUpdate instead.", "not_nullable": false}, {"name": "code", "type": "marketRegionsDelete", "description": "Deletes a list of market regions. Use marketUpdate instead.", "not_nullable": false}, {"name": "code", "type": "marketWebPresenceCreate", "description": "Creates a web presence for a market. Use webPresenceCreate instead.", "not_nullable": false}, {"name": "code", "type": "marketWebPresenceDelete", "description": "Deletes a market web presence. Use webPresenceDelete instead.", "not_nullable": false}, {"name": "code", "type": "marketWebPresenceUpdate", "description": "Updates a market web presence. Use webPresenceUpdate instead.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "MarketWebPresenceEdge", "description": "An auto-generated type which holds one MarketWebPresence and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "MarketWebPresence!", "description": "The item at the end of MarketWebPresenceEdge.", "not_nullable": true}], "examples": []}, {"name": "MediaEdge", "description": "An auto-generated type which holds one Media and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "Media!", "description": "The item at the end of MediaEdge.", "not_nullable": true}], "examples": []}, {"name": "MediaUserError", "description": "Represents an error that happens during execution of a Media query or mutation.", "fields_and_connections": [{"name": "code", "type": "productReorderMedia", "description": "Asynchronously reorders the media attached to a product.", "not_nullable": false}, {"name": "code", "type": "productVariantAppendMedia", "description": "Appends media from a product to variants of the product.", "not_nullable": false}, {"name": "code", "type": "productVariantDetachMedia", "description": "Detaches media from product variants.", "not_nullable": false}, {"name": "code", "type": "productCreateMedia", "description": "Creates media for a product. Use productUpdate or productSet instead.", "not_nullable": false}, {"name": "code", "type": "productDeleteMedia", "description": "Deletes media for a product. Use fileUpdate instead.", "not_nullable": false}, {"name": "code", "type": "productUpdateMedia", "description": "Updates media for a product. Use fileUpdate instead.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "MenuCreateUserError", "description": "An error that occurs during the execution of MenuCreate.", "fields_and_connections": [{"name": "code", "type": "menuCreate", "description": "Creates a menu.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "MenuDeleteUserError", "description": "An error that occurs during the execution of MenuDelete.", "fields_and_connections": [{"name": "code", "type": "menuDelete", "description": "Deletes a menu.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "MenuEdge", "description": "An auto-generated type which holds one Menu and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "Menu!", "description": "The item at the end of MenuEdge.", "not_nullable": true}], "examples": []}, {"name": "MenuUpdateUserError", "description": "An error that occurs during the execution of MenuUpdate.", "fields_and_connections": [{"name": "code", "type": "menuUpdate", "description": "Updates a menu.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "MetafieldDefinitionConstraintValueEdge", "description": "An auto-generated type which holds one MetafieldDefinitionConstraintValue and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "MetafieldDefinitionConstraintValue!", "description": "The item at the end of MetafieldDefinitionConstraintValueEdge.", "not_nullable": true}], "examples": []}, {"name": "MetafieldDefinitionCreateUserError", "description": "An error that occurs during the execution of MetafieldDefinitionCreate.", "fields_and_connections": [{"name": "code", "type": "metafieldDefinitionCreate", "description": "Creates a metafield definition. Any metafields existing under the same owner type, namespace, and key will be\nchecked against this definition and will have their type updated accordingly. For metafields that are not\nvalid, they will remain unchanged but any attempts to update them must align with this definition.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "MetafieldDefinitionDeleteUserError", "description": "An error that occurs during the execution of MetafieldDefinitionDelete.", "fields_and_connections": [{"name": "code", "type": "metafieldDefinitionDelete", "description": "Delete a metafield definition.\nOptionally deletes all associated metafields asynchronously when specified.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "MetafieldDefinitionEdge", "description": "An auto-generated type which holds one MetafieldDefinition and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "MetafieldDefinition!", "description": "The item at the end of MetafieldDefinitionEdge.", "not_nullable": true}], "examples": []}, {"name": "MetafieldDefinitionPinUserError", "description": "An error that occurs during the execution of MetafieldDefinitionPin.", "fields_and_connections": [{"name": "code", "type": "metafieldDefinitionPin", "description": "You can organize your metafields in your Shopify admin by pinning/unpinning metafield definitions.\nThe order of your pinned metafield definitions determines the order in which your metafields are displayed\non the corresponding pages in your Shopify admin. By default, only pinned metafields are automatically displayed.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "MetafieldDefinitionUnpinUserError", "description": "An error that occurs during the execution of MetafieldDefinitionUnpin.", "fields_and_connections": [{"name": "code", "type": "metafieldDefinitionUnpin", "description": "You can organize your metafields in your Shopify admin by pinning/unpinning metafield definitions.\nThe order of your pinned metafield definitions determines the order in which your metafields are displayed\non the corresponding pages in your Shopify admin. By default, only pinned metafields are automatically displayed.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "MetafieldDefinitionUpdateUserError", "description": "An error that occurs during the execution of MetafieldDefinitionUpdate.", "fields_and_connections": [{"name": "code", "type": "metafieldDefinitionUpdate", "description": "Updates a metafield definition.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "MetafieldEdge", "description": "An auto-generated type which holds one Metafield and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "Metafield!", "description": "The item at the end of MetafieldEdge.", "not_nullable": true}], "examples": []}, {"name": "MetafieldReferenceEdge", "description": "An auto-generated type which holds one MetafieldReference and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "MetafieldReference", "description": "The item at the end of MetafieldReferenceEdge.", "not_nullable": false}], "examples": []}, {"name": "MetafieldRelationEdge", "description": "An auto-generated type which holds one MetafieldRelation and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "MetafieldRelation!", "description": "The item at the end of MetafieldRelationEdge.", "not_nullable": true}], "examples": []}, {"name": "MetafieldsSetUserError", "description": "An error that occurs during the execution of MetafieldsSet.", "fields_and_connections": [{"name": "code", "type": "metafieldsSet", "description": "Sets metafield values. Metafield values will be set regardless if they were previously created or not.\nAllows a maximum of 25 metafields to be set at a time.\nThis operation is atomic, meaning no changes are persisted if an error is encountered.\nAs of 2024-07, this operation supports compare-and-set functionality to better handle concurrent requests.\nIf compareDigest is set for any metafield, the mutation will only set that metafield if the persisted metafield value matches the digest used on compareDigest.\nIf the metafield doesn't exist yet, but you want to guarantee that the operation will run in a safe manner, set compareDigest to null.\nThe compareDigest value can be acquired by querying the metafield object and selecting compareDigest as a field.\nIf the compareDigest value does not match the digest for the persisted value, the mutation will return an error.\nYou can opt out of write guarantees by not sending compareDigest in the request.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "MetaobjectDefinitionEdge", "description": "An auto-generated type which holds one MetaobjectDefinition and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "MetaobjectDefinition!", "description": "The item at the end of MetaobjectDefinitionEdge.", "not_nullable": true}], "examples": []}, {"name": "MetaobjectEdge", "description": "An auto-generated type which holds one Metaobject and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "Metaobject!", "description": "The item at the end of MetaobjectEdge.", "not_nullable": true}], "examples": []}, {"name": "MetaobjectUserError", "description": "Defines errors encountered while managing metaobject resources.", "fields_and_connections": [{"name": "code", "type": "metaobjectBulkDelete", "description": "Asynchronously delete metaobjects and their associated metafields in bulk.", "not_nullable": false}, {"name": "code", "type": "metaobjectCreate", "description": "Creates a new metaobject.", "not_nullable": false}, {"name": "code", "type": "metaobjectDefinitionCreate", "description": "Creates a new metaobject definition.", "not_nullable": false}, {"name": "code", "type": "metaobjectDefinitionDelete", "description": "Deletes the specified metaobject definition.\nAlso deletes all related metafield definitions, metaobjects, and metafields asynchronously.", "not_nullable": false}, {"name": "code", "type": "metaobjectDefinitionUpdate", "description": "Updates a metaobject definition with new settings and metafield definitions.", "not_nullable": false}, {"name": "code", "type": "metaobjectDelete", "description": "Deletes the specified metaobject and its associated metafields.", "not_nullable": false}, {"name": "code", "type": "metaobjectUpdate", "description": "Updates an existing metaobject.", "not_nullable": false}, {"name": "code", "type": "metaobjectUpsert", "description": "Retrieves a metaobject by handle, then updates it with the provided input values.\nIf no matching metaobject is found, a new metaobject is created with the provided input values.", "not_nullable": false}, {"name": "code", "type": "standardMetaobjectDefinitionEnable", "description": "Enables the specified standard metaobject definition from its template.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "MobilePlatformApplicationEdge", "description": "An auto-generated type which holds one MobilePlatformApplication and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "MobilePlatformApplication!", "description": "The item at the end of MobilePlatformApplicationEdge.", "not_nullable": true}], "examples": []}, {"name": "MobilePlatformApplicationUserError", "description": "Represents an error in the input of a mutation.", "fields_and_connections": [{"name": "code", "type": "mobilePlatformApplicationCreate", "description": "Create a mobile platform application.", "not_nullable": false}, {"name": "code", "type": "mobilePlatformApplicationDelete", "description": "Delete a mobile platform application.", "not_nullable": false}, {"name": "code", "type": "mobilePlatformApplicationUpdate", "description": "Update a mobile platform application.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "OnlineStoreThemeEdge", "description": "An auto-generated type which holds one OnlineStoreTheme and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "OnlineStoreTheme!", "description": "The item at the end of OnlineStoreThemeEdge.", "not_nullable": true}], "examples": []}, {"name": "OnlineStoreThemeFileEdge", "description": "An auto-generated type which holds one OnlineStoreThemeFile and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "OnlineStoreThemeFile!", "description": "The item at the end of OnlineStoreThemeFileEdge.", "not_nullable": true}], "examples": []}, {"name": "OrderAdjustmentEdge", "description": "An auto-generated type which holds one OrderAdjustment and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "OrderAdjustment!", "description": "The item at the end of OrderAdjustmentEdge.", "not_nullable": true}], "examples": []}, {"name": "OrderCancelUserError", "description": "Errors related to order cancellation.", "fields_and_connections": [{"name": "code", "type": "orderCancel", "description": "Cancels an order.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "OrderCreateMandatePaymentUserError", "description": "An error that occurs during the execution of OrderCreateMandatePayment.", "fields_and_connections": [{"name": "code", "type": "orderCreateMandatePayment", "description": "Creates a payment for an order by mandate.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "OrderCreateUserError", "description": "An error that occurs during the execution of OrderCreate.", "fields_and_connections": [{"name": "code", "type": "orderCreate", "description": "Creates an order with attributes such as customer information, line items, and shipping and billing addresses.\nUse the orderCreate mutation to programmatically generate orders in scenarios where\norders aren't created through the standard checkout process, such as when importing orders from an external\nsystem or creating orders for wholesale customers.\nThe orderCreate mutation doesn't support applying multiple discounts, such as discounts on line items.\nAutomatic discounts won't be applied unless you replicate the logic of those discounts in your custom\nimplementation. You can apply a discount code,\nbut only one discount code can be set for each order.\nNoteIf you're using the orderCreate mutation with a\ntrial or\ndevelopment store, then you can create a\nmaximum of five new orders per minute.After you create an order, you can make subsequent edits to the order using one of the following mutations:\n\norderUpdate:\nUsed for simple updates to an order, such as changing the order's note, tags, or customer information.\norderEditBegin:\nUsed when you need to make significant updates to an order, such as adding or removing line items, changing\nquantities, or modifying discounts. The orderEditBegin mutation initiates an order editing session,\nallowing you to make multiple changes before finalizing them. Learn more about using the orderEditBegin\nmutation to edit existing orders.\n\nLearn how to build apps that integrate with\norder management and fulfillment processes.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "OrderDeleteUserError", "description": "Errors related to deleting an order.", "fields_and_connections": [{"name": "code", "type": "orderDelete", "description": "Deletes an order. For more information on which orders can be deleted, refer to Delete an order.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "OrderEdge", "description": "An auto-generated type which holds one Order and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "Order!", "description": "The item at the end of OrderEdge.", "not_nullable": true}], "examples": []}, {"name": "OrderEditAddShippingLineUserError", "description": "An error that occurs during the execution of OrderEditAddShippingLine.", "fields_and_connections": [{"name": "code", "type": "orderEditAddShippingLine", "description": "Adds a shipping line to an existing order. For more information on how to use the GraphQL Admin API to edit an existing order, refer to Edit existing orders.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "OrderEditRemoveDiscountUserError", "description": "An error that occurs during the execution of OrderEditRemoveDiscount.", "fields_and_connections": [{"name": "code", "type": "orderEditRemoveDiscount", "description": "Removes a discount on the current order edit. For more information on how to use the GraphQL Admin API to edit an existing order, refer to Edit existing orders.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "OrderEditRemoveShippingLineUserError", "description": "An error that occurs during the execution of OrderEditRemoveShippingLine.", "fields_and_connections": [{"name": "code", "type": "orderEditRemoveShippingLine", "description": "Removes a shipping line from an existing order. For more information on how to use the GraphQL Admin API to edit an existing order, refer to Edit existing orders.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "OrderEditUpdateDiscountUserError", "description": "An error that occurs during the execution of OrderEditUpdateDiscount.", "fields_and_connections": [{"name": "code", "type": "orderEditUpdateDiscount", "description": "Updates a manual line level discount on the current order edit. For more information on how to use the GraphQL Admin API to edit an existing order, refer to Edit existing orders.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "OrderEditUpdateShippingLineUserError", "description": "An error that occurs during the execution of OrderEditUpdateShippingLine.", "fields_and_connections": [{"name": "code", "type": "orderEditUpdateShippingLine", "description": "Updates a shipping line on the current order edit. For more information on how to use the GraphQL Admin API to edit an existing order, refer to Edit existing orders.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "OrderInvoiceSendUserError", "description": "An error that occurs during the execution of OrderInvoiceSend.", "fields_and_connections": [{"name": "code", "type": "orderInvoiceSend", "description": "Sends an email invoice for an order.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "OrderRiskAssessmentCreateUserError", "description": "An error that occurs during the execution of OrderRiskAssessmentCreate.", "fields_and_connections": [{"name": "code", "type": "orderRiskAssessmentCreate", "description": "Create a risk assessment for an order.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "OrderStagedChangeEdge", "description": "An auto-generated type which holds one OrderStagedChange and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "OrderStagedChange!", "description": "The item at the end of OrderStagedChangeEdge.", "not_nullable": true}], "examples": []}, {"name": "OrderTransactionEdge", "description": "An auto-generated type which holds one OrderTransaction and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "OrderTransaction!", "description": "The item at the end of OrderTransactionEdge.", "not_nullable": true}], "examples": []}, {"name": "PageCreateUserError", "description": "An error that occurs during the execution of PageCreate.", "fields_and_connections": [{"name": "code", "type": "pageCreate", "description": "Creates a page.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "PageDeleteUserError", "description": "An error that occurs during the execution of PageDelete.", "fields_and_connections": [{"name": "code", "type": "pageDelete", "description": "Deletes a page.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "PageEdge", "description": "An auto-generated type which holds one Page and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "Page!", "description": "The item at the end of PageEdge.", "not_nullable": true}], "examples": []}, {"name": "PageUpdateUserError", "description": "An error that occurs during the execution of PageUpdate.", "fields_and_connections": [{"name": "code", "type": "pageUpdate", "description": "Updates a page.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "PaymentCustomizationEdge", "description": "An auto-generated type which holds one PaymentCustomization and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "PaymentCustomization!", "description": "The item at the end of PaymentCustomizationEdge.", "not_nullable": true}], "examples": []}, {"name": "PaymentReminderSendUserError", "description": "An error that occurs during the execution of PaymentReminderSend.", "fields_and_connections": [{"name": "code", "type": "paymentReminderSend", "description": "Sends an email payment reminder for a payment schedule.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "PaymentScheduleEdge", "description": "An auto-generated type which holds one PaymentSchedule and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "PaymentSchedule!", "description": "The item at the end of PaymentScheduleEdge.", "not_nullable": true}], "examples": []}, {"name": "PaymentTermsCreateUserError", "description": "An error that occurs during the execution of PaymentTermsCreate.", "fields_and_connections": [{"name": "code", "type": "paymentTermsCreate", "description": "Create payment terms on an order. To create payment terms on a draft order, use a draft order mutation and include the request with the DraftOrderInput.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "PaymentTermsDeleteUserError", "description": "An error that occurs during the execution of PaymentTermsDelete.", "fields_and_connections": [{"name": "code", "type": "paymentTermsDelete", "description": "Delete payment terms for an order. To delete payment terms on a draft order, use a draft order mutation and include the request with the DraftOrderInput.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "PaymentTermsUpdateUserError", "description": "An error that occurs during the execution of PaymentTermsUpdate.", "fields_and_connections": [{"name": "code", "type": "paymentTermsUpdate", "description": "Update payment terms on an order. To update payment terms on a draft order, use a draft order mutation and include the request with the DraftOrderInput.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "PriceListEdge", "description": "An auto-generated type which holds one PriceList and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "PriceList!", "description": "The item at the end of PriceListEdge.", "not_nullable": true}], "examples": []}, {"name": "PriceListFixedPricesByProductBulkUpdateUserError", "description": "Error codes for failed price list fixed prices by product bulk update operations.", "fields_and_connections": [{"name": "code", "type": "priceListFixedPricesByProductUpdate", "description": "Updates the fixed prices for all variants for a product on a price list. You can use the priceListFixedPricesByProductUpdate mutation to set or remove a fixed price for all variants of a product associated with the price list.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "PriceListPriceEdge", "description": "An auto-generated type which holds one PriceListPrice and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "PriceListPrice!", "description": "The item at the end of PriceListPriceEdge.", "not_nullable": true}], "examples": []}, {"name": "PriceListPriceUserError", "description": "An error for a failed price list price operation.", "fields_and_connections": [{"name": "code", "type": "priceListFixedPricesAdd", "description": "Creates or updates fixed prices on a price list. You can use the priceListFixedPricesAdd mutation to set a fixed price for specific product variants. This lets you change product variant pricing on a per country basis. Any existing fixed price list prices for these variants will be overwritten.", "not_nullable": false}, {"name": "code", "type": "priceListFixedPricesDelete", "description": "Deletes specific fixed prices from a price list using a product variant ID. You can use the priceListFixedPricesDelete mutation to delete a set of fixed prices from a price list. After deleting the set of fixed prices from the price list, the price of each product variant reverts to the original price that was determined by the price list adjustment.", "not_nullable": false}, {"name": "code", "type": "priceListFixedPricesUpdate", "description": "Updates fixed prices on a price list. You can use the priceListFixedPricesUpdate mutation to set a fixed price for specific product variants or to delete prices for variants associated with the price list.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "PriceListUserError", "description": "Error codes for failed contextual pricing operations.", "fields_and_connections": [{"name": "code", "type": "priceListCreate", "description": "Creates a price list. You can use the priceListCreate mutation to create a new price list and associate it with a catalog. This enables you to sell your products with contextual pricing.", "not_nullable": false}, {"name": "code", "type": "priceListDelete", "description": "Deletes a price list. For example, you can delete a price list so that it no longer applies for products in the associated market.", "not_nullable": false}, {"name": "code", "type": "priceListUpdate", "description": "Updates a price list.\nIf you modify the currency, then any fixed prices set on the price list will be deleted.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "PriceRuleDiscountCodeEdge", "description": "An auto-generated type which holds one PriceRuleDiscountCode and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "PriceRuleDiscountCode!", "description": "The item at the end of PriceRuleDiscountCodeEdge.", "not_nullable": true}], "examples": []}, {"name": "PrivacyFeaturesDisableUserError", "description": "An error that occurs during the execution of PrivacyFeaturesDisable.", "fields_and_connections": [{"name": "code", "type": "privacyFeaturesDisable", "description": "Disable a shop's privacy features.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "ProductBundleComponentEdge", "description": "An auto-generated type which holds one ProductBundleComponent and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "ProductBundleComponent!", "description": "The item at the end of ProductBundleComponentEdge.", "not_nullable": true}], "examples": []}, {"name": "ProductBundleMutationUserError", "description": "Defines errors encountered while managing a product bundle.", "fields_and_connections": [{"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "ProductChangeStatusUserError", "description": "An error that occurs during the execution of ProductChangeStatus.", "fields_and_connections": [{"name": "code", "type": "productChangeStatus", "description": "Changes the status of a product. This allows you to set the availability of the product across all channels. Use productUpdate instead.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "ProductEdge", "description": "An auto-generated type which holds one Product and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "Product!", "description": "The item at the end of ProductEdge.", "not_nullable": true}], "examples": []}, {"name": "ProductFeedCreateUserError", "description": "An error that occurs during the execution of ProductFeedCreate.", "fields_and_connections": [{"name": "code", "type": "productFeedCreate", "description": "Creates a product feed for a specific publication.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "ProductFeedDeleteUserError", "description": "An error that occurs during the execution of ProductFeedDelete.", "fields_and_connections": [{"name": "code", "type": "productFeedDelete", "description": "Deletes a product feed for a specific publication.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "ProductFeedEdge", "description": "An auto-generated type which holds one ProductFeed and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "ProductFeed!", "description": "The item at the end of ProductFeedEdge.", "not_nullable": true}], "examples": []}, {"name": "ProductFullSyncUserError", "description": "An error that occurs during the execution of ProductFullSync.", "fields_and_connections": [{"name": "code", "type": "productFullSync", "description": "Runs the full product sync for a given shop.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "ProductOptionsCreateUserError", "description": "Error codes for failed ProductOptionsCreate mutation.", "fields_and_connections": [{"name": "code", "type": "productOptionsCreate", "description": "Creates options on a product.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "ProductOptionsDeleteUserError", "description": "Error codes for failed ProductOptionsDelete mutation.", "fields_and_connections": [{"name": "code", "type": "productOptionsDelete", "description": "Deletes the specified options.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "ProductOptionsReorderUserError", "description": "Error codes for failed ProductOptionsReorder mutation.", "fields_and_connections": [{"name": "code", "type": "productOptionsReorder", "description": "Reorders options and option values on a product, causing product variants to alter their position.\nOptions order take precedence over option values order. Depending on the existing product variants,\nsome input orders might not be achieved.\nExample:\nExisting product variants:\n[\"Red / Small\", \"Green / Medium\", \"Blue / Small\"].\nNew order:\n[\n{\nname: \"Size\", values: [{ name: \"Small\" }, { name: \"Medium\" }],\nname: \"Color\", values: [{ name: \"Green\" }, { name: \"Red\" }, { name: \"Blue\" }]\n}\n].\nDescription:\nVariants with \"Green\" value are expected to appear before variants with \"Red\" and \"Blue\" values.\nHowever, \"Size\" option appears before \"Color\".\nTherefore, output will be:\n[\"Small / \"Red\", \"Small / Blue\", \"Medium / Green\"].", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "ProductOptionUpdateUserError", "description": "Error codes for failed ProductOptionUpdate mutation.", "fields_and_connections": [{"name": "code", "type": "productOptionUpdate", "description": "Updates a product option.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "ProductPublicationEdge", "description": "An auto-generated type which holds one ProductPublication and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "ProductPublication!", "description": "The item at the end of ProductPublicationEdge.", "not_nullable": true}], "examples": []}, {"name": "ProductSetUserError", "description": "Defines errors for ProductSet mutation.", "fields_and_connections": [{"name": "code", "type": "productSet", "description": "Creates or updates a product in a single request.\nUse this mutation when syncing information from an external data source into Shopify.\nWhen using this mutation to update a product, specify that product's id in the input.\nAny list field (e.g.\ncollections,\nmetafields,\nvariants)\nwill be updated so that all included entries are either created or updated, and all existing entries not\nincluded will be deleted.\nAll other fields will be updated to the value passed. Omitted fields will not be updated.\nWhen run in synchronous mode, you will get the product back in the response.\nFor versions 2024-04 and earlier, the synchronous mode has an input limit of 100 variants.\nThis limit has been removed for versions 2024-07 and later.\nIn asynchronous mode, you will instead get a\nProductSetOperation\nobject back. You can then use the\nproductOperation query to\nretrieve the updated product data. This query uses the ProductSetOperation object to\ncheck the status of the operation and to retrieve the details of the updated product and its variants.\nIf you need to update a subset of variants, use one of the bulk variant mutations:\n\nproductVariantsBulkCreate\nproductVariantsBulkUpdate\nproductVariantsBulkDelete\n\nIf you need to update options, use one of the product option mutations:\n\nproductOptionsCreate\nproductOptionUpdate\nproductOptionsDelete\nproductOptionsReorder\n\nSee our guide to\nsync product data from an external source\nfor more.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "ProductVariantComponentEdge", "description": "An auto-generated type which holds one ProductVariantComponent and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "ProductVariantComponent!", "description": "The item at the end of ProductVariantComponentEdge.", "not_nullable": true}], "examples": []}, {"name": "ProductVariantEdge", "description": "An auto-generated type which holds one ProductVariant and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "ProductVariant!", "description": "The item at the end of ProductVariantEdge.", "not_nullable": true}], "examples": []}, {"name": "ProductVariantPricePairEdge", "description": "An auto-generated type which holds one ProductVariantPricePair and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "ProductVariantPricePair!", "description": "The item at the end of ProductVariantPricePairEdge.", "not_nullable": true}], "examples": []}, {"name": "ProductVariantRelationshipBulkUpdateUserError", "description": "An error that occurs during the execution of ProductVariantRelationshipBulkUpdate.", "fields_and_connections": [{"name": "code", "type": "productVariantRelationshipBulkUpdate", "description": "Creates new bundles, updates existing bundles, and removes bundle components for one or multiple bundles.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "ProductVariantsBulkCreateUserError", "description": "Error codes for failed product variant bulk create mutations.", "fields_and_connections": [{"name": "code", "type": "productVariantsBulkCreate", "description": "Creates multiple variants in a single product. This mutation can be called directly or via the bulkOperation.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "ProductVariantsBulkDeleteUserError", "description": "Error codes for failed bulk variant delete mutations.", "fields_and_connections": [{"name": "code", "type": "productVariantsBulkDelete", "description": "Deletes multiple variants in a single product. This mutation can be called directly or via the bulkOperation.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "ProductVariantsBulkReorderUserError", "description": "Error codes for failed bulk product variants reorder operation.", "fields_and_connections": [{"name": "code", "type": "productVariantsBulkReorder", "description": "Reorders multiple variants in a single product. This mutation can be called directly or via the bulkOperation.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "ProductVariantsBulkUpdateUserError", "description": "Error codes for failed variant bulk update mutations.", "fields_and_connections": [{"name": "code", "type": "productVariantsBulkUpdate", "description": "Updates multiple variants in a single product. This mutation can be called directly or via the bulkOperation.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "PublicationEdge", "description": "An auto-generated type which holds one Publication and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "Publication!", "description": "The item at the end of PublicationEdge.", "not_nullable": true}], "examples": []}, {"name": "PublicationUserError", "description": "Defines errors encountered while managing a publication.", "fields_and_connections": [{"name": "code", "type": "publicationCreate", "description": "Creates a publication.", "not_nullable": false}, {"name": "code", "type": "publicationDelete", "description": "Deletes a publication.", "not_nullable": false}, {"name": "code", "type": "publicationUpdate", "description": "Updates a publication.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "PubSubWebhookSubscriptionCreateUserError", "description": "An error that occurs during the execution of PubSubWebhookSubscriptionCreate.", "fields_and_connections": [{"name": "code", "type": "pubSubWebhookSubscriptionCreate", "description": "Creates a new Google Cloud Pub/Sub webhook subscription.\nBuilding an app? If you only use app-specific webhooks, you won't need this. App-specific webhook subscriptions specified in your shopify.app.toml may be easier. They are automatically kept up to date by Shopify & require less maintenance. Please read About managing webhook subscriptions.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "PubSubWebhookSubscriptionUpdateUserError", "description": "An error that occurs during the execution of PubSubWebhookSubscriptionUpdate.", "fields_and_connections": [{"name": "code", "type": "pubSubWebhookSubscriptionUpdate", "description": "Updates a Google Cloud Pub/Sub webhook subscription.\nBuilding an app? If you only use app-specific webhooks, you won't need this. App-specific webhook subscriptions specified in your shopify.app.toml may be easier. They are automatically kept up to date by Shopify & require less maintenance. Please read About managing webhook subscriptions.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "QuantityPriceBreakEdge", "description": "An auto-generated type which holds one QuantityPriceBreak and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "QuantityPriceBreak!", "description": "The item at the end of QuantityPriceBreakEdge.", "not_nullable": true}], "examples": []}, {"name": "QuantityPricingByVariantUserError", "description": "Error codes for failed volume pricing operations.", "fields_and_connections": [{"name": "code", "type": "quantityPricingByVariantUpdate", "description": "Updates quantity pricing on a price list. You can use the quantityPricingByVariantUpdate mutation to set fixed prices, quantity rules, and quantity price breaks. This mutation does not allow partial successes. If any of the requested resources fail to update, none of the requested resources will be updated. Delete operations are executed before create operations.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "QuantityRuleEdge", "description": "An auto-generated type which holds one QuantityRule and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "QuantityRule!", "description": "The item at the end of QuantityRuleEdge.", "not_nullable": true}], "examples": []}, {"name": "QuantityRuleUserError", "description": "An error for a failed quantity rule operation.", "fields_and_connections": [{"name": "code", "type": "quantityRulesAdd", "description": "Creates or updates existing quantity rules on a price list.\nYou can use the quantityRulesAdd mutation to set order level minimums, maximumums and increments for specific product variants.", "not_nullable": false}, {"name": "code", "type": "quantityRulesDelete", "description": "Deletes specific quantity rules from a price list using a product variant ID.\nYou can use the quantityRulesDelete mutation to delete a set of quantity rules from a price list.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "RefundEdge", "description": "An auto-generated type which holds one Refund and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "Refund!", "description": "The item at the end of RefundEdge.", "not_nullable": true}], "examples": []}, {"name": "RefundLineItemEdge", "description": "An auto-generated type which holds one RefundLineItem and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "RefundLineItem!", "description": "The item at the end of RefundLineItemEdge.", "not_nullable": true}], "examples": []}, {"name": "RefundShippingLineEdge", "description": "An auto-generated type which holds one RefundShippingLine and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "RefundShippingLine!", "description": "The item at the end of RefundShippingLineEdge.", "not_nullable": true}], "examples": []}, {"name": "ResourcePublicationEdge", "description": "An auto-generated type which holds one ResourcePublication and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "ResourcePublication!", "description": "The item at the end of ResourcePublicationEdge.", "not_nullable": true}], "examples": []}, {"name": "ResourcePublicationV2Edge", "description": "An auto-generated type which holds one ResourcePublicationV2 and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "ResourcePublicationV2!", "description": "The item at the end of ResourcePublicationV2Edge.", "not_nullable": true}], "examples": []}, {"name": "ReturnableFulfillmentEdge", "description": "An auto-generated type which holds one ReturnableFulfillment and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "ReturnableFulfillment!", "description": "The item at the end of ReturnableFulfillmentEdge.", "not_nullable": true}], "examples": []}, {"name": "ReturnableFulfillmentLineItemEdge", "description": "An auto-generated type which holds one ReturnableFulfillmentLineItem and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "ReturnableFulfillmentLineItem!", "description": "The item at the end of ReturnableFulfillmentLineItemEdge.", "not_nullable": true}], "examples": []}, {"name": "ReturnEdge", "description": "An auto-generated type which holds one Return and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "Return!", "description": "The item at the end of ReturnEdge.", "not_nullable": true}], "examples": []}, {"name": "ReturnLineItemTypeEdge", "description": "An auto-generated type which holds one ReturnLineItemType and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "ReturnLineItemType!", "description": "The item at the end of ReturnLineItemTypeEdge.", "not_nullable": true}], "examples": []}, {"name": "ReturnUserError", "description": "An error that occurs during the execution of a return mutation.", "fields_and_connections": [{"name": "code", "type": "returnApproveRequest", "description": "Approves a customer's return request.\nIf this mutation is successful, then the Return.status field of the\napproved return is set to OPEN.", "not_nullable": false}, {"name": "code", "type": "returnCancel", "description": "Cancels a return and restores the items back to being fulfilled.\nCanceling a return is only available before any work has been done\non the return (such as an inspection or refund).", "not_nullable": false}, {"name": "code", "type": "returnClose", "description": "Indicates a return is complete, either when a refund has been made and items restocked,\nor simply when it has been marked as returned in the system.", "not_nullable": false}, {"name": "code", "type": "returnCreate", "description": "Creates a return.", "not_nullable": false}, {"name": "code", "type": "returnDeclineRequest", "description": "Declines a return on an order.\nWhen a return is declined, each ReturnLineItem.fulfillmentLineItem can be associated to a new return.\nUse the ReturnCreate or ReturnRequest mutation to initiate a new return.", "not_nullable": false}, {"name": "code", "type": "returnLineItemRemoveFromReturn", "description": "Removes return lines from a return.", "not_nullable": false}, {"name": "code", "type": "returnRefund", "description": "Refunds a return when its status is OPEN or CLOSED and associates it with the related return request.", "not_nullable": false}, {"name": "code", "type": "returnReopen", "description": "Reopens a closed return.", "not_nullable": false}, {"name": "code", "type": "returnRequest", "description": "A customer's return request that hasn't been approved or declined.\nThis mutation sets the value of the Return.status field to REQUESTED.\nTo create a return that has the Return.status field set to OPEN, use the returnCreate mutation.", "not_nullable": false}, {"name": "code", "type": "reverseDeliveryCreateWithShipping", "description": "Creates a new reverse delivery with associated external shipping information.", "not_nullable": false}, {"name": "code", "type": "reverseDeliveryShippingUpdate", "description": "Updates a reverse delivery with associated external shipping information.", "not_nullable": false}, {"name": "code", "type": "reverseFulfillmentOrderDispose", "description": "Disposes reverse fulfillment order line items.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "ReverseDeliveryEdge", "description": "An auto-generated type which holds one ReverseDelivery and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "ReverseDelivery!", "description": "The item at the end of ReverseDeliveryEdge.", "not_nullable": true}], "examples": []}, {"name": "ReverseDeliveryLineItemEdge", "description": "An auto-generated type which holds one ReverseDeliveryLineItem and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "ReverseDeliveryLineItem!", "description": "The item at the end of ReverseDeliveryLineItemEdge.", "not_nullable": true}], "examples": []}, {"name": "ReverseFulfillmentOrderEdge", "description": "An auto-generated type which holds one ReverseFulfillmentOrder and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "ReverseFulfillmentOrder!", "description": "The item at the end of ReverseFulfillmentOrderEdge.", "not_nullable": true}], "examples": []}, {"name": "ReverseFulfillmentOrderLineItemEdge", "description": "An auto-generated type which holds one ReverseFulfillmentOrderLineItem and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "ReverseFulfillmentOrderLineItem!", "description": "The item at the end of ReverseFulfillmentOrderLineItemEdge.", "not_nullable": true}], "examples": []}, {"name": "SaleEdge", "description": "An auto-generated type which holds one Sale and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "Sale!", "description": "The item at the end of SaleEdge.", "not_nullable": true}], "examples": []}, {"name": "SalesAgreementEdge", "description": "An auto-generated type which holds one SalesAgreement and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "SalesAgreement!", "description": "The item at the end of SalesAgreementEdge.", "not_nullable": true}], "examples": []}, {"name": "SavedSearchEdge", "description": "An auto-generated type which holds one SavedSearch and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "SavedSearch!", "description": "The item at the end of SavedSearchEdge.", "not_nullable": true}], "examples": []}, {"name": "ScriptTagEdge", "description": "An auto-generated type which holds one ScriptTag and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "ScriptTag!", "description": "The item at the end of ScriptTagEdge.", "not_nullable": true}], "examples": []}, {"name": "SearchResultEdge", "description": "An auto-generated type which holds one SearchResult and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "SearchResult!", "description": "The item at the end of SearchResultEdge.", "not_nullable": true}], "examples": []}, {"name": "SegmentEdge", "description": "An auto-generated type which holds one Segment and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "Segment!", "description": "The item at the end of SegmentEdge.", "not_nullable": true}], "examples": []}, {"name": "SegmentFilterEdge", "description": "An auto-generated type which holds one SegmentFilter and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "SegmentFilter!", "description": "The item at the end of SegmentFilterEdge.", "not_nullable": true}], "examples": []}, {"name": "SegmentMigrationEdge", "description": "An auto-generated type which holds one SegmentMigration and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "SegmentMigration!", "description": "The item at the end of SegmentMigrationEdge.", "not_nullable": true}], "examples": []}, {"name": "SegmentValueEdge", "description": "An auto-generated type which holds one SegmentValue and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "SegmentValue!", "description": "The item at the end of SegmentValueEdge.", "not_nullable": true}], "examples": []}, {"name": "SellingPlanEdge", "description": "An auto-generated type which holds one SellingPlan and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "SellingPlan!", "description": "The item at the end of SellingPlanEdge.", "not_nullable": true}], "examples": []}, {"name": "SellingPlanGroupEdge", "description": "An auto-generated type which holds one SellingPlanGroup and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "SellingPlanGroup!", "description": "The item at the end of SellingPlanGroupEdge.", "not_nullable": true}], "examples": []}, {"name": "SellingPlanGroupUserError", "description": "Represents a selling plan group custom error.", "fields_and_connections": [{"name": "code", "type": "productJoinSellingPlanGroups", "description": "Adds multiple selling plan groups to a product.", "not_nullable": false}, {"name": "code", "type": "productLeaveSellingPlanGroups", "description": "Removes multiple groups from a product.", "not_nullable": false}, {"name": "code", "type": "productVariantJoinSellingPlanGroups", "description": "Adds multiple selling plan groups to a product variant.", "not_nullable": false}, {"name": "code", "type": "productVariantLeaveSellingPlanGroups", "description": "Remove multiple groups from a product variant.", "not_nullable": false}, {"name": "code", "type": "sellingPlanGroupAddProducts", "description": "Adds multiple products to a selling plan group.", "not_nullable": false}, {"name": "code", "type": "sellingPlanGroupAddProductVariants", "description": "Adds multiple product variants to a selling plan group.", "not_nullable": false}, {"name": "code", "type": "sellingPlanGroupCreate", "description": "Creates a Selling Plan Group.", "not_nullable": false}, {"name": "code", "type": "sellingPlanGroupDelete", "description": "Delete a Selling Plan Group. This does not affect subscription contracts.", "not_nullable": false}, {"name": "code", "type": "sellingPlanGroupRemoveProducts", "description": "Removes multiple products from a selling plan group.", "not_nullable": false}, {"name": "code", "type": "sellingPlanGroupRemoveProductVariants", "description": "Removes multiple product variants from a selling plan group.", "not_nullable": false}, {"name": "code", "type": "sellingPlanGroupUpdate", "description": "Update a Selling Plan Group.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "ShippingLineEdge", "description": "An auto-generated type which holds one ShippingLine and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "ShippingLine!", "description": "The item at the end of ShippingLineEdge.", "not_nullable": true}], "examples": []}, {"name": "ShopifyFunctionEdge", "description": "An auto-generated type which holds one ShopifyFunction and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "ShopifyFunction!", "description": "The item at the end of ShopifyFunctionEdge.", "not_nullable": true}], "examples": []}, {"name": "ShopifyPaymentsBalanceTransactionEdge", "description": "An auto-generated type which holds one ShopifyPaymentsBalanceTransaction and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "ShopifyPaymentsBalanceTransaction!", "description": "The item at the end of ShopifyPaymentsBalanceTransactionEdge.", "not_nullable": true}], "examples": []}, {"name": "ShopifyPaymentsBankAccountEdge", "description": "An auto-generated type which holds one ShopifyPaymentsBankAccount and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "ShopifyPaymentsBankAccount!", "description": "The item at the end of ShopifyPaymentsBankAccountEdge.", "not_nullable": true}], "examples": []}, {"name": "ShopifyPaymentsDisputeEdge", "description": "An auto-generated type which holds one ShopifyPaymentsDispute and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "ShopifyPaymentsDispute!", "description": "The item at the end of ShopifyPaymentsDisputeEdge.", "not_nullable": true}], "examples": []}, {"name": "ShopifyPaymentsPayoutAlternateCurrencyCreateUserError", "description": "An error that occurs during the execution of ShopifyPaymentsPayoutAlternateCurrencyCreate.", "fields_and_connections": [{"name": "code", "type": "shopifyPaymentsPayoutAlternateCurrencyCreate", "description": "Creates an alternate currency payout for a Shopify Payments account.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "ShopifyPaymentsPayoutEdge", "description": "An auto-generated type which holds one ShopifyPaymentsPayout and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "ShopifyPaymentsPayout!", "description": "The item at the end of ShopifyPaymentsPayoutEdge.", "not_nullable": true}], "examples": []}, {"name": "ShopPolicyUserError", "description": "An error that occurs during the execution of a shop policy mutation.", "fields_and_connections": [{"name": "code", "type": "shopPolicyUpdate", "description": "Updates a shop policy.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "ShopResourceFeedbackCreateUserError", "description": "An error that occurs during the execution of ShopResourceFeedbackCreate.", "fields_and_connections": [{"name": "code", "type": "shopResourceFeedbackCreate", "description": "The ResourceFeedback object lets your app report the status of shops and their resources. For example, if\nyour app is a marketplace channel, then you can use resource feedback to alert merchants that they need to connect their marketplace account by signing in.\nResource feedback notifications are displayed to the merchant on the home screen of their Shopify admin, and in the product details view for any products that are published to your app.\nThis resource should be used only in cases where you're describing steps that a merchant is required to complete. If your app offers optional or promotional set-up steps, or if it makes recommendations, then don't use resource feedback to let merchants know about them.\nSending feedback on a shop\nYou can send resource feedback on a shop to let the merchant know what steps they need to take to make sure that your app is set up correctly. Feedback can have one of two states: requires_action or success. You need to send a requires_action feedback request for each step that the merchant is required to complete.\nIf there are multiple set-up steps that require merchant action, then send feedback with a state of requires_action as merchants complete prior steps. And to remove the feedback message from the Shopify admin, send a success feedback request.\nImportant\nSending feedback replaces previously sent feedback for the shop. Send a new shopResourceFeedbackCreate mutation to push the latest state of a shop or its resources to Shopify.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "StaffMemberEdge", "description": "An auto-generated type which holds one StaffMember and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "StaffMember!", "description": "The item at the end of StaffMemberEdge.", "not_nullable": true}], "examples": []}, {"name": "StandardMetafieldDefinitionEnableUserError", "description": "An error that occurs during the execution of StandardMetafieldDefinitionEnable.", "fields_and_connections": [{"name": "code", "type": "standardMetafieldDefinitionEnable", "description": "Activates the specified standard metafield definition from its template.\nRefer to the list of standard metafield definition templates.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "StandardMetafieldDefinitionTemplateEdge", "description": "An auto-generated type which holds one StandardMetafieldDefinitionTemplate and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "StandardMetafieldDefinitionTemplate!", "description": "The item at the end of StandardMetafieldDefinitionTemplateEdge.", "not_nullable": true}], "examples": []}, {"name": "StoreCreditAccountCreditUserError", "description": "An error that occurs during the execution of StoreCreditAccountCredit.", "fields_and_connections": [{"name": "code", "type": "storeCreditAccountCredit", "description": "Creates a credit transaction that increases the store credit account balance by the given amount.\nThis operation will create an account if one does not already exist.\nA store credit account owner can hold multiple accounts each with a different currency.\nUse the most appropriate currency for the given store credit account owner.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "StoreCreditAccountDebitUserError", "description": "An error that occurs during the execution of StoreCreditAccountDebit.", "fields_and_connections": [{"name": "code", "type": "storeCreditAccountDebit", "description": "Creates a debit transaction that decreases the store credit account balance by the given amount.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "StoreCreditAccountEdge", "description": "An auto-generated type which holds one StoreCreditAccount and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "StoreCreditAccount!", "description": "The item at the end of StoreCreditAccountEdge.", "not_nullable": true}], "examples": []}, {"name": "StoreCreditAccountTransactionEdge", "description": "An auto-generated type which holds one StoreCreditAccountTransaction and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "StoreCreditAccountTransaction!", "description": "The item at the end of StoreCreditAccountTransactionEdge.", "not_nullable": true}], "examples": []}, {"name": "StorefrontAccessTokenEdge", "description": "An auto-generated type which holds one StorefrontAccessToken and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "StorefrontAccessToken!", "description": "The item at the end of StorefrontAccessTokenEdge.", "not_nullable": true}], "examples": []}, {"name": "StringEdge", "description": "An auto-generated type which holds one String and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "String!", "description": "The item at the end of StringEdge.", "not_nullable": true}], "examples": []}, {"name": "SubscriptionBillingAttemptEdge", "description": "An auto-generated type which holds one SubscriptionBillingAttempt and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "SubscriptionBillingAttempt!", "description": "The item at the end of SubscriptionBillingAttemptEdge.", "not_nullable": true}], "examples": []}, {"name": "SubscriptionBillingCycleBulkUserError", "description": "Represents an error that happens during the execution of subscriptionBillingCycles mutations.", "fields_and_connections": [{"name": "code", "type": "subscriptionBillingCycleBulkCharge", "description": "Asynchronously queries and charges all subscription billing cycles whose billingAttemptExpectedDate values fall within a specified date range and meet additional filtering criteria. The results of this action can be retrieved using the subscriptionBillingCycleBulkResults query.", "not_nullable": false}, {"name": "code", "type": "subscriptionBillingCycleBulkSearch", "description": "Asynchronously queries all subscription billing cycles whose billingAttemptExpectedDate values fall within a specified date range and meet additional filtering criteria. The results of this action can be retrieved using the subscriptionBillingCycleBulkResults query.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "SubscriptionBillingCycleEdge", "description": "An auto-generated type which holds one SubscriptionBillingCycle and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "SubscriptionBillingCycle!", "description": "The item at the end of SubscriptionBillingCycleEdge.", "not_nullable": true}], "examples": []}, {"name": "SubscriptionBillingCycleSkipUserError", "description": "An error that occurs during the execution of SubscriptionBillingCycleSkip.", "fields_and_connections": [{"name": "code", "type": "subscriptionBillingCycleSkip", "description": "Skips a Subscription Billing Cycle.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "SubscriptionBillingCycleUnskipUserError", "description": "An error that occurs during the execution of SubscriptionBillingCycleUnskip.", "fields_and_connections": [{"name": "code", "type": "subscriptionBillingCycleUnskip", "description": "Unskips a Subscription Billing Cycle.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "SubscriptionBillingCycleUserError", "description": "The possible errors for a subscription billing cycle.", "fields_and_connections": [{"name": "code", "type": "subscriptionBillingCycleEditDelete", "description": "Delete the schedule and contract edits of the selected subscription billing cycle.", "not_nullable": false}, {"name": "code", "type": "subscriptionBillingCycleEditsDelete", "description": "Delete the current and future schedule and contract edits of a list of subscription billing cycles.", "not_nullable": false}, {"name": "code", "type": "subscriptionBillingCycleScheduleEdit", "description": "Modify the schedule of a specific billing cycle.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "SubscriptionContractEdge", "description": "An auto-generated type which holds one SubscriptionContract and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "SubscriptionContract!", "description": "The item at the end of SubscriptionContractEdge.", "not_nullable": true}], "examples": []}, {"name": "SubscriptionContractStatusUpdateUserError", "description": "Represents a subscription contract status update error.", "fields_and_connections": [{"name": "code", "type": "subscriptionContractActivate", "description": "Activates a Subscription Contract. Contract status must be either active, paused, or failed.", "not_nullable": false}, {"name": "code", "type": "subscriptionContractCancel", "description": "Cancels a Subscription Contract.", "not_nullable": false}, {"name": "code", "type": "subscriptionContractExpire", "description": "Expires a Subscription Contract.", "not_nullable": false}, {"name": "code", "type": "subscriptionContractFail", "description": "Fails a Subscription Contract.", "not_nullable": false}, {"name": "code", "type": "subscriptionContractPause", "description": "Pauses a Subscription Contract.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "SubscriptionContractUserError", "description": "Represents a Subscription Contract error.", "fields_and_connections": [{"name": "code", "type": "subscriptionContractSetNextBillingDate", "description": "Sets the next billing date of a Subscription Contract. This field is managed by the apps.\nAlternatively you can utilize our\nBilling Cycles APIs,\nwhich provide auto-computed billing dates and additional functionalities.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "SubscriptionDiscountEdge", "description": "An auto-generated type which holds one SubscriptionDiscount and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "SubscriptionDiscount!", "description": "The item at the end of SubscriptionDiscountEdge.", "not_nullable": true}], "examples": []}, {"name": "SubscriptionDraftUserError", "description": "Represents a Subscription Draft error.", "fields_and_connections": [{"name": "code", "type": "subscriptionBillingCycleContractDraftCommit", "description": "Commits the updates of a Subscription Billing Cycle Contract draft.", "not_nullable": false}, {"name": "code", "type": "subscriptionBillingCycleContractDraftConcatenate", "description": "Concatenates a contract to a Subscription Draft.", "not_nullable": false}, {"name": "code", "type": "subscriptionBillingCycleContractEdit", "description": "Edit the contents of a subscription contract for the specified billing cycle.", "not_nullable": false}, {"name": "code", "type": "subscriptionContractAtomicCreate", "description": "Creates a Subscription Contract.", "not_nullable": false}, {"name": "code", "type": "subscriptionContractCreate", "description": "Creates a Subscription Contract Draft.\nYou can submit all the desired information for the draft using Subscription Draft Input object.\nYou can also update the draft using the Subscription Contract Update mutation.\nThe draft is not saved until you call the Subscription Draft Commit mutation.", "not_nullable": false}, {"name": "code", "type": "subscriptionContractProductChange", "description": "Allows for the easy change of a Product in a Contract or a Product price change.", "not_nullable": false}, {"name": "code", "type": "subscriptionContractUpdate", "description": "The subscriptionContractUpdate mutation allows you to create a draft of an existing subscription contract. This draft can be reviewed and modified as needed. Once the draft is committed with subscriptionDraftCommit, the changes are applied to the original subscription contract.", "not_nullable": false}, {"name": "code", "type": "subscriptionDraftCommit", "description": "Commits the updates of a Subscription Contract draft.", "not_nullable": false}, {"name": "code", "type": "subscriptionDraftDiscountAdd", "description": "Adds a subscription discount to a subscription draft.", "not_nullable": false}, {"name": "code", "type": "subscriptionDraftDiscountCodeApply", "description": "Applies a code discount on the subscription draft.", "not_nullable": false}, {"name": "code", "type": "subscriptionDraftDiscountRemove", "description": "Removes a subscription discount from a subscription draft.", "not_nullable": false}, {"name": "code", "type": "subscriptionDraftDiscountUpdate", "description": "Updates a subscription discount on a subscription draft.", "not_nullable": false}, {"name": "code", "type": "subscriptionDraftFreeShippingDiscountAdd", "description": "Adds a subscription free shipping discount to a subscription draft.", "not_nullable": false}, {"name": "code", "type": "subscriptionDraftFreeShippingDiscountUpdate", "description": "Updates a subscription free shipping discount on a subscription draft.", "not_nullable": false}, {"name": "code", "type": "subscriptionDraftLineAdd", "description": "Adds a subscription line to a subscription draft.", "not_nullable": false}, {"name": "code", "type": "subscriptionDraftLineRemove", "description": "Removes a subscription line from a subscription draft.", "not_nullable": false}, {"name": "code", "type": "subscriptionDraftLineUpdate", "description": "Updates a subscription line on a subscription draft.", "not_nullable": false}, {"name": "code", "type": "subscriptionDraftUpdate", "description": "Updates a Subscription Draft.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "SubscriptionLineEdge", "description": "An auto-generated type which holds one SubscriptionLine and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "SubscriptionLine!", "description": "The item at the end of SubscriptionLineEdge.", "not_nullable": true}], "examples": []}, {"name": "SubscriptionManualDiscountEdge", "description": "An auto-generated type which holds one SubscriptionManualDiscount and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "SubscriptionManualDiscount!", "description": "The item at the end of SubscriptionManualDiscountEdge.", "not_nullable": true}], "examples": []}, {"name": "TaxAppConfigureUserError", "description": "An error that occurs during the execution of TaxAppConfigure.", "fields_and_connections": [{"name": "code", "type": "taxAppConfigure", "description": "Allows tax app configurations for tax partners.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "TaxonomyCategoryAttributeEdge", "description": "An auto-generated type which holds one TaxonomyCategoryAttribute and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "TaxonomyCategoryAttribute!", "description": "The item at the end of TaxonomyCategoryAttributeEdge.", "not_nullable": true}], "examples": []}, {"name": "TaxonomyCategoryEdge", "description": "An auto-generated type which holds one TaxonomyCategory and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "TaxonomyCategory!", "description": "The item at the end of TaxonomyCategoryEdge.", "not_nullable": true}], "examples": []}, {"name": "TaxonomyValueEdge", "description": "An auto-generated type which holds one TaxonomyValue and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "TaxonomyValue!", "description": "The item at the end of TaxonomyValueEdge.", "not_nullable": true}], "examples": []}, {"name": "TenderTransactionEdge", "description": "An auto-generated type which holds one TenderTransaction and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "TenderTransaction!", "description": "The item at the end of TenderTransactionEdge.", "not_nullable": true}], "examples": []}, {"name": "ThemeCreateUserError", "description": "An error that occurs during the execution of ThemeCreate.", "fields_and_connections": [{"name": "code", "type": "themeCreate", "description": "Creates a theme using an external URL or for files that were previously uploaded using the\nstagedUploadsCreate mutation.\nThese themes are added to the Themes page in Shopify admin.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "ThemeDeleteUserError", "description": "An error that occurs during the execution of ThemeDelete.", "fields_and_connections": [{"name": "code", "type": "themeDelete", "description": "Deletes a theme.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "ThemePublishUserError", "description": "An error that occurs during the execution of ThemePublish.", "fields_and_connections": [{"name": "code", "type": "themePublish", "description": "Publishes a theme.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "ThemeUpdateUserError", "description": "An error that occurs during the execution of ThemeUpdate.", "fields_and_connections": [{"name": "code", "type": "themeUpdate", "description": "Updates a theme.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "TransactionVoidUserError", "description": "An error that occurs during the execution of TransactionVoid.", "fields_and_connections": [{"name": "code", "type": "transactionVoid", "description": "Trigger the voiding of an uncaptured authorization transaction.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "TranslatableResourceEdge", "description": "An auto-generated type which holds one TranslatableResource and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "TranslatableResource!", "description": "The item at the end of TranslatableResourceEdge.", "not_nullable": true}], "examples": []}, {"name": "TranslationUserError", "description": "Represents an error that happens during the execution of a translation mutation.", "fields_and_connections": [{"name": "code", "type": "marketLocalizationsRegister", "description": "Creates or updates market localizations.", "not_nullable": false}, {"name": "code", "type": "marketLocalizationsRemove", "description": "Deletes market localizations.", "not_nullable": false}, {"name": "code", "type": "translationsRegister", "description": "Creates or updates translations.", "not_nullable": false}, {"name": "code", "type": "translationsRemove", "description": "Deletes translations.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "UrlRedirectBulkDeleteByIdsUserError", "description": "An error that occurs during the execution of UrlRedirectBulkDeleteByIds.", "fields_and_connections": [{"name": "code", "type": "urlRedirectBulkDeleteByIds", "description": "Asynchronously delete URLRedirect\nobjects in bulk by IDs.\nLearn more about URLRedirect\nobjects.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "UrlRedirectBulkDeleteBySavedSearchUserError", "description": "An error that occurs during the execution of UrlRedirectBulkDeleteBySavedSearch.", "fields_and_connections": [{"name": "code", "type": "urlRedirectBulkDeleteBySavedSearch", "description": "Asynchronously delete redirects in bulk.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "UrlRedirectBulkDeleteBySearchUserError", "description": "An error that occurs during the execution of UrlRedirectBulkDeleteBySearch.", "fields_and_connections": [{"name": "code", "type": "urlRedirectBulkDeleteBySearch", "description": "Asynchronously delete redirects in bulk.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "UrlRedirectEdge", "description": "An auto-generated type which holds one UrlRedirect and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "UrlRedirect!", "description": "The item at the end of UrlRedirectEdge.", "not_nullable": true}], "examples": []}, {"name": "UrlRedirectImportUserError", "description": "Represents an error that happens during execution of a redirect import mutation.", "fields_and_connections": [{"name": "code", "type": "urlRedirectImportCreate", "description": "Creates a UrlRedirectImport object.\nAfter creating the UrlRedirectImport object, the UrlRedirectImport request can be performed using the urlRedirectImportSubmit mutation.", "not_nullable": false}, {"name": "code", "type": "urlRedirectImportSubmit", "description": "Submits a UrlRedirectImport request to be processed.\nThe UrlRedirectImport request is first created with the urlRedirectImportCreate mutation.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "UrlRedirectUserError", "description": "Represents an error that happens during execution of a redirect mutation.", "fields_and_connections": [{"name": "code", "type": "urlRedirectCreate", "description": "Creates a UrlRedirect object.", "not_nullable": false}, {"name": "code", "type": "urlRedirectDelete", "description": "Deletes a UrlRedirect object.", "not_nullable": false}, {"name": "code", "type": "urlRedirectUpdate", "description": "Updates a URL redirect.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "UserError", "description": "Represents an error in the input of a mutation.", "fields_and_connections": [{"name": "field", "type": "appPurchaseOneTimeCreate", "description": "Charges a shop for features or services one time.\nThis type of charge is recommended for apps that aren't billed on a recurring basis.\nTest and demo shops aren't charged.", "not_nullable": false}, {"name": "field", "type": "appSubscriptionCancel", "description": "Cancels an app subscription on a store.", "not_nullable": false}, {"name": "field", "type": "appSubscriptionCreate", "description": "Allows an app to charge a store for features or services on a recurring basis.", "not_nullable": false}, {"name": "field", "type": "appSubscriptionLineItemUpdate", "description": "Updates the capped amount on the usage pricing plan of an app subscription line item.", "not_nullable": false}, {"name": "field", "type": "appUsageRecordCreate", "description": "Enables an app to charge a store for features or services on a per-use basis.\nThe usage charge value is counted towards the cappedAmount limit that was specified in the appUsagePricingDetails field when the app subscription was created.\nIf you create an app usage charge that causes the total usage charges in a billing interval to exceed the capped amount, then a Total price exceeds balance remaining error is returned.", "not_nullable": false}, {"name": "field", "type": "bulkOperationCancel", "description": "Starts the cancelation process of a running bulk operation.\nThere may be a short delay from when a cancelation starts until the operation is actually canceled.", "not_nullable": false}, {"name": "field", "type": "collectionAddProducts", "description": "Adds products to a collection.", "not_nullable": false}, {"name": "field", "type": "collectionCreate", "description": "Creates a collection.", "not_nullable": false}, {"name": "field", "type": "collectionDelete", "description": "Deletes a collection.", "not_nullable": false}, {"name": "field", "type": "collectionRemoveProducts", "description": "Removes a set of products from a given collection. The mutation can take a long time to run. Instead of returning an updated collection the mutation returns a job, which should be polled. For use with manual collections only.", "not_nullable": false}, {"name": "field", "type": "collectionReorderProducts", "description": "Asynchronously reorders a set of products within a specified collection. Instead of returning an updated collection, this mutation returns a job, which should be polled. The Collection.sortOrder must be MANUAL. Displaced products will have their position altered in a consistent manner, with no gaps.", "not_nullable": false}, {"name": "field", "type": "collectionUpdate", "description": "Updates a collection.", "not_nullable": false}, {"name": "field", "type": "customerAddressCreate", "description": "Create a new customer address.", "not_nullable": false}, {"name": "field", "type": "customerAddressDelete", "description": "Deletes a customer's address.", "not_nullable": false}, {"name": "field", "type": "customerAddressUpdate", "description": "Update a customer's address information.", "not_nullable": false}, {"name": "field", "type": "customerAddTaxExemptions", "description": "Add tax exemptions for the customer.", "not_nullable": false}, {"name": "field", "type": "customerCreate", "description": "Create a new customer. As of API version 2022-10, apps using protected customer data must meet the protected customer data requirements.", "not_nullable": false}, {"name": "field", "type": "customerDelete", "description": "Delete a customer. As of API version 2022-10, apps using protected customer data must meet the protected customer data requirements.", "not_nullable": false}, {"name": "field", "type": "customerGenerateAccountActivationUrl", "description": "Generate an account activation URL for a customer.", "not_nullable": false}, {"name": "field", "type": "customerPaymentMethodCreditCardCreate", "description": "Creates a credit card payment method for a customer using a session id.\nThese values are only obtained through card imports happening from a PCI compliant environment.\nPlease use customerPaymentMethodRemoteCreate if you are not managing credit cards directly.", "not_nullable": false}, {"name": "field", "type": "customerPaymentMethodCreditCardUpdate", "description": "Updates the credit card payment method for a customer.", "not_nullable": false}, {"name": "field", "type": "customerPaymentMethodRevoke", "description": "Revokes a customer's payment method.", "not_nullable": false}, {"name": "field", "type": "customerPaymentMethodSendUpdateEmail", "description": "Sends a link to the customer so they can update a specific payment method.", "not_nullable": false}, {"name": "field", "type": "customerRemoveTaxExemptions", "description": "Remove tax exemptions from a customer.", "not_nullable": false}, {"name": "field", "type": "customerReplaceTaxExemptions", "description": "Replace tax exemptions for a customer.", "not_nullable": false}, {"name": "field", "type": "customerUpdate", "description": "Update a customer's attributes. As of API version 2022-10, apps using protected customer data must meet the protected customer data requirements.", "not_nullable": false}, {"name": "field", "type": "customerUpdateDefaultAddress", "description": "Updates a customer's default address.", "not_nullable": false}, {"name": "field", "type": "deliveryProfileCreate", "description": "Create a delivery profile.", "not_nullable": false}, {"name": "field", "type": "deliveryProfileRemove", "description": "Enqueue the removal of a delivery profile.", "not_nullable": false}, {"name": "field", "type": "deliveryProfileUpdate", "description": "Update a delivery profile.", "not_nullable": false}, {"name": "field", "type": "deliveryPromiseParticipantsUpdate", "description": "Updates the delivery promise participants by adding or removing owners based on a branded promise handle.", "not_nullable": false}, {"name": "field", "type": "deliverySettingUpdate", "description": "Set the delivery settings for a shop.", "not_nullable": false}, {"name": "field", "type": "deliveryShippingOriginAssign", "description": "Assigns a location as the shipping origin while using legacy compatibility mode for multi-location delivery profiles.", "not_nullable": false}, {"name": "field", "type": "draftOrderBulkAddTags", "description": "Adds tags to multiple draft orders.", "not_nullable": false}, {"name": "field", "type": "draftOrderBulkDelete", "description": "Deletes multiple draft orders.", "not_nullable": false}, {"name": "field", "type": "draftOrderBulkRemoveTags", "description": "Removes tags from multiple draft orders.", "not_nullable": false}, {"name": "field", "type": "draftOrderCalculate", "description": "Calculates the properties of a draft order. Useful for determining information\nsuch as total taxes or price without actually creating a draft order.", "not_nullable": false}, {"name": "field", "type": "draftOrderComplete", "description": "Completes a draft order and creates an order.", "not_nullable": false}, {"name": "field", "type": "draftOrderCreate", "description": "Creates a draft order.", "not_nullable": false}, {"name": "field", "type": "draftOrderCreateFromOrder", "description": "Creates a draft order from order.", "not_nullable": false}, {"name": "field", "type": "draftOrderDelete", "description": "Deletes a draft order.", "not_nullable": false}, {"name": "field", "type": "draftOrderDuplicate", "description": "Duplicates a draft order.", "not_nullable": false}, {"name": "field", "type": "draftOrderInvoicePreview", "description": "Previews a draft order invoice email.", "not_nullable": false}, {"name": "field", "type": "draftOrderInvoiceSend", "description": "Sends an email invoice for a draft order.", "not_nullable": false}, {"name": "field", "type": "draftOrderUpdate", "description": "Updates a draft order.\nIf a checkout has been started for a draft order, any update to the draft will unlink the checkout. Checkouts\nare created but not immediately completed when opening the merchant credit card modal in the admin, and when a\nbuyer opens the invoice URL. This is usually fine, but there is an edge case where a checkout is in progress\nand the draft is updated before the checkout completes. This will not interfere with the checkout and order\ncreation, but if the link from draft to checkout is broken the draft will remain open even after the order is\ncreated.", "not_nullable": false}, {"name": "field", "type": "eventBridgeWebhookSubscriptionCreate", "description": "Creates a new Amazon EventBridge webhook subscription.\nBuilding an app? If you only use app-specific webhooks, you won't need this. App-specific webhook subscriptions specified in your shopify.app.toml may be easier. They are automatically kept up to date by Shopify & require less maintenance. Please read About managing webhook subscriptions.", "not_nullable": false}, {"name": "field", "type": "eventBridgeWebhookSubscriptionUpdate", "description": "Updates an Amazon EventBridge webhook subscription.\nBuilding an app? If you only use app-specific webhooks, you won't need this. App-specific webhook subscriptions specified in your shopify.app.toml may be easier. They are automatically kept up to date by Shopify & require less maintenance. Please read About managing webhook subscriptions.", "not_nullable": false}, {"name": "field", "type": "flowTriggerReceive", "description": "Triggers any workflows that begin with the trigger specified in the request body. To learn more, refer to Create Shopify Flow triggers.", "not_nullable": false}, {"name": "field", "type": "fulfillmentCancel", "description": "Cancels a fulfillment.", "not_nullable": false}, {"name": "field", "type": "fulfillmentCreate", "description": "Creates a fulfillment for one or many fulfillment orders.\nThe fulfillment orders are associated with the same order and are assigned to the same location.", "not_nullable": false}, {"name": "field", "type": "fulfillmentEventCreate", "description": "Creates a fulfillment event for a specified fulfillment.", "not_nullable": false}, {"name": "field", "type": "fulfillmentOrderAcceptCancellationRequest", "description": "Accept a cancellation request sent to a fulfillment service for a fulfillment order.", "not_nullable": false}, {"name": "field", "type": "fulfillmentOrderAcceptFulfillmentRequest", "description": "Accepts a fulfillment request sent to a fulfillment service for a fulfillment order.", "not_nullable": false}, {"name": "field", "type": "fulfillmentOrderCancel", "description": "Marks a fulfillment order as canceled.", "not_nullable": false}, {"name": "field", "type": "fulfillmentOrderClose", "description": "Marks an in-progress fulfillment order as incomplete,\nindicating the fulfillment service is unable to ship any remaining items,\nand closes the fulfillment request.\nThis mutation can only be called for fulfillment orders that meet the following criteria:\n\nAssigned to a fulfillment service location,\nThe fulfillment request has been accepted,\nThe fulfillment order status is IN_PROGRESS.\n\nThis mutation can only be called by the fulfillment service app that accepted the fulfillment request.\nCalling this mutation returns the control of the fulfillment order to the merchant, allowing them to\nmove the fulfillment order line items to another location and fulfill from there,\nremove and refund the line items, or to request fulfillment from the same fulfillment service again.\nClosing a fulfillment order is explained in\nthe fulfillment service guide.", "not_nullable": false}, {"name": "field", "type": "fulfillmentOrderMove", "description": "Changes the location which is assigned to fulfill a number of unfulfilled fulfillment order line items.\nMoving a fulfillment order will fail in the following circumstances:\n\nThe fulfillment order is closed.\nThe destination location has never stocked the requested inventory item.\nThe API client doesn't have the correct permissions.\n\nLine items which have already been fulfilled can't be re-assigned\nand will always remain assigned to the original location.\nYou can't change the assigned location while a fulfillment order has a\nrequest status\nof SUBMITTED, ACCEPTED, CANCELLATION_REQUESTED, or CANCELLATION_REJECTED.\nThese request statuses mean that a fulfillment order is awaiting action by a fulfillment service\nand can't be re-assigned without first having the fulfillment service accept a cancellation request.\nThis behavior is intended to prevent items from being fulfilled by multiple locations or fulfillment services.\nHow re-assigning line items affects fulfillment orders\nFirst scenario: Re-assign all line items belonging to a fulfillment order to a new location.\nIn this case, the\nassignedLocation\nof the original fulfillment order will be updated to the new location.\nSecond scenario: Re-assign a subset of the line items belonging to a fulfillment order to a new location.\nYou can specify a subset of line items using the fulfillmentOrderLineItems parameter\n(available as of the 2023-04 API version),\nor specify that the original fulfillment order contains line items which have already been fulfilled.\nIf the new location is already assigned to another active fulfillment order, on the same order, then\na new fulfillment order is created. The existing fulfillment order is closed and line items are recreated\nin a new fulfillment order.", "not_nullable": false}, {"name": "field", "type": "fulfillmentOrderOpen", "description": "Marks a scheduled fulfillment order as open.", "not_nullable": false}, {"name": "field", "type": "fulfillmentOrderRejectCancellationRequest", "description": "Rejects a cancellation request sent to a fulfillment service for a fulfillment order.", "not_nullable": false}, {"name": "field", "type": "fulfillmentOrderRejectFulfillmentRequest", "description": "Rejects a fulfillment request sent to a fulfillment service for a fulfillment order.", "not_nullable": false}, {"name": "field", "type": "fulfillmentOrderSubmitCancellationRequest", "description": "Sends a cancellation request to the fulfillment service of a fulfillment order.", "not_nullable": false}, {"name": "field", "type": "fulfillmentOrderSubmitFulfillmentRequest", "description": "Sends a fulfillment request to the fulfillment service of a fulfillment order.", "not_nullable": false}, {"name": "field", "type": "fulfillmentServiceCreate", "description": "Creates a fulfillment service.\nFulfillment service location\nWhen creating a fulfillment service, a new location will be automatically created on the shop\nand will be associated with this fulfillment service.\nThis location will be named after the fulfillment service and inherit the shop's address.\nIf you are using API version 2023-10 or later, and you need to specify custom attributes for the fulfillment service location\n(for example, to change its address to a country different from the shop's country),\nuse the\nLocationEdit\nmutation after creating the fulfillment service.", "not_nullable": false}, {"name": "field", "type": "fulfillmentServiceDelete", "description": "Deletes a fulfillment service.", "not_nullable": false}, {"name": "field", "type": "fulfillmentServiceUpdate", "description": "Updates a fulfillment service.\nIf you are using API version 2023-10 or later,\nand you need to update the location managed by the fulfillment service\n(for example, to change the address of a fulfillment service),\nuse the\nLocationEdit\nmutation.", "not_nullable": false}, {"name": "field", "type": "fulfillmentTrackingInfoUpdate", "description": "Updates tracking information for a fulfillment.", "not_nullable": false}, {"name": "field", "type": "giftCardUpdate", "description": "Update a gift card.", "not_nullable": false}, {"name": "field", "type": "inventoryActivate", "description": "Activate an inventory item at a location.", "not_nullable": false}, {"name": "field", "type": "inventoryDeactivate", "description": "Removes an inventory item's quantities from a location, and turns off inventory at the location.", "not_nullable": false}, {"name": "field", "type": "inventoryItemUpdate", "description": "Updates an inventory item.", "not_nullable": false}, {"name": "field", "type": "marketingActivityCreate", "description": "Create new marketing activity.", "not_nullable": false}, {"name": "field", "type": "marketingActivityUpdate", "description": "Updates a marketing activity with the latest information.", "not_nullable": false}, {"name": "field", "type": "metafieldsDelete", "description": "Deletes multiple metafields in bulk.", "not_nullable": false}, {"name": "field", "type": "orderCancel", "description": "Cancels an order.", "not_nullable": false}, {"name": "field", "type": "orderCapture", "description": "Captures payment for an authorized transaction on an order. An order can only be captured if it has a successful authorization transaction. Capturing an order will claim the money reserved by the authorization. orderCapture can be used to capture multiple times as long as the OrderTransaction is multi-capturable. To capture a partial payment, the included amount value should be less than the total order amount. Multi-capture is available only to stores on a Shopify Plus plan.", "not_nullable": false}, {"name": "field", "type": "orderClose", "description": "Closes an open order.", "not_nullable": false}, {"name": "field", "type": "orderEditAddCustomItem", "description": "Adds a custom line item to an existing order. For example, you could add a gift wrapping service as a custom line item. To learn how to edit existing orders, refer to Edit an existing order with Admin API.", "not_nullable": false}, {"name": "field", "type": "orderEditAddLineItemDiscount", "description": "Adds a discount to a line item on the current order edit. For more information on how to use the GraphQL Admin API to edit an existing order, refer to Edit existing orders.", "not_nullable": false}, {"name": "field", "type": "orderEditAddVariant", "description": "Adds a line item from an existing product variant. As of API version 2025-04, the orderEditAddVariant API will respect the contextual pricing of the variant.", "not_nullable": false}, {"name": "field", "type": "orderEditBegin", "description": "Starts editing an order. Mutations are operating on OrderEdit.\nAll order edits start with orderEditBegin, have any number of orderEdit* mutations made, and end with orderEditCommit.", "not_nullable": false}, {"name": "field", "type": "orderEditCommit", "description": "Applies and saves staged changes to an order. Mutations are operating on OrderEdit.\nAll order edits start with orderEditBegin, have any number of orderEdit* mutations made, and end with orderEditCommit.", "not_nullable": false}, {"name": "field", "type": "orderEditSetQuantity", "description": "Sets the quantity of a line item on an order that is being edited. For more information on how to use the GraphQL Admin API to edit an existing order, refer to Edit existing orders.", "not_nullable": false}, {"name": "field", "type": "orderMarkAsPaid", "description": "Marks an order as paid. You can only mark an order as paid if it isn't already fully paid.", "not_nullable": false}, {"name": "field", "type": "orderOpen", "description": "Opens a closed order.", "not_nullable": false}, {"name": "field", "type": "orderUpdate", "description": "Updates the attributes of an order, such as the customer's email, the shipping address for the order,\ntags, and metafields associated with the order.\nIf you need to make significant updates to an order, such as adding or removing line items, changing\nquantities, or modifying discounts, then use\nthe orderEditBegin\nmutation instead. The orderEditBegin mutation initiates an order editing session,\nallowing you to make multiple changes before finalizing them. Learn more about using the orderEditBegin\nmutation to edit existing orders.\nLearn how to build apps that integrate with\norder management and fulfillment processes.", "not_nullable": false}, {"name": "field", "type": "productBundleCreate", "description": "Creates a new componentized product.", "not_nullable": false}, {"name": "field", "type": "productBundleUpdate", "description": "Updates a componentized product.", "not_nullable": false}, {"name": "field", "type": "productCreate", "description": "Creates a product\nwith attributes such as title, description, and vendor.\nYou can use the productCreate mutation to define\noptions and\nvalues\nfor products with\nproduct variants,\nsuch as different sizes or colors.\nTo create multiple product variants for a single product and manage prices, use the\nproductVariantsBulkCreate\nmutation.\nTo create or update a product in a single request, use the\nproductSet mutation.\nLearn more about the product model\nand adding product data.", "not_nullable": false}, {"name": "field", "type": "productDelete", "description": "Deletes a product, including all associated variants and media.\nAs of API version 2023-01, if you need to delete a large product, such as one that has many\nvariants\nthat are active at several\nlocations,\nyou may encounter timeout errors. To avoid these timeout errors, you can instead use the asynchronous\nProductDeleteAsync\nmutation.", "not_nullable": false}, {"name": "field", "type": "productDuplicate", "description": "Duplicates a product.\nIf you need to duplicate a large product, such as one that has many\nvariants\nthat are active at several\nlocations,\nyou might encounter timeout errors.\nTo avoid these timeout errors, you can instead duplicate the product asynchronously.\nIn API version 2024-10 and higher, include synchronous: false argument in this mutation to perform the duplication asynchronously.\nIn API version 2024-07 and lower, use the asynchronous ProductDuplicateAsyncV2.\nMetafield values are not duplicated if the unique values capability is enabled.", "not_nullable": false}, {"name": "field", "type": "productReorderMedia", "description": "Asynchronously reorders the media attached to a product.", "not_nullable": false}, {"name": "field", "type": "productUpdate", "description": "Updates a product.\nFor versions 2024-01 and older:\nIf you update a product and only include some variants in the update,\nthen any variants not included will be deleted.\nTo safely manage variants without the risk of\ndeleting excluded variants, use\nproductVariantsBulkUpdate.\nIf you want to update a single variant, then use\nproductVariantUpdate.", "not_nullable": false}, {"name": "field", "type": "publishablePublish", "description": "Publishes a resource to a channel. If the resource is a product, then it's visible in the channel only if the product status is active. Products that are sold exclusively on subscription (requiresSellingPlan: true) can be published only on online stores.", "not_nullable": false}, {"name": "field", "type": "publishablePublishToCurrentChannel", "description": "Publishes a resource to current channel. If the resource is a product, then it's visible in the channel only if the product status is active. Products that are sold exclusively on subscription (requiresSellingPlan: true) can be published only on online stores.", "not_nullable": false}, {"name": "field", "type": "publishableUnpublish", "description": "Unpublishes a resource from a channel. If the resource is a product, then it's visible in the channel only if the product status is active.", "not_nullable": false}, {"name": "field", "type": "publishableUnpublishToCurrentChannel", "description": "Unpublishes a resource from the current channel. If the resource is a product, then it's visible in the channel only if the product status is active.", "not_nullable": false}, {"name": "field", "type": "refundCreate", "description": "Creates a refund.", "not_nullable": false}, {"name": "field", "type": "savedSearchCreate", "description": "Creates a saved search.", "not_nullable": false}, {"name": "field", "type": "savedSearchDelete", "description": "Delete a saved search.", "not_nullable": false}, {"name": "field", "type": "savedSearchUpdate", "description": "Updates a saved search.", "not_nullable": false}, {"name": "field", "type": "scriptTagCreate", "description": "Theme app extensions\nYour app might not pass App Store review if it uses script tags instead of theme app extensions. All new apps, and apps that integrate with Online Store 2.0 themes, should use theme app extensions, such as app blocks or app embed blocks. Script tags are an alternative you can use with only vintage themes. Learn more.\n\nScript tag deprecation\nScript tags will be sunset for the Order status page on August 28, 2025. Upgrade to Checkout Extensibility before this date. Shopify Scripts will continue to work alongside Checkout Extensibility until August 28, 2025.\n\n\nCreates a new script tag.", "not_nullable": false}, {"name": "field", "type": "scriptTagDelete", "description": "Theme app extensions\nYour app might not pass App Store review if it uses script tags instead of theme app extensions. All new apps, and apps that integrate with Online Store 2.0 themes, should use theme app extensions, such as app blocks or app embed blocks. Script tags are an alternative you can use with only vintage themes. Learn more.\n\nScript tag deprecation\nScript tags will be sunset for the Order status page on August 28, 2025. Upgrade to Checkout Extensibility before this date. Shopify Scripts will continue to work alongside Checkout Extensibility until August 28, 2025.\n\n\nDeletes a script tag.", "not_nullable": false}, {"name": "field", "type": "scriptTagUpdate", "description": "Theme app extensions\nYour app might not pass App Store review if it uses script tags instead of theme app extensions. All new apps, and apps that integrate with Online Store 2.0 themes, should use theme app extensions, such as app blocks or app embed blocks. Script tags are an alternative you can use with only vintage themes. Learn more.\n\nScript tag deprecation\nScript tags will be sunset for the Order status page on August 28, 2025. Upgrade to Checkout Extensibility before this date. Shopify Scripts will continue to work alongside Checkout Extensibility until August 28, 2025.\n\n\nUpdates a script tag.", "not_nullable": false}, {"name": "field", "type": "segmentCreate", "description": "Creates a segment.", "not_nullable": false}, {"name": "field", "type": "segmentDelete", "description": "Deletes a segment.", "not_nullable": false}, {"name": "field", "type": "segmentUpdate", "description": "Updates a segment.", "not_nullable": false}, {"name": "field", "type": "shippingPackageDelete", "description": "Deletes a shipping package.", "not_nullable": false}, {"name": "field", "type": "shippingPackageMakeDefault", "description": "Set a shipping package as the default.\nThe default shipping package is the one used to calculate shipping costs on checkout.", "not_nullable": false}, {"name": "field", "type": "shippingPackageUpdate", "description": "Updates a shipping package.", "not_nullable": false}, {"name": "field", "type": "shopLocaleDisable", "description": "Deletes a locale for a shop. This also deletes all translations of this locale.", "not_nullable": false}, {"name": "field", "type": "shopLocaleEnable", "description": "Adds a locale for a shop. The newly added locale is in the unpublished state.", "not_nullable": false}, {"name": "field", "type": "shopLocaleUpdate", "description": "Updates a locale for a shop.", "not_nullable": false}, {"name": "field", "type": "stagedUploadsCreate", "description": "Creates staged upload targets for each input. This is the first step in the upload process.\nThe returned staged upload targets' URL and parameter fields can be used to send a request\nto upload the file described in the corresponding input.\nFor more information on the upload process, refer to\nUpload media to Shopify.", "not_nullable": false}, {"name": "field", "type": "storefrontAccessTokenCreate", "description": "Creates a storefront access token for use with the Storefront API.\nAn app can have a maximum of 100 active storefront access tokens for each shop.\nGet started with the Storefront API.", "not_nullable": false}, {"name": "field", "type": "storefrontAccessTokenDelete", "description": "Deletes a storefront access token.", "not_nullable": false}, {"name": "field", "type": "tagsAdd", "description": "Add tags to an order, a draft order, a customer, a product, or an online store article.", "not_nullable": false}, {"name": "field", "type": "tagsRemove", "description": "Remove tags from an order, a draft order, a customer, a product, or an online store article.", "not_nullable": false}, {"name": "field", "type": "urlRedirectBulkDeleteAll", "description": "Asynchronously delete URL redirects in bulk.", "not_nullable": false}, {"name": "field", "type": "webhookSubscriptionCreate", "description": "Creates a new webhook subscription.\nBuilding an app? If you only use app-specific webhooks, you won't need this. App-specific webhook subscriptions specified in your shopify.app.toml may be easier. They are automatically kept up to date by Shopify & require less maintenance. Please read About managing webhook subscriptions.", "not_nullable": false}, {"name": "field", "type": "webhookSubscriptionDelete", "description": "Deletes a webhook subscription.\nBuilding an app? If you only use app-specific webhooks, you won't need this. App-specific webhook subscriptions specified in your shopify.app.toml may be easier. They are automatically kept up to date by Shopify & require less maintenance. Please read About managing webhook subscriptions.", "not_nullable": false}, {"name": "field", "type": "webhookSubscriptionUpdate", "description": "Updates a webhook subscription.\nBuilding an app? If you only use app-specific webhooks, you won't need this. App-specific webhook subscriptions specified in your shopify.app.toml may be easier. They are automatically kept up to date by Shopify & require less maintenance. Please read About managing webhook subscriptions.", "not_nullable": false}, {"name": "field", "type": "collectionPublish", "description": "Publishes a collection to a channel. Use publishablePublish instead.", "not_nullable": false}, {"name": "field", "type": "collectionUnpublish", "description": "Unpublishes a collection. Use publishableUnpublish instead.", "not_nullable": false}, {"name": "field", "type": "draftOrderCreateMerchantCheckout", "description": "Creates a merchant checkout for the given draft order. This mutation is no longer supported.", "not_nullable": false}, {"name": "field", "type": "fulfillmentCreateV2", "description": "Creates a fulfillment for one or many fulfillment orders.\nThe fulfillment orders are associated with the same order and are assigned to the same location. Use fulfillmentCreate instead.", "not_nullable": false}, {"name": "field", "type": "fulfillmentTrackingInfoUpdateV2", "description": "Updates tracking information for a fulfillment. Use fulfillmentTrackingInfoUpdate instead.", "not_nullable": false}, {"name": "field", "type": "orderEditRemoveLineItemDiscount", "description": "Removes a line item discount that was applied as part of an order edit. Use orderEditRemoveDiscount instead.", "not_nullable": false}, {"name": "field", "type": "productCreateMedia", "description": "Creates media for a product. Use productUpdate or productSet instead.", "not_nullable": false}, {"name": "field", "type": "productDeleteMedia", "description": "Deletes media for a product. Use fileUpdate instead.", "not_nullable": false}, {"name": "field", "type": "productPublish", "description": "Publishes a product. Products that are sold exclusively on subscription (requiresSellingPlan: true) can only be published on online stores. Use publishablePublish instead.", "not_nullable": false}, {"name": "field", "type": "productUnpublish", "description": "Unpublishes a product. Use publishableUnpublish instead.", "not_nullable": false}, {"name": "field", "type": "productUpdateMedia", "description": "Updates media for a product. Use fileUpdate instead.", "not_nullable": false}, {"name": "field", "type": "stagedUploadTargetGenerate", "description": "Generates the URL and signed paramaters needed to upload an asset to Shopify. Use stagedUploadsCreate instead.", "not_nullable": false}, {"name": "field", "type": "stagedUploadTargetsGenerate", "description": "Uploads multiple images. Use stagedUploadsCreate instead.", "not_nullable": false}, {"name": "field", "type": "DisplayableError", "description": "The path to the input field that caused the error.", "not_nullable": false}], "examples": []}, {"name": "ValidationEdge", "description": "An auto-generated type which holds one Validation and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "Validation!", "description": "The item at the end of ValidationEdge.", "not_nullable": true}], "examples": []}, {"name": "ValidationUserError", "description": "An error that occurs during the execution of a validation mutation.", "fields_and_connections": [{"name": "code", "type": "validationCreate", "description": "Creates a validation.", "not_nullable": false}, {"name": "code", "type": "validationDelete", "description": "Deletes a validation.", "not_nullable": false}, {"name": "code", "type": "validationUpdate", "description": "Update a validation.", "not_nullable": false}, {"name": "code", "type": "DisplayableError", "description": "The error code.", "not_nullable": false}], "examples": []}, {"name": "WebhookSubscriptionEdge", "description": "An auto-generated type which holds one WebhookSubscription and a cursor during pagination.", "fields_and_connections": [{"name": "cursor", "type": "String!", "description": "The position of each node in an array, used in pagination.", "not_nullable": true}, {"name": "node", "type": "WebhookSubscription!", "description": "The item at the end of WebhookSubscriptionEdge.", "not_nullable": true}], "examples": []}]}]}